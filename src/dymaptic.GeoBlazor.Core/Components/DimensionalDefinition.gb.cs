// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    A dimensional definition defines a filter based on one variable and one dimension.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-DimensionalDefinition.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class DimensionalDefinition
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public DimensionalDefinition()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="dimensionName">
    ///     The dimension associated with the variable.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-DimensionalDefinition.html#dimensionName">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="isSlice">
    ///     Indicates whether the values indicate slices (rather than ranges).
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-DimensionalDefinition.html#isSlice">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="variableName">
    ///     The required variable name by which to filter.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-DimensionalDefinition.html#variableName">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="values">
    ///     An array of single values or tuples [min, max] each defining a range of valid values along the specified dimension.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-DimensionalDefinition.html#values">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public DimensionalDefinition(
        string? dimensionName = null,
        bool? isSlice = null,
        string? variableName = null,
        DimensionalDefinitionValues? values = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        DimensionName = dimensionName;
        IsSlice = isSlice;
        VariableName = variableName;
        Values = values;
#pragma warning restore BL0005    
    }
    
    
#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the DimensionName property.
    /// </summary>
    public async Task<string?> GetDimensionName()
    {
        if (CoreJsModule is null)
        {
            return DimensionName;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return DimensionName;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "dimensionName");
        if (result is not null)
        {
#pragma warning disable BL0005
             DimensionName = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DimensionName)] = DimensionName;
        }
         
        return DimensionName;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the IsSlice property.
    /// </summary>
    public async Task<bool?> GetIsSlice()
    {
        if (CoreJsModule is null)
        {
            return IsSlice;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return IsSlice;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "isSlice");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             IsSlice = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(IsSlice)] = IsSlice;
        }
         
        return IsSlice;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Values property.
    /// </summary>
    public async Task<DimensionalDefinitionValues?> GetValues()
    {
        if (CoreJsModule is null)
        {
            return Values;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Values;
        }

        // get the property value
        DimensionalDefinitionValues? result = await JsComponentReference!.InvokeAsync<DimensionalDefinitionValues?>("getProperty",
            CancellationTokenSource.Token, "values");
        if (result is not null)
        {
#pragma warning disable BL0005
             Values = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Values)] = Values;
        }
         
        return Values;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the VariableName property.
    /// </summary>
    public async Task<string?> GetVariableName()
    {
        if (CoreJsModule is null)
        {
            return VariableName;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return VariableName;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "variableName");
        if (result is not null)
        {
#pragma warning disable BL0005
             VariableName = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(VariableName)] = VariableName;
        }
         
        return VariableName;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the DimensionName property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDimensionName(string value)
    {
#pragma warning disable BL0005
        DimensionName = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DimensionName)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "dimensionName", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the IsSlice property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetIsSlice(bool value)
    {
#pragma warning disable BL0005
        IsSlice = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(IsSlice)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "isSlice", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Values property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetValues(DimensionalDefinitionValues value)
    {
#pragma warning disable BL0005
        Values = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Values)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "values", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the VariableName property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetVariableName(string value)
    {
#pragma warning disable BL0005
        VariableName = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(VariableName)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "variableName", value);
    }
    
#endregion




}
