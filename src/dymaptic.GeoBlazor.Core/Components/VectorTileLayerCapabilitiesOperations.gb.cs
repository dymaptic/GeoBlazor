// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Indicates operations that can be performed on the service.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class VectorTileLayerCapabilitiesOperations : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public VectorTileLayerCapabilitiesOperations()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="supportsExportTiles">
    ///     Indicates if the tiles from the service can be exported.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="supportsTileMap">
    ///     Indicates if the service exposes a tile map that describes the presence of tiles.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public VectorTileLayerCapabilitiesOperations(
        bool? supportsExportTiles = null,
        bool? supportsTileMap = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        SupportsExportTiles = supportsExportTiles;
        SupportsTileMap = supportsTileMap;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Indicates if the tiles from the service can be exported.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsExportTiles { get; set; }
    
    /// <summary>
    ///     Indicates if the service exposes a tile map that describes the presence of tiles.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsTileMap { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsExportTiles property.
    /// </summary>
    public async Task<bool?> GetSupportsExportTiles()
    {
        if (CoreJsModule is null)
        {
            return SupportsExportTiles;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return SupportsExportTiles;
        }

        // get the property value
#pragma warning disable BL0005
        SupportsExportTiles = await CoreJsModule!.InvokeAsync<bool>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsExportTiles");
#pragma warning restore BL0005
         ModifiedParameters[nameof(SupportsExportTiles)] = SupportsExportTiles;
        return SupportsExportTiles;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsTileMap property.
    /// </summary>
    public async Task<bool?> GetSupportsTileMap()
    {
        if (CoreJsModule is null)
        {
            return SupportsTileMap;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return SupportsTileMap;
        }

        // get the property value
#pragma warning disable BL0005
        SupportsTileMap = await CoreJsModule!.InvokeAsync<bool>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsTileMap");
#pragma warning restore BL0005
         ModifiedParameters[nameof(SupportsTileMap)] = SupportsTileMap;
        return SupportsTileMap;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the SupportsExportTiles property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsExportTiles(bool value)
    {
#pragma warning disable BL0005
        SupportsExportTiles = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsExportTiles)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsExportTiles", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsTileMap property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsTileMap(bool value)
    {
#pragma warning disable BL0005
        SupportsTileMap = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsTileMap)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsTileMap", value);
    }
    
#endregion




}
