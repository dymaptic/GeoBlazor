// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.WebMap.html">GeoBlazor Docs</a>
///     Loads a <a target="_blank" href="https://doc.arcgis.com/en/arcgis-online/create-maps/make-your-first-map.htm">WebMap</a> from <a target="_blank" href="https://www.arcgis.com/home/">ArcGIS Online</a> or <a target="_blank" href="https://enterprise.arcgis.com/en/portal/latest/administer/windows/what-is-portal-for-arcgis-.htm">ArcGIS Enterprise portal</a> into a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html">MapView</a>.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class WebMap : ITimeSliderViewModelDocument,
    ITimeSliderWidgetDocument,
    ITimeUtilsDocument,
    IVersionManagementUtilsInput
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public WebMap()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="applicationProperties">
    ///     The applicationProperties contains the viewing properties of the WebMap.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#applicationProperties">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="authoringApp">
    ///     The name of the application that authored the WebMap.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#authoringApp">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="authoringAppVersion">
    ///     The version of the application that authored the WebMap.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#authoringAppVersion">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="bookmarks">
    ///     An array of saved geographic extents that allow end users to quickly navigate to a particular area of interest.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#bookmarks">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="floorInfo">
    ///     When a web map is configured as floor-aware, it has a floorInfo property defined.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#floorInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="geotriggersInfo">
    ///     Information relating to a list of Geotriggers.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#geotriggersInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="initialViewProperties">
    ///     The initial view of the WebMap.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#initialViewProperties">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="portalItem">
    ///     The portal item from which the WebMap is loaded.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#portalItem">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="presentation">
    ///     Provides multiple slides.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#presentation">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="thumbnailUrl">
    ///     The URL to the thumbnail used for the webmap.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#thumbnailUrl">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="utilityNetworks">
    ///     The utilityNetworks object contains a collection of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-networks-UtilityNetwork.html">UtilityNetworks</a> saved on the web map.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#utilityNetworks">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="widgets">
    ///     The widgets object contains widgets that are exposed to the user.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#widgets">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public WebMap(
        ApplicationProperties? applicationProperties = null,
        string? authoringApp = null,
        string? authoringAppVersion = null,
        IReadOnlyList<Bookmark>? bookmarks = null,
        MapFloorInfo? floorInfo = null,
        GeotriggersInfo? geotriggersInfo = null,
        InitialViewProperties? initialViewProperties = null,
        PortalItem? portalItem = null,
        object? presentation = null,
        string? thumbnailUrl = null,
        IReadOnlyList<IUtilityNetwork>? utilityNetworks = null,
        WebMapWidgets? widgets = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        ApplicationProperties = applicationProperties;
        AuthoringApp = authoringApp;
        AuthoringAppVersion = authoringAppVersion;
        Bookmarks = bookmarks;
        FloorInfo = floorInfo;
        GeotriggersInfo = geotriggersInfo;
        InitialViewProperties = initialViewProperties;
        PortalItem = portalItem;
        Presentation = presentation;
        ThumbnailUrl = thumbnailUrl;
        UtilityNetworks = utilityNetworks;
        Widgets = widgets;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The applicationProperties contains the viewing properties of the WebMap.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#applicationProperties">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public ApplicationProperties? ApplicationProperties { get; set; }
    
    /// <summary>
    ///     The name of the application that authored the WebMap.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#authoringApp">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? AuthoringApp { get; set; }
    
    /// <summary>
    ///     The version of the application that authored the WebMap.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#authoringAppVersion">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? AuthoringAppVersion { get; set; }
    
    /// <summary>
    ///     An array of saved geographic extents that allow end users to quickly navigate to a particular area of interest.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#bookmarks">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<Bookmark>? Bookmarks { get; set; }
    
    /// <summary>
    ///     When a web map is configured as floor-aware, it has a floorInfo property defined.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#floorInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public MapFloorInfo? FloorInfo { get; set; }
    
    /// <summary>
    ///     Information relating to a list of Geotriggers.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#geotriggersInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public GeotriggersInfo? GeotriggersInfo { get; set; }
    
    /// <summary>
    ///     The initial view of the WebMap.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#initialViewProperties">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public InitialViewProperties? InitialViewProperties { get; set; }
    
    /// <summary>
    ///     Indicates whether the instance has loaded.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#loaded">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public bool? Loaded { get; protected set; }
    
    /// <summary>
    ///     The Error object returned if an error occurred while loading.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#loadError">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public Error? LoadError { get; protected set; }
    
    /// <summary>
    ///     Represents the status of a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#load">load</a> operation.
    ///     default not-loaded
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#loadStatus">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public LoadStatus? LoadStatus { get; protected set; }
    
    /// <summary>
    ///     Provides multiple slides.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#presentation">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public object? Presentation { get; set; }
    
    /// <summary>
    ///     The version of the source document from which the WebMap was read.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#sourceVersion">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public WebMapSourceVersion? SourceVersion { get; protected set; }
    
    /// <summary>
    ///     The URL to the thumbnail used for the webmap.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#thumbnailUrl">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? ThumbnailUrl { get; set; }
    
    /// <summary>
    ///     The utilityNetworks object contains a collection of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-networks-UtilityNetwork.html">UtilityNetworks</a> saved on the web map.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#utilityNetworks">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<IUtilityNetwork>? UtilityNetworks { get; set; }
    
    /// <summary>
    ///     The widgets object contains widgets that are exposed to the user.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#widgets">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public WebMapWidgets? Widgets { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the ApplicationProperties property.
    /// </summary>
    public async Task<ApplicationProperties?> GetApplicationProperties()
    {
        if (CoreJsModule is null)
        {
            return ApplicationProperties;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ApplicationProperties;
        }

        ApplicationProperties? result = await JsComponentReference.InvokeAsync<ApplicationProperties?>(
            "getApplicationProperties", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            ApplicationProperties = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(ApplicationProperties)] = ApplicationProperties;
        }
        
        return ApplicationProperties;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the AuthoringApp property.
    /// </summary>
    public async Task<string?> GetAuthoringApp()
    {
        if (CoreJsModule is null)
        {
            return AuthoringApp;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return AuthoringApp;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "authoringApp");
        if (result is not null)
        {
#pragma warning disable BL0005
             AuthoringApp = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(AuthoringApp)] = AuthoringApp;
        }
         
        return AuthoringApp;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the AuthoringAppVersion property.
    /// </summary>
    public async Task<string?> GetAuthoringAppVersion()
    {
        if (CoreJsModule is null)
        {
            return AuthoringAppVersion;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return AuthoringAppVersion;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "authoringAppVersion");
        if (result is not null)
        {
#pragma warning disable BL0005
             AuthoringAppVersion = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(AuthoringAppVersion)] = AuthoringAppVersion;
        }
         
        return AuthoringAppVersion;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Bookmarks property.
    /// </summary>
    public async Task<IReadOnlyList<Bookmark>?> GetBookmarks()
    {
        if (CoreJsModule is null)
        {
            return Bookmarks;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Bookmarks;
        }

        IReadOnlyList<Bookmark>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<Bookmark>?>(
            "getBookmarks", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Bookmarks = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Bookmarks)] = Bookmarks;
        }
        
        return Bookmarks;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FloorInfo property.
    /// </summary>
    public async Task<MapFloorInfo?> GetFloorInfo()
    {
        if (CoreJsModule is null)
        {
            return FloorInfo;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return FloorInfo;
        }

        MapFloorInfo? result = await JsComponentReference.InvokeAsync<MapFloorInfo?>(
            "getFloorInfo", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            FloorInfo = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(FloorInfo)] = FloorInfo;
        }
        
        return FloorInfo;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the GeotriggersInfo property.
    /// </summary>
    public async Task<GeotriggersInfo?> GetGeotriggersInfo()
    {
        if (CoreJsModule is null)
        {
            return GeotriggersInfo;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return GeotriggersInfo;
        }

        GeotriggersInfo? result = await JsComponentReference.InvokeAsync<GeotriggersInfo?>(
            "getGeotriggersInfo", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            GeotriggersInfo = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(GeotriggersInfo)] = GeotriggersInfo;
        }
        
        return GeotriggersInfo;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the InitialViewProperties property.
    /// </summary>
    public async Task<InitialViewProperties?> GetInitialViewProperties()
    {
        if (CoreJsModule is null)
        {
            return InitialViewProperties;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return InitialViewProperties;
        }

        InitialViewProperties? result = await JsComponentReference.InvokeAsync<InitialViewProperties?>(
            "getInitialViewProperties", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            InitialViewProperties = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(InitialViewProperties)] = InitialViewProperties;
        }
        
        return InitialViewProperties;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Loaded property.
    /// </summary>
    public async Task<bool?> GetLoaded()
    {
        if (CoreJsModule is null)
        {
            return Loaded;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Loaded;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "loaded");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Loaded = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Loaded)] = Loaded;
        }
         
        return Loaded;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LoadError property.
    /// </summary>
    public async Task<Error?> GetLoadError()
    {
        if (CoreJsModule is null)
        {
            return LoadError;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return LoadError;
        }

        // get the property value
        Error? result = await JsComponentReference!.InvokeAsync<Error?>("getProperty",
            CancellationTokenSource.Token, "loadError");
        if (result is not null)
        {
#pragma warning disable BL0005
             LoadError = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(LoadError)] = LoadError;
        }
         
        return LoadError;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LoadStatus property.
    /// </summary>
    public async Task<LoadStatus?> GetLoadStatus()
    {
        if (CoreJsModule is null)
        {
            return LoadStatus;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return LoadStatus;
        }

        // get the property value
        JsNullableEnumWrapper<LoadStatus>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<LoadStatus>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "loadStatus");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             LoadStatus = (LoadStatus)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(LoadStatus)] = LoadStatus;
        }
         
        return LoadStatus;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Presentation property.
    /// </summary>
    public async Task<object?> GetPresentation()
    {
        if (CoreJsModule is null)
        {
            return Presentation;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Presentation;
        }

        // get the property value
        object? result = await JsComponentReference!.InvokeAsync<object?>("getProperty",
            CancellationTokenSource.Token, "presentation");
        if (result is not null)
        {
#pragma warning disable BL0005
             Presentation = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Presentation)] = Presentation;
        }
         
        return Presentation;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SourceVersion property.
    /// </summary>
    public async Task<WebMapSourceVersion?> GetSourceVersion()
    {
        if (CoreJsModule is null)
        {
            return SourceVersion;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SourceVersion;
        }

        // get the property value
        WebMapSourceVersion? result = await JsComponentReference!.InvokeAsync<WebMapSourceVersion?>("getProperty",
            CancellationTokenSource.Token, "sourceVersion");
        if (result is not null)
        {
#pragma warning disable BL0005
             SourceVersion = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SourceVersion)] = SourceVersion;
        }
         
        return SourceVersion;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ThumbnailUrl property.
    /// </summary>
    public async Task<string?> GetThumbnailUrl()
    {
        if (CoreJsModule is null)
        {
            return ThumbnailUrl;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ThumbnailUrl;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "thumbnailUrl");
        if (result is not null)
        {
#pragma warning disable BL0005
             ThumbnailUrl = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ThumbnailUrl)] = ThumbnailUrl;
        }
         
        return ThumbnailUrl;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the UtilityNetworks property.
    /// </summary>
    public async Task<IReadOnlyList<IUtilityNetwork>?> GetUtilityNetworks()
    {
        if (CoreJsModule is null)
        {
            return UtilityNetworks;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return UtilityNetworks;
        }

        // get the property value
        IReadOnlyList<IUtilityNetwork>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<IUtilityNetwork>?>("getProperty",
            CancellationTokenSource.Token, "utilityNetworks");
        if (result is not null)
        {
#pragma warning disable BL0005
             UtilityNetworks = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(UtilityNetworks)] = UtilityNetworks;
        }
         
        return UtilityNetworks;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Widgets property.
    /// </summary>
    public async Task<WebMapWidgets?> GetWidgets()
    {
        if (CoreJsModule is null)
        {
            return Widgets;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Widgets;
        }

        WebMapWidgets? result = await JsComponentReference.InvokeAsync<WebMapWidgets?>(
            "getWidgets", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Widgets = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Widgets)] = Widgets;
        }
        
        return Widgets;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the ApplicationProperties property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetApplicationProperties(ApplicationProperties? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        ApplicationProperties = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ApplicationProperties)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setApplicationProperties", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the AuthoringApp property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAuthoringApp(string? value)
    {
#pragma warning disable BL0005
        AuthoringApp = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(AuthoringApp)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "authoringApp", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the AuthoringAppVersion property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAuthoringAppVersion(string? value)
    {
#pragma warning disable BL0005
        AuthoringAppVersion = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(AuthoringAppVersion)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "authoringAppVersion", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Bookmarks property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBookmarks(IReadOnlyList<Bookmark>? value)
    {
        if (value is not null)
        {
            foreach (Bookmark item in value)
            {
                item.CoreJsModule = CoreJsModule;
                item.Parent = this;
                item.Layer = Layer;
                item.View = View;
            }
        }
        
#pragma warning disable BL0005
        Bookmarks = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Bookmarks)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setBookmarks", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FloorInfo property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFloorInfo(MapFloorInfo? value)
    {
#pragma warning disable BL0005
        FloorInfo = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FloorInfo)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setFloorInfo", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the GeotriggersInfo property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetGeotriggersInfo(GeotriggersInfo? value)
    {
#pragma warning disable BL0005
        GeotriggersInfo = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(GeotriggersInfo)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setGeotriggersInfo", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the InitialViewProperties property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetInitialViewProperties(InitialViewProperties? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        InitialViewProperties = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(InitialViewProperties)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setInitialViewProperties", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Presentation property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPresentation(object? value)
    {
#pragma warning disable BL0005
        Presentation = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Presentation)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "presentation", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ThumbnailUrl property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetThumbnailUrl(string? value)
    {
#pragma warning disable BL0005
        ThumbnailUrl = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ThumbnailUrl)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "thumbnailUrl", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the UtilityNetworks property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUtilityNetworks(IReadOnlyList<IUtilityNetwork>? value)
    {
#pragma warning disable BL0005
        UtilityNetworks = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(UtilityNetworks)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "utilityNetworks", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Widgets property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetWidgets(WebMapWidgets? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        Widgets = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Widgets)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setWidgets", 
            CancellationTokenSource.Token, value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the Bookmarks property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToBookmarks(params Bookmark[] values)
    {
        Bookmark[] join = Bookmarks is null
            ? values
            : [..Bookmarks, ..values];
        await SetBookmarks(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the UtilityNetworks property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToUtilityNetworks(params IUtilityNetwork[] values)
    {
        IUtilityNetwork[] join = UtilityNetworks is null
            ? values
            : [..UtilityNetworks, ..values];
        await SetUtilityNetworks(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the Bookmarks property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromBookmarks(params Bookmark[] values)
    {
        if (Bookmarks is null)
        {
            return;
        }
        await SetBookmarks(Bookmarks.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the UtilityNetworks property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromUtilityNetworks(params IUtilityNetwork[] values)
    {
        if (UtilityNetworks is null)
        {
            return;
        }
        await SetUtilityNetworks(UtilityNetworks.Except(values).ToArray());
    }
    
#endregion

#region Public Methods

    /// <summary>
    ///     Triggers the loading of the WebMap instance.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#load">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task<object?> Load()
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<object?>(
            "load", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     Loads all the externally loadable resources associated with the webmap.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#loadAll">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task<WebMap?> LoadAll()
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<WebMap?>(
            "loadAll", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     Saves the webmap to its associated portal item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#save">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="options">
    ///     Additional options.
    /// </param>
    [ArcGISMethod]
    public async Task<PortalItem?> Save(WebMapSaveOptions options)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<PortalItem?>(
            "save", 
            CancellationTokenSource.Token,
            options);
    }
    
    /// <summary>
    ///     Saves the webmap to a new <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html">portal item</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#saveAs">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="portalItem">
    ///     The new portal item to which the webmap will be saved.
    /// </param>
    /// <param name="options">
    ///     Additional save options.
    /// </param>
    [ArcGISMethod]
    public async Task<PortalItem?> SaveAs(PortalItem portalItem,
        WebMapSaveAsOptions options)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<PortalItem?>(
            "saveAs", 
            CancellationTokenSource.Token,
            portalItem,
            options);
    }
    
    /// <summary>
    ///     Update properties of the WebMap related to the view.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebMap.html#updateFrom">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="view">
    ///     The view to update from.
    /// </param>
    /// <param name="options">
    ///     Update options.
    /// </param>
    [ArcGISMethod]
    public async Task<object?> UpdateFrom(MapView view,
        WebMapUpdateFromOptions options)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<object?>(
            "updateFrom", 
            CancellationTokenSource.Token,
            view,
            options);
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ApplicationProperties applicationProperties:
                if (applicationProperties != ApplicationProperties)
                {
                    ApplicationProperties = applicationProperties;
                    ModifiedParameters[nameof(ApplicationProperties)] = ApplicationProperties;
                }
                
                return true;
            case Bookmark bookmarks:
                Bookmarks ??= [];
                if (!Bookmarks.Contains(bookmarks))
                {
                    Bookmarks = [..Bookmarks, bookmarks];
                    ModifiedParameters[nameof(Bookmarks)] = Bookmarks;
                }
                
                return true;
            case InitialViewProperties initialViewProperties:
                if (initialViewProperties != InitialViewProperties)
                {
                    InitialViewProperties = initialViewProperties;
                    ModifiedParameters[nameof(InitialViewProperties)] = InitialViewProperties;
                }
                
                return true;
            case WebMapWidgets widgets:
                if (widgets != Widgets)
                {
                    Widgets = widgets;
                    ModifiedParameters[nameof(Widgets)] = Widgets;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ApplicationProperties _:
                ApplicationProperties = null;
                ModifiedParameters[nameof(ApplicationProperties)] = ApplicationProperties;
                return true;
            case Bookmark bookmarks:
                Bookmarks = Bookmarks?.Where(b => b != bookmarks).ToList();
                ModifiedParameters[nameof(Bookmarks)] = Bookmarks;
                return true;
            case InitialViewProperties _:
                InitialViewProperties = null;
                ModifiedParameters[nameof(InitialViewProperties)] = InitialViewProperties;
                return true;
            case WebMapWidgets _:
                Widgets = null;
                ModifiedParameters[nameof(Widgets)] = Widgets;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        ApplicationProperties?.ValidateRequiredGeneratedChildren();
        if (Bookmarks is not null)
        {
            foreach (Bookmark child in Bookmarks)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        InitialViewProperties?.ValidateRequiredGeneratedChildren();
        Widgets?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
