// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.html">GeoBlazor Docs</a>
///     
/// </summary>
public partial class CapabilitiesQueryAttributeBinsSupportedNormalizationTypes : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public CapabilitiesQueryAttributeBinsSupportedNormalizationTypes()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="field">
    /// </param>
    /// <param name="log">
    /// </param>
    /// <param name="naturalLog">
    /// </param>
    /// <param name="percentOfTotal">
    /// </param>
    /// <param name="squareRoot">
    /// </param>
    public CapabilitiesQueryAttributeBinsSupportedNormalizationTypes(
        bool? field = null,
        bool? log = null,
        bool? naturalLog = null,
        bool? percentOfTotal = null,
        bool? squareRoot = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Field = field;
        Log = log;
        NaturalLog = naturalLog;
        PercentOfTotal = percentOfTotal;
        SquareRoot = squareRoot;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.html#capabilitiesqueryattributebinssupportednormalizationtypesfield-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Field { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.html#capabilitiesqueryattributebinssupportednormalizationtypeslog-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Log { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.html#capabilitiesqueryattributebinssupportednormalizationtypesnaturallog-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? NaturalLog { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.html#capabilitiesqueryattributebinssupportednormalizationtypespercentoftotal-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? PercentOfTotal { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedNormalizationTypes.html#capabilitiesqueryattributebinssupportednormalizationtypessquareroot-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SquareRoot { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Field property.
    /// </summary>
    public async Task<bool?> GetField()
    {
        if (CoreJsModule is null)
        {
            return Field;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Field;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "field");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Field = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Field)] = Field;
        }
         
        return Field;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Log property.
    /// </summary>
    public async Task<bool?> GetLog()
    {
        if (CoreJsModule is null)
        {
            return Log;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Log;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "log");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Log = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Log)] = Log;
        }
         
        return Log;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the NaturalLog property.
    /// </summary>
    public async Task<bool?> GetNaturalLog()
    {
        if (CoreJsModule is null)
        {
            return NaturalLog;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return NaturalLog;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "naturalLog");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             NaturalLog = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(NaturalLog)] = NaturalLog;
        }
         
        return NaturalLog;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PercentOfTotal property.
    /// </summary>
    public async Task<bool?> GetPercentOfTotal()
    {
        if (CoreJsModule is null)
        {
            return PercentOfTotal;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return PercentOfTotal;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "percentOfTotal");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             PercentOfTotal = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(PercentOfTotal)] = PercentOfTotal;
        }
         
        return PercentOfTotal;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SquareRoot property.
    /// </summary>
    public async Task<bool?> GetSquareRoot()
    {
        if (CoreJsModule is null)
        {
            return SquareRoot;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SquareRoot;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "squareRoot");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SquareRoot = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SquareRoot)] = SquareRoot;
        }
         
        return SquareRoot;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Field property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetField(bool? value)
    {
#pragma warning disable BL0005
        Field = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Field)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "field", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Log property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLog(bool? value)
    {
#pragma warning disable BL0005
        Log = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Log)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "log", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the NaturalLog property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetNaturalLog(bool? value)
    {
#pragma warning disable BL0005
        NaturalLog = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(NaturalLog)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "naturalLog", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PercentOfTotal property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPercentOfTotal(bool? value)
    {
#pragma warning disable BL0005
        PercentOfTotal = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PercentOfTotal)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "percentOfTotal", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SquareRoot property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSquareRoot(bool? value)
    {
#pragma warning disable BL0005
        SquareRoot = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SquareRoot)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "squareRoot", value);
    }
    
#endregion

}
