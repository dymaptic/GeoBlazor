// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Raster histogram information returned that meets the specified <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-ImageHistogramParameters.html">ImageHistogramParameters</a> from the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html#computeHistograms">computeHistograms()</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html#computeStatisticsHistograms">computeStatisticsHistograms()</a> method.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html#RasterHistogram">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class RasterHistogram : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public RasterHistogram()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="doubleCollectionCounts">
    ///     Count of pixels that fall into each bin.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html#RasterHistogram">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="intCollectionCounts">
    ///     Count of pixels that fall into each bin.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html#RasterHistogram">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="max">
    ///     The maximum pixel value of the histogram.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html#RasterHistogram">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="min">
    ///     The minimum pixel value of the histogram.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html#RasterHistogram">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="size">
    ///     Number of bins.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html#RasterHistogram">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public RasterHistogram(
        IReadOnlyList<double>? doubleCollectionCounts = null,
        int[]? intCollectionCounts = null,
        double? max = null,
        double? min = null,
        int? size = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        DoubleCollectionCounts = doubleCollectionCounts;
        IntCollectionCounts = intCollectionCounts;
        Max = max;
        Min = min;
        Size = size;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Count of pixels that fall into each bin.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html#RasterHistogram">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<double>? DoubleCollectionCounts { get; set; }
    
    /// <summary>
    ///     Count of pixels that fall into each bin.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html#RasterHistogram">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public int[]? IntCollectionCounts { get; set; }
    
    /// <summary>
    ///     The maximum pixel value of the histogram.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html#RasterHistogram">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? Max { get; set; }
    
    /// <summary>
    ///     The minimum pixel value of the histogram.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html#RasterHistogram">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? Min { get; set; }
    
    /// <summary>
    ///     Number of bins.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html#RasterHistogram">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public int? Size { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the DoubleCollectionCounts property.
    /// </summary>
    public async Task<IReadOnlyList<double>?> GetDoubleCollectionCounts()
    {
        if (CoreJsModule is null)
        {
            return DoubleCollectionCounts;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return DoubleCollectionCounts;
        }

        // get the property value
#pragma warning disable BL0005
        DoubleCollectionCounts = await CoreJsModule!.InvokeAsync<IReadOnlyList<double>>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "doubleCollectionCounts");
#pragma warning restore BL0005
         ModifiedParameters[nameof(DoubleCollectionCounts)] = DoubleCollectionCounts;
        return DoubleCollectionCounts;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the IntCollectionCounts property.
    /// </summary>
    public async Task<int[]?> GetIntCollectionCounts()
    {
        if (CoreJsModule is null)
        {
            return IntCollectionCounts;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return IntCollectionCounts;
        }

        // get the property value
#pragma warning disable BL0005
        IntCollectionCounts = await CoreJsModule!.InvokeAsync<int[]>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "intCollectionCounts");
#pragma warning restore BL0005
         ModifiedParameters[nameof(IntCollectionCounts)] = IntCollectionCounts;
        return IntCollectionCounts;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Max property.
    /// </summary>
    public async Task<double?> GetMax()
    {
        if (CoreJsModule is null)
        {
            return Max;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Max;
        }

        // get the property value
#pragma warning disable BL0005
        Max = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "max");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Max)] = Max;
        return Max;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Min property.
    /// </summary>
    public async Task<double?> GetMin()
    {
        if (CoreJsModule is null)
        {
            return Min;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Min;
        }

        // get the property value
#pragma warning disable BL0005
        Min = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "min");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Min)] = Min;
        return Min;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Size property.
    /// </summary>
    public async Task<int?> GetSize()
    {
        if (CoreJsModule is null)
        {
            return Size;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Size;
        }

        // get the property value
#pragma warning disable BL0005
        Size = await CoreJsModule!.InvokeAsync<int>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "size");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Size)] = Size;
        return Size;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the DoubleCollectionCounts property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDoubleCollectionCounts(IReadOnlyList<double> value)
    {
#pragma warning disable BL0005
        DoubleCollectionCounts = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DoubleCollectionCounts)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "doubleCollectionCounts", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the IntCollectionCounts property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetIntCollectionCounts(int[] value)
    {
#pragma warning disable BL0005
        IntCollectionCounts = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(IntCollectionCounts)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "intCollectionCounts", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Max property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMax(double value)
    {
#pragma warning disable BL0005
        Max = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Max)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "max", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Min property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMin(double value)
    {
#pragma warning disable BL0005
        Min = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Min)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "min", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Size property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSize(int value)
    {
#pragma warning disable BL0005
        Size = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Size)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "size", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the DoubleCollectionCounts property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToDoubleCollectionCounts(params double[] values)
    {
        double[] join = DoubleCollectionCounts is null
            ? values
            : [..DoubleCollectionCounts, ..values];
        await SetDoubleCollectionCounts(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the IntCollectionCounts property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToIntCollectionCounts(params int[] values)
    {
        int[] join = IntCollectionCounts is null
            ? values
            : [..IntCollectionCounts, ..values];
        await SetIntCollectionCounts(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the DoubleCollectionCounts property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromDoubleCollectionCounts(params double[] values)
    {
        if (DoubleCollectionCounts is null)
        {
            return;
        }
        await SetDoubleCollectionCounts(DoubleCollectionCounts.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the IntCollectionCounts property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromIntCollectionCounts(params int[] values)
    {
        if (IntCollectionCounts is null)
        {
            return;
        }
        await SetIntCollectionCounts(IntCollectionCounts.Except(values).ToArray());
    }
    
#endregion




}
