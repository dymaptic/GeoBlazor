// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    The ListItem class represents one of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-LayerListViewModel.html#operationalItems">operationalItems</a> in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-LayerListViewModel.html">LayerListViewModel</a>.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class ListItem
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public ListItem()
    {
    }

#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Whether the actions panel is open in the LayerList.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html#actionsOpen">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? ActionsOpen { get; set; }
    
    /// <summary>
    ///     A nested 2-dimensional collection of actions that could be triggered on the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html#actionsSections">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public ActionBase[][]? ActionsSections { get; set; }
    
    /// <summary>
    ///     When a layer contains sublayers, this property is a Collection of ListItem objects belonging to the given layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html#children">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<ListItem>? Children { get; set; }
    
    /// <summary>
    ///     Indicates if the children of a list item (or sublayers in a GroupLayer) can be sorted or moved/reordered.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html#childrenSortable">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? ChildrenSortable { get; set; }
    
    /// <summary>
    ///     Only valid when the list item represents a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-StreamLayer.html">StreamLayer</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html#connectionStatus">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public ConnectionStatus? ConnectionStatus { get; protected set; }
    
    /// <summary>
    ///     The Error object returned if an error occurred.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html#error">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public Error? Error { get; protected set; }
    
    /// <summary>
    ///     When `true`, hides the layer from the LayerList instance.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html#hidden">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Hidden { get; set; }
    
    /// <summary>
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-LayerView.html">LayerView</a> displaying data for the associated <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html#layer">layer</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html#layerView">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public LayerView? LayerView { get; protected set; }
    
    /// <summary>
    ///     Specifies whether to ignore the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#listMode">listMode</a> property of the child layers in the list item.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html#listModeDisabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? ListModeDisabled { get; set; }
    
    /// <summary>
    ///     Whether the layer is open in the LayerList.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html#open">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Open { get; set; }
    
    /// <summary>
    ///     Allows you to display custom content for each ListItem in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html">LayerList</a> widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html#panel">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public ListItemPanelWidget? Panel { get; set; }
    
    /// <summary>
    ///     Value is `true` when the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html#layer">layer</a> is being published.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html#publishing">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public bool? Publishing { get; protected set; }
    
    /// <summary>
    ///     Indicates if the list item (or layer in the map) can be sorted or moved/reordered.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html#sortable">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Sortable { get; set; }
    
    /// <summary>
    ///     The title of the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html#title">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Title { get; set; }
    
    /// <summary>
    ///     Value is `true` when the layer is updating; for example, if it is in the process of fetching data.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html#updating">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public bool? Updating { get; protected set; }
    
    /// <summary>
    ///     Indicates how to manage the visibility of the children layers.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html#visibilityMode">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public string? VisibilityMode { get; protected set; }
    
    /// <summary>
    ///     Whether the layer is visible at the current scale or not.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html#visibleAtCurrentScale">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public bool? VisibleAtCurrentScale { get; protected set; }
    
    /// <summary>
    ///     Whether the layer is visible at the current time extent or not.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html#visibleAtCurrentTimeExtent">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public bool? VisibleAtCurrentTimeExtent { get; protected set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the ActionsOpen property.
    /// </summary>
    public async Task<bool?> GetActionsOpen()
    {
        if (CoreJsModule is null)
        {
            return ActionsOpen;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ActionsOpen;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "actionsOpen");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ActionsOpen = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ActionsOpen)] = ActionsOpen;
        }
         
        return ActionsOpen;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ActionsSections property.
    /// </summary>
    public async Task<ActionBase[][]?> GetActionsSections()
    {
        if (CoreJsModule is null)
        {
            return ActionsSections;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ActionsSections;
        }

        // get the property value
        ActionBase[][]? result = await JsComponentReference!.InvokeAsync<ActionBase[][]?>("getProperty",
            CancellationTokenSource.Token, "actionsSections");
        if (result is not null)
        {
#pragma warning disable BL0005
             ActionsSections = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ActionsSections)] = ActionsSections;
        }
         
        return ActionsSections;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ChildrenSortable property.
    /// </summary>
    public async Task<bool?> GetChildrenSortable()
    {
        if (CoreJsModule is null)
        {
            return ChildrenSortable;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ChildrenSortable;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "childrenSortable");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ChildrenSortable = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ChildrenSortable)] = ChildrenSortable;
        }
         
        return ChildrenSortable;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ConnectionStatus property.
    /// </summary>
    public async Task<ConnectionStatus?> GetConnectionStatus()
    {
        if (CoreJsModule is null)
        {
            return ConnectionStatus;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ConnectionStatus;
        }

        // get the property value
        JsNullableEnumWrapper<ConnectionStatus>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<ConnectionStatus>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "connectionStatus");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ConnectionStatus = (ConnectionStatus)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ConnectionStatus)] = ConnectionStatus;
        }
         
        return ConnectionStatus;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Error property.
    /// </summary>
    public async Task<Error?> GetError()
    {
        if (CoreJsModule is null)
        {
            return Error;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Error;
        }

        // get the property value
        Error? result = await JsComponentReference!.InvokeAsync<Error?>("getProperty",
            CancellationTokenSource.Token, "error");
        if (result is not null)
        {
#pragma warning disable BL0005
             Error = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Error)] = Error;
        }
         
        return Error;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Hidden property.
    /// </summary>
    public async Task<bool?> GetHidden()
    {
        if (CoreJsModule is null)
        {
            return Hidden;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Hidden;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "hidden");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Hidden = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Hidden)] = Hidden;
        }
         
        return Hidden;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Layer property.
    /// </summary>
    public async Task<Layer?> GetLayer()
    {
        if (CoreJsModule is null)
        {
            return Layer;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Layer;
        }

        Layer? result = await JsComponentReference.InvokeAsync<Layer?>(
            "getLayer", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (Layer is not null)
            {
                result.Id = Layer.Id;
            }
            
#pragma warning disable BL0005
            Layer = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Layer)] = Layer;
        }
        
        return Layer;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LayerView property.
    /// </summary>
    public async Task<LayerView?> GetLayerView()
    {
        if (CoreJsModule is null)
        {
            return LayerView;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return LayerView;
        }

        LayerView? result = await JsComponentReference.InvokeAsync<LayerView?>(
            "getLayerView", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            LayerView = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(LayerView)] = LayerView;
        }
        
        return LayerView;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ListModeDisabled property.
    /// </summary>
    public async Task<bool?> GetListModeDisabled()
    {
        if (CoreJsModule is null)
        {
            return ListModeDisabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ListModeDisabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "listModeDisabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ListModeDisabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ListModeDisabled)] = ListModeDisabled;
        }
         
        return ListModeDisabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Open property.
    /// </summary>
    public async Task<bool?> GetOpen()
    {
        if (CoreJsModule is null)
        {
            return Open;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Open;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "open");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Open = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Open)] = Open;
        }
         
        return Open;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Publishing property.
    /// </summary>
    public async Task<bool?> GetPublishing()
    {
        if (CoreJsModule is null)
        {
            return Publishing;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Publishing;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "publishing");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Publishing = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Publishing)] = Publishing;
        }
         
        return Publishing;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Sortable property.
    /// </summary>
    public async Task<bool?> GetSortable()
    {
        if (CoreJsModule is null)
        {
            return Sortable;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Sortable;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "sortable");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Sortable = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Sortable)] = Sortable;
        }
         
        return Sortable;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Title property.
    /// </summary>
    public async Task<string?> GetTitle()
    {
        if (CoreJsModule is null)
        {
            return Title;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Title;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "title");
        if (result is not null)
        {
#pragma warning disable BL0005
             Title = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Title)] = Title;
        }
         
        return Title;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Updating property.
    /// </summary>
    public async Task<bool?> GetUpdating()
    {
        if (CoreJsModule is null)
        {
            return Updating;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Updating;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "updating");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Updating = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Updating)] = Updating;
        }
         
        return Updating;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the VisibilityMode property.
    /// </summary>
    public async Task<string?> GetVisibilityMode()
    {
        if (CoreJsModule is null)
        {
            return VisibilityMode;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return VisibilityMode;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "visibilityMode");
        if (result is not null)
        {
#pragma warning disable BL0005
             VisibilityMode = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(VisibilityMode)] = VisibilityMode;
        }
         
        return VisibilityMode;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the VisibleAtCurrentScale property.
    /// </summary>
    public async Task<bool?> GetVisibleAtCurrentScale()
    {
        if (CoreJsModule is null)
        {
            return VisibleAtCurrentScale;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return VisibleAtCurrentScale;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "visibleAtCurrentScale");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             VisibleAtCurrentScale = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(VisibleAtCurrentScale)] = VisibleAtCurrentScale;
        }
         
        return VisibleAtCurrentScale;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the VisibleAtCurrentTimeExtent property.
    /// </summary>
    public async Task<bool?> GetVisibleAtCurrentTimeExtent()
    {
        if (CoreJsModule is null)
        {
            return VisibleAtCurrentTimeExtent;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return VisibleAtCurrentTimeExtent;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "visibleAtCurrentTimeExtent");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             VisibleAtCurrentTimeExtent = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(VisibleAtCurrentTimeExtent)] = VisibleAtCurrentTimeExtent;
        }
         
        return VisibleAtCurrentTimeExtent;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the ActionsOpen property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetActionsOpen(bool? value)
    {
#pragma warning disable BL0005
        ActionsOpen = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ActionsOpen)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "actionsOpen", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ActionsSections property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetActionsSections(ActionBase[][]? value)
    {
#pragma warning disable BL0005
        ActionsSections = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ActionsSections)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setActionsSections", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ChildrenSortable property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetChildrenSortable(bool? value)
    {
#pragma warning disable BL0005
        ChildrenSortable = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ChildrenSortable)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "childrenSortable", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Hidden property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHidden(bool? value)
    {
#pragma warning disable BL0005
        Hidden = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Hidden)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "hidden", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Layer property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLayer(Layer? value)
    {
#pragma warning disable BL0005
        Layer = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Layer)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setLayer", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ListModeDisabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetListModeDisabled(bool? value)
    {
#pragma warning disable BL0005
        ListModeDisabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ListModeDisabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "listModeDisabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Open property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetOpen(bool? value)
    {
#pragma warning disable BL0005
        Open = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Open)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "open", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Sortable property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSortable(bool? value)
    {
#pragma warning disable BL0005
        Sortable = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Sortable)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "sortable", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Title property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTitle(string? value)
    {
#pragma warning disable BL0005
        Title = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Title)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "title", value);
    }
    
#endregion


    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ListItem children:
                Children ??= [];
                if (!Children.Contains(children))
                {
                    Children = [..Children, children];
                    
                    ModifiedParameters[nameof(Children)] = Children;
                }
                
                return true;
            case ListItemPanelWidget panel:
                if (panel != Panel)
                {
                    Panel = panel;
                    
                    ModifiedParameters[nameof(Panel)] = Panel;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ListItem children:
                Children = Children?.Where(c => c != children).ToList();
                
                ModifiedParameters[nameof(Children)] = Children;
                return true;
            case ListItemPanelWidget _:
                Panel = null;
                
                ModifiedParameters[nameof(Panel)] = Panel;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        if (Children is not null)
        {
            foreach (ListItem child in Children)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        Panel?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
