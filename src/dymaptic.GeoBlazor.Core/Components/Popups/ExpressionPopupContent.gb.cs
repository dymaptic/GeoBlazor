// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components.Popups;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Popups.ExpressionPopupContent.html">GeoBlazor Docs</a>
///     An ExpressionContent element allows you to define a popup content element with an <a target="_blank" href="https://developers.arcgis.com/javascript/latest/arcade/">Arcade</a> expression.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-ExpressionContent.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class ExpressionPopupContent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public ExpressionPopupContent()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="expressionInfo">
    ///     Contains the Arcade expression used to create a popup content element.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-ExpressionContent.html#expressionInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public ExpressionPopupContent(
        ElementExpressionInfo? expressionInfo = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        ExpressionInfo = expressionInfo;
#pragma warning restore BL0005    
    }
    
    
#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the ExpressionInfo property.
    /// </summary>
    public async Task<ElementExpressionInfo?> GetExpressionInfo()
    {
        if (CoreJsModule is null)
        {
            return ExpressionInfo;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ExpressionInfo;
        }

        ElementExpressionInfo? result = await JsComponentReference.InvokeAsync<ElementExpressionInfo?>(
            "getExpressionInfo", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            ExpressionInfo = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(ExpressionInfo)] = ExpressionInfo;
        }
        
        return ExpressionInfo;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the ExpressionInfo property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetExpressionInfo(ElementExpressionInfo? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        ExpressionInfo = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ExpressionInfo)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "expressionInfo", value);
    }
    
#endregion

}
