// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components.Popups;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Popups.PopupVisibleElements.html">GeoBlazor Docs</a>
///     The visible elements that are displayed within the widget.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class PopupVisibleElements
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public PopupVisibleElements()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="closeButton">
    ///     Indicates whether to display a close button on the widget dialog.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="featureNavigation">
    ///     Indicates whether pagination for feature navigation will be displayed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="actionBar">
    ///     Since 4.29. Indicates whether to display the action bar that holds the feature's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#actions">actions</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="collapseButton">
    ///     Since 4.29. Indicates whether to display the collapse button on the widget dialog.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="featureListLayerTitle">
    ///     Since 4.30. Indicates whether to display the group heading for a list of multiple features.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="heading">
    ///     Since 4.29. Indicates whether to display the widget heading.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="spinner">
    ///     Since 4.29. Indicates whether to display the widget's loading spinner.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public PopupVisibleElements(
        bool? closeButton = null,
        bool? featureNavigation = null,
        bool? actionBar = null,
        bool? collapseButton = null,
        bool? featureListLayerTitle = null,
        bool? heading = null,
        bool? spinner = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        CloseButton = closeButton;
        FeatureNavigation = featureNavigation;
        ActionBar = actionBar;
        CollapseButton = collapseButton;
        FeatureListLayerTitle = featureListLayerTitle;
        Heading = heading;
        Spinner = spinner;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Since 4.29. Indicates whether to display the action bar that holds the feature's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#actions">actions</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? ActionBar { get; set; }
    
    /// <summary>
    ///     Indicates whether to display a close button on the widget dialog.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? CloseButton { get; set; }
    
    /// <summary>
    ///     Since 4.29. Indicates whether to display the collapse button on the widget dialog.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? CollapseButton { get; set; }
    
    /// <summary>
    ///     Since 4.30. Indicates whether to display the group heading for a list of multiple features.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? FeatureListLayerTitle { get; set; }
    
    /// <summary>
    ///     Indicates whether pagination for feature navigation will be displayed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? FeatureNavigation { get; set; }
    
    /// <summary>
    ///     Since 4.29. Indicates whether to display the widget heading.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Heading { get; set; }
    
    /// <summary>
    ///     Since 4.29. Indicates whether to display the widget's loading spinner.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Spinner { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the ActionBar property.
    /// </summary>
    public async Task<bool?> GetActionBar()
    {
        if (CoreJsModule is null)
        {
            return ActionBar;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ActionBar;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "actionBar");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ActionBar = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ActionBar)] = ActionBar;
        }
         
        return ActionBar;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CloseButton property.
    /// </summary>
    public async Task<bool?> GetCloseButton()
    {
        if (CoreJsModule is null)
        {
            return CloseButton;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CloseButton;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "closeButton");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             CloseButton = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CloseButton)] = CloseButton;
        }
         
        return CloseButton;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CollapseButton property.
    /// </summary>
    public async Task<bool?> GetCollapseButton()
    {
        if (CoreJsModule is null)
        {
            return CollapseButton;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CollapseButton;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "collapseButton");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             CollapseButton = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CollapseButton)] = CollapseButton;
        }
         
        return CollapseButton;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FeatureListLayerTitle property.
    /// </summary>
    public async Task<bool?> GetFeatureListLayerTitle()
    {
        if (CoreJsModule is null)
        {
            return FeatureListLayerTitle;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return FeatureListLayerTitle;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "featureListLayerTitle");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             FeatureListLayerTitle = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FeatureListLayerTitle)] = FeatureListLayerTitle;
        }
         
        return FeatureListLayerTitle;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FeatureNavigation property.
    /// </summary>
    public async Task<bool?> GetFeatureNavigation()
    {
        if (CoreJsModule is null)
        {
            return FeatureNavigation;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return FeatureNavigation;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "featureNavigation");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             FeatureNavigation = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FeatureNavigation)] = FeatureNavigation;
        }
         
        return FeatureNavigation;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Heading property.
    /// </summary>
    public async Task<bool?> GetHeading()
    {
        if (CoreJsModule is null)
        {
            return Heading;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Heading;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "heading");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Heading = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Heading)] = Heading;
        }
         
        return Heading;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Spinner property.
    /// </summary>
    public async Task<bool?> GetSpinner()
    {
        if (CoreJsModule is null)
        {
            return Spinner;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Spinner;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "spinner");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Spinner = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Spinner)] = Spinner;
        }
         
        return Spinner;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the ActionBar property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetActionBar(bool? value)
    {
#pragma warning disable BL0005
        ActionBar = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ActionBar)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "actionBar", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CloseButton property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCloseButton(bool? value)
    {
#pragma warning disable BL0005
        CloseButton = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CloseButton)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "closeButton", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CollapseButton property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCollapseButton(bool? value)
    {
#pragma warning disable BL0005
        CollapseButton = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CollapseButton)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "collapseButton", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FeatureListLayerTitle property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFeatureListLayerTitle(bool? value)
    {
#pragma warning disable BL0005
        FeatureListLayerTitle = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FeatureListLayerTitle)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "featureListLayerTitle", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FeatureNavigation property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFeatureNavigation(bool? value)
    {
#pragma warning disable BL0005
        FeatureNavigation = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FeatureNavigation)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "featureNavigation", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Heading property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHeading(bool? value)
    {
#pragma warning disable BL0005
        Heading = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Heading)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "heading", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Spinner property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSpinner(bool? value)
    {
#pragma warning disable BL0005
        Spinner = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Spinner)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "spinner", value);
    }
    
#endregion

}
