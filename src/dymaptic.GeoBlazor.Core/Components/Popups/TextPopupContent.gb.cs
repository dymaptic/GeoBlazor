// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components.Popups;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Popups.TextPopupContent.html">GeoBlazor Docs</a>
///     A `TextContent` popup element is used to define descriptive text as an element within a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html">PopupTemplate's</a>
///     content.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-TextContent.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class TextPopupContent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public TextPopupContent()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="text">
    ///     The formatted string content to display.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-TextContent.html#text">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public TextPopupContent(
        string? text = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Text = text;
#pragma warning restore BL0005    
    }
    
    
#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Text property.
    /// </summary>
    public async Task<string?> GetText()
    {
        if (CoreJsModule is null)
        {
            return Text;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Text;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "text");
        if (result is not null)
        {
#pragma warning disable BL0005
             Text = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Text)] = Text;
        }
         
        return Text;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Text property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetText(string? value)
    {
#pragma warning disable BL0005
        Text = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Text)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "text", value);
    }
    
#endregion

}
