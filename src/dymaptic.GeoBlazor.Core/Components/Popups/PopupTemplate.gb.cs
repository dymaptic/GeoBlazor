// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components.Popups;


/// <summary>
///    A PopupTemplate formats and defines the content of a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html">Popup</a> for a specific <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html">Layer</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Graphic.html">Graphic</a>.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class PopupTemplate
{

#region Public Properties / Blazor Parameters

    /// <summary>
    ///     A <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Collection.html">Collection</a> of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-support-actions-ActionButton.html">action</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-support-actions-ActionToggle.html">action toggle</a> objects.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html#actions">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<ActionBase>? Actions { get; set; }
    
    /// <summary>
    ///     An array of objects or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-ExpressionInfo.html">ExpressionInfo[]</a> that reference <a target="_blank" href="https://developers.arcgis.com/javascript/latest/arcade/">Arcade</a> expressions following the specification defined by the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/arcade/#popup">Arcade Popup Profile</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html#expressionInfos">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<ExpressionInfo>? ExpressionInfos { get; set; }
    
    /// <summary>
    ///     An array of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-FieldInfo.html">FieldInfo</a> that defines how fields in the dataset or values from <a target="_blank" href="https://developers.arcgis.com/javascript/latest/arcade/">Arcade</a> expressions participate in a popup.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html#fieldInfos">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<FieldInfo>? FieldInfos { get; set; }
    
    /// <summary>
    ///     Indicates whether or not editor tracking should display.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html#lastEditInfoEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? LastEditInfoEnabled { get; set; }
    
    /// <summary>
    ///     Additional options that can be defined for the popup layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html#layerOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public LayerOptions? LayerOptions { get; set; }
    
    /// <summary>
    ///     An array of field names used in the PopupTemplate.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html#outFields">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<string>? OutFields { get; set; }
    
    /// <summary>
    ///     The template for defining how to format the title used in a popup.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html#title">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? StringTitle { get; set; }
    
    /// <summary>
    ///     The template for defining how to format the title used in a popup.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html#title">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Func<Task>? TaskCollectionTitle { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Actions property.
    /// </summary>
    public async Task<IReadOnlyList<ActionBase>?> GetActions()
    {
        if (CoreJsModule is null)
        {
            return Actions;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Actions;
        }

        // get the property value
        IReadOnlyList<ActionBase>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<ActionBase>?>("getProperty",
            CancellationTokenSource.Token, "actions");
        if (result is not null)
        {
#pragma warning disable BL0005
             Actions = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Actions)] = Actions;
        }
         
        return Actions;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ExpressionInfos property.
    /// </summary>
    public async Task<IReadOnlyList<ExpressionInfo>?> GetExpressionInfos()
    {
        if (CoreJsModule is null)
        {
            return ExpressionInfos;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ExpressionInfos;
        }

        // get the property value
        IReadOnlyList<ExpressionInfo>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<ExpressionInfo>?>("getProperty",
            CancellationTokenSource.Token, "expressionInfos");
        if (result is not null)
        {
#pragma warning disable BL0005
             ExpressionInfos = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ExpressionInfos)] = ExpressionInfos;
        }
         
        return ExpressionInfos;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FieldInfos property.
    /// </summary>
    public async Task<IReadOnlyList<FieldInfo>?> GetFieldInfos()
    {
        if (CoreJsModule is null)
        {
            return FieldInfos;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return FieldInfos;
        }

        // get the property value
        IReadOnlyList<FieldInfo>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<FieldInfo>?>("getProperty",
            CancellationTokenSource.Token, "fieldInfos");
        if (result is not null)
        {
#pragma warning disable BL0005
             FieldInfos = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FieldInfos)] = FieldInfos;
        }
         
        return FieldInfos;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LastEditInfoEnabled property.
    /// </summary>
    public async Task<bool?> GetLastEditInfoEnabled()
    {
        if (CoreJsModule is null)
        {
            return LastEditInfoEnabled;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return LastEditInfoEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "lastEditInfoEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             LastEditInfoEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(LastEditInfoEnabled)] = LastEditInfoEnabled;
        }
         
        return LastEditInfoEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LayerOptions property.
    /// </summary>
    public async Task<LayerOptions?> GetLayerOptions()
    {
        if (CoreJsModule is null)
        {
            return LayerOptions;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return LayerOptions;
        }

        // get the property value
        LayerOptions? result = await JsComponentReference!.InvokeAsync<LayerOptions?>("getProperty",
            CancellationTokenSource.Token, "layerOptions");
        if (result is not null)
        {
#pragma warning disable BL0005
             LayerOptions = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(LayerOptions)] = LayerOptions;
        }
         
        return LayerOptions;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the OutFields property.
    /// </summary>
    public async Task<IReadOnlyList<string>?> GetOutFields()
    {
        if (CoreJsModule is null)
        {
            return OutFields;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return OutFields;
        }

        // get the property value
        IReadOnlyList<string>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<string>?>("getProperty",
            CancellationTokenSource.Token, "outFields");
        if (result is not null)
        {
#pragma warning disable BL0005
             OutFields = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(OutFields)] = OutFields;
        }
         
        return OutFields;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the OverwriteActions property.
    /// </summary>
    public async Task<bool?> GetOverwriteActions()
    {
        if (CoreJsModule is null)
        {
            return OverwriteActions;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return OverwriteActions;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "overwriteActions");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             OverwriteActions = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(OverwriteActions)] = OverwriteActions;
        }
         
        return OverwriteActions;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ReturnGeometry property.
    /// </summary>
    public async Task<bool?> GetReturnGeometry()
    {
        if (CoreJsModule is null)
        {
            return ReturnGeometry;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ReturnGeometry;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "returnGeometry");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ReturnGeometry = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ReturnGeometry)] = ReturnGeometry;
        }
         
        return ReturnGeometry;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the StringTitle property.
    /// </summary>
    public async Task<string?> GetStringTitle()
    {
        if (CoreJsModule is null)
        {
            return StringTitle;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return StringTitle;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "stringTitle");
        if (result is not null)
        {
#pragma warning disable BL0005
             StringTitle = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(StringTitle)] = StringTitle;
        }
         
        return StringTitle;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the TaskCollectionTitle property.
    /// </summary>
    public async Task<Func<Task>?> GetTaskCollectionTitle()
    {
        if (CoreJsModule is null)
        {
            return TaskCollectionTitle;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return TaskCollectionTitle;
        }

        // get the property value
        Func<Task>? result = await JsComponentReference!.InvokeAsync<Func<Task>?>("getProperty",
            CancellationTokenSource.Token, "taskCollectionTitle");
        if (result is not null)
        {
#pragma warning disable BL0005
             TaskCollectionTitle = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(TaskCollectionTitle)] = TaskCollectionTitle;
        }
         
        return TaskCollectionTitle;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Actions property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetActions(IReadOnlyList<ActionBase>? value)
    {
#pragma warning disable BL0005
        Actions = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Actions)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "actions", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ExpressionInfos property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetExpressionInfos(IReadOnlyList<ExpressionInfo>? value)
    {
#pragma warning disable BL0005
        ExpressionInfos = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ExpressionInfos)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "expressionInfos", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FieldInfos property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFieldInfos(IReadOnlyList<FieldInfo>? value)
    {
#pragma warning disable BL0005
        FieldInfos = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FieldInfos)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "fieldInfos", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LastEditInfoEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLastEditInfoEnabled(bool? value)
    {
#pragma warning disable BL0005
        LastEditInfoEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LastEditInfoEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "lastEditInfoEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LayerOptions property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLayerOptions(LayerOptions? value)
    {
#pragma warning disable BL0005
        LayerOptions = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LayerOptions)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "layerOptions", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the OutFields property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetOutFields(IReadOnlyList<string>? value)
    {
#pragma warning disable BL0005
        OutFields = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(OutFields)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "outFields", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the OverwriteActions property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetOverwriteActions(bool? value)
    {
#pragma warning disable BL0005
        OverwriteActions = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(OverwriteActions)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "overwriteActions", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ReturnGeometry property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetReturnGeometry(bool? value)
    {
#pragma warning disable BL0005
        ReturnGeometry = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ReturnGeometry)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "returnGeometry", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the StringTitle property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetStringTitle(string? value)
    {
#pragma warning disable BL0005
        StringTitle = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(StringTitle)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "stringTitle", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the TaskCollectionTitle property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTaskCollectionTitle(Func<Task>? value)
    {
#pragma warning disable BL0005
        TaskCollectionTitle = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(TaskCollectionTitle)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "taskCollectionTitle", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the Actions property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToActions(params ActionBase[] values)
    {
        ActionBase[] join = Actions is null
            ? values
            : [..Actions, ..values];
        await SetActions(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the ExpressionInfos property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToExpressionInfos(params ExpressionInfo[] values)
    {
        ExpressionInfo[] join = ExpressionInfos is null
            ? values
            : [..ExpressionInfos, ..values];
        await SetExpressionInfos(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the FieldInfos property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToFieldInfos(params FieldInfo[] values)
    {
        FieldInfo[] join = FieldInfos is null
            ? values
            : [..FieldInfos, ..values];
        await SetFieldInfos(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the OutFields property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToOutFields(params string[] values)
    {
        string[] join = OutFields is null
            ? values
            : [..OutFields, ..values];
        await SetOutFields(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the Actions property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromActions(params ActionBase[] values)
    {
        if (Actions is null)
        {
            return;
        }
        await SetActions(Actions.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the ExpressionInfos property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromExpressionInfos(params ExpressionInfo[] values)
    {
        if (ExpressionInfos is null)
        {
            return;
        }
        await SetExpressionInfos(ExpressionInfos.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the FieldInfos property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromFieldInfos(params FieldInfo[] values)
    {
        if (FieldInfos is null)
        {
            return;
        }
        await SetFieldInfos(FieldInfos.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the OutFields property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromOutFields(params string[] values)
    {
        if (OutFields is null)
        {
            return;
        }
        await SetOutFields(OutFields.Except(values).ToArray());
    }
    
#endregion


    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case FieldInfo fieldInfos:
                FieldInfos ??= [];
                if (!FieldInfos.Contains(fieldInfos))
                {
                    FieldInfos = [..FieldInfos, fieldInfos];
                    
                    ModifiedParameters[nameof(FieldInfos)] = FieldInfos;
                }
                
                return true;
            case LayerOptions layerOptions:
                if (layerOptions != LayerOptions)
                {
                    LayerOptions = layerOptions;
                    
                    ModifiedParameters[nameof(LayerOptions)] = LayerOptions;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case FieldInfo fieldInfos:
                FieldInfos = FieldInfos?.Where(f => f != fieldInfos).ToList();
                
                ModifiedParameters[nameof(FieldInfos)] = FieldInfos;
                return true;
            case LayerOptions _:
                LayerOptions = null;
                
                ModifiedParameters[nameof(LayerOptions)] = LayerOptions;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        if ((Content is null || Content.Count == 0) && ContentFunction is null && StringContent is null)
        {
            throw new MissingRequiredOptionsChildElementException(nameof(PopupTemplate), [nameof(Content), nameof(ContentFunction), nameof(StringContent)]);
        }
        if (FieldInfos is not null)
        {
            foreach (FieldInfo child in FieldInfos)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        LayerOptions?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
