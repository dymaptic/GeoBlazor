// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.html">GeoBlazor Docs</a>
///     The view from which the widget will operate.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-AreaMeasurement2D-AreaMeasurement2DViewModel.html#view">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class AreaMeasurement2DViewModel : MapComponent,
    IMeasurementViewModelActiveViewModel
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public AreaMeasurement2DViewModel()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="snappingOptions">
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-snapping-SnappingOptions.html">SnappingOptions</a> for sketching.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-AreaMeasurement2D-AreaMeasurement2DViewModel.html#snappingOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="unit">
    ///     Unit system (imperial, metric) or specific unit used for displaying the area values.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-AreaMeasurement2D-AreaMeasurement2DViewModel.html#unit">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="unitOptions">
    ///     List of available units and unit systems (imperial, metric) for displaying the area values.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-AreaMeasurement2D-AreaMeasurement2DViewModel.html#unitOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public AreaMeasurement2DViewModel(
        SnappingOptions snappingOptions,
        SystemOrAreaUnit? unit = null,
        IReadOnlyList<SystemOrAreaUnit>? unitOptions = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        SnappingOptions = snappingOptions;
        Unit = unit;
        UnitOptions = unitOptions;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.html#areameasurement2dviewmodelmeasurement-property">GeoBlazor Docs</a>
    ///     The area and perimeter of the measurement polygon in square meters and meters respectively.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-AreaMeasurement2D-AreaMeasurement2DViewModel.html#measurement">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public AreaMeasurement2DViewModelMeasurement? Measurement { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.html#areameasurement2dviewmodelmeasurementlabel-property">GeoBlazor Docs</a>
    ///     This property returns the locale specific representation of the area and perimeter.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-AreaMeasurement2D-AreaMeasurement2DViewModel.html#measurementLabel">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public AreaMeasurement2DViewModelMeasurementLabel? MeasurementLabel { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.html#areameasurement2dviewmodelsnappingoptions-property">GeoBlazor Docs</a>
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-snapping-SnappingOptions.html">SnappingOptions</a> for sketching.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-AreaMeasurement2D-AreaMeasurement2DViewModel.html#snappingOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SnappingOptions? SnappingOptions { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.html#areameasurement2dviewmodelstate-property">GeoBlazor Docs</a>
    ///     The ViewModel's state.
    ///     default "disabled"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-AreaMeasurement2D-AreaMeasurement2DViewModel.html#state">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public MeasurementViewModelState? State { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.html#areameasurement2dviewmodelunit-property">GeoBlazor Docs</a>
    ///     Unit system (imperial, metric) or specific unit used for displaying the area values.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-AreaMeasurement2D-AreaMeasurement2DViewModel.html#unit">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SystemOrAreaUnit? Unit { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.html#areameasurement2dviewmodelunitoptions-property">GeoBlazor Docs</a>
    ///     List of available units and unit systems (imperial, metric) for displaying the area values.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-AreaMeasurement2D-AreaMeasurement2DViewModel.html#unitOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<SystemOrAreaUnit>? UnitOptions { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Measurement property.
    /// </summary>
    public async Task<AreaMeasurement2DViewModelMeasurement?> GetMeasurement()
    {
        if (CoreJsModule is null)
        {
            return Measurement;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Measurement;
        }

        AreaMeasurement2DViewModelMeasurement? result = await JsComponentReference.InvokeAsync<AreaMeasurement2DViewModelMeasurement?>(
            "getMeasurement", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Measurement = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Measurement)] = Measurement;
        }
        
        return Measurement;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MeasurementLabel property.
    /// </summary>
    public async Task<AreaMeasurement2DViewModelMeasurementLabel?> GetMeasurementLabel()
    {
        if (CoreJsModule is null)
        {
            return MeasurementLabel;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return MeasurementLabel;
        }

        AreaMeasurement2DViewModelMeasurementLabel? result = await JsComponentReference.InvokeAsync<AreaMeasurement2DViewModelMeasurementLabel?>(
            "getMeasurementLabel", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            MeasurementLabel = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(MeasurementLabel)] = MeasurementLabel;
        }
        
        return MeasurementLabel;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SnappingOptions property.
    /// </summary>
    public async Task<SnappingOptions?> GetSnappingOptions()
    {
        if (CoreJsModule is null)
        {
            return SnappingOptions;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SnappingOptions;
        }

        SnappingOptions? result = await JsComponentReference.InvokeAsync<SnappingOptions?>(
            "getSnappingOptions", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            SnappingOptions = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(SnappingOptions)] = SnappingOptions;
        }
        
        return SnappingOptions;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the State property.
    /// </summary>
    public async Task<MeasurementViewModelState?> GetState()
    {
        if (CoreJsModule is null)
        {
            return State;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return State;
        }

        // get the property value
        JsNullableEnumWrapper<MeasurementViewModelState>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<MeasurementViewModelState>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "state");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             State = (MeasurementViewModelState)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(State)] = State;
        }
         
        return State;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Unit property.
    /// </summary>
    public async Task<SystemOrAreaUnit?> GetUnit()
    {
        if (CoreJsModule is null)
        {
            return Unit;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Unit;
        }

        // get the property value
        JsNullableEnumWrapper<SystemOrAreaUnit>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<SystemOrAreaUnit>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "unit");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Unit = (SystemOrAreaUnit)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Unit)] = Unit;
        }
         
        return Unit;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the UnitOptions property.
    /// </summary>
    public async Task<IReadOnlyList<SystemOrAreaUnit>?> GetUnitOptions()
    {
        if (CoreJsModule is null)
        {
            return UnitOptions;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return UnitOptions;
        }

        // get the property value
        IReadOnlyList<SystemOrAreaUnit>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<SystemOrAreaUnit>?>("getProperty",
            CancellationTokenSource.Token, "unitOptions");
        if (result is not null)
        {
#pragma warning disable BL0005
             UnitOptions = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(UnitOptions)] = UnitOptions;
        }
         
        return UnitOptions;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the SnappingOptions property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSnappingOptions(SnappingOptions value)
    {
        value.CoreJsModule  = CoreJsModule;
        value.Parent = this;
        value.Layer = Layer;
        value.View = View;
        
#pragma warning disable BL0005
        SnappingOptions = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SnappingOptions)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setSnappingOptions", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Unit property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUnit(SystemOrAreaUnit? value)
    {
#pragma warning disable BL0005
        Unit = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Unit)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "unit", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the UnitOptions property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUnitOptions(IReadOnlyList<SystemOrAreaUnit>? value)
    {
#pragma warning disable BL0005
        UnitOptions = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(UnitOptions)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "unitOptions", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the UnitOptions property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToUnitOptions(params SystemOrAreaUnit[] values)
    {
        SystemOrAreaUnit[] join = UnitOptions is null
            ? values
            : [..UnitOptions, ..values];
        await SetUnitOptions(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the UnitOptions property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromUnitOptions(params SystemOrAreaUnit[] values)
    {
        if (UnitOptions is null)
        {
            return;
        }
        await SetUnitOptions(UnitOptions.Except(values).ToArray());
    }
    
#endregion

#region Public Methods

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.html#areameasurement2dviewmodelclear-method">GeoBlazor Docs</a>
    ///     Clears the current measurement.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-AreaMeasurement2D-AreaMeasurement2DViewModel.html#clear">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task Clear()
    {
        if (CoreJsModule is null)
        {
            return;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference!.InvokeVoidAsync(
            "clear", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.AreaMeasurement2DViewModel.html#areameasurement2dviewmodelstart-method">GeoBlazor Docs</a>
    ///     Starts a new measurement.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-AreaMeasurement2D-AreaMeasurement2DViewModel.html#start">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task Start()
    {
        if (CoreJsModule is null)
        {
            return;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference!.InvokeVoidAsync(
            "start", 
            CancellationTokenSource.Token);
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case SnappingOptions snappingOptions:
                if (snappingOptions != SnappingOptions)
                {
                    SnappingOptions = snappingOptions;
                    
                    ModifiedParameters[nameof(SnappingOptions)] = SnappingOptions;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case SnappingOptions _:
                SnappingOptions = null;
                
                ModifiedParameters[nameof(SnappingOptions)] = SnappingOptions;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        SnappingOptions?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
