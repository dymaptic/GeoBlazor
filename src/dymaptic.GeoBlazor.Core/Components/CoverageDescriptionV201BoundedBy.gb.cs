// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Spatial and temporal extent of a coverage.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class CoverageDescriptionV201BoundedBy : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public CoverageDescriptionV201BoundedBy()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="axisLabels">
    ///     The coverage's axis name.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="beginPosition">
    ///     Start date for the temporal extent of a coverage.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="endPosition">
    ///     End date for the temporal extent of the coverage.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="envelope">
    ///     The spatial extent of a coverage.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="envelopeAllDims">
    ///     The spatial extent dimensions.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="isEastFirst">
    ///     Is east first.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="uomLabels">
    ///     List of unit of measure (uom) labels for all the axis.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public CoverageDescriptionV201BoundedBy(
        IReadOnlyList<string>? axisLabels = null,
        DateTime? beginPosition = null,
        DateTime? endPosition = null,
        Extent? envelope = null,
        CoverageDescriptionV201BoundedByEnvelopeAllDims? envelopeAllDims = null,
        bool? isEastFirst = null,
        IReadOnlyList<string>? uomLabels = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        AxisLabels = axisLabels;
        BeginPosition = beginPosition;
        EndPosition = endPosition;
        Envelope = envelope;
        EnvelopeAllDims = envelopeAllDims;
        IsEastFirst = isEastFirst;
        UomLabels = uomLabels;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The coverage's axis name.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<string>? AxisLabels { get; set; }
    
    /// <summary>
    ///     Start date for the temporal extent of a coverage.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public DateTime? BeginPosition { get; set; }
    
    /// <summary>
    ///     End date for the temporal extent of the coverage.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public DateTime? EndPosition { get; set; }
    
    /// <summary>
    ///     The spatial extent of a coverage.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Extent? Envelope { get; set; }
    
    /// <summary>
    ///     The spatial extent dimensions.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public CoverageDescriptionV201BoundedByEnvelopeAllDims? EnvelopeAllDims { get; set; }
    
    /// <summary>
    ///     Is east first.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? IsEastFirst { get; set; }
    
    /// <summary>
    ///     List of unit of measure (uom) labels for all the axis.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<string>? UomLabels { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the AxisLabels property.
    /// </summary>
    public async Task<IReadOnlyList<string>?> GetAxisLabels()
    {
        if (CoreJsModule is null)
        {
            return AxisLabels;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return AxisLabels;
        }

        // get the property value
        IReadOnlyList<string>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<string>?>("getProperty",
            CancellationTokenSource.Token, "axisLabels");
        if (result is not null)
        {
#pragma warning disable BL0005
             AxisLabels = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(AxisLabels)] = AxisLabels;
        }
         
        return AxisLabels;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the BeginPosition property.
    /// </summary>
    public async Task<DateTime?> GetBeginPosition()
    {
        if (CoreJsModule is null)
        {
            return BeginPosition;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return BeginPosition;
        }

        // get the property value
        JsNullableDateTimeWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDateTimeWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "beginPosition");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             BeginPosition = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(BeginPosition)] = BeginPosition;
        }
         
        return BeginPosition;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the EndPosition property.
    /// </summary>
    public async Task<DateTime?> GetEndPosition()
    {
        if (CoreJsModule is null)
        {
            return EndPosition;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return EndPosition;
        }

        // get the property value
        JsNullableDateTimeWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDateTimeWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "endPosition");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             EndPosition = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(EndPosition)] = EndPosition;
        }
         
        return EndPosition;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Envelope property.
    /// </summary>
    public async Task<Extent?> GetEnvelope()
    {
        if (CoreJsModule is null)
        {
            return Envelope;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Envelope;
        }

        Extent? result = await JsComponentReference.InvokeAsync<Extent?>(
            "getEnvelope", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (Envelope is not null)
            {
                result.Id = Envelope.Id;
            }
            
#pragma warning disable BL0005
            Envelope = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Envelope)] = Envelope;
        }
        
        return Envelope;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the EnvelopeAllDims property.
    /// </summary>
    public async Task<CoverageDescriptionV201BoundedByEnvelopeAllDims?> GetEnvelopeAllDims()
    {
        if (CoreJsModule is null)
        {
            return EnvelopeAllDims;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return EnvelopeAllDims;
        }

        // get the property value
        CoverageDescriptionV201BoundedByEnvelopeAllDims? result = await JsComponentReference!.InvokeAsync<CoverageDescriptionV201BoundedByEnvelopeAllDims?>("getProperty",
            CancellationTokenSource.Token, "envelopeAllDims");
        if (result is not null)
        {
#pragma warning disable BL0005
             EnvelopeAllDims = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(EnvelopeAllDims)] = EnvelopeAllDims;
        }
         
        return EnvelopeAllDims;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the IsEastFirst property.
    /// </summary>
    public async Task<bool?> GetIsEastFirst()
    {
        if (CoreJsModule is null)
        {
            return IsEastFirst;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return IsEastFirst;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "isEastFirst");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             IsEastFirst = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(IsEastFirst)] = IsEastFirst;
        }
         
        return IsEastFirst;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the UomLabels property.
    /// </summary>
    public async Task<IReadOnlyList<string>?> GetUomLabels()
    {
        if (CoreJsModule is null)
        {
            return UomLabels;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return UomLabels;
        }

        // get the property value
        IReadOnlyList<string>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<string>?>("getProperty",
            CancellationTokenSource.Token, "uomLabels");
        if (result is not null)
        {
#pragma warning disable BL0005
             UomLabels = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(UomLabels)] = UomLabels;
        }
         
        return UomLabels;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the AxisLabels property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAxisLabels(IReadOnlyList<string>? value)
    {
#pragma warning disable BL0005
        AxisLabels = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(AxisLabels)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "axisLabels", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the BeginPosition property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBeginPosition(DateTime? value)
    {
#pragma warning disable BL0005
        BeginPosition = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(BeginPosition)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "beginPosition", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the EndPosition property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetEndPosition(DateTime? value)
    {
#pragma warning disable BL0005
        EndPosition = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(EndPosition)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "endPosition", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Envelope property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetEnvelope(Extent? value)
    {
#pragma warning disable BL0005
        Envelope = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Envelope)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setEnvelope", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the EnvelopeAllDims property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetEnvelopeAllDims(CoverageDescriptionV201BoundedByEnvelopeAllDims? value)
    {
#pragma warning disable BL0005
        EnvelopeAllDims = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(EnvelopeAllDims)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setEnvelopeAllDims", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the IsEastFirst property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetIsEastFirst(bool? value)
    {
#pragma warning disable BL0005
        IsEastFirst = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(IsEastFirst)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "isEastFirst", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the UomLabels property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUomLabels(IReadOnlyList<string>? value)
    {
#pragma warning disable BL0005
        UomLabels = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(UomLabels)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "uomLabels", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the AxisLabels property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToAxisLabels(params string[] values)
    {
        string[] join = AxisLabels is null
            ? values
            : [..AxisLabels, ..values];
        await SetAxisLabels(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the UomLabels property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToUomLabels(params string[] values)
    {
        string[] join = UomLabels is null
            ? values
            : [..UomLabels, ..values];
        await SetUomLabels(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the AxisLabels property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromAxisLabels(params string[] values)
    {
        if (AxisLabels is null)
        {
            return;
        }
        await SetAxisLabels(AxisLabels.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the UomLabels property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromUomLabels(params string[] values)
    {
        if (UomLabels is null)
        {
            return;
        }
        await SetUomLabels(UomLabels.Except(values).ToArray());
    }
    
#endregion


    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Extent envelope:
                if (envelope != Envelope)
                {
                    Envelope = envelope;
                    
                    ModifiedParameters[nameof(Envelope)] = Envelope;
                }
                
                return true;
            case CoverageDescriptionV201BoundedByEnvelopeAllDims envelopeAllDims:
                if (envelopeAllDims != EnvelopeAllDims)
                {
                    EnvelopeAllDims = envelopeAllDims;
                    
                    ModifiedParameters[nameof(EnvelopeAllDims)] = EnvelopeAllDims;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Extent _:
                Envelope = null;
                
                ModifiedParameters[nameof(Envelope)] = Envelope;
                return true;
            case CoverageDescriptionV201BoundedByEnvelopeAllDims _:
                EnvelopeAllDims = null;
                
                ModifiedParameters[nameof(EnvelopeAllDims)] = EnvelopeAllDims;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        Envelope?.ValidateRequiredGeneratedChildren();
        EnvelopeAllDims?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
