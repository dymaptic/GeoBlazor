// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Coverage description for WCS service version 2.0.1
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class CoverageDescriptionV201 : MapComponent,
    ICoverageInfoCoverageDescription
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public CoverageDescriptionV201()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="boundedBy">
    ///     Spatial and temporal extent of a coverage.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="coverageFunction">
    ///     Coverage function.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="coverageId">
    ///     Coverage id.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="domainSet">
    ///     Domains associated with a coverage.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="eoMetadata">
    ///     The WCS 2.0 Earth Observation coverage metadata.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="extension">
    ///     Coverage extension.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="rangeType">
    ///     Describes the semantics of the range set values supported by a coverage.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="resolution">
    ///     Service x,y resolution.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="serviceParameters">
    ///     Service parameters.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="version">
    ///     Service version.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public CoverageDescriptionV201(
        CoverageDescriptionV201BoundedBy? boundedBy = null,
        string? coverageFunction = null,
        string? coverageId = null,
        CoverageDescriptionV201DomainSet? domainSet = null,
        CoverageDescriptionV201EoMetadata? eoMetadata = null,
        string? extension = null,
        IReadOnlyList<CoverageDescriptionV201RangeType>? rangeType = null,
        CoverageDescriptionV201Resolution? resolution = null,
        string? serviceParameters = null,
        string? version = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        BoundedBy = boundedBy;
        CoverageFunction = coverageFunction;
        CoverageId = coverageId;
        DomainSet = domainSet;
        EoMetadata = eoMetadata;
        Extension = extension;
        RangeType = rangeType;
        Resolution = resolution;
        ServiceParameters = serviceParameters;
        Version = version;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Spatial and temporal extent of a coverage.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public CoverageDescriptionV201BoundedBy? BoundedBy { get; set; }
    
    /// <summary>
    ///     Coverage function.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? CoverageFunction { get; set; }
    
    /// <summary>
    ///     Coverage id.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? CoverageId { get; set; }
    
    /// <summary>
    ///     Domains associated with a coverage.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public CoverageDescriptionV201DomainSet? DomainSet { get; set; }
    
    /// <summary>
    ///     The WCS 2.0 Earth Observation coverage metadata.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public CoverageDescriptionV201EoMetadata? EoMetadata { get; set; }
    
    /// <summary>
    ///     Coverage extension.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Extension { get; set; }
    
    /// <summary>
    ///     Describes the semantics of the range set values supported by a coverage.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<CoverageDescriptionV201RangeType>? RangeType { get; set; }
    
    /// <summary>
    ///     Service x,y resolution.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public CoverageDescriptionV201Resolution? Resolution { get; set; }
    
    /// <summary>
    ///     Service parameters.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? ServiceParameters { get; set; }
    
    /// <summary>
    ///     Service version.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Version { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the BoundedBy property.
    /// </summary>
    public async Task<CoverageDescriptionV201BoundedBy?> GetBoundedBy()
    {
        if (CoreJsModule is null)
        {
            return BoundedBy;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return BoundedBy;
        }

        // get the property value
        CoverageDescriptionV201BoundedBy? result = await JsComponentReference!.InvokeAsync<CoverageDescriptionV201BoundedBy?>("getProperty",
            CancellationTokenSource.Token, "boundedBy");
        if (result is not null)
        {
#pragma warning disable BL0005
             BoundedBy = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(BoundedBy)] = BoundedBy;
        }
         
        return BoundedBy;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CoverageFunction property.
    /// </summary>
    public async Task<string?> GetCoverageFunction()
    {
        if (CoreJsModule is null)
        {
            return CoverageFunction;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return CoverageFunction;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "coverageFunction");
        if (result is not null)
        {
#pragma warning disable BL0005
             CoverageFunction = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CoverageFunction)] = CoverageFunction;
        }
         
        return CoverageFunction;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CoverageId property.
    /// </summary>
    public async Task<string?> GetCoverageId()
    {
        if (CoreJsModule is null)
        {
            return CoverageId;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return CoverageId;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "coverageId");
        if (result is not null)
        {
#pragma warning disable BL0005
             CoverageId = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CoverageId)] = CoverageId;
        }
         
        return CoverageId;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DomainSet property.
    /// </summary>
    public async Task<CoverageDescriptionV201DomainSet?> GetDomainSet()
    {
        if (CoreJsModule is null)
        {
            return DomainSet;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return DomainSet;
        }

        // get the property value
        CoverageDescriptionV201DomainSet? result = await JsComponentReference!.InvokeAsync<CoverageDescriptionV201DomainSet?>("getProperty",
            CancellationTokenSource.Token, "domainSet");
        if (result is not null)
        {
#pragma warning disable BL0005
             DomainSet = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DomainSet)] = DomainSet;
        }
         
        return DomainSet;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the EoMetadata property.
    /// </summary>
    public async Task<CoverageDescriptionV201EoMetadata?> GetEoMetadata()
    {
        if (CoreJsModule is null)
        {
            return EoMetadata;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return EoMetadata;
        }

        // get the property value
        CoverageDescriptionV201EoMetadata? result = await JsComponentReference!.InvokeAsync<CoverageDescriptionV201EoMetadata?>("getProperty",
            CancellationTokenSource.Token, "eoMetadata");
        if (result is not null)
        {
#pragma warning disable BL0005
             EoMetadata = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(EoMetadata)] = EoMetadata;
        }
         
        return EoMetadata;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Extension property.
    /// </summary>
    public async Task<string?> GetExtension()
    {
        if (CoreJsModule is null)
        {
            return Extension;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Extension;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "extension");
        if (result is not null)
        {
#pragma warning disable BL0005
             Extension = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Extension)] = Extension;
        }
         
        return Extension;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RangeType property.
    /// </summary>
    public async Task<IReadOnlyList<CoverageDescriptionV201RangeType>?> GetRangeType()
    {
        if (CoreJsModule is null)
        {
            return RangeType;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return RangeType;
        }

        // get the property value
        IReadOnlyList<CoverageDescriptionV201RangeType>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<CoverageDescriptionV201RangeType>?>("getProperty",
            CancellationTokenSource.Token, "rangeType");
        if (result is not null)
        {
#pragma warning disable BL0005
             RangeType = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(RangeType)] = RangeType;
        }
         
        return RangeType;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Resolution property.
    /// </summary>
    public async Task<CoverageDescriptionV201Resolution?> GetResolution()
    {
        if (CoreJsModule is null)
        {
            return Resolution;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Resolution;
        }

        // get the property value
        CoverageDescriptionV201Resolution? result = await JsComponentReference!.InvokeAsync<CoverageDescriptionV201Resolution?>("getProperty",
            CancellationTokenSource.Token, "resolution");
        if (result is not null)
        {
#pragma warning disable BL0005
             Resolution = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Resolution)] = Resolution;
        }
         
        return Resolution;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ServiceParameters property.
    /// </summary>
    public async Task<string?> GetServiceParameters()
    {
        if (CoreJsModule is null)
        {
            return ServiceParameters;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ServiceParameters;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "serviceParameters");
        if (result is not null)
        {
#pragma warning disable BL0005
             ServiceParameters = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ServiceParameters)] = ServiceParameters;
        }
         
        return ServiceParameters;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Version property.
    /// </summary>
    public async Task<string?> GetVersion()
    {
        if (CoreJsModule is null)
        {
            return Version;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Version;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "version");
        if (result is not null)
        {
#pragma warning disable BL0005
             Version = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Version)] = Version;
        }
         
        return Version;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the BoundedBy property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBoundedBy(CoverageDescriptionV201BoundedBy? value)
    {
#pragma warning disable BL0005
        BoundedBy = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(BoundedBy)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setBoundedBy", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CoverageFunction property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCoverageFunction(string? value)
    {
#pragma warning disable BL0005
        CoverageFunction = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CoverageFunction)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "coverageFunction", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CoverageId property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCoverageId(string? value)
    {
#pragma warning disable BL0005
        CoverageId = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CoverageId)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "coverageId", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DomainSet property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDomainSet(CoverageDescriptionV201DomainSet? value)
    {
#pragma warning disable BL0005
        DomainSet = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DomainSet)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setDomainSet", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the EoMetadata property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetEoMetadata(CoverageDescriptionV201EoMetadata? value)
    {
#pragma warning disable BL0005
        EoMetadata = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(EoMetadata)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setEoMetadata", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Extension property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetExtension(string? value)
    {
#pragma warning disable BL0005
        Extension = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Extension)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "extension", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the RangeType property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRangeType(IReadOnlyList<CoverageDescriptionV201RangeType>? value)
    {
#pragma warning disable BL0005
        RangeType = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RangeType)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setRangeType", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Resolution property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetResolution(CoverageDescriptionV201Resolution? value)
    {
#pragma warning disable BL0005
        Resolution = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Resolution)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setResolution", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ServiceParameters property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetServiceParameters(string? value)
    {
#pragma warning disable BL0005
        ServiceParameters = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ServiceParameters)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "serviceParameters", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Version property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetVersion(string? value)
    {
#pragma warning disable BL0005
        Version = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Version)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "version", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the RangeType property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToRangeType(params CoverageDescriptionV201RangeType[] values)
    {
        CoverageDescriptionV201RangeType[] join = RangeType is null
            ? values
            : [..RangeType, ..values];
        await SetRangeType(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the RangeType property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromRangeType(params CoverageDescriptionV201RangeType[] values)
    {
        if (RangeType is null)
        {
            return;
        }
        await SetRangeType(RangeType.Except(values).ToArray());
    }
    
#endregion


    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case CoverageDescriptionV201BoundedBy boundedBy:
                if (boundedBy != BoundedBy)
                {
                    BoundedBy = boundedBy;
                    
                    ModifiedParameters[nameof(BoundedBy)] = BoundedBy;
                }
                
                return true;
            case CoverageDescriptionV201DomainSet domainSet:
                if (domainSet != DomainSet)
                {
                    DomainSet = domainSet;
                    
                    ModifiedParameters[nameof(DomainSet)] = DomainSet;
                }
                
                return true;
            case CoverageDescriptionV201EoMetadata eoMetadata:
                if (eoMetadata != EoMetadata)
                {
                    EoMetadata = eoMetadata;
                    
                    ModifiedParameters[nameof(EoMetadata)] = EoMetadata;
                }
                
                return true;
            case CoverageDescriptionV201RangeType rangeType:
                RangeType ??= [];
                if (!RangeType.Contains(rangeType))
                {
                    RangeType = [..RangeType, rangeType];
                    
                    ModifiedParameters[nameof(RangeType)] = RangeType;
                }
                
                return true;
            case CoverageDescriptionV201Resolution resolution:
                if (resolution != Resolution)
                {
                    Resolution = resolution;
                    
                    ModifiedParameters[nameof(Resolution)] = Resolution;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case CoverageDescriptionV201BoundedBy _:
                BoundedBy = null;
                
                ModifiedParameters[nameof(BoundedBy)] = BoundedBy;
                return true;
            case CoverageDescriptionV201DomainSet _:
                DomainSet = null;
                
                ModifiedParameters[nameof(DomainSet)] = DomainSet;
                return true;
            case CoverageDescriptionV201EoMetadata _:
                EoMetadata = null;
                
                ModifiedParameters[nameof(EoMetadata)] = EoMetadata;
                return true;
            case CoverageDescriptionV201RangeType rangeType:
                RangeType = RangeType?.Where(r => r != rangeType).ToList();
                
                ModifiedParameters[nameof(RangeType)] = RangeType;
                return true;
            case CoverageDescriptionV201Resolution _:
                Resolution = null;
                
                ModifiedParameters[nameof(Resolution)] = Resolution;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        BoundedBy?.ValidateRequiredGeneratedChildren();
        DomainSet?.ValidateRequiredGeneratedChildren();
        EoMetadata?.ValidateRequiredGeneratedChildren();
        if (RangeType is not null)
        {
            foreach (CoverageDescriptionV201RangeType child in RangeType)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        Resolution?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
