// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html">GeoBlazor Docs</a>
///     Provides the logic for the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features.html">Features</a> widget and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/references/map-components/arcgis-features/">component</a>.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class FeaturesViewModel : MapComponent,
    IGoTo
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public FeaturesViewModel()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="actions">
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Collection.html">Collection</a> of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-support-actions-ActionButton.html">action</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-support-actions-ActionToggle.html">action toggle</a> objects.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#actions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="activeFeature">
    ///     The highlighted feature on the map that is either hovered over or in focus within the feature menu.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#activeFeature">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="autoCloseEnabled">
    ///     This closes the container when the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html">View</a> camera or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Viewpoint.html">Viewpoint</a> changes.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#autoCloseEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="browseClusterEnabled">
    ///     Indicates if the "Browse features" experience is active in a
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionCluster.html">cluster</a> popup.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#browseClusterEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="defaultPopupTemplateEnabled">
    ///     Enables automatic creation of a popup template for layers that have popups enabled but no
    ///     popupTemplate defined.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#defaultPopupTemplateEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="elementReferenceContent">
    ///     The information to display.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#content">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="featureMenuOpen">
    ///     This property enables showing the list of features.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#featureMenuOpen">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="featureMenuTitle">
    ///     The title to display on the widget while viewing the feature menu.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#featureMenuTitle">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="featurePage">
    ///     The current page number in the feature browsing menu.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#featurePage">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="features">
    ///     An array of features.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#features">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="featuresPerPage">
    ///     The number of features to fetch at one time.
    ///     default 20
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#featuresPerPage">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="featureViewModelAbilities">
    ///     Defines the specific <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#Abilities">abilities</a> that can be used when querying and displaying content.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#featureViewModelAbilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="goToOverride">
    ///     This function provides the ability to override either the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html#goTo">MapView goTo()</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html#goTo">SceneView goTo()</a> methods.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GoTo.html#goToOverride">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="highlightEnabled">
    ///     Highlight the selected feature using the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html#highlightOptions">highlightOptions</a>
    ///     set on the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html">MapView</a> or the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html#highlightOptions">highlightOptions</a>
    ///     set on the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html">SceneView</a>.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#highlightEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="includeDefaultActions">
    ///     Indicates whether or not to include <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#defaultActions">defaultActions</a>.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#includeDefaultActions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="initialDisplayMode">
    ///     Indicates whether to initially display a list of features, or the content for one feature.
    ///     default "feature"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#initialDisplayMode">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="location">
    ///     Geometry used to show the location of the feature.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#location">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="screenLocation">
    ///     The screen location of the selected feature.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#screenLocation">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="screenLocationEnabled">
    ///     Determines whether screen point tracking is active for positioning.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#screenLocationEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="selectedFeatureIndex">
    ///     Index of the feature that is <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#selectedFeature">selected</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#selectedFeatureIndex">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="spatialReference">
    ///     The spatial reference used for <a target="_blank" href="https://developers.arcgis.com/arcade">Arcade</a> operations.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#spatialReference">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="stringContent">
    ///     The information to display.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#content">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="timeZone">
    ///     Dates and times will be displayed in this time zone.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#timeZone">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="title">
    ///     The title of the widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#title">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="updateLocationEnabled">
    ///     Indicates whether to update the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#location">location</a> when the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#selectedFeatureIndex">selectedFeatureIndex</a> changes.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#updateLocationEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="visible">
    ///     Indicates whether the widget is visible.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#visible">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="widgetContent">
    ///     The information to display.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#content">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public FeaturesViewModel(
        IReadOnlyList<ActionBase>? actions = null,
        Graphic? activeFeature = null,
        bool? autoCloseEnabled = null,
        bool? browseClusterEnabled = null,
        bool? defaultPopupTemplateEnabled = null,
        ElementReference? elementReferenceContent = null,
        bool? featureMenuOpen = null,
        string? featureMenuTitle = null,
        double? featurePage = null,
        IReadOnlyList<Graphic>? features = null,
        double? featuresPerPage = null,
        Abilities? featureViewModelAbilities = null,
        GoToOverride? goToOverride = null,
        bool? highlightEnabled = null,
        bool? includeDefaultActions = null,
        InitialDisplayMode? initialDisplayMode = null,
        Point? location = null,
        FeaturesViewModelScreenPoint? screenLocation = null,
        bool? screenLocationEnabled = null,
        int? selectedFeatureIndex = null,
        SpatialReference? spatialReference = null,
        string? stringContent = null,
        string? timeZone = null,
        string? title = null,
        bool? updateLocationEnabled = null,
        bool? visible = null,
        Widget? widgetContent = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Actions = actions;
        ActiveFeature = activeFeature;
        AutoCloseEnabled = autoCloseEnabled;
        BrowseClusterEnabled = browseClusterEnabled;
        DefaultPopupTemplateEnabled = defaultPopupTemplateEnabled;
        ElementReferenceContent = elementReferenceContent;
        FeatureMenuOpen = featureMenuOpen;
        FeatureMenuTitle = featureMenuTitle;
        FeaturePage = featurePage;
        Features = features;
        FeaturesPerPage = featuresPerPage;
        FeatureViewModelAbilities = featureViewModelAbilities;
        GoToOverride = goToOverride;
        HighlightEnabled = highlightEnabled;
        IncludeDefaultActions = includeDefaultActions;
        InitialDisplayMode = initialDisplayMode;
        Location = location;
        ScreenLocation = screenLocation;
        ScreenLocationEnabled = screenLocationEnabled;
        SelectedFeatureIndex = selectedFeatureIndex;
        SpatialReference = spatialReference;
        StringContent = stringContent;
        TimeZone = timeZone;
        Title = title;
        UpdateLocationEnabled = updateLocationEnabled;
        Visible = visible;
        WidgetContent = widgetContent;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelactions-property">GeoBlazor Docs</a>
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Collection.html">Collection</a> of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-support-actions-ActionButton.html">action</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-support-actions-ActionToggle.html">action toggle</a> objects.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#actions">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<ActionBase>? Actions { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelactive-property">GeoBlazor Docs</a>
    ///     Indicates if the view model is active when it is visible and is not <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#waitingForResult">waiting for results</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#active">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public bool? Active { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelactivefeature-property">GeoBlazor Docs</a>
    ///     The highlighted feature on the map that is either hovered over or in focus within the feature menu.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#activeFeature">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Graphic? ActiveFeature { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelallactions-property">GeoBlazor Docs</a>
    ///     A collection of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-support-actions-ActionButton.html">actions</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-support-actions-ActionToggle.html">action toggles</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#allActions">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public IReadOnlyList<ActionBase>? AllActions { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelautocloseenabled-property">GeoBlazor Docs</a>
    ///     This closes the container when the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html">View</a> camera or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Viewpoint.html">Viewpoint</a> changes.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#autoCloseEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? AutoCloseEnabled { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelbrowseclusterenabled-property">GeoBlazor Docs</a>
    ///     Indicates if the "Browse features" experience is active in a
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureReductionCluster.html">cluster</a> popup.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#browseClusterEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? BrowseClusterEnabled { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodeldefaultactions-property">GeoBlazor Docs</a>
    ///     A read-only property that specifies a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Collection.html">Collection</a> of action <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-support-actions-ActionButton.html">buttons</a> and/or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-support-actions-ActionToggle.html">toggles</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#defaultActions">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public IReadOnlyList<ActionBase>? DefaultActions { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodeldefaultpopuptemplateenabled-property">GeoBlazor Docs</a>
    ///     Enables automatic creation of a popup template for layers that have popups enabled but no
    ///     popupTemplate defined.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#defaultPopupTemplateEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? DefaultPopupTemplateEnabled { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelelementreferencecontent-property">GeoBlazor Docs</a>
    ///     The information to display.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#content">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public ElementReference? ElementReferenceContent { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelfeaturecount-property">GeoBlazor Docs</a>
    ///     The number of selected <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#features">features</a> available.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#featureCount">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public int? FeatureCount { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelfeaturemenuopen-property">GeoBlazor Docs</a>
    ///     This property enables showing the list of features.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#featureMenuOpen">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? FeatureMenuOpen { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelfeaturemenutitle-property">GeoBlazor Docs</a>
    ///     The title to display on the widget while viewing the feature menu.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#featureMenuTitle">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? FeatureMenuTitle { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelfeaturepage-property">GeoBlazor Docs</a>
    ///     The current page number in the feature browsing menu.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#featurePage">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? FeaturePage { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelfeatures-property">GeoBlazor Docs</a>
    ///     An array of features.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#features">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<Graphic>? Features { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelfeaturesperpage-property">GeoBlazor Docs</a>
    ///     The number of features to fetch at one time.
    ///     default 20
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#featuresPerPage">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? FeaturesPerPage { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelfeatureviewmodelabilities-property">GeoBlazor Docs</a>
    ///     Defines the specific <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#Abilities">abilities</a> that can be used when querying and displaying content.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#featureViewModelAbilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Abilities? FeatureViewModelAbilities { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelfeatureviewmodels-property">GeoBlazor Docs</a>
    ///     An array of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html">feature view model(s)</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#featureViewModels">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public IReadOnlyList<IFeatureViewModel>? FeatureViewModels { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelhighlightenabled-property">GeoBlazor Docs</a>
    ///     Highlight the selected feature using the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html#highlightOptions">highlightOptions</a>
    ///     set on the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html">MapView</a> or the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html#highlightOptions">highlightOptions</a>
    ///     set on the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html">SceneView</a>.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#highlightEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? HighlightEnabled { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelincludedefaultactions-property">GeoBlazor Docs</a>
    ///     Indicates whether or not to include <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#defaultActions">defaultActions</a>.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#includeDefaultActions">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? IncludeDefaultActions { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelinitialdisplaymode-property">GeoBlazor Docs</a>
    ///     Indicates whether to initially display a list of features, or the content for one feature.
    ///     default "feature"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#initialDisplayMode">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public InitialDisplayMode? InitialDisplayMode { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodellocation-property">GeoBlazor Docs</a>
    ///     Geometry used to show the location of the feature.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#location">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Point? Location { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelpendingpromisescount-property">GeoBlazor Docs</a>
    ///     The number of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#promises">promises</a> remaining to be resolved.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#pendingPromisesCount">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public int? PendingPromisesCount { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelscreenlocation-property">GeoBlazor Docs</a>
    ///     The screen location of the selected feature.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#screenLocation">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public FeaturesViewModelScreenPoint? ScreenLocation { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelscreenlocationenabled-property">GeoBlazor Docs</a>
    ///     Determines whether screen point tracking is active for positioning.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#screenLocationEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? ScreenLocationEnabled { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelselectedclusterboundaryfeature-property">GeoBlazor Docs</a>
    ///     The graphic used to represent the cluster extent when the `Browse features` action
    ///     is active.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#selectedClusterBoundaryFeature">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public Graphic? SelectedClusterBoundaryFeature { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelselectedfeature-property">GeoBlazor Docs</a>
    ///     The selected feature accessed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#selectedFeature">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public Graphic? SelectedFeature { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelselectedfeatureindex-property">GeoBlazor Docs</a>
    ///     Index of the feature that is <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#selectedFeature">selected</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#selectedFeatureIndex">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public int? SelectedFeatureIndex { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelselectedfeatureviewmodel-property">GeoBlazor Docs</a>
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html">view model</a> of the selected feature.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#selectedFeatureViewModel">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public IFeatureViewModel? SelectedFeatureViewModel { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelspatialreference-property">GeoBlazor Docs</a>
    ///     The spatial reference used for <a target="_blank" href="https://developers.arcgis.com/arcade">Arcade</a> operations.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#spatialReference">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SpatialReference? SpatialReference { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelstate-property">GeoBlazor Docs</a>
    ///     The view model's state.
    ///     default "disabled"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#state">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public ViewModelState? State { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelstringcontent-property">GeoBlazor Docs</a>
    ///     The information to display.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#content">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? StringContent { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodeltimezone-property">GeoBlazor Docs</a>
    ///     Dates and times will be displayed in this time zone.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#timeZone">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? TimeZone { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodeltitle-property">GeoBlazor Docs</a>
    ///     The title of the widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#title">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Title { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelupdatelocationenabled-property">GeoBlazor Docs</a>
    ///     Indicates whether to update the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#location">location</a> when the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#selectedFeatureIndex">selectedFeatureIndex</a> changes.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#updateLocationEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? UpdateLocationEnabled { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelwaitingforcontents-property">GeoBlazor Docs</a>
    ///     Indicates whether the widget is waiting for content to be resolved.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#waitingForContents">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public bool? WaitingForContents { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelwaitingforresult-property">GeoBlazor Docs</a>
    ///     Indicates whether a feature was found while resolving <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#promises">promises</a>.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#waitingForResult">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public bool? WaitingForResult { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelwidgetcontent-property">GeoBlazor Docs</a>
    ///     The information to display.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#content">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Widget? WidgetContent { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Actions property.
    /// </summary>
    public async Task<IReadOnlyList<ActionBase>?> GetActions()
    {
        if (CoreJsModule is null)
        {
            return Actions;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Actions;
        }

        IReadOnlyList<ActionBase>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<ActionBase>?>(
            "getActions", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Actions = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Actions)] = Actions;
        }
        
        return Actions;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Active property.
    /// </summary>
    public async Task<bool?> GetActive()
    {
        if (CoreJsModule is null)
        {
            return Active;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Active;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "active");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Active = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Active)] = Active;
        }
         
        return Active;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ActiveFeature property.
    /// </summary>
    public async Task<Graphic?> GetActiveFeature()
    {
        if (CoreJsModule is null)
        {
            return ActiveFeature;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ActiveFeature;
        }

        Graphic? result = await JsComponentReference.InvokeAsync<Graphic?>(
            "getActiveFeature", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (ActiveFeature is not null)
            {
                result.Id = ActiveFeature.Id;
            }
            
#pragma warning disable BL0005
            ActiveFeature = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(ActiveFeature)] = ActiveFeature;
        }
        
        return ActiveFeature;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the AllActions property.
    /// </summary>
    public async Task<IReadOnlyList<ActionBase>?> GetAllActions()
    {
        if (CoreJsModule is null)
        {
            return AllActions;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return AllActions;
        }

        IReadOnlyList<ActionBase>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<ActionBase>?>(
            "getAllActions", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            AllActions = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(AllActions)] = AllActions;
        }
        
        return AllActions;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the AutoCloseEnabled property.
    /// </summary>
    public async Task<bool?> GetAutoCloseEnabled()
    {
        if (CoreJsModule is null)
        {
            return AutoCloseEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return AutoCloseEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "autoCloseEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             AutoCloseEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(AutoCloseEnabled)] = AutoCloseEnabled;
        }
         
        return AutoCloseEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the BrowseClusterEnabled property.
    /// </summary>
    public async Task<bool?> GetBrowseClusterEnabled()
    {
        if (CoreJsModule is null)
        {
            return BrowseClusterEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return BrowseClusterEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "browseClusterEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             BrowseClusterEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(BrowseClusterEnabled)] = BrowseClusterEnabled;
        }
         
        return BrowseClusterEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DefaultActions property.
    /// </summary>
    public async Task<IReadOnlyList<ActionBase>?> GetDefaultActions()
    {
        if (CoreJsModule is null)
        {
            return DefaultActions;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return DefaultActions;
        }

        IReadOnlyList<ActionBase>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<ActionBase>?>(
            "getDefaultActions", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            DefaultActions = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(DefaultActions)] = DefaultActions;
        }
        
        return DefaultActions;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DefaultPopupTemplateEnabled property.
    /// </summary>
    public async Task<bool?> GetDefaultPopupTemplateEnabled()
    {
        if (CoreJsModule is null)
        {
            return DefaultPopupTemplateEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return DefaultPopupTemplateEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "defaultPopupTemplateEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             DefaultPopupTemplateEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DefaultPopupTemplateEnabled)] = DefaultPopupTemplateEnabled;
        }
         
        return DefaultPopupTemplateEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ElementReferenceContent property.
    /// </summary>
    public async Task<ElementReference?> GetElementReferenceContent()
    {
        if (CoreJsModule is null)
        {
            return ElementReferenceContent;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ElementReferenceContent;
        }

        // get the property value
        JsNullableElementReferenceWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableElementReferenceWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "elementReferenceContent");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ElementReferenceContent = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ElementReferenceContent)] = ElementReferenceContent;
        }
         
        return ElementReferenceContent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FeatureCount property.
    /// </summary>
    public async Task<int?> GetFeatureCount()
    {
        if (CoreJsModule is null)
        {
            return FeatureCount;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return FeatureCount;
        }

        // get the property value
        JsNullableIntWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableIntWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "featureCount");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             FeatureCount = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FeatureCount)] = FeatureCount;
        }
         
        return FeatureCount;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FeatureMenuOpen property.
    /// </summary>
    public async Task<bool?> GetFeatureMenuOpen()
    {
        if (CoreJsModule is null)
        {
            return FeatureMenuOpen;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return FeatureMenuOpen;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "featureMenuOpen");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             FeatureMenuOpen = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FeatureMenuOpen)] = FeatureMenuOpen;
        }
         
        return FeatureMenuOpen;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FeatureMenuTitle property.
    /// </summary>
    public async Task<string?> GetFeatureMenuTitle()
    {
        if (CoreJsModule is null)
        {
            return FeatureMenuTitle;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return FeatureMenuTitle;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "featureMenuTitle");
        if (result is not null)
        {
#pragma warning disable BL0005
             FeatureMenuTitle = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FeatureMenuTitle)] = FeatureMenuTitle;
        }
         
        return FeatureMenuTitle;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FeaturePage property.
    /// </summary>
    public async Task<double?> GetFeaturePage()
    {
        if (CoreJsModule is null)
        {
            return FeaturePage;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return FeaturePage;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "featurePage");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             FeaturePage = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FeaturePage)] = FeaturePage;
        }
         
        return FeaturePage;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Features property.
    /// </summary>
    public async Task<IReadOnlyList<Graphic>?> GetFeatures()
    {
        if (CoreJsModule is null)
        {
            return Features;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Features;
        }

        IReadOnlyList<Graphic>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<Graphic>?>(
            "getFeatures", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Features = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Features)] = Features;
        }
        
        return Features;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FeaturesPerPage property.
    /// </summary>
    public async Task<double?> GetFeaturesPerPage()
    {
        if (CoreJsModule is null)
        {
            return FeaturesPerPage;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return FeaturesPerPage;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "featuresPerPage");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             FeaturesPerPage = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FeaturesPerPage)] = FeaturesPerPage;
        }
         
        return FeaturesPerPage;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FeatureViewModelAbilities property.
    /// </summary>
    public async Task<Abilities?> GetFeatureViewModelAbilities()
    {
        if (CoreJsModule is null)
        {
            return FeatureViewModelAbilities;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return FeatureViewModelAbilities;
        }

        Abilities? result = await JsComponentReference.InvokeAsync<Abilities?>(
            "getFeatureViewModelAbilities", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            FeatureViewModelAbilities = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(FeatureViewModelAbilities)] = FeatureViewModelAbilities;
        }
        
        return FeatureViewModelAbilities;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FeatureViewModels property.
    /// </summary>
    public async Task<IReadOnlyList<IFeatureViewModel>?> GetFeatureViewModels()
    {
        if (CoreJsModule is null)
        {
            return FeatureViewModels;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return FeatureViewModels;
        }

        // get the property value
        IReadOnlyList<IFeatureViewModel>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<IFeatureViewModel>?>("getProperty",
            CancellationTokenSource.Token, "featureViewModels");
        if (result is not null)
        {
#pragma warning disable BL0005
             FeatureViewModels = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FeatureViewModels)] = FeatureViewModels;
        }
         
        return FeatureViewModels;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HighlightEnabled property.
    /// </summary>
    public async Task<bool?> GetHighlightEnabled()
    {
        if (CoreJsModule is null)
        {
            return HighlightEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return HighlightEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "highlightEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             HighlightEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HighlightEnabled)] = HighlightEnabled;
        }
         
        return HighlightEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the IncludeDefaultActions property.
    /// </summary>
    public async Task<bool?> GetIncludeDefaultActions()
    {
        if (CoreJsModule is null)
        {
            return IncludeDefaultActions;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return IncludeDefaultActions;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "includeDefaultActions");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             IncludeDefaultActions = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(IncludeDefaultActions)] = IncludeDefaultActions;
        }
         
        return IncludeDefaultActions;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the InitialDisplayMode property.
    /// </summary>
    public async Task<InitialDisplayMode?> GetInitialDisplayMode()
    {
        if (CoreJsModule is null)
        {
            return InitialDisplayMode;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return InitialDisplayMode;
        }

        // get the property value
        JsNullableEnumWrapper<InitialDisplayMode>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<InitialDisplayMode>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "initialDisplayMode");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             InitialDisplayMode = (InitialDisplayMode)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(InitialDisplayMode)] = InitialDisplayMode;
        }
         
        return InitialDisplayMode;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Location property.
    /// </summary>
    public async Task<Point?> GetLocation()
    {
        if (CoreJsModule is null)
        {
            return Location;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Location;
        }

        Point? result = await JsComponentReference.InvokeAsync<Point?>(
            "getLocation", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (Location is not null)
            {
                result.Id = Location.Id;
            }
            
#pragma warning disable BL0005
            Location = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Location)] = Location;
        }
        
        return Location;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PendingPromisesCount property.
    /// </summary>
    public async Task<int?> GetPendingPromisesCount()
    {
        if (CoreJsModule is null)
        {
            return PendingPromisesCount;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return PendingPromisesCount;
        }

        // get the property value
        JsNullableIntWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableIntWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "pendingPromisesCount");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             PendingPromisesCount = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(PendingPromisesCount)] = PendingPromisesCount;
        }
         
        return PendingPromisesCount;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ScreenLocation property.
    /// </summary>
    public async Task<FeaturesViewModelScreenPoint?> GetScreenLocation()
    {
        if (CoreJsModule is null)
        {
            return ScreenLocation;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ScreenLocation;
        }

        FeaturesViewModelScreenPoint? result = await JsComponentReference.InvokeAsync<FeaturesViewModelScreenPoint?>(
            "getScreenLocation", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            ScreenLocation = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(ScreenLocation)] = ScreenLocation;
        }
        
        return ScreenLocation;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ScreenLocationEnabled property.
    /// </summary>
    public async Task<bool?> GetScreenLocationEnabled()
    {
        if (CoreJsModule is null)
        {
            return ScreenLocationEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ScreenLocationEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "screenLocationEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ScreenLocationEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ScreenLocationEnabled)] = ScreenLocationEnabled;
        }
         
        return ScreenLocationEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SelectedClusterBoundaryFeature property.
    /// </summary>
    public async Task<Graphic?> GetSelectedClusterBoundaryFeature()
    {
        if (CoreJsModule is null)
        {
            return SelectedClusterBoundaryFeature;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SelectedClusterBoundaryFeature;
        }

        Graphic? result = await JsComponentReference.InvokeAsync<Graphic?>(
            "getSelectedClusterBoundaryFeature", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (SelectedClusterBoundaryFeature is not null)
            {
                result.Id = SelectedClusterBoundaryFeature.Id;
            }
            
#pragma warning disable BL0005
            SelectedClusterBoundaryFeature = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(SelectedClusterBoundaryFeature)] = SelectedClusterBoundaryFeature;
        }
        
        return SelectedClusterBoundaryFeature;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SelectedFeature property.
    /// </summary>
    public async Task<Graphic?> GetSelectedFeature()
    {
        if (CoreJsModule is null)
        {
            return SelectedFeature;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SelectedFeature;
        }

        Graphic? result = await JsComponentReference.InvokeAsync<Graphic?>(
            "getSelectedFeature", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (SelectedFeature is not null)
            {
                result.Id = SelectedFeature.Id;
            }
            
#pragma warning disable BL0005
            SelectedFeature = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(SelectedFeature)] = SelectedFeature;
        }
        
        return SelectedFeature;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SelectedFeatureIndex property.
    /// </summary>
    public async Task<int?> GetSelectedFeatureIndex()
    {
        if (CoreJsModule is null)
        {
            return SelectedFeatureIndex;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SelectedFeatureIndex;
        }

        // get the property value
        JsNullableIntWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableIntWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "selectedFeatureIndex");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SelectedFeatureIndex = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SelectedFeatureIndex)] = SelectedFeatureIndex;
        }
         
        return SelectedFeatureIndex;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SelectedFeatureViewModel property.
    /// </summary>
    public async Task<IFeatureViewModel?> GetSelectedFeatureViewModel()
    {
        if (CoreJsModule is null)
        {
            return SelectedFeatureViewModel;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SelectedFeatureViewModel;
        }

        // get the property value
        IFeatureViewModel? result = await JsComponentReference!.InvokeAsync<IFeatureViewModel?>("getProperty",
            CancellationTokenSource.Token, "selectedFeatureViewModel");
        if (result is not null)
        {
#pragma warning disable BL0005
             SelectedFeatureViewModel = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SelectedFeatureViewModel)] = SelectedFeatureViewModel;
        }
         
        return SelectedFeatureViewModel;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SpatialReference property.
    /// </summary>
    public async Task<SpatialReference?> GetSpatialReference()
    {
        if (CoreJsModule is null)
        {
            return SpatialReference;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SpatialReference;
        }

        SpatialReference? result = await JsComponentReference.InvokeAsync<SpatialReference?>(
            "getSpatialReference", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            SpatialReference = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(SpatialReference)] = SpatialReference;
        }
        
        return SpatialReference;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the State property.
    /// </summary>
    public async Task<ViewModelState?> GetState()
    {
        if (CoreJsModule is null)
        {
            return State;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return State;
        }

        // get the property value
        JsNullableEnumWrapper<ViewModelState>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<ViewModelState>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "state");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             State = (ViewModelState)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(State)] = State;
        }
         
        return State;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the StringContent property.
    /// </summary>
    public async Task<string?> GetStringContent()
    {
        if (CoreJsModule is null)
        {
            return StringContent;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return StringContent;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "content");
        if (result is not null)
        {
#pragma warning disable BL0005
             StringContent = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(StringContent)] = StringContent;
        }
         
        return StringContent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the TimeZone property.
    /// </summary>
    public async Task<string?> GetTimeZone()
    {
        if (CoreJsModule is null)
        {
            return TimeZone;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return TimeZone;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "timeZone");
        if (result is not null)
        {
#pragma warning disable BL0005
             TimeZone = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(TimeZone)] = TimeZone;
        }
         
        return TimeZone;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Title property.
    /// </summary>
    public async Task<string?> GetTitle()
    {
        if (CoreJsModule is null)
        {
            return Title;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Title;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "title");
        if (result is not null)
        {
#pragma warning disable BL0005
             Title = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Title)] = Title;
        }
         
        return Title;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the UpdateLocationEnabled property.
    /// </summary>
    public async Task<bool?> GetUpdateLocationEnabled()
    {
        if (CoreJsModule is null)
        {
            return UpdateLocationEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return UpdateLocationEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "updateLocationEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             UpdateLocationEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(UpdateLocationEnabled)] = UpdateLocationEnabled;
        }
         
        return UpdateLocationEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the WaitingForContents property.
    /// </summary>
    public async Task<bool?> GetWaitingForContents()
    {
        if (CoreJsModule is null)
        {
            return WaitingForContents;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return WaitingForContents;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "waitingForContents");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             WaitingForContents = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(WaitingForContents)] = WaitingForContents;
        }
         
        return WaitingForContents;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the WaitingForResult property.
    /// </summary>
    public async Task<bool?> GetWaitingForResult()
    {
        if (CoreJsModule is null)
        {
            return WaitingForResult;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return WaitingForResult;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "waitingForResult");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             WaitingForResult = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(WaitingForResult)] = WaitingForResult;
        }
         
        return WaitingForResult;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the WidgetContent property.
    /// </summary>
    public async Task<Widget?> GetWidgetContent()
    {
        if (CoreJsModule is null)
        {
            return WidgetContent;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return WidgetContent;
        }

        Widget? result = await JsComponentReference.InvokeAsync<Widget?>(
            "getWidgetContent", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (WidgetContent is not null)
            {
                result.Id = WidgetContent.Id;
            }
            
#pragma warning disable BL0005
            WidgetContent = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(WidgetContent)] = WidgetContent;
        }
        
        return WidgetContent;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Actions property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetActions(IReadOnlyList<ActionBase>? value)
    {
        if (value is not null)
        {
            foreach (ActionBase item in value)
            {
                item.CoreJsModule = CoreJsModule;
                item.Parent = this;
                item.Layer = Layer;
                item.View = View;
            }
        }
        
#pragma warning disable BL0005
        Actions = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Actions)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setActions", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ActiveFeature property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetActiveFeature(Graphic? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        ActiveFeature = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ActiveFeature)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setActiveFeature", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the AutoCloseEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAutoCloseEnabled(bool? value)
    {
#pragma warning disable BL0005
        AutoCloseEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(AutoCloseEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "autoCloseEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the BrowseClusterEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBrowseClusterEnabled(bool? value)
    {
#pragma warning disable BL0005
        BrowseClusterEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(BrowseClusterEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "browseClusterEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DefaultPopupTemplateEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDefaultPopupTemplateEnabled(bool? value)
    {
#pragma warning disable BL0005
        DefaultPopupTemplateEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DefaultPopupTemplateEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "defaultPopupTemplateEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ElementReferenceContent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetElementReferenceContent(ElementReference? value)
    {
#pragma warning disable BL0005
        ElementReferenceContent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ElementReferenceContent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "content", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FeatureMenuOpen property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFeatureMenuOpen(bool? value)
    {
#pragma warning disable BL0005
        FeatureMenuOpen = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FeatureMenuOpen)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "featureMenuOpen", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FeatureMenuTitle property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFeatureMenuTitle(string? value)
    {
#pragma warning disable BL0005
        FeatureMenuTitle = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FeatureMenuTitle)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "featureMenuTitle", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FeaturePage property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFeaturePage(double? value)
    {
#pragma warning disable BL0005
        FeaturePage = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FeaturePage)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "featurePage", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Features property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFeatures(IReadOnlyList<Graphic>? value)
    {
        if (value is not null)
        {
            foreach (Graphic item in value)
            {
                item.CoreJsModule = CoreJsModule;
                item.Parent = this;
                item.Layer = Layer;
                item.View = View;
            }
        }
        
#pragma warning disable BL0005
        Features = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Features)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setFeatures", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FeaturesPerPage property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFeaturesPerPage(double? value)
    {
#pragma warning disable BL0005
        FeaturesPerPage = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FeaturesPerPage)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "featuresPerPage", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FeatureViewModelAbilities property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFeatureViewModelAbilities(Abilities? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        FeatureViewModelAbilities = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FeatureViewModelAbilities)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setFeatureViewModelAbilities", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HighlightEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHighlightEnabled(bool? value)
    {
#pragma warning disable BL0005
        HighlightEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HighlightEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "highlightEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the IncludeDefaultActions property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetIncludeDefaultActions(bool? value)
    {
#pragma warning disable BL0005
        IncludeDefaultActions = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(IncludeDefaultActions)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "includeDefaultActions", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the InitialDisplayMode property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetInitialDisplayMode(InitialDisplayMode? value)
    {
#pragma warning disable BL0005
        InitialDisplayMode = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(InitialDisplayMode)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "initialDisplayMode", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Location property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLocation(Point? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        Location = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Location)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setLocation", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ScreenLocation property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetScreenLocation(FeaturesViewModelScreenPoint? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        ScreenLocation = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ScreenLocation)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setScreenLocation", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ScreenLocationEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetScreenLocationEnabled(bool? value)
    {
#pragma warning disable BL0005
        ScreenLocationEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ScreenLocationEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "screenLocationEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SelectedFeatureIndex property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSelectedFeatureIndex(int? value)
    {
#pragma warning disable BL0005
        SelectedFeatureIndex = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SelectedFeatureIndex)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "selectedFeatureIndex", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SpatialReference property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSpatialReference(SpatialReference? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        SpatialReference = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SpatialReference)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setSpatialReference", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the StringContent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetStringContent(string? value)
    {
#pragma warning disable BL0005
        StringContent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(StringContent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "content", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the TimeZone property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTimeZone(string? value)
    {
#pragma warning disable BL0005
        TimeZone = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(TimeZone)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "timeZone", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Title property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTitle(string? value)
    {
#pragma warning disable BL0005
        Title = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Title)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "title", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the UpdateLocationEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUpdateLocationEnabled(bool? value)
    {
#pragma warning disable BL0005
        UpdateLocationEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(UpdateLocationEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "updateLocationEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the WidgetContent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetWidgetContent(Widget? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        WidgetContent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(WidgetContent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setWidgetContent", 
            CancellationTokenSource.Token, value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the Actions property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToActions(params ActionBase[] values)
    {
        ActionBase[] join = Actions is null
            ? values
            : [..Actions, ..values];
        await SetActions(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the Features property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToFeatures(params Graphic[] values)
    {
        Graphic[] join = Features is null
            ? values
            : [..Features, ..values];
        await SetFeatures(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the Actions property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromActions(params ActionBase[] values)
    {
        if (Actions is null)
        {
            return;
        }
        await SetActions(Actions.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the Features property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromFeatures(params Graphic[] values)
    {
        if (Features is null)
        {
            return;
        }
        await SetFeatures(Features.Except(values).ToArray());
    }
    
#endregion

#region Public Methods

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelclear-method">GeoBlazor Docs</a>
    ///     Removes all <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#promises">promises</a>, <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#features">features</a>, <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#content">content</a>, and
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#title">title</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#clear">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task Clear()
    {
        if (CoreJsModule is null)
        {
            return;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference!.InvokeVoidAsync(
            "clear", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelnext-method">GeoBlazor Docs</a>
    ///     Selects the feature at the next index in relation to the selected feature.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#next">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task<FeaturesViewModel?> Next()
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<FeaturesViewModel?>(
            "next", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelopen-method">GeoBlazor Docs</a>
    ///     Opens the widget at the given location with content defined either explicitly with `content`
    ///     or driven from the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html">PopupTemplate</a> of input features.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#open">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="options">
    ///     Defines the location and content of the popup when opened.
    /// </param>
    [ArcGISMethod]
    public async Task Open(GoToOptions options)
    {
        if (CoreJsModule is null)
        {
            return;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference!.InvokeVoidAsync(
            "open", 
            CancellationTokenSource.Token,
            options);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelprevious-method">GeoBlazor Docs</a>
    ///     Selects the feature at the previous index in relation to the selected feature.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#previous">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task<FeaturesViewModel?> Previous()
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<FeaturesViewModel?>(
            "previous", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodeltriggeraction-method">GeoBlazor Docs</a>
    ///     Triggers the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#event-trigger-action">trigger-action</a> event and executes the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#actions">action</a>
    ///     at the specified index in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#actions">actions</a> array.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#triggerAction">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="actionIndex">
    ///     The index of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Features-FeaturesViewModel.html#actions">action</a> to execute.
    /// </param>
    [ArcGISMethod]
    public async Task TriggerAction(int actionIndex)
    {
        if (CoreJsModule is null)
        {
            return;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference!.InvokeVoidAsync(
            "triggerAction", 
            CancellationTokenSource.Token,
            actionIndex);
    }
    
#endregion

#region Event Handlers

    /// <summary>
    ///     JavaScript-Invokable Method for internal use only.
    /// </summary>
    [JSInvokable]
    public async Task OnJsTriggerAction(IJSStreamReference jsStreamRef)
    {
        if (IsDisposed)
        {
            // cancel if the component is disposed
            return;
        }
    
        FeaturesViewModelTriggerActionEvent? triggerActionEvent = await jsStreamRef.ReadJsStreamReference<FeaturesViewModelTriggerActionEvent>();
        if (triggerActionEvent is not null)
        {
            await OnTriggerAction.InvokeAsync(triggerActionEvent);
        }
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeaturesViewModel.html#featuresviewmodelontriggeraction-property">GeoBlazor Docs</a>
    ///     Fires after the user clicks on an <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-support-actions-ActionButton.html">action</a> or <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-support-actions-ActionToggle.html">action toggle</a> in the action bar. This
    ///     event may be used to define a custom function to execute when particular
    ///     actions are clicked. See the example below for details of how this works.
    /// </summary>
    [Parameter]
    [JsonIgnore]
    public EventCallback<FeaturesViewModelTriggerActionEvent> OnTriggerAction { get; set; }
   
    /// <summary>
    ///     Used in JavaScript layer to determine if the event listener is registered.
    /// </summary>
    public bool HasTriggerActionListener => OnTriggerAction.HasDelegate;
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ActionBase actions:
                Actions ??= [];
                if (!Actions.Contains(actions))
                {
                    Actions = [..Actions, actions];
                    ModifiedParameters[nameof(Actions)] = Actions;
                }
                
                return true;
            case Abilities featureViewModelAbilities:
                if (featureViewModelAbilities != FeatureViewModelAbilities)
                {
                    FeatureViewModelAbilities = featureViewModelAbilities;
                    ModifiedParameters[nameof(FeatureViewModelAbilities)] = FeatureViewModelAbilities;
                }
                
                return true;
            case Point location:
                if (location != Location)
                {
                    Location = location;
                    ModifiedParameters[nameof(Location)] = Location;
                }
                
                return true;
            case FeaturesViewModelScreenPoint screenLocation:
                if (screenLocation != ScreenLocation)
                {
                    ScreenLocation = screenLocation;
                    ModifiedParameters[nameof(ScreenLocation)] = ScreenLocation;
                }
                
                return true;
            case SpatialReference spatialReference:
                if (spatialReference != SpatialReference)
                {
                    SpatialReference = spatialReference;
                    ModifiedParameters[nameof(SpatialReference)] = SpatialReference;
                }
                
                return true;
            case Widget widgetContent:
                if (widgetContent != WidgetContent)
                {
                    WidgetContent = widgetContent;
                    ModifiedParameters[nameof(WidgetContent)] = WidgetContent;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ActionBase actions:
                Actions = Actions?.Where(a => a != actions).ToList();
                ModifiedParameters[nameof(Actions)] = Actions;
                return true;
            case Abilities _:
                FeatureViewModelAbilities = null;
                ModifiedParameters[nameof(FeatureViewModelAbilities)] = FeatureViewModelAbilities;
                return true;
            case Point _:
                Location = null;
                ModifiedParameters[nameof(Location)] = Location;
                return true;
            case FeaturesViewModelScreenPoint _:
                ScreenLocation = null;
                ModifiedParameters[nameof(ScreenLocation)] = ScreenLocation;
                return true;
            case SpatialReference _:
                SpatialReference = null;
                ModifiedParameters[nameof(SpatialReference)] = SpatialReference;
                return true;
            case Widget _:
                WidgetContent = null;
                ModifiedParameters[nameof(WidgetContent)] = WidgetContent;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        if (Actions is not null)
        {
            foreach (ActionBase child in Actions)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        FeatureViewModelAbilities?.ValidateRequiredGeneratedChildren();
        Location?.ValidateRequiredGeneratedChildren();
        ScreenLocation?.ValidateRequiredGeneratedChildren();
        SpatialReference?.ValidateRequiredGeneratedChildren();
        WidgetContent?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
