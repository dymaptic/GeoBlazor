// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Provides the logic for the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Expand.html">Expand</a> widget.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Expand-ExpandViewModel.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class ExpandViewModel : MapComponent,
    IViewModel
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public ExpandViewModel()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="autoCollapse">
    ///     Automatically collapses the expand widget instance when the view's viewpoint updates.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Expand-ExpandViewModel.html#autoCollapse">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="expanded">
    ///     Whether the widget is currently expanded or not.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Expand-ExpandViewModel.html#expanded">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="group">
    ///     This value associates two or more Expand widget instances with each other, allowing one instance to auto collapse when another instance in the same group is expanded.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Expand-ExpandViewModel.html#group">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public ExpandViewModel(
        bool? autoCollapse = null,
        bool? expanded = null,
        string? group = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        AutoCollapse = autoCollapse;
        Expanded = expanded;
        Group = group;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Automatically collapses the expand widget instance when the view's viewpoint updates.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Expand-ExpandViewModel.html#autoCollapse">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? AutoCollapse { get; set; }
    
    /// <summary>
    ///     Whether the widget is currently expanded or not.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Expand-ExpandViewModel.html#expanded">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Expanded { get; set; }
    
    /// <summary>
    ///     This value associates two or more Expand widget instances with each other, allowing one instance to auto collapse when another instance in the same group is expanded.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Expand-ExpandViewModel.html#group">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Group { get; set; }
    
    /// <summary>
    ///     The view model's state.
    ///     default disabled
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Expand-ExpandViewModel.html#state">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public State? State { get; protected set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the AutoCollapse property.
    /// </summary>
    public async Task<bool?> GetAutoCollapse()
    {
        if (CoreJsModule is null)
        {
            return AutoCollapse;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return AutoCollapse;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "autoCollapse");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             AutoCollapse = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(AutoCollapse)] = AutoCollapse;
        }
         
        return AutoCollapse;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Expanded property.
    /// </summary>
    public async Task<bool?> GetExpanded()
    {
        if (CoreJsModule is null)
        {
            return Expanded;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Expanded;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "expanded");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Expanded = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Expanded)] = Expanded;
        }
         
        return Expanded;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Group property.
    /// </summary>
    public async Task<string?> GetGroup()
    {
        if (CoreJsModule is null)
        {
            return Group;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Group;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "group");
        if (result is not null)
        {
#pragma warning disable BL0005
             Group = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Group)] = Group;
        }
         
        return Group;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the State property.
    /// </summary>
    public async Task<State?> GetState()
    {
        if (CoreJsModule is null)
        {
            return State;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return State;
        }

        // get the property value
        JsNullableEnumWrapper<State>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<State>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "state");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             State = (State)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(State)] = State;
        }
         
        return State;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the View property.
    /// </summary>
    public async Task<MapView?> GetView()
    {
        if (CoreJsModule is null)
        {
            return View;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return View;
        }

        // get the property value
        MapView? result = await JsComponentReference!.InvokeAsync<MapView?>("getProperty",
            CancellationTokenSource.Token, "view");
        if (result is not null)
        {
#pragma warning disable BL0005
             View = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(View)] = View;
        }
         
        return View;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the AutoCollapse property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAutoCollapse(bool? value)
    {
#pragma warning disable BL0005
        AutoCollapse = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(AutoCollapse)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "autoCollapse", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Expanded property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetExpanded(bool? value)
    {
#pragma warning disable BL0005
        Expanded = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Expanded)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "expanded", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Group property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetGroup(string? value)
    {
#pragma warning disable BL0005
        Group = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Group)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "group", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the View property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetView(MapView? value)
    {
#pragma warning disable BL0005
        View = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(View)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "view", value);
    }
    
#endregion

}
