// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Indicates options supported by the exportTiles operation.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class VectorTileLayerCapabilitiesExportTiles : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public VectorTileLayerCapabilitiesExportTiles()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="maxExportTilesCount">
    ///     Specifies the maximum number of tiles that can be exported to a cache dataset or a tile package.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public VectorTileLayerCapabilitiesExportTiles(
        int? maxExportTilesCount = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        MaxExportTilesCount = maxExportTilesCount;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Specifies the maximum number of tiles that can be exported to a cache dataset or a tile package.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public int? MaxExportTilesCount { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the MaxExportTilesCount property.
    /// </summary>
    public async Task<int?> GetMaxExportTilesCount()
    {
        if (CoreJsModule is null)
        {
            return MaxExportTilesCount;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return MaxExportTilesCount;
        }

        // get the property value
#pragma warning disable BL0005
        MaxExportTilesCount = await CoreJsModule!.InvokeAsync<int>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "maxExportTilesCount");
#pragma warning restore BL0005
         ModifiedParameters[nameof(MaxExportTilesCount)] = MaxExportTilesCount;
        return MaxExportTilesCount;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the MaxExportTilesCount property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMaxExportTilesCount(int value)
    {
#pragma warning disable BL0005
        MaxExportTilesCount = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MaxExportTilesCount)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "maxExportTilesCount", value);
    }
    
#endregion




}
