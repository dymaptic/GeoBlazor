// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Describes the layer's supported capabilities.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class ArcGISImageServiceCapabilities : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public ArcGISImageServiceCapabilities()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="mensuration">
    ///     Describes <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/enterprise/measure.htm">mensuration operations</a> supported by the ImageryLayer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="operations">
    ///     Describes operations supported by the ImageryLayer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="query">
    ///     Describes <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-Query.html">query</a> operations supported by the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public ArcGISImageServiceCapabilities(
        ArcGISImageServiceCapabilitiesMensuration? mensuration = null,
        ArcGISImageServiceCapabilitiesOperations? operations = null,
        ArcGISImageServiceCapabilitiesQuery? query = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Mensuration = mensuration;
        Operations = operations;
        Query = query;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Describes <a target="_blank" href="https://developers.arcgis.com/rest/services-reference/enterprise/measure.htm">mensuration operations</a> supported by the ImageryLayer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public ArcGISImageServiceCapabilitiesMensuration? Mensuration { get; set; }
    
    /// <summary>
    ///     Describes operations supported by the ImageryLayer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public ArcGISImageServiceCapabilitiesOperations? Operations { get; set; }
    
    /// <summary>
    ///     Describes <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-Query.html">query</a> operations supported by the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ArcGISImageService.html#capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public ArcGISImageServiceCapabilitiesQuery? Query { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Mensuration property.
    /// </summary>
    public async Task<ArcGISImageServiceCapabilitiesMensuration?> GetMensuration()
    {
        if (CoreJsModule is null)
        {
            return Mensuration;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Mensuration;
        }

        // get the property value
        ArcGISImageServiceCapabilitiesMensuration? result = await CoreJsModule!.InvokeAsync<ArcGISImageServiceCapabilitiesMensuration?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "mensuration");
        if (result is not null)
        {
#pragma warning disable BL0005
             Mensuration = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Mensuration)] = Mensuration;
        }
         
        return Mensuration;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Operations property.
    /// </summary>
    public async Task<ArcGISImageServiceCapabilitiesOperations?> GetOperations()
    {
        if (CoreJsModule is null)
        {
            return Operations;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Operations;
        }

        // get the property value
        ArcGISImageServiceCapabilitiesOperations? result = await CoreJsModule!.InvokeAsync<ArcGISImageServiceCapabilitiesOperations?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "operations");
        if (result is not null)
        {
#pragma warning disable BL0005
             Operations = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Operations)] = Operations;
        }
         
        return Operations;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Query property.
    /// </summary>
    public async Task<ArcGISImageServiceCapabilitiesQuery?> GetQuery()
    {
        if (CoreJsModule is null)
        {
            return Query;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Query;
        }

        // get the property value
        ArcGISImageServiceCapabilitiesQuery? result = await CoreJsModule!.InvokeAsync<ArcGISImageServiceCapabilitiesQuery?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "query");
        if (result is not null)
        {
#pragma warning disable BL0005
             Query = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Query)] = Query;
        }
         
        return Query;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Mensuration property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMensuration(ArcGISImageServiceCapabilitiesMensuration value)
    {
#pragma warning disable BL0005
        Mensuration = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Mensuration)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "mensuration", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Operations property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetOperations(ArcGISImageServiceCapabilitiesOperations value)
    {
#pragma warning disable BL0005
        Operations = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Operations)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "operations", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Query property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetQuery(ArcGISImageServiceCapabilitiesQuery value)
    {
#pragma warning disable BL0005
        Query = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Query)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "query", value);
    }
    
#endregion





    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ArcGISImageServiceCapabilitiesMensuration mensuration:
                if (mensuration != Mensuration)
                {
                    Mensuration = mensuration;
                    
                    ModifiedParameters[nameof(Mensuration)] = Mensuration;
                }
                
                return true;
            case ArcGISImageServiceCapabilitiesOperations operations:
                if (operations != Operations)
                {
                    Operations = operations;
                    
                    ModifiedParameters[nameof(Operations)] = Operations;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ArcGISImageServiceCapabilitiesMensuration _:
                Mensuration = null;
                
                ModifiedParameters[nameof(Mensuration)] = Mensuration;
                return true;
            case ArcGISImageServiceCapabilitiesOperations _:
                Operations = null;
                
                ModifiedParameters[nameof(Operations)] = Operations;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    internal override void ValidateRequiredGeneratedChildren()
    {
    
        Mensuration?.ValidateRequiredGeneratedChildren();
        Operations?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
