// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    The rotation visual variable defines how features rendered with <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-MarkerSymbol.html">marker symbols</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html">text symbols</a> in a MapView are rotated.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-RotationVariable.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class RotationVariable
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public RotationVariable()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="field">
    ///     The name of the numeric attribute field that contains the data values used to determine the color/opacity/size/rotation of each feature.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html#field">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="axis">
    ///     Only applicable when working in a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html">SceneView</a>.
    ///     default heading
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-RotationVariable.html#axis">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="rotationType">
    ///     Defines the origin and direction of rotation depending on how the angle of rotation was measured.
    ///     default geographic
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-RotationVariable.html#rotationType">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="legendOptions">
    ///     An object providing options for displaying the visual variable in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html">Legend</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html#legendOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="valueExpression">
    ///     An <a target="_blank" href="https://developers.arcgis.com/javascript/latest/arcade/">Arcade</a> expression following the specification defined by the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/arcade/#visualization">Arcade Visualization Profile</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html#valueExpression">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="valueExpressionTitle">
    ///     The title identifying and describing the associated <a target="_blank" href="https://developers.arcgis.com/javascript/latest/arcade/">Arcade</a> expression as defined in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html#valueExpression">valueExpression</a> property.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html#valueExpressionTitle">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public RotationVariable(
        string field,
        Axis? axis = null,
        RotationType? rotationType = null,
        VisualVariableLegendOptions? legendOptions = null,
        string? valueExpression = null,
        string? valueExpressionTitle = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Field = field;
        Axis = axis;
        RotationType = rotationType;
        LegendOptions = legendOptions;
        ValueExpression = valueExpression;
        ValueExpressionTitle = valueExpressionTitle;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Only applicable when working in a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html">SceneView</a>.
    ///     default heading
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-RotationVariable.html#axis">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Axis? Axis { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Axis property.
    /// </summary>
    public async Task<Axis?> GetAxis()
    {
        if (CoreJsModule is null)
        {
            return Axis;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Axis;
        }

        // get the property value
        JsNullableEnumWrapper<Axis>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<Axis>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "axis");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Axis = (Axis)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Axis)] = Axis;
        }
         
        return Axis;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RotationType property.
    /// </summary>
    public async Task<RotationType?> GetRotationType()
    {
        if (CoreJsModule is null)
        {
            return RotationType;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return RotationType;
        }

        // get the property value
        JsNullableEnumWrapper<RotationType>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<RotationType>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "rotationType");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             RotationType = (RotationType)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(RotationType)] = RotationType;
        }
         
        return RotationType;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Axis property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAxis(Axis? value)
    {
#pragma warning disable BL0005
        Axis = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Axis)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "axis", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the RotationType property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRotationType(RotationType? value)
    {
#pragma warning disable BL0005
        RotationType = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RotationType)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "rotationType", value);
    }
    
#endregion

}
