// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Slide.html">GeoBlazor Docs</a>
///     A slide stores a snapshot of several pre-set properties of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-WebScene.html">WebScene</a> and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html">SceneView</a>, such as the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html#basemap">basemap</a>, <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html#viewpoint">viewpoint</a> and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html#visibleLayers">visible layers</a>.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class Slide : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public Slide()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="basemap">
    ///     The basemap of the scene.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html#basemap">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="description">
    ///     The description of the slide.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html#description">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="environment">
    ///     Represents settings that affect the environment in which the WebScene is displayed (such as lighting).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html#environment">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="ground">
    ///     Ground properties for this slide.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html#ground">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="hidden">
    ///     The visibility of a slide in a presentation.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html#hidden">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="slideId">
    ///     The unique id of a slide within the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Presentation.html#slides">slides property</a> of a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Presentation.html">Presentation</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html#id">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="thumbnail">
    ///     A data URI encoded thumbnail.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html#thumbnail">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="timeExtent">
    ///     The time extent of the scene.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html#timeExtent">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="title">
    ///     The title of the slide.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html#title">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="viewpoint">
    ///     The viewpoint of the slide.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html#viewpoint">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="visibleLayers">
    ///     The visible layers of the scene.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html#visibleLayers">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public Slide(
        Basemap? basemap = null,
        SlideDescription? description = null,
        SlideEnvironment? environment = null,
        SlideGround? ground = null,
        bool? hidden = null,
        string? slideId = null,
        SlideThumbnail? thumbnail = null,
        TimeExtent? timeExtent = null,
        SlideTitle? title = null,
        Viewpoint? viewpoint = null,
        IReadOnlyList<SlideVisibleLayers>? visibleLayers = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Basemap = basemap;
        Description = description;
        Environment = environment;
        Ground = ground;
        Hidden = hidden;
        SlideId = slideId;
        Thumbnail = thumbnail;
        TimeExtent = timeExtent;
        Title = title;
        Viewpoint = viewpoint;
        VisibleLayers = visibleLayers;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The basemap of the scene.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html#basemap">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Basemap? Basemap { get; set; }
    
    /// <summary>
    ///     The description of the slide.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html#description">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SlideDescription? Description { get; set; }
    
    /// <summary>
    ///     Represents settings that affect the environment in which the WebScene is displayed (such as lighting).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html#environment">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SlideEnvironment? Environment { get; set; }
    
    /// <summary>
    ///     Ground properties for this slide.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html#ground">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SlideGround? Ground { get; set; }
    
    /// <summary>
    ///     The visibility of a slide in a presentation.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html#hidden">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Hidden { get; set; }
    
    /// <summary>
    ///     The unique id of a slide within the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Presentation.html#slides">slides property</a> of a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Presentation.html">Presentation</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html#id">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? SlideId { get; set; }
    
    /// <summary>
    ///     A data URI encoded thumbnail.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html#thumbnail">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SlideThumbnail? Thumbnail { get; set; }
    
    /// <summary>
    ///     The time extent of the scene.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html#timeExtent">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public TimeExtent? TimeExtent { get; set; }
    
    /// <summary>
    ///     The title of the slide.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html#title">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SlideTitle? Title { get; set; }
    
    /// <summary>
    ///     The viewpoint of the slide.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html#viewpoint">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Viewpoint? Viewpoint { get; set; }
    
    /// <summary>
    ///     The visible layers of the scene.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html#visibleLayers">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<SlideVisibleLayers>? VisibleLayers { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Basemap property.
    /// </summary>
    public async Task<Basemap?> GetBasemap()
    {
        if (CoreJsModule is null)
        {
            return Basemap;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Basemap;
        }

        Basemap? result = await JsComponentReference.InvokeAsync<Basemap?>(
            "getBasemap", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (Basemap is not null)
            {
                result.Id = Basemap.Id;
            }
            
#pragma warning disable BL0005
            Basemap = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Basemap)] = Basemap;
        }
        
        return Basemap;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Description property.
    /// </summary>
    public async Task<SlideDescription?> GetDescription()
    {
        if (CoreJsModule is null)
        {
            return Description;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Description;
        }

        // get the property value
        SlideDescription? result = await JsComponentReference!.InvokeAsync<SlideDescription?>("getProperty",
            CancellationTokenSource.Token, "description");
        if (result is not null)
        {
#pragma warning disable BL0005
             Description = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Description)] = Description;
        }
         
        return Description;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Environment property.
    /// </summary>
    public async Task<SlideEnvironment?> GetEnvironment()
    {
        if (CoreJsModule is null)
        {
            return Environment;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Environment;
        }

        SlideEnvironment? result = await JsComponentReference.InvokeAsync<SlideEnvironment?>(
            "getEnvironment", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Environment = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Environment)] = Environment;
        }
        
        return Environment;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Ground property.
    /// </summary>
    public async Task<SlideGround?> GetGround()
    {
        if (CoreJsModule is null)
        {
            return Ground;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Ground;
        }

        SlideGround? result = await JsComponentReference.InvokeAsync<SlideGround?>(
            "getGround", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Ground = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Ground)] = Ground;
        }
        
        return Ground;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Hidden property.
    /// </summary>
    public async Task<bool?> GetHidden()
    {
        if (CoreJsModule is null)
        {
            return Hidden;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Hidden;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "hidden");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Hidden = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Hidden)] = Hidden;
        }
         
        return Hidden;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SlideId property.
    /// </summary>
    public async Task<string?> GetSlideId()
    {
        if (CoreJsModule is null)
        {
            return SlideId;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SlideId;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "id");
        if (result is not null)
        {
#pragma warning disable BL0005
             SlideId = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SlideId)] = SlideId;
        }
         
        return SlideId;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Thumbnail property.
    /// </summary>
    public async Task<SlideThumbnail?> GetThumbnail()
    {
        if (CoreJsModule is null)
        {
            return Thumbnail;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Thumbnail;
        }

        // get the property value
        SlideThumbnail? result = await JsComponentReference!.InvokeAsync<SlideThumbnail?>("getProperty",
            CancellationTokenSource.Token, "thumbnail");
        if (result is not null)
        {
#pragma warning disable BL0005
             Thumbnail = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Thumbnail)] = Thumbnail;
        }
         
        return Thumbnail;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the TimeExtent property.
    /// </summary>
    public async Task<TimeExtent?> GetTimeExtent()
    {
        if (CoreJsModule is null)
        {
            return TimeExtent;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return TimeExtent;
        }

        TimeExtent? result = await JsComponentReference.InvokeAsync<TimeExtent?>(
            "getTimeExtent", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (TimeExtent is not null)
            {
                result.Id = TimeExtent.Id;
            }
            
#pragma warning disable BL0005
            TimeExtent = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(TimeExtent)] = TimeExtent;
        }
        
        return TimeExtent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Title property.
    /// </summary>
    public async Task<SlideTitle?> GetTitle()
    {
        if (CoreJsModule is null)
        {
            return Title;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Title;
        }

        // get the property value
        SlideTitle? result = await JsComponentReference!.InvokeAsync<SlideTitle?>("getProperty",
            CancellationTokenSource.Token, "title");
        if (result is not null)
        {
#pragma warning disable BL0005
             Title = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Title)] = Title;
        }
         
        return Title;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Viewpoint property.
    /// </summary>
    public async Task<Viewpoint?> GetViewpoint()
    {
        if (CoreJsModule is null)
        {
            return Viewpoint;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Viewpoint;
        }

        Viewpoint? result = await JsComponentReference.InvokeAsync<Viewpoint?>(
            "getViewpoint", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Viewpoint = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Viewpoint)] = Viewpoint;
        }
        
        return Viewpoint;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the VisibleLayers property.
    /// </summary>
    public async Task<IReadOnlyList<SlideVisibleLayers>?> GetVisibleLayers()
    {
        if (CoreJsModule is null)
        {
            return VisibleLayers;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return VisibleLayers;
        }

        // get the property value
        IReadOnlyList<SlideVisibleLayers>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<SlideVisibleLayers>?>("getProperty",
            CancellationTokenSource.Token, "visibleLayers");
        if (result is not null)
        {
#pragma warning disable BL0005
             VisibleLayers = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(VisibleLayers)] = VisibleLayers;
        }
         
        return VisibleLayers;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Basemap property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBasemap(Basemap? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        Basemap = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Basemap)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setBasemap", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Description property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDescription(SlideDescription? value)
    {
#pragma warning disable BL0005
        Description = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Description)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "description", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Environment property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetEnvironment(SlideEnvironment? value)
    {
#pragma warning disable BL0005
        Environment = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Environment)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setEnvironment", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Ground property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetGround(SlideGround? value)
    {
#pragma warning disable BL0005
        Ground = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Ground)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setGround", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Hidden property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHidden(bool? value)
    {
#pragma warning disable BL0005
        Hidden = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Hidden)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "hidden", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SlideId property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSlideId(string? value)
    {
#pragma warning disable BL0005
        SlideId = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SlideId)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "id", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Thumbnail property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetThumbnail(SlideThumbnail? value)
    {
#pragma warning disable BL0005
        Thumbnail = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Thumbnail)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "thumbnail", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the TimeExtent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTimeExtent(TimeExtent? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        TimeExtent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(TimeExtent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setTimeExtent", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Title property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTitle(SlideTitle? value)
    {
#pragma warning disable BL0005
        Title = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Title)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "title", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Viewpoint property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetViewpoint(Viewpoint? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        Viewpoint = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Viewpoint)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setViewpoint", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the VisibleLayers property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetVisibleLayers(IReadOnlyList<SlideVisibleLayers>? value)
    {
#pragma warning disable BL0005
        VisibleLayers = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(VisibleLayers)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "visibleLayers", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the VisibleLayers property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToVisibleLayers(params SlideVisibleLayers[] values)
    {
        SlideVisibleLayers[] join = VisibleLayers is null
            ? values
            : [..VisibleLayers, ..values];
        await SetVisibleLayers(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the VisibleLayers property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromVisibleLayers(params SlideVisibleLayers[] values)
    {
        if (VisibleLayers is null)
        {
            return;
        }
        await SetVisibleLayers(VisibleLayers.Except(values).ToArray());
    }
    
#endregion

#region Public Methods

    /// <summary>
    ///     Applies a slide's settings to a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html">SceneView</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html#applyTo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="view">
    ///     The SceneView the slide should be applied to.
    /// </param>
    /// <param name="optionsWithDefaults">
    ///     Animation options. See properties below for object specifications.
    /// </param>
    [ArcGISMethod]
    public async Task<Slide?> ApplyTo(SceneView view,
        object optionsWithDefaults)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<Slide?>(
            "applyTo", 
            CancellationTokenSource.Token,
            view,
            optionsWithDefaults);
    }
    
    /// <summary>
    ///     Updates a slide from a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Presentation.html#slides">WebScene's slides</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-Slide.html#updateFrom">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="view">
    ///     The SceneView from which the slide should update.
    /// </param>
    /// <param name="options">
    ///     Update options. See properties below for object specifications.
    /// </param>
    [ArcGISMethod]
    public async Task<Slide?> UpdateFrom(SceneView view,
        SlideUpdateFromOptions options)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<Slide?>(
            "updateFrom", 
            CancellationTokenSource.Token,
            view,
            options);
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Basemap basemap:
                if (basemap != Basemap)
                {
                    Basemap = basemap;
                    
                    ModifiedParameters[nameof(Basemap)] = Basemap;
                }
                
                return true;
            case TimeExtent timeExtent:
                if (timeExtent != TimeExtent)
                {
                    TimeExtent = timeExtent;
                    
                    ModifiedParameters[nameof(TimeExtent)] = TimeExtent;
                }
                
                return true;
            case Viewpoint viewpoint:
                if (viewpoint != Viewpoint)
                {
                    Viewpoint = viewpoint;
                    
                    ModifiedParameters[nameof(Viewpoint)] = Viewpoint;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Basemap _:
                Basemap = null;
                
                ModifiedParameters[nameof(Basemap)] = Basemap;
                return true;
            case TimeExtent _:
                TimeExtent = null;
                
                ModifiedParameters[nameof(TimeExtent)] = TimeExtent;
                return true;
            case Viewpoint _:
                Viewpoint = null;
                
                ModifiedParameters[nameof(Viewpoint)] = Viewpoint;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        Basemap?.ValidateRequiredGeneratedChildren();
        TimeExtent?.ValidateRequiredGeneratedChildren();
        Viewpoint?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
