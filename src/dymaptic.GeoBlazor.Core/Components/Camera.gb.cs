// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    The camera defines the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Camera.html#position">position</a>, <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Camera.html#tilt">tilt</a>, and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Camera.html#heading">heading</a> of the point from which the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html">SceneView's</a> visible extent is observed.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Camera.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class Camera : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public Camera()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="fov">
    ///     The diagonal field of view (fov) angle for the camera.
    ///     default 55
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Camera.html#fov">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="heading">
    ///     The compass heading of the camera in degrees.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Camera.html#heading">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="layout">
    ///     The layout defines which sub-region of the camera is rendered.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Camera.html#layout">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="position">
    ///     The position of the camera defined by a map point.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Camera.html#position">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="tilt">
    ///     The tilt of the camera in degrees with respect to the surface as projected down from the camera position.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Camera.html#tilt">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public Camera(
        double? fov = null,
        double? heading = null,
        CameraLayout? layout = null,
        Point? position = null,
        double? tilt = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Fov = fov;
        Heading = heading;
        Layout = layout;
        Position = position;
        Tilt = tilt;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The diagonal field of view (fov) angle for the camera.
    ///     default 55
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Camera.html#fov">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? Fov { get; set; }
    
    /// <summary>
    ///     The compass heading of the camera in degrees.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Camera.html#heading">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? Heading { get; set; }
    
    /// <summary>
    ///     The layout defines which sub-region of the camera is rendered.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Camera.html#layout">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public CameraLayout? Layout { get; set; }
    
    /// <summary>
    ///     The position of the camera defined by a map point.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Camera.html#position">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Point? Position { get; set; }
    
    /// <summary>
    ///     The tilt of the camera in degrees with respect to the surface as projected down from the camera position.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Camera.html#tilt">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? Tilt { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Fov property.
    /// </summary>
    public async Task<double?> GetFov()
    {
        if (CoreJsModule is null)
        {
            return Fov;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Fov;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "fov");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Fov = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Fov)] = Fov;
        }
         
        return Fov;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Heading property.
    /// </summary>
    public async Task<double?> GetHeading()
    {
        if (CoreJsModule is null)
        {
            return Heading;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Heading;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "heading");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Heading = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Heading)] = Heading;
        }
         
        return Heading;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Layout property.
    /// </summary>
    public async Task<CameraLayout?> GetLayout()
    {
        if (CoreJsModule is null)
        {
            return Layout;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Layout;
        }

        // get the property value
        CameraLayout? result = await JsComponentReference!.InvokeAsync<CameraLayout?>("getProperty",
            CancellationTokenSource.Token, "layout");
        if (result is not null)
        {
#pragma warning disable BL0005
             Layout = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Layout)] = Layout;
        }
         
        return Layout;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Position property.
    /// </summary>
    public async Task<Point?> GetPosition()
    {
        if (CoreJsModule is null)
        {
            return Position;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Position;
        }

        Point? result = await JsComponentReference.InvokeAsync<Point?>(
            "getPosition", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (Position is not null)
            {
                result.Id = Position.Id;
            }
            
#pragma warning disable BL0005
            Position = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Position)] = Position;
        }
        
        return Position;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Tilt property.
    /// </summary>
    public async Task<double?> GetTilt()
    {
        if (CoreJsModule is null)
        {
            return Tilt;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Tilt;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "tilt");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Tilt = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Tilt)] = Tilt;
        }
         
        return Tilt;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Fov property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFov(double? value)
    {
#pragma warning disable BL0005
        Fov = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Fov)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "fov", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Heading property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHeading(double? value)
    {
#pragma warning disable BL0005
        Heading = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Heading)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "heading", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Layout property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLayout(CameraLayout? value)
    {
#pragma warning disable BL0005
        Layout = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Layout)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setLayout", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Position property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPosition(Point? value)
    {
#pragma warning disable BL0005
        Position = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Position)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setPosition", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Tilt property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTilt(double? value)
    {
#pragma warning disable BL0005
        Tilt = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Tilt)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "tilt", value);
    }
    
#endregion


    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case CameraLayout layout:
                if (layout != Layout)
                {
                    Layout = layout;
                    
                    ModifiedParameters[nameof(Layout)] = Layout;
                }
                
                return true;
            case Point position:
                if (position != Position)
                {
                    Position = position;
                    
                    ModifiedParameters[nameof(Position)] = Position;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case CameraLayout _:
                Layout = null;
                
                ModifiedParameters[nameof(Layout)] = Layout;
                return true;
            case Point _:
                Position = null;
                
                ModifiedParameters[nameof(Position)] = Position;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        Layout?.ValidateRequiredGeneratedChildren();
        Position?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
