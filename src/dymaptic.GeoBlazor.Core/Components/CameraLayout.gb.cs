// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CameraLayout.html">GeoBlazor Docs</a>
///     The camera layout defines the position of the current view in a distributed larger view.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-CameraLayout.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class CameraLayout : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public CameraLayout()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="column">
    ///     The active column a display client renders to in a tiled display setup.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-CameraLayout.html#column">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="columns">
    ///     The number of columns to decompose the camera in a tiled display setup.
    ///     default 1
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-CameraLayout.html#columns">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="row">
    ///     The active row a display client renders to in a tiled display setup.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-CameraLayout.html#row">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="rows">
    ///     The number of rows to decompose the camera in a tiled display setup.
    ///     default 1
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-CameraLayout.html#rows">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public CameraLayout(
        double? column = null,
        double? columns = null,
        double? row = null,
        double? rows = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Column = column;
        Columns = columns;
        Row = row;
        Rows = rows;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CameraLayout.html#cameralayoutcolumn-property">GeoBlazor Docs</a>
    ///     The active column a display client renders to in a tiled display setup.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-CameraLayout.html#column">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? Column { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CameraLayout.html#cameralayoutcolumns-property">GeoBlazor Docs</a>
    ///     The number of columns to decompose the camera in a tiled display setup.
    ///     default 1
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-CameraLayout.html#columns">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? Columns { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CameraLayout.html#cameralayoutrow-property">GeoBlazor Docs</a>
    ///     The active row a display client renders to in a tiled display setup.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-CameraLayout.html#row">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? Row { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CameraLayout.html#cameralayoutrows-property">GeoBlazor Docs</a>
    ///     The number of rows to decompose the camera in a tiled display setup.
    ///     default 1
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-CameraLayout.html#rows">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? Rows { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Column property.
    /// </summary>
    public async Task<double?> GetColumn()
    {
        if (CoreJsModule is null)
        {
            return Column;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Column;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "column");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Column = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Column)] = Column;
        }
         
        return Column;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Columns property.
    /// </summary>
    public async Task<double?> GetColumns()
    {
        if (CoreJsModule is null)
        {
            return Columns;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Columns;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "columns");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Columns = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Columns)] = Columns;
        }
         
        return Columns;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Row property.
    /// </summary>
    public async Task<double?> GetRow()
    {
        if (CoreJsModule is null)
        {
            return Row;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Row;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "row");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Row = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Row)] = Row;
        }
         
        return Row;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Rows property.
    /// </summary>
    public async Task<double?> GetRows()
    {
        if (CoreJsModule is null)
        {
            return Rows;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Rows;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "rows");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Rows = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Rows)] = Rows;
        }
         
        return Rows;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Column property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetColumn(double? value)
    {
#pragma warning disable BL0005
        Column = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Column)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "column", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Columns property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetColumns(double? value)
    {
#pragma warning disable BL0005
        Columns = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Columns)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "columns", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Row property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRow(double? value)
    {
#pragma warning disable BL0005
        Row = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Row)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "row", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Rows property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRows(double? value)
    {
#pragma warning disable BL0005
        Rows = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Rows)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "rows", value);
    }
    
#endregion

}
