// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo.html">GeoBlazor Docs</a>
///     Display filters are associated with a given layer and control which features are visible on the map.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-DisplayFilterInfo.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class DisplayFilterInfo : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public DisplayFilterInfo()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="activeFilterId">
    ///     The active filter id.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-DisplayFilterInfo.html#activeFilterId">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="filters">
    ///     A collection of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-DisplayFilter.html">filters</a> that define which features should be rendered on the display.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-DisplayFilterInfo.html#filters">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="mode">
    ///     The display filter mode.
    ///     default "manual"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-DisplayFilterInfo.html#mode">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public DisplayFilterInfo(
        string? activeFilterId = null,
        IReadOnlyList<DisplayFilter>? filters = null,
        DisplayFilterInfoMode? mode = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        ActiveFilterId = activeFilterId;
        Filters = filters;
        Mode = mode;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo.html#displayfilterinfoactivefilterid-property">GeoBlazor Docs</a>
    ///     The active filter id.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-DisplayFilterInfo.html#activeFilterId">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? ActiveFilterId { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo.html#displayfilterinfofilters-property">GeoBlazor Docs</a>
    ///     A collection of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-DisplayFilter.html">filters</a> that define which features should be rendered on the display.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-DisplayFilterInfo.html#filters">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<DisplayFilter>? Filters { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.DisplayFilterInfo.html#displayfilterinfomode-property">GeoBlazor Docs</a>
    ///     The display filter mode.
    ///     default "manual"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-DisplayFilterInfo.html#mode">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public DisplayFilterInfoMode? Mode { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the ActiveFilterId property.
    /// </summary>
    public async Task<string?> GetActiveFilterId()
    {
        if (CoreJsModule is null)
        {
            return ActiveFilterId;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ActiveFilterId;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "activeFilterId");
        if (result is not null)
        {
#pragma warning disable BL0005
             ActiveFilterId = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ActiveFilterId)] = ActiveFilterId;
        }
         
        return ActiveFilterId;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Filters property.
    /// </summary>
    public async Task<IReadOnlyList<DisplayFilter>?> GetFilters()
    {
        if (CoreJsModule is null)
        {
            return Filters;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Filters;
        }

        // get the property value
        IReadOnlyList<DisplayFilter>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<DisplayFilter>?>("getProperty",
            CancellationTokenSource.Token, "filters");
        if (result is not null)
        {
#pragma warning disable BL0005
             Filters = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Filters)] = Filters;
        }
         
        return Filters;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Mode property.
    /// </summary>
    public async Task<DisplayFilterInfoMode?> GetMode()
    {
        if (CoreJsModule is null)
        {
            return Mode;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Mode;
        }

        // get the property value
        JsNullableEnumWrapper<DisplayFilterInfoMode>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<DisplayFilterInfoMode>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "mode");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Mode = (DisplayFilterInfoMode)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Mode)] = Mode;
        }
         
        return Mode;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the ActiveFilterId property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetActiveFilterId(string? value)
    {
#pragma warning disable BL0005
        ActiveFilterId = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ActiveFilterId)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "activeFilterId", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Filters property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFilters(IReadOnlyList<DisplayFilter>? value)
    {
#pragma warning disable BL0005
        Filters = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Filters)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "filters", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Mode property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMode(DisplayFilterInfoMode? value)
    {
#pragma warning disable BL0005
        Mode = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Mode)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "mode", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the Filters property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToFilters(params DisplayFilter[] values)
    {
        DisplayFilter[] join = Filters is null
            ? values
            : [..Filters, ..values];
        await SetFilters(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the Filters property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromFilters(params DisplayFilter[] values)
    {
        if (Filters is null)
        {
            return;
        }
        await SetFilters(Filters.Except(values).ToArray());
    }
    
#endregion

}
