// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    The style of the basemap from the <a target="_blank" href="https://developers.arcgis.com/rest/basemap-styles/">basemap styles service (v2)</a>.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-support-BasemapStyle.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class BasemapStyle
{

#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Indicates whether to display <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-places.html">places</a> with the basemap style.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-support-BasemapStyle.html#places">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public BasemapStylePlace? Places { get; set; }
    
    /// <summary>
    ///     Displays country boundaries and labels based on a specific view of a country.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-support-BasemapStyle.html#worldview">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Worldview { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Language property.
    /// </summary>
    public async Task<string?> GetLanguage()
    {
        if (CoreJsModule is null)
        {
            return Language;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Language;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "language");
        if (result is not null)
        {
#pragma warning disable BL0005
             Language = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Language)] = Language;
        }
         
        return Language;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Places property.
    /// </summary>
    public async Task<BasemapStylePlace?> GetPlaces()
    {
        if (CoreJsModule is null)
        {
            return Places;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Places;
        }

        // get the property value
        BasemapStylePlace? result = await JsComponentReference!.InvokeAsync<BasemapStylePlace?>("getProperty",
            CancellationTokenSource.Token, "places");
        if (result is not null)
        {
#pragma warning disable BL0005
             Places = result.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Places)] = Places;
        }
         
        return Places;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ServiceUrl property.
    /// </summary>
    public async Task<string?> GetServiceUrl()
    {
        if (CoreJsModule is null)
        {
            return ServiceUrl;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ServiceUrl;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "serviceUrl");
        if (result is not null)
        {
#pragma warning disable BL0005
             ServiceUrl = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ServiceUrl)] = ServiceUrl;
        }
         
        return ServiceUrl;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Worldview property.
    /// </summary>
    public async Task<string?> GetWorldview()
    {
        if (CoreJsModule is null)
        {
            return Worldview;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Worldview;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "worldview");
        if (result is not null)
        {
#pragma warning disable BL0005
             Worldview = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Worldview)] = Worldview;
        }
         
        return Worldview;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Language property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLanguage(string value)
    {
#pragma warning disable BL0005
        Language = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Language)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "language", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Places property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPlaces(BasemapStylePlace value)
    {
#pragma warning disable BL0005
        Places = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Places)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "places", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ServiceUrl property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetServiceUrl(string value)
    {
#pragma warning disable BL0005
        ServiceUrl = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ServiceUrl)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "serviceUrl", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Worldview property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetWorldview(string value)
    {
#pragma warning disable BL0005
        Worldview = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Worldview)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "worldview", value);
    }
    
#endregion

    /// <inheritdoc />
    internal override void ValidateRequiredGeneratedChildren()
    {
    
        if (Name is null)
        {
            throw new MissingRequiredChildElementException(nameof(BasemapStyle), nameof(Name));
        }
        base.ValidateRequiredGeneratedChildren();
    }
      
}
