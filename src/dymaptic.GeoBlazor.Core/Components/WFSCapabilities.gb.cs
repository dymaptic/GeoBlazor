// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.WFSCapabilities.html">GeoBlazor Docs</a>
///     WFS service information about the available layers and operations.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ogc-wfsUtils.html#WFSCapabilities">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class WFSCapabilities : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public WFSCapabilities()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="featureTypes">
    ///     An array of featureTypes (or layers) available in the WFS service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ogc-wfsUtils.html#WFSCapabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="operations">
    ///     Information about the operations needed to consume the WFS service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ogc-wfsUtils.html#WFSCapabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public WFSCapabilities(
        IReadOnlyList<WFSFeatureType>? featureTypes = null,
        WFSOperations? operations = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        FeatureTypes = featureTypes;
        Operations = operations;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     An array of featureTypes (or layers) available in the WFS service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ogc-wfsUtils.html#WFSCapabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<WFSFeatureType>? FeatureTypes { get; set; }
    
    /// <summary>
    ///     Information about the operations needed to consume the WFS service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ogc-wfsUtils.html#WFSCapabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public WFSOperations? Operations { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the FeatureTypes property.
    /// </summary>
    public async Task<IReadOnlyList<WFSFeatureType>?> GetFeatureTypes()
    {
        if (CoreJsModule is null)
        {
            return FeatureTypes;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return FeatureTypes;
        }

        IReadOnlyList<WFSFeatureType>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<WFSFeatureType>?>(
            "getFeatureTypes", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            FeatureTypes = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(FeatureTypes)] = FeatureTypes;
        }
        
        return FeatureTypes;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Operations property.
    /// </summary>
    public async Task<WFSOperations?> GetOperations()
    {
        if (CoreJsModule is null)
        {
            return Operations;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Operations;
        }

        WFSOperations? result = await JsComponentReference.InvokeAsync<WFSOperations?>(
            "getOperations", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Operations = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Operations)] = Operations;
        }
        
        return Operations;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the FeatureTypes property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFeatureTypes(IReadOnlyList<WFSFeatureType>? value)
    {
        if (value is not null)
        {
            foreach (WFSFeatureType item in value)
            {
                item.CoreJsModule = CoreJsModule;
                item.Parent = this;
                item.Layer = Layer;
                item.View = View;
            }
        }
        
#pragma warning disable BL0005
        FeatureTypes = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FeatureTypes)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "featureTypes", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Operations property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetOperations(WFSOperations? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        Operations = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Operations)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "operations", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the FeatureTypes property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToFeatureTypes(params WFSFeatureType[] values)
    {
        WFSFeatureType[] join = FeatureTypes is null
            ? values
            : [..FeatureTypes, ..values];
        await SetFeatureTypes(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the FeatureTypes property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromFeatureTypes(params WFSFeatureType[] values)
    {
        if (FeatureTypes is null)
        {
            return;
        }
        await SetFeatureTypes(FeatureTypes.Except(values).ToArray());
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case WFSFeatureType featureTypes:
                FeatureTypes ??= [];
                if (!FeatureTypes.Contains(featureTypes))
                {
                    FeatureTypes = [..FeatureTypes, featureTypes];
                    
                    ModifiedParameters[nameof(FeatureTypes)] = FeatureTypes;
                }
                
                return true;
            case WFSOperations operations:
                if (operations != Operations)
                {
                    Operations = operations;
                    
                    ModifiedParameters[nameof(Operations)] = Operations;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case WFSFeatureType featureTypes:
                FeatureTypes = FeatureTypes?.Where(f => f != featureTypes).ToList();
                
                ModifiedParameters[nameof(FeatureTypes)] = FeatureTypes;
                return true;
            case WFSOperations _:
                Operations = null;
                
                ModifiedParameters[nameof(Operations)] = Operations;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        if (FeatureTypes is not null)
        {
            foreach (WFSFeatureType child in FeatureTypes)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        Operations?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
