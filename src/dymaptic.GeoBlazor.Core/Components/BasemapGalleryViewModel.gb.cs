// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.BasemapGalleryViewModel.html">GeoBlazor Docs</a>
///     Provides the logic for the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery.html">BasemapGallery</a> widget.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-BasemapGalleryViewModel.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class BasemapGalleryViewModel : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public BasemapGalleryViewModel()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="activeBasemap">
    ///     The map's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html#basemap">basemap</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-BasemapGalleryViewModel.html#activeBasemap">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="items">
    ///     A collection of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-support-BasemapGalleryItem.html">BasemapGalleryItem</a>s representing basemaps.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-BasemapGalleryViewModel.html#items">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="source">
    ///     The source for basemaps that the widget will display.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-BasemapGalleryViewModel.html#source">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public BasemapGalleryViewModel(
        Basemap? activeBasemap = null,
        IReadOnlyList<BasemapGalleryItem>? items = null,
        IBasemapGalleryWidgetSource? source = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        ActiveBasemap = activeBasemap;
        Items = items;
        Source = source;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The map's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html#basemap">basemap</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-BasemapGalleryViewModel.html#activeBasemap">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Basemap? ActiveBasemap { get; set; }
    
    /// <summary>
    ///     A collection of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-support-BasemapGalleryItem.html">BasemapGalleryItem</a>s representing basemaps.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-BasemapGalleryViewModel.html#items">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<BasemapGalleryItem>? Items { get; set; }
    
    /// <summary>
    ///     The source for basemaps that the widget will display.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-BasemapGalleryViewModel.html#source">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IBasemapGalleryWidgetSource? Source { get; set; }
    
    /// <summary>
    ///     The view model's state.
    ///     default disabled
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-BasemapGalleryViewModel.html#state">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public BasemapGalleryViewModelState? State { get; protected set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the ActiveBasemap property.
    /// </summary>
    public async Task<Basemap?> GetActiveBasemap()
    {
        if (CoreJsModule is null)
        {
            return ActiveBasemap;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ActiveBasemap;
        }

        Basemap? result = await JsComponentReference.InvokeAsync<Basemap?>(
            "getActiveBasemap", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (ActiveBasemap is not null)
            {
                result.Id = ActiveBasemap.Id;
            }
            
#pragma warning disable BL0005
            ActiveBasemap = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(ActiveBasemap)] = ActiveBasemap;
        }
        
        return ActiveBasemap;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Items property.
    /// </summary>
    public async Task<IReadOnlyList<BasemapGalleryItem>?> GetItems()
    {
        if (CoreJsModule is null)
        {
            return Items;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Items;
        }

        IReadOnlyList<BasemapGalleryItem>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<BasemapGalleryItem>?>(
            "getItems", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Items = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Items)] = Items;
        }
        
        return Items;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Source property.
    /// </summary>
    public async Task<IBasemapGalleryWidgetSource?> GetSource()
    {
        if (CoreJsModule is null)
        {
            return Source;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Source;
        }

        // get the property value
        IBasemapGalleryWidgetSource? result = await JsComponentReference!.InvokeAsync<IBasemapGalleryWidgetSource?>("getProperty",
            CancellationTokenSource.Token, "source");
        if (result is not null)
        {
#pragma warning disable BL0005
             Source = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Source)] = Source;
        }
         
        return Source;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the State property.
    /// </summary>
    public async Task<BasemapGalleryViewModelState?> GetState()
    {
        if (CoreJsModule is null)
        {
            return State;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return State;
        }

        // get the property value
        JsNullableEnumWrapper<BasemapGalleryViewModelState>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<BasemapGalleryViewModelState>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "state");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             State = (BasemapGalleryViewModelState)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(State)] = State;
        }
         
        return State;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the ActiveBasemap property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetActiveBasemap(Basemap? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        ActiveBasemap = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ActiveBasemap)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setActiveBasemap", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Items property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetItems(IReadOnlyList<BasemapGalleryItem>? value)
    {
        if (value is not null)
        {
            foreach (BasemapGalleryItem item in value)
            {
                item.CoreJsModule = CoreJsModule;
                item.Parent = this;
                item.Layer = Layer;
                item.View = View;
            }
        }
        
#pragma warning disable BL0005
        Items = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Items)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setItems", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Source property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSource(IBasemapGalleryWidgetSource? value)
    {
#pragma warning disable BL0005
        Source = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Source)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "source", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the Items property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToItems(params BasemapGalleryItem[] values)
    {
        BasemapGalleryItem[] join = Items is null
            ? values
            : [..Items, ..values];
        await SetItems(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the Items property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromItems(params BasemapGalleryItem[] values)
    {
        if (Items is null)
        {
            return;
        }
        await SetItems(Items.Except(values).ToArray());
    }
    
#endregion

#region Public Methods

    /// <summary>
    ///     A convenience function to check basemap equality.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-BasemapGalleryViewModel.html#basemapEquals">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="basemap1">
    ///     The basemap to compare against <code>basemap2</code>.
    /// </param>
    /// <param name="basemap2">
    ///     The basemap to compare against <code>basemap1</code>.
    /// </param>
    [ArcGISMethod]
    public async Task<bool?> BasemapEquals(Basemap basemap1,
        Basemap basemap2)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<bool?>(
            "basemapEquals", 
            CancellationTokenSource.Token,
            basemap1,
            basemap2);
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Basemap activeBasemap:
                if (activeBasemap != ActiveBasemap)
                {
                    ActiveBasemap = activeBasemap;
                    ModifiedParameters[nameof(ActiveBasemap)] = ActiveBasemap;
                }
                
                return true;
            case BasemapGalleryItem items:
                Items ??= [];
                if (!Items.Contains(items))
                {
                    Items = [..Items, items];
                    ModifiedParameters[nameof(Items)] = Items;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Basemap _:
                ActiveBasemap = null;
                ModifiedParameters[nameof(ActiveBasemap)] = ActiveBasemap;
                return true;
            case BasemapGalleryItem items:
                Items = Items?.Where(i => i != items).ToList();
                ModifiedParameters[nameof(Items)] = Items;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        ActiveBasemap?.ValidateRequiredGeneratedChildren();
        if (Items is not null)
        {
            foreach (BasemapGalleryItem child in Items)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        base.ValidateRequiredGeneratedChildren();
    }
      
}
