// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.html">GeoBlazor Docs</a>
///     The visible elements that are displayed within the widget.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class BookmarksVisibleElements : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public BookmarksVisibleElements()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="addBookmarkButton">
    ///     _Since 4.29._ Indicates whether the button to add a new bookmark displays.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="closeButton">
    ///     _Since 4.29._ Indicates whether to display a close button at the top of the widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="collapseButton">
    ///     _Since 4.29._ Indicates whether to display a collapse button at the top of the widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="editBookmarkButton">
    ///     _Since 4.29._ Indicates whether the button to edit a bookmark displays.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="filter">
    ///     _Since 4.29._ Indicates whether the bookmarks filter displays.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="flow">
    ///     _Since 4.29._ Determines whether the widget should be shown within its built-in <a target="_blank" href="https://developers.arcgis.com/calcite-design-system/components/flow/">flow component</a> or if the flow component should be excluded.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="heading">
    ///     _Since 4.29._ Indicates whether to display the widget heading.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="thumbnail">
    ///     _Since 4.13._ Indicates whether the thumbnail associated with the bookmark displays.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="time">
    ///     _Since 4.22._ Indicates whether the time (`h:m:s`) is displayed alongside the date if the bookmark has a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webmap-Bookmark.html#timeExtent">time extent</a> defined.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public BookmarksVisibleElements(
        bool? addBookmarkButton = null,
        bool? closeButton = null,
        bool? collapseButton = null,
        bool? editBookmarkButton = null,
        bool? filter = null,
        bool? flow = null,
        bool? heading = null,
        bool? thumbnail = null,
        bool? time = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        AddBookmarkButton = addBookmarkButton;
        CloseButton = closeButton;
        CollapseButton = collapseButton;
        EditBookmarkButton = editBookmarkButton;
        Filter = filter;
        Flow = flow;
        Heading = heading;
        Thumbnail = thumbnail;
        Time = time;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.html#bookmarksvisibleelementsaddbookmarkbutton-property">GeoBlazor Docs</a>
    ///     _Since 4.29._ Indicates whether the button to add a new bookmark displays.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? AddBookmarkButton { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.html#bookmarksvisibleelementsclosebutton-property">GeoBlazor Docs</a>
    ///     _Since 4.29._ Indicates whether to display a close button at the top of the widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? CloseButton { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.html#bookmarksvisibleelementscollapsebutton-property">GeoBlazor Docs</a>
    ///     _Since 4.29._ Indicates whether to display a collapse button at the top of the widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? CollapseButton { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.html#bookmarksvisibleelementseditbookmarkbutton-property">GeoBlazor Docs</a>
    ///     _Since 4.29._ Indicates whether the button to edit a bookmark displays.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? EditBookmarkButton { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.html#bookmarksvisibleelementsfilter-property">GeoBlazor Docs</a>
    ///     _Since 4.29._ Indicates whether the bookmarks filter displays.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Filter { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.html#bookmarksvisibleelementsflow-property">GeoBlazor Docs</a>
    ///     _Since 4.29._ Determines whether the widget should be shown within its built-in <a target="_blank" href="https://developers.arcgis.com/calcite-design-system/components/flow/">flow component</a> or if the flow component should be excluded.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Flow { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.html#bookmarksvisibleelementsheading-property">GeoBlazor Docs</a>
    ///     _Since 4.29._ Indicates whether to display the widget heading.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Heading { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.html#bookmarksvisibleelementsthumbnail-property">GeoBlazor Docs</a>
    ///     _Since 4.13._ Indicates whether the thumbnail associated with the bookmark displays.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Thumbnail { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.BookmarksVisibleElements.html#bookmarksvisibleelementstime-property">GeoBlazor Docs</a>
    ///     _Since 4.22._ Indicates whether the time (`h:m:s`) is displayed alongside the date if the bookmark has a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webmap-Bookmark.html#timeExtent">time extent</a> defined.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Bookmarks.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Time { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the AddBookmarkButton property.
    /// </summary>
    public async Task<bool?> GetAddBookmarkButton()
    {
        if (CoreJsModule is null)
        {
            return AddBookmarkButton;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return AddBookmarkButton;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "addBookmarkButton");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             AddBookmarkButton = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(AddBookmarkButton)] = AddBookmarkButton;
        }
         
        return AddBookmarkButton;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CloseButton property.
    /// </summary>
    public async Task<bool?> GetCloseButton()
    {
        if (CoreJsModule is null)
        {
            return CloseButton;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CloseButton;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "closeButton");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             CloseButton = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CloseButton)] = CloseButton;
        }
         
        return CloseButton;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CollapseButton property.
    /// </summary>
    public async Task<bool?> GetCollapseButton()
    {
        if (CoreJsModule is null)
        {
            return CollapseButton;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CollapseButton;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "collapseButton");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             CollapseButton = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CollapseButton)] = CollapseButton;
        }
         
        return CollapseButton;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the EditBookmarkButton property.
    /// </summary>
    public async Task<bool?> GetEditBookmarkButton()
    {
        if (CoreJsModule is null)
        {
            return EditBookmarkButton;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return EditBookmarkButton;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "editBookmarkButton");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             EditBookmarkButton = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(EditBookmarkButton)] = EditBookmarkButton;
        }
         
        return EditBookmarkButton;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Filter property.
    /// </summary>
    public async Task<bool?> GetFilter()
    {
        if (CoreJsModule is null)
        {
            return Filter;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Filter;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "filter");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Filter = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Filter)] = Filter;
        }
         
        return Filter;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Flow property.
    /// </summary>
    public async Task<bool?> GetFlow()
    {
        if (CoreJsModule is null)
        {
            return Flow;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Flow;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "flow");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Flow = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Flow)] = Flow;
        }
         
        return Flow;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Heading property.
    /// </summary>
    public async Task<bool?> GetHeading()
    {
        if (CoreJsModule is null)
        {
            return Heading;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Heading;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "heading");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Heading = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Heading)] = Heading;
        }
         
        return Heading;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Thumbnail property.
    /// </summary>
    public async Task<bool?> GetThumbnail()
    {
        if (CoreJsModule is null)
        {
            return Thumbnail;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Thumbnail;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "thumbnail");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Thumbnail = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Thumbnail)] = Thumbnail;
        }
         
        return Thumbnail;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Time property.
    /// </summary>
    public async Task<bool?> GetTime()
    {
        if (CoreJsModule is null)
        {
            return Time;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Time;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "time");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Time = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Time)] = Time;
        }
         
        return Time;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the AddBookmarkButton property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAddBookmarkButton(bool? value)
    {
#pragma warning disable BL0005
        AddBookmarkButton = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(AddBookmarkButton)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "addBookmarkButton", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CloseButton property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCloseButton(bool? value)
    {
#pragma warning disable BL0005
        CloseButton = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CloseButton)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "closeButton", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CollapseButton property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCollapseButton(bool? value)
    {
#pragma warning disable BL0005
        CollapseButton = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CollapseButton)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "collapseButton", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the EditBookmarkButton property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetEditBookmarkButton(bool? value)
    {
#pragma warning disable BL0005
        EditBookmarkButton = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(EditBookmarkButton)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "editBookmarkButton", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Filter property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFilter(bool? value)
    {
#pragma warning disable BL0005
        Filter = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Filter)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "filter", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Flow property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFlow(bool? value)
    {
#pragma warning disable BL0005
        Flow = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Flow)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "flow", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Heading property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHeading(bool? value)
    {
#pragma warning disable BL0005
        Heading = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Heading)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "heading", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Thumbnail property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetThumbnail(bool? value)
    {
#pragma warning disable BL0005
        Thumbnail = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Thumbnail)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "thumbnail", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Time property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTime(bool? value)
    {
#pragma warning disable BL0005
        Time = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Time)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "time", value);
    }
    
#endregion

}
