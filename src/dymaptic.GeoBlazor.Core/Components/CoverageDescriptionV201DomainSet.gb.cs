// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Domains associated with a coverage.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class CoverageDescriptionV201DomainSet : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public CoverageDescriptionV201DomainSet()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="axisLabels">
    ///     Axis labels.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="columns">
    ///     Domain columns of a coverage.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="gridSamples">
    ///     Domain grid samples.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="hasSameAxisLabelsAsBoundedBy">
    ///     Has same axis labels as bounded by.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="offset">
    ///     Domain offset.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="origin">
    ///     Domain origin.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="resolution">
    ///     Domain x, y resolution.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="rows">
    ///     Domain rows of a coverage.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public CoverageDescriptionV201DomainSet(
        IReadOnlyList<string>? axisLabels = null,
        double? columns = null,
        IReadOnlyList<double>? gridSamples = null,
        bool? hasSameAxisLabelsAsBoundedBy = null,
        IReadOnlyList<double>? offset = null,
        IReadOnlyList<double>? origin = null,
        CoverageDescriptionV201DomainSetResolution? resolution = null,
        double? rows = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        AxisLabels = axisLabels;
        Columns = columns;
        GridSamples = gridSamples;
        HasSameAxisLabelsAsBoundedBy = hasSameAxisLabelsAsBoundedBy;
        Offset = offset;
        Origin = origin;
        Resolution = resolution;
        Rows = rows;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Axis labels.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<string>? AxisLabels { get; set; }
    
    /// <summary>
    ///     Domain columns of a coverage.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? Columns { get; set; }
    
    /// <summary>
    ///     Domain grid samples.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<double>? GridSamples { get; set; }
    
    /// <summary>
    ///     Has same axis labels as bounded by.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? HasSameAxisLabelsAsBoundedBy { get; set; }
    
    /// <summary>
    ///     Domain offset.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<double>? Offset { get; set; }
    
    /// <summary>
    ///     Domain origin.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<double>? Origin { get; set; }
    
    /// <summary>
    ///     Domain x, y resolution.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public CoverageDescriptionV201DomainSetResolution? Resolution { get; set; }
    
    /// <summary>
    ///     Domain rows of a coverage.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? Rows { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the AxisLabels property.
    /// </summary>
    public async Task<IReadOnlyList<string>?> GetAxisLabels()
    {
        if (CoreJsModule is null)
        {
            return AxisLabels;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return AxisLabels;
        }

        // get the property value
        IReadOnlyList<string>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<string>?>("getProperty",
            CancellationTokenSource.Token, "axisLabels");
        if (result is not null)
        {
#pragma warning disable BL0005
             AxisLabels = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(AxisLabels)] = AxisLabels;
        }
         
        return AxisLabels;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Columns property.
    /// </summary>
    public async Task<double?> GetColumns()
    {
        if (CoreJsModule is null)
        {
            return Columns;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Columns;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "columns");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Columns = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Columns)] = Columns;
        }
         
        return Columns;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the GridSamples property.
    /// </summary>
    public async Task<IReadOnlyList<double>?> GetGridSamples()
    {
        if (CoreJsModule is null)
        {
            return GridSamples;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return GridSamples;
        }

        // get the property value
        IReadOnlyList<double>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<double>?>("getProperty",
            CancellationTokenSource.Token, "gridSamples");
        if (result is not null)
        {
#pragma warning disable BL0005
             GridSamples = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(GridSamples)] = GridSamples;
        }
         
        return GridSamples;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HasSameAxisLabelsAsBoundedBy property.
    /// </summary>
    public async Task<bool?> GetHasSameAxisLabelsAsBoundedBy()
    {
        if (CoreJsModule is null)
        {
            return HasSameAxisLabelsAsBoundedBy;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return HasSameAxisLabelsAsBoundedBy;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "hasSameAxisLabelsAsBoundedBy");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             HasSameAxisLabelsAsBoundedBy = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HasSameAxisLabelsAsBoundedBy)] = HasSameAxisLabelsAsBoundedBy;
        }
         
        return HasSameAxisLabelsAsBoundedBy;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Offset property.
    /// </summary>
    public async Task<IReadOnlyList<double>?> GetOffset()
    {
        if (CoreJsModule is null)
        {
            return Offset;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Offset;
        }

        // get the property value
        IReadOnlyList<double>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<double>?>("getProperty",
            CancellationTokenSource.Token, "offset");
        if (result is not null)
        {
#pragma warning disable BL0005
             Offset = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Offset)] = Offset;
        }
         
        return Offset;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Origin property.
    /// </summary>
    public async Task<IReadOnlyList<double>?> GetOrigin()
    {
        if (CoreJsModule is null)
        {
            return Origin;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Origin;
        }

        // get the property value
        IReadOnlyList<double>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<double>?>("getProperty",
            CancellationTokenSource.Token, "origin");
        if (result is not null)
        {
#pragma warning disable BL0005
             Origin = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Origin)] = Origin;
        }
         
        return Origin;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Resolution property.
    /// </summary>
    public async Task<CoverageDescriptionV201DomainSetResolution?> GetResolution()
    {
        if (CoreJsModule is null)
        {
            return Resolution;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Resolution;
        }

        // get the property value
        CoverageDescriptionV201DomainSetResolution? result = await JsComponentReference!.InvokeAsync<CoverageDescriptionV201DomainSetResolution?>("getProperty",
            CancellationTokenSource.Token, "resolution");
        if (result is not null)
        {
#pragma warning disable BL0005
             Resolution = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Resolution)] = Resolution;
        }
         
        return Resolution;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Rows property.
    /// </summary>
    public async Task<double?> GetRows()
    {
        if (CoreJsModule is null)
        {
            return Rows;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Rows;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "rows");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Rows = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Rows)] = Rows;
        }
         
        return Rows;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the AxisLabels property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAxisLabels(IReadOnlyList<string>? value)
    {
#pragma warning disable BL0005
        AxisLabels = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(AxisLabels)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "axisLabels", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Columns property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetColumns(double? value)
    {
#pragma warning disable BL0005
        Columns = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Columns)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "columns", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the GridSamples property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetGridSamples(IReadOnlyList<double>? value)
    {
#pragma warning disable BL0005
        GridSamples = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(GridSamples)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "gridSamples", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HasSameAxisLabelsAsBoundedBy property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHasSameAxisLabelsAsBoundedBy(bool? value)
    {
#pragma warning disable BL0005
        HasSameAxisLabelsAsBoundedBy = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HasSameAxisLabelsAsBoundedBy)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "hasSameAxisLabelsAsBoundedBy", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Offset property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetOffset(IReadOnlyList<double>? value)
    {
#pragma warning disable BL0005
        Offset = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Offset)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "offset", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Origin property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetOrigin(IReadOnlyList<double>? value)
    {
#pragma warning disable BL0005
        Origin = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Origin)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "origin", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Resolution property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetResolution(CoverageDescriptionV201DomainSetResolution? value)
    {
#pragma warning disable BL0005
        Resolution = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Resolution)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setResolution", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Rows property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRows(double? value)
    {
#pragma warning disable BL0005
        Rows = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Rows)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "rows", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the AxisLabels property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToAxisLabels(params string[] values)
    {
        string[] join = AxisLabels is null
            ? values
            : [..AxisLabels, ..values];
        await SetAxisLabels(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the GridSamples property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToGridSamples(params double[] values)
    {
        double[] join = GridSamples is null
            ? values
            : [..GridSamples, ..values];
        await SetGridSamples(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the Offset property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToOffset(params double[] values)
    {
        double[] join = Offset is null
            ? values
            : [..Offset, ..values];
        await SetOffset(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the Origin property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToOrigin(params double[] values)
    {
        double[] join = Origin is null
            ? values
            : [..Origin, ..values];
        await SetOrigin(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the AxisLabels property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromAxisLabels(params string[] values)
    {
        if (AxisLabels is null)
        {
            return;
        }
        await SetAxisLabels(AxisLabels.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the GridSamples property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromGridSamples(params double[] values)
    {
        if (GridSamples is null)
        {
            return;
        }
        await SetGridSamples(GridSamples.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the Offset property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromOffset(params double[] values)
    {
        if (Offset is null)
        {
            return;
        }
        await SetOffset(Offset.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the Origin property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromOrigin(params double[] values)
    {
        if (Origin is null)
        {
            return;
        }
        await SetOrigin(Origin.Except(values).ToArray());
    }
    
#endregion


    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case CoverageDescriptionV201DomainSetResolution resolution:
                if (resolution != Resolution)
                {
                    Resolution = resolution;
                    
                    ModifiedParameters[nameof(Resolution)] = Resolution;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case CoverageDescriptionV201DomainSetResolution _:
                Resolution = null;
                
                ModifiedParameters[nameof(Resolution)] = Resolution;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        Resolution?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
