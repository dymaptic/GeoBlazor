// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Earth observation.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class CoverageDescriptionV201EoMetadataObservation : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public CoverageDescriptionV201EoMetadataObservation()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="acquisitionType">
    ///     Earth observation acquisition type.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="footprint">
    ///     Earth observation footprint.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="identifier">
    ///     Earth observation identifier.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="phenomenonTime">
    ///     Earth observation phenomenon time.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="resultTime">
    ///     Earth observation resultTime.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="status">
    ///     Earth observation status.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public CoverageDescriptionV201EoMetadataObservation(
        string? acquisitionType = null,
        Polygon? footprint = null,
        string? identifier = null,
        TemporalDomain? phenomenonTime = null,
        TemporalDomain? resultTime = null,
        string? status = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        AcquisitionType = acquisitionType;
        Footprint = footprint;
        Identifier = identifier;
        PhenomenonTime = phenomenonTime;
        ResultTime = resultTime;
        Status = status;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Earth observation acquisition type.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? AcquisitionType { get; set; }
    
    /// <summary>
    ///     Earth observation footprint.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Polygon? Footprint { get; set; }
    
    /// <summary>
    ///     Earth observation identifier.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Identifier { get; set; }
    
    /// <summary>
    ///     Earth observation phenomenon time.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public TemporalDomain? PhenomenonTime { get; set; }
    
    /// <summary>
    ///     Earth observation resultTime.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public TemporalDomain? ResultTime { get; set; }
    
    /// <summary>
    ///     Earth observation status.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html#CoverageDescriptionV201">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Status { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the AcquisitionType property.
    /// </summary>
    public async Task<string?> GetAcquisitionType()
    {
        if (CoreJsModule is null)
        {
            return AcquisitionType;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return AcquisitionType;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "acquisitionType");
        if (result is not null)
        {
#pragma warning disable BL0005
             AcquisitionType = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(AcquisitionType)] = AcquisitionType;
        }
         
        return AcquisitionType;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Footprint property.
    /// </summary>
    public async Task<Polygon?> GetFootprint()
    {
        if (CoreJsModule is null)
        {
            return Footprint;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Footprint;
        }

        Polygon? result = await JsComponentReference.InvokeAsync<Polygon?>(
            "getFootprint", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (Footprint is not null)
            {
                result.Id = Footprint.Id;
            }
            
#pragma warning disable BL0005
            Footprint = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Footprint)] = Footprint;
        }
        
        return Footprint;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Identifier property.
    /// </summary>
    public async Task<string?> GetIdentifier()
    {
        if (CoreJsModule is null)
        {
            return Identifier;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Identifier;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "identifier");
        if (result is not null)
        {
#pragma warning disable BL0005
             Identifier = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Identifier)] = Identifier;
        }
         
        return Identifier;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PhenomenonTime property.
    /// </summary>
    public async Task<TemporalDomain?> GetPhenomenonTime()
    {
        if (CoreJsModule is null)
        {
            return PhenomenonTime;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return PhenomenonTime;
        }

        // get the property value
        TemporalDomain? result = await JsComponentReference!.InvokeAsync<TemporalDomain?>("getProperty",
            CancellationTokenSource.Token, "phenomenonTime");
        if (result is not null)
        {
#pragma warning disable BL0005
             PhenomenonTime = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(PhenomenonTime)] = PhenomenonTime;
        }
         
        return PhenomenonTime;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ResultTime property.
    /// </summary>
    public async Task<TemporalDomain?> GetResultTime()
    {
        if (CoreJsModule is null)
        {
            return ResultTime;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ResultTime;
        }

        // get the property value
        TemporalDomain? result = await JsComponentReference!.InvokeAsync<TemporalDomain?>("getProperty",
            CancellationTokenSource.Token, "resultTime");
        if (result is not null)
        {
#pragma warning disable BL0005
             ResultTime = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ResultTime)] = ResultTime;
        }
         
        return ResultTime;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Status property.
    /// </summary>
    public async Task<string?> GetStatus()
    {
        if (CoreJsModule is null)
        {
            return Status;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Status;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "status");
        if (result is not null)
        {
#pragma warning disable BL0005
             Status = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Status)] = Status;
        }
         
        return Status;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the AcquisitionType property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAcquisitionType(string? value)
    {
#pragma warning disable BL0005
        AcquisitionType = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(AcquisitionType)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "acquisitionType", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Footprint property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFootprint(Polygon? value)
    {
#pragma warning disable BL0005
        Footprint = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Footprint)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setFootprint", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Identifier property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetIdentifier(string? value)
    {
#pragma warning disable BL0005
        Identifier = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Identifier)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "identifier", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PhenomenonTime property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPhenomenonTime(TemporalDomain? value)
    {
#pragma warning disable BL0005
        PhenomenonTime = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PhenomenonTime)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "phenomenonTime", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ResultTime property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetResultTime(TemporalDomain? value)
    {
#pragma warning disable BL0005
        ResultTime = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ResultTime)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "resultTime", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Status property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetStatus(string? value)
    {
#pragma warning disable BL0005
        Status = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Status)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "status", value);
    }
    
#endregion


    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Polygon footprint:
                if (footprint != Footprint)
                {
                    Footprint = footprint;
                    
                    ModifiedParameters[nameof(Footprint)] = Footprint;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Polygon _:
                Footprint = null;
                
                ModifiedParameters[nameof(Footprint)] = Footprint;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        Footprint?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
