// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    A description of each image contained in the sprite.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteInfo">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class SpriteInfo : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public SpriteInfo()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="height">
    ///     The height of the sprite.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="pixelRatio">
    ///     The pixel ratio of the sprite.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="sdf">
    ///     Whether the sprite is SDF or not.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="width">
    ///     The width of the sprite.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="x">
    ///     The x position of the upper-left corner of the sprite.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="y">
    ///     The y position of the upper-left corner of the sprite.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public SpriteInfo(
        int? height = null,
        double? pixelRatio = null,
        double? sdf = null,
        int? width = null,
        double? x = null,
        double? y = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Height = height;
        PixelRatio = pixelRatio;
        Sdf = sdf;
        Width = width;
        X = x;
        Y = y;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The height of the sprite.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public int? Height { get; set; }
    
    /// <summary>
    ///     The pixel ratio of the sprite.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? PixelRatio { get; set; }
    
    /// <summary>
    ///     Whether the sprite is SDF or not.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? Sdf { get; set; }
    
    /// <summary>
    ///     The width of the sprite.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public int? Width { get; set; }
    
    /// <summary>
    ///     The x position of the upper-left corner of the sprite.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? X { get; set; }
    
    /// <summary>
    ///     The y position of the upper-left corner of the sprite.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? Y { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Height property.
    /// </summary>
    public async Task<int?> GetHeight()
    {
        if (CoreJsModule is null)
        {
            return Height;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Height;
        }

        // get the property value
#pragma warning disable BL0005
        Height = await CoreJsModule!.InvokeAsync<int>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "height");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Height)] = Height;
        return Height;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PixelRatio property.
    /// </summary>
    public async Task<double?> GetPixelRatio()
    {
        if (CoreJsModule is null)
        {
            return PixelRatio;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return PixelRatio;
        }

        // get the property value
#pragma warning disable BL0005
        PixelRatio = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "pixelRatio");
#pragma warning restore BL0005
         ModifiedParameters[nameof(PixelRatio)] = PixelRatio;
        return PixelRatio;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Sdf property.
    /// </summary>
    public async Task<double?> GetSdf()
    {
        if (CoreJsModule is null)
        {
            return Sdf;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Sdf;
        }

        // get the property value
#pragma warning disable BL0005
        Sdf = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "sdf");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Sdf)] = Sdf;
        return Sdf;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Width property.
    /// </summary>
    public async Task<int?> GetWidth()
    {
        if (CoreJsModule is null)
        {
            return Width;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Width;
        }

        // get the property value
#pragma warning disable BL0005
        Width = await CoreJsModule!.InvokeAsync<int>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "width");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Width)] = Width;
        return Width;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the X property.
    /// </summary>
    public async Task<double?> GetX()
    {
        if (CoreJsModule is null)
        {
            return X;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return X;
        }

        // get the property value
#pragma warning disable BL0005
        X = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "x");
#pragma warning restore BL0005
         ModifiedParameters[nameof(X)] = X;
        return X;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Y property.
    /// </summary>
    public async Task<double?> GetY()
    {
        if (CoreJsModule is null)
        {
            return Y;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Y;
        }

        // get the property value
#pragma warning disable BL0005
        Y = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "y");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Y)] = Y;
        return Y;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Height property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHeight(int value)
    {
#pragma warning disable BL0005
        Height = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Height)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "height", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PixelRatio property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPixelRatio(double value)
    {
#pragma warning disable BL0005
        PixelRatio = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PixelRatio)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "pixelRatio", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Sdf property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSdf(double value)
    {
#pragma warning disable BL0005
        Sdf = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Sdf)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "sdf", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Width property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetWidth(int value)
    {
#pragma warning disable BL0005
        Width = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Width)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "width", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the X property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetX(double value)
    {
#pragma warning disable BL0005
        X = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(X)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "x", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Y property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetY(double value)
    {
#pragma warning disable BL0005
        Y = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Y)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "y", value);
    }
    
#endregion




}
