// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.WFSOperations.html">GeoBlazor Docs</a>
///     Information about some operations of the WFS service.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ogc-wfsUtils.html#WFSOperations">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class WFSOperations : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public WFSOperations()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="describeFeatureType">
    /// </param>
    /// <param name="getCapabilities">
    /// </param>
    /// <param name="getFeature">
    /// </param>
    public WFSOperations(
        WFSOperationsDescribeFeatureType? describeFeatureType = null,
        WFSOperationsGetCapabilities? getCapabilities = null,
        WFSOperationsGetFeature? getFeature = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        DescribeFeatureType = describeFeatureType;
        GetCapabilities = getCapabilities;
        GetFeature = getFeature;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public WFSOperationsDescribeFeatureType? DescribeFeatureType { get; set; }
    
    /// <summary>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public WFSOperationsGetCapabilities? GetCapabilities { get; set; }
    
    /// <summary>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public WFSOperationsGetFeature? GetFeature { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the DescribeFeatureType property.
    /// </summary>
    public async Task<WFSOperationsDescribeFeatureType?> GetDescribeFeatureType()
    {
        if (CoreJsModule is null)
        {
            return DescribeFeatureType;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return DescribeFeatureType;
        }

        WFSOperationsDescribeFeatureType? result = await JsComponentReference.InvokeAsync<WFSOperationsDescribeFeatureType?>(
            "getDescribeFeatureType", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            DescribeFeatureType = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(DescribeFeatureType)] = DescribeFeatureType;
        }
        
        return DescribeFeatureType;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the GetCapabilities property.
    /// </summary>
    public async Task<WFSOperationsGetCapabilities?> GetGetCapabilities()
    {
        if (CoreJsModule is null)
        {
            return GetCapabilities;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return GetCapabilities;
        }

        WFSOperationsGetCapabilities? result = await JsComponentReference.InvokeAsync<WFSOperationsGetCapabilities?>(
            "getGetCapabilities", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            GetCapabilities = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(GetCapabilities)] = GetCapabilities;
        }
        
        return GetCapabilities;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the GetFeature property.
    /// </summary>
    public async Task<WFSOperationsGetFeature?> GetGetFeature()
    {
        if (CoreJsModule is null)
        {
            return GetFeature;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return GetFeature;
        }

        WFSOperationsGetFeature? result = await JsComponentReference.InvokeAsync<WFSOperationsGetFeature?>(
            "getGetFeature", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            GetFeature = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(GetFeature)] = GetFeature;
        }
        
        return GetFeature;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the DescribeFeatureType property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDescribeFeatureType(WFSOperationsDescribeFeatureType? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        DescribeFeatureType = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DescribeFeatureType)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "describeFeatureType", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the GetCapabilities property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetGetCapabilities(WFSOperationsGetCapabilities? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        GetCapabilities = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(GetCapabilities)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "getCapabilities", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the GetFeature property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetGetFeature(WFSOperationsGetFeature? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        GetFeature = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(GetFeature)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "getFeature", value);
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case WFSOperationsDescribeFeatureType describeFeatureType:
                if (describeFeatureType != DescribeFeatureType)
                {
                    DescribeFeatureType = describeFeatureType;
                    
                    ModifiedParameters[nameof(DescribeFeatureType)] = DescribeFeatureType;
                }
                
                return true;
            case WFSOperationsGetCapabilities getCapabilities:
                if (getCapabilities != GetCapabilities)
                {
                    GetCapabilities = getCapabilities;
                    
                    ModifiedParameters[nameof(GetCapabilities)] = GetCapabilities;
                }
                
                return true;
            case WFSOperationsGetFeature getFeature:
                if (getFeature != GetFeature)
                {
                    GetFeature = getFeature;
                    
                    ModifiedParameters[nameof(GetFeature)] = GetFeature;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case WFSOperationsDescribeFeatureType _:
                DescribeFeatureType = null;
                
                ModifiedParameters[nameof(DescribeFeatureType)] = DescribeFeatureType;
                return true;
            case WFSOperationsGetCapabilities _:
                GetCapabilities = null;
                
                ModifiedParameters[nameof(GetCapabilities)] = GetCapabilities;
                return true;
            case WFSOperationsGetFeature _:
                GetFeature = null;
                
                ModifiedParameters[nameof(GetFeature)] = GetFeature;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        DescribeFeatureType?.ValidateRequiredGeneratedChildren();
        GetCapabilities?.ValidateRequiredGeneratedChildren();
        GetFeature?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
