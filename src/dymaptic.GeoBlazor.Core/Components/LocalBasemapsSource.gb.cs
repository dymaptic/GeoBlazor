// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    The LocalBasemapsSource class is a Collection-driven <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Basemap.html">Basemap</a> <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-BasemapGalleryViewModel.html#source">source</a> in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-BasemapGalleryViewModel.html">BasemapGalleryViewModel</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery.html">BasemapGallery</a> widget.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-support-LocalBasemapsSource.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class LocalBasemapsSource : MapComponent,
    IBasemapGalleryWidgetSource
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public LocalBasemapsSource()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="basemaps">
    ///     A collection of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Basemap.html">Basemap</a>s.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-support-LocalBasemapsSource.html#basemaps">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public LocalBasemapsSource(
        IReadOnlyList<Basemap>? basemaps = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Basemaps = basemaps;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     A collection of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Basemap.html">Basemap</a>s.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-support-LocalBasemapsSource.html#basemaps">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<Basemap>? Basemaps { get; set; }
    
    /// <summary>
    ///     The source's state.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery-support-LocalBasemapsSource.html#state">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public string? State { get; protected set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Basemaps property.
    /// </summary>
    public async Task<IReadOnlyList<Basemap>?> GetBasemaps()
    {
        if (CoreJsModule is null)
        {
            return Basemaps;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Basemaps;
        }

        IReadOnlyList<Basemap>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<Basemap>?>(
            "getBasemaps", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Basemaps = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Basemaps)] = Basemaps;
        }
        
        return Basemaps;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the State property.
    /// </summary>
    public async Task<string?> GetState()
    {
        if (CoreJsModule is null)
        {
            return State;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return State;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "state");
        if (result is not null)
        {
#pragma warning disable BL0005
             State = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(State)] = State;
        }
         
        return State;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Basemaps property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBasemaps(IReadOnlyList<Basemap>? value)
    {
#pragma warning disable BL0005
        Basemaps = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Basemaps)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setBasemaps", 
            CancellationTokenSource.Token, value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the Basemaps property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToBasemaps(params Basemap[] values)
    {
        Basemap[] join = Basemaps is null
            ? values
            : [..Basemaps, ..values];
        await SetBasemaps(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the Basemaps property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromBasemaps(params Basemap[] values)
    {
        if (Basemaps is null)
        {
            return;
        }
        await SetBasemaps(Basemaps.Except(values).ToArray());
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Basemap basemaps:
                Basemaps ??= [];
                if (!Basemaps.Contains(basemaps))
                {
                    Basemaps = [..Basemaps, basemaps];
                    
                    ModifiedParameters[nameof(Basemaps)] = Basemaps;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Basemap basemaps:
                Basemaps = Basemaps?.Where(b => b != basemaps).ToList();
                
                ModifiedParameters[nameof(Basemaps)] = Basemaps;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        if (Basemaps is not null)
        {
            foreach (Basemap child in Basemaps)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        base.ValidateRequiredGeneratedChildren();
    }
      
}
