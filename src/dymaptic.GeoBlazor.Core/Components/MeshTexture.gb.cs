// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    MeshTexture represents image data to be used for <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html">MeshMaterial</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterialMetallicRoughness.html">MeshMaterialMetallicRoughness</a>.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTexture.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class MeshTexture : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public MeshTexture()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="transparent">
    ///     Indicates whether the image data should be interpreted as being semi-transparent.
    ///     default undefined
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTexture.html#transparent">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="url">
    ///     The url to the image resource.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTexture.html#url">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public MeshTexture(
        bool? transparent = null,
        string? url = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Transparent = transparent;
        Url = url;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     A direct reference to the image or video data.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTexture.html#data">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public ElementReference? ElementReferenceData { get; set; }
    
    /// <summary>
    ///     A direct reference to the image or video data.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTexture.html#data">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public ImageData? ImageData { get; set; }
    
    /// <summary>
    ///     Specifies how uv coordinates outside the [0, 1] range are handled.
    ///     default "repeat"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTexture.html#wrap">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SeparableWrapModes? SeparableWrapModesWrap { get; set; }
    
    /// <summary>
    ///     A direct reference to the image or video data.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTexture.html#data">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? StringData { get; set; }
    
    /// <summary>
    ///     Specifies how uv coordinates outside the [0, 1] range are handled.
    ///     default "repeat"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTexture.html#wrap">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? StringWrap { get; set; }
    
    /// <summary>
    ///     Indicates whether the image data should be interpreted as being semi-transparent.
    ///     default undefined
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTexture.html#transparent">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Transparent { get; set; }
    
    /// <summary>
    ///     The url to the image resource.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshTexture.html#url">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Url { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the ElementReferenceData property.
    /// </summary>
    public async Task<ElementReference?> GetElementReferenceData()
    {
        if (CoreJsModule is null)
        {
            return ElementReferenceData;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ElementReferenceData;
        }

        // get the property value
        ElementReference? result = await JsComponentReference!.InvokeAsync<ElementReference?>("getProperty",
            CancellationTokenSource.Token, "elementReferenceData");
        if (result is not null)
        {
#pragma warning disable BL0005
             ElementReferenceData = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ElementReferenceData)] = ElementReferenceData;
        }
         
        return ElementReferenceData;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ImageData property.
    /// </summary>
    public async Task<ImageData?> GetImageData()
    {
        if (CoreJsModule is null)
        {
            return ImageData;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ImageData;
        }

        // get the property value
        ImageData? result = await JsComponentReference!.InvokeAsync<ImageData?>("getProperty",
            CancellationTokenSource.Token, "imageData");
        if (result is not null)
        {
#pragma warning disable BL0005
             ImageData = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ImageData)] = ImageData;
        }
         
        return ImageData;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SeparableWrapModesWrap property.
    /// </summary>
    public async Task<SeparableWrapModes?> GetSeparableWrapModesWrap()
    {
        if (CoreJsModule is null)
        {
            return SeparableWrapModesWrap;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return SeparableWrapModesWrap;
        }

        // get the property value
        SeparableWrapModes? result = await JsComponentReference!.InvokeAsync<SeparableWrapModes?>("getProperty",
            CancellationTokenSource.Token, "separableWrapModesWrap");
        if (result is not null)
        {
#pragma warning disable BL0005
             SeparableWrapModesWrap = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SeparableWrapModesWrap)] = SeparableWrapModesWrap;
        }
         
        return SeparableWrapModesWrap;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the StringData property.
    /// </summary>
    public async Task<string?> GetStringData()
    {
        if (CoreJsModule is null)
        {
            return StringData;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return StringData;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "stringData");
        if (result is not null)
        {
#pragma warning disable BL0005
             StringData = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(StringData)] = StringData;
        }
         
        return StringData;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the StringWrap property.
    /// </summary>
    public async Task<string?> GetStringWrap()
    {
        if (CoreJsModule is null)
        {
            return StringWrap;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return StringWrap;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "stringWrap");
        if (result is not null)
        {
#pragma warning disable BL0005
             StringWrap = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(StringWrap)] = StringWrap;
        }
         
        return StringWrap;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Transparent property.
    /// </summary>
    public async Task<bool?> GetTransparent()
    {
        if (CoreJsModule is null)
        {
            return Transparent;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Transparent;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "transparent");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Transparent = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Transparent)] = Transparent;
        }
         
        return Transparent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Url property.
    /// </summary>
    public async Task<string?> GetUrl()
    {
        if (CoreJsModule is null)
        {
            return Url;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Url;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "url");
        if (result is not null)
        {
#pragma warning disable BL0005
             Url = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Url)] = Url;
        }
         
        return Url;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the ElementReferenceData property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetElementReferenceData(ElementReference? value)
    {
#pragma warning disable BL0005
        ElementReferenceData = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ElementReferenceData)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "elementReferenceData", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ImageData property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetImageData(ImageData? value)
    {
#pragma warning disable BL0005
        ImageData = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ImageData)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "imageData", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SeparableWrapModesWrap property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSeparableWrapModesWrap(SeparableWrapModes? value)
    {
#pragma warning disable BL0005
        SeparableWrapModesWrap = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SeparableWrapModesWrap)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "separableWrapModesWrap", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the StringData property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetStringData(string? value)
    {
#pragma warning disable BL0005
        StringData = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(StringData)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "stringData", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the StringWrap property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetStringWrap(string? value)
    {
#pragma warning disable BL0005
        StringWrap = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(StringWrap)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "stringWrap", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Transparent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTransparent(bool? value)
    {
#pragma warning disable BL0005
        Transparent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Transparent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "transparent", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Url property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUrl(string? value)
    {
#pragma warning disable BL0005
        Url = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Url)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "url", value);
    }
    
#endregion

}
