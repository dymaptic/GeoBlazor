// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Provides the logic for the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement.html">Measurement</a> widget.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement-MeasurementViewModel.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class MeasurementViewModel : MapComponent,
    IViewModel
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public MeasurementViewModel()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="activeTool">
    ///     Specifies the current measurement tool to display.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement-MeasurementViewModel.html#activeTool">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="activeViewModel">
    ///     View model of the active measurement widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement-MeasurementViewModel.html#activeViewModel">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="areaUnit">
    ///     Unit system (imperial, metric) or specific unit used for displaying the area values.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement-MeasurementViewModel.html#areaUnit">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="linearUnit">
    ///     Unit system (imperial, metric) or specific unit used for displaying the distance values.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement-MeasurementViewModel.html#linearUnit">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public MeasurementViewModel(
        ActiveTool? activeTool = null,
        IMeasurementViewModelActiveViewModel? activeViewModel = null,
        SystemOrAreaUnit? areaUnit = null,
        SystemOrLengthUnit? linearUnit = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        ActiveTool = activeTool;
        ActiveViewModel = activeViewModel;
        AreaUnit = areaUnit;
        LinearUnit = linearUnit;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Specifies the current measurement tool to display.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement-MeasurementViewModel.html#activeTool">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public ActiveTool? ActiveTool { get; set; }
    
    /// <summary>
    ///     View model of the active measurement widget.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement-MeasurementViewModel.html#activeViewModel">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IMeasurementViewModelActiveViewModel? ActiveViewModel { get; set; }
    
    /// <summary>
    ///     Unit system (imperial, metric) or specific unit used for displaying the area values.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement-MeasurementViewModel.html#areaUnit">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SystemOrAreaUnit? AreaUnit { get; set; }
    
    /// <summary>
    ///     Unit system (imperial, metric) or specific unit used for displaying the distance values.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement-MeasurementViewModel.html#linearUnit">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SystemOrLengthUnit? LinearUnit { get; set; }
    
    /// <summary>
    ///     The ViewModel's state.
    ///     default disabled
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Measurement-MeasurementViewModel.html#state">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public MeasurementViewModelState? State { get; protected set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the ActiveTool property.
    /// </summary>
    public async Task<ActiveTool?> GetActiveTool()
    {
        if (CoreJsModule is null)
        {
            return ActiveTool;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ActiveTool;
        }

        // get the property value
        JsNullableEnumWrapper<ActiveTool>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<ActiveTool>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "activeTool");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ActiveTool = (ActiveTool)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ActiveTool)] = ActiveTool;
        }
         
        return ActiveTool;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ActiveViewModel property.
    /// </summary>
    public async Task<IMeasurementViewModelActiveViewModel?> GetActiveViewModel()
    {
        if (CoreJsModule is null)
        {
            return ActiveViewModel;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ActiveViewModel;
        }

        // get the property value
        IMeasurementViewModelActiveViewModel? result = await JsComponentReference!.InvokeAsync<IMeasurementViewModelActiveViewModel?>("getProperty",
            CancellationTokenSource.Token, "activeViewModel");
        if (result is not null)
        {
#pragma warning disable BL0005
             ActiveViewModel = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ActiveViewModel)] = ActiveViewModel;
        }
         
        return ActiveViewModel;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the AreaUnit property.
    /// </summary>
    public async Task<SystemOrAreaUnit?> GetAreaUnit()
    {
        if (CoreJsModule is null)
        {
            return AreaUnit;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return AreaUnit;
        }

        // get the property value
        JsNullableEnumWrapper<SystemOrAreaUnit>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<SystemOrAreaUnit>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "areaUnit");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             AreaUnit = (SystemOrAreaUnit)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(AreaUnit)] = AreaUnit;
        }
         
        return AreaUnit;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LinearUnit property.
    /// </summary>
    public async Task<SystemOrLengthUnit?> GetLinearUnit()
    {
        if (CoreJsModule is null)
        {
            return LinearUnit;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return LinearUnit;
        }

        // get the property value
        JsNullableEnumWrapper<SystemOrLengthUnit>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<SystemOrLengthUnit>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "linearUnit");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             LinearUnit = (SystemOrLengthUnit)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(LinearUnit)] = LinearUnit;
        }
         
        return LinearUnit;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the State property.
    /// </summary>
    public async Task<MeasurementViewModelState?> GetState()
    {
        if (CoreJsModule is null)
        {
            return State;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return State;
        }

        // get the property value
        JsNullableEnumWrapper<MeasurementViewModelState>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<MeasurementViewModelState>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "state");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             State = (MeasurementViewModelState)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(State)] = State;
        }
         
        return State;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the View property.
    /// </summary>
    public async Task<MapView?> GetView()
    {
        if (CoreJsModule is null)
        {
            return View;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return View;
        }

        // get the property value
        MapView? result = await JsComponentReference!.InvokeAsync<MapView?>("getProperty",
            CancellationTokenSource.Token, "view");
        if (result is not null)
        {
#pragma warning disable BL0005
             View = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(View)] = View;
        }
         
        return View;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the ActiveTool property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetActiveTool(ActiveTool? value)
    {
#pragma warning disable BL0005
        ActiveTool = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ActiveTool)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "activeTool", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ActiveViewModel property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetActiveViewModel(IMeasurementViewModelActiveViewModel? value)
    {
#pragma warning disable BL0005
        ActiveViewModel = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ActiveViewModel)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "activeViewModel", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the AreaUnit property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAreaUnit(SystemOrAreaUnit? value)
    {
#pragma warning disable BL0005
        AreaUnit = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(AreaUnit)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "areaUnit", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LinearUnit property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLinearUnit(SystemOrLengthUnit? value)
    {
#pragma warning disable BL0005
        LinearUnit = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LinearUnit)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "linearUnit", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the View property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetView(MapView? value)
    {
#pragma warning disable BL0005
        View = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(View)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "view", value);
    }
    
#endregion

}
