// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    The visible elements that are displayed within the widget.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CoordinateConversion.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class CoordinateConversionVisibleElements : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public CoordinateConversionVisibleElements()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="captureButton">
    ///     Indicates whether the capture mode button will be displayed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CoordinateConversion.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="editButton">
    ///     Indicates whether the input coordinate button will be displayed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CoordinateConversion.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="expandButton">
    ///     Indicates whether the expand and retract buttons will be displayed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CoordinateConversion.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="settingsButton">
    ///     Indicates whether the settings button will be displayed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CoordinateConversion.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public CoordinateConversionVisibleElements(
        bool? captureButton = null,
        bool? editButton = null,
        bool? expandButton = null,
        bool? settingsButton = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        CaptureButton = captureButton;
        EditButton = editButton;
        ExpandButton = expandButton;
        SettingsButton = settingsButton;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Indicates whether the capture mode button will be displayed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CoordinateConversion.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? CaptureButton { get; set; }
    
    /// <summary>
    ///     Indicates whether the input coordinate button will be displayed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CoordinateConversion.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? EditButton { get; set; }
    
    /// <summary>
    ///     Indicates whether the expand and retract buttons will be displayed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CoordinateConversion.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? ExpandButton { get; set; }
    
    /// <summary>
    ///     Indicates whether the settings button will be displayed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-CoordinateConversion.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SettingsButton { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the CaptureButton property.
    /// </summary>
    public async Task<bool?> GetCaptureButton()
    {
        if (CoreJsModule is null)
        {
            return CaptureButton;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CaptureButton;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "captureButton");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             CaptureButton = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CaptureButton)] = CaptureButton;
        }
         
        return CaptureButton;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the EditButton property.
    /// </summary>
    public async Task<bool?> GetEditButton()
    {
        if (CoreJsModule is null)
        {
            return EditButton;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return EditButton;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "editButton");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             EditButton = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(EditButton)] = EditButton;
        }
         
        return EditButton;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ExpandButton property.
    /// </summary>
    public async Task<bool?> GetExpandButton()
    {
        if (CoreJsModule is null)
        {
            return ExpandButton;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ExpandButton;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "expandButton");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ExpandButton = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ExpandButton)] = ExpandButton;
        }
         
        return ExpandButton;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SettingsButton property.
    /// </summary>
    public async Task<bool?> GetSettingsButton()
    {
        if (CoreJsModule is null)
        {
            return SettingsButton;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SettingsButton;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "settingsButton");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SettingsButton = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SettingsButton)] = SettingsButton;
        }
         
        return SettingsButton;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the CaptureButton property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCaptureButton(bool? value)
    {
#pragma warning disable BL0005
        CaptureButton = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CaptureButton)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "captureButton", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the EditButton property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetEditButton(bool? value)
    {
#pragma warning disable BL0005
        EditButton = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(EditButton)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "editButton", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ExpandButton property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetExpandButton(bool? value)
    {
#pragma warning disable BL0005
        ExpandButton = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ExpandButton)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "expandButton", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SettingsButton property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSettingsButton(bool? value)
    {
#pragma warning disable BL0005
        SettingsButton = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SettingsButton)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "settingsButton", value);
    }
    
#endregion

}
