// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    A query table is a feature class or table defined by a SQL query on the fly.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Sublayer.html#QueryTableDataSource">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class QueryTableDataSource : IDynamicDataLayerDataSource
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public QueryTableDataSource()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="workspaceId">
    ///     The workspace where the data resides (defined in ArcGIS Server Manager).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Sublayer.html#QueryTableDataSource">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="query">
    ///     The SQL query used to filter records.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Sublayer.html#QueryTableDataSource">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="oidFields">
    ///     The field name(s) containing the unique IDs for each record in the table.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Sublayer.html#QueryTableDataSource">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="geometryType">
    ///     The geometry type of each record in the table.
    ///     <a target="_blank" href="global.html#geometryType">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="spatialReference">
    ///     The spatial reference of the geometry of each feature in the table source.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Sublayer.html#QueryTableDataSource">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public QueryTableDataSource(
        string workspaceId,
        string query,
        string? oidFields = null,
        FeatureGeometryType? geometryType = null,
        SpatialReference? spatialReference = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        WorkspaceId = workspaceId;
        Query = query;
        OidFields = oidFields;
        GeometryType = geometryType;
        SpatialReference = spatialReference;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The spatial reference of the geometry of each feature in the table source.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Sublayer.html#QueryTableDataSource">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SpatialReference? SpatialReference { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the GeometryType property.
    /// </summary>
    public async Task<FeatureGeometryType?> GetGeometryType()
    {
        if (CoreJsModule is null)
        {
            return GeometryType;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return GeometryType;
        }

        // get the property value
        JsNullableEnumWrapper<FeatureGeometryType>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<FeatureGeometryType>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "geometryType");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             GeometryType = (FeatureGeometryType)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(GeometryType)] = GeometryType;
        }
         
        return GeometryType;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the OidFields property.
    /// </summary>
    public async Task<string?> GetOidFields()
    {
        if (CoreJsModule is null)
        {
            return OidFields;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return OidFields;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "oidFields");
        if (result is not null)
        {
#pragma warning disable BL0005
             OidFields = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(OidFields)] = OidFields;
        }
         
        return OidFields;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Query property.
    /// </summary>
    public async Task<string?> GetQuery()
    {
        if (CoreJsModule is null)
        {
            return Query;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Query;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "query");
        if (result is not null)
        {
#pragma warning disable BL0005
             Query = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Query)] = Query;
        }
         
        return Query;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SpatialReference property.
    /// </summary>
    public async Task<SpatialReference?> GetSpatialReference()
    {
        if (CoreJsModule is null)
        {
            return SpatialReference;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return SpatialReference;
        }

        // get the property value
        SpatialReference? result = await JsComponentReference!.InvokeAsync<SpatialReference?>("getProperty",
            CancellationTokenSource.Token, "spatialReference");
        if (result is not null)
        {
#pragma warning disable BL0005
             SpatialReference = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SpatialReference)] = SpatialReference;
        }
         
        return SpatialReference;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the WorkspaceId property.
    /// </summary>
    public async Task<string?> GetWorkspaceId()
    {
        if (CoreJsModule is null)
        {
            return WorkspaceId;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return WorkspaceId;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "workspaceId");
        if (result is not null)
        {
#pragma warning disable BL0005
             WorkspaceId = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(WorkspaceId)] = WorkspaceId;
        }
         
        return WorkspaceId;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the GeometryType property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetGeometryType(FeatureGeometryType value)
    {
#pragma warning disable BL0005
        GeometryType = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(GeometryType)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "geometryType", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the OidFields property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetOidFields(string value)
    {
#pragma warning disable BL0005
        OidFields = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(OidFields)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "oidFields", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Query property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetQuery(string value)
    {
#pragma warning disable BL0005
        Query = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Query)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "query", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SpatialReference property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSpatialReference(SpatialReference value)
    {
#pragma warning disable BL0005
        SpatialReference = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SpatialReference)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "spatialReference", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the WorkspaceId property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetWorkspaceId(string value)
    {
#pragma warning disable BL0005
        WorkspaceId = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(WorkspaceId)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "workspaceId", value);
    }
    
#endregion


    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case SpatialReference spatialReference:
                if (spatialReference != SpatialReference)
                {
                    SpatialReference = spatialReference;
                    
                    ModifiedParameters[nameof(SpatialReference)] = SpatialReference;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case SpatialReference _:
                SpatialReference = null;
                
                ModifiedParameters[nameof(SpatialReference)] = SpatialReference;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        SpatialReference?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
