// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.OpacityRampElement.html">GeoBlazor Docs</a>
///     Describes the schema of the OpacityRampElement used as a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#legendElement">legendElement</a>.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#OpacityRampElement">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class OpacityRampElement : MapComponent,
    ILegendElement
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public OpacityRampElement()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="infos">
    ///     The individual opacity stops rendered in the legend that correspond to the opacity visual variable in the renderer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#OpacityRampElement">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="rampTitle">
    ///     The title of the opacity ramp as displayed in the legend.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#OpacityRampElement">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="stringTitle">
    ///     The title of the opacity ramp as displayed in the legend.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#OpacityRampElement">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public OpacityRampElement(
        IReadOnlyList<OpacityRampStop>? infos = null,
        RampTitle? rampTitle = null,
        string? stringTitle = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Infos = infos;
        RampTitle = rampTitle;
        StringTitle = stringTitle;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The individual opacity stops rendered in the legend that correspond to the opacity visual variable in the renderer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#OpacityRampElement">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<OpacityRampStop>? Infos { get; set; }
    
    /// <summary>
    ///     The title of the opacity ramp as displayed in the legend.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#OpacityRampElement">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public RampTitle? RampTitle { get; set; }
    
    /// <summary>
    ///     The title of the opacity ramp as displayed in the legend.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#OpacityRampElement">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? StringTitle { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Infos property.
    /// </summary>
    public async Task<IReadOnlyList<OpacityRampStop>?> GetInfos()
    {
        if (CoreJsModule is null)
        {
            return Infos;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Infos;
        }

        IReadOnlyList<OpacityRampStop>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<OpacityRampStop>?>(
            "getInfos", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Infos = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Infos)] = Infos;
        }
        
        return Infos;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RampTitle property.
    /// </summary>
    public async Task<RampTitle?> GetRampTitle()
    {
        if (CoreJsModule is null)
        {
            return RampTitle;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return RampTitle;
        }

        // get the property value
        RampTitle? result = await JsComponentReference!.InvokeAsync<RampTitle?>("getProperty",
            CancellationTokenSource.Token, "title");
        if (result is not null)
        {
#pragma warning disable BL0005
             RampTitle = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(RampTitle)] = RampTitle;
        }
         
        return RampTitle;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the StringTitle property.
    /// </summary>
    public async Task<string?> GetStringTitle()
    {
        if (CoreJsModule is null)
        {
            return StringTitle;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return StringTitle;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "title");
        if (result is not null)
        {
#pragma warning disable BL0005
             StringTitle = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(StringTitle)] = StringTitle;
        }
         
        return StringTitle;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Infos property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetInfos(IReadOnlyList<OpacityRampStop>? value)
    {
        if (value is not null)
        {
            foreach (OpacityRampStop item in value)
            {
                item.CoreJsModule = CoreJsModule;
                item.Parent = this;
                item.Layer = Layer;
                item.View = View;
            }
        }
        
#pragma warning disable BL0005
        Infos = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Infos)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "infos", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the RampTitle property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRampTitle(RampTitle? value)
    {
#pragma warning disable BL0005
        RampTitle = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RampTitle)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "title", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the StringTitle property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetStringTitle(string? value)
    {
#pragma warning disable BL0005
        StringTitle = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(StringTitle)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "title", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the Infos property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToInfos(params OpacityRampStop[] values)
    {
        OpacityRampStop[] join = Infos is null
            ? values
            : [..Infos, ..values];
        await SetInfos(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the Infos property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromInfos(params OpacityRampStop[] values)
    {
        if (Infos is null)
        {
            return;
        }
        await SetInfos(Infos.Except(values).ToArray());
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case OpacityRampStop infos:
                Infos ??= [];
                if (!Infos.Contains(infos))
                {
                    Infos = [..Infos, infos];
                    ModifiedParameters[nameof(Infos)] = Infos;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case OpacityRampStop infos:
                Infos = Infos?.Where(i => i != infos).ToList();
                ModifiedParameters[nameof(Infos)] = Infos;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        if (Infos is not null)
        {
            foreach (OpacityRampStop child in Infos)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        base.ValidateRequiredGeneratedChildren();
    }
      
}
