// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    The visible elements that are displayed within the widget.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Slider.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class SliderVisibleElements
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public SliderVisibleElements()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="labels">
    ///     Indicates whether to display labels for slider thumbs.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Slider.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="rangeLabels">
    ///     Indicates whether to display <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Slider.html#min">min</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Slider.html#max">max</a> range values on the slider.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Slider.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public SliderVisibleElements(
        bool? labels = null,
        bool? rangeLabels = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Labels = labels;
        RangeLabels = rangeLabels;
#pragma warning restore BL0005    
    }
    
    
#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Labels property.
    /// </summary>
    public async Task<bool?> GetLabels()
    {
        if (CoreJsModule is null)
        {
            return Labels;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Labels;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "labels");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Labels = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Labels)] = Labels;
        }
         
        return Labels;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RangeLabels property.
    /// </summary>
    public async Task<bool?> GetRangeLabels()
    {
        if (CoreJsModule is null)
        {
            return RangeLabels;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return RangeLabels;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "rangeLabels");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             RangeLabels = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(RangeLabels)] = RangeLabels;
        }
         
        return RangeLabels;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Labels property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLabels(bool? value)
    {
#pragma warning disable BL0005
        Labels = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Labels)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "labels", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the RangeLabels property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRangeLabels(bool? value)
    {
#pragma warning disable BL0005
        RangeLabels = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RangeLabels)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "rangeLabels", value);
    }
    
#endregion

}
