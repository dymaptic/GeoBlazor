// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Abilities.html">GeoBlazor Docs</a>
///     This object defines specific abilities for the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature.html">Feature</a> and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html">Popup</a> widgets.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#Abilities">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class Abilities : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public Abilities()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="attachmentsContent">
    ///     Indicate whether the widget should query and display <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-AttachmentsContent.html">attachments</a> associated with the feature.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#Abilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="chartAnimation">
    ///     Indicate whether the widget should display animations for charts residing in <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-MediaContent.html">media content elements</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#Abilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="customContent">
    ///     Indicate whether the widget should display any <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-CustomContent.html">custom content elements</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#Abilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="fieldsContent">
    ///     Indicate whether the widget should display any <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-FieldsContent.html">fields content elements</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#Abilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="mediaContent">
    ///     Indicate whether the widget should display any <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-MediaContent.html">media content elements</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#Abilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="textContent">
    ///     Indicate whether the widget should display any <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-TextContent.html">text content elements</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#Abilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="relationshipContent">
    ///     Indicate whether the widget should display <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-RelationshipContent.html">relationship content elements</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#Abilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="utilityNetworkAssociationsContent">
    ///     Indicate whether the widget should display <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-UtilityNetworkAssociationsContent.html">utility network associations content elements</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#Abilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public Abilities(
        bool? attachmentsContent = null,
        bool? chartAnimation = null,
        bool? customContent = null,
        bool? fieldsContent = null,
        bool? mediaContent = null,
        bool? textContent = null,
        bool? relationshipContent = null,
        bool? utilityNetworkAssociationsContent = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        AttachmentsContent = attachmentsContent;
        ChartAnimation = chartAnimation;
        CustomContent = customContent;
        FieldsContent = fieldsContent;
        MediaContent = mediaContent;
        TextContent = textContent;
        RelationshipContent = relationshipContent;
        UtilityNetworkAssociationsContent = utilityNetworkAssociationsContent;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Abilities.html#abilitiesattachmentscontent-property">GeoBlazor Docs</a>
    ///     Indicate whether the widget should query and display <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-AttachmentsContent.html">attachments</a> associated with the feature.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#Abilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? AttachmentsContent { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Abilities.html#abilitieschartanimation-property">GeoBlazor Docs</a>
    ///     Indicate whether the widget should display animations for charts residing in <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-MediaContent.html">media content elements</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#Abilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? ChartAnimation { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Abilities.html#abilitiescustomcontent-property">GeoBlazor Docs</a>
    ///     Indicate whether the widget should display any <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-CustomContent.html">custom content elements</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#Abilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? CustomContent { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Abilities.html#abilitiesfieldscontent-property">GeoBlazor Docs</a>
    ///     Indicate whether the widget should display any <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-FieldsContent.html">fields content elements</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#Abilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? FieldsContent { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Abilities.html#abilitiesmediacontent-property">GeoBlazor Docs</a>
    ///     Indicate whether the widget should display any <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-MediaContent.html">media content elements</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#Abilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? MediaContent { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Abilities.html#abilitiesrelationshipcontent-property">GeoBlazor Docs</a>
    ///     Indicate whether the widget should display <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-RelationshipContent.html">relationship content elements</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#Abilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? RelationshipContent { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Abilities.html#abilitiestextcontent-property">GeoBlazor Docs</a>
    ///     Indicate whether the widget should display any <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-TextContent.html">text content elements</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#Abilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? TextContent { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Abilities.html#abilitiesutilitynetworkassociationscontent-property">GeoBlazor Docs</a>
    ///     Indicate whether the widget should display <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-UtilityNetworkAssociationsContent.html">utility network associations content elements</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Feature-FeatureViewModel.html#Abilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? UtilityNetworkAssociationsContent { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the AttachmentsContent property.
    /// </summary>
    public async Task<bool?> GetAttachmentsContent()
    {
        if (CoreJsModule is null)
        {
            return AttachmentsContent;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return AttachmentsContent;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "attachmentsContent");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             AttachmentsContent = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(AttachmentsContent)] = AttachmentsContent;
        }
         
        return AttachmentsContent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ChartAnimation property.
    /// </summary>
    public async Task<bool?> GetChartAnimation()
    {
        if (CoreJsModule is null)
        {
            return ChartAnimation;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ChartAnimation;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "chartAnimation");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ChartAnimation = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ChartAnimation)] = ChartAnimation;
        }
         
        return ChartAnimation;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CustomContent property.
    /// </summary>
    public async Task<bool?> GetCustomContent()
    {
        if (CoreJsModule is null)
        {
            return CustomContent;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CustomContent;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "customContent");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             CustomContent = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CustomContent)] = CustomContent;
        }
         
        return CustomContent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FieldsContent property.
    /// </summary>
    public async Task<bool?> GetFieldsContent()
    {
        if (CoreJsModule is null)
        {
            return FieldsContent;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return FieldsContent;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "fieldsContent");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             FieldsContent = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FieldsContent)] = FieldsContent;
        }
         
        return FieldsContent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MediaContent property.
    /// </summary>
    public async Task<bool?> GetMediaContent()
    {
        if (CoreJsModule is null)
        {
            return MediaContent;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return MediaContent;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "mediaContent");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             MediaContent = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MediaContent)] = MediaContent;
        }
         
        return MediaContent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RelationshipContent property.
    /// </summary>
    public async Task<bool?> GetRelationshipContent()
    {
        if (CoreJsModule is null)
        {
            return RelationshipContent;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return RelationshipContent;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "relationshipContent");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             RelationshipContent = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(RelationshipContent)] = RelationshipContent;
        }
         
        return RelationshipContent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the TextContent property.
    /// </summary>
    public async Task<bool?> GetTextContent()
    {
        if (CoreJsModule is null)
        {
            return TextContent;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return TextContent;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "textContent");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             TextContent = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(TextContent)] = TextContent;
        }
         
        return TextContent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the UtilityNetworkAssociationsContent property.
    /// </summary>
    public async Task<bool?> GetUtilityNetworkAssociationsContent()
    {
        if (CoreJsModule is null)
        {
            return UtilityNetworkAssociationsContent;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return UtilityNetworkAssociationsContent;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "utilityNetworkAssociationsContent");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             UtilityNetworkAssociationsContent = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(UtilityNetworkAssociationsContent)] = UtilityNetworkAssociationsContent;
        }
         
        return UtilityNetworkAssociationsContent;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the AttachmentsContent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAttachmentsContent(bool? value)
    {
#pragma warning disable BL0005
        AttachmentsContent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(AttachmentsContent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "attachmentsContent", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ChartAnimation property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetChartAnimation(bool? value)
    {
#pragma warning disable BL0005
        ChartAnimation = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ChartAnimation)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "chartAnimation", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CustomContent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCustomContent(bool? value)
    {
#pragma warning disable BL0005
        CustomContent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CustomContent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "customContent", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FieldsContent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFieldsContent(bool? value)
    {
#pragma warning disable BL0005
        FieldsContent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FieldsContent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "fieldsContent", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MediaContent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMediaContent(bool? value)
    {
#pragma warning disable BL0005
        MediaContent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MediaContent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "mediaContent", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the RelationshipContent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRelationshipContent(bool? value)
    {
#pragma warning disable BL0005
        RelationshipContent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RelationshipContent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "relationshipContent", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the TextContent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTextContent(bool? value)
    {
#pragma warning disable BL0005
        TextContent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(TextContent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "textContent", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the UtilityNetworkAssociationsContent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUtilityNetworkAssociationsContent(bool? value)
    {
#pragma warning disable BL0005
        UtilityNetworkAssociationsContent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(UtilityNetworkAssociationsContent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "utilityNetworkAssociationsContent", value);
    }
    
#endregion

}
