// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    An item (a unit of content) in the Portal.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class PortalItem
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public PortalItem()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="access">
    ///     Indicates the level of access to this item: `private`, `shared`, `org`, or `public`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#access">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="accessInformation">
    ///     Information on the source of the item and its copyright status.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#accessInformation">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="apiKey">
    ///     An authorization string used to access the portal item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#apiKey">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="avgRating">
    ///     Average rating.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#avgRating">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="categories">
    ///     An array of organization categories that are set on the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#categories">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="created">
    ///     The date the item was created.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#created">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="culture">
    ///     The item's locale information (language and country).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#culture">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="description">
    ///     The detailed description of the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#description">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="extent">
    ///     The geographic extent, or bounding rectangle, of the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#extent">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="groupCategories">
    ///     An array of group categories set on the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#groupCategories">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="licenseInfo">
    ///     Information on license or restrictions related to the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#licenseInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="modified">
    ///     The date the item was last modified.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#modified">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="name">
    ///     The name of the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#name">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="numComments">
    ///     Number of comments on the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#numComments">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="numRatings">
    ///     Number of ratings on the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#numRatings">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="numViews">
    ///     Number of views on the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#numViews">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="owner">
    ///     The username of the user who owns this item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#owner">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="ownerFolder">
    ///     The ID of the folder in which the owner has stored the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#ownerFolder">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="portal">
    ///     The portal that contains the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#portal">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="portalItemId">
    ///     The unique id for the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#id">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="screenshots">
    ///     An array of string URLs.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#screenshots">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="size">
    ///     The size of the item (in bytes).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#size">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="snippet">
    ///     A summary description of the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#snippet">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="tags">
    ///     User defined tags that describe the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#tags">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="title">
    ///     The title for the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#title">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="typeKeywords">
    ///     Type keywords that describe the type of content of this item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#typeKeywords">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="url">
    ///     The service URL of this item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#url">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public PortalItem(
        PortalItemAccess? access = null,
        string? accessInformation = null,
        string? apiKey = null,
        double? avgRating = null,
        IReadOnlyList<string>? categories = null,
        DateTime? created = null,
        string? culture = null,
        string? description = null,
        Extent? extent = null,
        IReadOnlyList<string>? groupCategories = null,
        string? licenseInfo = null,
        DateTime? modified = null,
        string? name = null,
        double? numComments = null,
        double? numRatings = null,
        double? numViews = null,
        string? owner = null,
        string? ownerFolder = null,
        Portal? portal = null,
        string? portalItemId = null,
        IReadOnlyList<string>? screenshots = null,
        int? size = null,
        string? snippet = null,
        IReadOnlyList<string>? tags = null,
        string? title = null,
        IReadOnlyList<string>? typeKeywords = null,
        string? url = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Access = access;
        AccessInformation = accessInformation;
        ApiKey = apiKey;
        AvgRating = avgRating;
        Categories = categories;
        Created = created;
        Culture = culture;
        Description = description;
        Extent = extent;
        GroupCategories = groupCategories;
        LicenseInfo = licenseInfo;
        Modified = modified;
        Name = name;
        NumComments = numComments;
        NumRatings = numRatings;
        NumViews = numViews;
        Owner = owner;
        OwnerFolder = ownerFolder;
        Portal = portal;
        PortalItemId = portalItemId;
        Screenshots = screenshots;
        Size = size;
        Snippet = snippet;
        Tags = tags;
        Title = title;
        TypeKeywords = typeKeywords;
        Url = url;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Indicates the level of access to this item: `private`, `shared`, `org`, or `public`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#access">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public PortalItemAccess? Access { get; set; }
    
    /// <summary>
    ///     Information on the source of the item and its copyright status.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#accessInformation">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? AccessInformation { get; set; }
    
    /// <summary>
    ///     Contains an array of objects containing proxy information for premium platform services.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#applicationProxies">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<PortalItemApplicationProxies>? ApplicationProxies { get; protected set; }
    
    /// <summary>
    ///     Average rating.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#avgRating">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? AvgRating { get; set; }
    
    /// <summary>
    ///     An array of organization categories that are set on the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#categories">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<string>? Categories { get; set; }
    
    /// <summary>
    ///     The date the item was created.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#created">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public DateTime? Created { get; set; }
    
    /// <summary>
    ///     The item's locale information (language and country).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#culture">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Culture { get; set; }
    
    /// <summary>
    ///     The detailed description of the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#description">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Description { get; set; }
    
    /// <summary>
    ///     The geographic extent, or bounding rectangle, of the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#extent">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Extent? Extent { get; set; }
    
    /// <summary>
    ///     An array of group categories set on the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#groupCategories">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<string>? GroupCategories { get; set; }
    
    /// <summary>
    ///     Indicates whether a layer can be created from this item using <a target="_blank" href="esri-layers-Layer.html#fromPortalItem">Layer.fromPortalItem()</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#isLayer">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? IsLayer { get; protected set; }
    
    /// <summary>
    ///     Indicates whether this item and the user whose credential was used to fetch this item belong to the same ArcGIS Enterprise Portal or ArcGIS Online Organization.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#isOrgItem">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? IsOrgItem { get; protected set; }
    
    /// <summary>
    ///     Indicates whether an item can be updated and deleted.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#itemControl">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public ItemControl? ItemControl { get; protected set; }
    
    /// <summary>
    ///     The URL to the <a target="_blank" href="https://doc.arcgis.com/en/arcgis-online/manage-data/item-details.htm">Item page</a> on the portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#itemPageUrl">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? ItemPageUrl { get; protected set; }
    
    /// <summary>
    ///     The URL to the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#itemUrl">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? ItemUrl { get; protected set; }
    
    /// <summary>
    ///     Information on license or restrictions related to the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#licenseInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? LicenseInfo { get; set; }
    
    /// <summary>
    ///     Indicates whether the item's resources have loaded from the portal.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#loaded">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Loaded { get; protected set; }
    
    /// <summary>
    ///     The date the item was last modified.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#modified">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public DateTime? Modified { get; set; }
    
    /// <summary>
    ///     The name of the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#name">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Name { get; set; }
    
    /// <summary>
    ///     Number of comments on the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#numComments">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? NumComments { get; set; }
    
    /// <summary>
    ///     Number of ratings on the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#numRatings">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? NumRatings { get; set; }
    
    /// <summary>
    ///     Number of views on the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#numViews">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? NumViews { get; set; }
    
    /// <summary>
    ///     The username of the user who owns this item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#owner">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Owner { get; set; }
    
    /// <summary>
    ///     The ID of the folder in which the owner has stored the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#ownerFolder">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? OwnerFolder { get; set; }
    
    /// <summary>
    ///     The portal that contains the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#portal">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Portal? Portal { get; set; }
    
    /// <summary>
    ///     The unique id for the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#id">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? PortalItemId { get; set; }
    
    /// <summary>
    ///     An array of string URLs.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#screenshots">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<string>? Screenshots { get; set; }
    
    /// <summary>
    ///     The size of the item (in bytes).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#size">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public int? Size { get; set; }
    
    /// <summary>
    ///     A summary description of the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#snippet">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Snippet { get; set; }
    
    /// <summary>
    ///     The JSON used to create the property values when the `PortalItem` is loaded.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#sourceJSON">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? SourceJSON { get; protected set; }
    
    /// <summary>
    ///     User defined tags that describe the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#tags">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<string>? Tags { get; set; }
    
    /// <summary>
    ///     The URL to the thumbnail used for the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#thumbnailUrl">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? ThumbnailUrl { get; protected set; }
    
    /// <summary>
    ///     The title for the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#title">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Title { get; set; }
    
    /// <summary>
    ///     Type keywords that describe the type of content of this item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#typeKeywords">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<string>? TypeKeywords { get; set; }
    
    /// <summary>
    ///     The service URL of this item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#url">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Url { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Access property.
    /// </summary>
    public async Task<PortalItemAccess?> GetAccess()
    {
        if (CoreJsModule is null)
        {
            return Access;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Access;
        }

        // get the property value
#pragma warning disable BL0005
        Access = await CoreJsModule!.InvokeAsync<PortalItemAccess>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "access");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Access)] = Access;
        return Access;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the AccessInformation property.
    /// </summary>
    public async Task<string?> GetAccessInformation()
    {
        if (CoreJsModule is null)
        {
            return AccessInformation;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return AccessInformation;
        }

        // get the property value
#pragma warning disable BL0005
        AccessInformation = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "accessInformation");
#pragma warning restore BL0005
         ModifiedParameters[nameof(AccessInformation)] = AccessInformation;
        return AccessInformation;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ApiKey property.
    /// </summary>
    public async Task<string?> GetApiKey()
    {
        if (CoreJsModule is null)
        {
            return ApiKey;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ApiKey;
        }

        // get the property value
#pragma warning disable BL0005
        ApiKey = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "apiKey");
#pragma warning restore BL0005
         ModifiedParameters[nameof(ApiKey)] = ApiKey;
        return ApiKey;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ApplicationProxies property.
    /// </summary>
    public async Task<IReadOnlyList<PortalItemApplicationProxies>?> GetApplicationProxies()
    {
        if (CoreJsModule is null)
        {
            return ApplicationProxies;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ApplicationProxies;
        }

        // get the property value
#pragma warning disable BL0005
        ApplicationProxies = await CoreJsModule!.InvokeAsync<IReadOnlyList<PortalItemApplicationProxies>?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "applicationProxies");
#pragma warning restore BL0005
         ModifiedParameters[nameof(ApplicationProxies)] = ApplicationProxies;
        return ApplicationProxies;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the AvgRating property.
    /// </summary>
    public async Task<double?> GetAvgRating()
    {
        if (CoreJsModule is null)
        {
            return AvgRating;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return AvgRating;
        }

        // get the property value
#pragma warning disable BL0005
        AvgRating = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "avgRating");
#pragma warning restore BL0005
         ModifiedParameters[nameof(AvgRating)] = AvgRating;
        return AvgRating;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Categories property.
    /// </summary>
    public async Task<IReadOnlyList<string>?> GetCategories()
    {
        if (CoreJsModule is null)
        {
            return Categories;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Categories;
        }

        // get the property value
#pragma warning disable BL0005
        Categories = await CoreJsModule!.InvokeAsync<IReadOnlyList<string>?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "categories");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Categories)] = Categories;
        return Categories;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Created property.
    /// </summary>
    public async Task<DateTime?> GetCreated()
    {
        if (CoreJsModule is null)
        {
            return Created;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Created;
        }

        // get the property value
#pragma warning disable BL0005
        Created = await CoreJsModule!.InvokeAsync<DateTime>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "created");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Created)] = Created;
        return Created;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Culture property.
    /// </summary>
    public async Task<string?> GetCulture()
    {
        if (CoreJsModule is null)
        {
            return Culture;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Culture;
        }

        // get the property value
#pragma warning disable BL0005
        Culture = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "culture");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Culture)] = Culture;
        return Culture;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Description property.
    /// </summary>
    public async Task<string?> GetDescription()
    {
        if (CoreJsModule is null)
        {
            return Description;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Description;
        }

        // get the property value
#pragma warning disable BL0005
        Description = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "description");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Description)] = Description;
        return Description;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Extent property.
    /// </summary>
    public async Task<Extent?> GetExtent()
    {
        if (CoreJsModule is null)
        {
            return Extent;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Extent;
        }

        // get the property value
#pragma warning disable BL0005
        Extent = await CoreJsModule!.InvokeAsync<Extent?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "extent");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Extent)] = Extent;
        return Extent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the GroupCategories property.
    /// </summary>
    public async Task<IReadOnlyList<string>?> GetGroupCategories()
    {
        if (CoreJsModule is null)
        {
            return GroupCategories;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return GroupCategories;
        }

        // get the property value
#pragma warning disable BL0005
        GroupCategories = await CoreJsModule!.InvokeAsync<IReadOnlyList<string>?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "groupCategories");
#pragma warning restore BL0005
         ModifiedParameters[nameof(GroupCategories)] = GroupCategories;
        return GroupCategories;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the IsLayer property.
    /// </summary>
    public async Task<bool?> GetIsLayer()
    {
        if (CoreJsModule is null)
        {
            return IsLayer;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return IsLayer;
        }

        // get the property value
#pragma warning disable BL0005
        IsLayer = await CoreJsModule!.InvokeAsync<bool>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "isLayer");
#pragma warning restore BL0005
         ModifiedParameters[nameof(IsLayer)] = IsLayer;
        return IsLayer;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the IsOrgItem property.
    /// </summary>
    public async Task<bool?> GetIsOrgItem()
    {
        if (CoreJsModule is null)
        {
            return IsOrgItem;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return IsOrgItem;
        }

        // get the property value
#pragma warning disable BL0005
        IsOrgItem = await CoreJsModule!.InvokeAsync<bool>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "isOrgItem");
#pragma warning restore BL0005
         ModifiedParameters[nameof(IsOrgItem)] = IsOrgItem;
        return IsOrgItem;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ItemControl property.
    /// </summary>
    public async Task<ItemControl?> GetItemControl()
    {
        if (CoreJsModule is null)
        {
            return ItemControl;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ItemControl;
        }

        // get the property value
#pragma warning disable BL0005
        ItemControl = await CoreJsModule!.InvokeAsync<ItemControl>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "itemControl");
#pragma warning restore BL0005
         ModifiedParameters[nameof(ItemControl)] = ItemControl;
        return ItemControl;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ItemPageUrl property.
    /// </summary>
    public async Task<string?> GetItemPageUrl()
    {
        if (CoreJsModule is null)
        {
            return ItemPageUrl;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ItemPageUrl;
        }

        // get the property value
#pragma warning disable BL0005
        ItemPageUrl = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "itemPageUrl");
#pragma warning restore BL0005
         ModifiedParameters[nameof(ItemPageUrl)] = ItemPageUrl;
        return ItemPageUrl;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ItemUrl property.
    /// </summary>
    public async Task<string?> GetItemUrl()
    {
        if (CoreJsModule is null)
        {
            return ItemUrl;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ItemUrl;
        }

        // get the property value
#pragma warning disable BL0005
        ItemUrl = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "itemUrl");
#pragma warning restore BL0005
         ModifiedParameters[nameof(ItemUrl)] = ItemUrl;
        return ItemUrl;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LicenseInfo property.
    /// </summary>
    public async Task<string?> GetLicenseInfo()
    {
        if (CoreJsModule is null)
        {
            return LicenseInfo;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return LicenseInfo;
        }

        // get the property value
#pragma warning disable BL0005
        LicenseInfo = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "licenseInfo");
#pragma warning restore BL0005
         ModifiedParameters[nameof(LicenseInfo)] = LicenseInfo;
        return LicenseInfo;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Loaded property.
    /// </summary>
    public async Task<bool?> GetLoaded()
    {
        if (CoreJsModule is null)
        {
            return Loaded;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Loaded;
        }

        // get the property value
#pragma warning disable BL0005
        Loaded = await CoreJsModule!.InvokeAsync<bool>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "loaded");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Loaded)] = Loaded;
        return Loaded;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Modified property.
    /// </summary>
    public async Task<DateTime?> GetModified()
    {
        if (CoreJsModule is null)
        {
            return Modified;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Modified;
        }

        // get the property value
#pragma warning disable BL0005
        Modified = await CoreJsModule!.InvokeAsync<DateTime>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "modified");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Modified)] = Modified;
        return Modified;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Name property.
    /// </summary>
    public async Task<string?> GetName()
    {
        if (CoreJsModule is null)
        {
            return Name;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Name;
        }

        // get the property value
#pragma warning disable BL0005
        Name = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "name");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Name)] = Name;
        return Name;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the NumComments property.
    /// </summary>
    public async Task<double?> GetNumComments()
    {
        if (CoreJsModule is null)
        {
            return NumComments;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return NumComments;
        }

        // get the property value
#pragma warning disable BL0005
        NumComments = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "numComments");
#pragma warning restore BL0005
         ModifiedParameters[nameof(NumComments)] = NumComments;
        return NumComments;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the NumRatings property.
    /// </summary>
    public async Task<double?> GetNumRatings()
    {
        if (CoreJsModule is null)
        {
            return NumRatings;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return NumRatings;
        }

        // get the property value
#pragma warning disable BL0005
        NumRatings = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "numRatings");
#pragma warning restore BL0005
         ModifiedParameters[nameof(NumRatings)] = NumRatings;
        return NumRatings;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the NumViews property.
    /// </summary>
    public async Task<double?> GetNumViews()
    {
        if (CoreJsModule is null)
        {
            return NumViews;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return NumViews;
        }

        // get the property value
#pragma warning disable BL0005
        NumViews = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "numViews");
#pragma warning restore BL0005
         ModifiedParameters[nameof(NumViews)] = NumViews;
        return NumViews;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Owner property.
    /// </summary>
    public async Task<string?> GetOwner()
    {
        if (CoreJsModule is null)
        {
            return Owner;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Owner;
        }

        // get the property value
#pragma warning disable BL0005
        Owner = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "owner");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Owner)] = Owner;
        return Owner;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the OwnerFolder property.
    /// </summary>
    public async Task<string?> GetOwnerFolder()
    {
        if (CoreJsModule is null)
        {
            return OwnerFolder;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return OwnerFolder;
        }

        // get the property value
#pragma warning disable BL0005
        OwnerFolder = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "ownerFolder");
#pragma warning restore BL0005
         ModifiedParameters[nameof(OwnerFolder)] = OwnerFolder;
        return OwnerFolder;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Portal property.
    /// </summary>
    public async Task<Portal?> GetPortal()
    {
        if (CoreJsModule is null)
        {
            return Portal;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Portal;
        }

        // get the JS object reference
        IJSObjectReference? refResult = await CoreJsModule!.InvokeAsync<IJSObjectReference?>(
            "getProperty", CancellationTokenSource.Token, JsComponentReference, 
            "portal");
        if (refResult is null)
        {
            return null;
        }
        
        // Try to deserialize the object. This might fail if we don't have the
        // all deserialization edge cases handled.
        try
        {
#pragma warning disable BL0005
            Portal = await CoreJsModule.InvokeAsync<Portal?>(
                "createGeoBlazorObject", CancellationTokenSource.Token, refResult);
#pragma warning restore BL0005
            ModifiedParameters[nameof(Portal)] = Portal;
            if (Portal is not null)
            {
                Portal.Parent = this;
                Portal.View = View;
                Portal.JsComponentReference = refResult;
                await CoreJsModule!.InvokeVoidAsync("registerGeoBlazorObject",
                    CancellationTokenSource.Token, refResult, Portal.Id);
                return Portal;
            }
        }
        catch
        {
            Console.WriteLine("Failed to deserialize Portal");
        }
#pragma warning disable BL0005
        Portal = new Portal();
#pragma warning restore BL0005
         ModifiedParameters[nameof(Portal)] = Portal;
        Portal.Parent = this;
        Portal.View = View;
        Portal.JsComponentReference = refResult;
        // register this type in JS
        await CoreJsModule!.InvokeVoidAsync("registerGeoBlazorObject",
            CancellationTokenSource.Token, refResult, Portal.Id);
        await Portal.GetProperty<PortalAccess>(nameof(Portal.Access));
        await Portal.GetProperty<bool>(nameof(Portal.AllSSL));
        await Portal.GetProperty<AuthMode>(nameof(Portal.AuthMode));
        await Portal.GetProperty<IReadOnlyList<string>>(nameof(Portal.AuthorizedCrossOriginDomains));
        await Portal.GetProperty<string>(nameof(Portal.BasemapGalleryGroupQuery));
        await Portal.GetProperty<string>(nameof(Portal.BasemapGalleryGroupQuery3D));
        await Portal.GetProperty<string>(nameof(Portal.BingKey));
        await Portal.GetProperty<bool>(nameof(Portal.CanListApps));
        await Portal.GetProperty<bool>(nameof(Portal.CanListData));
        await Portal.GetProperty<bool>(nameof(Portal.CanListPreProvisionedItems));
        await Portal.GetProperty<bool>(nameof(Portal.CanProvisionDirectPurchase));
        await Portal.GetProperty<bool>(nameof(Portal.CanSearchPublic));
        await Portal.GetProperty<bool>(nameof(Portal.CanShareBingPublic));
        await Portal.GetProperty<bool>(nameof(Portal.CanSharePublic));
        await Portal.GetProperty<bool>(nameof(Portal.CanSignInArcGIS));
        await Portal.GetProperty<bool>(nameof(Portal.CanSignInIDP));
        await Portal.GetProperty<string>(nameof(Portal.ColorSetsGroupQuery));
        await Portal.GetProperty<bool>(nameof(Portal.CommentsEnabled));
        await Portal.GetProperty<DateTime>(nameof(Portal.Created));
        await Portal.GetProperty<string>(nameof(Portal.Culture));
        await Portal.GetProperty<string>(nameof(Portal.CustomBaseUrl));
        await Portal.GetProperty<Extent>(nameof(Portal.DefaultExtent));
        await Portal.GetProperty<string>(nameof(Portal.Description));
        await Portal.GetProperty<string>(nameof(Portal.DevBasemapGalleryGroupQuery));
        await Portal.GetProperty<bool>(nameof(Portal.EueiEnabled));
        await Portal.GetProperty<IReadOnlyList<PortalFeaturedGroups>>(nameof(Portal.FeaturedGroups));
        await Portal.GetProperty<string>(nameof(Portal.FeaturedItemsGroupQuery));
        await Portal.GetProperty<string>(nameof(Portal.GalleryTemplatesGroupQuery));
        await Portal.GetProperty<bool>(nameof(Portal.HasCategorySchema));
        await Portal.GetProperty<string>(nameof(Portal.HelperServices));
        await Portal.GetProperty<string>(nameof(Portal.HomePageFeaturedContent));
        await Portal.GetProperty<int>(nameof(Portal.HomePageFeaturedContentCount));
        await Portal.GetProperty<double>(nameof(Portal.HttpPort));
        await Portal.GetProperty<double>(nameof(Portal.HttpsPort));
        await Portal.GetProperty<string>(nameof(Portal.IpCntryCode));
        await Portal.GetProperty<bool>(nameof(Portal.IsOrganization));
        await Portal.GetProperty<bool>(nameof(Portal.IsPortal));
        await Portal.GetProperty<bool>(nameof(Portal.IsReadOnly));
        await Portal.GetProperty<string>(nameof(Portal.LayerTemplatesGroupQuery));
        await Portal.GetProperty<bool>(nameof(Portal.Loaded));
        await Portal.GetProperty<double>(nameof(Portal.MaxTokenExpirationMinutes));
        await Portal.GetProperty<DateTime>(nameof(Portal.Modified));
        await Portal.GetProperty<string>(nameof(Portal.Name));
        await Portal.GetProperty<string>(nameof(Portal.PortalHostname));
        await Portal.GetProperty<string>(nameof(Portal.PortalId));
        await Portal.GetProperty<PortalMode>(nameof(Portal.PortalMode));
        await Portal.GetProperty<string>(nameof(Portal.PortalProperties));
        await Portal.GetProperty<bool>(nameof(Portal.RecycleBinEnabled));
        await Portal.GetProperty<string>(nameof(Portal.Region));
        await Portal.GetProperty<string>(nameof(Portal.RestUrl));
        await Portal.GetProperty<IReadOnlyList<string>>(nameof(Portal.RotatorPanels));
        await Portal.GetProperty<bool>(nameof(Portal.ShowHomePageDescription));
        await Portal.GetProperty<string>(nameof(Portal.SourceJSON));
        await Portal.GetProperty<bool>(nameof(Portal.SupportsHostedServices));
        await Portal.GetProperty<string>(nameof(Portal.SymbolSetsGroupQuery));
        await Portal.GetProperty<string>(nameof(Portal.TemplatesGroupQuery));
        await Portal.GetProperty<string>(nameof(Portal.ThumbnailUrl));
        await Portal.GetProperty<PortalUnits>(nameof(Portal.Units));
        await Portal.GetProperty<string>(nameof(Portal.Url));
        await Portal.GetProperty<string>(nameof(Portal.UrlKey));
        await Portal.GetProperty<bool>(nameof(Portal.Use3dBasemaps));
        await Portal.GetProperty<bool>(nameof(Portal.UseStandardizedQuery));
        await Portal.GetProperty<bool>(nameof(Portal.UseVectorBasemaps));
        await Portal.GetProperty<string>(nameof(Portal.VectorBasemapGalleryGroupQuery));
        return Portal;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PortalItemId property.
    /// </summary>
    public async Task<string?> GetPortalItemId()
    {
        if (CoreJsModule is null)
        {
            return PortalItemId;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return PortalItemId;
        }

        // get the property value
#pragma warning disable BL0005
        PortalItemId = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "portalItemId");
#pragma warning restore BL0005
         ModifiedParameters[nameof(PortalItemId)] = PortalItemId;
        return PortalItemId;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Screenshots property.
    /// </summary>
    public async Task<IReadOnlyList<string>?> GetScreenshots()
    {
        if (CoreJsModule is null)
        {
            return Screenshots;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Screenshots;
        }

        // get the property value
#pragma warning disable BL0005
        Screenshots = await CoreJsModule!.InvokeAsync<IReadOnlyList<string>?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "screenshots");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Screenshots)] = Screenshots;
        return Screenshots;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Size property.
    /// </summary>
    public async Task<int?> GetSize()
    {
        if (CoreJsModule is null)
        {
            return Size;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Size;
        }

        // get the property value
#pragma warning disable BL0005
        Size = await CoreJsModule!.InvokeAsync<int>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "size");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Size)] = Size;
        return Size;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Snippet property.
    /// </summary>
    public async Task<string?> GetSnippet()
    {
        if (CoreJsModule is null)
        {
            return Snippet;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Snippet;
        }

        // get the property value
#pragma warning disable BL0005
        Snippet = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "snippet");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Snippet)] = Snippet;
        return Snippet;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SourceJSON property.
    /// </summary>
    public async Task<string?> GetSourceJSON()
    {
        if (CoreJsModule is null)
        {
            return SourceJSON;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return SourceJSON;
        }

        // get the property value
#pragma warning disable BL0005
        SourceJSON = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "sourceJSON");
#pragma warning restore BL0005
         ModifiedParameters[nameof(SourceJSON)] = SourceJSON;
        return SourceJSON;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Tags property.
    /// </summary>
    public async Task<IReadOnlyList<string>?> GetTags()
    {
        if (CoreJsModule is null)
        {
            return Tags;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Tags;
        }

        // get the property value
#pragma warning disable BL0005
        Tags = await CoreJsModule!.InvokeAsync<IReadOnlyList<string>?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "tags");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Tags)] = Tags;
        return Tags;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ThumbnailUrl property.
    /// </summary>
    public async Task<string?> GetThumbnailUrl()
    {
        if (CoreJsModule is null)
        {
            return ThumbnailUrl;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ThumbnailUrl;
        }

        // get the property value
#pragma warning disable BL0005
        ThumbnailUrl = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "thumbnailUrl");
#pragma warning restore BL0005
         ModifiedParameters[nameof(ThumbnailUrl)] = ThumbnailUrl;
        return ThumbnailUrl;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Title property.
    /// </summary>
    public async Task<string?> GetTitle()
    {
        if (CoreJsModule is null)
        {
            return Title;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Title;
        }

        // get the property value
#pragma warning disable BL0005
        Title = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "title");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Title)] = Title;
        return Title;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the TypeKeywords property.
    /// </summary>
    public async Task<IReadOnlyList<string>?> GetTypeKeywords()
    {
        if (CoreJsModule is null)
        {
            return TypeKeywords;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return TypeKeywords;
        }

        // get the property value
#pragma warning disable BL0005
        TypeKeywords = await CoreJsModule!.InvokeAsync<IReadOnlyList<string>?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "typeKeywords");
#pragma warning restore BL0005
         ModifiedParameters[nameof(TypeKeywords)] = TypeKeywords;
        return TypeKeywords;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Url property.
    /// </summary>
    public async Task<string?> GetUrl()
    {
        if (CoreJsModule is null)
        {
            return Url;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Url;
        }

        // get the property value
#pragma warning disable BL0005
        Url = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "url");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Url)] = Url;
        return Url;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Access property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAccess(PortalItemAccess value)
    {
#pragma warning disable BL0005
        Access = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Access)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "access", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the AccessInformation property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAccessInformation(string value)
    {
#pragma warning disable BL0005
        AccessInformation = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(AccessInformation)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "accessInformation", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ApiKey property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetApiKey(string value)
    {
#pragma warning disable BL0005
        ApiKey = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ApiKey)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "apiKey", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the AvgRating property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAvgRating(double value)
    {
#pragma warning disable BL0005
        AvgRating = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(AvgRating)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "avgRating", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Categories property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCategories(IReadOnlyList<string> value)
    {
#pragma warning disable BL0005
        Categories = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Categories)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "categories", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Created property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCreated(DateTime value)
    {
#pragma warning disable BL0005
        Created = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Created)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "created", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Culture property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCulture(string value)
    {
#pragma warning disable BL0005
        Culture = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Culture)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "culture", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Description property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDescription(string value)
    {
#pragma warning disable BL0005
        Description = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Description)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "description", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Extent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetExtent(Extent value)
    {
#pragma warning disable BL0005
        Extent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Extent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "extent", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the GroupCategories property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetGroupCategories(IReadOnlyList<string> value)
    {
#pragma warning disable BL0005
        GroupCategories = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(GroupCategories)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "groupCategories", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LicenseInfo property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLicenseInfo(string value)
    {
#pragma warning disable BL0005
        LicenseInfo = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LicenseInfo)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "licenseInfo", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Modified property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetModified(DateTime value)
    {
#pragma warning disable BL0005
        Modified = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Modified)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "modified", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Name property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetName(string value)
    {
#pragma warning disable BL0005
        Name = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Name)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "name", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the NumComments property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetNumComments(double value)
    {
#pragma warning disable BL0005
        NumComments = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(NumComments)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "numComments", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the NumRatings property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetNumRatings(double value)
    {
#pragma warning disable BL0005
        NumRatings = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(NumRatings)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "numRatings", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the NumViews property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetNumViews(double value)
    {
#pragma warning disable BL0005
        NumViews = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(NumViews)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "numViews", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Owner property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetOwner(string value)
    {
#pragma warning disable BL0005
        Owner = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Owner)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "owner", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the OwnerFolder property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetOwnerFolder(string value)
    {
#pragma warning disable BL0005
        OwnerFolder = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(OwnerFolder)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "ownerFolder", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Portal property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPortal(Portal value)
    {
#pragma warning disable BL0005
        Portal = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Portal)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        Portal.Parent = this;
        Portal.View = View;
        
        if (Portal.JsComponentReference is null)
        {
            // new MapComponent, needs to be built and registered in JS
            // this also calls back to OnJsComponentCreated
            IJSObjectReference jsObjectReference = await CoreJsModule.InvokeAsync<IJSObjectReference>(
                $"buildJsPortal", CancellationTokenSource.Token, 
                    Portal, View?.Id);
            // in case the fallback failed, set this here.
            Portal.JsComponentReference ??= jsObjectReference;
            
            await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
                JsComponentReference, "portal", jsObjectReference);
        }
        else
        {
            // this component has already been registered, but we'll call setProperty to make sure
            // it is attached to the parent
            await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
                JsComponentReference,
                "portal", Portal.JsComponentReference);
        }
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PortalItemId property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPortalItemId(string value)
    {
#pragma warning disable BL0005
        PortalItemId = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PortalItemId)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "portalItemId", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Screenshots property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetScreenshots(IReadOnlyList<string> value)
    {
#pragma warning disable BL0005
        Screenshots = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Screenshots)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "screenshots", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Size property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSize(int value)
    {
#pragma warning disable BL0005
        Size = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Size)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "size", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Snippet property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSnippet(string value)
    {
#pragma warning disable BL0005
        Snippet = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Snippet)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "snippet", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Tags property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTags(IReadOnlyList<string> value)
    {
#pragma warning disable BL0005
        Tags = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Tags)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "tags", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Title property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTitle(string value)
    {
#pragma warning disable BL0005
        Title = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Title)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "title", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the TypeKeywords property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTypeKeywords(IReadOnlyList<string> value)
    {
#pragma warning disable BL0005
        TypeKeywords = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(TypeKeywords)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "typeKeywords", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Url property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUrl(string value)
    {
#pragma warning disable BL0005
        Url = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Url)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "url", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the Categories property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToCategories(params string[] values)
    {
        string[] join = Categories is null
            ? values
            : [..Categories, ..values];
        await SetCategories(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the GroupCategories property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToGroupCategories(params string[] values)
    {
        string[] join = GroupCategories is null
            ? values
            : [..GroupCategories, ..values];
        await SetGroupCategories(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the Screenshots property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToScreenshots(params string[] values)
    {
        string[] join = Screenshots is null
            ? values
            : [..Screenshots, ..values];
        await SetScreenshots(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the Tags property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToTags(params string[] values)
    {
        string[] join = Tags is null
            ? values
            : [..Tags, ..values];
        await SetTags(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the TypeKeywords property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToTypeKeywords(params string[] values)
    {
        string[] join = TypeKeywords is null
            ? values
            : [..TypeKeywords, ..values];
        await SetTypeKeywords(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the Categories property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromCategories(params string[] values)
    {
        if (Categories is null)
        {
            return;
        }
        await SetCategories(Categories.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the GroupCategories property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromGroupCategories(params string[] values)
    {
        if (GroupCategories is null)
        {
            return;
        }
        await SetGroupCategories(GroupCategories.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the Screenshots property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromScreenshots(params string[] values)
    {
        if (Screenshots is null)
        {
            return;
        }
        await SetScreenshots(Screenshots.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the Tags property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromTags(params string[] values)
    {
        if (Tags is null)
        {
            return;
        }
        await SetTags(Tags.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the TypeKeywords property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromTypeKeywords(params string[] values)
    {
        if (TypeKeywords is null)
        {
            return;
        }
        await SetTypeKeywords(TypeKeywords.Except(values).ToArray());
    }
    
#endregion


#region Public Methods

    /// <summary>
    ///     Adds a rating to an accessible item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#addRating">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="rating">
    ///     Rating to set for the item. Rating must be a number between 1.0 and 5.0.
    /// </param>
    [ArcGISMethod]
    public async Task<PortalRating?> AddRating(double rating)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<PortalRating?>(
            "addRating", 
            CancellationTokenSource.Token,
            rating);
    }
    
    /// <summary>
    ///     Adds a new <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItemResource.html">resource</a> to the portal item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#addResource">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="resource">
    ///     The resource to add to the portal item.
    /// </param>
    /// <param name="content">
    ///     The resource content.
    /// </param>
    /// <param name="options">
    ///     An object wih the following properties.
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<string?> AddResource(PortalItemResource resource,
        Stream content,
        PortalItemAddResourceOptions options,
        CancellationToken cancellationToken = default)
    {
        if (JsComponentReference is null) return null;
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        string? result = await JsComponentReference!.InvokeAsync<string?>(
            "addResource", 
            CancellationTokenSource.Token,
            resource,
            content,
            new { access = options.Access, signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     Deletes a rating for the specified item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#deleteRating">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task<string?> DeleteRating()
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<string?>(
            "deleteRating", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     Requests a PortalItem in the format specified in `responseType`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#fetchData">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="responseType">
    ///     The format of the response.
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<string?> FetchData(ResponseType responseType,
        CancellationToken cancellationToken = default)
    {
        if (JsComponentReference is null) return null;
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        string? result = await JsComponentReference!.InvokeAsync<string?>(
            "fetchData", 
            CancellationTokenSource.Token,
            responseType,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     Returns the rating (if any) given to the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#fetchRating">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<PortalRating?> FetchRating(CancellationToken cancellationToken = default)
    {
        if (JsComponentReference is null) return null;
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        PortalRating? result = await JsComponentReference!.InvokeAsync<PortalRating?>(
            "fetchRating", 
            CancellationTokenSource.Token,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     Gets all the related items of a certain relationship type for the portal item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#fetchRelatedItems">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="relationshipType">
    ///     The type of relationship between the two items.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#fetchRelatedItems">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="direction">
    ///     The direction of the relationship.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#fetchRelatedItems">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<PortalItem[]?> FetchRelatedItems(string relationshipType,
        RelationshipDirection direction,
        CancellationToken cancellationToken = default)
    {
        if (JsComponentReference is null) return null;
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        PortalItem[]? result = await JsComponentReference!.InvokeAsync<PortalItem[]?>(
            "fetchRelatedItems", 
            CancellationTokenSource.Token,
            new { relationshipType, direction },
            direction,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     Retrieves references to all the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItemResource.html">portal item resources</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#fetchResources">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="num">
    ///     The maximum number of results to be included in the result set response.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#FetchResourcesParams">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="start">
    ///     The index of the first entry in the result set response.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#FetchResourcesParams">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="sortOrder">
    ///     The order in which to sort the results.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#FetchResourcesParams">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="sortField">
    ///     A field to sort the results.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#FetchResourcesParams">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<FetchResourcesResult?> FetchResources(double num,
        double start,
        PortalQuerySortOrder sortOrder,
        SortField sortField,
        CancellationToken cancellationToken = default)
    {
        if (JsComponentReference is null) return null;
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        FetchResourcesResult? result = await JsComponentReference!.InvokeAsync<FetchResourcesResult?>(
            "fetchResources", 
            CancellationTokenSource.Token,
            new { num, start, sortOrder, sortField },
            start,
            sortOrder,
            sortField,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     Get the URL to the thumbnail image for the item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#getThumbnailUrl">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="width">
    ///     The desired image width.
    /// </param>
    [ArcGISMethod]
    public async Task<string?> GetThumbnailUrl(int width)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<string?>(
            "getThumbnailUrl", 
            CancellationTokenSource.Token,
            width);
    }
    
    /// <summary>
    ///     Reloads a loaded item's properties from the portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#reload">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task<PortalItem?> Reload()
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<PortalItem?>(
            "reload", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     Removes all the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItemResource.html">resources</a> from the portal item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#removeAllResources">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<string?> RemoveAllResources(CancellationToken cancellationToken = default)
    {
        if (JsComponentReference is null) return null;
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        string? result = await JsComponentReference!.InvokeAsync<string?>(
            "removeAllResources", 
            CancellationTokenSource.Token,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     Removes a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItemResource.html">resource</a> from the portal item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#removeResource">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="resource">
    ///     The resource to remove from the portal item.
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<string?> RemoveResource(PortalItemResource resource,
        CancellationToken cancellationToken = default)
    {
        if (JsComponentReference is null) return null;
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        string? result = await JsComponentReference!.InvokeAsync<string?>(
            "removeResource", 
            CancellationTokenSource.Token,
            resource,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     Updates the item's properties to the portal, and optionally its data.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#update">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="data">
    ///     Optional.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#update">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    [ArcGISMethod]
    public async Task<PortalItem?> Update(string data)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<PortalItem?>(
            "update", 
            CancellationTokenSource.Token,
            new { data });
    }
    
    /// <summary>
    ///     Updates the item's thumbnail on the portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#updateThumbnail">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="thumbnail">
    ///     A URL, Data URI, Blob, or File.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#updateThumbnail">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="filename">
    ///     The file name used for the thumbnail in <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#thumbnailUrl">thumbnailUrl</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html#updateThumbnail">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    [ArcGISMethod]
    public async Task<PortalItem?> UpdateThumbnail(Stream thumbnail,
        string filename)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<PortalItem?>(
            "updateThumbnail", 
            CancellationTokenSource.Token,
            new { thumbnail, filename },
            filename);
    }
    
#endregion




    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case PortalItemApplicationProxies applicationProxies:
                ApplicationProxies ??= [];
                if (!ApplicationProxies.Contains(applicationProxies))
                {
                    ApplicationProxies = [..ApplicationProxies, applicationProxies];
                    
                    ModifiedParameters[nameof(ApplicationProxies)] = ApplicationProxies;
                }
                
                return true;
            case Portal portal:
                if (portal != Portal)
                {
                    Portal = portal;
                    
                    ModifiedParameters[nameof(Portal)] = Portal;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case PortalItemApplicationProxies applicationProxies:
                ApplicationProxies = ApplicationProxies?.Where(a => a != applicationProxies).ToList();
                
                ModifiedParameters[nameof(ApplicationProxies)] = ApplicationProxies;
                return true;
            case Portal _:
                Portal = null;
                
                ModifiedParameters[nameof(Portal)] = Portal;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    internal override void ValidateRequiredGeneratedChildren()
    {
    
        if (Id is null)
        {
            throw new MissingRequiredChildElementException(nameof(PortalItem), nameof(Id));
        }
        if (ApplicationProxies is not null)
        {
            foreach (PortalItemApplicationProxies child in ApplicationProxies)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        Portal?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
