// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    The material determines how a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshComponent.html">MeshComponent</a> is visualized.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class MeshMaterial : IMeshComponentMaterial
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public MeshMaterial()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="alphaCutoff">
    ///     Specifies how transparency on the object is handled.
    ///     default 0.5
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#alphaCutoff">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="alphaMode">
    ///     Specifies how transparency on the object is handled.
    ///     default "auto"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#alphaMode">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="color">
    ///     Specifies a single, uniform color for the mesh component.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#color">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="colorTexture">
    ///     Specifies a texture from which to get color information.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#colorTexture">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="colorTextureTransform">
    ///     A transformation of UV mesh coordinates used to sample the color texture.
    ///     default undefined
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#colorTextureTransform">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="doubleSided">
    ///     Specifies whether both sides of each triangle are displayed, or only the front sides.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#doubleSided">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="normalTexture">
    ///     Specifies a texture from which to get normal information.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#normalTexture">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="normalTextureTransform">
    ///     A transformation of UV mesh coordinates used to sample the normal texture.
    ///     default undefined
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#normalTextureTransform">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public MeshMaterial(
        double? alphaCutoff = null,
        AlphaMode? alphaMode = null,
        MapColor? color = null,
        MeshTexture? colorTexture = null,
        MeshTextureTransform? colorTextureTransform = null,
        bool? doubleSided = null,
        MeshTexture? normalTexture = null,
        MeshTextureTransform? normalTextureTransform = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        AlphaCutoff = alphaCutoff;
        AlphaMode = alphaMode;
        Color = color;
        ColorTexture = colorTexture;
        ColorTextureTransform = colorTextureTransform;
        DoubleSided = doubleSided;
        NormalTexture = normalTexture;
        NormalTextureTransform = normalTextureTransform;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Specifies how transparency on the object is handled.
    ///     default 0.5
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#alphaCutoff">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? AlphaCutoff { get; set; }
    
    /// <summary>
    ///     Specifies how transparency on the object is handled.
    ///     default "auto"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#alphaMode">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public AlphaMode? AlphaMode { get; set; }
    
    /// <summary>
    ///     Specifies a single, uniform color for the mesh component.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#color">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public MapColor? Color { get; set; }
    
    /// <summary>
    ///     Specifies a texture from which to get color information.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#colorTexture">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public MeshTexture? ColorTexture { get; set; }
    
    /// <summary>
    ///     A transformation of UV mesh coordinates used to sample the color texture.
    ///     default undefined
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#colorTextureTransform">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public MeshTextureTransform? ColorTextureTransform { get; set; }
    
    /// <summary>
    ///     Specifies whether both sides of each triangle are displayed, or only the front sides.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#doubleSided">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? DoubleSided { get; set; }
    
    /// <summary>
    ///     Specifies a texture from which to get normal information.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#normalTexture">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public MeshTexture? NormalTexture { get; set; }
    
    /// <summary>
    ///     A transformation of UV mesh coordinates used to sample the normal texture.
    ///     default undefined
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-support-MeshMaterial.html#normalTextureTransform">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public MeshTextureTransform? NormalTextureTransform { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the AlphaCutoff property.
    /// </summary>
    public async Task<double?> GetAlphaCutoff()
    {
        if (CoreJsModule is null)
        {
            return AlphaCutoff;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return AlphaCutoff;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "alphaCutoff");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             AlphaCutoff = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(AlphaCutoff)] = AlphaCutoff;
        }
         
        return AlphaCutoff;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the AlphaMode property.
    /// </summary>
    public async Task<AlphaMode?> GetAlphaMode()
    {
        if (CoreJsModule is null)
        {
            return AlphaMode;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return AlphaMode;
        }

        // get the property value
        JsNullableEnumWrapper<AlphaMode>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<AlphaMode>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "alphaMode");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             AlphaMode = (AlphaMode)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(AlphaMode)] = AlphaMode;
        }
         
        return AlphaMode;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Color property.
    /// </summary>
    public async Task<MapColor?> GetColor()
    {
        if (CoreJsModule is null)
        {
            return Color;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Color;
        }

        // get the property value
        MapColor? result = await JsComponentReference!.InvokeAsync<MapColor?>("getProperty",
            CancellationTokenSource.Token, "color");
        if (result is not null)
        {
#pragma warning disable BL0005
             Color = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Color)] = Color;
        }
         
        return Color;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ColorTexture property.
    /// </summary>
    public async Task<MeshTexture?> GetColorTexture()
    {
        if (CoreJsModule is null)
        {
            return ColorTexture;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ColorTexture;
        }

        // get the property value
        MeshTexture? result = await JsComponentReference!.InvokeAsync<MeshTexture?>("getProperty",
            CancellationTokenSource.Token, "colorTexture");
        if (result is not null)
        {
#pragma warning disable BL0005
             ColorTexture = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ColorTexture)] = ColorTexture;
        }
         
        return ColorTexture;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ColorTextureTransform property.
    /// </summary>
    public async Task<MeshTextureTransform?> GetColorTextureTransform()
    {
        if (CoreJsModule is null)
        {
            return ColorTextureTransform;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ColorTextureTransform;
        }

        // get the property value
        MeshTextureTransform? result = await JsComponentReference!.InvokeAsync<MeshTextureTransform?>("getProperty",
            CancellationTokenSource.Token, "colorTextureTransform");
        if (result is not null)
        {
#pragma warning disable BL0005
             ColorTextureTransform = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ColorTextureTransform)] = ColorTextureTransform;
        }
         
        return ColorTextureTransform;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DoubleSided property.
    /// </summary>
    public async Task<bool?> GetDoubleSided()
    {
        if (CoreJsModule is null)
        {
            return DoubleSided;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return DoubleSided;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "doubleSided");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             DoubleSided = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DoubleSided)] = DoubleSided;
        }
         
        return DoubleSided;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the NormalTexture property.
    /// </summary>
    public async Task<MeshTexture?> GetNormalTexture()
    {
        if (CoreJsModule is null)
        {
            return NormalTexture;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return NormalTexture;
        }

        // get the property value
        MeshTexture? result = await JsComponentReference!.InvokeAsync<MeshTexture?>("getProperty",
            CancellationTokenSource.Token, "normalTexture");
        if (result is not null)
        {
#pragma warning disable BL0005
             NormalTexture = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(NormalTexture)] = NormalTexture;
        }
         
        return NormalTexture;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the NormalTextureTransform property.
    /// </summary>
    public async Task<MeshTextureTransform?> GetNormalTextureTransform()
    {
        if (CoreJsModule is null)
        {
            return NormalTextureTransform;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return NormalTextureTransform;
        }

        // get the property value
        MeshTextureTransform? result = await JsComponentReference!.InvokeAsync<MeshTextureTransform?>("getProperty",
            CancellationTokenSource.Token, "normalTextureTransform");
        if (result is not null)
        {
#pragma warning disable BL0005
             NormalTextureTransform = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(NormalTextureTransform)] = NormalTextureTransform;
        }
         
        return NormalTextureTransform;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the AlphaCutoff property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAlphaCutoff(double? value)
    {
#pragma warning disable BL0005
        AlphaCutoff = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(AlphaCutoff)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "alphaCutoff", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the AlphaMode property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAlphaMode(AlphaMode? value)
    {
#pragma warning disable BL0005
        AlphaMode = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(AlphaMode)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "alphaMode", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Color property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetColor(MapColor? value)
    {
#pragma warning disable BL0005
        Color = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Color)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setColor", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ColorTexture property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetColorTexture(MeshTexture? value)
    {
#pragma warning disable BL0005
        ColorTexture = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ColorTexture)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setColorTexture", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ColorTextureTransform property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetColorTextureTransform(MeshTextureTransform? value)
    {
#pragma warning disable BL0005
        ColorTextureTransform = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ColorTextureTransform)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setColorTextureTransform", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DoubleSided property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDoubleSided(bool? value)
    {
#pragma warning disable BL0005
        DoubleSided = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DoubleSided)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "doubleSided", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the NormalTexture property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetNormalTexture(MeshTexture? value)
    {
#pragma warning disable BL0005
        NormalTexture = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(NormalTexture)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setNormalTexture", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the NormalTextureTransform property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetNormalTextureTransform(MeshTextureTransform? value)
    {
#pragma warning disable BL0005
        NormalTextureTransform = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(NormalTextureTransform)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setNormalTextureTransform", 
            CancellationTokenSource.Token, value);
    }
    
#endregion

}
