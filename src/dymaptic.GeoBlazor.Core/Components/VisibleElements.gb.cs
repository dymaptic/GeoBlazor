// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VisibleElements.html">GeoBlazor Docs</a>
///     The elements that are displayed within the tooltip while sketching and editing.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-sketch-SketchTooltipOptions.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class VisibleElements : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public VisibleElements()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="area">
    ///     When set to `false`, the area is not shown in the tooltip.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-sketch-SketchTooltipOptions.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="coordinates">
    ///     When set to `false`, the coordinate is not shown in the tooltip.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-sketch-SketchTooltipOptions.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="direction">
    ///     When set to `false`, the direction (or deflection angle) is not shown in the tooltip.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-sketch-SketchTooltipOptions.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="distance">
    ///     When set to `false`, the distance is not shown in the tooltip.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-sketch-SketchTooltipOptions.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="elevation">
    ///     When set to `false`, the elevation is not shown in the tooltip.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-sketch-SketchTooltipOptions.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="header">
    ///     When set to `false`, the header at the top of the tooltip is not shown, when in input mode.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-sketch-SketchTooltipOptions.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="helpMessage">
    ///     When set to `false`, the help message at the bottom of the tooltip is not shown.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-sketch-SketchTooltipOptions.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="orientation">
    ///     When set to `false`, the orientation is not shown in the tooltip.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-sketch-SketchTooltipOptions.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="radius">
    ///     When set to `false`, the radius is not shown in the tooltip.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-sketch-SketchTooltipOptions.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="rotation">
    ///     When set to `false`, the rotation is not shown in the tooltip.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-sketch-SketchTooltipOptions.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="scale">
    ///     When set to `false`, the scale is not shown in the tooltip.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-sketch-SketchTooltipOptions.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="size">
    ///     When set to `false`, the size is not shown in the tooltip.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-sketch-SketchTooltipOptions.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="totalLength">
    ///     When set to `false`, the total length is not shown in the tooltip.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-sketch-SketchTooltipOptions.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public VisibleElements(
        bool? area = null,
        bool? coordinates = null,
        bool? direction = null,
        bool? distance = null,
        bool? elevation = null,
        bool? header = null,
        bool? helpMessage = null,
        bool? orientation = null,
        bool? radius = null,
        bool? rotation = null,
        bool? scale = null,
        bool? size = null,
        bool? totalLength = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Area = area;
        Coordinates = coordinates;
        Direction = direction;
        Distance = distance;
        Elevation = elevation;
        Header = header;
        HelpMessage = helpMessage;
        Orientation = orientation;
        Radius = radius;
        Rotation = rotation;
        Scale = scale;
        Size = size;
        TotalLength = totalLength;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VisibleElements.html#visibleelementsarea-property">GeoBlazor Docs</a>
    ///     When set to `false`, the area is not shown in the tooltip.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-sketch-SketchTooltipOptions.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Area { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VisibleElements.html#visibleelementscoordinates-property">GeoBlazor Docs</a>
    ///     When set to `false`, the coordinate is not shown in the tooltip.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-sketch-SketchTooltipOptions.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Coordinates { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VisibleElements.html#visibleelementsdirection-property">GeoBlazor Docs</a>
    ///     When set to `false`, the direction (or deflection angle) is not shown in the tooltip.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-sketch-SketchTooltipOptions.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Direction { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VisibleElements.html#visibleelementsdistance-property">GeoBlazor Docs</a>
    ///     When set to `false`, the distance is not shown in the tooltip.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-sketch-SketchTooltipOptions.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Distance { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VisibleElements.html#visibleelementselevation-property">GeoBlazor Docs</a>
    ///     When set to `false`, the elevation is not shown in the tooltip.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-sketch-SketchTooltipOptions.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Elevation { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VisibleElements.html#visibleelementsheader-property">GeoBlazor Docs</a>
    ///     When set to `false`, the header at the top of the tooltip is not shown, when in input mode.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-sketch-SketchTooltipOptions.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Header { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VisibleElements.html#visibleelementshelpmessage-property">GeoBlazor Docs</a>
    ///     When set to `false`, the help message at the bottom of the tooltip is not shown.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-sketch-SketchTooltipOptions.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? HelpMessage { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VisibleElements.html#visibleelementsorientation-property">GeoBlazor Docs</a>
    ///     When set to `false`, the orientation is not shown in the tooltip.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-sketch-SketchTooltipOptions.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Orientation { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VisibleElements.html#visibleelementsradius-property">GeoBlazor Docs</a>
    ///     When set to `false`, the radius is not shown in the tooltip.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-sketch-SketchTooltipOptions.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Radius { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VisibleElements.html#visibleelementsrotation-property">GeoBlazor Docs</a>
    ///     When set to `false`, the rotation is not shown in the tooltip.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-sketch-SketchTooltipOptions.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Rotation { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VisibleElements.html#visibleelementsscale-property">GeoBlazor Docs</a>
    ///     When set to `false`, the scale is not shown in the tooltip.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-sketch-SketchTooltipOptions.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Scale { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VisibleElements.html#visibleelementssize-property">GeoBlazor Docs</a>
    ///     When set to `false`, the size is not shown in the tooltip.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-sketch-SketchTooltipOptions.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Size { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VisibleElements.html#visibleelementstotallength-property">GeoBlazor Docs</a>
    ///     When set to `false`, the total length is not shown in the tooltip.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-interactive-sketch-SketchTooltipOptions.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? TotalLength { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Area property.
    /// </summary>
    public async Task<bool?> GetArea()
    {
        if (CoreJsModule is null)
        {
            return Area;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Area;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "area");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Area = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Area)] = Area;
        }
         
        return Area;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Coordinates property.
    /// </summary>
    public async Task<bool?> GetCoordinates()
    {
        if (CoreJsModule is null)
        {
            return Coordinates;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Coordinates;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "coordinates");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Coordinates = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Coordinates)] = Coordinates;
        }
         
        return Coordinates;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Direction property.
    /// </summary>
    public async Task<bool?> GetDirection()
    {
        if (CoreJsModule is null)
        {
            return Direction;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Direction;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "direction");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Direction = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Direction)] = Direction;
        }
         
        return Direction;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Distance property.
    /// </summary>
    public async Task<bool?> GetDistance()
    {
        if (CoreJsModule is null)
        {
            return Distance;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Distance;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "distance");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Distance = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Distance)] = Distance;
        }
         
        return Distance;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Elevation property.
    /// </summary>
    public async Task<bool?> GetElevation()
    {
        if (CoreJsModule is null)
        {
            return Elevation;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Elevation;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "elevation");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Elevation = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Elevation)] = Elevation;
        }
         
        return Elevation;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Header property.
    /// </summary>
    public async Task<bool?> GetHeader()
    {
        if (CoreJsModule is null)
        {
            return Header;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Header;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "header");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Header = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Header)] = Header;
        }
         
        return Header;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HelpMessage property.
    /// </summary>
    public async Task<bool?> GetHelpMessage()
    {
        if (CoreJsModule is null)
        {
            return HelpMessage;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return HelpMessage;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "helpMessage");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             HelpMessage = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HelpMessage)] = HelpMessage;
        }
         
        return HelpMessage;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Orientation property.
    /// </summary>
    public async Task<bool?> GetOrientation()
    {
        if (CoreJsModule is null)
        {
            return Orientation;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Orientation;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "orientation");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Orientation = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Orientation)] = Orientation;
        }
         
        return Orientation;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Radius property.
    /// </summary>
    public async Task<bool?> GetRadius()
    {
        if (CoreJsModule is null)
        {
            return Radius;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Radius;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "radius");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Radius = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Radius)] = Radius;
        }
         
        return Radius;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Rotation property.
    /// </summary>
    public async Task<bool?> GetRotation()
    {
        if (CoreJsModule is null)
        {
            return Rotation;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Rotation;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "rotation");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Rotation = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Rotation)] = Rotation;
        }
         
        return Rotation;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Scale property.
    /// </summary>
    public async Task<bool?> GetScale()
    {
        if (CoreJsModule is null)
        {
            return Scale;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Scale;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "scale");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Scale = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Scale)] = Scale;
        }
         
        return Scale;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Size property.
    /// </summary>
    public async Task<bool?> GetSize()
    {
        if (CoreJsModule is null)
        {
            return Size;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Size;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "size");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Size = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Size)] = Size;
        }
         
        return Size;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the TotalLength property.
    /// </summary>
    public async Task<bool?> GetTotalLength()
    {
        if (CoreJsModule is null)
        {
            return TotalLength;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return TotalLength;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "totalLength");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             TotalLength = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(TotalLength)] = TotalLength;
        }
         
        return TotalLength;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Area property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetArea(bool? value)
    {
#pragma warning disable BL0005
        Area = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Area)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "area", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Coordinates property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCoordinates(bool? value)
    {
#pragma warning disable BL0005
        Coordinates = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Coordinates)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "coordinates", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Direction property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDirection(bool? value)
    {
#pragma warning disable BL0005
        Direction = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Direction)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "direction", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Distance property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDistance(bool? value)
    {
#pragma warning disable BL0005
        Distance = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Distance)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "distance", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Elevation property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetElevation(bool? value)
    {
#pragma warning disable BL0005
        Elevation = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Elevation)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "elevation", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Header property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHeader(bool? value)
    {
#pragma warning disable BL0005
        Header = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Header)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "header", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HelpMessage property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHelpMessage(bool? value)
    {
#pragma warning disable BL0005
        HelpMessage = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HelpMessage)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "helpMessage", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Orientation property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetOrientation(bool? value)
    {
#pragma warning disable BL0005
        Orientation = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Orientation)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "orientation", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Radius property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRadius(bool? value)
    {
#pragma warning disable BL0005
        Radius = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Radius)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "radius", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Rotation property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRotation(bool? value)
    {
#pragma warning disable BL0005
        Rotation = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Rotation)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "rotation", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Scale property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetScale(bool? value)
    {
#pragma warning disable BL0005
        Scale = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Scale)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "scale", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Size property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSize(bool? value)
    {
#pragma warning disable BL0005
        Size = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Size)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "size", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the TotalLength property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTotalLength(bool? value)
    {
#pragma warning disable BL0005
        TotalLength = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(TotalLength)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "totalLength", value);
    }
    
#endregion

}
