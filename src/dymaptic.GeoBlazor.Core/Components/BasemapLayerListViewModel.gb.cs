// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.html">GeoBlazor Docs</a>
///     Provides logic for the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html">BasemapLayerList</a> widget.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList-BasemapLayerListViewModel.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class BasemapLayerListViewModel
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public BasemapLayerListViewModel()
    {
    }

#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.html#basemaplayerlistviewmodelbaseitems-property">GeoBlazor Docs</a>
    ///     A collection of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html">ListItem</a>s representing the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Basemap.html#baseLayers">baseLayers</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList-BasemapLayerListViewModel.html#baseItems">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public IReadOnlyList<ListItem>? BaseItems { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.html#basemaplayerlistviewmodelbasemaptitle-property">GeoBlazor Docs</a>
    ///     The current basemap's title.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList-BasemapLayerListViewModel.html#basemapTitle">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? BasemapTitle { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.html#basemaplayerlistviewmodelcheckpublishstatusenabled-property">GeoBlazor Docs</a>
    ///     Whether to provide an indication if a layer is being published in the
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList.html">BasemapLayerList</a>.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList-BasemapLayerListViewModel.html#checkPublishStatusEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? CheckPublishStatusEnabled { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.html#basemaplayerlistviewmodellistmodedisabled-property">GeoBlazor Docs</a>
    ///     Specifies whether to ignore the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html#listMode">listMode</a> property of the layers to display all layers.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList-BasemapLayerListViewModel.html#listModeDisabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? ListModeDisabled { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.html#basemaplayerlistviewmodelreferenceitems-property">GeoBlazor Docs</a>
    ///     A collection of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList-ListItem.html">ListItem</a>s representing the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Basemap.html#referenceLayers">referenceLayers</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList-BasemapLayerListViewModel.html#referenceItems">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public IReadOnlyList<ListItem>? ReferenceItems { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.html#basemaplayerlistviewmodelstate-property">GeoBlazor Docs</a>
    ///     The view model's state.
    ///     default "disabled"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList-BasemapLayerListViewModel.html#state">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public ViewModelState? State { get; protected set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the BaseItems property.
    /// </summary>
    public async Task<IReadOnlyList<ListItem>?> GetBaseItems()
    {
        if (CoreJsModule is null)
        {
            return BaseItems;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return BaseItems;
        }

        IReadOnlyList<ListItem>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<ListItem>?>(
            "getBaseItems", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            BaseItems = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(BaseItems)] = BaseItems;
        }
        
        return BaseItems;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the BasemapTitle property.
    /// </summary>
    public async Task<string?> GetBasemapTitle()
    {
        if (CoreJsModule is null)
        {
            return BasemapTitle;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return BasemapTitle;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "basemapTitle");
        if (result is not null)
        {
#pragma warning disable BL0005
             BasemapTitle = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(BasemapTitle)] = BasemapTitle;
        }
         
        return BasemapTitle;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CheckPublishStatusEnabled property.
    /// </summary>
    public async Task<bool?> GetCheckPublishStatusEnabled()
    {
        if (CoreJsModule is null)
        {
            return CheckPublishStatusEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CheckPublishStatusEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "checkPublishStatusEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             CheckPublishStatusEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CheckPublishStatusEnabled)] = CheckPublishStatusEnabled;
        }
         
        return CheckPublishStatusEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ListModeDisabled property.
    /// </summary>
    public async Task<bool?> GetListModeDisabled()
    {
        if (CoreJsModule is null)
        {
            return ListModeDisabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ListModeDisabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "listModeDisabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ListModeDisabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ListModeDisabled)] = ListModeDisabled;
        }
         
        return ListModeDisabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ReferenceItems property.
    /// </summary>
    public async Task<IReadOnlyList<ListItem>?> GetReferenceItems()
    {
        if (CoreJsModule is null)
        {
            return ReferenceItems;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ReferenceItems;
        }

        IReadOnlyList<ListItem>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<ListItem>?>(
            "getReferenceItems", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            ReferenceItems = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(ReferenceItems)] = ReferenceItems;
        }
        
        return ReferenceItems;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the State property.
    /// </summary>
    public async Task<ViewModelState?> GetState()
    {
        if (CoreJsModule is null)
        {
            return State;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return State;
        }

        // get the property value
        JsNullableEnumWrapper<ViewModelState>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<ViewModelState>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "state");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             State = (ViewModelState)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(State)] = State;
        }
         
        return State;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the BasemapTitle property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBasemapTitle(string? value)
    {
#pragma warning disable BL0005
        BasemapTitle = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(BasemapTitle)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "basemapTitle", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CheckPublishStatusEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCheckPublishStatusEnabled(bool? value)
    {
#pragma warning disable BL0005
        CheckPublishStatusEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CheckPublishStatusEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "checkPublishStatusEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ListModeDisabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetListModeDisabled(bool? value)
    {
#pragma warning disable BL0005
        ListModeDisabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ListModeDisabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "listModeDisabled", value);
    }
    
#endregion

#region Public Methods

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.BasemapLayerListViewModel.html#basemaplayerlistviewmodeltriggeraction-method">GeoBlazor Docs</a>
    ///     Triggers the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList-BasemapLayerListViewModel.html#event-trigger-action">trigger-action</a> event and executes
    ///     the given <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-support-actions-ActionButton.html">action</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-support-actions-ActionToggle.html">action toggle</a>.
    ///     param action The action to execute.
    ///     param item An item associated with the action.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapLayerList-BasemapLayerListViewModel.html#triggerAction">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="action">
    ///     The action to execute.
    /// </param>
    /// <param name="item">
    ///     An item associated with the action.
    /// </param>
    [ArcGISMethod]
    public async Task TriggerAction(ActionBase action,
        ListItem item)
    {
        if (JsComponentReference is null) return;
        
        await JsComponentReference!.InvokeVoidAsync(
            "triggerAction", 
            CancellationTokenSource.Token,
            action,
            item);
    }
    
#endregion

}
