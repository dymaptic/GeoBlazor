// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.OrderByInfo.html">GeoBlazor Docs</a>
///     Class that allows you to define the drawing order of features in a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html">MapView</a>.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-OrderByInfo.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class OrderByInfo : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public OrderByInfo()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="field">
    ///     The number or date field whose values will be used to sort features.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-OrderByInfo.html#field">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="order">
    ///     The sort order.
    ///     default "ascending"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-OrderByInfo.html#order">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="valueExpression">
    ///     An <a target="_blank" href="https://developers.arcgis.com/javascript/latest/arcade/">Arcade</a> expression
    ///     following the specification defined by the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/arcade/#feature-sorting">Arcade Feature Z Profile</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-OrderByInfo.html#valueExpression">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public OrderByInfo(
        string? field = null,
        SortOrder? order = null,
        string? valueExpression = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Field = field;
        Order = order;
        ValueExpression = valueExpression;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.OrderByInfo.html#orderbyinfofield-property">GeoBlazor Docs</a>
    ///     The number or date field whose values will be used to sort features.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-OrderByInfo.html#field">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Field { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.OrderByInfo.html#orderbyinfoorder-property">GeoBlazor Docs</a>
    ///     The sort order.
    ///     default "ascending"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-OrderByInfo.html#order">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SortOrder? Order { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.OrderByInfo.html#orderbyinfovalueexpression-property">GeoBlazor Docs</a>
    ///     An <a target="_blank" href="https://developers.arcgis.com/javascript/latest/arcade/">Arcade</a> expression
    ///     following the specification defined by the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/arcade/#feature-sorting">Arcade Feature Z Profile</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-OrderByInfo.html#valueExpression">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? ValueExpression { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Field property.
    /// </summary>
    public async Task<string?> GetField()
    {
        if (CoreJsModule is null)
        {
            return Field;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Field;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "field");
        if (result is not null)
        {
#pragma warning disable BL0005
             Field = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Field)] = Field;
        }
         
        return Field;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Order property.
    /// </summary>
    public async Task<SortOrder?> GetOrder()
    {
        if (CoreJsModule is null)
        {
            return Order;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Order;
        }

        // get the property value
        JsNullableEnumWrapper<SortOrder>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<SortOrder>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "order");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Order = (SortOrder)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Order)] = Order;
        }
         
        return Order;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ValueExpression property.
    /// </summary>
    public async Task<string?> GetValueExpression()
    {
        if (CoreJsModule is null)
        {
            return ValueExpression;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ValueExpression;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "valueExpression");
        if (result is not null)
        {
#pragma warning disable BL0005
             ValueExpression = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ValueExpression)] = ValueExpression;
        }
         
        return ValueExpression;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Field property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetField(string? value)
    {
#pragma warning disable BL0005
        Field = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Field)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "field", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Order property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetOrder(SortOrder? value)
    {
#pragma warning disable BL0005
        Order = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Order)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "order", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ValueExpression property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetValueExpression(string? value)
    {
#pragma warning disable BL0005
        ValueExpression = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ValueExpression)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "valueExpression", value);
    }
    
#endregion

}
