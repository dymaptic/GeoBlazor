// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.WMTSSublayer.html">GeoBlazor Docs</a>
///     Represents a sublayer in a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WMTSLayer.html">WMTSLayer</a>.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-WMTSSublayer.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class WMTSSublayer : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public WMTSSublayer()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="description">
    ///     Description for the WMTS sublayer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-WMTSSublayer.html#description">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="fullExtent">
    ///     The full extent of the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-WMTSSublayer.html#fullExtent">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="imageFormat">
    ///     The map image format (MIME type) to request.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-WMTSSublayer.html#imageFormat">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="imageFormats">
    ///     Supported image formats as retrieved from the GetCapabilities request.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-WMTSSublayer.html#imageFormats">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="styleId">
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-WMTSStyle.html">WMTSStyle</a> to request.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-WMTSSublayer.html#styleId">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="styles">
    ///     A collection of supported <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-WMTSStyle.html">WMTSStyle</a>s as retrieved from the GetCapabilities request.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-WMTSSublayer.html#styles">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="tileMatrixSetId">
    ///     The id of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TileMatrixSet.html">TileMatrixSet</a> to request.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-WMTSSublayer.html#tileMatrixSetId">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="tileMatrixSets">
    ///     A collection of supported <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TileMatrixSet.html">TileMatrixSets</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-WMTSSublayer.html#tileMatrixSets">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="title">
    ///     The title of the WMTS sublayer used to identify it in places such as the
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html">LayerList</a> and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html">Legend</a> widgets.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-WMTSSublayer.html#title">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="wMTSSublayerId">
    ///     The unique ID assigned to the sublayer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-WMTSSublayer.html#id">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public WMTSSublayer(
        string? description = null,
        Extent? fullExtent = null,
        string? imageFormat = null,
        IReadOnlyList<string>? imageFormats = null,
        string? styleId = null,
        IReadOnlyList<WMTSStyle>? styles = null,
        string? tileMatrixSetId = null,
        IReadOnlyList<TileMatrixSet>? tileMatrixSets = null,
        string? title = null,
        string? wMTSSublayerId = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Description = description;
        FullExtent = fullExtent;
        ImageFormat = imageFormat;
        ImageFormats = imageFormats;
        StyleId = styleId;
        Styles = styles;
        TileMatrixSetId = tileMatrixSetId;
        TileMatrixSets = tileMatrixSets;
        Title = title;
        WMTSSublayerId = wMTSSublayerId;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.WMTSSublayer.html#wmtssublayerdescription-property">GeoBlazor Docs</a>
    ///     Description for the WMTS sublayer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-WMTSSublayer.html#description">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Description { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.WMTSSublayer.html#wmtssublayerfullextent-property">GeoBlazor Docs</a>
    ///     The full extent of the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-WMTSSublayer.html#fullExtent">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Extent? FullExtent { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.WMTSSublayer.html#wmtssublayerimageformat-property">GeoBlazor Docs</a>
    ///     The map image format (MIME type) to request.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-WMTSSublayer.html#imageFormat">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? ImageFormat { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.WMTSSublayer.html#wmtssublayerimageformats-property">GeoBlazor Docs</a>
    ///     Supported image formats as retrieved from the GetCapabilities request.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-WMTSSublayer.html#imageFormats">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<string>? ImageFormats { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.WMTSSublayer.html#wmtssublayerstyleid-property">GeoBlazor Docs</a>
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-WMTSStyle.html">WMTSStyle</a> to request.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-WMTSSublayer.html#styleId">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? StyleId { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.WMTSSublayer.html#wmtssublayerstyles-property">GeoBlazor Docs</a>
    ///     A collection of supported <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-WMTSStyle.html">WMTSStyle</a>s as retrieved from the GetCapabilities request.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-WMTSSublayer.html#styles">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<WMTSStyle>? Styles { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.WMTSSublayer.html#wmtssublayertilematrixset-property">GeoBlazor Docs</a>
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TileMatrixSet.html">TileMatrixSet</a> to request.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-WMTSSublayer.html#tileMatrixSet">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public TileMatrixSet? TileMatrixSet { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.WMTSSublayer.html#wmtssublayertilematrixsetid-property">GeoBlazor Docs</a>
    ///     The id of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TileMatrixSet.html">TileMatrixSet</a> to request.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-WMTSSublayer.html#tileMatrixSetId">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? TileMatrixSetId { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.WMTSSublayer.html#wmtssublayertilematrixsets-property">GeoBlazor Docs</a>
    ///     A collection of supported <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TileMatrixSet.html">TileMatrixSets</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-WMTSSublayer.html#tileMatrixSets">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<TileMatrixSet>? TileMatrixSets { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.WMTSSublayer.html#wmtssublayertitle-property">GeoBlazor Docs</a>
    ///     The title of the WMTS sublayer used to identify it in places such as the
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html">LayerList</a> and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html">Legend</a> widgets.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-WMTSSublayer.html#title">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Title { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.WMTSSublayer.html#wmtssublayerwmtssublayerid-property">GeoBlazor Docs</a>
    ///     The unique ID assigned to the sublayer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-WMTSSublayer.html#id">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? WMTSSublayerId { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Description property.
    /// </summary>
    public async Task<string?> GetDescription()
    {
        if (CoreJsModule is null)
        {
            return Description;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Description;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "description");
        if (result is not null)
        {
#pragma warning disable BL0005
             Description = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Description)] = Description;
        }
         
        return Description;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FullExtent property.
    /// </summary>
    public async Task<Extent?> GetFullExtent()
    {
        if (CoreJsModule is null)
        {
            return FullExtent;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return FullExtent;
        }

        Extent? result = await JsComponentReference.InvokeAsync<Extent?>(
            "getFullExtent", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (FullExtent is not null)
            {
                result.Id = FullExtent.Id;
            }
            
#pragma warning disable BL0005
            FullExtent = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(FullExtent)] = FullExtent;
        }
        
        return FullExtent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ImageFormat property.
    /// </summary>
    public async Task<string?> GetImageFormat()
    {
        if (CoreJsModule is null)
        {
            return ImageFormat;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ImageFormat;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "imageFormat");
        if (result is not null)
        {
#pragma warning disable BL0005
             ImageFormat = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ImageFormat)] = ImageFormat;
        }
         
        return ImageFormat;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ImageFormats property.
    /// </summary>
    public async Task<IReadOnlyList<string>?> GetImageFormats()
    {
        if (CoreJsModule is null)
        {
            return ImageFormats;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ImageFormats;
        }

        // get the property value
        IReadOnlyList<string>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<string>?>("getProperty",
            CancellationTokenSource.Token, "imageFormats");
        if (result is not null)
        {
#pragma warning disable BL0005
             ImageFormats = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ImageFormats)] = ImageFormats;
        }
         
        return ImageFormats;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the StyleId property.
    /// </summary>
    public async Task<string?> GetStyleId()
    {
        if (CoreJsModule is null)
        {
            return StyleId;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return StyleId;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "styleId");
        if (result is not null)
        {
#pragma warning disable BL0005
             StyleId = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(StyleId)] = StyleId;
        }
         
        return StyleId;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Styles property.
    /// </summary>
    public async Task<IReadOnlyList<WMTSStyle>?> GetStyles()
    {
        if (CoreJsModule is null)
        {
            return Styles;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Styles;
        }

        IReadOnlyList<WMTSStyle>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<WMTSStyle>?>(
            "getStyles", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Styles = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Styles)] = Styles;
        }
        
        return Styles;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the TileMatrixSet property.
    /// </summary>
    public async Task<TileMatrixSet?> GetTileMatrixSet()
    {
        if (CoreJsModule is null)
        {
            return TileMatrixSet;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return TileMatrixSet;
        }

        TileMatrixSet? result = await JsComponentReference.InvokeAsync<TileMatrixSet?>(
            "getTileMatrixSet", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            TileMatrixSet = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(TileMatrixSet)] = TileMatrixSet;
        }
        
        return TileMatrixSet;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the TileMatrixSetId property.
    /// </summary>
    public async Task<string?> GetTileMatrixSetId()
    {
        if (CoreJsModule is null)
        {
            return TileMatrixSetId;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return TileMatrixSetId;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "tileMatrixSetId");
        if (result is not null)
        {
#pragma warning disable BL0005
             TileMatrixSetId = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(TileMatrixSetId)] = TileMatrixSetId;
        }
         
        return TileMatrixSetId;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the TileMatrixSets property.
    /// </summary>
    public async Task<IReadOnlyList<TileMatrixSet>?> GetTileMatrixSets()
    {
        if (CoreJsModule is null)
        {
            return TileMatrixSets;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return TileMatrixSets;
        }

        IReadOnlyList<TileMatrixSet>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<TileMatrixSet>?>(
            "getTileMatrixSets", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            TileMatrixSets = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(TileMatrixSets)] = TileMatrixSets;
        }
        
        return TileMatrixSets;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Title property.
    /// </summary>
    public async Task<string?> GetTitle()
    {
        if (CoreJsModule is null)
        {
            return Title;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Title;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "title");
        if (result is not null)
        {
#pragma warning disable BL0005
             Title = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Title)] = Title;
        }
         
        return Title;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the WMTSSublayerId property.
    /// </summary>
    public async Task<string?> GetWMTSSublayerId()
    {
        if (CoreJsModule is null)
        {
            return WMTSSublayerId;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return WMTSSublayerId;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "id");
        if (result is not null)
        {
#pragma warning disable BL0005
             WMTSSublayerId = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(WMTSSublayerId)] = WMTSSublayerId;
        }
         
        return WMTSSublayerId;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Description property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDescription(string? value)
    {
#pragma warning disable BL0005
        Description = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Description)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "description", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FullExtent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFullExtent(Extent? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        FullExtent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FullExtent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "fullExtent", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ImageFormat property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetImageFormat(string? value)
    {
#pragma warning disable BL0005
        ImageFormat = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ImageFormat)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "imageFormat", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ImageFormats property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetImageFormats(IReadOnlyList<string>? value)
    {
#pragma warning disable BL0005
        ImageFormats = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ImageFormats)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "imageFormats", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the StyleId property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetStyleId(string? value)
    {
#pragma warning disable BL0005
        StyleId = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(StyleId)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "styleId", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Styles property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetStyles(IReadOnlyList<WMTSStyle>? value)
    {
        if (value is not null)
        {
            foreach (WMTSStyle item in value)
            {
                item.CoreJsModule = CoreJsModule;
                item.Parent = this;
                item.Layer = Layer;
                item.View = View;
            }
        }
        
#pragma warning disable BL0005
        Styles = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Styles)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "styles", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the TileMatrixSetId property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTileMatrixSetId(string? value)
    {
#pragma warning disable BL0005
        TileMatrixSetId = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(TileMatrixSetId)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "tileMatrixSetId", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the TileMatrixSets property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTileMatrixSets(IReadOnlyList<TileMatrixSet>? value)
    {
        if (value is not null)
        {
            foreach (TileMatrixSet item in value)
            {
                item.CoreJsModule = CoreJsModule;
                item.Parent = this;
                item.Layer = Layer;
                item.View = View;
            }
        }
        
#pragma warning disable BL0005
        TileMatrixSets = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(TileMatrixSets)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "tileMatrixSets", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Title property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTitle(string? value)
    {
#pragma warning disable BL0005
        Title = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Title)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "title", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the WMTSSublayerId property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetWMTSSublayerId(string? value)
    {
#pragma warning disable BL0005
        WMTSSublayerId = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(WMTSSublayerId)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "id", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the ImageFormats property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToImageFormats(params string[] values)
    {
        string[] join = ImageFormats is null
            ? values
            : [..ImageFormats, ..values];
        await SetImageFormats(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the Styles property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToStyles(params WMTSStyle[] values)
    {
        WMTSStyle[] join = Styles is null
            ? values
            : [..Styles, ..values];
        await SetStyles(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the TileMatrixSets property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToTileMatrixSets(params TileMatrixSet[] values)
    {
        TileMatrixSet[] join = TileMatrixSets is null
            ? values
            : [..TileMatrixSets, ..values];
        await SetTileMatrixSets(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the ImageFormats property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromImageFormats(params string[] values)
    {
        if (ImageFormats is null)
        {
            return;
        }
        await SetImageFormats(ImageFormats.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the Styles property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromStyles(params WMTSStyle[] values)
    {
        if (Styles is null)
        {
            return;
        }
        await SetStyles(Styles.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the TileMatrixSets property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromTileMatrixSets(params TileMatrixSet[] values)
    {
        if (TileMatrixSets is null)
        {
            return;
        }
        await SetTileMatrixSets(TileMatrixSets.Except(values).ToArray());
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Extent fullExtent:
                if (fullExtent != FullExtent)
                {
                    FullExtent = fullExtent;
                    ModifiedParameters[nameof(FullExtent)] = FullExtent;
                }
                
                return true;
            case WMTSStyle styles:
                Styles ??= [];
                if (!Styles.Contains(styles))
                {
                    Styles = [..Styles, styles];
                    ModifiedParameters[nameof(Styles)] = Styles;
                }
                
                return true;
            case TileMatrixSet tileMatrixSets:
                TileMatrixSets ??= [];
                if (!TileMatrixSets.Contains(tileMatrixSets))
                {
                    TileMatrixSets = [..TileMatrixSets, tileMatrixSets];
                    
                    ModifiedParameters[nameof(TileMatrixSets)] = TileMatrixSets;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Extent _:
                FullExtent = null;
                ModifiedParameters[nameof(FullExtent)] = FullExtent;
                return true;
            case WMTSStyle styles:
                Styles = Styles?.Where(s => s != styles).ToList();
                ModifiedParameters[nameof(Styles)] = Styles;
                return true;
            case TileMatrixSet tileMatrixSets:
                TileMatrixSets = TileMatrixSets?.Where(t => t != tileMatrixSets).ToList();
                
                ModifiedParameters[nameof(TileMatrixSets)] = TileMatrixSets;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        FullExtent?.ValidateRequiredGeneratedChildren();
        if (Styles is not null)
        {
            foreach (WMTSStyle child in Styles)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        if (TileMatrixSets is not null)
        {
            foreach (TileMatrixSet child in TileMatrixSets)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        base.ValidateRequiredGeneratedChildren();
    }
      
}
