// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    An array of date fields or field json objects.
/// </summary>
public partial class FieldsIndex
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public FieldsIndex()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="dateFields">
    ///     An array of date fields or field json objects.
    ///     default []
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FieldsIndex.html#dateFields">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public FieldsIndex(
        IReadOnlyList<Field>? dateFields = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        DateFields = dateFields;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     An array of date fields or field json objects.
    ///     default []
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FieldsIndex.html#dateFields">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<Field>? DateFields { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the DateFields property.
    /// </summary>
    public async Task<IReadOnlyList<Field>?> GetDateFields()
    {
        if (CoreJsModule is null)
        {
            return DateFields;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return DateFields;
        }

        // get the property value
#pragma warning disable BL0005
        DateFields = await CoreJsModule!.InvokeAsync<IReadOnlyList<Field>?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "dateFields");
#pragma warning restore BL0005
         ModifiedParameters[nameof(DateFields)] = DateFields;
        return DateFields;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the DateFields property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDateFields(IReadOnlyList<Field> value)
    {
#pragma warning disable BL0005
        DateFields = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DateFields)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "dateFields", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the DateFields property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToDateFields(params Field[] values)
    {
        Field[] join = DateFields is null
            ? values
            : [..DateFields, ..values];
        await SetDateFields(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the DateFields property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromDateFields(params Field[] values)
    {
        if (DateFields is null)
        {
            return;
        }
        await SetDateFields(DateFields.Except(values).ToArray());
    }
    
#endregion





    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Field dateFields:
                DateFields ??= [];
                if (!DateFields.Contains(dateFields))
                {
                    DateFields = [..DateFields, dateFields];
                    
                    ModifiedParameters[nameof(DateFields)] = DateFields;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Field dateFields:
                DateFields = DateFields?.Where(d => d != dateFields).ToList();
                
                ModifiedParameters[nameof(DateFields)] = DateFields;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    internal override void ValidateRequiredGeneratedChildren()
    {
    
        if (DateFields is not null)
        {
            foreach (Field child in DateFields)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        base.ValidateRequiredGeneratedChildren();
    }
      
}
