// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VisibleElementsColumnMenuItems.html">GeoBlazor Docs</a>
///     _(Since 4.30)_ The menu items within the column menu.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class VisibleElementsColumnMenuItems : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public VisibleElementsColumnMenuItems()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="sortAscending">
    ///     _(Since 4.30)_ Indicates whether to display the `Sort Ascending` menu item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="sortDescending">
    ///     _(Since 4.30)_ Indicates whether to display the `Sort Descending` menu item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public VisibleElementsColumnMenuItems(
        bool? sortAscending = null,
        bool? sortDescending = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        SortAscending = sortAscending;
        SortDescending = sortDescending;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VisibleElementsColumnMenuItems.html#visibleelementscolumnmenuitemssortascending-property">GeoBlazor Docs</a>
    ///     _(Since 4.30)_ Indicates whether to display the `Sort Ascending` menu item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SortAscending { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.VisibleElementsColumnMenuItems.html#visibleelementscolumnmenuitemssortdescending-property">GeoBlazor Docs</a>
    ///     _(Since 4.30)_ Indicates whether to display the `Sort Descending` menu item.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SortDescending { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the SortAscending property.
    /// </summary>
    public async Task<bool?> GetSortAscending()
    {
        if (CoreJsModule is null)
        {
            return SortAscending;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SortAscending;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "sortAscending");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SortAscending = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SortAscending)] = SortAscending;
        }
         
        return SortAscending;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SortDescending property.
    /// </summary>
    public async Task<bool?> GetSortDescending()
    {
        if (CoreJsModule is null)
        {
            return SortDescending;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SortDescending;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "sortDescending");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SortDescending = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SortDescending)] = SortDescending;
        }
         
        return SortDescending;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the SortAscending property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSortAscending(bool? value)
    {
#pragma warning disable BL0005
        SortAscending = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SortAscending)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "sortAscending", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SortDescending property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSortDescending(bool? value)
    {
#pragma warning disable BL0005
        SortDescending = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SortDescending)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "sortDescending", value);
    }
    
#endregion

}
