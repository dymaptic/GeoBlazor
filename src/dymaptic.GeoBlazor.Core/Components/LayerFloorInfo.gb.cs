// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    LayerFloorInfo contains properties that allow a layer to be floor-aware.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-LayerFloorInfo.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class LayerFloorInfo
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public LayerFloorInfo()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="floorField">
    ///     The field name derived from a floor-aware layer and used to filter features by floor level.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-LayerFloorInfo.html#floorField">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public LayerFloorInfo(
        string floorField)
    {
        AllowRender = false;
#pragma warning disable BL0005
        FloorField = floorField;
#pragma warning restore BL0005    
    }
    
    
#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the FloorField property.
    /// </summary>
    public async Task<string?> GetFloorField()
    {
        if (CoreJsModule is null)
        {
            return FloorField;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return FloorField;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "floorField");
        if (result is not null)
        {
#pragma warning disable BL0005
             FloorField = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FloorField)] = FloorField;
        }
         
        return FloorField;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the FloorField property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFloorField(string value)
    {
#pragma warning disable BL0005
        FloorField = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FloorField)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "floorField", value);
    }
    
#endregion

}
