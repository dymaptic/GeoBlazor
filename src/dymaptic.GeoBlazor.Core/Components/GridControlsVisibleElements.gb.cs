// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.GridControlsVisibleElements.html">GeoBlazor Docs</a>
///     The visible elements that are displayed within the widget.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-support-GridControls.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class GridControlsVisibleElements : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public GridControlsVisibleElements()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="colorSelection">
    /// </param>
    /// <param name="dynamicScaleToggle">
    /// </param>
    /// <param name="gridEnabledToggle">
    /// </param>
    /// <param name="gridSnapEnabledToggle">
    /// </param>
    /// <param name="lineIntervalInput">
    /// </param>
    /// <param name="numericInputs">
    /// </param>
    /// <param name="outOfScaleWarning">
    /// </param>
    /// <param name="placementButtons">
    /// </param>
    /// <param name="rotateWithMapToggle">
    /// </param>
    public GridControlsVisibleElements(
        bool? colorSelection = null,
        bool? dynamicScaleToggle = null,
        bool? gridEnabledToggle = null,
        bool? gridSnapEnabledToggle = null,
        bool? lineIntervalInput = null,
        bool? numericInputs = null,
        bool? outOfScaleWarning = null,
        bool? placementButtons = null,
        bool? rotateWithMapToggle = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        ColorSelection = colorSelection;
        DynamicScaleToggle = dynamicScaleToggle;
        GridEnabledToggle = gridEnabledToggle;
        GridSnapEnabledToggle = gridSnapEnabledToggle;
        LineIntervalInput = lineIntervalInput;
        NumericInputs = numericInputs;
        OutOfScaleWarning = outOfScaleWarning;
        PlacementButtons = placementButtons;
        RotateWithMapToggle = rotateWithMapToggle;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.GridControlsVisibleElements.html#gridcontrolsvisibleelementscolorselection-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? ColorSelection { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.GridControlsVisibleElements.html#gridcontrolsvisibleelementsdynamicscaletoggle-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? DynamicScaleToggle { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.GridControlsVisibleElements.html#gridcontrolsvisibleelementsgridenabledtoggle-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? GridEnabledToggle { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.GridControlsVisibleElements.html#gridcontrolsvisibleelementsgridsnapenabledtoggle-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? GridSnapEnabledToggle { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.GridControlsVisibleElements.html#gridcontrolsvisibleelementslineintervalinput-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? LineIntervalInput { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.GridControlsVisibleElements.html#gridcontrolsvisibleelementsnumericinputs-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? NumericInputs { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.GridControlsVisibleElements.html#gridcontrolsvisibleelementsoutofscalewarning-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? OutOfScaleWarning { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.GridControlsVisibleElements.html#gridcontrolsvisibleelementsplacementbuttons-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? PlacementButtons { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.GridControlsVisibleElements.html#gridcontrolsvisibleelementsrotatewithmaptoggle-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? RotateWithMapToggle { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the ColorSelection property.
    /// </summary>
    public async Task<bool?> GetColorSelection()
    {
        if (CoreJsModule is null)
        {
            return ColorSelection;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ColorSelection;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "colorSelection");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ColorSelection = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ColorSelection)] = ColorSelection;
        }
         
        return ColorSelection;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DynamicScaleToggle property.
    /// </summary>
    public async Task<bool?> GetDynamicScaleToggle()
    {
        if (CoreJsModule is null)
        {
            return DynamicScaleToggle;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return DynamicScaleToggle;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "dynamicScaleToggle");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             DynamicScaleToggle = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DynamicScaleToggle)] = DynamicScaleToggle;
        }
         
        return DynamicScaleToggle;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the GridEnabledToggle property.
    /// </summary>
    public async Task<bool?> GetGridEnabledToggle()
    {
        if (CoreJsModule is null)
        {
            return GridEnabledToggle;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return GridEnabledToggle;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "gridEnabledToggle");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             GridEnabledToggle = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(GridEnabledToggle)] = GridEnabledToggle;
        }
         
        return GridEnabledToggle;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the GridSnapEnabledToggle property.
    /// </summary>
    public async Task<bool?> GetGridSnapEnabledToggle()
    {
        if (CoreJsModule is null)
        {
            return GridSnapEnabledToggle;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return GridSnapEnabledToggle;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "gridSnapEnabledToggle");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             GridSnapEnabledToggle = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(GridSnapEnabledToggle)] = GridSnapEnabledToggle;
        }
         
        return GridSnapEnabledToggle;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LineIntervalInput property.
    /// </summary>
    public async Task<bool?> GetLineIntervalInput()
    {
        if (CoreJsModule is null)
        {
            return LineIntervalInput;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return LineIntervalInput;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "lineIntervalInput");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             LineIntervalInput = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(LineIntervalInput)] = LineIntervalInput;
        }
         
        return LineIntervalInput;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the NumericInputs property.
    /// </summary>
    public async Task<bool?> GetNumericInputs()
    {
        if (CoreJsModule is null)
        {
            return NumericInputs;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return NumericInputs;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "numericInputs");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             NumericInputs = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(NumericInputs)] = NumericInputs;
        }
         
        return NumericInputs;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the OutOfScaleWarning property.
    /// </summary>
    public async Task<bool?> GetOutOfScaleWarning()
    {
        if (CoreJsModule is null)
        {
            return OutOfScaleWarning;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return OutOfScaleWarning;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "outOfScaleWarning");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             OutOfScaleWarning = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(OutOfScaleWarning)] = OutOfScaleWarning;
        }
         
        return OutOfScaleWarning;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PlacementButtons property.
    /// </summary>
    public async Task<bool?> GetPlacementButtons()
    {
        if (CoreJsModule is null)
        {
            return PlacementButtons;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return PlacementButtons;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "placementButtons");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             PlacementButtons = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(PlacementButtons)] = PlacementButtons;
        }
         
        return PlacementButtons;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RotateWithMapToggle property.
    /// </summary>
    public async Task<bool?> GetRotateWithMapToggle()
    {
        if (CoreJsModule is null)
        {
            return RotateWithMapToggle;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return RotateWithMapToggle;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "rotateWithMapToggle");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             RotateWithMapToggle = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(RotateWithMapToggle)] = RotateWithMapToggle;
        }
         
        return RotateWithMapToggle;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the ColorSelection property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetColorSelection(bool? value)
    {
#pragma warning disable BL0005
        ColorSelection = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ColorSelection)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "colorSelection", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DynamicScaleToggle property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDynamicScaleToggle(bool? value)
    {
#pragma warning disable BL0005
        DynamicScaleToggle = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DynamicScaleToggle)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "dynamicScaleToggle", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the GridEnabledToggle property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetGridEnabledToggle(bool? value)
    {
#pragma warning disable BL0005
        GridEnabledToggle = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(GridEnabledToggle)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "gridEnabledToggle", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the GridSnapEnabledToggle property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetGridSnapEnabledToggle(bool? value)
    {
#pragma warning disable BL0005
        GridSnapEnabledToggle = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(GridSnapEnabledToggle)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "gridSnapEnabledToggle", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LineIntervalInput property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLineIntervalInput(bool? value)
    {
#pragma warning disable BL0005
        LineIntervalInput = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LineIntervalInput)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "lineIntervalInput", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the NumericInputs property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetNumericInputs(bool? value)
    {
#pragma warning disable BL0005
        NumericInputs = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(NumericInputs)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "numericInputs", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the OutOfScaleWarning property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetOutOfScaleWarning(bool? value)
    {
#pragma warning disable BL0005
        OutOfScaleWarning = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(OutOfScaleWarning)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "outOfScaleWarning", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PlacementButtons property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPlacementButtons(bool? value)
    {
#pragma warning disable BL0005
        PlacementButtons = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PlacementButtons)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "placementButtons", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the RotateWithMapToggle property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRotateWithMapToggle(bool? value)
    {
#pragma warning disable BL0005
        RotateWithMapToggle = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RotateWithMapToggle)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "rotateWithMapToggle", value);
    }
    
#endregion

}
