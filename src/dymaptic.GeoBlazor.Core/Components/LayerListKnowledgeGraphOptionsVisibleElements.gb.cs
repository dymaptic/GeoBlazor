// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.LayerListKnowledgeGraphOptionsVisibleElements.html">GeoBlazor Docs</a>
///     The visible elements that are displayed within the table list.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#knowledgeGraphOptions">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class LayerListKnowledgeGraphOptionsVisibleElements : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public LayerListKnowledgeGraphOptionsVisibleElements()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="errors">
    ///     Indicates whether to display errors in the table list.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#knowledgeGraphOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="filter">
    ///     Indicates whether to display the filter input box in the table list.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#knowledgeGraphOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="statusIndicators">
    ///     Indicates whether to display status indicators in the table list.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#knowledgeGraphOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public LayerListKnowledgeGraphOptionsVisibleElements(
        bool? errors = null,
        bool? filter = null,
        bool? statusIndicators = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Errors = errors;
        Filter = filter;
        StatusIndicators = statusIndicators;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.LayerListKnowledgeGraphOptionsVisibleElements.html#layerlistknowledgegraphoptionsvisibleelementserrors-property">GeoBlazor Docs</a>
    ///     Indicates whether to display errors in the table list.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#knowledgeGraphOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Errors { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.LayerListKnowledgeGraphOptionsVisibleElements.html#layerlistknowledgegraphoptionsvisibleelementsfilter-property">GeoBlazor Docs</a>
    ///     Indicates whether to display the filter input box in the table list.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#knowledgeGraphOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Filter { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.LayerListKnowledgeGraphOptionsVisibleElements.html#layerlistknowledgegraphoptionsvisibleelementsstatusindicators-property">GeoBlazor Docs</a>
    ///     Indicates whether to display status indicators in the table list.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-LayerList.html#knowledgeGraphOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? StatusIndicators { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Errors property.
    /// </summary>
    public async Task<bool?> GetErrors()
    {
        if (CoreJsModule is null)
        {
            return Errors;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Errors;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "errors");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Errors = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Errors)] = Errors;
        }
         
        return Errors;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Filter property.
    /// </summary>
    public async Task<bool?> GetFilter()
    {
        if (CoreJsModule is null)
        {
            return Filter;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Filter;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "filter");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Filter = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Filter)] = Filter;
        }
         
        return Filter;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the StatusIndicators property.
    /// </summary>
    public async Task<bool?> GetStatusIndicators()
    {
        if (CoreJsModule is null)
        {
            return StatusIndicators;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return StatusIndicators;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "statusIndicators");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             StatusIndicators = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(StatusIndicators)] = StatusIndicators;
        }
         
        return StatusIndicators;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Errors property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetErrors(bool? value)
    {
#pragma warning disable BL0005
        Errors = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Errors)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "errors", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Filter property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFilter(bool? value)
    {
#pragma warning disable BL0005
        Filter = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Filter)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "filter", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the StatusIndicators property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetStatusIndicators(bool? value)
    {
#pragma warning disable BL0005
        StatusIndicators = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(StatusIndicators)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "statusIndicators", value);
    }
    
#endregion

}
