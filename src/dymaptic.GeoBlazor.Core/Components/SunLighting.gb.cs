// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.SunLighting.html">GeoBlazor Docs</a>
///     The SunLighting class allows you to change the lighting in the scene to sunlight.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-3d-environment-SunLighting.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class SunLighting : WebsceneSunLighting,
    IEnvironmentLighting,
    ISceneViewEnvironmentLighting
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public SunLighting()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="cameraTrackingEnabled">
    ///     Indicates whether the date and time of the simulated sun is automatically updated to maintain the current time of day while the camera changes.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-3d-environment-SunLighting.html#cameraTrackingEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="date">
    ///     The current date and time of the simulated sun.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-SunLighting.html#date">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="directShadowsEnabled">
    ///     Indicates whether to show shadows cast by the sun.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-SunLighting.html#directShadowsEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="displayUTCOffset">
    ///     The UTC time zone offset in hours that should be displayed in the UI to represent the date.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-webscene-SunLighting.html#displayUTCOffset">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public SunLighting(
        bool? cameraTrackingEnabled = null,
        DateTime? date = null,
        bool? directShadowsEnabled = null,
        double? displayUTCOffset = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        CameraTrackingEnabled = cameraTrackingEnabled;
        Date = date;
        DirectShadowsEnabled = directShadowsEnabled;
        DisplayUTCOffset = displayUTCOffset;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Indicates whether the date and time of the simulated sun is automatically updated to maintain the current time of day while the camera changes.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-3d-environment-SunLighting.html#cameraTrackingEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? CameraTrackingEnabled { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the CameraTrackingEnabled property.
    /// </summary>
    public async Task<bool?> GetCameraTrackingEnabled()
    {
        if (CoreJsModule is null)
        {
            return CameraTrackingEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CameraTrackingEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "cameraTrackingEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             CameraTrackingEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CameraTrackingEnabled)] = CameraTrackingEnabled;
        }
         
        return CameraTrackingEnabled;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the CameraTrackingEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCameraTrackingEnabled(bool? value)
    {
#pragma warning disable BL0005
        CameraTrackingEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CameraTrackingEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "cameraTrackingEnabled", value);
    }
    
#endregion

#region Public Methods

    /// <summary>
    ///     Create a clone of this while partially applying the provided webscene lighting settings.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-3d-environment-SunLighting.html#cloneWithWebsceneLighting">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task CloneWithWebsceneLighting()
    {
        if (CoreJsModule is null)
        {
            return;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference!.InvokeVoidAsync(
            "cloneWithWebsceneLighting", 
            CancellationTokenSource.Token);
    }
    
#endregion

}
