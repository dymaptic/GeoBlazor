// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components.Renderers;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.html">GeoBlazor Docs</a>
///     RasterStretchRenderer defines the symbology with a gradual ramp of colors for each pixel in a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html">ImageryLayer</a>,
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryTileLayer.html">ImageryTileLayer</a>, and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html">WCSLayer</a> based on the pixel value.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class RasterStretchRenderer
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public RasterStretchRenderer()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="colorRamp">
    ///     The stretched values are mapped to this specified color ramp.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html#colorRamp">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="computeGamma">
    ///     The computeGamma automatically calculates best gamma value to render exported image based on empirical model.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html#computeGamma">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="dynamicRangeAdjustment">
    ///     When Dynamic Range Adjustment is `true`, the statistics based on the current display extent
    ///     are calculated as you zoom and pan around the image.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html#dynamicRangeAdjustment">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="gamma">
    ///     The gamma values to be used if <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html#useGamma">useGamma</a> is set to `true`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html#gamma">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="outputMax">
    ///     The outputMax denotes the output maximum, which is the highest pixel value.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html#outputMax">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="outputMin">
    ///     The outputMin denotes the output minimum, which is the lowest pixel value.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html#outputMin">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="stretchType">
    ///     The stretch type defines a histogram stretch that will be applied to the rasters to enhance their appearance.
    ///     default "none"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html#stretchType">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="useGamma">
    ///     Denotes whether the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html#gamma">gamma</a> value should be used.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html#useGamma">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="numberOfStandardDeviations">
    ///     Applicable when <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html#stretchType">stretchType</a> is `standard-deviation`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html#numberOfStandardDeviations">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="customStatistics">
    ///     The input band statistics can be specified through the customStatistics property.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html#customStatistics">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="maxPercent">
    ///     Applicable when <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html#stretchType">stretchType</a> is `percent-clip`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html#maxPercent">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="minPercent">
    ///     Applicable when <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html#stretchType">stretchType</a> is `percent-clip`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html#minPercent">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="sigmoidStrengthLevel">
    ///     The sigmoid strength level determines how much of the sigmoidal function will be used in the stretch.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html#sigmoidStrengthLevel">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public RasterStretchRenderer(
        ColorRamp? colorRamp = null,
        bool? computeGamma = null,
        bool? dynamicRangeAdjustment = null,
        IReadOnlyList<double>? gamma = null,
        int? outputMax = null,
        int? outputMin = null,
        StretchType? stretchType = null,
        bool? useGamma = null,
        int? numberOfStandardDeviations = null,
        IReadOnlyList<RasterBandStatistics>? customStatistics = null,
        double? maxPercent = null,
        double? minPercent = null,
        double? sigmoidStrengthLevel = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        ColorRamp = colorRamp;
        ComputeGamma = computeGamma;
        DynamicRangeAdjustment = dynamicRangeAdjustment;
        Gamma = gamma;
        OutputMax = outputMax;
        OutputMin = outputMin;
        StretchType = stretchType;
        UseGamma = useGamma;
        NumberOfStandardDeviations = numberOfStandardDeviations;
        CustomStatistics = customStatistics;
        MaxPercent = maxPercent;
        MinPercent = minPercent;
        SigmoidStrengthLevel = sigmoidStrengthLevel;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.html#rasterstretchrenderercolorramp-property">GeoBlazor Docs</a>
    ///     The stretched values are mapped to this specified color ramp.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html#colorRamp">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public ColorRamp? ColorRamp { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.html#rasterstretchrenderercustomstatistics-property">GeoBlazor Docs</a>
    ///     The input band statistics can be specified through the customStatistics property.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html#customStatistics">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<RasterBandStatistics>? CustomStatistics { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.html#rasterstretchrenderergamma-property">GeoBlazor Docs</a>
    ///     The gamma values to be used if <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html#useGamma">useGamma</a> is set to `true`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html#gamma">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<double>? Gamma { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.html#rasterstretchrenderermaxpercent-property">GeoBlazor Docs</a>
    ///     Applicable when <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html#stretchType">stretchType</a> is `percent-clip`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html#maxPercent">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? MaxPercent { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.html#rasterstretchrendererminpercent-property">GeoBlazor Docs</a>
    ///     Applicable when <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html#stretchType">stretchType</a> is `percent-clip`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html#minPercent">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? MinPercent { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Renderers.RasterStretchRenderer.html#rasterstretchrenderersigmoidstrengthlevel-property">GeoBlazor Docs</a>
    ///     The sigmoid strength level determines how much of the sigmoidal function will be used in the stretch.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-RasterStretchRenderer.html#sigmoidStrengthLevel">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? SigmoidStrengthLevel { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the ColorRamp property.
    /// </summary>
    public async Task<ColorRamp?> GetColorRamp()
    {
        if (CoreJsModule is null)
        {
            return ColorRamp;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ColorRamp;
        }

        ColorRamp? result = await JsComponentReference.InvokeAsync<ColorRamp?>(
            "getColorRamp", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            ColorRamp = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(ColorRamp)] = ColorRamp;
        }
        
        return ColorRamp;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ComputeGamma property.
    /// </summary>
    public async Task<bool?> GetComputeGamma()
    {
        if (CoreJsModule is null)
        {
            return ComputeGamma;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ComputeGamma;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "computeGamma");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ComputeGamma = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ComputeGamma)] = ComputeGamma;
        }
         
        return ComputeGamma;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CustomStatistics property.
    /// </summary>
    public async Task<IReadOnlyList<RasterBandStatistics>?> GetCustomStatistics()
    {
        if (CoreJsModule is null)
        {
            return CustomStatistics;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CustomStatistics;
        }

        // get the property value
        IReadOnlyList<RasterBandStatistics>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<RasterBandStatistics>?>("getProperty",
            CancellationTokenSource.Token, "customStatistics");
        if (result is not null)
        {
#pragma warning disable BL0005
             CustomStatistics = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CustomStatistics)] = CustomStatistics;
        }
         
        return CustomStatistics;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DynamicRangeAdjustment property.
    /// </summary>
    public async Task<bool?> GetDynamicRangeAdjustment()
    {
        if (CoreJsModule is null)
        {
            return DynamicRangeAdjustment;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return DynamicRangeAdjustment;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "dynamicRangeAdjustment");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             DynamicRangeAdjustment = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DynamicRangeAdjustment)] = DynamicRangeAdjustment;
        }
         
        return DynamicRangeAdjustment;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Gamma property.
    /// </summary>
    public async Task<IReadOnlyList<double>?> GetGamma()
    {
        if (CoreJsModule is null)
        {
            return Gamma;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Gamma;
        }

        // get the property value
        IReadOnlyList<double>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<double>?>("getProperty",
            CancellationTokenSource.Token, "gamma");
        if (result is not null)
        {
#pragma warning disable BL0005
             Gamma = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Gamma)] = Gamma;
        }
         
        return Gamma;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MaxPercent property.
    /// </summary>
    public async Task<double?> GetMaxPercent()
    {
        if (CoreJsModule is null)
        {
            return MaxPercent;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return MaxPercent;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "maxPercent");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             MaxPercent = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MaxPercent)] = MaxPercent;
        }
         
        return MaxPercent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MinPercent property.
    /// </summary>
    public async Task<double?> GetMinPercent()
    {
        if (CoreJsModule is null)
        {
            return MinPercent;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return MinPercent;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "minPercent");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             MinPercent = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MinPercent)] = MinPercent;
        }
         
        return MinPercent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the NumberOfStandardDeviations property.
    /// </summary>
    public async Task<int?> GetNumberOfStandardDeviations()
    {
        if (CoreJsModule is null)
        {
            return NumberOfStandardDeviations;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return NumberOfStandardDeviations;
        }

        // get the property value
        JsNullableIntWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableIntWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "numberOfStandardDeviations");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             NumberOfStandardDeviations = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(NumberOfStandardDeviations)] = NumberOfStandardDeviations;
        }
         
        return NumberOfStandardDeviations;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the OutputMax property.
    /// </summary>
    public async Task<int?> GetOutputMax()
    {
        if (CoreJsModule is null)
        {
            return OutputMax;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return OutputMax;
        }

        // get the property value
        JsNullableIntWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableIntWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "outputMax");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             OutputMax = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(OutputMax)] = OutputMax;
        }
         
        return OutputMax;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the OutputMin property.
    /// </summary>
    public async Task<int?> GetOutputMin()
    {
        if (CoreJsModule is null)
        {
            return OutputMin;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return OutputMin;
        }

        // get the property value
        JsNullableIntWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableIntWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "outputMin");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             OutputMin = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(OutputMin)] = OutputMin;
        }
         
        return OutputMin;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SigmoidStrengthLevel property.
    /// </summary>
    public async Task<double?> GetSigmoidStrengthLevel()
    {
        if (CoreJsModule is null)
        {
            return SigmoidStrengthLevel;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SigmoidStrengthLevel;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "sigmoidStrengthLevel");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SigmoidStrengthLevel = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SigmoidStrengthLevel)] = SigmoidStrengthLevel;
        }
         
        return SigmoidStrengthLevel;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the StretchType property.
    /// </summary>
    public async Task<StretchType?> GetStretchType()
    {
        if (CoreJsModule is null)
        {
            return StretchType;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return StretchType;
        }

        // get the property value
        JsNullableEnumWrapper<StretchType>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<StretchType>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "stretchType");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             StretchType = (StretchType)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(StretchType)] = StretchType;
        }
         
        return StretchType;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the UseGamma property.
    /// </summary>
    public async Task<bool?> GetUseGamma()
    {
        if (CoreJsModule is null)
        {
            return UseGamma;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return UseGamma;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "useGamma");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             UseGamma = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(UseGamma)] = UseGamma;
        }
         
        return UseGamma;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the ColorRamp property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetColorRamp(ColorRamp? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        ColorRamp = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ColorRamp)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "colorRamp", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ComputeGamma property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetComputeGamma(bool? value)
    {
#pragma warning disable BL0005
        ComputeGamma = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ComputeGamma)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "computeGamma", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CustomStatistics property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCustomStatistics(IReadOnlyList<RasterBandStatistics>? value)
    {
#pragma warning disable BL0005
        CustomStatistics = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CustomStatistics)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "customStatistics", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DynamicRangeAdjustment property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDynamicRangeAdjustment(bool? value)
    {
#pragma warning disable BL0005
        DynamicRangeAdjustment = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DynamicRangeAdjustment)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "dynamicRangeAdjustment", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Gamma property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetGamma(IReadOnlyList<double>? value)
    {
#pragma warning disable BL0005
        Gamma = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Gamma)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "gamma", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MaxPercent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMaxPercent(double? value)
    {
#pragma warning disable BL0005
        MaxPercent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MaxPercent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "maxPercent", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MinPercent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMinPercent(double? value)
    {
#pragma warning disable BL0005
        MinPercent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MinPercent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "minPercent", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the NumberOfStandardDeviations property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetNumberOfStandardDeviations(int? value)
    {
#pragma warning disable BL0005
        NumberOfStandardDeviations = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(NumberOfStandardDeviations)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "numberOfStandardDeviations", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the OutputMax property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetOutputMax(int? value)
    {
#pragma warning disable BL0005
        OutputMax = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(OutputMax)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "outputMax", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the OutputMin property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetOutputMin(int? value)
    {
#pragma warning disable BL0005
        OutputMin = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(OutputMin)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "outputMin", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SigmoidStrengthLevel property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSigmoidStrengthLevel(double? value)
    {
#pragma warning disable BL0005
        SigmoidStrengthLevel = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SigmoidStrengthLevel)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "sigmoidStrengthLevel", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the UseGamma property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUseGamma(bool? value)
    {
#pragma warning disable BL0005
        UseGamma = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(UseGamma)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "useGamma", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the CustomStatistics property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToCustomStatistics(params RasterBandStatistics[] values)
    {
        RasterBandStatistics[] join = CustomStatistics is null
            ? values
            : [..CustomStatistics, ..values];
        await SetCustomStatistics(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the Gamma property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToGamma(params double[] values)
    {
        double[] join = Gamma is null
            ? values
            : [..Gamma, ..values];
        await SetGamma(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the CustomStatistics property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromCustomStatistics(params RasterBandStatistics[] values)
    {
        if (CustomStatistics is null)
        {
            return;
        }
        await SetCustomStatistics(CustomStatistics.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the Gamma property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromGamma(params double[] values)
    {
        if (Gamma is null)
        {
            return;
        }
        await SetGamma(Gamma.Except(values).ToArray());
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ColorRamp colorRamp:
                if (colorRamp != ColorRamp)
                {
                    ColorRamp = colorRamp;
                    ModifiedParameters[nameof(ColorRamp)] = ColorRamp;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ColorRamp _:
                ColorRamp = null;
                ModifiedParameters[nameof(ColorRamp)] = ColorRamp;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        ColorRamp?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
