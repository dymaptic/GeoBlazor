// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components.Renderers;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.html">GeoBlazor Docs</a>
///     Defines a predefined raster renderer associated with an <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html#presetRenderers">ImageryLayer</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryTileLayer.html#presetRenderers">ImageryTileLayer</a>.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-RasterPresetRenderer.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class RasterPresetRenderer : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public RasterPresetRenderer()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="bandIds">
    ///     The band ids associated with the raster renderer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-RasterPresetRenderer.html#bandIds">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="method">
    ///     Specifies how to match the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-RasterPresetRenderer.html#renderer">renderer</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-RasterPresetRenderer.html#method">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="name">
    ///     The name of the preset renderer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-RasterPresetRenderer.html#name">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="value">
    ///     The corresponding value of selected <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-RasterPresetRenderer.html#method">method</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-RasterPresetRenderer.html#value">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public RasterPresetRenderer(
        IReadOnlyList<long>? bandIds = null,
        Method? method = null,
        string? name = null,
        string? value = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        BandIds = bandIds;
        Method = method;
        Name = name;
        Value = value;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.html#rasterpresetrendererbandids-property">GeoBlazor Docs</a>
    ///     The band ids associated with the raster renderer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-RasterPresetRenderer.html#bandIds">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<long>? BandIds { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.html#rasterpresetrenderermethod-property">GeoBlazor Docs</a>
    ///     Specifies how to match the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-RasterPresetRenderer.html#renderer">renderer</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-RasterPresetRenderer.html#method">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Method? Method { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.html#rasterpresetrenderername-property">GeoBlazor Docs</a>
    ///     The name of the preset renderer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-RasterPresetRenderer.html#name">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Name { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Renderers.RasterPresetRenderer.html#rasterpresetrenderervalue-property">GeoBlazor Docs</a>
    ///     The corresponding value of selected <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-RasterPresetRenderer.html#method">method</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-support-RasterPresetRenderer.html#value">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Value { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the BandIds property.
    /// </summary>
    public async Task<IReadOnlyList<long>?> GetBandIds()
    {
        if (CoreJsModule is null)
        {
            return BandIds;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return BandIds;
        }

        // get the property value
        IReadOnlyList<long>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<long>?>("getProperty",
            CancellationTokenSource.Token, "bandIds");
        if (result is not null)
        {
#pragma warning disable BL0005
             BandIds = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(BandIds)] = BandIds;
        }
         
        return BandIds;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Method property.
    /// </summary>
    public async Task<Method?> GetMethod()
    {
        if (CoreJsModule is null)
        {
            return Method;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Method;
        }

        // get the property value
        JsNullableEnumWrapper<Method>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<Method>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "method");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Method = (Method)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Method)] = Method;
        }
         
        return Method;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Name property.
    /// </summary>
    public async Task<string?> GetName()
    {
        if (CoreJsModule is null)
        {
            return Name;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Name;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "name");
        if (result is not null)
        {
#pragma warning disable BL0005
             Name = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Name)] = Name;
        }
         
        return Name;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Value property.
    /// </summary>
    public async Task<string?> GetValue()
    {
        if (CoreJsModule is null)
        {
            return Value;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Value;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "value");
        if (result is not null)
        {
#pragma warning disable BL0005
             Value = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Value)] = Value;
        }
         
        return Value;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the BandIds property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBandIds(IReadOnlyList<long>? value)
    {
#pragma warning disable BL0005
        BandIds = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(BandIds)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "bandIds", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Method property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMethod(Method? value)
    {
#pragma warning disable BL0005
        Method = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Method)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "method", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Name property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetName(string? value)
    {
#pragma warning disable BL0005
        Name = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Name)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "name", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Value property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetValue(string? value)
    {
#pragma warning disable BL0005
        Value = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Value)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "value", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the BandIds property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToBandIds(params long[] values)
    {
        long[] join = BandIds is null
            ? values
            : [..BandIds, ..values];
        await SetBandIds(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the BandIds property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromBandIds(params long[] values)
    {
        if (BandIds is null)
        {
            return;
        }
        await SetBandIds(BandIds.Except(values).ToArray());
    }
    
#endregion

}
