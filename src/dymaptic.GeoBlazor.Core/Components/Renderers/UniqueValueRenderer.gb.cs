// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components.Renderers;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Renderers.UniqueValueRenderer.html">GeoBlazor Docs</a>
///     UniqueValueRenderer allows you to symbolize features in a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-Layer.html">Layer</a> based on one or more categorical attributes.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class UniqueValueRenderer : IRendererWithVisualVariables,
    IVisualVariablesMixin
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public UniqueValueRenderer()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="authoringInfo">
    ///     Authoring metadata only included in renderers generated from one of the Smart Mapping creator methods, such as <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-size.html#createContinuousRenderer">sizeRendererCreator.createContinuousRenderer()</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-smartMapping-renderers-color.html#createContinuousRenderer">colorRendererCreator.createContinuousRenderer()</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-Renderer.html#authoringInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="backgroundFillSymbol">
    ///     This property is only relevant when symbolizing polygon features with marker symbols (or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-IconSymbol3DLayer.html">IconSymbol3DLayer</a>) in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#uniqueValueInfos">uniqueValueInfos</a> of this renderer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#backgroundFillSymbol">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="defaultLabel">
    ///     The label used in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html">Legend</a> to describe features assigned the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#defaultSymbol">default symbol</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#defaultLabel">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="defaultSymbol">
    ///     The symbol used to draw all features with values not referenced by <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#uniqueValueInfos">uniqueValueInfos</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#uniqueValueGroups">uniqueValueGroups</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#defaultSymbol">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="field">
    ///     The name of the attribute field containing types or categorical values referenced in <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#uniqueValueInfos">uniqueValueInfos</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#uniqueValueGroups">uniqueValueGroups</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#field">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="field2">
    ///     Specifies the name of an additional attribute field used to categorize features.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#field2">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="field3">
    ///     Specifies the name of a third attribute field used to categorize features.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#field3">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="fieldDelimiter">
    ///     A string used as a separator between the values in the legend if multiple attribute fields are used to categorize values.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#fieldDelimiter">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="legendOptions">
    ///     An object providing options for displaying the renderer in the Legend.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#legendOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="orderByClassesEnabled">
    ///     Indicates whether the order of the classes or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#uniqueValueInfos">uniqueValueInfos</a> in the renderer definition should be used for the feature drawing order of the layer.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#orderByClassesEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="uniqueValueGroups">
    ///     An array of objects defining groups of unique values.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#uniqueValueGroups">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="uniqueValueInfos">
    ///     Defines categories and their corresponding symbols based on a set of values expected from the provided <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#field">field</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#valueExpression">valueExpression</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#uniqueValueInfos">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="valueExpression">
    ///     An <a target="_blank" href="https://developers.arcgis.com/javascript/latest/arcade/">Arcade</a> expression following the specification defined by the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/arcade/#visualization">Arcade Visualization Profile</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#valueExpression">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="valueExpressionTitle">
    ///     The title identifying and describing the associated <a target="_blank" href="https://developers.arcgis.com/javascript/latest/arcade/">Arcade</a> expression as defined in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#valueExpression">valueExpression</a> property.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#valueExpressionTitle">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="visualVariables">
    ///     An array of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html">VisualVariable</a> objects.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-mixins-VisualVariablesMixin.html#visualVariables">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public UniqueValueRenderer(
        AuthoringInfo? authoringInfo = null,
        FillSymbol? backgroundFillSymbol = null,
        string? defaultLabel = null,
        Symbol? defaultSymbol = null,
        string? field = null,
        string? field2 = null,
        string? field3 = null,
        string? fieldDelimiter = null,
        UniqueValueRendererLegendOptions? legendOptions = null,
        bool? orderByClassesEnabled = null,
        IReadOnlyList<UniqueValueGroup>? uniqueValueGroups = null,
        IReadOnlyList<UniqueValueInfo>? uniqueValueInfos = null,
        string? valueExpression = null,
        string? valueExpressionTitle = null,
        IReadOnlyList<VisualVariable>? visualVariables = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        AuthoringInfo = authoringInfo;
        BackgroundFillSymbol = backgroundFillSymbol;
        DefaultLabel = defaultLabel;
        DefaultSymbol = defaultSymbol;
        Field = field;
        Field2 = field2;
        Field3 = field3;
        FieldDelimiter = fieldDelimiter;
        LegendOptions = legendOptions;
        OrderByClassesEnabled = orderByClassesEnabled;
        UniqueValueGroups = uniqueValueGroups;
        UniqueValueInfos = uniqueValueInfos;
        ValueExpression = valueExpression;
        ValueExpressionTitle = valueExpressionTitle;
        VisualVariables = visualVariables;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     This property is only relevant when symbolizing polygon features with marker symbols (or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-IconSymbol3DLayer.html">IconSymbol3DLayer</a>) in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#uniqueValueInfos">uniqueValueInfos</a> of this renderer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#backgroundFillSymbol">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public FillSymbol? BackgroundFillSymbol { get; set; }
    
    /// <summary>
    ///     The symbol used to draw all features with values not referenced by <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#uniqueValueInfos">uniqueValueInfos</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#uniqueValueGroups">uniqueValueGroups</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#defaultSymbol">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Symbol? DefaultSymbol { get; set; }
    
    /// <summary>
    ///     Specifies the name of an additional attribute field used to categorize features.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#field2">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Field2 { get; set; }
    
    /// <summary>
    ///     Specifies the name of a third attribute field used to categorize features.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#field3">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Field3 { get; set; }
    
    /// <summary>
    ///     A string used as a separator between the values in the legend if multiple attribute fields are used to categorize values.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#fieldDelimiter">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? FieldDelimiter { get; set; }
    
    /// <summary>
    ///     An object providing options for displaying the renderer in the Legend.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#legendOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public UniqueValueRendererLegendOptions? LegendOptions { get; set; }
    
    /// <summary>
    ///     Indicates whether the order of the classes or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#uniqueValueInfos">uniqueValueInfos</a> in the renderer definition should be used for the feature drawing order of the layer.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#orderByClassesEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? OrderByClassesEnabled { get; set; }
    
    /// <summary>
    ///     An array of objects defining groups of unique values.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#uniqueValueGroups">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<UniqueValueGroup>? UniqueValueGroups { get; set; }
    
    /// <summary>
    ///     Defines categories and their corresponding symbols based on a set of values expected from the provided <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#field">field</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#valueExpression">valueExpression</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#uniqueValueInfos">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<UniqueValueInfo>? UniqueValueInfos { get; set; }
    
    /// <summary>
    ///     An <a target="_blank" href="https://developers.arcgis.com/javascript/latest/arcade/">Arcade</a> expression following the specification defined by the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/arcade/#visualization">Arcade Visualization Profile</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#valueExpression">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? ValueExpression { get; set; }
    
    /// <summary>
    ///     The title identifying and describing the associated <a target="_blank" href="https://developers.arcgis.com/javascript/latest/arcade/">Arcade</a> expression as defined in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#valueExpression">valueExpression</a> property.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#valueExpressionTitle">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? ValueExpressionTitle { get; set; }
    
    /// <summary>
    ///     An array of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html">VisualVariable</a> objects.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-mixins-VisualVariablesMixin.html#visualVariables">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<VisualVariable>? VisualVariables { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the BackgroundFillSymbol property.
    /// </summary>
    public async Task<FillSymbol?> GetBackgroundFillSymbol()
    {
        if (CoreJsModule is null)
        {
            return BackgroundFillSymbol;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return BackgroundFillSymbol;
        }

        FillSymbol? result = await JsComponentReference.InvokeAsync<FillSymbol?>(
            "getBackgroundFillSymbol", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            BackgroundFillSymbol = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(BackgroundFillSymbol)] = BackgroundFillSymbol;
        }
        
        return BackgroundFillSymbol;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DefaultLabel property.
    /// </summary>
    public async Task<string?> GetDefaultLabel()
    {
        if (CoreJsModule is null)
        {
            return DefaultLabel;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return DefaultLabel;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "defaultLabel");
        if (result is not null)
        {
#pragma warning disable BL0005
             DefaultLabel = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DefaultLabel)] = DefaultLabel;
        }
         
        return DefaultLabel;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DefaultSymbol property.
    /// </summary>
    public async Task<Symbol?> GetDefaultSymbol()
    {
        if (CoreJsModule is null)
        {
            return DefaultSymbol;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return DefaultSymbol;
        }

        Symbol? result = await JsComponentReference.InvokeAsync<Symbol?>(
            "getDefaultSymbol", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            DefaultSymbol = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(DefaultSymbol)] = DefaultSymbol;
        }
        
        return DefaultSymbol;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Field property.
    /// </summary>
    public async Task<string?> GetField()
    {
        if (CoreJsModule is null)
        {
            return Field;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Field;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "field");
        if (result is not null)
        {
#pragma warning disable BL0005
             Field = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Field)] = Field;
        }
         
        return Field;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Field2 property.
    /// </summary>
    public async Task<string?> GetField2()
    {
        if (CoreJsModule is null)
        {
            return Field2;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Field2;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "field2");
        if (result is not null)
        {
#pragma warning disable BL0005
             Field2 = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Field2)] = Field2;
        }
         
        return Field2;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Field3 property.
    /// </summary>
    public async Task<string?> GetField3()
    {
        if (CoreJsModule is null)
        {
            return Field3;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Field3;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "field3");
        if (result is not null)
        {
#pragma warning disable BL0005
             Field3 = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Field3)] = Field3;
        }
         
        return Field3;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FieldDelimiter property.
    /// </summary>
    public async Task<string?> GetFieldDelimiter()
    {
        if (CoreJsModule is null)
        {
            return FieldDelimiter;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return FieldDelimiter;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "fieldDelimiter");
        if (result is not null)
        {
#pragma warning disable BL0005
             FieldDelimiter = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FieldDelimiter)] = FieldDelimiter;
        }
         
        return FieldDelimiter;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LegendOptions property.
    /// </summary>
    public async Task<UniqueValueRendererLegendOptions?> GetLegendOptions()
    {
        if (CoreJsModule is null)
        {
            return LegendOptions;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return LegendOptions;
        }

        UniqueValueRendererLegendOptions? result = await JsComponentReference.InvokeAsync<UniqueValueRendererLegendOptions?>(
            "getLegendOptions", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            LegendOptions = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(LegendOptions)] = LegendOptions;
        }
        
        return LegendOptions;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the OrderByClassesEnabled property.
    /// </summary>
    public async Task<bool?> GetOrderByClassesEnabled()
    {
        if (CoreJsModule is null)
        {
            return OrderByClassesEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return OrderByClassesEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "orderByClassesEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             OrderByClassesEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(OrderByClassesEnabled)] = OrderByClassesEnabled;
        }
         
        return OrderByClassesEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the UniqueValueGroups property.
    /// </summary>
    public async Task<IReadOnlyList<UniqueValueGroup>?> GetUniqueValueGroups()
    {
        if (CoreJsModule is null)
        {
            return UniqueValueGroups;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return UniqueValueGroups;
        }

        IReadOnlyList<UniqueValueGroup>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<UniqueValueGroup>?>(
            "getUniqueValueGroups", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            UniqueValueGroups = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(UniqueValueGroups)] = UniqueValueGroups;
        }
        
        return UniqueValueGroups;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the UniqueValueInfos property.
    /// </summary>
    public async Task<IReadOnlyList<UniqueValueInfo>?> GetUniqueValueInfos()
    {
        if (CoreJsModule is null)
        {
            return UniqueValueInfos;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return UniqueValueInfos;
        }

        IReadOnlyList<UniqueValueInfo>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<UniqueValueInfo>?>(
            "getUniqueValueInfos", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            UniqueValueInfos = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(UniqueValueInfos)] = UniqueValueInfos;
        }
        
        return UniqueValueInfos;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ValueExpression property.
    /// </summary>
    public async Task<string?> GetValueExpression()
    {
        if (CoreJsModule is null)
        {
            return ValueExpression;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ValueExpression;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "valueExpression");
        if (result is not null)
        {
#pragma warning disable BL0005
             ValueExpression = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ValueExpression)] = ValueExpression;
        }
         
        return ValueExpression;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ValueExpressionTitle property.
    /// </summary>
    public async Task<string?> GetValueExpressionTitle()
    {
        if (CoreJsModule is null)
        {
            return ValueExpressionTitle;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ValueExpressionTitle;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "valueExpressionTitle");
        if (result is not null)
        {
#pragma warning disable BL0005
             ValueExpressionTitle = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ValueExpressionTitle)] = ValueExpressionTitle;
        }
         
        return ValueExpressionTitle;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the VisualVariables property.
    /// </summary>
    public async Task<IReadOnlyList<VisualVariable>?> GetVisualVariables()
    {
        if (CoreJsModule is null)
        {
            return VisualVariables;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return VisualVariables;
        }

        IReadOnlyList<VisualVariable>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<VisualVariable>?>(
            "getVisualVariables", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            VisualVariables = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(VisualVariables)] = VisualVariables;
        }
        
        return VisualVariables;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the BackgroundFillSymbol property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBackgroundFillSymbol(FillSymbol? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        BackgroundFillSymbol = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(BackgroundFillSymbol)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setBackgroundFillSymbol", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DefaultLabel property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDefaultLabel(string? value)
    {
#pragma warning disable BL0005
        DefaultLabel = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DefaultLabel)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "defaultLabel", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DefaultSymbol property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDefaultSymbol(Symbol? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        DefaultSymbol = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DefaultSymbol)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setDefaultSymbol", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Field property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetField(string? value)
    {
#pragma warning disable BL0005
        Field = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Field)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "field", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Field2 property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetField2(string? value)
    {
#pragma warning disable BL0005
        Field2 = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Field2)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "field2", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Field3 property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetField3(string? value)
    {
#pragma warning disable BL0005
        Field3 = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Field3)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "field3", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FieldDelimiter property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFieldDelimiter(string? value)
    {
#pragma warning disable BL0005
        FieldDelimiter = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FieldDelimiter)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "fieldDelimiter", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LegendOptions property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLegendOptions(UniqueValueRendererLegendOptions? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        LegendOptions = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LegendOptions)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setLegendOptions", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the OrderByClassesEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetOrderByClassesEnabled(bool? value)
    {
#pragma warning disable BL0005
        OrderByClassesEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(OrderByClassesEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "orderByClassesEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the UniqueValueGroups property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUniqueValueGroups(IReadOnlyList<UniqueValueGroup>? value)
    {
        if (value is not null)
        {
            foreach (UniqueValueGroup item in value)
            {
                item.CoreJsModule = CoreJsModule;
                item.Parent = this;
                item.Layer = Layer;
                item.View = View;
            }
        }
        
#pragma warning disable BL0005
        UniqueValueGroups = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(UniqueValueGroups)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setUniqueValueGroups", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the UniqueValueInfos property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUniqueValueInfos(IReadOnlyList<UniqueValueInfo>? value)
    {
        if (value is not null)
        {
            foreach (UniqueValueInfo item in value)
            {
                item.CoreJsModule = CoreJsModule;
                item.Parent = this;
                item.Layer = Layer;
                item.View = View;
            }
        }
        
#pragma warning disable BL0005
        UniqueValueInfos = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(UniqueValueInfos)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setUniqueValueInfos", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ValueExpression property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetValueExpression(string? value)
    {
#pragma warning disable BL0005
        ValueExpression = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ValueExpression)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "valueExpression", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ValueExpressionTitle property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetValueExpressionTitle(string? value)
    {
#pragma warning disable BL0005
        ValueExpressionTitle = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ValueExpressionTitle)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "valueExpressionTitle", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the VisualVariables property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetVisualVariables(IReadOnlyList<VisualVariable>? value)
    {
        if (value is not null)
        {
            foreach (VisualVariable item in value)
            {
                item.CoreJsModule = CoreJsModule;
                item.Parent = this;
                item.Layer = Layer;
                item.View = View;
            }
        }
        
#pragma warning disable BL0005
        VisualVariables = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(VisualVariables)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setVisualVariables", 
            CancellationTokenSource.Token, value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the UniqueValueGroups property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToUniqueValueGroups(params UniqueValueGroup[] values)
    {
        UniqueValueGroup[] join = UniqueValueGroups is null
            ? values
            : [..UniqueValueGroups, ..values];
        await SetUniqueValueGroups(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the UniqueValueInfos property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToUniqueValueInfos(params UniqueValueInfo[] values)
    {
        UniqueValueInfo[] join = UniqueValueInfos is null
            ? values
            : [..UniqueValueInfos, ..values];
        await SetUniqueValueInfos(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the VisualVariables property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToVisualVariables(params VisualVariable[] values)
    {
        VisualVariable[] join = VisualVariables is null
            ? values
            : [..VisualVariables, ..values];
        await SetVisualVariables(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the UniqueValueGroups property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromUniqueValueGroups(params UniqueValueGroup[] values)
    {
        if (UniqueValueGroups is null)
        {
            return;
        }
        await SetUniqueValueGroups(UniqueValueGroups.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the UniqueValueInfos property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromUniqueValueInfos(params UniqueValueInfo[] values)
    {
        if (UniqueValueInfos is null)
        {
            return;
        }
        await SetUniqueValueInfos(UniqueValueInfos.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the VisualVariables property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromVisualVariables(params VisualVariable[] values)
    {
        if (VisualVariables is null)
        {
            return;
        }
        await SetVisualVariables(VisualVariables.Except(values).ToArray());
    }
    
#endregion

#region Public Methods

    /// <summary>
    ///     Adds a unique value and symbol to the renderer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#addUniqueValueInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="valueOrInfo">
    ///     The value to match. The value can be provided
    ///     as an individual argument or as an <a href="#uniqueValueInfos">info object described in uniqueValueInfos</a>.
    /// </param>
    /// <param name="symbol">
    ///     The symbol used to represent features matching the
    ///     specified <code>value</code>.
    /// </param>
    [ArcGISMethod]
    public async Task AddUniqueValueInfo(string valueOrInfo,
        Symbol symbol)
    {
        if (CoreJsModule is null)
        {
            return;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference!.InvokeVoidAsync(
            "addUniqueValueInfo", 
            CancellationTokenSource.Token,
            valueOrInfo,
            symbol);
    }
    
    /// <summary>
    ///     Returns rendering and legend information (as defined by the renderer) associated with the given graphic.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#getUniqueValueInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="graphic">
    ///     The graphic whose rendering and legend information will be returned.
    /// </param>
    [ArcGISMethod]
    public async Task<UniqueValueInfo?> GetUniqueValueInfo(Graphic graphic)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<UniqueValueInfo?>(
            "getUniqueValueInfo", 
            CancellationTokenSource.Token,
            graphic);
    }
    
    /// <summary>
    ///     Removes a unique value from the renderer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-UniqueValueRenderer.html#removeUniqueValueInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="value">
    ///     Value to remove from <a href="#uniqueValueInfos">uniqueValueInfos</a>.
    /// </param>
    [ArcGISMethod]
    public async Task RemoveUniqueValueInfo(string value)
    {
        if (CoreJsModule is null)
        {
            return;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference!.InvokeVoidAsync(
            "removeUniqueValueInfo", 
            CancellationTokenSource.Token,
            value);
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case FillSymbol backgroundFillSymbol:
                if (backgroundFillSymbol != BackgroundFillSymbol)
                {
                    BackgroundFillSymbol = backgroundFillSymbol;
                    ModifiedParameters[nameof(BackgroundFillSymbol)] = BackgroundFillSymbol;
                }
                
                return true;
            case Symbol defaultSymbol:
                if (defaultSymbol != DefaultSymbol)
                {
                    DefaultSymbol = defaultSymbol;
                    ModifiedParameters[nameof(DefaultSymbol)] = DefaultSymbol;
                }
                
                return true;
            case UniqueValueRendererLegendOptions legendOptions:
                if (legendOptions != LegendOptions)
                {
                    LegendOptions = legendOptions;
                    ModifiedParameters[nameof(LegendOptions)] = LegendOptions;
                }
                
                return true;
            case UniqueValueGroup uniqueValueGroups:
                UniqueValueGroups ??= [];
                if (!UniqueValueGroups.Contains(uniqueValueGroups))
                {
                    UniqueValueGroups = [..UniqueValueGroups, uniqueValueGroups];
                    ModifiedParameters[nameof(UniqueValueGroups)] = UniqueValueGroups;
                }
                
                return true;
            case UniqueValueInfo uniqueValueInfos:
                UniqueValueInfos ??= [];
                if (!UniqueValueInfos.Contains(uniqueValueInfos))
                {
                    UniqueValueInfos = [..UniqueValueInfos, uniqueValueInfos];
                    ModifiedParameters[nameof(UniqueValueInfos)] = UniqueValueInfos;
                }
                
                return true;
            case VisualVariable visualVariables:
                VisualVariables ??= [];
                if (!VisualVariables.Contains(visualVariables))
                {
                    VisualVariables = [..VisualVariables, visualVariables];
                    ModifiedParameters[nameof(VisualVariables)] = VisualVariables;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case FillSymbol _:
                BackgroundFillSymbol = null;
                ModifiedParameters[nameof(BackgroundFillSymbol)] = BackgroundFillSymbol;
                return true;
            case Symbol _:
                DefaultSymbol = null;
                ModifiedParameters[nameof(DefaultSymbol)] = DefaultSymbol;
                return true;
            case UniqueValueRendererLegendOptions _:
                LegendOptions = null;
                ModifiedParameters[nameof(LegendOptions)] = LegendOptions;
                return true;
            case UniqueValueGroup uniqueValueGroups:
                UniqueValueGroups = UniqueValueGroups?.Where(u => u != uniqueValueGroups).ToList();
                ModifiedParameters[nameof(UniqueValueGroups)] = UniqueValueGroups;
                return true;
            case UniqueValueInfo uniqueValueInfos:
                UniqueValueInfos = UniqueValueInfos?.Where(u => u != uniqueValueInfos).ToList();
                ModifiedParameters[nameof(UniqueValueInfos)] = UniqueValueInfos;
                return true;
            case VisualVariable visualVariables:
                VisualVariables = VisualVariables?.Where(v => v != visualVariables).ToList();
                ModifiedParameters[nameof(VisualVariables)] = VisualVariables;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        BackgroundFillSymbol?.ValidateRequiredGeneratedChildren();
        DefaultSymbol?.ValidateRequiredGeneratedChildren();
        LegendOptions?.ValidateRequiredGeneratedChildren();
        if (UniqueValueGroups is not null)
        {
            foreach (UniqueValueGroup child in UniqueValueGroups)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        if (UniqueValueInfos is not null)
        {
            foreach (UniqueValueInfo child in UniqueValueInfos)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        if (VisualVariables is not null)
        {
            foreach (VisualVariable child in VisualVariables)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        base.ValidateRequiredGeneratedChildren();
    }
      
}
