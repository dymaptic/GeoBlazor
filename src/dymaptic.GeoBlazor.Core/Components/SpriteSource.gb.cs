// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    The sprite source returned from the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#setSpriteSource">setSpriteSource</a> method.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteSource">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class SpriteSource : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public SpriteSource()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="baseUrl">
    ///     The base URL of the sprites source.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteSource">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="devicePixelRatio">
    ///     The device pixel ratio of the sprite source.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteSource">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="getSpriteInfo">
    ///     Returns the sprite info for the given sprite.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteSource">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="height">
    ///     The height in pixels of the sprite source.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteSource">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="image">
    ///     The sprite image data.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteSource">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="loadStatus">
    ///     Indicates whether the sprite source is loaded successfully.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteSource">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="width">
    ///     The width in pixels of the sprite source.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteSource">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public SpriteSource(
        string? baseUrl = null,
        double? devicePixelRatio = null,
        GetSpriteInfo? getSpriteInfo = null,
        int? height = null,
        Stream? image = null,
        string? loadStatus = null,
        int? width = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        BaseUrl = baseUrl;
        DevicePixelRatio = devicePixelRatio;
        GetSpriteInfo = getSpriteInfo;
        Height = height;
        Image = image;
        LoadStatus = loadStatus;
        Width = width;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The base URL of the sprites source.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteSource">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? BaseUrl { get; set; }
    
    /// <summary>
    ///     The device pixel ratio of the sprite source.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteSource">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? DevicePixelRatio { get; set; }
    
    /// <summary>
    ///     Returns the sprite info for the given sprite.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteSource">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    public GetSpriteInfo? GetSpriteInfo { get; set; }
    
    /// <summary>
    ///     A convenience property that signifies whether a custom <see cref="GetSpriteInfo" /> function was registered.
    public bool HasGetSpriteInfo => GetSpriteInfo is not null;
    /// <summary>
    ///     The height in pixels of the sprite source.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteSource">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public int? Height { get; set; }
    
    /// <summary>
    ///     The sprite image data.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteSource">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Stream? Image { get; set; }
    
    /// <summary>
    ///     Indicates whether the sprite source is loaded successfully.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteSource">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? LoadStatus { get; set; }
    
    /// <summary>
    ///     The width in pixels of the sprite source.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html#SpriteSource">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public int? Width { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the BaseUrl property.
    /// </summary>
    public async Task<string?> GetBaseUrl()
    {
        if (CoreJsModule is null)
        {
            return BaseUrl;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return BaseUrl;
        }

        // get the property value
#pragma warning disable BL0005
        BaseUrl = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "baseUrl");
#pragma warning restore BL0005
         ModifiedParameters[nameof(BaseUrl)] = BaseUrl;
        return BaseUrl;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DevicePixelRatio property.
    /// </summary>
    public async Task<double?> GetDevicePixelRatio()
    {
        if (CoreJsModule is null)
        {
            return DevicePixelRatio;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return DevicePixelRatio;
        }

        // get the property value
#pragma warning disable BL0005
        DevicePixelRatio = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "devicePixelRatio");
#pragma warning restore BL0005
         ModifiedParameters[nameof(DevicePixelRatio)] = DevicePixelRatio;
        return DevicePixelRatio;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the GetSpriteInfo property.
    /// </summary>
    public async Task<GetSpriteInfo?> GetGetSpriteInfo()
    {
        if (CoreJsModule is null)
        {
            return GetSpriteInfo;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return GetSpriteInfo;
        }

        // get the property value
#pragma warning disable BL0005
        GetSpriteInfo = await CoreJsModule!.InvokeAsync<GetSpriteInfo?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "getSpriteInfo");
#pragma warning restore BL0005
         ModifiedParameters[nameof(GetSpriteInfo)] = GetSpriteInfo;
        return GetSpriteInfo;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Height property.
    /// </summary>
    public async Task<int?> GetHeight()
    {
        if (CoreJsModule is null)
        {
            return Height;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Height;
        }

        // get the property value
#pragma warning disable BL0005
        Height = await CoreJsModule!.InvokeAsync<int>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "height");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Height)] = Height;
        return Height;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Image property.
    /// </summary>
    public async Task<Stream?> GetImage()
    {
        if (CoreJsModule is null)
        {
            return Image;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Image;
        }

        // get the property value
#pragma warning disable BL0005
        Image = await CoreJsModule!.InvokeAsync<Stream?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "image");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Image)] = Image;
        return Image;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LoadStatus property.
    /// </summary>
    public async Task<string?> GetLoadStatus()
    {
        if (CoreJsModule is null)
        {
            return LoadStatus;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return LoadStatus;
        }

        // get the property value
#pragma warning disable BL0005
        LoadStatus = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "loadStatus");
#pragma warning restore BL0005
         ModifiedParameters[nameof(LoadStatus)] = LoadStatus;
        return LoadStatus;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Width property.
    /// </summary>
    public async Task<int?> GetWidth()
    {
        if (CoreJsModule is null)
        {
            return Width;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Width;
        }

        // get the property value
#pragma warning disable BL0005
        Width = await CoreJsModule!.InvokeAsync<int>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "width");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Width)] = Width;
        return Width;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the BaseUrl property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBaseUrl(string value)
    {
#pragma warning disable BL0005
        BaseUrl = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(BaseUrl)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "baseUrl", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DevicePixelRatio property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDevicePixelRatio(double value)
    {
#pragma warning disable BL0005
        DevicePixelRatio = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DevicePixelRatio)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "devicePixelRatio", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the GetSpriteInfo property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetGetSpriteInfo(GetSpriteInfo value)
    {
#pragma warning disable BL0005
        GetSpriteInfo = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(GetSpriteInfo)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "getSpriteInfo", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Height property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHeight(int value)
    {
#pragma warning disable BL0005
        Height = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Height)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "height", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Image property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetImage(Stream value)
    {
#pragma warning disable BL0005
        Image = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Image)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "image", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LoadStatus property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLoadStatus(string value)
    {
#pragma warning disable BL0005
        LoadStatus = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LoadStatus)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "loadStatus", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Width property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetWidth(int value)
    {
#pragma warning disable BL0005
        Width = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Width)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "width", value);
    }
    
#endregion




}
