// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    A TableTemplate formats and defines the content of a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable.html">FeatureTable</a>.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable-support-TableTemplate.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class TableTemplate : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public TableTemplate()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="columnTemplates">
    ///     A collection of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable-support-FieldColumnTemplate.html">field column templates</a> and/or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable-support-GroupColumnTemplate.html">group column templates</a> that represent an ordered list of column templates.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable-support-TableTemplate.html#columnTemplates">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public TableTemplate(
        IReadOnlyList<IColumnTemplateBase>? columnTemplates = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        ColumnTemplates = columnTemplates;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     A collection of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable-support-FieldColumnTemplate.html">field column templates</a> and/or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable-support-GroupColumnTemplate.html">group column templates</a> that represent an ordered list of column templates.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureTable-support-TableTemplate.html#columnTemplates">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<IColumnTemplateBase>? ColumnTemplates { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the ColumnTemplates property.
    /// </summary>
    public async Task<IReadOnlyList<IColumnTemplateBase>?> GetColumnTemplates()
    {
        if (CoreJsModule is null)
        {
            return ColumnTemplates;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ColumnTemplates;
        }

        // get the property value
        IReadOnlyList<IColumnTemplateBase>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<IColumnTemplateBase>?>("getProperty",
            CancellationTokenSource.Token, "columnTemplates");
        if (result is not null)
        {
#pragma warning disable BL0005
             ColumnTemplates = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ColumnTemplates)] = ColumnTemplates;
        }
         
        return ColumnTemplates;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the ColumnTemplates property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetColumnTemplates(IReadOnlyList<IColumnTemplateBase>? value)
    {
#pragma warning disable BL0005
        ColumnTemplates = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ColumnTemplates)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "columnTemplates", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the ColumnTemplates property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToColumnTemplates(params IColumnTemplateBase[] values)
    {
        IColumnTemplateBase[] join = ColumnTemplates is null
            ? values
            : [..ColumnTemplates, ..values];
        await SetColumnTemplates(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the ColumnTemplates property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromColumnTemplates(params IColumnTemplateBase[] values)
    {
        if (ColumnTemplates is null)
        {
            return;
        }
        await SetColumnTemplates(ColumnTemplates.Except(values).ToArray());
    }
    
#endregion

}
