// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Describes general raster data information exposed by the ArcGIS REST API for <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryLayer.html">ImageryLayer</a>, <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryTileLayer.html">ImageryTileLayer</a> and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WCSLayer.html">WCSLayer</a>.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class RasterInfo : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public RasterInfo()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="attributeTable">
    ///     The raster attribute table associated with an imagery layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#attributeTable">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="bandCount">
    ///     Raster band count.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#bandCount">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="bandInfos">
    ///     This property provides additional information for each band in the raster.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#bandInfos">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="colormap">
    ///     Raster colormap that can be used to display the imagery layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#colormap">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="dataType">
    ///     Raster data type controls how the data is rendered by default.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#dataType">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="extent">
    ///     The minimum and maximum X and Y coordinates of a bounding box containing all the raster data.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#extent">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="hasMultidimensionalTranspose">
    ///     Indicates whether the source multidimensional data has been transposed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#hasMultidimensionalTranspose">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="height">
    ///     Raster height (row count) in pixels.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#height">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="histograms">
    ///     Raster histograms return basic name-value pairs for number of bins, min and max bounding values, counts of pixels in each bin.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#histograms">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="keyProperties">
    ///     Raster key properties.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#keyProperties">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="multidimensionalInfo">
    ///     Returns the multidimensional information associated with the raster service referenced in an imagery layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#multidimensionalInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="pixelSize">
    ///     Raster pixel size.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#pixelSize">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="pixelType">
    ///     Pixel type for the raster data source.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#pixelType">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="sensorInfo">
    ///     The sensor information associated with an image service referenced by a layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#sensorInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="spatialReference">
    ///     The spatial reference of the raster.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#spatialReference">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="statistics">
    ///     Raster band statistics.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#statistics">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="width">
    ///     Raster width (column count) in pixels.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#width">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public RasterInfo(
        FeatureSet? attributeTable = null,
        int? bandCount = null,
        IReadOnlyList<RasterBandInfo>? bandInfos = null,
        IReadOnlyList<ColormapPixel>? colormap = null,
        DataType? dataType = null,
        Extent? extent = null,
        bool? hasMultidimensionalTranspose = null,
        int? height = null,
        IReadOnlyList<string>? histograms = null,
        string? keyProperties = null,
        RasterMultidimensionalInfo? multidimensionalInfo = null,
        RasterInfoPixelSize? pixelSize = null,
        PixelType? pixelType = null,
        RasterSensorInfo? sensorInfo = null,
        SpatialReference? spatialReference = null,
        IReadOnlyList<RasterInfoStatistics>? statistics = null,
        int? width = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        AttributeTable = attributeTable;
        BandCount = bandCount;
        BandInfos = bandInfos;
        Colormap = colormap;
        DataType = dataType;
        Extent = extent;
        HasMultidimensionalTranspose = hasMultidimensionalTranspose;
        Height = height;
        Histograms = histograms;
        KeyProperties = keyProperties;
        MultidimensionalInfo = multidimensionalInfo;
        PixelSize = pixelSize;
        PixelType = pixelType;
        SensorInfo = sensorInfo;
        SpatialReference = spatialReference;
        Statistics = statistics;
        Width = width;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The raster attribute table associated with an imagery layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#attributeTable">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public FeatureSet? AttributeTable { get; set; }
    
    /// <summary>
    ///     Raster band count.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#bandCount">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public int? BandCount { get; set; }
    
    /// <summary>
    ///     This property provides additional information for each band in the raster.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#bandInfos">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<RasterBandInfo>? BandInfos { get; set; }
    
    /// <summary>
    ///     Raster colormap that can be used to display the imagery layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#colormap">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<ColormapPixel>? Colormap { get; set; }
    
    /// <summary>
    ///     Raster data type controls how the data is rendered by default.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#dataType">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public DataType? DataType { get; set; }
    
    /// <summary>
    ///     The pixel value representing no available information.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#noDataValue">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<double?>? DoubleCollectionNoDataValue { get; set; }
    
    /// <summary>
    ///     The pixel value representing no available information.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#noDataValue">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? DoubleNoDataValue { get; set; }
    
    /// <summary>
    ///     The minimum and maximum X and Y coordinates of a bounding box containing all the raster data.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#extent">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Extent? Extent { get; set; }
    
    /// <summary>
    ///     Indicates whether the source multidimensional data has been transposed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#hasMultidimensionalTranspose">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? HasMultidimensionalTranspose { get; set; }
    
    /// <summary>
    ///     Raster height (row count) in pixels.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#height">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public int? Height { get; set; }
    
    /// <summary>
    ///     Raster histograms return basic name-value pairs for number of bins, min and max bounding values, counts of pixels in each bin.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#histograms">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<string>? Histograms { get; set; }
    
    /// <summary>
    ///     Raster key properties.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#keyProperties">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? KeyProperties { get; set; }
    
    /// <summary>
    ///     Returns the multidimensional information associated with the raster service referenced in an imagery layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#multidimensionalInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public RasterMultidimensionalInfo? MultidimensionalInfo { get; set; }
    
    /// <summary>
    ///     Raster pixel size.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#pixelSize">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public RasterInfoPixelSize? PixelSize { get; set; }
    
    /// <summary>
    ///     Pixel type for the raster data source.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#pixelType">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public PixelType? PixelType { get; set; }
    
    /// <summary>
    ///     The sensor information associated with an image service referenced by a layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#sensorInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public RasterSensorInfo? SensorInfo { get; set; }
    
    /// <summary>
    ///     The spatial reference of the raster.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#spatialReference">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SpatialReference? SpatialReference { get; set; }
    
    /// <summary>
    ///     Raster band statistics.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#statistics">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<RasterInfoStatistics>? Statistics { get; set; }
    
    /// <summary>
    ///     Raster width (column count) in pixels.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#width">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public int? Width { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the AttributeTable property.
    /// </summary>
    public async Task<FeatureSet?> GetAttributeTable()
    {
        if (CoreJsModule is null)
        {
            return AttributeTable;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return AttributeTable;
        }

        // get the property value
#pragma warning disable BL0005
        AttributeTable = await CoreJsModule!.InvokeAsync<FeatureSet?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "attributeTable");
#pragma warning restore BL0005
         ModifiedParameters[nameof(AttributeTable)] = AttributeTable;
        return AttributeTable;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the BandCount property.
    /// </summary>
    public async Task<int?> GetBandCount()
    {
        if (CoreJsModule is null)
        {
            return BandCount;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return BandCount;
        }

        // get the property value
#pragma warning disable BL0005
        BandCount = await CoreJsModule!.InvokeAsync<int>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "bandCount");
#pragma warning restore BL0005
         ModifiedParameters[nameof(BandCount)] = BandCount;
        return BandCount;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the BandInfos property.
    /// </summary>
    public async Task<IReadOnlyList<RasterBandInfo>?> GetBandInfos()
    {
        if (CoreJsModule is null)
        {
            return BandInfos;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return BandInfos;
        }

        // get the property value
#pragma warning disable BL0005
        BandInfos = await CoreJsModule!.InvokeAsync<IReadOnlyList<RasterBandInfo>?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "bandInfos");
#pragma warning restore BL0005
         ModifiedParameters[nameof(BandInfos)] = BandInfos;
        return BandInfos;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Colormap property.
    /// </summary>
    public async Task<IReadOnlyList<ColormapPixel>?> GetColormap()
    {
        if (CoreJsModule is null)
        {
            return Colormap;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Colormap;
        }

        // get the property value
#pragma warning disable BL0005
        Colormap = await CoreJsModule!.InvokeAsync<IReadOnlyList<ColormapPixel>?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "colormap");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Colormap)] = Colormap;
        return Colormap;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DataType property.
    /// </summary>
    public async Task<DataType?> GetDataType()
    {
        if (CoreJsModule is null)
        {
            return DataType;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return DataType;
        }

        // get the property value
#pragma warning disable BL0005
        DataType = await CoreJsModule!.InvokeAsync<DataType>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "dataType");
#pragma warning restore BL0005
         ModifiedParameters[nameof(DataType)] = DataType;
        return DataType;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DoubleCollectionNoDataValue property.
    /// </summary>
    public async Task<IReadOnlyList<double?>?> GetDoubleCollectionNoDataValue()
    {
        if (CoreJsModule is null)
        {
            return DoubleCollectionNoDataValue;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return DoubleCollectionNoDataValue;
        }

        // get the property value
#pragma warning disable BL0005
        DoubleCollectionNoDataValue = await CoreJsModule!.InvokeAsync<IReadOnlyList<double?>?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "doubleCollectionNoDataValue");
#pragma warning restore BL0005
         ModifiedParameters[nameof(DoubleCollectionNoDataValue)] = DoubleCollectionNoDataValue;
        return DoubleCollectionNoDataValue;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DoubleNoDataValue property.
    /// </summary>
    public async Task<double?> GetDoubleNoDataValue()
    {
        if (CoreJsModule is null)
        {
            return DoubleNoDataValue;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return DoubleNoDataValue;
        }

        // get the property value
#pragma warning disable BL0005
        DoubleNoDataValue = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "doubleNoDataValue");
#pragma warning restore BL0005
         ModifiedParameters[nameof(DoubleNoDataValue)] = DoubleNoDataValue;
        return DoubleNoDataValue;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Extent property.
    /// </summary>
    public async Task<Extent?> GetExtent()
    {
        if (CoreJsModule is null)
        {
            return Extent;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Extent;
        }

        // get the property value
#pragma warning disable BL0005
        Extent = await CoreJsModule!.InvokeAsync<Extent?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "extent");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Extent)] = Extent;
        return Extent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HasMultidimensionalTranspose property.
    /// </summary>
    public async Task<bool?> GetHasMultidimensionalTranspose()
    {
        if (CoreJsModule is null)
        {
            return HasMultidimensionalTranspose;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return HasMultidimensionalTranspose;
        }

        // get the property value
#pragma warning disable BL0005
        HasMultidimensionalTranspose = await CoreJsModule!.InvokeAsync<bool>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "hasMultidimensionalTranspose");
#pragma warning restore BL0005
         ModifiedParameters[nameof(HasMultidimensionalTranspose)] = HasMultidimensionalTranspose;
        return HasMultidimensionalTranspose;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Height property.
    /// </summary>
    public async Task<int?> GetHeight()
    {
        if (CoreJsModule is null)
        {
            return Height;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Height;
        }

        // get the property value
#pragma warning disable BL0005
        Height = await CoreJsModule!.InvokeAsync<int>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "height");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Height)] = Height;
        return Height;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Histograms property.
    /// </summary>
    public async Task<IReadOnlyList<string>?> GetHistograms()
    {
        if (CoreJsModule is null)
        {
            return Histograms;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Histograms;
        }

        // get the property value
#pragma warning disable BL0005
        Histograms = await CoreJsModule!.InvokeAsync<IReadOnlyList<string>?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "histograms");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Histograms)] = Histograms;
        return Histograms;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the KeyProperties property.
    /// </summary>
    public async Task<string?> GetKeyProperties()
    {
        if (CoreJsModule is null)
        {
            return KeyProperties;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return KeyProperties;
        }

        // get the property value
#pragma warning disable BL0005
        KeyProperties = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "keyProperties");
#pragma warning restore BL0005
         ModifiedParameters[nameof(KeyProperties)] = KeyProperties;
        return KeyProperties;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MultidimensionalInfo property.
    /// </summary>
    public async Task<RasterMultidimensionalInfo?> GetMultidimensionalInfo()
    {
        if (CoreJsModule is null)
        {
            return MultidimensionalInfo;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return MultidimensionalInfo;
        }

        // get the property value
#pragma warning disable BL0005
        MultidimensionalInfo = await CoreJsModule!.InvokeAsync<RasterMultidimensionalInfo?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "multidimensionalInfo");
#pragma warning restore BL0005
         ModifiedParameters[nameof(MultidimensionalInfo)] = MultidimensionalInfo;
        return MultidimensionalInfo;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PixelSize property.
    /// </summary>
    public async Task<RasterInfoPixelSize?> GetPixelSize()
    {
        if (CoreJsModule is null)
        {
            return PixelSize;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return PixelSize;
        }

        // get the property value
#pragma warning disable BL0005
        PixelSize = await CoreJsModule!.InvokeAsync<RasterInfoPixelSize?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "pixelSize");
#pragma warning restore BL0005
         ModifiedParameters[nameof(PixelSize)] = PixelSize;
        return PixelSize;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PixelType property.
    /// </summary>
    public async Task<PixelType?> GetPixelType()
    {
        if (CoreJsModule is null)
        {
            return PixelType;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return PixelType;
        }

        // get the property value
#pragma warning disable BL0005
        PixelType = await CoreJsModule!.InvokeAsync<PixelType>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "pixelType");
#pragma warning restore BL0005
         ModifiedParameters[nameof(PixelType)] = PixelType;
        return PixelType;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SensorInfo property.
    /// </summary>
    public async Task<RasterSensorInfo?> GetSensorInfo()
    {
        if (CoreJsModule is null)
        {
            return SensorInfo;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return SensorInfo;
        }

        // get the property value
#pragma warning disable BL0005
        SensorInfo = await CoreJsModule!.InvokeAsync<RasterSensorInfo?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "sensorInfo");
#pragma warning restore BL0005
         ModifiedParameters[nameof(SensorInfo)] = SensorInfo;
        return SensorInfo;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SpatialReference property.
    /// </summary>
    public async Task<SpatialReference?> GetSpatialReference()
    {
        if (CoreJsModule is null)
        {
            return SpatialReference;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return SpatialReference;
        }

        // get the property value
#pragma warning disable BL0005
        SpatialReference = await CoreJsModule!.InvokeAsync<SpatialReference?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "spatialReference");
#pragma warning restore BL0005
         ModifiedParameters[nameof(SpatialReference)] = SpatialReference;
        return SpatialReference;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Statistics property.
    /// </summary>
    public async Task<IReadOnlyList<RasterInfoStatistics>?> GetStatistics()
    {
        if (CoreJsModule is null)
        {
            return Statistics;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Statistics;
        }

        // get the property value
#pragma warning disable BL0005
        Statistics = await CoreJsModule!.InvokeAsync<IReadOnlyList<RasterInfoStatistics>?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "statistics");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Statistics)] = Statistics;
        return Statistics;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Width property.
    /// </summary>
    public async Task<int?> GetWidth()
    {
        if (CoreJsModule is null)
        {
            return Width;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Width;
        }

        // get the property value
#pragma warning disable BL0005
        Width = await CoreJsModule!.InvokeAsync<int>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "width");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Width)] = Width;
        return Width;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the AttributeTable property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAttributeTable(FeatureSet value)
    {
#pragma warning disable BL0005
        AttributeTable = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(AttributeTable)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "attributeTable", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the BandCount property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBandCount(int value)
    {
#pragma warning disable BL0005
        BandCount = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(BandCount)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "bandCount", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the BandInfos property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBandInfos(IReadOnlyList<RasterBandInfo> value)
    {
#pragma warning disable BL0005
        BandInfos = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(BandInfos)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "bandInfos", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Colormap property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetColormap(IReadOnlyList<ColormapPixel> value)
    {
#pragma warning disable BL0005
        Colormap = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Colormap)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "colormap", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DataType property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDataType(DataType value)
    {
#pragma warning disable BL0005
        DataType = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DataType)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "dataType", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DoubleCollectionNoDataValue property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDoubleCollectionNoDataValue(IReadOnlyList<double?> value)
    {
#pragma warning disable BL0005
        DoubleCollectionNoDataValue = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DoubleCollectionNoDataValue)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "doubleCollectionNoDataValue", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DoubleNoDataValue property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDoubleNoDataValue(double value)
    {
#pragma warning disable BL0005
        DoubleNoDataValue = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DoubleNoDataValue)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "doubleNoDataValue", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Extent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetExtent(Extent value)
    {
#pragma warning disable BL0005
        Extent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Extent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "extent", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HasMultidimensionalTranspose property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHasMultidimensionalTranspose(bool value)
    {
#pragma warning disable BL0005
        HasMultidimensionalTranspose = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HasMultidimensionalTranspose)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "hasMultidimensionalTranspose", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Height property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHeight(int value)
    {
#pragma warning disable BL0005
        Height = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Height)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "height", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Histograms property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHistograms(IReadOnlyList<string> value)
    {
#pragma warning disable BL0005
        Histograms = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Histograms)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "histograms", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the KeyProperties property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetKeyProperties(string value)
    {
#pragma warning disable BL0005
        KeyProperties = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(KeyProperties)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "keyProperties", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MultidimensionalInfo property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMultidimensionalInfo(RasterMultidimensionalInfo value)
    {
#pragma warning disable BL0005
        MultidimensionalInfo = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MultidimensionalInfo)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "multidimensionalInfo", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PixelSize property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPixelSize(RasterInfoPixelSize value)
    {
#pragma warning disable BL0005
        PixelSize = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PixelSize)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "pixelSize", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PixelType property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPixelType(PixelType value)
    {
#pragma warning disable BL0005
        PixelType = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PixelType)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "pixelType", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SensorInfo property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSensorInfo(RasterSensorInfo value)
    {
#pragma warning disable BL0005
        SensorInfo = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SensorInfo)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "sensorInfo", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SpatialReference property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSpatialReference(SpatialReference value)
    {
#pragma warning disable BL0005
        SpatialReference = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SpatialReference)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "spatialReference", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Statistics property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetStatistics(IReadOnlyList<RasterInfoStatistics> value)
    {
#pragma warning disable BL0005
        Statistics = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Statistics)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "statistics", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Width property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetWidth(int value)
    {
#pragma warning disable BL0005
        Width = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Width)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "width", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the BandInfos property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToBandInfos(params RasterBandInfo[] values)
    {
        RasterBandInfo[] join = BandInfos is null
            ? values
            : [..BandInfos, ..values];
        await SetBandInfos(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the Colormap property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToColormap(params ColormapPixel[] values)
    {
        ColormapPixel[] join = Colormap is null
            ? values
            : [..Colormap, ..values];
        await SetColormap(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the Histograms property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToHistograms(params string[] values)
    {
        string[] join = Histograms is null
            ? values
            : [..Histograms, ..values];
        await SetHistograms(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the Statistics property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToStatistics(params RasterInfoStatistics[] values)
    {
        RasterInfoStatistics[] join = Statistics is null
            ? values
            : [..Statistics, ..values];
        await SetStatistics(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the BandInfos property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromBandInfos(params RasterBandInfo[] values)
    {
        if (BandInfos is null)
        {
            return;
        }
        await SetBandInfos(BandInfos.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the Colormap property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromColormap(params ColormapPixel[] values)
    {
        if (Colormap is null)
        {
            return;
        }
        await SetColormap(Colormap.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the Histograms property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromHistograms(params string[] values)
    {
        if (Histograms is null)
        {
            return;
        }
        await SetHistograms(Histograms.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the Statistics property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromStatistics(params RasterInfoStatistics[] values)
    {
        if (Statistics is null)
        {
            return;
        }
        await SetStatistics(Statistics.Except(values).ToArray());
    }
    
#endregion





    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case RasterBandInfo bandInfos:
                BandInfos ??= [];
                if (!BandInfos.Contains(bandInfos))
                {
                    BandInfos = [..BandInfos, bandInfos];
                    
                    ModifiedParameters[nameof(BandInfos)] = BandInfos;
                }
                
                return true;
            case RasterMultidimensionalInfo multidimensionalInfo:
                if (multidimensionalInfo != MultidimensionalInfo)
                {
                    MultidimensionalInfo = multidimensionalInfo;
                    
                    ModifiedParameters[nameof(MultidimensionalInfo)] = MultidimensionalInfo;
                }
                
                return true;
            case RasterSensorInfo sensorInfo:
                if (sensorInfo != SensorInfo)
                {
                    SensorInfo = sensorInfo;
                    
                    ModifiedParameters[nameof(SensorInfo)] = SensorInfo;
                }
                
                return true;
            case RasterInfoStatistics statistics:
                Statistics ??= [];
                if (!Statistics.Contains(statistics))
                {
                    Statistics = [..Statistics, statistics];
                    
                    ModifiedParameters[nameof(Statistics)] = Statistics;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case RasterBandInfo bandInfos:
                BandInfos = BandInfos?.Where(b => b != bandInfos).ToList();
                
                ModifiedParameters[nameof(BandInfos)] = BandInfos;
                return true;
            case RasterMultidimensionalInfo _:
                MultidimensionalInfo = null;
                
                ModifiedParameters[nameof(MultidimensionalInfo)] = MultidimensionalInfo;
                return true;
            case RasterSensorInfo _:
                SensorInfo = null;
                
                ModifiedParameters[nameof(SensorInfo)] = SensorInfo;
                return true;
            case RasterInfoStatistics statistics:
                Statistics = Statistics?.Where(s => s != statistics).ToList();
                
                ModifiedParameters[nameof(Statistics)] = Statistics;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    internal override void ValidateRequiredGeneratedChildren()
    {
    
        if (BandInfos is not null)
        {
            foreach (RasterBandInfo child in BandInfos)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        MultidimensionalInfo?.ValidateRequiredGeneratedChildren();
        SensorInfo?.ValidateRequiredGeneratedChildren();
        if (Statistics is not null)
        {
            foreach (RasterInfoStatistics child in Statistics)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        base.ValidateRequiredGeneratedChildren();
    }
      
}
