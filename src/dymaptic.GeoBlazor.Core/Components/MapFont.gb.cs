// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.MapFont.html">GeoBlazor Docs</a>
///     The font used to display <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html">2D text symbols</a> and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol3DLayer.html">3D text symbols</a>.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Font.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class MapFont
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public MapFont()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="size">
    ///     The font size in points.
    ///     default 9
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Font.html#size">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="family">
    ///     The font family of the text.
    ///     default sans-serif
    ///     The font family of the text. The possible values are dependent upon the layer type, and if you are working with a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html">MapView</a> or a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html">SceneView</a>. See the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/labeling/">Labeling guide page</a> for detailed explanation, or click the `Read more` below.  >>> esri-read-more Font families for 3D SceneViews  The supported font families for 3D <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html">SceneViews</a> are dependent upon the fonts installed on the user's computer and web browser. If an app uses a font that is not installed, the Font class implements a fallback mechanism that will use the default font family value, which is `sans-serif`. See these references for instructions on how to install a new font on <a target="_blank" href="https://support.microsoft.com/en-us/help/314960/how-to-install-or-remove-a-font-in-windows">Windows</a> or <a target="_blank" href="https://support.apple.com/en-us/ht201749">Mac</a>.  Fonts that are not installed locally can also be loaded from a url by defining a <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-face">font-face</a> in a css file and referencing it from the `family` property in a symbol layer.  Font families for 2D MapImageLayer  The supported font families for <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-MapImageLayer.html">MapImageLayers</a> in a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html">MapView</a> are dependent upon the fonts installed on the <a target="_blank" href="https://enterprise.arcgis.com/en/server/latest/get-started/windows/what-is-arcgis-for-server-.htm">ArcGIS Server</a> that published the layer. If an app uses a font that is not installed, the Font class implements a fallback mechanism that will use the default font family value, which is `sans-serif`.  Font families for 2D FeatureLayer, CSVLayer, StreamLayer, and TextSymbol  The supported font families are based on hosted fonts files in `.pbf` format. By default, the fonts available are mostly the same ones used by the Esri Vector Basemaps. These fonts are available via `https://static.arcgis.com/fonts`. The URL can be configured to point to your own font resources by setting the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-config.html#fontsUrl">esriConfig.fontsUrl</a> property. If an app uses a font that is not installed, the Font class implements a fallback mechanism that will use the default font family value, which is `sans-serif`. This uses the `Arial Unicode MS` font file.  > A preview of the fonts listed in the following table are available in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/labeling/">Labeling</a> overview page.  List of fonts currently supported in a 2D MapView:  <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Font.html#family">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="style">
    ///     The text style.
    ///     default normal
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Font.html#style">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="weight">
    ///     The text weight.
    ///     default normal
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Font.html#weight">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="decoration">
    ///     The text decoration.
    ///     default none
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Font.html#decoration">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public MapFont(
        Dimension? size = null,
        string? family = null,
        MapFontStyle? style = null,
        FontWeight? weight = null,
        TextDecoration? decoration = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Size = size;
        Family = family;
        Style = style;
        Weight = weight;
        Decoration = decoration;
#pragma warning restore BL0005    
    }
    
    
#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Decoration property.
    /// </summary>
    public async Task<TextDecoration?> GetDecoration()
    {
        if (CoreJsModule is null)
        {
            return Decoration;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Decoration;
        }

        // get the property value
        JsNullableEnumWrapper<TextDecoration>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<TextDecoration>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "decoration");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Decoration = (TextDecoration)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Decoration)] = Decoration;
        }
         
        return Decoration;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Family property.
    /// </summary>
    public async Task<string?> GetFamily()
    {
        if (CoreJsModule is null)
        {
            return Family;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Family;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "family");
        if (result is not null)
        {
#pragma warning disable BL0005
             Family = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Family)] = Family;
        }
         
        return Family;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Size property.
    /// </summary>
    public async Task<Dimension?> GetSize()
    {
        if (CoreJsModule is null)
        {
            return Size;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Size;
        }

        // get the property value
        Dimension? result = await JsComponentReference!.InvokeAsync<Dimension?>("getProperty",
            CancellationTokenSource.Token, "size");
        if (result is not null)
        {
#pragma warning disable BL0005
             Size = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Size)] = Size;
        }
         
        return Size;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Style property.
    /// </summary>
    public async Task<MapFontStyle?> GetStyle()
    {
        if (CoreJsModule is null)
        {
            return Style;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Style;
        }

        // get the property value
        JsNullableEnumWrapper<MapFontStyle>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<MapFontStyle>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "style");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Style = (MapFontStyle)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Style)] = Style;
        }
         
        return Style;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Weight property.
    /// </summary>
    public async Task<FontWeight?> GetWeight()
    {
        if (CoreJsModule is null)
        {
            return Weight;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Weight;
        }

        // get the property value
        JsNullableEnumWrapper<FontWeight>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<FontWeight>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "weight");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Weight = (FontWeight)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Weight)] = Weight;
        }
         
        return Weight;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Decoration property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDecoration(TextDecoration? value)
    {
#pragma warning disable BL0005
        Decoration = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Decoration)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "decoration", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Family property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFamily(string? value)
    {
#pragma warning disable BL0005
        Family = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Family)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "family", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Size property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSize(Dimension? value)
    {
#pragma warning disable BL0005
        Size = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Size)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "size", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Style property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetStyle(MapFontStyle? value)
    {
#pragma warning disable BL0005
        Style = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Style)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "style", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Weight property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetWeight(FontWeight? value)
    {
#pragma warning disable BL0005
        Weight = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Weight)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "weight", value);
    }
    
#endregion

}
