// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Capabilities.html">GeoBlazor Docs</a>
///     Describes the layer's supported capabilities.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class Capabilities : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public Capabilities()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="analytics">
    ///     Describes what analytics capabilities are enabled on the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="attachment">
    ///     Describes what attachment capabilities are enabled on the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="data">
    ///     Describes characteristics of the data in the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="editing">
    ///     Describes editing capabilities that can be performed on the features in the layer via <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#applyEdits">applyEdits()</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="metadata">
    ///     Describes the metadata contained on features in the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="operations">
    ///     Describes operations that can be performed on features in the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="query">
    ///     Describes <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-Query.html">query</a> operations that can be performed on features in the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="queryAttributeBins">
    /// </param>
    /// <param name="queryRelated">
    ///     Indicates if the layer's query operation supports querying features or records related to features in the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="queryTopFeatures">
    ///     Describes <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-TopFeaturesQuery.html">top features query</a> operations that can be performed on features in the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public Capabilities(
        CapabilitiesAnalytics? analytics = null,
        CapabilitiesAttachment? attachment = null,
        CapabilitiesData? data = null,
        CapabilitiesEditing? editing = null,
        CapabilitiesMetadata? metadata = null,
        CapabilitiesOperations? operations = null,
        CapabilitiesQuery? query = null,
        CapabilitiesQueryAttributeBins? queryAttributeBins = null,
        CapabilitiesQueryRelated? queryRelated = null,
        CapabilitiesQueryTopFeatures? queryTopFeatures = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Analytics = analytics;
        Attachment = attachment;
        Data = data;
        Editing = editing;
        Metadata = metadata;
        Operations = operations;
        Query = query;
        QueryAttributeBins = queryAttributeBins;
        QueryRelated = queryRelated;
        QueryTopFeatures = queryTopFeatures;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Capabilities.html#capabilitiesanalytics-property">GeoBlazor Docs</a>
    ///     Describes what analytics capabilities are enabled on the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public CapabilitiesAnalytics? Analytics { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Capabilities.html#capabilitiesattachment-property">GeoBlazor Docs</a>
    ///     Describes what attachment capabilities are enabled on the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public CapabilitiesAttachment? Attachment { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Capabilities.html#capabilitiesdata-property">GeoBlazor Docs</a>
    ///     Describes characteristics of the data in the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public CapabilitiesData? Data { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Capabilities.html#capabilitiesediting-property">GeoBlazor Docs</a>
    ///     Describes editing capabilities that can be performed on the features in the layer via <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#applyEdits">applyEdits()</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public CapabilitiesEditing? Editing { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Capabilities.html#capabilitiesmetadata-property">GeoBlazor Docs</a>
    ///     Describes the metadata contained on features in the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public CapabilitiesMetadata? Metadata { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Capabilities.html#capabilitiesoperations-property">GeoBlazor Docs</a>
    ///     Describes operations that can be performed on features in the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public CapabilitiesOperations? Operations { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Capabilities.html#capabilitiesquery-property">GeoBlazor Docs</a>
    ///     Describes <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-Query.html">query</a> operations that can be performed on features in the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public CapabilitiesQuery? Query { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Capabilities.html#capabilitiesqueryattributebins-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public CapabilitiesQueryAttributeBins? QueryAttributeBins { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Capabilities.html#capabilitiesqueryrelated-property">GeoBlazor Docs</a>
    ///     Indicates if the layer's query operation supports querying features or records related to features in the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public CapabilitiesQueryRelated? QueryRelated { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Capabilities.html#capabilitiesquerytopfeatures-property">GeoBlazor Docs</a>
    ///     Describes <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-TopFeaturesQuery.html">top features query</a> operations that can be performed on features in the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#Capabilities">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public CapabilitiesQueryTopFeatures? QueryTopFeatures { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Analytics property.
    /// </summary>
    public async Task<CapabilitiesAnalytics?> GetAnalytics()
    {
        if (CoreJsModule is null)
        {
            return Analytics;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Analytics;
        }

        CapabilitiesAnalytics? result = await JsComponentReference.InvokeAsync<CapabilitiesAnalytics?>(
            "getAnalytics", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Analytics = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Analytics)] = Analytics;
        }
        
        return Analytics;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Attachment property.
    /// </summary>
    public async Task<CapabilitiesAttachment?> GetAttachment()
    {
        if (CoreJsModule is null)
        {
            return Attachment;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Attachment;
        }

        CapabilitiesAttachment? result = await JsComponentReference.InvokeAsync<CapabilitiesAttachment?>(
            "getAttachment", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Attachment = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Attachment)] = Attachment;
        }
        
        return Attachment;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Data property.
    /// </summary>
    public async Task<CapabilitiesData?> GetData()
    {
        if (CoreJsModule is null)
        {
            return Data;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Data;
        }

        CapabilitiesData? result = await JsComponentReference.InvokeAsync<CapabilitiesData?>(
            "getData", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Data = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Data)] = Data;
        }
        
        return Data;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Editing property.
    /// </summary>
    public async Task<CapabilitiesEditing?> GetEditing()
    {
        if (CoreJsModule is null)
        {
            return Editing;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Editing;
        }

        CapabilitiesEditing? result = await JsComponentReference.InvokeAsync<CapabilitiesEditing?>(
            "getEditing", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Editing = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Editing)] = Editing;
        }
        
        return Editing;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Metadata property.
    /// </summary>
    public async Task<CapabilitiesMetadata?> GetMetadata()
    {
        if (CoreJsModule is null)
        {
            return Metadata;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Metadata;
        }

        CapabilitiesMetadata? result = await JsComponentReference.InvokeAsync<CapabilitiesMetadata?>(
            "getMetadata", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Metadata = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Metadata)] = Metadata;
        }
        
        return Metadata;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Operations property.
    /// </summary>
    public async Task<CapabilitiesOperations?> GetOperations()
    {
        if (CoreJsModule is null)
        {
            return Operations;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Operations;
        }

        CapabilitiesOperations? result = await JsComponentReference.InvokeAsync<CapabilitiesOperations?>(
            "getOperations", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Operations = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Operations)] = Operations;
        }
        
        return Operations;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Query property.
    /// </summary>
    public async Task<CapabilitiesQuery?> GetQuery()
    {
        if (CoreJsModule is null)
        {
            return Query;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Query;
        }

        // get the property value
        CapabilitiesQuery? result = await JsComponentReference!.InvokeAsync<CapabilitiesQuery?>("getProperty",
            CancellationTokenSource.Token, "query");
        if (result is not null)
        {
#pragma warning disable BL0005
             Query = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Query)] = Query;
        }
         
        return Query;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the QueryAttributeBins property.
    /// </summary>
    public async Task<CapabilitiesQueryAttributeBins?> GetQueryAttributeBins()
    {
        if (CoreJsModule is null)
        {
            return QueryAttributeBins;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return QueryAttributeBins;
        }

        CapabilitiesQueryAttributeBins? result = await JsComponentReference.InvokeAsync<CapabilitiesQueryAttributeBins?>(
            "getQueryAttributeBins", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            QueryAttributeBins = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(QueryAttributeBins)] = QueryAttributeBins;
        }
        
        return QueryAttributeBins;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the QueryRelated property.
    /// </summary>
    public async Task<CapabilitiesQueryRelated?> GetQueryRelated()
    {
        if (CoreJsModule is null)
        {
            return QueryRelated;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return QueryRelated;
        }

        CapabilitiesQueryRelated? result = await JsComponentReference.InvokeAsync<CapabilitiesQueryRelated?>(
            "getQueryRelated", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            QueryRelated = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(QueryRelated)] = QueryRelated;
        }
        
        return QueryRelated;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the QueryTopFeatures property.
    /// </summary>
    public async Task<CapabilitiesQueryTopFeatures?> GetQueryTopFeatures()
    {
        if (CoreJsModule is null)
        {
            return QueryTopFeatures;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return QueryTopFeatures;
        }

        CapabilitiesQueryTopFeatures? result = await JsComponentReference.InvokeAsync<CapabilitiesQueryTopFeatures?>(
            "getQueryTopFeatures", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            QueryTopFeatures = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(QueryTopFeatures)] = QueryTopFeatures;
        }
        
        return QueryTopFeatures;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Analytics property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAnalytics(CapabilitiesAnalytics? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        Analytics = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Analytics)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "analytics", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Attachment property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAttachment(CapabilitiesAttachment? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        Attachment = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Attachment)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "attachment", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Data property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetData(CapabilitiesData? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        Data = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Data)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "data", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Editing property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetEditing(CapabilitiesEditing? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        Editing = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Editing)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "editing", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Metadata property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMetadata(CapabilitiesMetadata? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        Metadata = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Metadata)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "metadata", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Operations property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetOperations(CapabilitiesOperations? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        Operations = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Operations)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "operations", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Query property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetQuery(CapabilitiesQuery? value)
    {
#pragma warning disable BL0005
        Query = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Query)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "query", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the QueryAttributeBins property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetQueryAttributeBins(CapabilitiesQueryAttributeBins? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        QueryAttributeBins = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(QueryAttributeBins)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "queryAttributeBins", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the QueryRelated property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetQueryRelated(CapabilitiesQueryRelated? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        QueryRelated = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(QueryRelated)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "queryRelated", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the QueryTopFeatures property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetQueryTopFeatures(CapabilitiesQueryTopFeatures? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        QueryTopFeatures = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(QueryTopFeatures)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "queryTopFeatures", value);
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case CapabilitiesAnalytics analytics:
                if (analytics != Analytics)
                {
                    Analytics = analytics;
                    ModifiedParameters[nameof(Analytics)] = Analytics;
                }
                
                return true;
            case CapabilitiesAttachment attachment:
                if (attachment != Attachment)
                {
                    Attachment = attachment;
                    ModifiedParameters[nameof(Attachment)] = Attachment;
                }
                
                return true;
            case CapabilitiesData data:
                if (data != Data)
                {
                    Data = data;
                    ModifiedParameters[nameof(Data)] = Data;
                }
                
                return true;
            case CapabilitiesEditing editing:
                if (editing != Editing)
                {
                    Editing = editing;
                    ModifiedParameters[nameof(Editing)] = Editing;
                }
                
                return true;
            case CapabilitiesMetadata metadata:
                if (metadata != Metadata)
                {
                    Metadata = metadata;
                    ModifiedParameters[nameof(Metadata)] = Metadata;
                }
                
                return true;
            case CapabilitiesOperations operations:
                if (operations != Operations)
                {
                    Operations = operations;
                    ModifiedParameters[nameof(Operations)] = Operations;
                }
                
                return true;
            case CapabilitiesQueryAttributeBins queryAttributeBins:
                if (queryAttributeBins != QueryAttributeBins)
                {
                    QueryAttributeBins = queryAttributeBins;
                    ModifiedParameters[nameof(QueryAttributeBins)] = QueryAttributeBins;
                }
                
                return true;
            case CapabilitiesQueryRelated queryRelated:
                if (queryRelated != QueryRelated)
                {
                    QueryRelated = queryRelated;
                    ModifiedParameters[nameof(QueryRelated)] = QueryRelated;
                }
                
                return true;
            case CapabilitiesQueryTopFeatures queryTopFeatures:
                if (queryTopFeatures != QueryTopFeatures)
                {
                    QueryTopFeatures = queryTopFeatures;
                    ModifiedParameters[nameof(QueryTopFeatures)] = QueryTopFeatures;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case CapabilitiesAnalytics _:
                Analytics = null;
                ModifiedParameters[nameof(Analytics)] = Analytics;
                return true;
            case CapabilitiesAttachment _:
                Attachment = null;
                ModifiedParameters[nameof(Attachment)] = Attachment;
                return true;
            case CapabilitiesData _:
                Data = null;
                ModifiedParameters[nameof(Data)] = Data;
                return true;
            case CapabilitiesEditing _:
                Editing = null;
                ModifiedParameters[nameof(Editing)] = Editing;
                return true;
            case CapabilitiesMetadata _:
                Metadata = null;
                ModifiedParameters[nameof(Metadata)] = Metadata;
                return true;
            case CapabilitiesOperations _:
                Operations = null;
                ModifiedParameters[nameof(Operations)] = Operations;
                return true;
            case CapabilitiesQueryAttributeBins _:
                QueryAttributeBins = null;
                ModifiedParameters[nameof(QueryAttributeBins)] = QueryAttributeBins;
                return true;
            case CapabilitiesQueryRelated _:
                QueryRelated = null;
                ModifiedParameters[nameof(QueryRelated)] = QueryRelated;
                return true;
            case CapabilitiesQueryTopFeatures _:
                QueryTopFeatures = null;
                ModifiedParameters[nameof(QueryTopFeatures)] = QueryTopFeatures;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        Analytics?.ValidateRequiredGeneratedChildren();
        Attachment?.ValidateRequiredGeneratedChildren();
        Data?.ValidateRequiredGeneratedChildren();
        Editing?.ValidateRequiredGeneratedChildren();
        Metadata?.ValidateRequiredGeneratedChildren();
        Operations?.ValidateRequiredGeneratedChildren();
        QueryAttributeBins?.ValidateRequiredGeneratedChildren();
        QueryRelated?.ValidateRequiredGeneratedChildren();
        QueryTopFeatures?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
