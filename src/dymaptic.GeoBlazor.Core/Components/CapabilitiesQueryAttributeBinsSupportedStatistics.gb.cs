// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.html">GeoBlazor Docs</a>
///     
/// </summary>
public partial class CapabilitiesQueryAttributeBinsSupportedStatistics : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public CapabilitiesQueryAttributeBinsSupportedStatistics()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="avg">
    /// </param>
    /// <param name="count">
    /// </param>
    /// <param name="max">
    /// </param>
    /// <param name="min">
    /// </param>
    /// <param name="percentileContinuous">
    /// </param>
    /// <param name="percentileDiscrete">
    /// </param>
    /// <param name="stddev">
    /// </param>
    /// <param name="sum">
    /// </param>
    /// <param name="var">
    /// </param>
    public CapabilitiesQueryAttributeBinsSupportedStatistics(
        bool? avg = null,
        bool? count = null,
        bool? max = null,
        bool? min = null,
        bool? percentileContinuous = null,
        bool? percentileDiscrete = null,
        bool? stddev = null,
        bool? sum = null,
        bool? var = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Avg = avg;
        Count = count;
        Max = max;
        Min = min;
        PercentileContinuous = percentileContinuous;
        PercentileDiscrete = percentileDiscrete;
        Stddev = stddev;
        Sum = sum;
        Var = var;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.html#capabilitiesqueryattributebinssupportedstatisticsavg-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Avg { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.html#capabilitiesqueryattributebinssupportedstatisticscount-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Count { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.html#capabilitiesqueryattributebinssupportedstatisticsmax-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Max { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.html#capabilitiesqueryattributebinssupportedstatisticsmin-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Min { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.html#capabilitiesqueryattributebinssupportedstatisticspercentilecontinuous-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? PercentileContinuous { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.html#capabilitiesqueryattributebinssupportedstatisticspercentilediscrete-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? PercentileDiscrete { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.html#capabilitiesqueryattributebinssupportedstatisticsstddev-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Stddev { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.html#capabilitiesqueryattributebinssupportedstatisticssum-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Sum { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBinsSupportedStatistics.html#capabilitiesqueryattributebinssupportedstatisticsvar-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Var { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Avg property.
    /// </summary>
    public async Task<bool?> GetAvg()
    {
        if (CoreJsModule is null)
        {
            return Avg;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Avg;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "avg");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Avg = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Avg)] = Avg;
        }
         
        return Avg;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Count property.
    /// </summary>
    public async Task<bool?> GetCount()
    {
        if (CoreJsModule is null)
        {
            return Count;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Count;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "count");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Count = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Count)] = Count;
        }
         
        return Count;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Max property.
    /// </summary>
    public async Task<bool?> GetMax()
    {
        if (CoreJsModule is null)
        {
            return Max;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Max;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "max");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Max = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Max)] = Max;
        }
         
        return Max;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Min property.
    /// </summary>
    public async Task<bool?> GetMin()
    {
        if (CoreJsModule is null)
        {
            return Min;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Min;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "min");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Min = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Min)] = Min;
        }
         
        return Min;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PercentileContinuous property.
    /// </summary>
    public async Task<bool?> GetPercentileContinuous()
    {
        if (CoreJsModule is null)
        {
            return PercentileContinuous;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return PercentileContinuous;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "percentileContinuous");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             PercentileContinuous = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(PercentileContinuous)] = PercentileContinuous;
        }
         
        return PercentileContinuous;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PercentileDiscrete property.
    /// </summary>
    public async Task<bool?> GetPercentileDiscrete()
    {
        if (CoreJsModule is null)
        {
            return PercentileDiscrete;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return PercentileDiscrete;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "percentileDiscrete");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             PercentileDiscrete = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(PercentileDiscrete)] = PercentileDiscrete;
        }
         
        return PercentileDiscrete;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Stddev property.
    /// </summary>
    public async Task<bool?> GetStddev()
    {
        if (CoreJsModule is null)
        {
            return Stddev;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Stddev;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "stddev");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Stddev = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Stddev)] = Stddev;
        }
         
        return Stddev;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Sum property.
    /// </summary>
    public async Task<bool?> GetSum()
    {
        if (CoreJsModule is null)
        {
            return Sum;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Sum;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "sum");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Sum = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Sum)] = Sum;
        }
         
        return Sum;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Var property.
    /// </summary>
    public async Task<bool?> GetVar()
    {
        if (CoreJsModule is null)
        {
            return Var;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Var;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "var");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Var = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Var)] = Var;
        }
         
        return Var;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Avg property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAvg(bool? value)
    {
#pragma warning disable BL0005
        Avg = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Avg)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "avg", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Count property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCount(bool? value)
    {
#pragma warning disable BL0005
        Count = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Count)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "count", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Max property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMax(bool? value)
    {
#pragma warning disable BL0005
        Max = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Max)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "max", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Min property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMin(bool? value)
    {
#pragma warning disable BL0005
        Min = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Min)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "min", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PercentileContinuous property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPercentileContinuous(bool? value)
    {
#pragma warning disable BL0005
        PercentileContinuous = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PercentileContinuous)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "percentileContinuous", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PercentileDiscrete property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPercentileDiscrete(bool? value)
    {
#pragma warning disable BL0005
        PercentileDiscrete = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PercentileDiscrete)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "percentileDiscrete", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Stddev property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetStddev(bool? value)
    {
#pragma warning disable BL0005
        Stddev = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Stddev)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "stddev", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Sum property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSum(bool? value)
    {
#pragma warning disable BL0005
        Sum = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Sum)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "sum", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Var property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetVar(bool? value)
    {
#pragma warning disable BL0005
        Var = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Var)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "var", value);
    }
    
#endregion

}
