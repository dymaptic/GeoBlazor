// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html">GeoBlazor Docs</a>
///     The Portal class is part of the <a target="_blank" href="https://enterprise.arcgis.com/en/portal/">ArcGIS Enterprise portal</a>
///     that provides a way to build applications that work with content from <a target="_blank" href="https://www.arcgis.com/home/">ArcGIS Online</a> or
///     an <a target="_blank" href="https://enterprise.arcgis.com/en/portal/">ArcGIS Enterprise portal</a>.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class Portal
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public Portal()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="access">
    ///     The access level of the organization.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#access">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="allSSL">
    ///     When `true`, access to the organization's Portal resources must occur over SSL.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#allSSL">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="authMode">
    ///     The authentication mode for handling authentication when the user attempts to
    ///     access a secure resource.
    ///     default "auto"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#authMode">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="authorizedCrossOriginDomains">
    ///     Array of trusted servers to send credentials to when making Cross-Origin Resource Sharing (CORS) requests to access services
    ///     secured with web-tier authentication.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#authorizedCrossOriginDomains">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="basemapGalleryGroupQuery">
    ///     The query that defines the basemaps that should be displayed in the
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery.html">BasemapGallery</a> when <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#useVectorBasemaps">useVectorBasemaps</a> is not true.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#basemapGalleryGroupQuery">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="basemapGalleryGroupQuery3D">
    ///     The query that defines the 3D basemaps that should be displayed in the
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery.html">BasemapGallery</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#basemapGalleryGroupQuery3D">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="bingKey">
    ///     The Bing key to use for web maps using Bing Maps.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#bingKey">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="canListApps">
    ///     Indicates whether an organization can list applications in the marketplace.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#canListApps">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="canListData">
    ///     Indicates whether an organization can list data services in the marketplace.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#canListData">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="canListPreProvisionedItems">
    ///     Indicates whether an organization can list pre-provisioned items in the marketplace.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#canListPreProvisionedItems">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="canProvisionDirectPurchase">
    ///     Indicates whether an organization can provision direct purchases in the marketplace without customer request.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#canProvisionDirectPurchase">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="canSearchPublic">
    ///     When `true`, the organization's public items, groups and users are included in search queries.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#canSearchPublic">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="canShareBingPublic">
    ///     The Bing key can be shared to the public and is returned as part of a portal's description call (`/sharing/rest/portals/orgid`).
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#canShareBingPublic">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="canSharePublic">
    ///     When `true`, members of the organization can share resources outside the organization.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#canSharePublic">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="canSignInArcGIS">
    ///     Indicates whether to allow an organization with an enterprise IDP configured to be able to turn on or off the ArcGIS sign in.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#canSignInArcGIS">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="canSignInIDP">
    ///     Indicates whether to allow an organization with an enterprise IDP configured to be able to turn on or off the enterprise sign in.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#canSignInIDP">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="colorSetsGroupQuery">
    ///     The query that identifies the group containing the color sets used for rendering in the map viewer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#colorSetsGroupQuery">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="commentsEnabled">
    ///     Indicates whether to allow the organization to disable commenting.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#commentsEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="created">
    ///     Date the organization was created.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#created">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="culture">
    ///     The default locale (language and country) information.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#culture">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="customBaseUrl">
    ///     The custom base URL for the portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#customBaseUrl">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="default3DBasemapQuery">
    ///     The query that defines the default 3d basemap to use in scene views for the portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#default3DBasemapQuery">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="defaultExtent">
    ///     The default extent to use for the portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#defaultExtent">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="description">
    ///     A description of the organization/portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#description">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="devBasemapGalleryGroupQuery">
    ///     The query that defines the basemaps that should be displayed in the
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery.html">BasemapGallery</a> when an <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-config.html#apiKey">apiKey</a> is defined.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#devBasemapGalleryGroupQuery">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="eueiEnabled">
    ///     Boolean value indicating whether to opt-in to the [Esri
    ///     User Experience Improvement (EUEI) program](https://doc.arcgis.com/en/arcgis-online/reference/faq.htm#ESRI_QUESTIONANSWER_AED97F28DCD84F7682623C2FA9E5CE49).
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#eueiEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="featuredGroups">
    ///     The featured groups for the portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#featuredGroups">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="featuredItemsGroupQuery">
    ///     The query that defines the featured group.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#featuredItemsGroupQuery">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="galleryTemplatesGroupQuery">
    ///     The query that identifies the group containing features items for the gallery.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#galleryTemplatesGroupQuery">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="hasCategorySchema">
    ///     Indicates whether the organization has content categories.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#hasCategorySchema">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="hasClassificationSchema">
    ///     Indicates whether the organization has classification schema.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#hasClassificationSchema">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="helperServices">
    ///     This class contains properties to obtain information for various web services available on the portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#helperServices">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="homePageFeaturedContent">
    ///     The group that contains featured content to be displayed on the home page.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#homePageFeaturedContent">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="homePageFeaturedContentCount">
    ///     The number of featured items that can be displayed on the home page.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#homePageFeaturedContentCount">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="httpPort">
    ///     The port used by the portal for HTTP communication.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#httpPort">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="httpsPort">
    ///     The port used by the portal for HTTPS communication.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#httpsPort">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="ipCntryCode">
    ///     The country code of the calling IP (ArcGIS Online only).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#ipCntryCode">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="isPortal">
    ///     Indicates if the portal is on-premises.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#isPortal">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="isReadOnly">
    ///     Indicates if the portal is in read-only mode.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#isReadOnly">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="layerTemplatesGroupQuery">
    ///     The query that identifies the group containing editing templates.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#layerTemplatesGroupQuery">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="maxTokenExpirationMinutes">
    ///     The maximum validity in minutes of tokens issued for users of the organization.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#maxTokenExpirationMinutes">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="modified">
    ///     Date the organization was last modified.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#modified">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="name">
    ///     Name of the organization.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#name">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="portalHostname">
    ///     URL of the portal host.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#portalHostname">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="portalId">
    ///     The id of the organization that owns this portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#id">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="portalMode">
    ///     The portal mode.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#portalMode">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="portalProperties">
    ///     Properties specific to the organization, for example the "contact us" link.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#portalProperties">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="recycleBinEnabled">
    ///     Indicates whether the recycle bin is enabled for the organization.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#recycleBinEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="region">
    ///     The region for the organization.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#region">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="rotatorPanels">
    ///     Custom HTML for the home page.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#rotatorPanels">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="showHomePageDescription">
    ///     Indicates whether the description of your organization displays on the home page.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#showHomePageDescription">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="supportsHostedServices">
    ///     Indicates whether hosted services are supported.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#supportsHostedServices">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="symbolSetsGroupQuery">
    ///     The query that defines the symbols sets.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#symbolSetsGroupQuery">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="templatesGroupQuery">
    ///     The query that defines the collection of templates that will appear in the template
    ///     gallery.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#templatesGroupQuery">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="units">
    ///     Sets the units of measure for the organization's users.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#units">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="url">
    ///     The URL to the portal instance.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#url">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="urlKey">
    ///     The prefix selected by the organization's administrator to be used with the customBaseURL.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#urlKey">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="use3dBasemaps">
    ///     When `false`, 3D basemaps are hidden from the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery.html">BasemapGallery</a>, regardless
    ///     of the type of the view.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#use3dBasemaps">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="useDefault3dBasemap">
    ///     When `false`, The default 3d basemap is not used in the SceneViewer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#useDefault3dBasemap">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="useStandardizedQuery">
    ///     When `true`, only simple where clauses that are compliant with SQL92 can be used when querying layers and tables.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#useStandardizedQuery">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="useVectorBasemaps">
    ///     When `true`, the organization has opted in to use the vector tile basemaps,
    ///     and (a) <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#vectorBasemapGalleryGroupQuery">vectorBasemapGalleryGroupQuery</a> should
    ///     be used instead of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#basemapGalleryGroupQuery">basemapGalleryGroupQuery</a>, while
    ///     (b) <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#defaultVectorBasemap">defaultVectorBasemap</a> should be used instead of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#defaultBasemap">defaultBasemap</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#useVectorBasemaps">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="vectorBasemapGalleryGroupQuery">
    ///     The query that defines the vector tiles basemaps that should be displayed in the
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery.html">BasemapGallery</a> when <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#useVectorBasemaps">useVectorBasemaps</a> is true.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#vectorBasemapGalleryGroupQuery">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public Portal(
        PortalAccess? access = null,
        bool? allSSL = null,
        AuthMode? authMode = null,
        IReadOnlyList<string>? authorizedCrossOriginDomains = null,
        string? basemapGalleryGroupQuery = null,
        string? basemapGalleryGroupQuery3D = null,
        string? bingKey = null,
        bool? canListApps = null,
        bool? canListData = null,
        bool? canListPreProvisionedItems = null,
        bool? canProvisionDirectPurchase = null,
        bool? canSearchPublic = null,
        bool? canShareBingPublic = null,
        bool? canSharePublic = null,
        bool? canSignInArcGIS = null,
        bool? canSignInIDP = null,
        string? colorSetsGroupQuery = null,
        bool? commentsEnabled = null,
        DateTime? created = null,
        string? culture = null,
        string? customBaseUrl = null,
        string? default3DBasemapQuery = null,
        Extent? defaultExtent = null,
        string? description = null,
        string? devBasemapGalleryGroupQuery = null,
        bool? eueiEnabled = null,
        IReadOnlyList<PortalFeaturedGroups>? featuredGroups = null,
        string? featuredItemsGroupQuery = null,
        string? galleryTemplatesGroupQuery = null,
        bool? hasCategorySchema = null,
        bool? hasClassificationSchema = null,
        HelperServices? helperServices = null,
        string? homePageFeaturedContent = null,
        int? homePageFeaturedContentCount = null,
        double? httpPort = null,
        double? httpsPort = null,
        string? ipCntryCode = null,
        bool? isPortal = null,
        bool? isReadOnly = null,
        string? layerTemplatesGroupQuery = null,
        double? maxTokenExpirationMinutes = null,
        DateTime? modified = null,
        string? name = null,
        string? portalHostname = null,
        string? portalId = null,
        PortalMode? portalMode = null,
        PortalProperties? portalProperties = null,
        bool? recycleBinEnabled = null,
        string? region = null,
        IReadOnlyList<RotatorPanel>? rotatorPanels = null,
        bool? showHomePageDescription = null,
        bool? supportsHostedServices = null,
        string? symbolSetsGroupQuery = null,
        string? templatesGroupQuery = null,
        PortalUnits? units = null,
        string? url = null,
        string? urlKey = null,
        bool? use3dBasemaps = null,
        bool? useDefault3dBasemap = null,
        bool? useStandardizedQuery = null,
        bool? useVectorBasemaps = null,
        string? vectorBasemapGalleryGroupQuery = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Access = access;
        AllSSL = allSSL;
        AuthMode = authMode;
        AuthorizedCrossOriginDomains = authorizedCrossOriginDomains;
        BasemapGalleryGroupQuery = basemapGalleryGroupQuery;
        BasemapGalleryGroupQuery3D = basemapGalleryGroupQuery3D;
        BingKey = bingKey;
        CanListApps = canListApps;
        CanListData = canListData;
        CanListPreProvisionedItems = canListPreProvisionedItems;
        CanProvisionDirectPurchase = canProvisionDirectPurchase;
        CanSearchPublic = canSearchPublic;
        CanShareBingPublic = canShareBingPublic;
        CanSharePublic = canSharePublic;
        CanSignInArcGIS = canSignInArcGIS;
        CanSignInIDP = canSignInIDP;
        ColorSetsGroupQuery = colorSetsGroupQuery;
        CommentsEnabled = commentsEnabled;
        Created = created;
        Culture = culture;
        CustomBaseUrl = customBaseUrl;
        Default3DBasemapQuery = default3DBasemapQuery;
        DefaultExtent = defaultExtent;
        Description = description;
        DevBasemapGalleryGroupQuery = devBasemapGalleryGroupQuery;
        EueiEnabled = eueiEnabled;
        FeaturedGroups = featuredGroups;
        FeaturedItemsGroupQuery = featuredItemsGroupQuery;
        GalleryTemplatesGroupQuery = galleryTemplatesGroupQuery;
        HasCategorySchema = hasCategorySchema;
        HasClassificationSchema = hasClassificationSchema;
        HelperServices = helperServices;
        HomePageFeaturedContent = homePageFeaturedContent;
        HomePageFeaturedContentCount = homePageFeaturedContentCount;
        HttpPort = httpPort;
        HttpsPort = httpsPort;
        IpCntryCode = ipCntryCode;
        IsPortal = isPortal;
        IsReadOnly = isReadOnly;
        LayerTemplatesGroupQuery = layerTemplatesGroupQuery;
        MaxTokenExpirationMinutes = maxTokenExpirationMinutes;
        Modified = modified;
        Name = name;
        PortalHostname = portalHostname;
        PortalId = portalId;
        PortalMode = portalMode;
        PortalProperties = portalProperties;
        RecycleBinEnabled = recycleBinEnabled;
        Region = region;
        RotatorPanels = rotatorPanels;
        ShowHomePageDescription = showHomePageDescription;
        SupportsHostedServices = supportsHostedServices;
        SymbolSetsGroupQuery = symbolSetsGroupQuery;
        TemplatesGroupQuery = templatesGroupQuery;
        Units = units;
        Url = url;
        UrlKey = urlKey;
        Use3dBasemaps = use3dBasemaps;
        UseDefault3dBasemap = useDefault3dBasemap;
        UseStandardizedQuery = useStandardizedQuery;
        UseVectorBasemaps = useVectorBasemaps;
        VectorBasemapGalleryGroupQuery = vectorBasemapGalleryGroupQuery;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalaccess-property">GeoBlazor Docs</a>
    ///     The access level of the organization.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#access">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public PortalAccess? Access { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalallssl-property">GeoBlazor Docs</a>
    ///     When `true`, access to the organization's Portal resources must occur over SSL.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#allSSL">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? AllSSL { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalauthmode-property">GeoBlazor Docs</a>
    ///     The authentication mode for handling authentication when the user attempts to
    ///     access a secure resource.
    ///     default "auto"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#authMode">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public AuthMode? AuthMode { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalauthorizedcrossorigindomains-property">GeoBlazor Docs</a>
    ///     Array of trusted servers to send credentials to when making Cross-Origin Resource Sharing (CORS) requests to access services
    ///     secured with web-tier authentication.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#authorizedCrossOriginDomains">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<string>? AuthorizedCrossOriginDomains { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalbasemapgallerygroupquery-property">GeoBlazor Docs</a>
    ///     The query that defines the basemaps that should be displayed in the
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery.html">BasemapGallery</a> when <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#useVectorBasemaps">useVectorBasemaps</a> is not true.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#basemapGalleryGroupQuery">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? BasemapGalleryGroupQuery { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalbasemapgallerygroupquery3d-property">GeoBlazor Docs</a>
    ///     The query that defines the 3D basemaps that should be displayed in the
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery.html">BasemapGallery</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#basemapGalleryGroupQuery3D">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? BasemapGalleryGroupQuery3D { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalbingkey-property">GeoBlazor Docs</a>
    ///     The Bing key to use for web maps using Bing Maps.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#bingKey">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? BingKey { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalcanlistapps-property">GeoBlazor Docs</a>
    ///     Indicates whether an organization can list applications in the marketplace.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#canListApps">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? CanListApps { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalcanlistdata-property">GeoBlazor Docs</a>
    ///     Indicates whether an organization can list data services in the marketplace.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#canListData">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? CanListData { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalcanlistpreprovisioneditems-property">GeoBlazor Docs</a>
    ///     Indicates whether an organization can list pre-provisioned items in the marketplace.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#canListPreProvisionedItems">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? CanListPreProvisionedItems { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalcanprovisiondirectpurchase-property">GeoBlazor Docs</a>
    ///     Indicates whether an organization can provision direct purchases in the marketplace without customer request.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#canProvisionDirectPurchase">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? CanProvisionDirectPurchase { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalcansearchpublic-property">GeoBlazor Docs</a>
    ///     When `true`, the organization's public items, groups and users are included in search queries.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#canSearchPublic">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? CanSearchPublic { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalcansharebingpublic-property">GeoBlazor Docs</a>
    ///     The Bing key can be shared to the public and is returned as part of a portal's description call (`/sharing/rest/portals/orgid`).
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#canShareBingPublic">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? CanShareBingPublic { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalcansharepublic-property">GeoBlazor Docs</a>
    ///     When `true`, members of the organization can share resources outside the organization.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#canSharePublic">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? CanSharePublic { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalcansigninarcgis-property">GeoBlazor Docs</a>
    ///     Indicates whether to allow an organization with an enterprise IDP configured to be able to turn on or off the ArcGIS sign in.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#canSignInArcGIS">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? CanSignInArcGIS { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalcansigninidp-property">GeoBlazor Docs</a>
    ///     Indicates whether to allow an organization with an enterprise IDP configured to be able to turn on or off the enterprise sign in.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#canSignInIDP">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? CanSignInIDP { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalcolorsetsgroupquery-property">GeoBlazor Docs</a>
    ///     The query that identifies the group containing the color sets used for rendering in the map viewer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#colorSetsGroupQuery">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? ColorSetsGroupQuery { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalcommentsenabled-property">GeoBlazor Docs</a>
    ///     Indicates whether to allow the organization to disable commenting.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#commentsEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? CommentsEnabled { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalcreated-property">GeoBlazor Docs</a>
    ///     Date the organization was created.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#created">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public DateTime? Created { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalculture-property">GeoBlazor Docs</a>
    ///     The default locale (language and country) information.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#culture">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Culture { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalcustombaseurl-property">GeoBlazor Docs</a>
    ///     The custom base URL for the portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#customBaseUrl">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? CustomBaseUrl { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portaldefault3dbasemapquery-property">GeoBlazor Docs</a>
    ///     The query that defines the default 3d basemap to use in scene views for the portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#default3DBasemapQuery">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Default3DBasemapQuery { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portaldefaultbasemap-property">GeoBlazor Docs</a>
    ///     The default basemap to use for the portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#defaultBasemap">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [AncestorPropertyReference]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Basemap? DefaultBasemap { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portaldefaultdevbasemap-property">GeoBlazor Docs</a>
    ///     The default developer basemap to use for the portal when an <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-config.html#apiKey">apiKey</a> is defined.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#defaultDevBasemap">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [AncestorPropertyReference]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Basemap? DefaultDevBasemap { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portaldefaultextent-property">GeoBlazor Docs</a>
    ///     The default extent to use for the portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#defaultExtent">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Extent? DefaultExtent { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portaldefaultvectorbasemap-property">GeoBlazor Docs</a>
    ///     The default vector basemap to use for the portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#defaultVectorBasemap">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [AncestorPropertyReference]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Basemap? DefaultVectorBasemap { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portaldescription-property">GeoBlazor Docs</a>
    ///     A description of the organization/portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#description">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Description { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portaldevbasemapgallerygroupquery-property">GeoBlazor Docs</a>
    ///     The query that defines the basemaps that should be displayed in the
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery.html">BasemapGallery</a> when an <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-config.html#apiKey">apiKey</a> is defined.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#devBasemapGalleryGroupQuery">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? DevBasemapGalleryGroupQuery { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portaleueienabled-property">GeoBlazor Docs</a>
    ///     Boolean value indicating whether to opt-in to the [Esri
    ///     User Experience Improvement (EUEI) program](https://doc.arcgis.com/en/arcgis-online/reference/faq.htm#ESRI_QUESTIONANSWER_AED97F28DCD84F7682623C2FA9E5CE49).
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#eueiEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? EueiEnabled { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalfeaturedgroups-property">GeoBlazor Docs</a>
    ///     The featured groups for the portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#featuredGroups">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<PortalFeaturedGroups>? FeaturedGroups { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalfeatureditemsgroupquery-property">GeoBlazor Docs</a>
    ///     The query that defines the featured group.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#featuredItemsGroupQuery">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? FeaturedItemsGroupQuery { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalgallerytemplatesgroupquery-property">GeoBlazor Docs</a>
    ///     The query that identifies the group containing features items for the gallery.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#galleryTemplatesGroupQuery">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? GalleryTemplatesGroupQuery { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalhascategoryschema-property">GeoBlazor Docs</a>
    ///     Indicates whether the organization has content categories.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#hasCategorySchema">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? HasCategorySchema { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalhasclassificationschema-property">GeoBlazor Docs</a>
    ///     Indicates whether the organization has classification schema.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#hasClassificationSchema">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? HasClassificationSchema { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalhelperservices-property">GeoBlazor Docs</a>
    ///     This class contains properties to obtain information for various web services available on the portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#helperServices">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public HelperServices? HelperServices { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalhomepagefeaturedcontent-property">GeoBlazor Docs</a>
    ///     The group that contains featured content to be displayed on the home page.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#homePageFeaturedContent">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? HomePageFeaturedContent { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalhomepagefeaturedcontentcount-property">GeoBlazor Docs</a>
    ///     The number of featured items that can be displayed on the home page.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#homePageFeaturedContentCount">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public int? HomePageFeaturedContentCount { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalhttpport-property">GeoBlazor Docs</a>
    ///     The port used by the portal for HTTP communication.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#httpPort">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? HttpPort { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalhttpsport-property">GeoBlazor Docs</a>
    ///     The port used by the portal for HTTPS communication.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#httpsPort">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? HttpsPort { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalipcntrycode-property">GeoBlazor Docs</a>
    ///     The country code of the calling IP (ArcGIS Online only).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#ipCntryCode">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? IpCntryCode { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalisorganization-property">GeoBlazor Docs</a>
    ///     Indicates whether the portal is an organization.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#isOrganization">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public bool? IsOrganization { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalisportal-property">GeoBlazor Docs</a>
    ///     Indicates if the portal is on-premises.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#isPortal">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? IsPortal { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalisreadonly-property">GeoBlazor Docs</a>
    ///     Indicates if the portal is in read-only mode.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#isReadOnly">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? IsReadOnly { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portallayertemplatesgroupquery-property">GeoBlazor Docs</a>
    ///     The query that identifies the group containing editing templates.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#layerTemplatesGroupQuery">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? LayerTemplatesGroupQuery { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalloaded-property">GeoBlazor Docs</a>
    ///     Indicates whether the portal's resources have loaded.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#loaded">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public bool? Loaded { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalmaxtokenexpirationminutes-property">GeoBlazor Docs</a>
    ///     The maximum validity in minutes of tokens issued for users of the organization.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#maxTokenExpirationMinutes">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? MaxTokenExpirationMinutes { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalmodified-property">GeoBlazor Docs</a>
    ///     Date the organization was last modified.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#modified">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public DateTime? Modified { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalname-property">GeoBlazor Docs</a>
    ///     Name of the organization.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#name">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Name { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalportalhostname-property">GeoBlazor Docs</a>
    ///     URL of the portal host.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#portalHostname">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? PortalHostname { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalportalid-property">GeoBlazor Docs</a>
    ///     The id of the organization that owns this portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#id">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? PortalId { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalportalmode-property">GeoBlazor Docs</a>
    ///     The portal mode.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#portalMode">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public PortalMode? PortalMode { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalportalproperties-property">GeoBlazor Docs</a>
    ///     Properties specific to the organization, for example the "contact us" link.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#portalProperties">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public PortalProperties? PortalProperties { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalrecyclebinenabled-property">GeoBlazor Docs</a>
    ///     Indicates whether the recycle bin is enabled for the organization.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#recycleBinEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? RecycleBinEnabled { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalregion-property">GeoBlazor Docs</a>
    ///     The region for the organization.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#region">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Region { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalresturl-property">GeoBlazor Docs</a>
    ///     The REST URL for the portal, for example "https://www.arcgis.com/sharing/rest" for ArcGIS Online
    ///     and "https://www.example.com/arcgis/sharing/rest" for your in-house portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#restUrl">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public string? RestUrl { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalrotatorpanels-property">GeoBlazor Docs</a>
    ///     Custom HTML for the home page.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#rotatorPanels">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<RotatorPanel>? RotatorPanels { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalshowhomepagedescription-property">GeoBlazor Docs</a>
    ///     Indicates whether the description of your organization displays on the home page.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#showHomePageDescription">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? ShowHomePageDescription { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalsourcejson-property">GeoBlazor Docs</a>
    ///     The JSON used to create the property values when the `Portal` is loaded.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#sourceJSON">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public string? SourceJSON { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalsupportshostedservices-property">GeoBlazor Docs</a>
    ///     Indicates whether hosted services are supported.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#supportsHostedServices">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsHostedServices { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalsymbolsetsgroupquery-property">GeoBlazor Docs</a>
    ///     The query that defines the symbols sets.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#symbolSetsGroupQuery">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? SymbolSetsGroupQuery { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portaltemplatesgroupquery-property">GeoBlazor Docs</a>
    ///     The query that defines the collection of templates that will appear in the template
    ///     gallery.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#templatesGroupQuery">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? TemplatesGroupQuery { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalthumbnailurl-property">GeoBlazor Docs</a>
    ///     The URL to the thumbnail of the organization.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#thumbnailUrl">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public string? ThumbnailUrl { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalunits-property">GeoBlazor Docs</a>
    ///     Sets the units of measure for the organization's users.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#units">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public PortalUnits? Units { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalurlkey-property">GeoBlazor Docs</a>
    ///     The prefix selected by the organization's administrator to be used with the customBaseURL.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#urlKey">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? UrlKey { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portaluse3dbasemaps-property">GeoBlazor Docs</a>
    ///     When `false`, 3D basemaps are hidden from the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery.html">BasemapGallery</a>, regardless
    ///     of the type of the view.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#use3dBasemaps">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Use3dBasemaps { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalusedefault3dbasemap-property">GeoBlazor Docs</a>
    ///     When `false`, The default 3d basemap is not used in the SceneViewer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#useDefault3dBasemap">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? UseDefault3dBasemap { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portaluser-property">GeoBlazor Docs</a>
    ///     Information representing a registered user of the portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#user">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public PortalUser? User { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalusestandardizedquery-property">GeoBlazor Docs</a>
    ///     When `true`, only simple where clauses that are compliant with SQL92 can be used when querying layers and tables.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#useStandardizedQuery">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? UseStandardizedQuery { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalusevectorbasemaps-property">GeoBlazor Docs</a>
    ///     When `true`, the organization has opted in to use the vector tile basemaps,
    ///     and (a) <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#vectorBasemapGalleryGroupQuery">vectorBasemapGalleryGroupQuery</a> should
    ///     be used instead of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#basemapGalleryGroupQuery">basemapGalleryGroupQuery</a>, while
    ///     (b) <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#defaultVectorBasemap">defaultVectorBasemap</a> should be used instead of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#defaultBasemap">defaultBasemap</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#useVectorBasemaps">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? UseVectorBasemaps { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalvectorbasemapgallerygroupquery-property">GeoBlazor Docs</a>
    ///     The query that defines the vector tiles basemaps that should be displayed in the
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery.html">BasemapGallery</a> when <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#useVectorBasemaps">useVectorBasemaps</a> is true.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#vectorBasemapGalleryGroupQuery">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? VectorBasemapGalleryGroupQuery { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Access property.
    /// </summary>
    public async Task<PortalAccess?> GetAccess()
    {
        if (CoreJsModule is null)
        {
            return Access;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Access;
        }

        // get the property value
        JsNullableEnumWrapper<PortalAccess>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<PortalAccess>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "access");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Access = (PortalAccess)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Access)] = Access;
        }
         
        return Access;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the AllSSL property.
    /// </summary>
    public async Task<bool?> GetAllSSL()
    {
        if (CoreJsModule is null)
        {
            return AllSSL;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return AllSSL;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "allSSL");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             AllSSL = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(AllSSL)] = AllSSL;
        }
         
        return AllSSL;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the AuthMode property.
    /// </summary>
    public async Task<AuthMode?> GetAuthMode()
    {
        if (CoreJsModule is null)
        {
            return AuthMode;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return AuthMode;
        }

        // get the property value
        JsNullableEnumWrapper<AuthMode>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<AuthMode>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "authMode");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             AuthMode = (AuthMode)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(AuthMode)] = AuthMode;
        }
         
        return AuthMode;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the AuthorizedCrossOriginDomains property.
    /// </summary>
    public async Task<IReadOnlyList<string>?> GetAuthorizedCrossOriginDomains()
    {
        if (CoreJsModule is null)
        {
            return AuthorizedCrossOriginDomains;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return AuthorizedCrossOriginDomains;
        }

        // get the property value
        IReadOnlyList<string>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<string>?>("getProperty",
            CancellationTokenSource.Token, "authorizedCrossOriginDomains");
        if (result is not null)
        {
#pragma warning disable BL0005
             AuthorizedCrossOriginDomains = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(AuthorizedCrossOriginDomains)] = AuthorizedCrossOriginDomains;
        }
         
        return AuthorizedCrossOriginDomains;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the BasemapGalleryGroupQuery property.
    /// </summary>
    public async Task<string?> GetBasemapGalleryGroupQuery()
    {
        if (CoreJsModule is null)
        {
            return BasemapGalleryGroupQuery;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return BasemapGalleryGroupQuery;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "basemapGalleryGroupQuery");
        if (result is not null)
        {
#pragma warning disable BL0005
             BasemapGalleryGroupQuery = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(BasemapGalleryGroupQuery)] = BasemapGalleryGroupQuery;
        }
         
        return BasemapGalleryGroupQuery;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the BasemapGalleryGroupQuery3D property.
    /// </summary>
    public async Task<string?> GetBasemapGalleryGroupQuery3D()
    {
        if (CoreJsModule is null)
        {
            return BasemapGalleryGroupQuery3D;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return BasemapGalleryGroupQuery3D;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "basemapGalleryGroupQuery3D");
        if (result is not null)
        {
#pragma warning disable BL0005
             BasemapGalleryGroupQuery3D = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(BasemapGalleryGroupQuery3D)] = BasemapGalleryGroupQuery3D;
        }
         
        return BasemapGalleryGroupQuery3D;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the BingKey property.
    /// </summary>
    public async Task<string?> GetBingKey()
    {
        if (CoreJsModule is null)
        {
            return BingKey;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return BingKey;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "bingKey");
        if (result is not null)
        {
#pragma warning disable BL0005
             BingKey = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(BingKey)] = BingKey;
        }
         
        return BingKey;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CanListApps property.
    /// </summary>
    public async Task<bool?> GetCanListApps()
    {
        if (CoreJsModule is null)
        {
            return CanListApps;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CanListApps;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "canListApps");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             CanListApps = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CanListApps)] = CanListApps;
        }
         
        return CanListApps;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CanListData property.
    /// </summary>
    public async Task<bool?> GetCanListData()
    {
        if (CoreJsModule is null)
        {
            return CanListData;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CanListData;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "canListData");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             CanListData = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CanListData)] = CanListData;
        }
         
        return CanListData;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CanListPreProvisionedItems property.
    /// </summary>
    public async Task<bool?> GetCanListPreProvisionedItems()
    {
        if (CoreJsModule is null)
        {
            return CanListPreProvisionedItems;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CanListPreProvisionedItems;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "canListPreProvisionedItems");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             CanListPreProvisionedItems = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CanListPreProvisionedItems)] = CanListPreProvisionedItems;
        }
         
        return CanListPreProvisionedItems;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CanProvisionDirectPurchase property.
    /// </summary>
    public async Task<bool?> GetCanProvisionDirectPurchase()
    {
        if (CoreJsModule is null)
        {
            return CanProvisionDirectPurchase;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CanProvisionDirectPurchase;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "canProvisionDirectPurchase");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             CanProvisionDirectPurchase = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CanProvisionDirectPurchase)] = CanProvisionDirectPurchase;
        }
         
        return CanProvisionDirectPurchase;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CanSearchPublic property.
    /// </summary>
    public async Task<bool?> GetCanSearchPublic()
    {
        if (CoreJsModule is null)
        {
            return CanSearchPublic;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CanSearchPublic;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "canSearchPublic");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             CanSearchPublic = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CanSearchPublic)] = CanSearchPublic;
        }
         
        return CanSearchPublic;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CanShareBingPublic property.
    /// </summary>
    public async Task<bool?> GetCanShareBingPublic()
    {
        if (CoreJsModule is null)
        {
            return CanShareBingPublic;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CanShareBingPublic;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "canShareBingPublic");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             CanShareBingPublic = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CanShareBingPublic)] = CanShareBingPublic;
        }
         
        return CanShareBingPublic;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CanSharePublic property.
    /// </summary>
    public async Task<bool?> GetCanSharePublic()
    {
        if (CoreJsModule is null)
        {
            return CanSharePublic;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CanSharePublic;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "canSharePublic");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             CanSharePublic = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CanSharePublic)] = CanSharePublic;
        }
         
        return CanSharePublic;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CanSignInArcGIS property.
    /// </summary>
    public async Task<bool?> GetCanSignInArcGIS()
    {
        if (CoreJsModule is null)
        {
            return CanSignInArcGIS;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CanSignInArcGIS;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "canSignInArcGIS");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             CanSignInArcGIS = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CanSignInArcGIS)] = CanSignInArcGIS;
        }
         
        return CanSignInArcGIS;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CanSignInIDP property.
    /// </summary>
    public async Task<bool?> GetCanSignInIDP()
    {
        if (CoreJsModule is null)
        {
            return CanSignInIDP;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CanSignInIDP;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "canSignInIDP");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             CanSignInIDP = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CanSignInIDP)] = CanSignInIDP;
        }
         
        return CanSignInIDP;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ColorSetsGroupQuery property.
    /// </summary>
    public async Task<string?> GetColorSetsGroupQuery()
    {
        if (CoreJsModule is null)
        {
            return ColorSetsGroupQuery;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ColorSetsGroupQuery;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "colorSetsGroupQuery");
        if (result is not null)
        {
#pragma warning disable BL0005
             ColorSetsGroupQuery = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ColorSetsGroupQuery)] = ColorSetsGroupQuery;
        }
         
        return ColorSetsGroupQuery;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CommentsEnabled property.
    /// </summary>
    public async Task<bool?> GetCommentsEnabled()
    {
        if (CoreJsModule is null)
        {
            return CommentsEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CommentsEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "commentsEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             CommentsEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CommentsEnabled)] = CommentsEnabled;
        }
         
        return CommentsEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Created property.
    /// </summary>
    public async Task<DateTime?> GetCreated()
    {
        if (CoreJsModule is null)
        {
            return Created;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Created;
        }

        // get the property value
        JsNullableDateTimeWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDateTimeWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "created");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Created = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Created)] = Created;
        }
         
        return Created;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Culture property.
    /// </summary>
    public async Task<string?> GetCulture()
    {
        if (CoreJsModule is null)
        {
            return Culture;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Culture;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "culture");
        if (result is not null)
        {
#pragma warning disable BL0005
             Culture = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Culture)] = Culture;
        }
         
        return Culture;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CustomBaseUrl property.
    /// </summary>
    public async Task<string?> GetCustomBaseUrl()
    {
        if (CoreJsModule is null)
        {
            return CustomBaseUrl;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CustomBaseUrl;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "customBaseUrl");
        if (result is not null)
        {
#pragma warning disable BL0005
             CustomBaseUrl = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CustomBaseUrl)] = CustomBaseUrl;
        }
         
        return CustomBaseUrl;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Default3DBasemapQuery property.
    /// </summary>
    public async Task<string?> GetDefault3DBasemapQuery()
    {
        if (CoreJsModule is null)
        {
            return Default3DBasemapQuery;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Default3DBasemapQuery;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "default3DBasemapQuery");
        if (result is not null)
        {
#pragma warning disable BL0005
             Default3DBasemapQuery = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Default3DBasemapQuery)] = Default3DBasemapQuery;
        }
         
        return Default3DBasemapQuery;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DefaultExtent property.
    /// </summary>
    public async Task<Extent?> GetDefaultExtent()
    {
        if (CoreJsModule is null)
        {
            return DefaultExtent;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return DefaultExtent;
        }

        Extent? result = await JsComponentReference.InvokeAsync<Extent?>(
            "getDefaultExtent", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (DefaultExtent is not null)
            {
                result.Id = DefaultExtent.Id;
            }
            
#pragma warning disable BL0005
            DefaultExtent = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(DefaultExtent)] = DefaultExtent;
        }
        
        return DefaultExtent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Description property.
    /// </summary>
    public async Task<string?> GetDescription()
    {
        if (CoreJsModule is null)
        {
            return Description;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Description;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "description");
        if (result is not null)
        {
#pragma warning disable BL0005
             Description = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Description)] = Description;
        }
         
        return Description;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DevBasemapGalleryGroupQuery property.
    /// </summary>
    public async Task<string?> GetDevBasemapGalleryGroupQuery()
    {
        if (CoreJsModule is null)
        {
            return DevBasemapGalleryGroupQuery;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return DevBasemapGalleryGroupQuery;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "devBasemapGalleryGroupQuery");
        if (result is not null)
        {
#pragma warning disable BL0005
             DevBasemapGalleryGroupQuery = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DevBasemapGalleryGroupQuery)] = DevBasemapGalleryGroupQuery;
        }
         
        return DevBasemapGalleryGroupQuery;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the EueiEnabled property.
    /// </summary>
    public async Task<bool?> GetEueiEnabled()
    {
        if (CoreJsModule is null)
        {
            return EueiEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return EueiEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "eueiEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             EueiEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(EueiEnabled)] = EueiEnabled;
        }
         
        return EueiEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FeaturedGroups property.
    /// </summary>
    public async Task<IReadOnlyList<PortalFeaturedGroups>?> GetFeaturedGroups()
    {
        if (CoreJsModule is null)
        {
            return FeaturedGroups;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return FeaturedGroups;
        }

        IReadOnlyList<PortalFeaturedGroups>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<PortalFeaturedGroups>?>(
            "getFeaturedGroups", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            FeaturedGroups = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(FeaturedGroups)] = FeaturedGroups;
        }
        
        return FeaturedGroups;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FeaturedItemsGroupQuery property.
    /// </summary>
    public async Task<string?> GetFeaturedItemsGroupQuery()
    {
        if (CoreJsModule is null)
        {
            return FeaturedItemsGroupQuery;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return FeaturedItemsGroupQuery;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "featuredItemsGroupQuery");
        if (result is not null)
        {
#pragma warning disable BL0005
             FeaturedItemsGroupQuery = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FeaturedItemsGroupQuery)] = FeaturedItemsGroupQuery;
        }
         
        return FeaturedItemsGroupQuery;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the GalleryTemplatesGroupQuery property.
    /// </summary>
    public async Task<string?> GetGalleryTemplatesGroupQuery()
    {
        if (CoreJsModule is null)
        {
            return GalleryTemplatesGroupQuery;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return GalleryTemplatesGroupQuery;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "galleryTemplatesGroupQuery");
        if (result is not null)
        {
#pragma warning disable BL0005
             GalleryTemplatesGroupQuery = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(GalleryTemplatesGroupQuery)] = GalleryTemplatesGroupQuery;
        }
         
        return GalleryTemplatesGroupQuery;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HasCategorySchema property.
    /// </summary>
    public async Task<bool?> GetHasCategorySchema()
    {
        if (CoreJsModule is null)
        {
            return HasCategorySchema;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return HasCategorySchema;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "hasCategorySchema");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             HasCategorySchema = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HasCategorySchema)] = HasCategorySchema;
        }
         
        return HasCategorySchema;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HasClassificationSchema property.
    /// </summary>
    public async Task<bool?> GetHasClassificationSchema()
    {
        if (CoreJsModule is null)
        {
            return HasClassificationSchema;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return HasClassificationSchema;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "hasClassificationSchema");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             HasClassificationSchema = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HasClassificationSchema)] = HasClassificationSchema;
        }
         
        return HasClassificationSchema;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HelperServices property.
    /// </summary>
    public async Task<HelperServices?> GetHelperServices()
    {
        if (CoreJsModule is null)
        {
            return HelperServices;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return HelperServices;
        }

        // get the property value
        HelperServices? result = await JsComponentReference!.InvokeAsync<HelperServices?>("getProperty",
            CancellationTokenSource.Token, "helperServices");
        if (result is not null)
        {
#pragma warning disable BL0005
             HelperServices = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HelperServices)] = HelperServices;
        }
         
        return HelperServices;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HomePageFeaturedContent property.
    /// </summary>
    public async Task<string?> GetHomePageFeaturedContent()
    {
        if (CoreJsModule is null)
        {
            return HomePageFeaturedContent;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return HomePageFeaturedContent;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "homePageFeaturedContent");
        if (result is not null)
        {
#pragma warning disable BL0005
             HomePageFeaturedContent = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HomePageFeaturedContent)] = HomePageFeaturedContent;
        }
         
        return HomePageFeaturedContent;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HomePageFeaturedContentCount property.
    /// </summary>
    public async Task<int?> GetHomePageFeaturedContentCount()
    {
        if (CoreJsModule is null)
        {
            return HomePageFeaturedContentCount;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return HomePageFeaturedContentCount;
        }

        // get the property value
        JsNullableIntWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableIntWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "homePageFeaturedContentCount");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             HomePageFeaturedContentCount = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HomePageFeaturedContentCount)] = HomePageFeaturedContentCount;
        }
         
        return HomePageFeaturedContentCount;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HttpPort property.
    /// </summary>
    public async Task<double?> GetHttpPort()
    {
        if (CoreJsModule is null)
        {
            return HttpPort;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return HttpPort;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "httpPort");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             HttpPort = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HttpPort)] = HttpPort;
        }
         
        return HttpPort;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HttpsPort property.
    /// </summary>
    public async Task<double?> GetHttpsPort()
    {
        if (CoreJsModule is null)
        {
            return HttpsPort;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return HttpsPort;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "httpsPort");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             HttpsPort = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HttpsPort)] = HttpsPort;
        }
         
        return HttpsPort;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the IpCntryCode property.
    /// </summary>
    public async Task<string?> GetIpCntryCode()
    {
        if (CoreJsModule is null)
        {
            return IpCntryCode;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return IpCntryCode;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "ipCntryCode");
        if (result is not null)
        {
#pragma warning disable BL0005
             IpCntryCode = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(IpCntryCode)] = IpCntryCode;
        }
         
        return IpCntryCode;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the IsOrganization property.
    /// </summary>
    public async Task<bool?> GetIsOrganization()
    {
        if (CoreJsModule is null)
        {
            return IsOrganization;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return IsOrganization;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "isOrganization");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             IsOrganization = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(IsOrganization)] = IsOrganization;
        }
         
        return IsOrganization;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the IsPortal property.
    /// </summary>
    public async Task<bool?> GetIsPortal()
    {
        if (CoreJsModule is null)
        {
            return IsPortal;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return IsPortal;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "isPortal");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             IsPortal = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(IsPortal)] = IsPortal;
        }
         
        return IsPortal;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the IsReadOnly property.
    /// </summary>
    public async Task<bool?> GetIsReadOnly()
    {
        if (CoreJsModule is null)
        {
            return IsReadOnly;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return IsReadOnly;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "isReadOnly");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             IsReadOnly = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(IsReadOnly)] = IsReadOnly;
        }
         
        return IsReadOnly;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LayerTemplatesGroupQuery property.
    /// </summary>
    public async Task<string?> GetLayerTemplatesGroupQuery()
    {
        if (CoreJsModule is null)
        {
            return LayerTemplatesGroupQuery;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return LayerTemplatesGroupQuery;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "layerTemplatesGroupQuery");
        if (result is not null)
        {
#pragma warning disable BL0005
             LayerTemplatesGroupQuery = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(LayerTemplatesGroupQuery)] = LayerTemplatesGroupQuery;
        }
         
        return LayerTemplatesGroupQuery;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Loaded property.
    /// </summary>
    public async Task<bool?> GetLoaded()
    {
        if (CoreJsModule is null)
        {
            return Loaded;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Loaded;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "loaded");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Loaded = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Loaded)] = Loaded;
        }
         
        return Loaded;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MaxTokenExpirationMinutes property.
    /// </summary>
    public async Task<double?> GetMaxTokenExpirationMinutes()
    {
        if (CoreJsModule is null)
        {
            return MaxTokenExpirationMinutes;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return MaxTokenExpirationMinutes;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "maxTokenExpirationMinutes");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             MaxTokenExpirationMinutes = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MaxTokenExpirationMinutes)] = MaxTokenExpirationMinutes;
        }
         
        return MaxTokenExpirationMinutes;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Modified property.
    /// </summary>
    public async Task<DateTime?> GetModified()
    {
        if (CoreJsModule is null)
        {
            return Modified;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Modified;
        }

        // get the property value
        JsNullableDateTimeWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDateTimeWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "modified");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Modified = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Modified)] = Modified;
        }
         
        return Modified;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Name property.
    /// </summary>
    public async Task<string?> GetName()
    {
        if (CoreJsModule is null)
        {
            return Name;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Name;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "name");
        if (result is not null)
        {
#pragma warning disable BL0005
             Name = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Name)] = Name;
        }
         
        return Name;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PortalHostname property.
    /// </summary>
    public async Task<string?> GetPortalHostname()
    {
        if (CoreJsModule is null)
        {
            return PortalHostname;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return PortalHostname;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "portalHostname");
        if (result is not null)
        {
#pragma warning disable BL0005
             PortalHostname = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(PortalHostname)] = PortalHostname;
        }
         
        return PortalHostname;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PortalId property.
    /// </summary>
    public async Task<string?> GetPortalId()
    {
        if (CoreJsModule is null)
        {
            return PortalId;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return PortalId;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "id");
        if (result is not null)
        {
#pragma warning disable BL0005
             PortalId = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(PortalId)] = PortalId;
        }
         
        return PortalId;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PortalMode property.
    /// </summary>
    public async Task<PortalMode?> GetPortalMode()
    {
        if (CoreJsModule is null)
        {
            return PortalMode;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return PortalMode;
        }

        // get the property value
        JsNullableEnumWrapper<PortalMode>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<PortalMode>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "portalMode");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             PortalMode = (PortalMode)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(PortalMode)] = PortalMode;
        }
         
        return PortalMode;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PortalProperties property.
    /// </summary>
    public async Task<PortalProperties?> GetPortalProperties()
    {
        if (CoreJsModule is null)
        {
            return PortalProperties;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return PortalProperties;
        }

        PortalProperties? result = await JsComponentReference.InvokeAsync<PortalProperties?>(
            "getPortalProperties", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            PortalProperties = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(PortalProperties)] = PortalProperties;
        }
        
        return PortalProperties;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RecycleBinEnabled property.
    /// </summary>
    public async Task<bool?> GetRecycleBinEnabled()
    {
        if (CoreJsModule is null)
        {
            return RecycleBinEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return RecycleBinEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "recycleBinEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             RecycleBinEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(RecycleBinEnabled)] = RecycleBinEnabled;
        }
         
        return RecycleBinEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Region property.
    /// </summary>
    public async Task<string?> GetRegion()
    {
        if (CoreJsModule is null)
        {
            return Region;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Region;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "region");
        if (result is not null)
        {
#pragma warning disable BL0005
             Region = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Region)] = Region;
        }
         
        return Region;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RestUrl property.
    /// </summary>
    public async Task<string?> GetRestUrl()
    {
        if (CoreJsModule is null)
        {
            return RestUrl;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return RestUrl;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "restUrl");
        if (result is not null)
        {
#pragma warning disable BL0005
             RestUrl = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(RestUrl)] = RestUrl;
        }
         
        return RestUrl;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RotatorPanels property.
    /// </summary>
    public async Task<IReadOnlyList<RotatorPanel>?> GetRotatorPanels()
    {
        if (CoreJsModule is null)
        {
            return RotatorPanels;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return RotatorPanels;
        }

        // get the property value
        IReadOnlyList<RotatorPanel>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<RotatorPanel>?>("getProperty",
            CancellationTokenSource.Token, "rotatorPanels");
        if (result is not null)
        {
#pragma warning disable BL0005
             RotatorPanels = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(RotatorPanels)] = RotatorPanels;
        }
         
        return RotatorPanels;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ShowHomePageDescription property.
    /// </summary>
    public async Task<bool?> GetShowHomePageDescription()
    {
        if (CoreJsModule is null)
        {
            return ShowHomePageDescription;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ShowHomePageDescription;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "showHomePageDescription");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ShowHomePageDescription = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ShowHomePageDescription)] = ShowHomePageDescription;
        }
         
        return ShowHomePageDescription;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SourceJSON property.
    /// </summary>
    public async Task<string?> GetSourceJSON()
    {
        if (CoreJsModule is null)
        {
            return SourceJSON;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SourceJSON;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "sourceJSON");
        if (result is not null)
        {
#pragma warning disable BL0005
             SourceJSON = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SourceJSON)] = SourceJSON;
        }
         
        return SourceJSON;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsHostedServices property.
    /// </summary>
    public async Task<bool?> GetSupportsHostedServices()
    {
        if (CoreJsModule is null)
        {
            return SupportsHostedServices;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsHostedServices;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsHostedServices");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsHostedServices = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsHostedServices)] = SupportsHostedServices;
        }
         
        return SupportsHostedServices;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SymbolSetsGroupQuery property.
    /// </summary>
    public async Task<string?> GetSymbolSetsGroupQuery()
    {
        if (CoreJsModule is null)
        {
            return SymbolSetsGroupQuery;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SymbolSetsGroupQuery;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "symbolSetsGroupQuery");
        if (result is not null)
        {
#pragma warning disable BL0005
             SymbolSetsGroupQuery = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SymbolSetsGroupQuery)] = SymbolSetsGroupQuery;
        }
         
        return SymbolSetsGroupQuery;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the TemplatesGroupQuery property.
    /// </summary>
    public async Task<string?> GetTemplatesGroupQuery()
    {
        if (CoreJsModule is null)
        {
            return TemplatesGroupQuery;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return TemplatesGroupQuery;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "templatesGroupQuery");
        if (result is not null)
        {
#pragma warning disable BL0005
             TemplatesGroupQuery = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(TemplatesGroupQuery)] = TemplatesGroupQuery;
        }
         
        return TemplatesGroupQuery;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ThumbnailUrl property.
    /// </summary>
    public async Task<string?> GetThumbnailUrl()
    {
        if (CoreJsModule is null)
        {
            return ThumbnailUrl;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ThumbnailUrl;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "thumbnailUrl");
        if (result is not null)
        {
#pragma warning disable BL0005
             ThumbnailUrl = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ThumbnailUrl)] = ThumbnailUrl;
        }
         
        return ThumbnailUrl;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Units property.
    /// </summary>
    public async Task<PortalUnits?> GetUnits()
    {
        if (CoreJsModule is null)
        {
            return Units;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Units;
        }

        // get the property value
        JsNullableEnumWrapper<PortalUnits>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<PortalUnits>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "units");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Units = (PortalUnits)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Units)] = Units;
        }
         
        return Units;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Url property.
    /// </summary>
    public async Task<string?> GetUrl()
    {
        if (CoreJsModule is null)
        {
            return Url;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Url;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "url");
        if (result is not null)
        {
#pragma warning disable BL0005
             Url = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Url)] = Url;
        }
         
        return Url;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the UrlKey property.
    /// </summary>
    public async Task<string?> GetUrlKey()
    {
        if (CoreJsModule is null)
        {
            return UrlKey;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return UrlKey;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "urlKey");
        if (result is not null)
        {
#pragma warning disable BL0005
             UrlKey = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(UrlKey)] = UrlKey;
        }
         
        return UrlKey;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Use3dBasemaps property.
    /// </summary>
    public async Task<bool?> GetUse3dBasemaps()
    {
        if (CoreJsModule is null)
        {
            return Use3dBasemaps;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Use3dBasemaps;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "use3dBasemaps");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Use3dBasemaps = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Use3dBasemaps)] = Use3dBasemaps;
        }
         
        return Use3dBasemaps;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the UseDefault3dBasemap property.
    /// </summary>
    public async Task<bool?> GetUseDefault3dBasemap()
    {
        if (CoreJsModule is null)
        {
            return UseDefault3dBasemap;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return UseDefault3dBasemap;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "useDefault3dBasemap");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             UseDefault3dBasemap = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(UseDefault3dBasemap)] = UseDefault3dBasemap;
        }
         
        return UseDefault3dBasemap;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the UseStandardizedQuery property.
    /// </summary>
    public async Task<bool?> GetUseStandardizedQuery()
    {
        if (CoreJsModule is null)
        {
            return UseStandardizedQuery;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return UseStandardizedQuery;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "useStandardizedQuery");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             UseStandardizedQuery = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(UseStandardizedQuery)] = UseStandardizedQuery;
        }
         
        return UseStandardizedQuery;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the UseVectorBasemaps property.
    /// </summary>
    public async Task<bool?> GetUseVectorBasemaps()
    {
        if (CoreJsModule is null)
        {
            return UseVectorBasemaps;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return UseVectorBasemaps;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "useVectorBasemaps");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             UseVectorBasemaps = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(UseVectorBasemaps)] = UseVectorBasemaps;
        }
         
        return UseVectorBasemaps;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the VectorBasemapGalleryGroupQuery property.
    /// </summary>
    public async Task<string?> GetVectorBasemapGalleryGroupQuery()
    {
        if (CoreJsModule is null)
        {
            return VectorBasemapGalleryGroupQuery;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return VectorBasemapGalleryGroupQuery;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "vectorBasemapGalleryGroupQuery");
        if (result is not null)
        {
#pragma warning disable BL0005
             VectorBasemapGalleryGroupQuery = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(VectorBasemapGalleryGroupQuery)] = VectorBasemapGalleryGroupQuery;
        }
         
        return VectorBasemapGalleryGroupQuery;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Access property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAccess(PortalAccess? value)
    {
#pragma warning disable BL0005
        Access = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Access)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "access", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the AllSSL property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAllSSL(bool? value)
    {
#pragma warning disable BL0005
        AllSSL = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(AllSSL)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "allSSL", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the AuthMode property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAuthMode(AuthMode? value)
    {
#pragma warning disable BL0005
        AuthMode = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(AuthMode)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "authMode", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the AuthorizedCrossOriginDomains property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAuthorizedCrossOriginDomains(IReadOnlyList<string>? value)
    {
#pragma warning disable BL0005
        AuthorizedCrossOriginDomains = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(AuthorizedCrossOriginDomains)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "authorizedCrossOriginDomains", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the BasemapGalleryGroupQuery property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBasemapGalleryGroupQuery(string? value)
    {
#pragma warning disable BL0005
        BasemapGalleryGroupQuery = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(BasemapGalleryGroupQuery)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "basemapGalleryGroupQuery", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the BasemapGalleryGroupQuery3D property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBasemapGalleryGroupQuery3D(string? value)
    {
#pragma warning disable BL0005
        BasemapGalleryGroupQuery3D = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(BasemapGalleryGroupQuery3D)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "basemapGalleryGroupQuery3D", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the BingKey property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBingKey(string? value)
    {
#pragma warning disable BL0005
        BingKey = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(BingKey)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "bingKey", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CanListApps property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCanListApps(bool? value)
    {
#pragma warning disable BL0005
        CanListApps = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CanListApps)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "canListApps", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CanListData property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCanListData(bool? value)
    {
#pragma warning disable BL0005
        CanListData = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CanListData)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "canListData", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CanListPreProvisionedItems property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCanListPreProvisionedItems(bool? value)
    {
#pragma warning disable BL0005
        CanListPreProvisionedItems = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CanListPreProvisionedItems)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "canListPreProvisionedItems", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CanProvisionDirectPurchase property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCanProvisionDirectPurchase(bool? value)
    {
#pragma warning disable BL0005
        CanProvisionDirectPurchase = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CanProvisionDirectPurchase)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "canProvisionDirectPurchase", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CanSearchPublic property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCanSearchPublic(bool? value)
    {
#pragma warning disable BL0005
        CanSearchPublic = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CanSearchPublic)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "canSearchPublic", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CanShareBingPublic property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCanShareBingPublic(bool? value)
    {
#pragma warning disable BL0005
        CanShareBingPublic = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CanShareBingPublic)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "canShareBingPublic", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CanSharePublic property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCanSharePublic(bool? value)
    {
#pragma warning disable BL0005
        CanSharePublic = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CanSharePublic)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "canSharePublic", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CanSignInArcGIS property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCanSignInArcGIS(bool? value)
    {
#pragma warning disable BL0005
        CanSignInArcGIS = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CanSignInArcGIS)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "canSignInArcGIS", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CanSignInIDP property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCanSignInIDP(bool? value)
    {
#pragma warning disable BL0005
        CanSignInIDP = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CanSignInIDP)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "canSignInIDP", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ColorSetsGroupQuery property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetColorSetsGroupQuery(string? value)
    {
#pragma warning disable BL0005
        ColorSetsGroupQuery = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ColorSetsGroupQuery)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "colorSetsGroupQuery", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CommentsEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCommentsEnabled(bool? value)
    {
#pragma warning disable BL0005
        CommentsEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CommentsEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "commentsEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Created property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCreated(DateTime? value)
    {
#pragma warning disable BL0005
        Created = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Created)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "created", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Culture property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCulture(string? value)
    {
#pragma warning disable BL0005
        Culture = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Culture)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "culture", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CustomBaseUrl property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCustomBaseUrl(string? value)
    {
#pragma warning disable BL0005
        CustomBaseUrl = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CustomBaseUrl)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "customBaseUrl", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Default3DBasemapQuery property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDefault3DBasemapQuery(string? value)
    {
#pragma warning disable BL0005
        Default3DBasemapQuery = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Default3DBasemapQuery)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "default3DBasemapQuery", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DefaultExtent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDefaultExtent(Extent? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        DefaultExtent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DefaultExtent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setDefaultExtent", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Description property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDescription(string? value)
    {
#pragma warning disable BL0005
        Description = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Description)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "description", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DevBasemapGalleryGroupQuery property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDevBasemapGalleryGroupQuery(string? value)
    {
#pragma warning disable BL0005
        DevBasemapGalleryGroupQuery = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DevBasemapGalleryGroupQuery)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "devBasemapGalleryGroupQuery", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the EueiEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetEueiEnabled(bool? value)
    {
#pragma warning disable BL0005
        EueiEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(EueiEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "eueiEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FeaturedGroups property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFeaturedGroups(IReadOnlyList<PortalFeaturedGroups>? value)
    {
        if (value is not null)
        {
            foreach (PortalFeaturedGroups item in value)
            {
                item.CoreJsModule = CoreJsModule;
                item.Parent = this;
                item.Layer = Layer;
                item.View = View;
            }
        }
        
#pragma warning disable BL0005
        FeaturedGroups = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FeaturedGroups)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setFeaturedGroups", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FeaturedItemsGroupQuery property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFeaturedItemsGroupQuery(string? value)
    {
#pragma warning disable BL0005
        FeaturedItemsGroupQuery = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FeaturedItemsGroupQuery)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "featuredItemsGroupQuery", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the GalleryTemplatesGroupQuery property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetGalleryTemplatesGroupQuery(string? value)
    {
#pragma warning disable BL0005
        GalleryTemplatesGroupQuery = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(GalleryTemplatesGroupQuery)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "galleryTemplatesGroupQuery", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HasCategorySchema property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHasCategorySchema(bool? value)
    {
#pragma warning disable BL0005
        HasCategorySchema = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HasCategorySchema)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "hasCategorySchema", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HasClassificationSchema property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHasClassificationSchema(bool? value)
    {
#pragma warning disable BL0005
        HasClassificationSchema = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HasClassificationSchema)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "hasClassificationSchema", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HelperServices property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHelperServices(HelperServices? value)
    {
#pragma warning disable BL0005
        HelperServices = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HelperServices)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "helperServices", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HomePageFeaturedContent property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHomePageFeaturedContent(string? value)
    {
#pragma warning disable BL0005
        HomePageFeaturedContent = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HomePageFeaturedContent)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "homePageFeaturedContent", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HomePageFeaturedContentCount property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHomePageFeaturedContentCount(int? value)
    {
#pragma warning disable BL0005
        HomePageFeaturedContentCount = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HomePageFeaturedContentCount)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "homePageFeaturedContentCount", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HttpPort property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHttpPort(double? value)
    {
#pragma warning disable BL0005
        HttpPort = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HttpPort)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "httpPort", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HttpsPort property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHttpsPort(double? value)
    {
#pragma warning disable BL0005
        HttpsPort = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HttpsPort)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "httpsPort", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the IpCntryCode property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetIpCntryCode(string? value)
    {
#pragma warning disable BL0005
        IpCntryCode = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(IpCntryCode)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "ipCntryCode", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the IsPortal property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetIsPortal(bool? value)
    {
#pragma warning disable BL0005
        IsPortal = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(IsPortal)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "isPortal", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the IsReadOnly property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetIsReadOnly(bool? value)
    {
#pragma warning disable BL0005
        IsReadOnly = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(IsReadOnly)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "isReadOnly", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LayerTemplatesGroupQuery property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLayerTemplatesGroupQuery(string? value)
    {
#pragma warning disable BL0005
        LayerTemplatesGroupQuery = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LayerTemplatesGroupQuery)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "layerTemplatesGroupQuery", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MaxTokenExpirationMinutes property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMaxTokenExpirationMinutes(double? value)
    {
#pragma warning disable BL0005
        MaxTokenExpirationMinutes = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MaxTokenExpirationMinutes)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "maxTokenExpirationMinutes", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Modified property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetModified(DateTime? value)
    {
#pragma warning disable BL0005
        Modified = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Modified)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "modified", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Name property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetName(string? value)
    {
#pragma warning disable BL0005
        Name = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Name)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "name", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PortalHostname property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPortalHostname(string? value)
    {
#pragma warning disable BL0005
        PortalHostname = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PortalHostname)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "portalHostname", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PortalId property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPortalId(string? value)
    {
#pragma warning disable BL0005
        PortalId = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PortalId)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "id", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PortalMode property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPortalMode(PortalMode? value)
    {
#pragma warning disable BL0005
        PortalMode = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PortalMode)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "portalMode", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PortalProperties property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPortalProperties(PortalProperties? value)
    {
#pragma warning disable BL0005
        PortalProperties = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PortalProperties)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setPortalProperties", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the RecycleBinEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRecycleBinEnabled(bool? value)
    {
#pragma warning disable BL0005
        RecycleBinEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RecycleBinEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "recycleBinEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Region property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRegion(string? value)
    {
#pragma warning disable BL0005
        Region = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Region)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "region", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the RotatorPanels property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRotatorPanels(IReadOnlyList<RotatorPanel>? value)
    {
#pragma warning disable BL0005
        RotatorPanels = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RotatorPanels)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "rotatorPanels", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ShowHomePageDescription property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetShowHomePageDescription(bool? value)
    {
#pragma warning disable BL0005
        ShowHomePageDescription = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ShowHomePageDescription)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "showHomePageDescription", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsHostedServices property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsHostedServices(bool? value)
    {
#pragma warning disable BL0005
        SupportsHostedServices = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsHostedServices)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsHostedServices", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SymbolSetsGroupQuery property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSymbolSetsGroupQuery(string? value)
    {
#pragma warning disable BL0005
        SymbolSetsGroupQuery = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SymbolSetsGroupQuery)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "symbolSetsGroupQuery", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the TemplatesGroupQuery property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTemplatesGroupQuery(string? value)
    {
#pragma warning disable BL0005
        TemplatesGroupQuery = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(TemplatesGroupQuery)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "templatesGroupQuery", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Units property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUnits(PortalUnits? value)
    {
#pragma warning disable BL0005
        Units = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Units)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "units", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Url property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUrl(string? value)
    {
#pragma warning disable BL0005
        Url = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Url)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "url", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the UrlKey property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUrlKey(string? value)
    {
#pragma warning disable BL0005
        UrlKey = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(UrlKey)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "urlKey", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Use3dBasemaps property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUse3dBasemaps(bool? value)
    {
#pragma warning disable BL0005
        Use3dBasemaps = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Use3dBasemaps)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "use3dBasemaps", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the UseDefault3dBasemap property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUseDefault3dBasemap(bool? value)
    {
#pragma warning disable BL0005
        UseDefault3dBasemap = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(UseDefault3dBasemap)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "useDefault3dBasemap", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the UseStandardizedQuery property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUseStandardizedQuery(bool? value)
    {
#pragma warning disable BL0005
        UseStandardizedQuery = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(UseStandardizedQuery)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "useStandardizedQuery", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the UseVectorBasemaps property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUseVectorBasemaps(bool? value)
    {
#pragma warning disable BL0005
        UseVectorBasemaps = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(UseVectorBasemaps)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "useVectorBasemaps", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the VectorBasemapGalleryGroupQuery property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetVectorBasemapGalleryGroupQuery(string? value)
    {
#pragma warning disable BL0005
        VectorBasemapGalleryGroupQuery = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(VectorBasemapGalleryGroupQuery)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "vectorBasemapGalleryGroupQuery", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the AuthorizedCrossOriginDomains property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToAuthorizedCrossOriginDomains(params string[] values)
    {
        string[] join = AuthorizedCrossOriginDomains is null
            ? values
            : [..AuthorizedCrossOriginDomains, ..values];
        await SetAuthorizedCrossOriginDomains(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the FeaturedGroups property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToFeaturedGroups(params PortalFeaturedGroups[] values)
    {
        PortalFeaturedGroups[] join = FeaturedGroups is null
            ? values
            : [..FeaturedGroups, ..values];
        await SetFeaturedGroups(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the RotatorPanels property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToRotatorPanels(params RotatorPanel[] values)
    {
        RotatorPanel[] join = RotatorPanels is null
            ? values
            : [..RotatorPanels, ..values];
        await SetRotatorPanels(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the AuthorizedCrossOriginDomains property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromAuthorizedCrossOriginDomains(params string[] values)
    {
        if (AuthorizedCrossOriginDomains is null)
        {
            return;
        }
        await SetAuthorizedCrossOriginDomains(AuthorizedCrossOriginDomains.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the FeaturedGroups property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromFeaturedGroups(params PortalFeaturedGroups[] values)
    {
        if (FeaturedGroups is null)
        {
            return;
        }
        await SetFeaturedGroups(FeaturedGroups.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the RotatorPanels property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromRotatorPanels(params RotatorPanel[] values)
    {
        if (RotatorPanels is null)
        {
            return;
        }
        await SetRotatorPanels(RotatorPanels.Except(values).ToArray());
    }
    
#endregion

#region Public Methods

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalcancelload-method">GeoBlazor Docs</a>
    ///     Cancels a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#load">load()</a> operation if it is already in progress.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#cancelLoad">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task CancelLoad()
    {
        if (CoreJsModule is null)
        {
            return;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference!.InvokeVoidAsync(
            "cancelLoad", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalfetchbasemaps-method">GeoBlazor Docs</a>
    ///     Fetches the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Basemap.html">basemaps</a> that are displayed in the
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-BasemapGallery.html">BasemapGallery</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#fetchBasemaps">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="basemapGalleryGroupQuery">
    ///     When provided, this argument is used
    ///     to fetch basemaps based on input query parameters.
    /// </param>
    /// <param name="options">
    ///     An object with the following properties.
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<Basemap[]?> FetchBasemaps(string basemapGalleryGroupQuery,
        PortalFetchBasemapsOptions options,
        CancellationToken cancellationToken = default)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        Basemap[]? result = await JsComponentReference!.InvokeAsync<Basemap[]?>(
            "fetchBasemaps", 
            CancellationTokenSource.Token,
            basemapGalleryGroupQuery,
            new { signal = abortSignal, include3d = options.Include3d });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalfetchcategoryschema-method">GeoBlazor Docs</a>
    ///     If present, fetches the organization's category schema.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#fetchCategorySchema">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<string[]?> FetchCategorySchema(CancellationToken cancellationToken = default)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        string[]? result = await JsComponentReference!.InvokeAsync<string[]?>(
            "fetchCategorySchema", 
            CancellationTokenSource.Token,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalfetchclassificationschema-method">GeoBlazor Docs</a>
    ///     If present, fetches the organization's classification schema.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#fetchClassificationSchema">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<string?> FetchClassificationSchema(CancellationToken cancellationToken = default)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        string? result = await JsComponentReference!.InvokeAsync<string?>(
            "fetchClassificationSchema", 
            CancellationTokenSource.Token,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalfetchdefault3dbasemap-method">GeoBlazor Docs</a>
    ///     Fetches the default 3d <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Basemap.html">Basemap</a> to use in <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html">SceneView</a> for this portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#fetchDefault3DBasemap">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<Basemap?> FetchDefault3DBasemap(CancellationToken cancellationToken = default)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        Basemap? result = await JsComponentReference!.InvokeAsync<Basemap?>(
            "fetchDefault3DBasemap", 
            CancellationTokenSource.Token,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalfetchfeaturedgroups-method">GeoBlazor Docs</a>
    ///     Fetches the featured groups in the Portal.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#fetchFeaturedGroups">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<PortalGroup[]?> FetchFeaturedGroups(CancellationToken cancellationToken = default)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        PortalGroup[]? result = await JsComponentReference!.InvokeAsync<PortalGroup[]?>(
            "fetchFeaturedGroups", 
            CancellationTokenSource.Token,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalfetchregions-method">GeoBlazor Docs</a>
    ///     Fetches and returns the associated regions with the portal instance.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#fetchRegions">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<string[]?> FetchRegions(CancellationToken cancellationToken = default)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        string[]? result = await JsComponentReference!.InvokeAsync<string[]?>(
            "fetchRegions", 
            CancellationTokenSource.Token,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalfetchsettings-method">GeoBlazor Docs</a>
    ///     Fetches and returns the portal settings as seen by the current user(s), whether anonymous or signed in.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#fetchSettings">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<string?> FetchSettings(CancellationToken cancellationToken = default)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        string? result = await JsComponentReference!.InvokeAsync<string?>(
            "fetchSettings", 
            CancellationTokenSource.Token,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalisfulfilled-method">GeoBlazor Docs</a>
    ///     `isFulfilled()` may be used to verify if creating an instance of the class is fulfilled (either resolved or rejected).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#isFulfilled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task<bool?> IsFulfilled()
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<bool?>(
            "isFulfilled", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalisrejected-method">GeoBlazor Docs</a>
    ///     `isRejected()` may be used to verify if creating an instance of the class is rejected.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#isRejected">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task<bool?> IsRejected()
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<bool?>(
            "isRejected", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalisresolved-method">GeoBlazor Docs</a>
    ///     `isResolved()` may be used to verify if creating an instance of the class is resolved.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#isResolved">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task<bool?> IsResolved()
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<bool?>(
            "isResolved", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalload-method">GeoBlazor Docs</a>
    ///     Loads the resources referenced by this class.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#load">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<string?> Load(CancellationToken cancellationToken = default)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        string? result = await JsComponentReference!.InvokeAsync<string?>(
            "load", 
            CancellationTokenSource.Token,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalquerygroups-method">GeoBlazor Docs</a>
    ///     Executes a query against the Portal to return an array of
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html">PortalGroup</a> objects that match the input query.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#queryGroups">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="queryParams">
    ///     The input query parameters
    ///     defined in <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalQueryParams.html">PortalQueryParams</a>.
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<PortalQueryResult?> QueryGroups(PortalQueryParams queryParams,
        CancellationToken cancellationToken = default)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        PortalQueryResult? result = await JsComponentReference!.InvokeAsync<PortalQueryResult?>(
            "queryGroups", 
            CancellationTokenSource.Token,
            queryParams,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalqueryitems-method">GeoBlazor Docs</a>
    ///     Executes a query against the Portal to return an array of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html">PortalItem</a>
    ///     objects that match the input query.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#queryItems">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="queryParams">
    ///     The input query parameters
    ///     defined in <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalQueryParams.html">PortalQueryParams</a>.
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<PortalQueryResult?> QueryItems(PortalQueryParams queryParams,
        CancellationToken cancellationToken = default)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        PortalQueryResult? result = await JsComponentReference!.InvokeAsync<PortalQueryResult?>(
            "queryItems", 
            CancellationTokenSource.Token,
            queryParams,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalqueryusers-method">GeoBlazor Docs</a>
    ///     Executes a query against the Portal to return an array of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalUser.html">PortalUser</a>
    ///     objects that match the input query.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#queryUsers">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="queryParams">
    ///     The input query parameters
    ///     defined in <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalQueryParams.html">PortalQueryParams</a>.
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<PortalQueryResult?> QueryUsers(PortalQueryParams queryParams,
        CancellationToken cancellationToken = default)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        PortalQueryResult? result = await JsComponentReference!.InvokeAsync<PortalQueryResult?>(
            "queryUsers", 
            CancellationTokenSource.Token,
            queryParams,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Portal.html#portalwhen-method">GeoBlazor Docs</a>
    ///     `when()` may be leveraged once an instance of the class is created.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html#when">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="callback">
    ///     The function to call when the promise resolves.
    /// </param>
    /// <param name="errback">
    ///     The function to execute when the promise fails.
    /// </param>
    [ArcGISMethod]
    public async Task<string?> When(Func<Task> callback,
        Func<Task> errback)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<string?>(
            "when", 
            CancellationTokenSource.Token,
            callback,
            errback);
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Extent defaultExtent:
                if (defaultExtent != DefaultExtent)
                {
                    DefaultExtent = defaultExtent;
                    ModifiedParameters[nameof(DefaultExtent)] = DefaultExtent;
                }
                
                return true;
            case PortalFeaturedGroups featuredGroups:
                FeaturedGroups ??= [];
                if (!FeaturedGroups.Contains(featuredGroups))
                {
                    FeaturedGroups = [..FeaturedGroups, featuredGroups];
                    ModifiedParameters[nameof(FeaturedGroups)] = FeaturedGroups;
                }
                
                return true;
            case PortalUser user:
                if (user != User)
                {
                    User = user;
                    ModifiedParameters[nameof(User)] = User;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Extent _:
                DefaultExtent = null;
                ModifiedParameters[nameof(DefaultExtent)] = DefaultExtent;
                return true;
            case PortalFeaturedGroups featuredGroups:
                FeaturedGroups = FeaturedGroups?.Where(f => f != featuredGroups).ToList();
                ModifiedParameters[nameof(FeaturedGroups)] = FeaturedGroups;
                return true;
            case PortalUser _:
                User = null;
                ModifiedParameters[nameof(User)] = User;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        DefaultExtent?.ValidateRequiredGeneratedChildren();
        if (FeaturedGroups is not null)
        {
            foreach (PortalFeaturedGroups child in FeaturedGroups)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        User?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
