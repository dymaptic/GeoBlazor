// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.RelationshipLabels.html">GeoBlazor Docs</a>
///     Describes the schema of the RelationshipLabels element.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#RelationshipLabels">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class RelationshipLabels : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public RelationshipLabels()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="bottom">
    ///     The label corresponding with the bottom corner of the legend if the focus is set to `HH`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#RelationshipLabels">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="left">
    ///     The label corresponding with the left corner of the legend (if the focus is set to `HH`).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#RelationshipLabels">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="right">
    ///     The label corresponding with the right corner of the legend (if the focus is set to `HH`).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#RelationshipLabels">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="top">
    ///     The label corresponding with the top corner of the legend if the focus is set to `HH`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#RelationshipLabels">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public RelationshipLabels(
        string? bottom = null,
        string? left = null,
        string? right = null,
        string? top = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Bottom = bottom;
        Left = left;
        Right = right;
        Top = top;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.RelationshipLabels.html#relationshiplabelsbottom-property">GeoBlazor Docs</a>
    ///     The label corresponding with the bottom corner of the legend if the focus is set to `HH`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#RelationshipLabels">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Bottom { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.RelationshipLabels.html#relationshiplabelsleft-property">GeoBlazor Docs</a>
    ///     The label corresponding with the left corner of the legend (if the focus is set to `HH`).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#RelationshipLabels">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Left { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.RelationshipLabels.html#relationshiplabelsright-property">GeoBlazor Docs</a>
    ///     The label corresponding with the right corner of the legend (if the focus is set to `HH`).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#RelationshipLabels">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Right { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.RelationshipLabels.html#relationshiplabelstop-property">GeoBlazor Docs</a>
    ///     The label corresponding with the top corner of the legend if the focus is set to `HH`.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend-support-ActiveLayerInfo.html#RelationshipLabels">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Top { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Bottom property.
    /// </summary>
    public async Task<string?> GetBottom()
    {
        if (CoreJsModule is null)
        {
            return Bottom;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Bottom;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "bottom");
        if (result is not null)
        {
#pragma warning disable BL0005
             Bottom = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Bottom)] = Bottom;
        }
         
        return Bottom;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Left property.
    /// </summary>
    public async Task<string?> GetLeft()
    {
        if (CoreJsModule is null)
        {
            return Left;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Left;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "left");
        if (result is not null)
        {
#pragma warning disable BL0005
             Left = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Left)] = Left;
        }
         
        return Left;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Right property.
    /// </summary>
    public async Task<string?> GetRight()
    {
        if (CoreJsModule is null)
        {
            return Right;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Right;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "right");
        if (result is not null)
        {
#pragma warning disable BL0005
             Right = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Right)] = Right;
        }
         
        return Right;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Top property.
    /// </summary>
    public async Task<string?> GetTop()
    {
        if (CoreJsModule is null)
        {
            return Top;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Top;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "top");
        if (result is not null)
        {
#pragma warning disable BL0005
             Top = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Top)] = Top;
        }
         
        return Top;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Bottom property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBottom(string? value)
    {
#pragma warning disable BL0005
        Bottom = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Bottom)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "bottom", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Left property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLeft(string? value)
    {
#pragma warning disable BL0005
        Left = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Left)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "left", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Right property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRight(string? value)
    {
#pragma warning disable BL0005
        Right = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Right)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "right", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Top property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTop(string? value)
    {
#pragma warning disable BL0005
        Top = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Top)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "top", value);
    }
    
#endregion

}
