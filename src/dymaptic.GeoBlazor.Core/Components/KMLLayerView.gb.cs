// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Represents the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-LayerView.html">LayerView</a> of a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-KMLLayer.html">KMLLayer</a> after it has been added to a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html">Map</a> in a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html">MapView</a>.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-KMLLayerView.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class KMLLayerView : LayerView
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public KMLLayerView()
    {
    }

#region Public Properties / Blazor Parameters

    /// <summary>
    ///     A collection of all the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-KMLLayerView.html#MapImage">MapImages</a> from visible sublayers.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-KMLLayerView.html#allVisibleMapImages">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public IReadOnlyList<KMLLayerViewMapImage>? AllVisibleMapImages { get; protected set; }
    
    /// <summary>
    ///     A collection of graphics representing all the points from visible sublayers.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-KMLLayerView.html#allVisiblePoints">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public IReadOnlyList<Graphic>? AllVisiblePoints { get; protected set; }
    
    /// <summary>
    ///     A collection of graphics representing all the polygons from visible sublayers.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-KMLLayerView.html#allVisiblePolygons">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public IReadOnlyList<Graphic>? AllVisiblePolygons { get; protected set; }
    
    /// <summary>
    ///     A collection of graphics representing all the polylines from visible sublayers.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-KMLLayerView.html#allVisiblePolylines">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public IReadOnlyList<Graphic>? AllVisiblePolylines { get; protected set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the AllVisibleMapImages property.
    /// </summary>
    public async Task<IReadOnlyList<KMLLayerViewMapImage>?> GetAllVisibleMapImages()
    {
        if (CoreJsModule is null)
        {
            return AllVisibleMapImages;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return AllVisibleMapImages;
        }

        IReadOnlyList<KMLLayerViewMapImage>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<KMLLayerViewMapImage>?>(
            "getAllVisibleMapImages", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            AllVisibleMapImages = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(AllVisibleMapImages)] = AllVisibleMapImages;
        }
        
        return AllVisibleMapImages;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the AllVisiblePoints property.
    /// </summary>
    public async Task<IReadOnlyList<Graphic>?> GetAllVisiblePoints()
    {
        if (CoreJsModule is null)
        {
            return AllVisiblePoints;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return AllVisiblePoints;
        }

        IReadOnlyList<Graphic>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<Graphic>?>(
            "getAllVisiblePoints", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            AllVisiblePoints = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(AllVisiblePoints)] = AllVisiblePoints;
        }
        
        return AllVisiblePoints;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the AllVisiblePolygons property.
    /// </summary>
    public async Task<IReadOnlyList<Graphic>?> GetAllVisiblePolygons()
    {
        if (CoreJsModule is null)
        {
            return AllVisiblePolygons;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return AllVisiblePolygons;
        }

        IReadOnlyList<Graphic>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<Graphic>?>(
            "getAllVisiblePolygons", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            AllVisiblePolygons = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(AllVisiblePolygons)] = AllVisiblePolygons;
        }
        
        return AllVisiblePolygons;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the AllVisiblePolylines property.
    /// </summary>
    public async Task<IReadOnlyList<Graphic>?> GetAllVisiblePolylines()
    {
        if (CoreJsModule is null)
        {
            return AllVisiblePolylines;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return AllVisiblePolylines;
        }

        IReadOnlyList<Graphic>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<Graphic>?>(
            "getAllVisiblePolylines", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            AllVisiblePolylines = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(AllVisiblePolylines)] = AllVisiblePolylines;
        }
        
        return AllVisiblePolylines;
    }
    
#endregion

}
