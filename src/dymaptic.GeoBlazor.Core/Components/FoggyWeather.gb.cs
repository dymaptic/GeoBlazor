// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FoggyWeather.html">GeoBlazor Docs</a>
///     The FoggyWeather class allows you to change the weather conditions in the scene to foggy weather.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-3d-environment-FoggyWeather.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class FoggyWeather : MapComponent,
    IEnvironmentWeather,
    ISceneViewEnvironmentWeather
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public FoggyWeather()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="fogStrength">
    ///     Specifies the amount of fog used in the scene.
    ///     default 0.5
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-3d-environment-FoggyWeather.html#fogStrength">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public FoggyWeather(
        double? fogStrength = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        FogStrength = fogStrength;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Specifies the amount of fog used in the scene.
    ///     default 0.5
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-3d-environment-FoggyWeather.html#fogStrength">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? FogStrength { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the FogStrength property.
    /// </summary>
    public async Task<double?> GetFogStrength()
    {
        if (CoreJsModule is null)
        {
            return FogStrength;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return FogStrength;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "fogStrength");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             FogStrength = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FogStrength)] = FogStrength;
        }
         
        return FogStrength;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the FogStrength property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFogStrength(double? value)
    {
#pragma warning disable BL0005
        FogStrength = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FogStrength)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "fogStrength", value);
    }
    
#endregion

}
