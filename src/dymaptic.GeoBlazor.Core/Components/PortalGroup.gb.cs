// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    The group resource represents a group within the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-Portal.html">Portal</a>.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class PortalGroup : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public PortalGroup()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="access">
    ///     The access privileges on the group which determines who can see and access the group.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#access">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="created">
    ///     The date the group was created.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#created">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="description">
    ///     A detailed description of the group.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#description">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="isInvitationOnly">
    ///     If set to `true`, then users will not be able to apply to join the group.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#isInvitationOnly">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="modified">
    ///     The date the group was last modified.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#modified">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="owner">
    ///     The username of the group's owner.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#owner">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="portal">
    ///     The portal associated with the group.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#portal">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="portalGroupId">
    ///     The unique id for the group.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#id">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="snippet">
    ///     A short summary that describes the group.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#snippet">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="tags">
    ///     User defined tags that describe the group.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#tags">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="title">
    ///     The title of the group.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#title">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public PortalGroup(
        PortalGroupAccess? access = null,
        DateTime? created = null,
        string? description = null,
        bool? isInvitationOnly = null,
        DateTime? modified = null,
        string? owner = null,
        Portal? portal = null,
        string? portalGroupId = null,
        string? snippet = null,
        IReadOnlyList<string>? tags = null,
        string? title = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Access = access;
        Created = created;
        Description = description;
        IsInvitationOnly = isInvitationOnly;
        Modified = modified;
        Owner = owner;
        Portal = portal;
        PortalGroupId = portalGroupId;
        Snippet = snippet;
        Tags = tags;
        Title = title;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The access privileges on the group which determines who can see and access the group.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#access">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public PortalGroupAccess? Access { get; set; }
    
    /// <summary>
    ///     The date the group was created.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#created">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public DateTime? Created { get; set; }
    
    /// <summary>
    ///     A detailed description of the group.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#description">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Description { get; set; }
    
    /// <summary>
    ///     If set to `true`, then users will not be able to apply to join the group.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#isInvitationOnly">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? IsInvitationOnly { get; set; }
    
    /// <summary>
    ///     The date the group was last modified.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#modified">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public DateTime? Modified { get; set; }
    
    /// <summary>
    ///     The username of the group's owner.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#owner">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Owner { get; set; }
    
    /// <summary>
    ///     The portal associated with the group.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#portal">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Portal? Portal { get; set; }
    
    /// <summary>
    ///     The unique id for the group.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#id">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? PortalGroupId { get; set; }
    
    /// <summary>
    ///     A short summary that describes the group.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#snippet">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Snippet { get; set; }
    
    /// <summary>
    ///     The JSON used to create the property values when the `PortalGroup` is created.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#sourceJSON">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? SourceJSON { get; protected set; }
    
    /// <summary>
    ///     User defined tags that describe the group.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#tags">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<string>? Tags { get; set; }
    
    /// <summary>
    ///     The URL to the thumbnail used for the group.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#thumbnailUrl">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? ThumbnailUrl { get; protected set; }
    
    /// <summary>
    ///     The title of the group.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#title">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Title { get; set; }
    
    /// <summary>
    ///     The URL to the group.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#url">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Url { get; protected set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Access property.
    /// </summary>
    public async Task<PortalGroupAccess?> GetAccess()
    {
        if (CoreJsModule is null)
        {
            return Access;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Access;
        }

        // get the property value
#pragma warning disable BL0005
        Access = await CoreJsModule!.InvokeAsync<PortalGroupAccess>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "access");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Access)] = Access;
        return Access;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Created property.
    /// </summary>
    public async Task<DateTime?> GetCreated()
    {
        if (CoreJsModule is null)
        {
            return Created;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Created;
        }

        // get the property value
#pragma warning disable BL0005
        Created = await CoreJsModule!.InvokeAsync<DateTime>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "created");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Created)] = Created;
        return Created;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Description property.
    /// </summary>
    public async Task<string?> GetDescription()
    {
        if (CoreJsModule is null)
        {
            return Description;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Description;
        }

        // get the property value
#pragma warning disable BL0005
        Description = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "description");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Description)] = Description;
        return Description;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the IsInvitationOnly property.
    /// </summary>
    public async Task<bool?> GetIsInvitationOnly()
    {
        if (CoreJsModule is null)
        {
            return IsInvitationOnly;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return IsInvitationOnly;
        }

        // get the property value
#pragma warning disable BL0005
        IsInvitationOnly = await CoreJsModule!.InvokeAsync<bool>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "isInvitationOnly");
#pragma warning restore BL0005
         ModifiedParameters[nameof(IsInvitationOnly)] = IsInvitationOnly;
        return IsInvitationOnly;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Modified property.
    /// </summary>
    public async Task<DateTime?> GetModified()
    {
        if (CoreJsModule is null)
        {
            return Modified;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Modified;
        }

        // get the property value
#pragma warning disable BL0005
        Modified = await CoreJsModule!.InvokeAsync<DateTime>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "modified");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Modified)] = Modified;
        return Modified;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Owner property.
    /// </summary>
    public async Task<string?> GetOwner()
    {
        if (CoreJsModule is null)
        {
            return Owner;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Owner;
        }

        // get the property value
#pragma warning disable BL0005
        Owner = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "owner");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Owner)] = Owner;
        return Owner;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Portal property.
    /// </summary>
    public async Task<Portal?> GetPortal()
    {
        if (CoreJsModule is null)
        {
            return Portal;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Portal;
        }

        // get the JS object reference
        IJSObjectReference? refResult = (await CoreJsModule!.InvokeAsync<JsObjectRefWrapper?>(
            "getObjectRefForProperty", CancellationTokenSource.Token, JsComponentReference, 
            "portal"))?.Value;
            
        if (refResult is null)
        {
            return null;
        }
        
        // Try to deserialize the object. This might fail if we don't have the
        // all deserialization edge cases handled.
        try
        {
#pragma warning disable BL0005
            Portal = await CoreJsModule.InvokeAsync<Portal?>(
                "createGeoBlazorObject", CancellationTokenSource.Token, refResult);
#pragma warning restore BL0005
            ModifiedParameters[nameof(Portal)] = Portal;
            if (Portal is not null)
            {
                Portal.Parent = this;
                Portal.View = View;
                Portal.JsComponentReference = refResult;
                await CoreJsModule!.InvokeVoidAsync("registerGeoBlazorObject",
                    CancellationTokenSource.Token, refResult, Portal.Id);
                return Portal;
            }
        }
        catch
        {
            Console.WriteLine("Failed to deserialize Portal");
        }
#pragma warning disable BL0005
        Portal = new Portal();
#pragma warning restore BL0005
         ModifiedParameters[nameof(Portal)] = Portal;
        Portal.Parent = this;
        Portal.View = View;
        Portal.JsComponentReference = refResult;
        // register this type in JS
        await CoreJsModule!.InvokeVoidAsync("registerGeoBlazorObject",
            CancellationTokenSource.Token, refResult, Portal.Id);
        await Portal.GetProperty<PortalAccess>(nameof(Portal.Access));
        await Portal.GetProperty<bool>(nameof(Portal.AllSSL));
        await Portal.GetProperty<AuthMode>(nameof(Portal.AuthMode));
        await Portal.GetProperty<IReadOnlyList<string>>(nameof(Portal.AuthorizedCrossOriginDomains));
        await Portal.GetProperty<string>(nameof(Portal.BasemapGalleryGroupQuery));
        await Portal.GetProperty<string>(nameof(Portal.BasemapGalleryGroupQuery3D));
        await Portal.GetProperty<string>(nameof(Portal.BingKey));
        await Portal.GetProperty<bool>(nameof(Portal.CanListApps));
        await Portal.GetProperty<bool>(nameof(Portal.CanListData));
        await Portal.GetProperty<bool>(nameof(Portal.CanListPreProvisionedItems));
        await Portal.GetProperty<bool>(nameof(Portal.CanProvisionDirectPurchase));
        await Portal.GetProperty<bool>(nameof(Portal.CanSearchPublic));
        await Portal.GetProperty<bool>(nameof(Portal.CanShareBingPublic));
        await Portal.GetProperty<bool>(nameof(Portal.CanSharePublic));
        await Portal.GetProperty<bool>(nameof(Portal.CanSignInArcGIS));
        await Portal.GetProperty<bool>(nameof(Portal.CanSignInIDP));
        await Portal.GetProperty<string>(nameof(Portal.ColorSetsGroupQuery));
        await Portal.GetProperty<bool>(nameof(Portal.CommentsEnabled));
        await Portal.GetProperty<DateTime>(nameof(Portal.Created));
        await Portal.GetProperty<string>(nameof(Portal.Culture));
        await Portal.GetProperty<string>(nameof(Portal.CustomBaseUrl));
        await Portal.GetProperty<Extent>(nameof(Portal.DefaultExtent));
        await Portal.GetProperty<string>(nameof(Portal.Description));
        await Portal.GetProperty<string>(nameof(Portal.DevBasemapGalleryGroupQuery));
        await Portal.GetProperty<bool>(nameof(Portal.EueiEnabled));
        await Portal.GetProperty<IReadOnlyList<PortalFeaturedGroups>>(nameof(Portal.FeaturedGroups));
        await Portal.GetProperty<string>(nameof(Portal.FeaturedItemsGroupQuery));
        await Portal.GetProperty<string>(nameof(Portal.GalleryTemplatesGroupQuery));
        await Portal.GetProperty<bool>(nameof(Portal.HasCategorySchema));
        await Portal.GetProperty<string>(nameof(Portal.HelperServices));
        await Portal.GetProperty<string>(nameof(Portal.HomePageFeaturedContent));
        await Portal.GetProperty<int>(nameof(Portal.HomePageFeaturedContentCount));
        await Portal.GetProperty<double>(nameof(Portal.HttpPort));
        await Portal.GetProperty<double>(nameof(Portal.HttpsPort));
        await Portal.GetProperty<string>(nameof(Portal.IpCntryCode));
        await Portal.GetProperty<bool>(nameof(Portal.IsOrganization));
        await Portal.GetProperty<bool>(nameof(Portal.IsPortal));
        await Portal.GetProperty<bool>(nameof(Portal.IsReadOnly));
        await Portal.GetProperty<string>(nameof(Portal.LayerTemplatesGroupQuery));
        await Portal.GetProperty<bool>(nameof(Portal.Loaded));
        await Portal.GetProperty<double>(nameof(Portal.MaxTokenExpirationMinutes));
        await Portal.GetProperty<DateTime>(nameof(Portal.Modified));
        await Portal.GetProperty<string>(nameof(Portal.Name));
        await Portal.GetProperty<string>(nameof(Portal.PortalHostname));
        await Portal.GetProperty<string>(nameof(Portal.PortalId));
        await Portal.GetProperty<PortalMode>(nameof(Portal.PortalMode));
        await Portal.GetProperty<string>(nameof(Portal.PortalProperties));
        await Portal.GetProperty<bool>(nameof(Portal.RecycleBinEnabled));
        await Portal.GetProperty<string>(nameof(Portal.Region));
        await Portal.GetProperty<string>(nameof(Portal.RestUrl));
        await Portal.GetProperty<IReadOnlyList<string>>(nameof(Portal.RotatorPanels));
        await Portal.GetProperty<bool>(nameof(Portal.ShowHomePageDescription));
        await Portal.GetProperty<string>(nameof(Portal.SourceJSON));
        await Portal.GetProperty<bool>(nameof(Portal.SupportsHostedServices));
        await Portal.GetProperty<string>(nameof(Portal.SymbolSetsGroupQuery));
        await Portal.GetProperty<string>(nameof(Portal.TemplatesGroupQuery));
        await Portal.GetProperty<string>(nameof(Portal.ThumbnailUrl));
        await Portal.GetProperty<PortalUnits>(nameof(Portal.Units));
        await Portal.GetProperty<string>(nameof(Portal.Url));
        await Portal.GetProperty<string>(nameof(Portal.UrlKey));
        await Portal.GetProperty<bool>(nameof(Portal.Use3dBasemaps));
        await Portal.GetProperty<bool>(nameof(Portal.UseStandardizedQuery));
        await Portal.GetProperty<bool>(nameof(Portal.UseVectorBasemaps));
        await Portal.GetProperty<string>(nameof(Portal.VectorBasemapGalleryGroupQuery));
        return Portal;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PortalGroupId property.
    /// </summary>
    public async Task<string?> GetPortalGroupId()
    {
        if (CoreJsModule is null)
        {
            return PortalGroupId;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return PortalGroupId;
        }

        // get the property value
#pragma warning disable BL0005
        PortalGroupId = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "portalGroupId");
#pragma warning restore BL0005
         ModifiedParameters[nameof(PortalGroupId)] = PortalGroupId;
        return PortalGroupId;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Snippet property.
    /// </summary>
    public async Task<string?> GetSnippet()
    {
        if (CoreJsModule is null)
        {
            return Snippet;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Snippet;
        }

        // get the property value
#pragma warning disable BL0005
        Snippet = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "snippet");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Snippet)] = Snippet;
        return Snippet;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SourceJSON property.
    /// </summary>
    public async Task<string?> GetSourceJSON()
    {
        if (CoreJsModule is null)
        {
            return SourceJSON;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return SourceJSON;
        }

        // get the property value
#pragma warning disable BL0005
        SourceJSON = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "sourceJSON");
#pragma warning restore BL0005
         ModifiedParameters[nameof(SourceJSON)] = SourceJSON;
        return SourceJSON;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Tags property.
    /// </summary>
    public async Task<IReadOnlyList<string>?> GetTags()
    {
        if (CoreJsModule is null)
        {
            return Tags;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Tags;
        }

        // get the property value
#pragma warning disable BL0005
        Tags = await CoreJsModule!.InvokeAsync<IReadOnlyList<string>?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "tags");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Tags)] = Tags;
        return Tags;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ThumbnailUrl property.
    /// </summary>
    public async Task<string?> GetThumbnailUrl()
    {
        if (CoreJsModule is null)
        {
            return ThumbnailUrl;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ThumbnailUrl;
        }

        // get the property value
#pragma warning disable BL0005
        ThumbnailUrl = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "thumbnailUrl");
#pragma warning restore BL0005
         ModifiedParameters[nameof(ThumbnailUrl)] = ThumbnailUrl;
        return ThumbnailUrl;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Title property.
    /// </summary>
    public async Task<string?> GetTitle()
    {
        if (CoreJsModule is null)
        {
            return Title;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Title;
        }

        // get the property value
#pragma warning disable BL0005
        Title = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "title");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Title)] = Title;
        return Title;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Url property.
    /// </summary>
    public async Task<string?> GetUrl()
    {
        if (CoreJsModule is null)
        {
            return Url;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Url;
        }

        // get the property value
#pragma warning disable BL0005
        Url = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "url");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Url)] = Url;
        return Url;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Access property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAccess(PortalGroupAccess value)
    {
#pragma warning disable BL0005
        Access = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Access)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "access", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Created property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCreated(DateTime value)
    {
#pragma warning disable BL0005
        Created = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Created)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "created", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Description property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDescription(string value)
    {
#pragma warning disable BL0005
        Description = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Description)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "description", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the IsInvitationOnly property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetIsInvitationOnly(bool value)
    {
#pragma warning disable BL0005
        IsInvitationOnly = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(IsInvitationOnly)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "isInvitationOnly", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Modified property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetModified(DateTime value)
    {
#pragma warning disable BL0005
        Modified = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Modified)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "modified", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Owner property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetOwner(string value)
    {
#pragma warning disable BL0005
        Owner = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Owner)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "owner", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Portal property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPortal(Portal value)
    {
#pragma warning disable BL0005
        Portal = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Portal)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        Portal.Parent = this;
        Portal.View = View;
        
        if (Portal.JsComponentReference is null)
        {
            // new MapComponent, needs to be built and registered in JS
            // this also calls back to OnJsComponentCreated
            IJSObjectReference jsObjectReference = await CoreJsModule.InvokeAsync<IJSObjectReference>(
                $"buildJsPortal", CancellationTokenSource.Token, 
                    Portal, View?.Id);
            // in case the fallback failed, set this here.
            Portal.JsComponentReference ??= jsObjectReference;
            
            await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
                JsComponentReference, "portal", jsObjectReference);
        }
        else
        {
            // this component has already been registered, but we'll call setProperty to make sure
            // it is attached to the parent
            await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
                JsComponentReference,
                "portal", Portal.JsComponentReference);
        }
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PortalGroupId property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPortalGroupId(string value)
    {
#pragma warning disable BL0005
        PortalGroupId = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PortalGroupId)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "portalGroupId", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Snippet property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSnippet(string value)
    {
#pragma warning disable BL0005
        Snippet = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Snippet)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "snippet", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Tags property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTags(IReadOnlyList<string> value)
    {
#pragma warning disable BL0005
        Tags = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Tags)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "tags", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Title property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTitle(string value)
    {
#pragma warning disable BL0005
        Title = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Title)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "title", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the Tags property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToTags(params string[] values)
    {
        string[] join = Tags is null
            ? values
            : [..Tags, ..values];
        await SetTags(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the Tags property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromTags(params string[] values)
    {
        if (Tags is null)
        {
            return;
        }
        await SetTags(Tags.Except(values).ToArray());
    }
    
#endregion


#region Public Methods

    /// <summary>
    ///     If present, fetches the group's category schema.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#fetchCategorySchema">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<string[]?> FetchCategorySchema(CancellationToken cancellationToken = default)
    {
        if (JsComponentReference is null) return null;
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        string[]? result = await JsComponentReference!.InvokeAsync<string[]?>(
            "fetchCategorySchema", 
            CancellationTokenSource.Token,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     Fetches the current members of the group.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#fetchMembers">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<string?> FetchMembers(CancellationToken cancellationToken = default)
    {
        if (JsComponentReference is null) return null;
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        string? result = await JsComponentReference!.InvokeAsync<string?>(
            "fetchMembers", 
            CancellationTokenSource.Token,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     Get the URL to the thumbnail image for the group.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#getThumbnailUrl">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="width">
    ///     The desired image width.
    /// </param>
    [ArcGISMethod]
    public async Task<string?> GetThumbnailUrl(int width)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<string?>(
            "getThumbnailUrl", 
            CancellationTokenSource.Token,
            width);
    }
    
    /// <summary>
    ///     Executes a query against the group to return an array of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalItem.html">PortalItem</a> objects that match the input query.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalGroup.html#queryItems">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="queryParams">
    ///     The input query parameters
    ///     defined in <a href="https://developers.arcgis.com/javascript/latest/api-reference/esri-portal-PortalQueryParams.html">PortalQueryParams</a>.
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<PortalQueryResult?> QueryItems(PortalQueryParams queryParams,
        CancellationToken cancellationToken = default)
    {
        if (JsComponentReference is null) return null;
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        PortalQueryResult? result = await JsComponentReference!.InvokeAsync<PortalQueryResult?>(
            "queryItems", 
            CancellationTokenSource.Token,
            queryParams,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
#endregion




    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Portal portal:
                if (portal != Portal)
                {
                    Portal = portal;
                    
                    ModifiedParameters[nameof(Portal)] = Portal;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case Portal _:
                Portal = null;
                
                ModifiedParameters[nameof(Portal)] = Portal;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    internal override void ValidateRequiredGeneratedChildren()
    {
    
        Portal?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
