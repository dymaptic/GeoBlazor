// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeatureEffect.html">GeoBlazor Docs</a>
///     FeatureEffect allows you to emphasize or deemphasize features that
///     satisfy a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html#filter">filter</a> in 2D <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html">MapView</a>.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class FeatureEffect
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public FeatureEffect()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="excludedEffect">
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html#Effect">effect</a> applied to features that do not meet
    ///     the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html#filter">filter</a> requirements.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html#excludedEffect">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="excludedLabelsVisible">
    ///     Indicates if labels are visible for features that are <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html#excludedEffect">excluded</a> from the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html#filter">filter</a>.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html#excludedLabelsVisible">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="filter">
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureFilter.html">filter</a> that drives the effect.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html#filter">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="includedEffect">
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html#Effect">effect</a> applied to features that meet the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html#filter">filter</a> requirements.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html#includedEffect">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public FeatureEffect(
        IReadOnlyList<Effect>? excludedEffect = null,
        bool? excludedLabelsVisible = null,
        FeatureFilter? filter = null,
        IReadOnlyList<Effect>? includedEffect = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        ExcludedEffect = excludedEffect;
        ExcludedLabelsVisible = excludedLabelsVisible;
        Filter = filter;
        IncludedEffect = includedEffect;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeatureEffect.html#featureeffectexcludedlabelsvisible-property">GeoBlazor Docs</a>
    ///     Indicates if labels are visible for features that are <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html#excludedEffect">excluded</a> from the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html#filter">filter</a>.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html#excludedLabelsVisible">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? ExcludedLabelsVisible { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.FeatureEffect.html#featureeffectfilter-property">GeoBlazor Docs</a>
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureFilter.html">filter</a> that drives the effect.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureEffect.html#filter">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public FeatureFilter? Filter { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the ExcludedEffect property.
    /// </summary>
    public async Task<IReadOnlyList<Effect>?> GetExcludedEffect()
    {
        if (CoreJsModule is null)
        {
            return ExcludedEffect;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ExcludedEffect;
        }

        IReadOnlyList<Effect>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<Effect>?>(
            "getExcludedEffect", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            ExcludedEffect = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(ExcludedEffect)] = ExcludedEffect;
        }
        
        return ExcludedEffect;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ExcludedLabelsVisible property.
    /// </summary>
    public async Task<bool?> GetExcludedLabelsVisible()
    {
        if (CoreJsModule is null)
        {
            return ExcludedLabelsVisible;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ExcludedLabelsVisible;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "excludedLabelsVisible");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ExcludedLabelsVisible = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ExcludedLabelsVisible)] = ExcludedLabelsVisible;
        }
         
        return ExcludedLabelsVisible;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Filter property.
    /// </summary>
    public async Task<FeatureFilter?> GetFilter()
    {
        if (CoreJsModule is null)
        {
            return Filter;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Filter;
        }

        FeatureFilter? result = await JsComponentReference.InvokeAsync<FeatureFilter?>(
            "getFilter", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (Filter is not null)
            {
                result.Id = Filter.Id;
            }
            
#pragma warning disable BL0005
            Filter = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Filter)] = Filter;
        }
        
        return Filter;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the IncludedEffect property.
    /// </summary>
    public async Task<IReadOnlyList<Effect>?> GetIncludedEffect()
    {
        if (CoreJsModule is null)
        {
            return IncludedEffect;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return IncludedEffect;
        }

        IReadOnlyList<Effect>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<Effect>?>(
            "getIncludedEffect", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            IncludedEffect = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(IncludedEffect)] = IncludedEffect;
        }
        
        return IncludedEffect;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the ExcludedEffect property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetExcludedEffect(IReadOnlyList<Effect>? value)
    {
#pragma warning disable BL0005
        ExcludedEffect = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ExcludedEffect)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "excludedEffect", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ExcludedLabelsVisible property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetExcludedLabelsVisible(bool? value)
    {
#pragma warning disable BL0005
        ExcludedLabelsVisible = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ExcludedLabelsVisible)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "excludedLabelsVisible", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Filter property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFilter(FeatureFilter? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        Filter = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Filter)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "filter", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the IncludedEffect property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetIncludedEffect(IReadOnlyList<Effect>? value)
    {
#pragma warning disable BL0005
        IncludedEffect = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(IncludedEffect)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "includedEffect", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the ExcludedEffect property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToExcludedEffect(params Effect[] values)
    {
        Effect[] join = ExcludedEffect is null
            ? values
            : [..ExcludedEffect, ..values];
        await SetExcludedEffect(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the IncludedEffect property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToIncludedEffect(params Effect[] values)
    {
        Effect[] join = IncludedEffect is null
            ? values
            : [..IncludedEffect, ..values];
        await SetIncludedEffect(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the ExcludedEffect property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromExcludedEffect(params Effect[] values)
    {
        if (ExcludedEffect is null)
        {
            return;
        }
        await SetExcludedEffect(ExcludedEffect.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the IncludedEffect property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromIncludedEffect(params Effect[] values)
    {
        if (IncludedEffect is null)
        {
            return;
        }
        await SetIncludedEffect(IncludedEffect.Except(values).ToArray());
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case FeatureFilter filter:
                if (filter != Filter)
                {
                    Filter = filter;
                    ModifiedParameters[nameof(Filter)] = Filter;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case FeatureFilter _:
                Filter = null;
                ModifiedParameters[nameof(Filter)] = Filter;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        Filter?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
