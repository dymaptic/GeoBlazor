// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Options for configuring the highlight on <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html#highlightOptions">MapView</a>, <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html#highlightOptions">SceneView</a> or on layer views.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html#HighlightOptions">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class HighlightOptions
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public HighlightOptions()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="color">
    ///     The color of the highlight fill.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html#HighlightOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="haloColor">
    ///     The color of the halo surrounding the highlight.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html#HighlightOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="haloOpacity">
    ///     The opacity of the highlight halo.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html#HighlightOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="fillOpacity">
    ///     The opacity of the fill (area within the halo).
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html#HighlightOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="shadowColor">
    ///     The color of the highlighted feature's shadow in <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html">3D SceneView</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html#HighlightOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="shadowOpacity">
    ///     The opacity of the highlighted feature's shadow.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html#HighlightOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="shadowDifference">
    ///     Defines the intensity of the shadow area obtained by overlapping the shadow of the highlighted feature and the shadow of other objects in <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html">3D SceneView</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html#HighlightOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public HighlightOptions(
        MapColor? color = null,
        MapColor? haloColor = null,
        double? haloOpacity = null,
        double? fillOpacity = null,
        MapColor? shadowColor = null,
        double? shadowOpacity = null,
        double? shadowDifference = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Color = color;
        HaloColor = haloColor;
        HaloOpacity = haloOpacity;
        FillOpacity = fillOpacity;
        ShadowColor = shadowColor;
        ShadowOpacity = shadowOpacity;
        ShadowDifference = shadowDifference;
#pragma warning restore BL0005    
    }
    
    
#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Color property.
    /// </summary>
    public async Task<MapColor?> GetColor()
    {
        if (CoreJsModule is null)
        {
            return Color;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Color;
        }

        // get the property value
#pragma warning disable BL0005
        Color = await CoreJsModule!.InvokeAsync<MapColor?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "color");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Color)] = Color;
        return Color;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FillOpacity property.
    /// </summary>
    public async Task<double?> GetFillOpacity()
    {
        if (CoreJsModule is null)
        {
            return FillOpacity;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return FillOpacity;
        }

        // get the property value
#pragma warning disable BL0005
        FillOpacity = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "fillOpacity");
#pragma warning restore BL0005
         ModifiedParameters[nameof(FillOpacity)] = FillOpacity;
        return FillOpacity;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HaloColor property.
    /// </summary>
    public async Task<MapColor?> GetHaloColor()
    {
        if (CoreJsModule is null)
        {
            return HaloColor;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return HaloColor;
        }

        // get the property value
#pragma warning disable BL0005
        HaloColor = await CoreJsModule!.InvokeAsync<MapColor?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "haloColor");
#pragma warning restore BL0005
         ModifiedParameters[nameof(HaloColor)] = HaloColor;
        return HaloColor;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HaloOpacity property.
    /// </summary>
    public async Task<double?> GetHaloOpacity()
    {
        if (CoreJsModule is null)
        {
            return HaloOpacity;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return HaloOpacity;
        }

        // get the property value
#pragma warning disable BL0005
        HaloOpacity = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "haloOpacity");
#pragma warning restore BL0005
         ModifiedParameters[nameof(HaloOpacity)] = HaloOpacity;
        return HaloOpacity;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ShadowColor property.
    /// </summary>
    public async Task<MapColor?> GetShadowColor()
    {
        if (CoreJsModule is null)
        {
            return ShadowColor;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ShadowColor;
        }

        // get the property value
#pragma warning disable BL0005
        ShadowColor = await CoreJsModule!.InvokeAsync<MapColor?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "shadowColor");
#pragma warning restore BL0005
         ModifiedParameters[nameof(ShadowColor)] = ShadowColor;
        return ShadowColor;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ShadowDifference property.
    /// </summary>
    public async Task<double?> GetShadowDifference()
    {
        if (CoreJsModule is null)
        {
            return ShadowDifference;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ShadowDifference;
        }

        // get the property value
#pragma warning disable BL0005
        ShadowDifference = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "shadowDifference");
#pragma warning restore BL0005
         ModifiedParameters[nameof(ShadowDifference)] = ShadowDifference;
        return ShadowDifference;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ShadowOpacity property.
    /// </summary>
    public async Task<double?> GetShadowOpacity()
    {
        if (CoreJsModule is null)
        {
            return ShadowOpacity;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ShadowOpacity;
        }

        // get the property value
#pragma warning disable BL0005
        ShadowOpacity = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "shadowOpacity");
#pragma warning restore BL0005
         ModifiedParameters[nameof(ShadowOpacity)] = ShadowOpacity;
        return ShadowOpacity;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Color property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetColor(MapColor value)
    {
#pragma warning disable BL0005
        Color = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Color)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "color", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FillOpacity property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFillOpacity(double value)
    {
#pragma warning disable BL0005
        FillOpacity = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FillOpacity)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "fillOpacity", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HaloColor property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHaloColor(MapColor value)
    {
#pragma warning disable BL0005
        HaloColor = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HaloColor)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "haloColor", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HaloOpacity property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHaloOpacity(double value)
    {
#pragma warning disable BL0005
        HaloOpacity = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HaloOpacity)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "haloOpacity", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ShadowColor property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetShadowColor(MapColor value)
    {
#pragma warning disable BL0005
        ShadowColor = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ShadowColor)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "shadowColor", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ShadowDifference property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetShadowDifference(double value)
    {
#pragma warning disable BL0005
        ShadowDifference = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ShadowDifference)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "shadowDifference", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ShadowOpacity property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetShadowOpacity(double value)
    {
#pragma warning disable BL0005
        ShadowOpacity = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ShadowOpacity)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "shadowOpacity", value);
    }
    
#endregion




}
