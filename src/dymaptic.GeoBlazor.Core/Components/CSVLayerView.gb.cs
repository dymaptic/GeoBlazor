// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CSVLayerView.html">GeoBlazor Docs</a>
///     Represents the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-LayerView.html">LayerView</a> of a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CSVLayer.html">CSVLayer</a>
///     after it has been added to a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Map.html">Map</a> in either a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html">MapView</a> or
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-SceneView.html">SceneView</a>.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-CSVLayerView.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class CSVLayerView : LayerView,
    IHighlightLayerViewMixin, IMapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public CSVLayerView()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="featureEffect">
    ///     The featureEffect can be used to draw attention features of interest.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-CSVLayerView.html#featureEffect">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="filter">
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureFilter.html#where">attribute</a>,
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureFilter.html#geometry">geometry</a>,
    ///     and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureFilter.html#timeExtent">time extent</a>
    ///     filter.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-CSVLayerView.html#filter">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="highlightOptions">
    ///     Options for configuring the highlight.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-CSVLayerView.html#highlightOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="maximumNumberOfFeatures">
    ///     The maximum number of features that can be displayed at a time.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerViewMixin.html#maximumNumberOfFeatures">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="maximumNumberOfFeaturesExceeded">
    ///     Signifies whether the maximum number of features has been exceeded.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerViewMixin.html#maximumNumberOfFeaturesExceeded">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="visible">
    ///     When `true`, the layer is visible in the view.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-LayerView.html#visible">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public CSVLayerView(
        FeatureEffect? featureEffect = null,
        FeatureFilter? filter = null,
        HighlightOptions? highlightOptions = null,
        double? maximumNumberOfFeatures = null,
        bool? maximumNumberOfFeaturesExceeded = null,
        bool? visible = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        FeatureEffect = featureEffect;
        Filter = filter;
        HighlightOptions = highlightOptions;
        MaximumNumberOfFeatures = maximumNumberOfFeatures;
        MaximumNumberOfFeaturesExceeded = maximumNumberOfFeaturesExceeded;
        Visible = visible;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CSVLayerView.html#csvlayerviewavailablefields-property">GeoBlazor Docs</a>
    ///     A list of attribute fields fetched for each feature including fields required for layer's `renderer` `labelingInfo`, `elevationInfo`, and additional fields defined on the `outFields` properties.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerViewMixin.html#availableFields">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public IReadOnlyList<string>? AvailableFields { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CSVLayerView.html#csvlayerviewdataupdating-property">GeoBlazor Docs</a>
    ///     Indicates if the layer view is updating its data and new features are being fetched.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerViewMixin.html#dataUpdating">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public bool? DataUpdating { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CSVLayerView.html#csvlayerviewfeatureeffect-property">GeoBlazor Docs</a>
    ///     The featureEffect can be used to draw attention features of interest.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-CSVLayerView.html#featureEffect">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public FeatureEffect? FeatureEffect { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CSVLayerView.html#csvlayerviewfilter-property">GeoBlazor Docs</a>
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureFilter.html#where">attribute</a>,
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureFilter.html#geometry">geometry</a>,
    ///     and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-FeatureFilter.html#timeExtent">time extent</a>
    ///     filter.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-CSVLayerView.html#filter">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public FeatureFilter? Filter { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CSVLayerView.html#csvlayerviewhasallfeatures-property">GeoBlazor Docs</a>
    ///     Indicates whether the layer view contains all available features from the service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerViewMixin.html#hasAllFeatures">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public bool? HasAllFeatures { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CSVLayerView.html#csvlayerviewhasallfeaturesinview-property">GeoBlazor Docs</a>
    ///     Indicates whether the layer view has all the features available in the current view.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerViewMixin.html#hasAllFeaturesInView">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public bool? HasAllFeaturesInView { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CSVLayerView.html#csvlayerviewhasfullgeometries-property">GeoBlazor Docs</a>
    ///     Indicates whether the layer view has geometries at full resolution.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerViewMixin.html#hasFullGeometries">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public bool? HasFullGeometries { get; protected set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CSVLayerView.html#csvlayerviewhighlightoptions-property">GeoBlazor Docs</a>
    ///     Options for configuring the highlight.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-CSVLayerView.html#highlightOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public HighlightOptions? HighlightOptions { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CSVLayerView.html#csvlayerviewmaximumnumberoffeatures-property">GeoBlazor Docs</a>
    ///     The maximum number of features that can be displayed at a time.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerViewMixin.html#maximumNumberOfFeatures">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? MaximumNumberOfFeatures { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CSVLayerView.html#csvlayerviewmaximumnumberoffeaturesexceeded-property">GeoBlazor Docs</a>
    ///     Signifies whether the maximum number of features has been exceeded.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-FeatureLayerViewMixin.html#maximumNumberOfFeaturesExceeded">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? MaximumNumberOfFeaturesExceeded { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the AvailableFields property.
    /// </summary>
    public async Task<IReadOnlyList<string>?> GetAvailableFields()
    {
        if (CoreJsModule is null)
        {
            return AvailableFields;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return AvailableFields;
        }

        // get the property value
        IReadOnlyList<string>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<string>?>("getProperty",
            CancellationTokenSource.Token, "availableFields");
        if (result is not null)
        {
#pragma warning disable BL0005
             AvailableFields = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(AvailableFields)] = AvailableFields;
        }
         
        return AvailableFields;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DataUpdating property.
    /// </summary>
    public async Task<bool?> GetDataUpdating()
    {
        if (CoreJsModule is null)
        {
            return DataUpdating;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return DataUpdating;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "dataUpdating");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             DataUpdating = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DataUpdating)] = DataUpdating;
        }
         
        return DataUpdating;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FeatureEffect property.
    /// </summary>
    public async Task<FeatureEffect?> GetFeatureEffect()
    {
        if (CoreJsModule is null)
        {
            return FeatureEffect;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return FeatureEffect;
        }

        FeatureEffect? result = await JsComponentReference.InvokeAsync<FeatureEffect?>(
            "getFeatureEffect", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            FeatureEffect = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(FeatureEffect)] = FeatureEffect;
        }
        
        return FeatureEffect;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Filter property.
    /// </summary>
    public async Task<FeatureFilter?> GetFilter()
    {
        if (CoreJsModule is null)
        {
            return Filter;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Filter;
        }

        FeatureFilter? result = await JsComponentReference.InvokeAsync<FeatureFilter?>(
            "getFilter", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (Filter is not null)
            {
                result.Id = Filter.Id;
            }
            
#pragma warning disable BL0005
            Filter = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Filter)] = Filter;
        }
        
        return Filter;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HasAllFeatures property.
    /// </summary>
    public async Task<bool?> GetHasAllFeatures()
    {
        if (CoreJsModule is null)
        {
            return HasAllFeatures;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return HasAllFeatures;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "hasAllFeatures");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             HasAllFeatures = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HasAllFeatures)] = HasAllFeatures;
        }
         
        return HasAllFeatures;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HasAllFeaturesInView property.
    /// </summary>
    public async Task<bool?> GetHasAllFeaturesInView()
    {
        if (CoreJsModule is null)
        {
            return HasAllFeaturesInView;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return HasAllFeaturesInView;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "hasAllFeaturesInView");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             HasAllFeaturesInView = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HasAllFeaturesInView)] = HasAllFeaturesInView;
        }
         
        return HasAllFeaturesInView;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HasFullGeometries property.
    /// </summary>
    public async Task<bool?> GetHasFullGeometries()
    {
        if (CoreJsModule is null)
        {
            return HasFullGeometries;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return HasFullGeometries;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "hasFullGeometries");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             HasFullGeometries = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HasFullGeometries)] = HasFullGeometries;
        }
         
        return HasFullGeometries;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HighlightOptions property.
    /// </summary>
    public async Task<HighlightOptions?> GetHighlightOptions()
    {
        if (CoreJsModule is null)
        {
            return HighlightOptions;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return HighlightOptions;
        }

        HighlightOptions? result = await JsComponentReference.InvokeAsync<HighlightOptions?>(
            "getHighlightOptions", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            HighlightOptions = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(HighlightOptions)] = HighlightOptions;
        }
        
        return HighlightOptions;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MaximumNumberOfFeatures property.
    /// </summary>
    public async Task<double?> GetMaximumNumberOfFeatures()
    {
        if (CoreJsModule is null)
        {
            return MaximumNumberOfFeatures;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return MaximumNumberOfFeatures;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "maximumNumberOfFeatures");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             MaximumNumberOfFeatures = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MaximumNumberOfFeatures)] = MaximumNumberOfFeatures;
        }
         
        return MaximumNumberOfFeatures;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MaximumNumberOfFeaturesExceeded property.
    /// </summary>
    public async Task<bool?> GetMaximumNumberOfFeaturesExceeded()
    {
        if (CoreJsModule is null)
        {
            return MaximumNumberOfFeaturesExceeded;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return MaximumNumberOfFeaturesExceeded;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "maximumNumberOfFeaturesExceeded");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             MaximumNumberOfFeaturesExceeded = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MaximumNumberOfFeaturesExceeded)] = MaximumNumberOfFeaturesExceeded;
        }
         
        return MaximumNumberOfFeaturesExceeded;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the FeatureEffect property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFeatureEffect(FeatureEffect? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        FeatureEffect = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FeatureEffect)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setFeatureEffect", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Filter property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFilter(FeatureFilter? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        Filter = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Filter)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setFilter", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HighlightOptions property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHighlightOptions(HighlightOptions? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        HighlightOptions = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HighlightOptions)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setHighlightOptions", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MaximumNumberOfFeatures property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMaximumNumberOfFeatures(double? value)
    {
#pragma warning disable BL0005
        MaximumNumberOfFeatures = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MaximumNumberOfFeatures)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "maximumNumberOfFeatures", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MaximumNumberOfFeaturesExceeded property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMaximumNumberOfFeaturesExceeded(bool? value)
    {
#pragma warning disable BL0005
        MaximumNumberOfFeaturesExceeded = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MaximumNumberOfFeaturesExceeded)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "maximumNumberOfFeaturesExceeded", value);
    }
    
#endregion

#region Public Methods

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CSVLayerView.html#csvlayerviewcreateaggregatequery-method">GeoBlazor Docs</a>
    ///     Creates query parameter object that can be used to <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-CSVLayerView.html#queryAggregates">fetch aggregate features</a> as they are being
    ///     displayed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-CSVLayerView.html#createAggregateQuery">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task<Query?> CreateAggregateQuery()
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<Query?>(
            "createAggregateQuery", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CSVLayerView.html#csvlayerviewcreatequery-method">GeoBlazor Docs</a>
    ///     Creates a query parameter object that can be used to fetch features as they are being
    ///     displayed.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-CSVLayerView.html#createQuery">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISMethod]
    public async Task<Query?> CreateQuery()
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        return await JsComponentReference!.InvokeAsync<Query?>(
            "createQuery", 
            CancellationTokenSource.Token);
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CSVLayerView.html#csvlayerviewqueryaggregates-method">GeoBlazor Docs</a>
    ///     Executes a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-Query.html">Query</a> against aggregate features (i.e.
    ///     param query Specifies the parameters of the query. Leave this parameter empty to query all aggregates in the view.
    ///     param options An object with the following properties.
    ///     param options.signal Signal object that can be used to abort the asynchronous task. The returned promise will be rejected with an <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Error.html">Error</a> named `AbortError` when an abort is signaled. See also <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/AbortController">AbortController</a> for more information on how to construct a controller that can be used to deliver abort signals.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-CSVLayerView.html#queryAggregates">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="query">
    ///     Specifies the parameters of the query. Leave this parameter empty
    ///     to query all aggregates in the view.
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<FeatureSet?> QueryAggregates(Query query,
        CancellationToken cancellationToken = default)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        FeatureSet? result = await JsComponentReference!.InvokeAsync<FeatureSet?>(
            "queryAggregates", 
            CancellationTokenSource.Token,
            query,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CSVLayerView.html#csvlayerviewqueryextent-method">GeoBlazor Docs</a>
    ///     Executes a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-Query.html">Query</a> against features available for drawing in the layerView and
    ///     returns the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-geometry-Extent.html">Extent</a> of features that satisfy the query.
    ///     param query Specifies the attributes and spatial filter of the query. When no parameters are passed to this method, all features in the client are returned. To only return features visible in the view, set the `geometry` parameter in the query object to the view's extent.
    ///     param options An object with the following properties.
    ///     param options.signal Signal object that can be used to abort the asynchronous task. The returned promise will be rejected with an <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Error.html">Error</a> named `AbortError` when an abort is signaled. See also <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/AbortController">AbortController</a> for more information on how to construct a controller that can be used to deliver abort signals.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-CSVLayerView.html#queryExtent">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="query">
    ///     Specifies the attributes and spatial filter of the query.
    ///     When no parameters are passed to this method, all features in the client are returned. To only return features
    ///     visible in the view, set the <code>geometry</code> parameter in the query object to the view's extent.
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<ExtentQueryResult?> QueryExtent(Query query,
        CancellationToken cancellationToken = default)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        ExtentQueryResult? result = await JsComponentReference!.InvokeAsync<ExtentQueryResult?>(
            "queryExtent", 
            CancellationTokenSource.Token,
            query,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CSVLayerView.html#csvlayerviewqueryfeaturecount-method">GeoBlazor Docs</a>
    ///     Executes a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-Query.html">Query</a> against features available for drawing in the layerView
    ///     and returns the number of features that satisfy the query.
    ///     param query Specifies the attributes and spatial filter of the query. When no parameters are passed to this method, all features in the client are returned. To only return features visible in the view, set the `geometry` parameter in the query object to the view's extent.
    ///     param options An object with the following properties.
    ///     param options.signal Signal object that can be used to abort the asynchronous task. The returned promise will be rejected with an <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Error.html">Error</a> named `AbortError` when an abort is signaled. See also <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/AbortController">AbortController</a> for more information on how to construct a controller that can be used to deliver abort signals.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-CSVLayerView.html#queryFeatureCount">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="query">
    ///     Specifies the attributes and spatial filter of the query.
    ///     When no parameters are passed to this method, all features in the client are returned. To only return features
    ///     visible in the view, set the <code>geometry</code> parameter in the query object to the view's extent.
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<int?> QueryFeatureCount(Query query,
        CancellationToken cancellationToken = default)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        int? result = await JsComponentReference!.InvokeAsync<int?>(
            "queryFeatureCount", 
            CancellationTokenSource.Token,
            query,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CSVLayerView.html#csvlayerviewqueryfeatures-method">GeoBlazor Docs</a>
    ///     Executes a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-Query.html">Query</a> against features available for drawing in the layerView
    ///     and returns a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-FeatureSet.html">FeatureSet</a>.
    ///     param query Specifies the attributes and spatial filter of the query. When this parameter is not passed to `queryFeatures()` method, then a default query is created using <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-CSVLayerView.html#createQuery">createQuery()</a> method and all features that pass the layer view <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-CSVLayerView.html#filter">filter</a> are returned along with their attributes that are <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-CSVLayerView.html#availableFields">available on the client</a>. To only return features visible in the view, set the `geometry` parameter in the query object to the view's extent.
    ///     param options An object with the following properties.
    ///     param options.signal Signal object that can be used to abort the asynchronous task. The returned promise will be rejected with an <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Error.html">Error</a> named `AbortError` when an abort is signaled. See also <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/AbortController">AbortController</a> for more information on how to construct a controller that can be used to deliver abort signals.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-CSVLayerView.html#queryFeatures">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="query">
    ///     Specifies the attributes and spatial filter of the query.
    ///     When this parameter is not passed to <code>queryFeatures()</code> method, then a default query is created using <a href="#createQuery">createQuery()</a>
    ///     method and all features that pass the layer view <a href="#filter">filter</a> are returned along with their attributes
    ///     that are <a href="#availableFields">available on the client</a>. To only return features
    ///     visible in the view, set the <code>geometry</code> parameter in the query object to the view's extent.
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<FeatureSet?> QueryFeatures(Query query,
        CancellationToken cancellationToken = default)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        FeatureSet? result = await JsComponentReference!.InvokeAsync<FeatureSet?>(
            "queryFeatures", 
            CancellationTokenSource.Token,
            query,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CSVLayerView.html#csvlayerviewqueryobjectids-method">GeoBlazor Docs</a>
    ///     Executes a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-rest-support-Query.html">Query</a> against features available for drawing in
    ///     the layerView and returns array of the ObjectIDs of features that satisfy the input query.
    ///     param query Specifies the attributes and spatial filter of the query. When no parameters are passed to this method, all features in the client are returned. To only return features visible in the view, set the `geometry` parameter in the query object to the view's extent.
    ///     param options An object with the following properties.
    ///     param options.signal Signal object that can be used to abort the asynchronous task. The returned promise will be rejected with an <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-core-Error.html">Error</a> named `AbortError` when an abort is signaled. See also <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/AbortController">AbortController</a> for more information on how to construct a controller that can be used to deliver abort signals.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-layers-CSVLayerView.html#queryObjectIds">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="query">
    ///     Specifies the attributes and spatial filter of the query.
    ///     When no parameters are passed to this method, all features in the client are returned. To only return features
    ///     visible in the view, set the <code>geometry</code> parameter in the query object to the view's extent.
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    public async Task<long[]?> QueryObjectIds(Query query,
        CancellationToken cancellationToken = default)
    {
        if (CoreJsModule is null)
        {
            return null;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return null;
        }
        
        IJSObjectReference abortSignal = await AbortManager!.CreateAbortSignal(cancellationToken);
        long[]? result = await JsComponentReference!.InvokeAsync<long[]?>(
            "queryObjectIds", 
            CancellationTokenSource.Token,
            query,
            new { signal = abortSignal });
                
        await AbortManager.DisposeAbortController(cancellationToken);
        
        return result;
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case FeatureEffect featureEffect:
                if (featureEffect != FeatureEffect)
                {
                    FeatureEffect = featureEffect;
                    ModifiedParameters[nameof(FeatureEffect)] = FeatureEffect;
                }
                
                return true;
            case FeatureFilter filter:
                if (filter != Filter)
                {
                    Filter = filter;
                    ModifiedParameters[nameof(Filter)] = Filter;
                }
                
                return true;
            case HighlightOptions highlightOptions:
                if (highlightOptions != HighlightOptions)
                {
                    HighlightOptions = highlightOptions;
                    ModifiedParameters[nameof(HighlightOptions)] = HighlightOptions;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case FeatureEffect _:
                FeatureEffect = null;
                ModifiedParameters[nameof(FeatureEffect)] = FeatureEffect;
                return true;
            case FeatureFilter _:
                Filter = null;
                ModifiedParameters[nameof(Filter)] = Filter;
                return true;
            case HighlightOptions _:
                HighlightOptions = null;
                ModifiedParameters[nameof(HighlightOptions)] = HighlightOptions;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        FeatureEffect?.ValidateRequiredGeneratedChildren();
        Filter?.ValidateRequiredGeneratedChildren();
        HighlightOptions?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
