// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    This stops when the status has been determined or when the layer is destroyed.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-PublishingInfo.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class PublishingInfo : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public PublishingInfo()
    {
    }

#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Layer's publishing status while the layer is being published to the portal.
    ///     default "unknown"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-PublishingInfo.html#status">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Status? Status { get; protected set; }
    
    /// <summary>
    ///     Indicates if the layer's status is still being updated.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-PublishingInfo.html#updating">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Updating { get; protected set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Status property.
    /// </summary>
    public async Task<Status?> GetStatus()
    {
        if (CoreJsModule is null)
        {
            return Status;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Status;
        }

        // get the property value
#pragma warning disable BL0005
        Status = await CoreJsModule!.InvokeAsync<Status>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "status");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Status)] = Status;
        return Status;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Updating property.
    /// </summary>
    public async Task<bool?> GetUpdating()
    {
        if (CoreJsModule is null)
        {
            return Updating;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Updating;
        }

        // get the property value
#pragma warning disable BL0005
        Updating = await CoreJsModule!.InvokeAsync<bool>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "updating");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Updating)] = Updating;
        return Updating;
    }
    
#endregion




}
