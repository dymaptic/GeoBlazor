// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.TrackInfo.html">GeoBlazor Docs</a>
///     TrackInfo provides information about how to display and analyze temporal data in a layer.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class TrackInfo : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public TrackInfo()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="enabled">
    ///     Indicates whether the track info is enabled.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#enabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="fields">
    ///     An array of aggregate fields that summarize <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#fields">layer.fields</a>
    ///     in all observations of the track.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#fields">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="latestObservations">
    ///     Configuration properties for displaying the latest observations.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#latestObservations">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="maxDisplayDuration">
    ///     The maximum age of displayed observations.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#maxDisplayDuration">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="maxDisplayObservationsPerTrack">
    ///     The maximum number of observations to display per track.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#maxDisplayObservationsPerTrack">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="popupEnabled">
    ///     Indicates whether to display the popup for the track as defined in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#popupTemplate">popupTemplate</a>.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#popupEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="popupTemplate">
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html">PopupTemplate</a> to apply to the track.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#popupTemplate">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="previousObservations">
    ///     Configuration properties for displaying previous observations.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#previousObservations">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="timeField">
    ///     Indicates which field from the layer's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html">timeInfo</a> will be used to
    ///     calculate observation ages for <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#maxDisplayDuration">trackInfo.maxDisplayDuration</a>.
    ///     default "startTimeField"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#timeField">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="trackLines">
    ///     Configuration properties for displaying track lines.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#trackLines">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public TrackInfo(
        bool? enabled = null,
        IReadOnlyList<AggregateField>? fields = null,
        TrackPartInfo? latestObservations = null,
        TimeInterval? maxDisplayDuration = null,
        double? maxDisplayObservationsPerTrack = null,
        bool? popupEnabled = null,
        PopupTemplate? popupTemplate = null,
        TrackPartInfo? previousObservations = null,
        TimeField? timeField = null,
        TrackPartInfo? trackLines = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Enabled = enabled;
        Fields = fields;
        LatestObservations = latestObservations;
        MaxDisplayDuration = maxDisplayDuration;
        MaxDisplayObservationsPerTrack = maxDisplayObservationsPerTrack;
        PopupEnabled = popupEnabled;
        PopupTemplate = popupTemplate;
        PreviousObservations = previousObservations;
        TimeField = timeField;
        TrackLines = trackLines;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.TrackInfo.html#trackinfoenabled-property">GeoBlazor Docs</a>
    ///     Indicates whether the track info is enabled.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#enabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Enabled { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.TrackInfo.html#trackinfofields-property">GeoBlazor Docs</a>
    ///     An array of aggregate fields that summarize <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html#fields">layer.fields</a>
    ///     in all observations of the track.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#fields">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<AggregateField>? Fields { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.TrackInfo.html#trackinfolatestobservations-property">GeoBlazor Docs</a>
    ///     Configuration properties for displaying the latest observations.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#latestObservations">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public TrackPartInfo? LatestObservations { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.TrackInfo.html#trackinfomaxdisplayduration-property">GeoBlazor Docs</a>
    ///     The maximum age of displayed observations.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#maxDisplayDuration">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public TimeInterval? MaxDisplayDuration { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.TrackInfo.html#trackinfomaxdisplayobservationspertrack-property">GeoBlazor Docs</a>
    ///     The maximum number of observations to display per track.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#maxDisplayObservationsPerTrack">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? MaxDisplayObservationsPerTrack { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.TrackInfo.html#trackinfopopupenabled-property">GeoBlazor Docs</a>
    ///     Indicates whether to display the popup for the track as defined in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#popupTemplate">popupTemplate</a>.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#popupEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? PopupEnabled { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.TrackInfo.html#trackinfopopuptemplate-property">GeoBlazor Docs</a>
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-PopupTemplate.html">PopupTemplate</a> to apply to the track.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#popupTemplate">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public PopupTemplate? PopupTemplate { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.TrackInfo.html#trackinfopreviousobservations-property">GeoBlazor Docs</a>
    ///     Configuration properties for displaying previous observations.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#previousObservations">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public TrackPartInfo? PreviousObservations { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.TrackInfo.html#trackinfotimefield-property">GeoBlazor Docs</a>
    ///     Indicates which field from the layer's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html">timeInfo</a> will be used to
    ///     calculate observation ages for <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#maxDisplayDuration">trackInfo.maxDisplayDuration</a>.
    ///     default "startTimeField"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#timeField">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public TimeField? TimeField { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.TrackInfo.html#trackinfotracklines-property">GeoBlazor Docs</a>
    ///     Configuration properties for displaying track lines.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TrackInfo.html#trackLines">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public TrackPartInfo? TrackLines { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Enabled property.
    /// </summary>
    public async Task<bool?> GetEnabled()
    {
        if (CoreJsModule is null)
        {
            return Enabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Enabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "enabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Enabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Enabled)] = Enabled;
        }
         
        return Enabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Fields property.
    /// </summary>
    public async Task<IReadOnlyList<AggregateField>?> GetFields()
    {
        if (CoreJsModule is null)
        {
            return Fields;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Fields;
        }

        IReadOnlyList<AggregateField>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<AggregateField>?>(
            "getFields", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Fields = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Fields)] = Fields;
        }
        
        return Fields;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LatestObservations property.
    /// </summary>
    public async Task<TrackPartInfo?> GetLatestObservations()
    {
        if (CoreJsModule is null)
        {
            return LatestObservations;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return LatestObservations;
        }

        TrackPartInfo? result = await JsComponentReference.InvokeAsync<TrackPartInfo?>(
            "getLatestObservations", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            LatestObservations = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(LatestObservations)] = LatestObservations;
        }
        
        return LatestObservations;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MaxDisplayDuration property.
    /// </summary>
    public async Task<TimeInterval?> GetMaxDisplayDuration()
    {
        if (CoreJsModule is null)
        {
            return MaxDisplayDuration;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return MaxDisplayDuration;
        }

        TimeInterval? result = await JsComponentReference.InvokeAsync<TimeInterval?>(
            "getMaxDisplayDuration", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            MaxDisplayDuration = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(MaxDisplayDuration)] = MaxDisplayDuration;
        }
        
        return MaxDisplayDuration;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the MaxDisplayObservationsPerTrack property.
    /// </summary>
    public async Task<double?> GetMaxDisplayObservationsPerTrack()
    {
        if (CoreJsModule is null)
        {
            return MaxDisplayObservationsPerTrack;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return MaxDisplayObservationsPerTrack;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "maxDisplayObservationsPerTrack");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             MaxDisplayObservationsPerTrack = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(MaxDisplayObservationsPerTrack)] = MaxDisplayObservationsPerTrack;
        }
         
        return MaxDisplayObservationsPerTrack;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PopupEnabled property.
    /// </summary>
    public async Task<bool?> GetPopupEnabled()
    {
        if (CoreJsModule is null)
        {
            return PopupEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return PopupEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "popupEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             PopupEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(PopupEnabled)] = PopupEnabled;
        }
         
        return PopupEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PopupTemplate property.
    /// </summary>
    public async Task<PopupTemplate?> GetPopupTemplate()
    {
        if (CoreJsModule is null)
        {
            return PopupTemplate;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return PopupTemplate;
        }

        PopupTemplate? result = await JsComponentReference.InvokeAsync<PopupTemplate?>(
            "getPopupTemplate", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            PopupTemplate = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(PopupTemplate)] = PopupTemplate;
        }
        
        return PopupTemplate;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PreviousObservations property.
    /// </summary>
    public async Task<TrackPartInfo?> GetPreviousObservations()
    {
        if (CoreJsModule is null)
        {
            return PreviousObservations;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return PreviousObservations;
        }

        TrackPartInfo? result = await JsComponentReference.InvokeAsync<TrackPartInfo?>(
            "getPreviousObservations", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            PreviousObservations = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(PreviousObservations)] = PreviousObservations;
        }
        
        return PreviousObservations;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the TimeField property.
    /// </summary>
    public async Task<TimeField?> GetTimeField()
    {
        if (CoreJsModule is null)
        {
            return TimeField;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return TimeField;
        }

        // get the property value
        JsNullableEnumWrapper<TimeField>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<TimeField>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "timeField");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             TimeField = (TimeField)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(TimeField)] = TimeField;
        }
         
        return TimeField;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the TrackLines property.
    /// </summary>
    public async Task<TrackPartInfo?> GetTrackLines()
    {
        if (CoreJsModule is null)
        {
            return TrackLines;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return TrackLines;
        }

        TrackPartInfo? result = await JsComponentReference.InvokeAsync<TrackPartInfo?>(
            "getTrackLines", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            TrackLines = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(TrackLines)] = TrackLines;
        }
        
        return TrackLines;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Enabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetEnabled(bool? value)
    {
#pragma warning disable BL0005
        Enabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Enabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "enabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Fields property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFields(IReadOnlyList<AggregateField>? value)
    {
        if (value is not null)
        {
            foreach (AggregateField item in value)
            {
                item.CoreJsModule = CoreJsModule;
                item.Parent = this;
                item.Layer = Layer;
                item.View = View;
            }
        }
        
#pragma warning disable BL0005
        Fields = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Fields)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "fields", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LatestObservations property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLatestObservations(TrackPartInfo? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        LatestObservations = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LatestObservations)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "latestObservations", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MaxDisplayDuration property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMaxDisplayDuration(TimeInterval? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        MaxDisplayDuration = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MaxDisplayDuration)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "maxDisplayDuration", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the MaxDisplayObservationsPerTrack property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetMaxDisplayObservationsPerTrack(double? value)
    {
#pragma warning disable BL0005
        MaxDisplayObservationsPerTrack = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(MaxDisplayObservationsPerTrack)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "maxDisplayObservationsPerTrack", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PopupEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPopupEnabled(bool? value)
    {
#pragma warning disable BL0005
        PopupEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PopupEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "popupEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PopupTemplate property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPopupTemplate(PopupTemplate? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        PopupTemplate = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PopupTemplate)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "popupTemplate", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PreviousObservations property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPreviousObservations(TrackPartInfo? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        PreviousObservations = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PreviousObservations)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "previousObservations", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the TimeField property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTimeField(TimeField? value)
    {
#pragma warning disable BL0005
        TimeField = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(TimeField)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "timeField", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the TrackLines property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTrackLines(TrackPartInfo? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        TrackLines = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(TrackLines)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "trackLines", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the Fields property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToFields(params AggregateField[] values)
    {
        AggregateField[] join = Fields is null
            ? values
            : [..Fields, ..values];
        await SetFields(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the Fields property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromFields(params AggregateField[] values)
    {
        if (Fields is null)
        {
            return;
        }
        await SetFields(Fields.Except(values).ToArray());
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case AggregateField fields:
                Fields ??= [];
                if (!Fields.Contains(fields))
                {
                    Fields = [..Fields, fields];
                    
                    ModifiedParameters[nameof(Fields)] = Fields;
                }
                
                return true;
            case TimeInterval maxDisplayDuration:
                if (maxDisplayDuration != MaxDisplayDuration)
                {
                    MaxDisplayDuration = maxDisplayDuration;
                    
                    ModifiedParameters[nameof(MaxDisplayDuration)] = MaxDisplayDuration;
                }
                
                return true;
            case PopupTemplate popupTemplate:
                if (popupTemplate != PopupTemplate)
                {
                    PopupTemplate = popupTemplate;
                    
                    ModifiedParameters[nameof(PopupTemplate)] = PopupTemplate;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case AggregateField fields:
                Fields = Fields?.Where(f => f != fields).ToList();
                
                ModifiedParameters[nameof(Fields)] = Fields;
                return true;
            case TimeInterval _:
                MaxDisplayDuration = null;
                
                ModifiedParameters[nameof(MaxDisplayDuration)] = MaxDisplayDuration;
                return true;
            case PopupTemplate _:
                PopupTemplate = null;
                
                ModifiedParameters[nameof(PopupTemplate)] = PopupTemplate;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        if (Fields is not null)
        {
            foreach (AggregateField child in Fields)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        MaxDisplayDuration?.ValidateRequiredGeneratedChildren();
        PopupTemplate?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
