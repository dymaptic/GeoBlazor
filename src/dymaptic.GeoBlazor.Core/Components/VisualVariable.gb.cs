// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    The visual variable base class.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public abstract partial class VisualVariable
{

#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The name of the numeric attribute field that contains the data values used to determine the color/opacity/size/rotation of each feature.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html#field">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [RequiredProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string Field { get; set; } = null!;
    
    /// <summary>
    ///     An object providing options for displaying the visual variable in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Legend.html">Legend</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-renderers-visualVariables-VisualVariable.html#legendOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public VisualVariableLegendOptions? LegendOptions { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Field property.
    /// </summary>
    public async Task<string?> GetField()
    {
        if (CoreJsModule is null)
        {
            return Field;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Field;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "field");
        if (result is not null)
        {
#pragma warning disable BL0005
             Field = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Field)] = Field;
        }
         
        return Field;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LegendOptions property.
    /// </summary>
    public async Task<VisualVariableLegendOptions?> GetLegendOptions()
    {
        if (CoreJsModule is null)
        {
            return LegendOptions;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return LegendOptions;
        }

        // get the property value
        VisualVariableLegendOptions? result = await JsComponentReference!.InvokeAsync<VisualVariableLegendOptions?>("getProperty",
            CancellationTokenSource.Token, "legendOptions");
        if (result is not null)
        {
#pragma warning disable BL0005
             LegendOptions = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(LegendOptions)] = LegendOptions;
        }
         
        return LegendOptions;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ValueExpression property.
    /// </summary>
    public async Task<string?> GetValueExpression()
    {
        if (CoreJsModule is null)
        {
            return ValueExpression;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ValueExpression;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "valueExpression");
        if (result is not null)
        {
#pragma warning disable BL0005
             ValueExpression = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ValueExpression)] = ValueExpression;
        }
         
        return ValueExpression;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ValueExpressionTitle property.
    /// </summary>
    public async Task<string?> GetValueExpressionTitle()
    {
        if (CoreJsModule is null)
        {
            return ValueExpressionTitle;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ValueExpressionTitle;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "valueExpressionTitle");
        if (result is not null)
        {
#pragma warning disable BL0005
             ValueExpressionTitle = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ValueExpressionTitle)] = ValueExpressionTitle;
        }
         
        return ValueExpressionTitle;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Field property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetField(string value)
    {
#pragma warning disable BL0005
        Field = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Field)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "field", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LegendOptions property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLegendOptions(VisualVariableLegendOptions? value)
    {
#pragma warning disable BL0005
        LegendOptions = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LegendOptions)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setLegendOptions", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ValueExpression property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetValueExpression(string? value)
    {
#pragma warning disable BL0005
        ValueExpression = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ValueExpression)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "valueExpression", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ValueExpressionTitle property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetValueExpressionTitle(string? value)
    {
#pragma warning disable BL0005
        ValueExpressionTitle = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ValueExpressionTitle)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "valueExpressionTitle", value);
    }
    
#endregion


    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case VisualVariableLegendOptions legendOptions:
                if (legendOptions != LegendOptions)
                {
                    LegendOptions = legendOptions;
                    
                    ModifiedParameters[nameof(LegendOptions)] = LegendOptions;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case VisualVariableLegendOptions _:
                LegendOptions = null;
                
                ModifiedParameters[nameof(LegendOptions)] = LegendOptions;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    internal override void ValidateRequiredGeneratedChildren()
    {
    
        if (Field is null)
        {
            throw new MissingRequiredChildElementException(nameof(VisualVariable), nameof(Field));
        }
        LegendOptions?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
