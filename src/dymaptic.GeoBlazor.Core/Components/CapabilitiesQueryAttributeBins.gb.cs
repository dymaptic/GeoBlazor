// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.html">GeoBlazor Docs</a>
///     
/// </summary>
public partial class CapabilitiesQueryAttributeBins : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public CapabilitiesQueryAttributeBins()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="supportedNormalizationTypes">
    /// </param>
    /// <param name="supportedStatistics">
    /// </param>
    /// <param name="supportsAutoInterval">
    /// </param>
    /// <param name="supportsDate">
    /// </param>
    /// <param name="supportsFirstDayOfWeek">
    /// </param>
    /// <param name="supportsFixedBoundaries">
    /// </param>
    /// <param name="supportsFixedInterval">
    /// </param>
    /// <param name="supportsNormalization">
    /// </param>
    /// <param name="supportsReturnFullIntervalBin">
    /// </param>
    /// <param name="supportsSnapToData">
    /// </param>
    /// <param name="supportsSplitBy">
    /// </param>
    /// <param name="supportsStackBy">
    /// </param>
    public CapabilitiesQueryAttributeBins(
        CapabilitiesQueryAttributeBinsSupportedNormalizationTypes? supportedNormalizationTypes = null,
        CapabilitiesQueryAttributeBinsSupportedStatistics? supportedStatistics = null,
        bool? supportsAutoInterval = null,
        bool? supportsDate = null,
        bool? supportsFirstDayOfWeek = null,
        bool? supportsFixedBoundaries = null,
        bool? supportsFixedInterval = null,
        bool? supportsNormalization = null,
        bool? supportsReturnFullIntervalBin = null,
        bool? supportsSnapToData = null,
        bool? supportsSplitBy = null,
        bool? supportsStackBy = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        SupportedNormalizationTypes = supportedNormalizationTypes;
        SupportedStatistics = supportedStatistics;
        SupportsAutoInterval = supportsAutoInterval;
        SupportsDate = supportsDate;
        SupportsFirstDayOfWeek = supportsFirstDayOfWeek;
        SupportsFixedBoundaries = supportsFixedBoundaries;
        SupportsFixedInterval = supportsFixedInterval;
        SupportsNormalization = supportsNormalization;
        SupportsReturnFullIntervalBin = supportsReturnFullIntervalBin;
        SupportsSnapToData = supportsSnapToData;
        SupportsSplitBy = supportsSplitBy;
        SupportsStackBy = supportsStackBy;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.html#capabilitiesqueryattributebinssupportednormalizationtypes-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public CapabilitiesQueryAttributeBinsSupportedNormalizationTypes? SupportedNormalizationTypes { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.html#capabilitiesqueryattributebinssupportedstatistics-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public CapabilitiesQueryAttributeBinsSupportedStatistics? SupportedStatistics { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.html#capabilitiesqueryattributebinssupportsautointerval-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsAutoInterval { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.html#capabilitiesqueryattributebinssupportsdate-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsDate { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.html#capabilitiesqueryattributebinssupportsfirstdayofweek-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsFirstDayOfWeek { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.html#capabilitiesqueryattributebinssupportsfixedboundaries-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsFixedBoundaries { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.html#capabilitiesqueryattributebinssupportsfixedinterval-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsFixedInterval { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.html#capabilitiesqueryattributebinssupportsnormalization-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsNormalization { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.html#capabilitiesqueryattributebinssupportsreturnfullintervalbin-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsReturnFullIntervalBin { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.html#capabilitiesqueryattributebinssupportssnaptodata-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsSnapToData { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.html#capabilitiesqueryattributebinssupportssplitby-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsSplitBy { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.CapabilitiesQueryAttributeBins.html#capabilitiesqueryattributebinssupportsstackby-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? SupportsStackBy { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportedNormalizationTypes property.
    /// </summary>
    public async Task<CapabilitiesQueryAttributeBinsSupportedNormalizationTypes?> GetSupportedNormalizationTypes()
    {
        if (CoreJsModule is null)
        {
            return SupportedNormalizationTypes;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportedNormalizationTypes;
        }

        CapabilitiesQueryAttributeBinsSupportedNormalizationTypes? result = await JsComponentReference.InvokeAsync<CapabilitiesQueryAttributeBinsSupportedNormalizationTypes?>(
            "getSupportedNormalizationTypes", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            SupportedNormalizationTypes = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(SupportedNormalizationTypes)] = SupportedNormalizationTypes;
        }
        
        return SupportedNormalizationTypes;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportedStatistics property.
    /// </summary>
    public async Task<CapabilitiesQueryAttributeBinsSupportedStatistics?> GetSupportedStatistics()
    {
        if (CoreJsModule is null)
        {
            return SupportedStatistics;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportedStatistics;
        }

        CapabilitiesQueryAttributeBinsSupportedStatistics? result = await JsComponentReference.InvokeAsync<CapabilitiesQueryAttributeBinsSupportedStatistics?>(
            "getSupportedStatistics", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            SupportedStatistics = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(SupportedStatistics)] = SupportedStatistics;
        }
        
        return SupportedStatistics;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsAutoInterval property.
    /// </summary>
    public async Task<bool?> GetSupportsAutoInterval()
    {
        if (CoreJsModule is null)
        {
            return SupportsAutoInterval;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsAutoInterval;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsAutoInterval");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsAutoInterval = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsAutoInterval)] = SupportsAutoInterval;
        }
         
        return SupportsAutoInterval;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsDate property.
    /// </summary>
    public async Task<bool?> GetSupportsDate()
    {
        if (CoreJsModule is null)
        {
            return SupportsDate;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsDate;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsDate");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsDate = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsDate)] = SupportsDate;
        }
         
        return SupportsDate;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsFirstDayOfWeek property.
    /// </summary>
    public async Task<bool?> GetSupportsFirstDayOfWeek()
    {
        if (CoreJsModule is null)
        {
            return SupportsFirstDayOfWeek;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsFirstDayOfWeek;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsFirstDayOfWeek");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsFirstDayOfWeek = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsFirstDayOfWeek)] = SupportsFirstDayOfWeek;
        }
         
        return SupportsFirstDayOfWeek;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsFixedBoundaries property.
    /// </summary>
    public async Task<bool?> GetSupportsFixedBoundaries()
    {
        if (CoreJsModule is null)
        {
            return SupportsFixedBoundaries;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsFixedBoundaries;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsFixedBoundaries");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsFixedBoundaries = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsFixedBoundaries)] = SupportsFixedBoundaries;
        }
         
        return SupportsFixedBoundaries;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsFixedInterval property.
    /// </summary>
    public async Task<bool?> GetSupportsFixedInterval()
    {
        if (CoreJsModule is null)
        {
            return SupportsFixedInterval;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsFixedInterval;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsFixedInterval");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsFixedInterval = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsFixedInterval)] = SupportsFixedInterval;
        }
         
        return SupportsFixedInterval;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsNormalization property.
    /// </summary>
    public async Task<bool?> GetSupportsNormalization()
    {
        if (CoreJsModule is null)
        {
            return SupportsNormalization;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsNormalization;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsNormalization");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsNormalization = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsNormalization)] = SupportsNormalization;
        }
         
        return SupportsNormalization;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsReturnFullIntervalBin property.
    /// </summary>
    public async Task<bool?> GetSupportsReturnFullIntervalBin()
    {
        if (CoreJsModule is null)
        {
            return SupportsReturnFullIntervalBin;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsReturnFullIntervalBin;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsReturnFullIntervalBin");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsReturnFullIntervalBin = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsReturnFullIntervalBin)] = SupportsReturnFullIntervalBin;
        }
         
        return SupportsReturnFullIntervalBin;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsSnapToData property.
    /// </summary>
    public async Task<bool?> GetSupportsSnapToData()
    {
        if (CoreJsModule is null)
        {
            return SupportsSnapToData;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsSnapToData;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsSnapToData");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsSnapToData = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsSnapToData)] = SupportsSnapToData;
        }
         
        return SupportsSnapToData;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsSplitBy property.
    /// </summary>
    public async Task<bool?> GetSupportsSplitBy()
    {
        if (CoreJsModule is null)
        {
            return SupportsSplitBy;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsSplitBy;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsSplitBy");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsSplitBy = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsSplitBy)] = SupportsSplitBy;
        }
         
        return SupportsSplitBy;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SupportsStackBy property.
    /// </summary>
    public async Task<bool?> GetSupportsStackBy()
    {
        if (CoreJsModule is null)
        {
            return SupportsStackBy;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SupportsStackBy;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "supportsStackBy");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             SupportsStackBy = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(SupportsStackBy)] = SupportsStackBy;
        }
         
        return SupportsStackBy;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the SupportedNormalizationTypes property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportedNormalizationTypes(CapabilitiesQueryAttributeBinsSupportedNormalizationTypes? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        SupportedNormalizationTypes = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportedNormalizationTypes)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportedNormalizationTypes", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportedStatistics property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportedStatistics(CapabilitiesQueryAttributeBinsSupportedStatistics? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        SupportedStatistics = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportedStatistics)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportedStatistics", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsAutoInterval property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsAutoInterval(bool? value)
    {
#pragma warning disable BL0005
        SupportsAutoInterval = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsAutoInterval)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsAutoInterval", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsDate property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsDate(bool? value)
    {
#pragma warning disable BL0005
        SupportsDate = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsDate)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsDate", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsFirstDayOfWeek property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsFirstDayOfWeek(bool? value)
    {
#pragma warning disable BL0005
        SupportsFirstDayOfWeek = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsFirstDayOfWeek)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsFirstDayOfWeek", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsFixedBoundaries property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsFixedBoundaries(bool? value)
    {
#pragma warning disable BL0005
        SupportsFixedBoundaries = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsFixedBoundaries)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsFixedBoundaries", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsFixedInterval property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsFixedInterval(bool? value)
    {
#pragma warning disable BL0005
        SupportsFixedInterval = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsFixedInterval)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsFixedInterval", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsNormalization property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsNormalization(bool? value)
    {
#pragma warning disable BL0005
        SupportsNormalization = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsNormalization)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsNormalization", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsReturnFullIntervalBin property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsReturnFullIntervalBin(bool? value)
    {
#pragma warning disable BL0005
        SupportsReturnFullIntervalBin = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsReturnFullIntervalBin)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsReturnFullIntervalBin", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsSnapToData property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsSnapToData(bool? value)
    {
#pragma warning disable BL0005
        SupportsSnapToData = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsSnapToData)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsSnapToData", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsSplitBy property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsSplitBy(bool? value)
    {
#pragma warning disable BL0005
        SupportsSplitBy = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsSplitBy)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsSplitBy", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SupportsStackBy property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSupportsStackBy(bool? value)
    {
#pragma warning disable BL0005
        SupportsStackBy = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SupportsStackBy)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "supportsStackBy", value);
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case CapabilitiesQueryAttributeBinsSupportedNormalizationTypes supportedNormalizationTypes:
                if (supportedNormalizationTypes != SupportedNormalizationTypes)
                {
                    SupportedNormalizationTypes = supportedNormalizationTypes;
                    
                    ModifiedParameters[nameof(SupportedNormalizationTypes)] = SupportedNormalizationTypes;
                }
                
                return true;
            case CapabilitiesQueryAttributeBinsSupportedStatistics supportedStatistics:
                if (supportedStatistics != SupportedStatistics)
                {
                    SupportedStatistics = supportedStatistics;
                    
                    ModifiedParameters[nameof(SupportedStatistics)] = SupportedStatistics;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case CapabilitiesQueryAttributeBinsSupportedNormalizationTypes _:
                SupportedNormalizationTypes = null;
                
                ModifiedParameters[nameof(SupportedNormalizationTypes)] = SupportedNormalizationTypes;
                return true;
            case CapabilitiesQueryAttributeBinsSupportedStatistics _:
                SupportedStatistics = null;
                
                ModifiedParameters[nameof(SupportedStatistics)] = SupportedStatistics;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        SupportedNormalizationTypes?.ValidateRequiredGeneratedChildren();
        SupportedStatistics?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
