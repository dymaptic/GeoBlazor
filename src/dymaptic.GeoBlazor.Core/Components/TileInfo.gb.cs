// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Contains information about the tiling scheme for <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-TileLayer.html">TileLayers</a>, <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ElevationLayer.html">ElevationLayers</a>, <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryTileLayer.html">ImageryTileLayers</a>, <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-VectorTileLayer.html">VectorTileLayers</a>, and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-WebTileLayer.html">WebTileLayers</a>.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TileInfo.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class TileInfo
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public TileInfo()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="dpi">
    ///     The dots per inch (DPI) of the tiling scheme.
    ///     default 96
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TileInfo.html#dpi">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="format">
    ///     Image format of the cached tiles.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TileInfo.html#format">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="lods">
    ///     An array of levels of detail that define the tiling scheme.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TileInfo.html#lods">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="origin">
    ///     The tiling scheme origin.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TileInfo.html#origin">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="size">
    ///     Size of tiles in pixels.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TileInfo.html#size">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="spatialReference">
    ///     The spatial reference of the tiling schema.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TileInfo.html#spatialReference">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public TileInfo(
        double? dpi = null,
        TileInfoFormat? format = null,
        IReadOnlyList<LOD>? lods = null,
        Point? origin = null,
        IReadOnlyList<int>? size = null,
        SpatialReference? spatialReference = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Dpi = dpi;
        Format = format;
        Lods = lods;
        Origin = origin;
        Size = size;
        SpatialReference = spatialReference;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Indicates if the tiling scheme supports wrap around.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TileInfo.html#isWrappable">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonInclude]
    public bool? IsWrappable { get; protected set; }
    
    /// <summary>
    ///     An array of levels of detail that define the tiling scheme.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TileInfo.html#lods">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<LOD>? Lods { get; set; }
    
    /// <summary>
    ///     The tiling scheme origin.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TileInfo.html#origin">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Point? Origin { get; set; }
    
    /// <summary>
    ///     Size of tiles in pixels.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TileInfo.html#size">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<int>? Size { get; set; }
    
    /// <summary>
    ///     The spatial reference of the tiling schema.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TileInfo.html#spatialReference">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public SpatialReference? SpatialReference { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Dpi property.
    /// </summary>
    public async Task<double?> GetDpi()
    {
        if (CoreJsModule is null)
        {
            return Dpi;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Dpi;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "dpi");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Dpi = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Dpi)] = Dpi;
        }
         
        return Dpi;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Format property.
    /// </summary>
    public async Task<TileInfoFormat?> GetFormat()
    {
        if (CoreJsModule is null)
        {
            return Format;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Format;
        }

        // get the property value
        JsNullableEnumWrapper<TileInfoFormat>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<TileInfoFormat>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "format");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Format = (TileInfoFormat)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Format)] = Format;
        }
         
        return Format;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the IsWrappable property.
    /// </summary>
    public async Task<bool?> GetIsWrappable()
    {
        if (CoreJsModule is null)
        {
            return IsWrappable;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return IsWrappable;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "isWrappable");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             IsWrappable = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(IsWrappable)] = IsWrappable;
        }
         
        return IsWrappable;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Lods property.
    /// </summary>
    public async Task<IReadOnlyList<LOD>?> GetLods()
    {
        if (CoreJsModule is null)
        {
            return Lods;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Lods;
        }

        IReadOnlyList<LOD>? result = await JsComponentReference.InvokeAsync<IReadOnlyList<LOD>?>(
            "getLods", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Lods = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Lods)] = Lods;
        }
        
        return Lods;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Origin property.
    /// </summary>
    public async Task<Point?> GetOrigin()
    {
        if (CoreJsModule is null)
        {
            return Origin;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Origin;
        }

        Point? result = await JsComponentReference.InvokeAsync<Point?>(
            "getOrigin", CancellationTokenSource.Token);
        
        if (result is not null)
        {
            if (Origin is not null)
            {
                result.Id = Origin.Id;
            }
            
#pragma warning disable BL0005
            Origin = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Origin)] = Origin;
        }
        
        return Origin;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Size property.
    /// </summary>
    public async Task<IReadOnlyList<int>?> GetSize()
    {
        if (CoreJsModule is null)
        {
            return Size;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Size;
        }

        // get the property value
        IReadOnlyList<int>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<int>?>("getProperty",
            CancellationTokenSource.Token, "size");
        if (result is not null)
        {
#pragma warning disable BL0005
             Size = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Size)] = Size;
        }
         
        return Size;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the SpatialReference property.
    /// </summary>
    public async Task<SpatialReference?> GetSpatialReference()
    {
        if (CoreJsModule is null)
        {
            return SpatialReference;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return SpatialReference;
        }

        SpatialReference? result = await JsComponentReference.InvokeAsync<SpatialReference?>(
            "getSpatialReference", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            SpatialReference = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(SpatialReference)] = SpatialReference;
        }
        
        return SpatialReference;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Dpi property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDpi(double? value)
    {
#pragma warning disable BL0005
        Dpi = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Dpi)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "dpi", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Format property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFormat(TileInfoFormat? value)
    {
#pragma warning disable BL0005
        Format = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Format)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "format", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Lods property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLods(IReadOnlyList<LOD>? value)
    {
        if (Lods is not null)
        {
            foreach (LOD item in Lods)
            {
                await item.DisposeAsync();
            }
        }
        
        if (value is not null)
        {
            foreach (LOD item in value)
            {
                item.CoreJsModule = CoreJsModule;
                item.Parent = this;
                item.Layer = Layer;
                item.View = View;
            }
        }
        
#pragma warning disable BL0005
        Lods = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Lods)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setLods", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Origin property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetOrigin(Point? value)
    {
        if (Origin is not null)
        {
            await Origin.DisposeAsync();
        }
        
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        Origin = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Origin)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setOrigin", 
            CancellationTokenSource.Token, value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Size property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSize(IReadOnlyList<int>? value)
    {
#pragma warning disable BL0005
        Size = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Size)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "size", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the SpatialReference property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSpatialReference(SpatialReference? value)
    {
        if (SpatialReference is not null)
        {
            await SpatialReference.DisposeAsync();
        }
        
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        SpatialReference = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(SpatialReference)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setSpatialReference", 
            CancellationTokenSource.Token, value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the Lods property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToLods(params LOD[] values)
    {
        LOD[] join = Lods is null
            ? values
            : [..Lods, ..values];
        await SetLods(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the Size property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToSize(params int[] values)
    {
        int[] join = Size is null
            ? values
            : [..Size, ..values];
        await SetSize(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the Lods property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromLods(params LOD[] values)
    {
        if (Lods is null)
        {
            return;
        }
        await SetLods(Lods.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the Size property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromSize(params int[] values)
    {
        if (Size is null)
        {
            return;
        }
        await SetSize(Size.Except(values).ToArray());
    }
    
#endregion

#region Public Methods

    /// <summary>
    ///     Utility method used to convert a scale value to its corresponding zoom value.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TileInfo.html#scaleToZoom">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="scale">
    ///     The scale value to convert.
    /// </param>
    [ArcGISMethod]
    public async Task<int?> ScaleToZoom(double scale)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<int?>(
            "scaleToZoom", 
            CancellationTokenSource.Token,
            scale);
    }
    
    /// <summary>
    ///     Utility method used to convert a zoom value to its corresponding scale value.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TileInfo.html#zoomToScale">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="zoom">
    ///     The zoom value to convert.
    /// </param>
    [ArcGISMethod]
    public async Task<double?> ZoomToScale(int zoom)
    {
        if (JsComponentReference is null) return null;
        
        return await JsComponentReference!.InvokeAsync<double?>(
            "zoomToScale", 
            CancellationTokenSource.Token,
            zoom);
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case LOD lods:
                Lods ??= [];
                if (!Lods.Contains(lods))
                {
                    Lods = [..Lods, lods];
                    
                    ModifiedParameters[nameof(Lods)] = Lods;
                }
                
                return true;
            case Point origin:
                if (origin != Origin)
                {
                    Origin = origin;
                    
                    ModifiedParameters[nameof(Origin)] = Origin;
                }
                
                return true;
            case SpatialReference spatialReference:
                if (spatialReference != SpatialReference)
                {
                    SpatialReference = spatialReference;
                    
                    ModifiedParameters[nameof(SpatialReference)] = SpatialReference;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case LOD lods:
                Lods = Lods?.Where(l => l != lods).ToList();
                
                ModifiedParameters[nameof(Lods)] = Lods;
                return true;
            case Point _:
                Origin = null;
                
                ModifiedParameters[nameof(Origin)] = Origin;
                return true;
            case SpatialReference _:
                SpatialReference = null;
                
                ModifiedParameters[nameof(SpatialReference)] = SpatialReference;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        if (Lods is not null)
        {
            foreach (LOD child in Lods)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        Origin?.ValidateRequiredGeneratedChildren();
        SpatialReference?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
