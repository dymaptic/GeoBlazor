// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    The `ChartMediaInfoValue` class contains information for popups regarding how charts should be constructed.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-support-ChartMediaInfoValue.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class ChartMediaInfoValue
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public ChartMediaInfoValue()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="fields">
    ///     An array of strings, with each string containing the name of a field to display in the chart.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-support-ChartMediaInfoValue.html#fields">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="normalizeField">
    ///     A string containing the name of a field.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-support-ChartMediaInfoValue.html#normalizeField">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="tooltipField">
    ///     String value indicating the tooltip for a chart specified from another field.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-support-ChartMediaInfoValue.html#tooltipField">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="series">
    ///     An array of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-support-ChartMediaInfoValueSeries.html">ChartMediaInfoValueSeries</a> objects which provide information of x/y data that is plotted in a chart.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-support-ChartMediaInfoValue.html#series">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="colors">
    ///     An optional array of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Color.html">colors</a> where each color corresponds respectively to a field in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-support-ChartMediaInfoValue.html#fields">fields</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-support-ChartMediaInfoValue.html#colors">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public ChartMediaInfoValue(
        IReadOnlyList<string>? fields = null,
        string? normalizeField = null,
        string? tooltipField = null,
        IReadOnlyList<ChartMediaInfoValueSeries>? series = null,
        IReadOnlyList<MapColor>? colors = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Fields = fields;
        NormalizeField = normalizeField;
        TooltipField = tooltipField;
        Series = series;
        Colors = colors;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     An optional array of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-Color.html">colors</a> where each color corresponds respectively to a field in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-support-ChartMediaInfoValue.html#fields">fields</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-support-ChartMediaInfoValue.html#colors">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<MapColor>? Colors { get; set; }
    
    /// <summary>
    ///     An array of strings, with each string containing the name of a field to display in the chart.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-support-ChartMediaInfoValue.html#fields">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<string>? Fields { get; set; }
    
    /// <summary>
    ///     An array of <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-support-ChartMediaInfoValueSeries.html">ChartMediaInfoValueSeries</a> objects which provide information of x/y data that is plotted in a chart.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-popup-content-support-ChartMediaInfoValue.html#series">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<ChartMediaInfoValueSeries>? Series { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Colors property.
    /// </summary>
    public async Task<IReadOnlyList<MapColor>?> GetColors()
    {
        if (CoreJsModule is null)
        {
            return Colors;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Colors;
        }

        // get the property value
        IReadOnlyList<MapColor>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<MapColor>?>("getProperty",
            CancellationTokenSource.Token, "colors");
        if (result is not null)
        {
#pragma warning disable BL0005
             Colors = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Colors)] = Colors;
        }
         
        return Colors;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Fields property.
    /// </summary>
    public async Task<IReadOnlyList<string>?> GetFields()
    {
        if (CoreJsModule is null)
        {
            return Fields;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Fields;
        }

        // get the property value
        IReadOnlyList<string>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<string>?>("getProperty",
            CancellationTokenSource.Token, "fields");
        if (result is not null)
        {
#pragma warning disable BL0005
             Fields = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Fields)] = Fields;
        }
         
        return Fields;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the NormalizeField property.
    /// </summary>
    public async Task<string?> GetNormalizeField()
    {
        if (CoreJsModule is null)
        {
            return NormalizeField;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return NormalizeField;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "normalizeField");
        if (result is not null)
        {
#pragma warning disable BL0005
             NormalizeField = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(NormalizeField)] = NormalizeField;
        }
         
        return NormalizeField;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Series property.
    /// </summary>
    public async Task<IReadOnlyList<ChartMediaInfoValueSeries>?> GetSeries()
    {
        if (CoreJsModule is null)
        {
            return Series;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Series;
        }

        // get the property value
        IReadOnlyList<ChartMediaInfoValueSeries>? result = await JsComponentReference!.InvokeAsync<IReadOnlyList<ChartMediaInfoValueSeries>?>("getProperty",
            CancellationTokenSource.Token, "series");
        if (result is not null)
        {
#pragma warning disable BL0005
             Series = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Series)] = Series;
        }
         
        return Series;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the TooltipField property.
    /// </summary>
    public async Task<string?> GetTooltipField()
    {
        if (CoreJsModule is null)
        {
            return TooltipField;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return TooltipField;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "tooltipField");
        if (result is not null)
        {
#pragma warning disable BL0005
             TooltipField = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(TooltipField)] = TooltipField;
        }
         
        return TooltipField;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Colors property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetColors(IReadOnlyList<MapColor>? value)
    {
#pragma warning disable BL0005
        Colors = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Colors)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "colors", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Fields property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFields(IReadOnlyList<string>? value)
    {
#pragma warning disable BL0005
        Fields = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Fields)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "fields", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the NormalizeField property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetNormalizeField(string? value)
    {
#pragma warning disable BL0005
        NormalizeField = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(NormalizeField)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "normalizeField", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Series property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetSeries(IReadOnlyList<ChartMediaInfoValueSeries>? value)
    {
#pragma warning disable BL0005
        Series = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Series)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "series", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the TooltipField property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetTooltipField(string? value)
    {
#pragma warning disable BL0005
        TooltipField = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(TooltipField)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "tooltipField", value);
    }
    
#endregion

#region Add to Collection Methods

    /// <summary>
    ///     Asynchronously adds elements to the Colors property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToColors(params MapColor[] values)
    {
        MapColor[] join = Colors is null
            ? values
            : [..Colors, ..values];
        await SetColors(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the Fields property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToFields(params string[] values)
    {
        string[] join = Fields is null
            ? values
            : [..Fields, ..values];
        await SetFields(join);
    }
    
    /// <summary>
    ///     Asynchronously adds elements to the Series property.
    /// </summary>
    /// <param name="values">
    ///    The elements to add.
    /// </param>
    public async Task AddToSeries(params ChartMediaInfoValueSeries[] values)
    {
        ChartMediaInfoValueSeries[] join = Series is null
            ? values
            : [..Series, ..values];
        await SetSeries(join);
    }
    
#endregion

#region Remove From Collection Methods

    
    /// <summary>
    ///     Asynchronously remove an element from the Colors property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromColors(params MapColor[] values)
    {
        if (Colors is null)
        {
            return;
        }
        await SetColors(Colors.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the Fields property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromFields(params string[] values)
    {
        if (Fields is null)
        {
            return;
        }
        await SetFields(Fields.Except(values).ToArray());
    }
    
    
    /// <summary>
    ///     Asynchronously remove an element from the Series property.
    /// </summary>
    /// <param name="values">
    ///    The elements to remove.
    /// </param>
    public async Task RemoveFromSeries(params ChartMediaInfoValueSeries[] values)
    {
        if (Series is null)
        {
            return;
        }
        await SetSeries(Series.Except(values).ToArray());
    }
    
#endregion


    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ChartMediaInfoValueSeries series:
                Series ??= [];
                if (!Series.Contains(series))
                {
                    Series = [..Series, series];
                    
                    ModifiedParameters[nameof(Series)] = Series;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case ChartMediaInfoValueSeries series:
                Series = Series?.Where(s => s != series).ToList();
                
                ModifiedParameters[nameof(Series)] = Series;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        if (Series is not null)
        {
            foreach (ChartMediaInfoValueSeries child in Series)
            {
                child.ValidateRequiredGeneratedChildren();
            }
        }
        base.ValidateRequiredGeneratedChildren();
    }
      
}
