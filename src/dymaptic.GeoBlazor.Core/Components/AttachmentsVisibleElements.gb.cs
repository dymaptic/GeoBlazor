// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.AttachmentsVisibleElements.html">GeoBlazor Docs</a>
///     The visible elements that are displayed within the widget.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class AttachmentsVisibleElements : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public AttachmentsVisibleElements()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="addButton">
    ///     Indicates whether to display the `Add` button which prompts the dialog to add a new attachment.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="addSubmitButton">
    ///     Indicates whether to display the `add` button after selecting the attachment to add.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="cancelAddButton">
    ///     Indicates whether to display the `cancel` button after selecting the attachment to add.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="cancelUpdateButton">
    ///     Indicates whether to display the `cancel` button after selecting an attachment to update an existing attachment.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="deleteButton">
    ///     Indicates whether to display the `delete` button to delete an existing attachment.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="errorMessage">
    ///     Indicates whether to display an error message if adding or updating an attachment results in errors.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="progressBar">
    ///     Indicates whether to display a progress bar when adding an attachment.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="updateButton">
    ///     Indicates whether to display an `update` button to allow updating on existing attachments.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public AttachmentsVisibleElements(
        bool? addButton = null,
        bool? addSubmitButton = null,
        bool? cancelAddButton = null,
        bool? cancelUpdateButton = null,
        bool? deleteButton = null,
        bool? errorMessage = null,
        bool? progressBar = null,
        bool? updateButton = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        AddButton = addButton;
        AddSubmitButton = addSubmitButton;
        CancelAddButton = cancelAddButton;
        CancelUpdateButton = cancelUpdateButton;
        DeleteButton = deleteButton;
        ErrorMessage = errorMessage;
        ProgressBar = progressBar;
        UpdateButton = updateButton;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Indicates whether to display the `Add` button which prompts the dialog to add a new attachment.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? AddButton { get; set; }
    
    /// <summary>
    ///     Indicates whether to display the `add` button after selecting the attachment to add.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? AddSubmitButton { get; set; }
    
    /// <summary>
    ///     Indicates whether to display the `cancel` button after selecting the attachment to add.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? CancelAddButton { get; set; }
    
    /// <summary>
    ///     Indicates whether to display the `cancel` button after selecting an attachment to update an existing attachment.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? CancelUpdateButton { get; set; }
    
    /// <summary>
    ///     Indicates whether to display the `delete` button to delete an existing attachment.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? DeleteButton { get; set; }
    
    /// <summary>
    ///     Indicates whether to display an error message if adding or updating an attachment results in errors.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? ErrorMessage { get; set; }
    
    /// <summary>
    ///     Indicates whether to display a progress bar when adding an attachment.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? ProgressBar { get; set; }
    
    /// <summary>
    ///     Indicates whether to display an `update` button to allow updating on existing attachments.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Attachments.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? UpdateButton { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the AddButton property.
    /// </summary>
    public async Task<bool?> GetAddButton()
    {
        if (CoreJsModule is null)
        {
            return AddButton;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return AddButton;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "addButton");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             AddButton = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(AddButton)] = AddButton;
        }
         
        return AddButton;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the AddSubmitButton property.
    /// </summary>
    public async Task<bool?> GetAddSubmitButton()
    {
        if (CoreJsModule is null)
        {
            return AddSubmitButton;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return AddSubmitButton;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "addSubmitButton");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             AddSubmitButton = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(AddSubmitButton)] = AddSubmitButton;
        }
         
        return AddSubmitButton;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CancelAddButton property.
    /// </summary>
    public async Task<bool?> GetCancelAddButton()
    {
        if (CoreJsModule is null)
        {
            return CancelAddButton;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CancelAddButton;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "cancelAddButton");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             CancelAddButton = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CancelAddButton)] = CancelAddButton;
        }
         
        return CancelAddButton;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the CancelUpdateButton property.
    /// </summary>
    public async Task<bool?> GetCancelUpdateButton()
    {
        if (CoreJsModule is null)
        {
            return CancelUpdateButton;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return CancelUpdateButton;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "cancelUpdateButton");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             CancelUpdateButton = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(CancelUpdateButton)] = CancelUpdateButton;
        }
         
        return CancelUpdateButton;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DeleteButton property.
    /// </summary>
    public async Task<bool?> GetDeleteButton()
    {
        if (CoreJsModule is null)
        {
            return DeleteButton;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return DeleteButton;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "deleteButton");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             DeleteButton = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(DeleteButton)] = DeleteButton;
        }
         
        return DeleteButton;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ErrorMessage property.
    /// </summary>
    public async Task<bool?> GetErrorMessage()
    {
        if (CoreJsModule is null)
        {
            return ErrorMessage;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ErrorMessage;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "errorMessage");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ErrorMessage = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ErrorMessage)] = ErrorMessage;
        }
         
        return ErrorMessage;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ProgressBar property.
    /// </summary>
    public async Task<bool?> GetProgressBar()
    {
        if (CoreJsModule is null)
        {
            return ProgressBar;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ProgressBar;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "progressBar");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ProgressBar = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ProgressBar)] = ProgressBar;
        }
         
        return ProgressBar;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the UpdateButton property.
    /// </summary>
    public async Task<bool?> GetUpdateButton()
    {
        if (CoreJsModule is null)
        {
            return UpdateButton;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return UpdateButton;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "updateButton");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             UpdateButton = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(UpdateButton)] = UpdateButton;
        }
         
        return UpdateButton;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the AddButton property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAddButton(bool? value)
    {
#pragma warning disable BL0005
        AddButton = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(AddButton)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "addButton", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the AddSubmitButton property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAddSubmitButton(bool? value)
    {
#pragma warning disable BL0005
        AddSubmitButton = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(AddSubmitButton)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "addSubmitButton", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CancelAddButton property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCancelAddButton(bool? value)
    {
#pragma warning disable BL0005
        CancelAddButton = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CancelAddButton)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "cancelAddButton", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the CancelUpdateButton property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCancelUpdateButton(bool? value)
    {
#pragma warning disable BL0005
        CancelUpdateButton = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(CancelUpdateButton)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "cancelUpdateButton", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DeleteButton property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDeleteButton(bool? value)
    {
#pragma warning disable BL0005
        DeleteButton = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DeleteButton)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "deleteButton", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ErrorMessage property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetErrorMessage(bool? value)
    {
#pragma warning disable BL0005
        ErrorMessage = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ErrorMessage)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "errorMessage", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ProgressBar property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetProgressBar(bool? value)
    {
#pragma warning disable BL0005
        ProgressBar = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ProgressBar)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "progressBar", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the UpdateButton property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetUpdateButton(bool? value)
    {
#pragma warning disable BL0005
        UpdateButton = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(UpdateButton)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "updateButton", value);
    }
    
#endregion

}
