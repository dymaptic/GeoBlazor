// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    A `FieldElement` form element defines how a feature layer's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Field.html">field</a> participates in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-FeatureForm.html">FeatureForm</a>.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-FieldElement.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class FieldElement : IElement
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public FieldElement()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="fieldName">
    ///     The field name as defined by the feature layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-FieldElement.html#fieldName">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="label">
    ///     A string value containing the field alias.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html#label">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="description">
    ///     The element's description providing the purpose behind it.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html#description">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="hint">
    ///     Contains a hint used to help editors while editing fields.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-FieldElement.html#hint">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="editableExpression">
    ///     A reference to the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-ExpressionInfo.html#name">name</a> of an <a target="_blank" href="https://developers.arcgis.com/javascript/latest/arcade/">Arcade</a> expression defined in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html#expressionInfos">expressionInfos</a> of the FormTemplate.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-FieldElement.html#editableExpression">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="requiredExpression">
    ///     A reference to the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-ExpressionInfo.html#name">name</a> of an <a target="_blank" href="https://developers.arcgis.com/javascript/latest/arcade/">Arcade</a> expression defined in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html#expressionInfos">expressionInfos</a> of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html">FormTemplate</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-FieldElement.html#requiredExpression">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="valueExpression">
    ///     A reference to the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-ExpressionInfo.html#name">name</a> of an <a target="_blank" href="https://developers.arcgis.com/javascript/latest/arcade/">Arcade</a> expression defined in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html#expressionInfos">expressionInfos</a> of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html">FormTemplate</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-FieldElement.html#valueExpression">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="domain">
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-CodedValueDomain.html">coded value domain</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RangeDomain.html">range domain</a> of the field.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-FieldElement.html#domain">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="input">
    ///     The module:esri/form/elements/inputs/Input to use for the element.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-FieldElement.html#input">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="visibilityExpression">
    ///     A reference to the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-ExpressionInfo.html#name">name</a> of an <a target="_blank" href="https://developers.arcgis.com/javascript/latest/arcade/">Arcade</a> expression defined in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html#expressionInfos">expressionInfos</a> of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html">FormTemplate</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-Element.html#visibilityExpression">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public FieldElement(
        string? fieldName = null,
        string? label = null,
        string? description = null,
        string? hint = null,
        string? editableExpression = null,
        string? requiredExpression = null,
        string? valueExpression = null,
        Domain? domain = null,
        IInputElement? input = null,
        string? visibilityExpression = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        FieldName = fieldName;
        Label = label;
        Description = description;
        Hint = hint;
        EditableExpression = editableExpression;
        RequiredExpression = requiredExpression;
        ValueExpression = valueExpression;
        Domain = domain;
        Input = input;
        VisibilityExpression = visibilityExpression;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-CodedValueDomain.html">coded value domain</a> or <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RangeDomain.html">range domain</a> of the field.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-FieldElement.html#domain">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public Domain? Domain { get; set; }
    
    /// <summary>
    ///     The module:esri/form/elements/inputs/Input to use for the element.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-FieldElement.html#input">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IInputElement? Input { get; set; }
    
    /// <summary>
    ///     A reference to the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-ExpressionInfo.html#name">name</a> of an <a target="_blank" href="https://developers.arcgis.com/javascript/latest/arcade/">Arcade</a> expression defined in the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html#expressionInfos">expressionInfos</a> of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-FormTemplate.html">FormTemplate</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-form-elements-FieldElement.html#valueExpression">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? ValueExpression { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Domain property.
    /// </summary>
    public async Task<Domain?> GetDomain()
    {
        if (CoreJsModule is null)
        {
            return Domain;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Domain;
        }

        // get the property value
        Domain? result = await JsComponentReference!.InvokeAsync<Domain?>("getProperty",
            CancellationTokenSource.Token, "domain");
        if (result is not null)
        {
#pragma warning disable BL0005
             Domain = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Domain)] = Domain;
        }
         
        return Domain;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the EditableExpression property.
    /// </summary>
    public async Task<string?> GetEditableExpression()
    {
        if (CoreJsModule is null)
        {
            return EditableExpression;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return EditableExpression;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "editableExpression");
        if (result is not null)
        {
#pragma warning disable BL0005
             EditableExpression = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(EditableExpression)] = EditableExpression;
        }
         
        return EditableExpression;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the FieldName property.
    /// </summary>
    public async Task<string?> GetFieldName()
    {
        if (CoreJsModule is null)
        {
            return FieldName;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return FieldName;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "fieldName");
        if (result is not null)
        {
#pragma warning disable BL0005
             FieldName = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(FieldName)] = FieldName;
        }
         
        return FieldName;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Hint property.
    /// </summary>
    public async Task<string?> GetHint()
    {
        if (CoreJsModule is null)
        {
            return Hint;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Hint;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "hint");
        if (result is not null)
        {
#pragma warning disable BL0005
             Hint = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Hint)] = Hint;
        }
         
        return Hint;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Input property.
    /// </summary>
    public async Task<IInputElement?> GetInput()
    {
        if (CoreJsModule is null)
        {
            return Input;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Input;
        }

        // get the property value
        IInputElement? result = await JsComponentReference!.InvokeAsync<IInputElement?>("getProperty",
            CancellationTokenSource.Token, "input");
        if (result is not null)
        {
#pragma warning disable BL0005
             Input = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Input)] = Input;
        }
         
        return Input;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the RequiredExpression property.
    /// </summary>
    public async Task<string?> GetRequiredExpression()
    {
        if (CoreJsModule is null)
        {
            return RequiredExpression;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return RequiredExpression;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "requiredExpression");
        if (result is not null)
        {
#pragma warning disable BL0005
             RequiredExpression = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(RequiredExpression)] = RequiredExpression;
        }
         
        return RequiredExpression;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ValueExpression property.
    /// </summary>
    public async Task<string?> GetValueExpression()
    {
        if (CoreJsModule is null)
        {
            return ValueExpression;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return ValueExpression;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "valueExpression");
        if (result is not null)
        {
#pragma warning disable BL0005
             ValueExpression = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ValueExpression)] = ValueExpression;
        }
         
        return ValueExpression;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Domain property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDomain(Domain? value)
    {
#pragma warning disable BL0005
        Domain = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Domain)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "domain", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the EditableExpression property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetEditableExpression(string? value)
    {
#pragma warning disable BL0005
        EditableExpression = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(EditableExpression)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "editableExpression", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the FieldName property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFieldName(string? value)
    {
#pragma warning disable BL0005
        FieldName = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(FieldName)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "fieldName", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Hint property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHint(string? value)
    {
#pragma warning disable BL0005
        Hint = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Hint)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "hint", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Input property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetInput(IInputElement? value)
    {
#pragma warning disable BL0005
        Input = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Input)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "input", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the RequiredExpression property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRequiredExpression(string? value)
    {
#pragma warning disable BL0005
        RequiredExpression = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(RequiredExpression)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "requiredExpression", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ValueExpression property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetValueExpression(string? value)
    {
#pragma warning disable BL0005
        ValueExpression = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ValueExpression)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "valueExpression", value);
    }
    
#endregion

}
