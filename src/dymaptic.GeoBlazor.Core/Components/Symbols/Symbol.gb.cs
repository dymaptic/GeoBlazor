// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components.Symbols;


/// <summary>
///    Symbol is the base class for all symbols.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Symbol.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public abstract partial class Symbol
{

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Color property.
    /// </summary>
    public async Task<MapColor?> GetColor()
    {
        if (CoreJsModule is null)
        {
            return Color;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Color;
        }

        // get the property value
        MapColor? result = await JsComponentReference!.InvokeAsync<MapColor?>("getProperty",
            CancellationTokenSource.Token, "color");
        if (result is not null)
        {
#pragma warning disable BL0005
             Color = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Color)] = Color;
        }
         
        return Color;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Color property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetColor(MapColor? value)
    {
#pragma warning disable BL0005
        Color = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Color)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await JsComponentReference.InvokeVoidAsync("setColor", 
            CancellationTokenSource.Token, value);
    }
    
#endregion

}
