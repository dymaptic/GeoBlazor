// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components.Symbols;


/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Components.Symbols.TextSymbol.html">GeoBlazor Docs</a>
///     Text symbols are used to define the graphic for displaying labels on a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-FeatureLayer.html">FeatureLayer</a>, <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-CSVLayer.html">CSVLayer</a>, <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Sublayer.html">Sublayer</a>, and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-StreamLayer.html">StreamLayer</a> in a 2D <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-MapView.html">MapView</a>.
///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class TextSymbol : ISketchViewModelPointSymbol,
    ISymbol2D
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public TextSymbol()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="text">
    ///     The text string to display in the view.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#text">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="color">
    ///     The color of the symbol.
    ///     default black
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Symbol.html#color">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="haloColor">
    ///     The color of the text symbol's halo.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#haloColor">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="haloSize">
    ///     The size in points of the text symbol's halo.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#haloSize">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="font">
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Font.html">Font</a> used to style the text.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#font">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="angle">
    ///     The angle of the text.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#angle">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="backgroundColor">
    ///     The background color of the label's bounding box.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#backgroundColor">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="borderLineColor">
    ///     The border color of the label's bounding box.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#borderLineColor">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="borderLineSize">
    ///     The border size or width of the label's bounding box.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#borderLineSize">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="horizontalAlignment">
    ///     Adjusts the horizontal alignment of the text in multi-lines.
    ///     default "center"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#horizontalAlignment">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="kerning">
    ///     Determines whether to adjust the spacing between characters in the text string.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#kerning">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="lineHeight">
    ///     The height of the space between each line of text.
    ///     default 1.0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#lineHeight">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="lineWidth">
    ///     The maximum length in points for each line of text.
    ///     default 192
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#lineWidth">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="rotated">
    ///     Determines whether every character in the text string is rotated.
    ///     default false
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#rotated">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="verticalAlignment">
    ///     Adjusts the vertical alignment of the text.
    ///     default "baseline"
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#verticalAlignment">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="xoffset">
    ///     The offset on the x-axis in points.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#xoffset">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="yoffset">
    ///     The offset on the y-axis in points.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#yoffset">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public TextSymbol(
        string text,
        MapColor? color = null,
        MapColor? haloColor = null,
        Dimension? haloSize = null,
        MapFont? font = null,
        double? angle = null,
        MapColor? backgroundColor = null,
        MapColor? borderLineColor = null,
        double? borderLineSize = null,
        HorizontalAlignment? horizontalAlignment = null,
        bool? kerning = null,
        double? lineHeight = null,
        Dimension? lineWidth = null,
        bool? rotated = null,
        VerticalAlignment? verticalAlignment = null,
        Dimension? xoffset = null,
        Dimension? yoffset = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Text = text;
        Color = color;
        HaloColor = haloColor;
        HaloSize = haloSize;
        Font = font;
        Angle = angle;
        BackgroundColor = backgroundColor;
        BorderLineColor = borderLineColor;
        BorderLineSize = borderLineSize;
        HorizontalAlignment = horizontalAlignment;
        Kerning = kerning;
        LineHeight = lineHeight;
        LineWidth = lineWidth;
        Rotated = rotated;
        VerticalAlignment = verticalAlignment;
        Xoffset = xoffset;
        Yoffset = yoffset;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-Font.html">Font</a> used to style the text.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-symbols-TextSymbol.html#font">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public MapFont? Font { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Angle property.
    /// </summary>
    public async Task<double?> GetAngle()
    {
        if (CoreJsModule is null)
        {
            return Angle;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Angle;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "angle");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Angle = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Angle)] = Angle;
        }
         
        return Angle;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the BackgroundColor property.
    /// </summary>
    public async Task<MapColor?> GetBackgroundColor()
    {
        if (CoreJsModule is null)
        {
            return BackgroundColor;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return BackgroundColor;
        }

        // get the property value
        MapColor? result = await JsComponentReference!.InvokeAsync<MapColor?>("getProperty",
            CancellationTokenSource.Token, "backgroundColor");
        if (result is not null)
        {
#pragma warning disable BL0005
             BackgroundColor = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(BackgroundColor)] = BackgroundColor;
        }
         
        return BackgroundColor;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the BorderLineColor property.
    /// </summary>
    public async Task<MapColor?> GetBorderLineColor()
    {
        if (CoreJsModule is null)
        {
            return BorderLineColor;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return BorderLineColor;
        }

        // get the property value
        MapColor? result = await JsComponentReference!.InvokeAsync<MapColor?>("getProperty",
            CancellationTokenSource.Token, "borderLineColor");
        if (result is not null)
        {
#pragma warning disable BL0005
             BorderLineColor = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(BorderLineColor)] = BorderLineColor;
        }
         
        return BorderLineColor;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the BorderLineSize property.
    /// </summary>
    public async Task<double?> GetBorderLineSize()
    {
        if (CoreJsModule is null)
        {
            return BorderLineSize;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return BorderLineSize;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "borderLineSize");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             BorderLineSize = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(BorderLineSize)] = BorderLineSize;
        }
         
        return BorderLineSize;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Font property.
    /// </summary>
    public async Task<MapFont?> GetFont()
    {
        if (CoreJsModule is null)
        {
            return Font;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Font;
        }

        MapFont? result = await JsComponentReference.InvokeAsync<MapFont?>(
            "getFont", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            Font = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(Font)] = Font;
        }
        
        return Font;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HaloColor property.
    /// </summary>
    public async Task<MapColor?> GetHaloColor()
    {
        if (CoreJsModule is null)
        {
            return HaloColor;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return HaloColor;
        }

        // get the property value
        MapColor? result = await JsComponentReference!.InvokeAsync<MapColor?>("getProperty",
            CancellationTokenSource.Token, "haloColor");
        if (result is not null)
        {
#pragma warning disable BL0005
             HaloColor = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HaloColor)] = HaloColor;
        }
         
        return HaloColor;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HaloSize property.
    /// </summary>
    public async Task<Dimension?> GetHaloSize()
    {
        if (CoreJsModule is null)
        {
            return HaloSize;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return HaloSize;
        }

        // get the property value
        Dimension? result = await JsComponentReference!.InvokeAsync<Dimension?>("getProperty",
            CancellationTokenSource.Token, "haloSize");
        if (result is not null)
        {
#pragma warning disable BL0005
             HaloSize = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HaloSize)] = HaloSize;
        }
         
        return HaloSize;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the HorizontalAlignment property.
    /// </summary>
    public async Task<HorizontalAlignment?> GetHorizontalAlignment()
    {
        if (CoreJsModule is null)
        {
            return HorizontalAlignment;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return HorizontalAlignment;
        }

        // get the property value
        JsNullableEnumWrapper<HorizontalAlignment>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<HorizontalAlignment>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "horizontalAlignment");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             HorizontalAlignment = (HorizontalAlignment)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(HorizontalAlignment)] = HorizontalAlignment;
        }
         
        return HorizontalAlignment;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Kerning property.
    /// </summary>
    public async Task<bool?> GetKerning()
    {
        if (CoreJsModule is null)
        {
            return Kerning;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Kerning;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "kerning");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Kerning = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Kerning)] = Kerning;
        }
         
        return Kerning;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LineHeight property.
    /// </summary>
    public async Task<double?> GetLineHeight()
    {
        if (CoreJsModule is null)
        {
            return LineHeight;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return LineHeight;
        }

        // get the property value
        JsNullableDoubleWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableDoubleWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "lineHeight");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             LineHeight = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(LineHeight)] = LineHeight;
        }
         
        return LineHeight;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the LineWidth property.
    /// </summary>
    public async Task<Dimension?> GetLineWidth()
    {
        if (CoreJsModule is null)
        {
            return LineWidth;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return LineWidth;
        }

        // get the property value
        Dimension? result = await JsComponentReference!.InvokeAsync<Dimension?>("getProperty",
            CancellationTokenSource.Token, "lineWidth");
        if (result is not null)
        {
#pragma warning disable BL0005
             LineWidth = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(LineWidth)] = LineWidth;
        }
         
        return LineWidth;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Rotated property.
    /// </summary>
    public async Task<bool?> GetRotated()
    {
        if (CoreJsModule is null)
        {
            return Rotated;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Rotated;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "rotated");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Rotated = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Rotated)] = Rotated;
        }
         
        return Rotated;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Text property.
    /// </summary>
    public async Task<string?> GetText()
    {
        if (CoreJsModule is null)
        {
            return Text;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Text;
        }

        // get the property value
        string? result = await JsComponentReference!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, "text");
        if (result is not null)
        {
#pragma warning disable BL0005
             Text = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Text)] = Text;
        }
         
        return Text;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the VerticalAlignment property.
    /// </summary>
    public async Task<VerticalAlignment?> GetVerticalAlignment()
    {
        if (CoreJsModule is null)
        {
            return VerticalAlignment;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return VerticalAlignment;
        }

        // get the property value
        JsNullableEnumWrapper<VerticalAlignment>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<VerticalAlignment>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "verticalAlignment");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             VerticalAlignment = (VerticalAlignment)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(VerticalAlignment)] = VerticalAlignment;
        }
         
        return VerticalAlignment;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Xoffset property.
    /// </summary>
    public async Task<Dimension?> GetXoffset()
    {
        if (CoreJsModule is null)
        {
            return Xoffset;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Xoffset;
        }

        // get the property value
        Dimension? result = await JsComponentReference!.InvokeAsync<Dimension?>("getProperty",
            CancellationTokenSource.Token, "xoffset");
        if (result is not null)
        {
#pragma warning disable BL0005
             Xoffset = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Xoffset)] = Xoffset;
        }
         
        return Xoffset;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Yoffset property.
    /// </summary>
    public async Task<Dimension?> GetYoffset()
    {
        if (CoreJsModule is null)
        {
            return Yoffset;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Yoffset;
        }

        // get the property value
        Dimension? result = await JsComponentReference!.InvokeAsync<Dimension?>("getProperty",
            CancellationTokenSource.Token, "yoffset");
        if (result is not null)
        {
#pragma warning disable BL0005
             Yoffset = result;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Yoffset)] = Yoffset;
        }
         
        return Yoffset;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Angle property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetAngle(double? value)
    {
#pragma warning disable BL0005
        Angle = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Angle)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "angle", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the BackgroundColor property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBackgroundColor(MapColor? value)
    {
#pragma warning disable BL0005
        BackgroundColor = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(BackgroundColor)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "backgroundColor", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the BorderLineColor property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBorderLineColor(MapColor? value)
    {
#pragma warning disable BL0005
        BorderLineColor = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(BorderLineColor)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "borderLineColor", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the BorderLineSize property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBorderLineSize(double? value)
    {
#pragma warning disable BL0005
        BorderLineSize = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(BorderLineSize)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "borderLineSize", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Font property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetFont(MapFont? value)
    {
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        Font = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Font)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "font", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HaloColor property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHaloColor(MapColor? value)
    {
#pragma warning disable BL0005
        HaloColor = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HaloColor)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "haloColor", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HaloSize property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHaloSize(Dimension? value)
    {
#pragma warning disable BL0005
        HaloSize = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HaloSize)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "haloSize", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the HorizontalAlignment property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHorizontalAlignment(HorizontalAlignment? value)
    {
#pragma warning disable BL0005
        HorizontalAlignment = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(HorizontalAlignment)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "horizontalAlignment", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Kerning property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetKerning(bool? value)
    {
#pragma warning disable BL0005
        Kerning = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Kerning)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "kerning", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LineHeight property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLineHeight(double? value)
    {
#pragma warning disable BL0005
        LineHeight = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LineHeight)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "lineHeight", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the LineWidth property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetLineWidth(Dimension? value)
    {
#pragma warning disable BL0005
        LineWidth = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(LineWidth)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "lineWidth", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Rotated property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetRotated(bool? value)
    {
#pragma warning disable BL0005
        Rotated = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Rotated)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "rotated", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Text property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetText(string? value)
    {
#pragma warning disable BL0005
        Text = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Text)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "text", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the VerticalAlignment property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetVerticalAlignment(VerticalAlignment? value)
    {
#pragma warning disable BL0005
        VerticalAlignment = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(VerticalAlignment)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "verticalAlignment", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Xoffset property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetXoffset(Dimension? value)
    {
#pragma warning disable BL0005
        Xoffset = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Xoffset)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "xoffset", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Yoffset property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetYoffset(Dimension? value)
    {
#pragma warning disable BL0005
        Yoffset = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Yoffset)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "yoffset", value);
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case MapFont font:
                if (font != Font)
                {
                    Font = font;
                    
                    ModifiedParameters[nameof(Font)] = Font;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case MapFont _:
                Font = null;
                
                ModifiedParameters[nameof(Font)] = Font;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        Font?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
