// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    The visible elements that are displayed within the widget.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Swipe.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class SwipeVisibleElements : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public SwipeVisibleElements()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="divider">
    ///     Indicates whether the divider between the leading and trailing layers is visible.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Swipe.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="handle">
    ///     Indicates whether the handle from which you drag the widget is visible.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Swipe.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public SwipeVisibleElements(
        bool? divider = null,
        bool? handle = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Divider = divider;
        Handle = handle;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Indicates whether the divider between the leading and trailing layers is visible.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Swipe.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Divider { get; set; }
    
    /// <summary>
    ///     Indicates whether the handle from which you drag the widget is visible.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Swipe.html#VisibleElements">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? Handle { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Divider property.
    /// </summary>
    public async Task<bool?> GetDivider()
    {
        if (CoreJsModule is null)
        {
            return Divider;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Divider;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "divider");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Divider = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Divider)] = Divider;
        }
         
        return Divider;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Handle property.
    /// </summary>
    public async Task<bool?> GetHandle()
    {
        if (CoreJsModule is null)
        {
            return Handle;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Handle;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "handle");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Handle = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Handle)] = Handle;
        }
         
        return Handle;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Divider property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDivider(bool? value)
    {
#pragma warning disable BL0005
        Divider = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Divider)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "divider", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Handle property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetHandle(bool? value)
    {
#pragma warning disable BL0005
        Handle = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Handle)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "handle", value);
    }
    
#endregion

}
