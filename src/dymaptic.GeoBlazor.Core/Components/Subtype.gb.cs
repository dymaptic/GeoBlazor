// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Components;


/// <summary>
///    Subtypes categorize a subset of features in a layer that share the same attributes.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Subtype.html">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class Subtype : MapComponent
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public Subtype()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="code">
    ///     The subtype unique identifier number.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Subtype.html#code">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="defaultValues">
    ///     Name-value pairs of fields and their default field values associated with the subtype.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Subtype.html#defaultValues">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="domains">
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Domain.html">Domains</a> associated with the subtype.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Subtype.html#domains">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="name">
    ///     The subtype name.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Subtype.html#name">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public Subtype(
        double? code = null,
        string? defaultValues = null,
        IReadOnlyList<ISubtypeDomains>? domains = null,
        string? name = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Code = code;
        DefaultValues = defaultValues;
        Domains = domains;
        Name = name;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     The subtype unique identifier number.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Subtype.html#code">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public double? Code { get; set; }
    
    /// <summary>
    ///     Name-value pairs of fields and their default field values associated with the subtype.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Subtype.html#defaultValues">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? DefaultValues { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Domain.html">Domains</a> associated with the subtype.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Subtype.html#domains">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public IReadOnlyList<ISubtypeDomains>? Domains { get; set; }
    
    /// <summary>
    ///     The subtype name.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-Subtype.html#name">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public string? Name { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the Code property.
    /// </summary>
    public async Task<double?> GetCode()
    {
        if (CoreJsModule is null)
        {
            return Code;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Code;
        }

        // get the property value
#pragma warning disable BL0005
        Code = await CoreJsModule!.InvokeAsync<double>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "code");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Code)] = Code;
        return Code;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the DefaultValues property.
    /// </summary>
    public async Task<string?> GetDefaultValues()
    {
        if (CoreJsModule is null)
        {
            return DefaultValues;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return DefaultValues;
        }

        // get the property value
#pragma warning disable BL0005
        DefaultValues = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "defaultValues");
#pragma warning restore BL0005
         ModifiedParameters[nameof(DefaultValues)] = DefaultValues;
        return DefaultValues;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Domains property.
    /// </summary>
    public async Task<IReadOnlyList<ISubtypeDomains>?> GetDomains()
    {
        if (CoreJsModule is null)
        {
            return Domains;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Domains;
        }

        // get the property value
#pragma warning disable BL0005
        Domains = await CoreJsModule!.InvokeAsync<IReadOnlyList<ISubtypeDomains>?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "domains");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Domains)] = Domains;
        return Domains;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Name property.
    /// </summary>
    public async Task<string?> GetName()
    {
        if (CoreJsModule is null)
        {
            return Name;
        }
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
            "getJsComponent", CancellationTokenSource.Token, Id);
        if (JsComponentReference is null)
        {
            return Name;
        }

        // get the property value
#pragma warning disable BL0005
        Name = await CoreJsModule!.InvokeAsync<string?>("getProperty",
            CancellationTokenSource.Token, JsComponentReference, "name");
#pragma warning restore BL0005
         ModifiedParameters[nameof(Name)] = Name;
        return Name;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the Code property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetCode(double value)
    {
#pragma warning disable BL0005
        Code = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Code)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "code", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the DefaultValues property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDefaultValues(string value)
    {
#pragma warning disable BL0005
        DefaultValues = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(DefaultValues)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "defaultValues", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Domains property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetDomains(IReadOnlyList<ISubtypeDomains> value)
    {
#pragma warning disable BL0005
        Domains = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Domains)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "domains", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Name property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetName(string value)
    {
#pragma warning disable BL0005
        Name = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Name)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference>("getJsComponent",
            CancellationTokenSource.Token, Id);
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "name", value);
    }
    
#endregion




}
