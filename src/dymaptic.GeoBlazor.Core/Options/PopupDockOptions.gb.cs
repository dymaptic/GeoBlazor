// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Options;


/// <summary>
///    Docking the popup allows for a better user experience, particularly when opening popups in apps on mobile devices.
///    <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#dockOptions">ArcGIS Maps SDK for JavaScript</a>
/// </summary>
public partial class PopupDockOptions
{

    /// <summary>
    ///     Parameterless constructor for use as a Razor Component.
    /// </summary>
    [ActivatorUtilitiesConstructor]
    public PopupDockOptions()
    {
    }

    /// <summary>
    ///     Constructor for use in C# code. Use named parameters (e.g., item1: value1, item2: value2) to set properties in any order.
    /// </summary>
    /// <param name="position">
    ///     The position in the view at which to dock the popup.
    ///     default auto
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#dockOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="buttonEnabled">
    ///     If `true`, displays the dock button.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#dockOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="breakPoint">
    ///     Defines the dimensions of the View at which to dock the popup. Set to false to disable docking at a breakpoint.
    /// </param>
    /// <param name="boolBreakpoint">
    ///     Defines the dimensions of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html">View</a> at which to dock the popup.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#dockOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    /// <param name="popupDockOptionsBreakpoint">
    ///     Defines the dimensions of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html">View</a> at which to dock the popup.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#dockOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </param>
    public PopupDockOptions(
        PopupDockPosition? position = null,
        bool? buttonEnabled = null,
        BreakPoint? breakPoint = null,
        bool? boolBreakpoint = null,
        PopupDockOptionsBreakpoint? popupDockOptionsBreakpoint = null)
    {
        AllowRender = false;
#pragma warning disable BL0005
        Position = position;
        ButtonEnabled = buttonEnabled;
        if (breakPoint is not null)
        {
            BreakPoint = breakPoint;
        }
        BoolBreakpoint = boolBreakpoint;
        PopupDockOptionsBreakpoint = popupDockOptionsBreakpoint;
#pragma warning restore BL0005    
    }
    
    
#region Public Properties / Blazor Parameters

    /// <summary>
    ///     Defines the dimensions of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html">View</a> at which to dock the popup.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#dockOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public bool? BoolBreakpoint { get; set; }
    
    /// <summary>
    ///     Defines the dimensions of the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html">View</a> at which to dock the popup.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-widgets-Popup.html#dockOptions">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    [ArcGISProperty]
    [Parameter]
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public PopupDockOptionsBreakpoint? PopupDockOptionsBreakpoint { get; set; }
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the BoolBreakpoint property.
    /// </summary>
    public async Task<bool?> GetBoolBreakpoint()
    {
        if (CoreJsModule is null)
        {
            return BoolBreakpoint;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return BoolBreakpoint;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "boolBreakpoint");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             BoolBreakpoint = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(BoolBreakpoint)] = BoolBreakpoint;
        }
         
        return BoolBreakpoint;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the ButtonEnabled property.
    /// </summary>
    public async Task<bool?> GetButtonEnabled()
    {
        if (CoreJsModule is null)
        {
            return ButtonEnabled;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return ButtonEnabled;
        }

        // get the property value
        JsNullableBoolWrapper? result = await CoreJsModule!.InvokeAsync<JsNullableBoolWrapper?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "buttonEnabled");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             ButtonEnabled = result.Value.Value;
#pragma warning restore BL0005
             ModifiedParameters[nameof(ButtonEnabled)] = ButtonEnabled;
        }
         
        return ButtonEnabled;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the PopupDockOptionsBreakpoint property.
    /// </summary>
    public async Task<PopupDockOptionsBreakpoint?> GetPopupDockOptionsBreakpoint()
    {
        if (CoreJsModule is null)
        {
            return PopupDockOptionsBreakpoint;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return PopupDockOptionsBreakpoint;
        }

        PopupDockOptionsBreakpoint? result = await JsComponentReference.InvokeAsync<PopupDockOptionsBreakpoint?>(
            "getPopupDockOptionsBreakpoint", CancellationTokenSource.Token);
        
        if (result is not null)
        {
#pragma warning disable BL0005
            PopupDockOptionsBreakpoint = result;
#pragma warning restore BL0005
            ModifiedParameters[nameof(PopupDockOptionsBreakpoint)] = PopupDockOptionsBreakpoint;
        }
        
        return PopupDockOptionsBreakpoint;
    }
    
    /// <summary>
    ///     Asynchronously retrieve the current value of the Position property.
    /// </summary>
    public async Task<PopupDockPosition?> GetPosition()
    {
        if (CoreJsModule is null)
        {
            return Position;
        }
        
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
        
        if (JsComponentReference is null)
        {
            return Position;
        }

        // get the property value
        JsNullableEnumWrapper<PopupDockPosition>? result = await CoreJsModule!.InvokeAsync<JsNullableEnumWrapper<PopupDockPosition>?>("getNullableValueTypedProperty",
            CancellationTokenSource.Token, JsComponentReference, "position");
        if (result is { Value: not null })
        {
#pragma warning disable BL0005
             Position = (PopupDockPosition)result.Value.Value!;
#pragma warning restore BL0005
             ModifiedParameters[nameof(Position)] = Position;
        }
         
        return Position;
    }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the BoolBreakpoint property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetBoolBreakpoint(bool? value)
    {
#pragma warning disable BL0005
        BoolBreakpoint = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(BoolBreakpoint)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "boolBreakpoint", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the ButtonEnabled property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetButtonEnabled(bool? value)
    {
#pragma warning disable BL0005
        ButtonEnabled = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(ButtonEnabled)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "buttonEnabled", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the PopupDockOptionsBreakpoint property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPopupDockOptionsBreakpoint(PopupDockOptionsBreakpoint? value)
    {
        if (PopupDockOptionsBreakpoint is not null)
        {
            await PopupDockOptionsBreakpoint.DisposeAsync();
        }
        
        if (value is not null)
        {
            value.CoreJsModule  = CoreJsModule;
            value.Parent = this;
            value.Layer = Layer;
            value.View = View;
        } 
        
#pragma warning disable BL0005
        PopupDockOptionsBreakpoint = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(PopupDockOptionsBreakpoint)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "popupDockOptionsBreakpoint", value);
    }
    
    /// <summary>
    ///    Asynchronously set the value of the Position property after render.
    /// </summary>
    /// <param name="value">
    ///     The value to set.
    /// </param>
    public async Task SetPosition(PopupDockPosition? value)
    {
#pragma warning disable BL0005
        Position = value;
#pragma warning restore BL0005
        ModifiedParameters[nameof(Position)] = value;
        
        if (CoreJsModule is null)
        {
            return;
        }
    
        try 
        {
            JsComponentReference ??= await CoreJsModule.InvokeAsync<IJSObjectReference?>(
                "getJsComponent", CancellationTokenSource.Token, Id);
        }
        catch (JSException)
        {
            // this is expected if the component is not yet built
        }
    
        if (JsComponentReference is null)
        {
            return;
        }
        
        await CoreJsModule.InvokeVoidAsync("setProperty", CancellationTokenSource.Token,
            JsComponentReference, "position", value);
    }
    
#endregion


    /// <inheritdoc />
    protected override async ValueTask<bool> RegisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case PopupDockOptionsBreakpoint popupDockOptionsBreakpoint:
                if (popupDockOptionsBreakpoint != PopupDockOptionsBreakpoint)
                {
                    PopupDockOptionsBreakpoint = popupDockOptionsBreakpoint;
                    
                    ModifiedParameters[nameof(PopupDockOptionsBreakpoint)] = PopupDockOptionsBreakpoint;
                }
                
                return true;
            default:
                return await base.RegisterGeneratedChildComponent(child);
        }
    }

    /// <inheritdoc />
    protected override async ValueTask<bool> UnregisterGeneratedChildComponent(MapComponent child)
    {
        switch (child)
        {
            case PopupDockOptionsBreakpoint _:
                PopupDockOptionsBreakpoint = null;
                
                ModifiedParameters[nameof(PopupDockOptionsBreakpoint)] = PopupDockOptionsBreakpoint;
                return true;
            default:
                return await base.UnregisterGeneratedChildComponent(child);
        }
    }
    
    /// <inheritdoc />
    public override void ValidateRequiredGeneratedChildren()
    {
    
        PopupDockOptionsBreakpoint?.ValidateRequiredGeneratedChildren();
        base.ValidateRequiredGeneratedChildren();
    }
      
}
