import { buildDotNetClustersScheme } from './clustersScheme';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import clustersScheme = __esri.clustersScheme;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsClustersSchemeGenerated(dotNetObject: any): Promise<any> {
    let jsclustersScheme: any = {}
    if (hasValue(dotNetObject.labelingInfo)) {
        let { buildJsLabel } = await import('./label');
        jsclustersScheme.labelingInfo = await Promise.all(dotNetObject.labelingInfo.map(async i => await buildJsLabel(i))) as any;
    }

    if (hasValue(dotNetObject.clusterMinSize)) {
        jsclustersScheme.clusterMinSize = dotNetObject.clusterMinSize;
    }
    if (hasValue(dotNetObject.fieldName)) {
        jsclustersScheme.fieldName = dotNetObject.fieldName;
    }
    if (hasValue(dotNetObject.name)) {
        jsclustersScheme.name = dotNetObject.name;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsclustersScheme);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsclustersScheme;
    
    let dnInstantiatedObject = await buildDotNetClustersScheme(jsclustersScheme);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ClustersScheme', e);
    }
    
    return jsclustersScheme;
}
export async function buildDotNetClustersSchemeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetClustersScheme: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.labelingInfo)) {
            let { buildDotNetLabel } = await import('./label');
            dotNetClustersScheme.labelingInfo = await Promise.all(jsObject.labelingInfo.map(async i => await buildDotNetLabel(i)));
        }
        if (hasValue(jsObject.clusterMinSize)) {
            dotNetClustersScheme.clusterMinSize = jsObject.clusterMinSize;
        }
        if (hasValue(jsObject.fieldName)) {
            dotNetClustersScheme.fieldName = jsObject.fieldName;
        }
        if (hasValue(jsObject.name)) {
            dotNetClustersScheme.name = jsObject.name;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetClustersScheme.id = k;
                break;
            }
        }
    }

    return dotNetClustersScheme;
}

