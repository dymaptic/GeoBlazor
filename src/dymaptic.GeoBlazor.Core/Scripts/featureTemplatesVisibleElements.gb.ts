// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import FeatureTemplatesVisibleElements = __esri.FeatureTemplatesVisibleElements;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FeatureTemplatesVisibleElementsGenerated implements IPropertyWrapper {
    public component: FeatureTemplatesVisibleElements;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: FeatureTemplatesVisibleElements) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsFeatureTemplatesVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureTemplatesVisibleElements: any = {}

    if (hasValue(dotNetObject.filter)) {
        jsFeatureTemplatesVisibleElements.filter = dotNetObject.filter;
    }
    let { default: FeatureTemplatesVisibleElementsWrapper } = await import('./featureTemplatesVisibleElements');
    let featureTemplatesVisibleElementsWrapper = new FeatureTemplatesVisibleElementsWrapper(jsFeatureTemplatesVisibleElements);
    featureTemplatesVisibleElementsWrapper.geoBlazorId = dotNetObject.id;
    featureTemplatesVisibleElementsWrapper.viewId = viewId;
    featureTemplatesVisibleElementsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(featureTemplatesVisibleElementsWrapper);
    jsObjectRefs[dotNetObject.id] = featureTemplatesVisibleElementsWrapper;

    arcGisObjectRefs[dotNetObject.id] = jsFeatureTemplatesVisibleElements;
    let { buildDotNetFeatureTemplatesVisibleElements } = await import('./featureTemplatesVisibleElements');
    let dnInstantiatedObject = await buildDotNetFeatureTemplatesVisibleElements(jsFeatureTemplatesVisibleElements, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureTemplatesVisibleElements', e);
    }
    
    return jsFeatureTemplatesVisibleElements;
}

export async function buildDotNetFeatureTemplatesVisibleElementsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureTemplatesVisibleElements: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.filter)) {
            dotNetFeatureTemplatesVisibleElements.filter = jsObject.filter;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFeatureTemplatesVisibleElements.id = k;
                break;
            }
        }
    }

    return dotNetFeatureTemplatesVisibleElements;
}

