// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import ChartMediaInfoValueSeries from '@arcgis/core/popup/content/support/ChartMediaInfoValueSeries';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ChartMediaInfoValueSeriesGenerated implements IPropertyWrapper {
    public component: ChartMediaInfoValueSeries;
    public readonly geoBlazorId: string = '';

    constructor(component: ChartMediaInfoValueSeries) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getColor(): Promise<any> {
        let { buildDotNetMapColor } = await import('./mapColor');
        return await buildDotNetMapColor(this.component.color);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}
export async function buildJsChartMediaInfoValueSeriesGenerated(dotNetObject: any): Promise<any> {
    let { default: ChartMediaInfoValueSeries } = await import('@arcgis/core/popup/content/support/ChartMediaInfoValueSeries');
    let jsChartMediaInfoValueSeries = new ChartMediaInfoValueSeries();
    let { default: ChartMediaInfoValueSeriesWrapper } = await import('./chartMediaInfoValueSeries');
    let chartMediaInfoValueSeriesWrapper = new ChartMediaInfoValueSeriesWrapper(jsChartMediaInfoValueSeries);
    jsChartMediaInfoValueSeries.id = dotNetObject.id;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(chartMediaInfoValueSeriesWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = chartMediaInfoValueSeriesWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsChartMediaInfoValueSeries;
    
    return jsChartMediaInfoValueSeries;
}

export async function buildDotNetChartMediaInfoValueSeriesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetChartMediaInfoValueSeries: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.color)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetChartMediaInfoValueSeries.color = await buildDotNetMapColor(jsObject.color);
        }
        dotNetChartMediaInfoValueSeries.fieldName = jsObject.fieldName;
        dotNetChartMediaInfoValueSeries.tooltip = jsObject.tooltip;
        dotNetChartMediaInfoValueSeries.value = jsObject.value;
    return dotNetChartMediaInfoValueSeries;
}

