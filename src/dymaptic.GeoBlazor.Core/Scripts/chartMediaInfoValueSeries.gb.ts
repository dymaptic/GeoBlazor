// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import ChartMediaInfoValueSeries from '@arcgis/core/popup/content/support/ChartMediaInfoValueSeries';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ChartMediaInfoValueSeriesGenerated implements IPropertyWrapper {
    public component: ChartMediaInfoValueSeries;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ChartMediaInfoValueSeries) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getColor(): Promise<any> {
        if (!hasValue(this.component.color)) {
            return null;
        }
        
        let { buildDotNetMapColor } = await import('./mapColor');
        return buildDotNetMapColor(this.component.color);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsChartMediaInfoValueSeriesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsChartMediaInfoValueSeries = new ChartMediaInfoValueSeries();

    let { default: ChartMediaInfoValueSeriesWrapper } = await import('./chartMediaInfoValueSeries');
    let chartMediaInfoValueSeriesWrapper = new ChartMediaInfoValueSeriesWrapper(jsChartMediaInfoValueSeries);
    chartMediaInfoValueSeriesWrapper.geoBlazorId = dotNetObject.id;
    chartMediaInfoValueSeriesWrapper.viewId = viewId;
    chartMediaInfoValueSeriesWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(chartMediaInfoValueSeriesWrapper);
    jsObjectRefs[dotNetObject.id] = chartMediaInfoValueSeriesWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsChartMediaInfoValueSeries;
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ChartMediaInfoValueSeries', e);
    }
    
    return jsChartMediaInfoValueSeries;
}

export async function buildDotNetChartMediaInfoValueSeriesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetChartMediaInfoValueSeries: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.color)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetChartMediaInfoValueSeries.color = buildDotNetMapColor(jsObject.color);
        }
        if (hasValue(jsObject.fieldName)) {
            dotNetChartMediaInfoValueSeries.fieldName = jsObject.fieldName;
        }
        if (hasValue(jsObject.tooltip)) {
            dotNetChartMediaInfoValueSeries.tooltip = jsObject.tooltip;
        }
        if (hasValue(jsObject.value)) {
            dotNetChartMediaInfoValueSeries.value = jsObject.value;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetChartMediaInfoValueSeries.id = k;
                break;
            }
        }
    }

    return dotNetChartMediaInfoValueSeries;
}

