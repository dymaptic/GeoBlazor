// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';

export async function buildJsGeoJSONLayerElevationInfoFeatureExpressionInfoGenerated(dotNetObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsGeoJSONLayerElevationInfoFeatureExpressionInfo: any = {};

    if (hasValue(dotNetObject.expression)) {
        jsGeoJSONLayerElevationInfoFeatureExpressionInfo.expression = dotNetObject.expression;
    }
    if (hasValue(dotNetObject.title)) {
        jsGeoJSONLayerElevationInfoFeatureExpressionInfo.title = dotNetObject.title;
    }
    
    jsObjectRefs[dotNetObject.id] = jsGeoJSONLayerElevationInfoFeatureExpressionInfo;
    arcGisObjectRefs[dotNetObject.id] = jsGeoJSONLayerElevationInfoFeatureExpressionInfo;
    
    return jsGeoJSONLayerElevationInfoFeatureExpressionInfo;
}


export async function buildDotNetGeoJSONLayerElevationInfoFeatureExpressionInfoGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGeoJSONLayerElevationInfoFeatureExpressionInfo: any = {};
    
    if (hasValue(jsObject.expression)) {
        dotNetGeoJSONLayerElevationInfoFeatureExpressionInfo.expression = jsObject.expression;
    }
    
    if (hasValue(jsObject.title)) {
        dotNetGeoJSONLayerElevationInfoFeatureExpressionInfo.title = jsObject.title;
    }
    

    return dotNetGeoJSONLayerElevationInfoFeatureExpressionInfo;
}

