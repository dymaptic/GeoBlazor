import { buildDotNetServiceContentsLayers } from './serviceContentsLayers';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import ServiceContentsLayers = __esri.ServiceContentsLayers;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsServiceContentsLayersGenerated(dotNetObject: any): Promise<any> {
    let jsServiceContentsLayers: any = {}

    if (hasValue(dotNetObject.capabilities)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedCapabilities } = dotNetObject.capabilities;
        jsServiceContentsLayers.capabilities = sanitizedCapabilities;
    }
    if (hasValue(dotNetObject.layerInfos)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedLayerInfos } = dotNetObject.layerInfos;
        jsServiceContentsLayers.layerInfos = sanitizedLayerInfos;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsServiceContentsLayers);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsServiceContentsLayers;
    
    let dnInstantiatedObject = await buildDotNetServiceContentsLayers(jsServiceContentsLayers);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ServiceContentsLayers', e);
    }
    
    return jsServiceContentsLayers;
}
export async function buildDotNetServiceContentsLayersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetServiceContentsLayers: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.capabilities)) {
            dotNetServiceContentsLayers.capabilities = jsObject.capabilities;
        }
        if (hasValue(jsObject.layerInfos)) {
            dotNetServiceContentsLayers.layerInfos = jsObject.layerInfos;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetServiceContentsLayers.id = k;
                break;
            }
        }
    }

    return dotNetServiceContentsLayers;
}

