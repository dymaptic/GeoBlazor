// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetSearchViewModelSearchResponse } from './searchViewModelSearchResponse';

export async function buildJsSearchViewModelSearchResponseGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSearchViewModelSearchResponse: any = {};
    if (hasValue(dotNetObject.results)) {
        let { buildJsSearchViewModelSearchResponseResults } = await import('./searchViewModelSearchResponseResults');
        jsSearchViewModelSearchResponse.results = await Promise.all(dotNetObject.results.map(async i => await buildJsSearchViewModelSearchResponseResults(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.activeSourceIndex)) {
        jsSearchViewModelSearchResponse.activeSourceIndex = dotNetObject.activeSourceIndex;
    }
    if (hasValue(dotNetObject.errors)) {
        jsSearchViewModelSearchResponse.errors = dotNetObject.errors;
    }
    if (hasValue(dotNetObject.numResults)) {
        jsSearchViewModelSearchResponse.numResults = dotNetObject.numResults;
    }
    if (hasValue(dotNetObject.searchTerm)) {
        jsSearchViewModelSearchResponse.searchTerm = dotNetObject.searchTerm;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSearchViewModelSearchResponse);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSearchViewModelSearchResponse;
    
    return jsSearchViewModelSearchResponse;
}


export async function buildDotNetSearchViewModelSearchResponseGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsSearchViewModelSearchResponse } = await import('./searchViewModelSearchResponse');
        jsComponentRef = await buildJsSearchViewModelSearchResponse(jsObject, layerId, viewId);
    }
    
    let dotNetSearchViewModelSearchResponse: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.results)) {
        let { buildDotNetSearchViewModelSearchResponseResults } = await import('./searchViewModelSearchResponseResults');
        dotNetSearchViewModelSearchResponse.results = await Promise.all(jsObject.results.map(async i => await buildDotNetSearchViewModelSearchResponseResults(i, layerId, viewId)));
    }
    if (hasValue(jsObject.activeSourceIndex)) {
        dotNetSearchViewModelSearchResponse.activeSourceIndex = jsObject.activeSourceIndex;
    }
    if (hasValue(jsObject.errors)) {
        dotNetSearchViewModelSearchResponse.errors = jsObject.errors;
    }
    if (hasValue(jsObject.numResults)) {
        dotNetSearchViewModelSearchResponse.numResults = jsObject.numResults;
    }
    if (hasValue(jsObject.searchTerm)) {
        dotNetSearchViewModelSearchResponse.searchTerm = jsObject.searchTerm;
    }

    return dotNetSearchViewModelSearchResponse;
}

