// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSearchResult } from './searchResult';

export async function buildJsSearchResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSearchResult: any = {};

    if (hasValue(dotNetObject.extent)) {
        const { id, dotNetComponentReference, ...sanitizedExtent } = dotNetObject.extent;
        jsSearchResult.extent = sanitizedExtent;
    }
    if (hasValue(dotNetObject.feature)) {
        const { id, dotNetComponentReference, ...sanitizedFeature } = dotNetObject.feature;
        jsSearchResult.feature = sanitizedFeature;
    }
    if (hasValue(dotNetObject.name)) {
        jsSearchResult.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.target)) {
        const { id, dotNetComponentReference, ...sanitizedTarget } = dotNetObject.target;
        jsSearchResult.target = sanitizedTarget;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSearchResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSearchResult;
    
    let { buildDotNetSearchResult } = await import('./searchResult');
    let dnInstantiatedObject = await buildDotNetSearchResult(jsSearchResult);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type SearchResult detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SearchResult', e);
    }
    
    return jsSearchResult;
}


export async function buildDotNetSearchResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchResult: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.extent)) {
        dotNetSearchResult.extent = jsObject.extent;
    }
    if (hasValue(jsObject.feature)) {
        dotNetSearchResult.feature = jsObject.feature;
    }
    if (hasValue(jsObject.name)) {
        dotNetSearchResult.name = jsObject.name;
    }
    if (hasValue(jsObject.target)) {
        dotNetSearchResult.target = jsObject.target;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSearchResult.id = k;
                break;
            }
        }
    }

    return dotNetSearchResult;
}

