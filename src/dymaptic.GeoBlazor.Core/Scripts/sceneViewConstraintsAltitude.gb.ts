// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetSceneViewConstraintsAltitude } from './sceneViewConstraintsAltitude';

export async function buildJsSceneViewConstraintsAltitudeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsSceneViewConstraintsAltitude: any = {};

    if (hasValue(dotNetObject.max)) {
        jsSceneViewConstraintsAltitude.max = dotNetObject.max;
    }
    if (hasValue(dotNetObject.min)) {
        jsSceneViewConstraintsAltitude.min = dotNetObject.min;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSceneViewConstraintsAltitude);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSceneViewConstraintsAltitude;
    
    return jsSceneViewConstraintsAltitude;
}


export async function buildDotNetSceneViewConstraintsAltitudeGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSceneViewConstraintsAltitude: any = {};
    
    if (hasValue(jsObject.max)) {
        dotNetSceneViewConstraintsAltitude.max = jsObject.max;
    }
    
    if (hasValue(jsObject.min)) {
        dotNetSceneViewConstraintsAltitude.min = jsObject.min;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSceneViewConstraintsAltitude.id = geoBlazorId;
    }

    return dotNetSceneViewConstraintsAltitude;
}

