// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetConfigWorkers } from './configWorkers';

export async function buildJsConfigWorkersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsconfigWorkers: any = {};
    if (hasValue(dotNetObject.loaderConfig)) {
        let { buildJsConfigWorkersLoaderConfig } = await import('./configWorkersLoaderConfig');
        jsconfigWorkers.loaderConfig = await buildJsConfigWorkersLoaderConfig(dotNetObject.loaderConfig, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.loaderUrl)) {
        jsconfigWorkers.loaderUrl = dotNetObject.loaderUrl;
    }
    if (hasValue(dotNetObject.workerPath)) {
        jsconfigWorkers.workerPath = dotNetObject.workerPath;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsconfigWorkers);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsconfigWorkers;
    
    return jsconfigWorkers;
}


export async function buildDotNetConfigWorkersGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetConfigWorkers: any = {};
    
    if (hasValue(jsObject.loaderConfig)) {
        let { buildDotNetConfigWorkersLoaderConfig } = await import('./configWorkersLoaderConfig');
        dotNetConfigWorkers.loaderConfig = await buildDotNetConfigWorkersLoaderConfig(jsObject.loaderConfig, layerId, viewId);
    }
    
    if (hasValue(jsObject.loaderUrl)) {
        dotNetConfigWorkers.loaderUrl = jsObject.loaderUrl;
    }
    
    if (hasValue(jsObject.workerPath)) {
        dotNetConfigWorkers.workerPath = jsObject.workerPath;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetConfigWorkers.id = geoBlazorId;
    }

    return dotNetConfigWorkers;
}

