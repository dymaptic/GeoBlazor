// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetConfigWorkers } from './configWorkers';

export async function buildJsConfigWorkersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsconfigWorkers: any = {};
    if (hasValue(dotNetObject.loaderConfig)) {
        let { buildJsConfigWorkersLoaderConfig } = await import('./configWorkersLoaderConfig');
        jsconfigWorkers.loaderConfig = await buildJsConfigWorkersLoaderConfig(dotNetObject.loaderConfig, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.loaderUrl)) {
        jsconfigWorkers.loaderUrl = dotNetObject.loaderUrl;
    }
    if (hasValue(dotNetObject.workerPath)) {
        jsconfigWorkers.workerPath = dotNetObject.workerPath;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsconfigWorkers);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsconfigWorkers;
    
    let { buildDotNetConfigWorkers } = await import('./configWorkers');
    let dnInstantiatedObject = await buildDotNetConfigWorkers(jsconfigWorkers);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type ConfigWorkers detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ConfigWorkers', e);
    }
    
    return jsconfigWorkers;
}


export async function buildDotNetConfigWorkersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetConfigWorkers: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.loaderConfig)) {
        let { buildDotNetConfigWorkersLoaderConfig } = await import('./configWorkersLoaderConfig');
        dotNetConfigWorkers.loaderConfig = await buildDotNetConfigWorkersLoaderConfig(jsObject.loaderConfig);
    }
    if (hasValue(jsObject.loaderUrl)) {
        dotNetConfigWorkers.loaderUrl = jsObject.loaderUrl;
    }
    if (hasValue(jsObject.workerPath)) {
        dotNetConfigWorkers.workerPath = jsObject.workerPath;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetConfigWorkers.id = geoBlazorId;
    }

    return dotNetConfigWorkers;
}

