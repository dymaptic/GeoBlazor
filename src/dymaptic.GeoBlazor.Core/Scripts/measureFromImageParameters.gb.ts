// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import MeasureFromImageParameters from '@arcgis/core/rest/support/MeasureFromImageParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetMeasureFromImageParameters } from './measureFromImageParameters';

export async function buildJsMeasureFromImageParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsGeometry } = await import('./geometry');
        properties.geometry = buildJsGeometry(dotNetObject.geometry) as any;
    }

    if (hasValue(dotNetObject.rasterId)) {
        properties.rasterId = dotNetObject.rasterId;
    }
    let jsMeasureFromImageParameters = new MeasureFromImageParameters(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsMeasureFromImageParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsMeasureFromImageParameters;
    
    return jsMeasureFromImageParameters;
}


export async function buildDotNetMeasureFromImageParametersGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMeasureFromImageParameters: any = {};
    
    if (hasValue(jsObject.geometry)) {
        let { buildDotNetGeometry } = await import('./geometry');
        dotNetMeasureFromImageParameters.geometry = buildDotNetGeometry(jsObject.geometry);
    }
    
    if (hasValue(jsObject.rasterId)) {
        dotNetMeasureFromImageParameters.rasterId = jsObject.rasterId;
    }
    

    return dotNetMeasureFromImageParameters;
}

