// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCoverageDescriptionV110Domain } from './coverageDescriptionV110Domain';

export async function buildJsCoverageDescriptionV110DomainGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCoverageDescriptionV110Domain: any = {};
    if (hasValue(dotNetObject.spatialDomain)) {
        let { buildJsCoverageDescriptionV110DomainSpatialDomain } = await import('./coverageDescriptionV110DomainSpatialDomain');
        jsCoverageDescriptionV110Domain.spatialDomain = await buildJsCoverageDescriptionV110DomainSpatialDomain(dotNetObject.spatialDomain, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.temporalDomain)) {
        jsCoverageDescriptionV110Domain.temporalDomain = dotNetObject.temporalDomain;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCoverageDescriptionV110Domain);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCoverageDescriptionV110Domain;
    
    return jsCoverageDescriptionV110Domain;
}


export async function buildDotNetCoverageDescriptionV110DomainGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsCoverageDescriptionV110Domain } = await import('./coverageDescriptionV110Domain');
        jsComponentRef = await buildJsCoverageDescriptionV110Domain(jsObject, layerId, viewId);
    }
    
    let dotNetCoverageDescriptionV110Domain: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.spatialDomain)) {
        let { buildDotNetCoverageDescriptionV110DomainSpatialDomain } = await import('./coverageDescriptionV110DomainSpatialDomain');
        dotNetCoverageDescriptionV110Domain.spatialDomain = await buildDotNetCoverageDescriptionV110DomainSpatialDomain(jsObject.spatialDomain, layerId, viewId);
    }
    if (hasValue(jsObject.temporalDomain)) {
        dotNetCoverageDescriptionV110Domain.temporalDomain = jsObject.temporalDomain;
    }

    return dotNetCoverageDescriptionV110Domain;
}

