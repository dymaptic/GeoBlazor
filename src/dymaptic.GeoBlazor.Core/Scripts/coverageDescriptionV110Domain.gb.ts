// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetCoverageDescriptionV110Domain } from './coverageDescriptionV110Domain';

export async function buildJsCoverageDescriptionV110DomainGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCoverageDescriptionV110Domain: any = {};
    if (hasValue(dotNetObject.spatialDomain)) {
        let { buildJsCoverageDescriptionV110DomainSpatialDomain } = await import('./coverageDescriptionV110DomainSpatialDomain');
        jsCoverageDescriptionV110Domain.spatialDomain = await buildJsCoverageDescriptionV110DomainSpatialDomain(dotNetObject.spatialDomain, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.temporalDomain)) {
        jsCoverageDescriptionV110Domain.temporalDomain = dotNetObject.temporalDomain;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCoverageDescriptionV110Domain);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCoverageDescriptionV110Domain;
    
    let { buildDotNetCoverageDescriptionV110Domain } = await import('./coverageDescriptionV110Domain');
    let dnInstantiatedObject = await buildDotNetCoverageDescriptionV110Domain(jsCoverageDescriptionV110Domain);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type CoverageDescriptionV110Domain detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CoverageDescriptionV110Domain', e);
    }
    
    return jsCoverageDescriptionV110Domain;
}


export async function buildDotNetCoverageDescriptionV110DomainGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCoverageDescriptionV110Domain: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.spatialDomain)) {
        let { buildDotNetCoverageDescriptionV110DomainSpatialDomain } = await import('./coverageDescriptionV110DomainSpatialDomain');
        dotNetCoverageDescriptionV110Domain.spatialDomain = await buildDotNetCoverageDescriptionV110DomainSpatialDomain(jsObject.spatialDomain);
    }
    if (hasValue(jsObject.temporalDomain)) {
        dotNetCoverageDescriptionV110Domain.temporalDomain = jsObject.temporalDomain;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCoverageDescriptionV110Domain.id = k;
                break;
            }
        }
    }

    return dotNetCoverageDescriptionV110Domain;
}

