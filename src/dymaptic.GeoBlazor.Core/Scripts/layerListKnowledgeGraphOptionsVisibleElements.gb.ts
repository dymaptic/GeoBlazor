// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import LayerListKnowledgeGraphOptionsVisibleElements = __esri.LayerListKnowledgeGraphOptionsVisibleElements;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class LayerListKnowledgeGraphOptionsVisibleElementsGenerated implements IPropertyWrapper {
    public component: LayerListKnowledgeGraphOptionsVisibleElements;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: LayerListKnowledgeGraphOptionsVisibleElements) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsLayerListKnowledgeGraphOptionsVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsLayerListKnowledgeGraphOptionsVisibleElements: any = {}

    if (hasValue(dotNetObject.errors)) {
        jsLayerListKnowledgeGraphOptionsVisibleElements.errors = dotNetObject.errors;
    }
    if (hasValue(dotNetObject.filter)) {
        jsLayerListKnowledgeGraphOptionsVisibleElements.filter = dotNetObject.filter;
    }
    if (hasValue(dotNetObject.statusIndicators)) {
        jsLayerListKnowledgeGraphOptionsVisibleElements.statusIndicators = dotNetObject.statusIndicators;
    }
    let { default: LayerListKnowledgeGraphOptionsVisibleElementsWrapper } = await import('./layerListKnowledgeGraphOptionsVisibleElements');
    let layerListKnowledgeGraphOptionsVisibleElementsWrapper = new LayerListKnowledgeGraphOptionsVisibleElementsWrapper(jsLayerListKnowledgeGraphOptionsVisibleElements);
    layerListKnowledgeGraphOptionsVisibleElementsWrapper.geoBlazorId = dotNetObject.id;
    layerListKnowledgeGraphOptionsVisibleElementsWrapper.viewId = viewId;
    layerListKnowledgeGraphOptionsVisibleElementsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(layerListKnowledgeGraphOptionsVisibleElementsWrapper);
    jsObjectRefs[dotNetObject.id] = layerListKnowledgeGraphOptionsVisibleElementsWrapper;

    arcGisObjectRefs[dotNetObject.id] = jsLayerListKnowledgeGraphOptionsVisibleElements;
    let { buildDotNetLayerListKnowledgeGraphOptionsVisibleElements } = await import('./layerListKnowledgeGraphOptionsVisibleElements');
    let dnInstantiatedObject = await buildDotNetLayerListKnowledgeGraphOptionsVisibleElements(jsLayerListKnowledgeGraphOptionsVisibleElements, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LayerListKnowledgeGraphOptionsVisibleElements', e);
    }
    
    return jsLayerListKnowledgeGraphOptionsVisibleElements;
}

export async function buildDotNetLayerListKnowledgeGraphOptionsVisibleElementsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLayerListKnowledgeGraphOptionsVisibleElements: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.errors)) {
            dotNetLayerListKnowledgeGraphOptionsVisibleElements.errors = jsObject.errors;
        }
        if (hasValue(jsObject.filter)) {
            dotNetLayerListKnowledgeGraphOptionsVisibleElements.filter = jsObject.filter;
        }
        if (hasValue(jsObject.statusIndicators)) {
            dotNetLayerListKnowledgeGraphOptionsVisibleElements.statusIndicators = jsObject.statusIndicators;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLayerListKnowledgeGraphOptionsVisibleElements.id = k;
                break;
            }
        }
    }

    return dotNetLayerListKnowledgeGraphOptionsVisibleElements;
}

