// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetLayerListKnowledgeGraphOptionsVisibleElements } from './layerListKnowledgeGraphOptionsVisibleElements';

export async function buildJsLayerListKnowledgeGraphOptionsVisibleElementsGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsLayerListKnowledgeGraphOptionsVisibleElements: any = {};

    if (hasValue(dotNetObject.errors)) {
        jsLayerListKnowledgeGraphOptionsVisibleElements.errors = dotNetObject.errors;
    }
    if (hasValue(dotNetObject.filter)) {
        jsLayerListKnowledgeGraphOptionsVisibleElements.filter = dotNetObject.filter;
    }
    if (hasValue(dotNetObject.statusIndicators)) {
        jsLayerListKnowledgeGraphOptionsVisibleElements.statusIndicators = dotNetObject.statusIndicators;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsLayerListKnowledgeGraphOptionsVisibleElements);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLayerListKnowledgeGraphOptionsVisibleElements;
    
    return jsLayerListKnowledgeGraphOptionsVisibleElements;
}


export async function buildDotNetLayerListKnowledgeGraphOptionsVisibleElementsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLayerListKnowledgeGraphOptionsVisibleElements: any = {};
    
    if (hasValue(jsObject.errors)) {
        dotNetLayerListKnowledgeGraphOptionsVisibleElements.errors = jsObject.errors;
    }
    
    if (hasValue(jsObject.filter)) {
        dotNetLayerListKnowledgeGraphOptionsVisibleElements.filter = jsObject.filter;
    }
    
    if (hasValue(jsObject.statusIndicators)) {
        dotNetLayerListKnowledgeGraphOptionsVisibleElements.statusIndicators = jsObject.statusIndicators;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetLayerListKnowledgeGraphOptionsVisibleElements.id = geoBlazorId;
    }

    return dotNetLayerListKnowledgeGraphOptionsVisibleElements;
}

