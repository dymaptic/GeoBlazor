// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import DaylightViewModel from '@arcgis/core/widgets/Daylight/DaylightViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetDaylightViewModel } from './daylightViewModel';

export async function buildJsDaylightViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }

    if (hasValue(dotNetObject.currentSeason)) {
        properties.currentSeason = dotNetObject.currentSeason;
    }
    if (hasValue(dotNetObject.dayPlaying)) {
        properties.dayPlaying = dotNetObject.dayPlaying;
    }
    if (hasValue(dotNetObject.directShadowsEnabled)) {
        properties.directShadowsEnabled = dotNetObject.directShadowsEnabled;
    }
    if (hasValue(dotNetObject.localDate)) {
        properties.localDate = dotNetObject.localDate;
    }
    if (hasValue(dotNetObject.playSpeedMultiplier)) {
        properties.playSpeedMultiplier = dotNetObject.playSpeedMultiplier;
    }
    if (hasValue(dotNetObject.sunLightingEnabled)) {
        properties.sunLightingEnabled = dotNetObject.sunLightingEnabled;
    }
    if (hasValue(dotNetObject.timeSliderPosition)) {
        properties.timeSliderPosition = dotNetObject.timeSliderPosition;
    }
    if (hasValue(dotNetObject.utcOffset)) {
        properties.utcOffset = dotNetObject.utcOffset;
    }
    if (hasValue(dotNetObject.yearPlaying)) {
        properties.yearPlaying = dotNetObject.yearPlaying;
    }
    let jsDaylightViewModel = new DaylightViewModel(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsDaylightViewModel);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsDaylightViewModel;
    
    let { buildDotNetDaylightViewModel } = await import('./daylightViewModel');
    let dnInstantiatedObject = await buildDotNetDaylightViewModel(jsDaylightViewModel);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type DaylightViewModel detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DaylightViewModel', e);
    }
    
    return jsDaylightViewModel;
}


export async function buildDotNetDaylightViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDaylightViewModel: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.currentSeason)) {
        dotNetDaylightViewModel.currentSeason = jsObject.currentSeason;
    }
    if (hasValue(jsObject.dayPlaying)) {
        dotNetDaylightViewModel.dayPlaying = jsObject.dayPlaying;
    }
    if (hasValue(jsObject.directShadowsEnabled)) {
        dotNetDaylightViewModel.directShadowsEnabled = jsObject.directShadowsEnabled;
    }
    if (hasValue(jsObject.localDate)) {
        dotNetDaylightViewModel.localDate = jsObject.localDate;
    }
    if (hasValue(jsObject.playSpeedMultiplier)) {
        dotNetDaylightViewModel.playSpeedMultiplier = jsObject.playSpeedMultiplier;
    }
    if (hasValue(jsObject.sunLightingEnabled)) {
        dotNetDaylightViewModel.sunLightingEnabled = jsObject.sunLightingEnabled;
    }
    if (hasValue(jsObject.timeSliderPosition)) {
        dotNetDaylightViewModel.timeSliderPosition = jsObject.timeSliderPosition;
    }
    if (hasValue(jsObject.utcOffset)) {
        dotNetDaylightViewModel.utcOffset = jsObject.utcOffset;
    }
    if (hasValue(jsObject.yearPlaying)) {
        dotNetDaylightViewModel.yearPlaying = jsObject.yearPlaying;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetDaylightViewModel.id = geoBlazorId;
    }

    return dotNetDaylightViewModel;
}

