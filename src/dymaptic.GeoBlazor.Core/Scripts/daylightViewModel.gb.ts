// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import DaylightViewModel from '@arcgis/core/widgets/Daylight/DaylightViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetDaylightViewModel } from './daylightViewModel';

export async function buildJsDaylightViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }

    if (hasValue(dotNetObject.currentSeason)) {
        properties.currentSeason = dotNetObject.currentSeason;
    }
    if (hasValue(dotNetObject.dayPlaying)) {
        properties.dayPlaying = dotNetObject.dayPlaying;
    }
    if (hasValue(dotNetObject.directShadowsEnabled)) {
        properties.directShadowsEnabled = dotNetObject.directShadowsEnabled;
    }
    if (hasValue(dotNetObject.localDate)) {
        properties.localDate = dotNetObject.localDate;
    }
    if (hasValue(dotNetObject.playSpeedMultiplier)) {
        properties.playSpeedMultiplier = dotNetObject.playSpeedMultiplier;
    }
    if (hasValue(dotNetObject.sunLightingEnabled)) {
        properties.sunLightingEnabled = dotNetObject.sunLightingEnabled;
    }
    if (hasValue(dotNetObject.timeSliderPosition)) {
        properties.timeSliderPosition = dotNetObject.timeSliderPosition;
    }
    if (hasValue(dotNetObject.utcOffset)) {
        properties.utcOffset = dotNetObject.utcOffset;
    }
    if (hasValue(dotNetObject.yearPlaying)) {
        properties.yearPlaying = dotNetObject.yearPlaying;
    }
    let jsDaylightViewModel = new DaylightViewModel(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsDaylightViewModel);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsDaylightViewModel;
    
    return jsDaylightViewModel;
}


export async function buildDotNetDaylightViewModelGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDaylightViewModel: any = {};
    
    if (hasValue(jsObject.currentSeason)) {
        dotNetDaylightViewModel.currentSeason = removeCircularReferences(jsObject.currentSeason);
    }
    
    if (hasValue(jsObject.dayPlaying)) {
        dotNetDaylightViewModel.dayPlaying = jsObject.dayPlaying;
    }
    
    if (hasValue(jsObject.directShadowsEnabled)) {
        dotNetDaylightViewModel.directShadowsEnabled = jsObject.directShadowsEnabled;
    }
    
    if (hasValue(jsObject.localDate)) {
        dotNetDaylightViewModel.localDate = jsObject.localDate;
    }
    
    if (hasValue(jsObject.playSpeedMultiplier)) {
        dotNetDaylightViewModel.playSpeedMultiplier = jsObject.playSpeedMultiplier;
    }
    
    if (hasValue(jsObject.sunLightingEnabled)) {
        dotNetDaylightViewModel.sunLightingEnabled = jsObject.sunLightingEnabled;
    }
    
    if (hasValue(jsObject.timeSliderPosition)) {
        dotNetDaylightViewModel.timeSliderPosition = jsObject.timeSliderPosition;
    }
    
    if (hasValue(jsObject.utcOffset)) {
        dotNetDaylightViewModel.utcOffset = jsObject.utcOffset;
    }
    
    if (hasValue(jsObject.yearPlaying)) {
        dotNetDaylightViewModel.yearPlaying = jsObject.yearPlaying;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetDaylightViewModel.id = geoBlazorId;
    }

    return dotNetDaylightViewModel;
}

