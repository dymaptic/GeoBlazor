// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetShadowCastVisibleElements } from './shadowCastVisibleElements';

export async function buildJsShadowCastVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsShadowCastVisibleElements: any = {};

    if (hasValue(dotNetObject.colorPicker)) {
        jsShadowCastVisibleElements.colorPicker = dotNetObject.colorPicker;
    }
    if (hasValue(dotNetObject.datePicker)) {
        jsShadowCastVisibleElements.datePicker = dotNetObject.datePicker;
    }
    if (hasValue(dotNetObject.timeRangeSlider)) {
        jsShadowCastVisibleElements.timeRangeSlider = dotNetObject.timeRangeSlider;
    }
    if (hasValue(dotNetObject.timezone)) {
        jsShadowCastVisibleElements.timezone = dotNetObject.timezone;
    }
    if (hasValue(dotNetObject.tooltip)) {
        jsShadowCastVisibleElements.tooltip = dotNetObject.tooltip;
    }
    if (hasValue(dotNetObject.visualizationOptions)) {
        jsShadowCastVisibleElements.visualizationOptions = dotNetObject.visualizationOptions;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsShadowCastVisibleElements);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsShadowCastVisibleElements;
    
    let { buildDotNetShadowCastVisibleElements } = await import('./shadowCastVisibleElements');
    let dnInstantiatedObject = await buildDotNetShadowCastVisibleElements(jsShadowCastVisibleElements);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type ShadowCastVisibleElements detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ShadowCastVisibleElements', e);
    }
    
    return jsShadowCastVisibleElements;
}


export async function buildDotNetShadowCastVisibleElementsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetShadowCastVisibleElements: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.colorPicker)) {
        dotNetShadowCastVisibleElements.colorPicker = jsObject.colorPicker;
    }
    if (hasValue(jsObject.datePicker)) {
        dotNetShadowCastVisibleElements.datePicker = jsObject.datePicker;
    }
    if (hasValue(jsObject.timeRangeSlider)) {
        dotNetShadowCastVisibleElements.timeRangeSlider = jsObject.timeRangeSlider;
    }
    if (hasValue(jsObject.timezone)) {
        dotNetShadowCastVisibleElements.timezone = jsObject.timezone;
    }
    if (hasValue(jsObject.tooltip)) {
        dotNetShadowCastVisibleElements.tooltip = jsObject.tooltip;
    }
    if (hasValue(jsObject.visualizationOptions)) {
        dotNetShadowCastVisibleElements.visualizationOptions = jsObject.visualizationOptions;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetShadowCastVisibleElements.id = geoBlazorId;
    }

    return dotNetShadowCastVisibleElements;
}

