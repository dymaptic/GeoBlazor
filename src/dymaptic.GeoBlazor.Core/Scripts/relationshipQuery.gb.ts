// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import RelationshipQuery from '@arcgis/core/rest/support/RelationshipQuery';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetRelationshipQuery } from './relationshipQuery';

export async function buildJsRelationshipQueryGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsRelationshipQuery = new RelationshipQuery();
    if (hasValue(dotNetObject.outSpatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        jsRelationshipQuery.outSpatialReference = buildJsSpatialReference(dotNetObject.outSpatialReference) as any;
    }

    if (hasValue(dotNetObject.cacheHint)) {
        jsRelationshipQuery.cacheHint = dotNetObject.cacheHint;
    }
    if (hasValue(dotNetObject.gdbVersion)) {
        jsRelationshipQuery.gdbVersion = dotNetObject.gdbVersion;
    }
    if (hasValue(dotNetObject.geometryPrecision)) {
        jsRelationshipQuery.geometryPrecision = dotNetObject.geometryPrecision;
    }
    if (hasValue(dotNetObject.historicMoment)) {
        jsRelationshipQuery.historicMoment = dotNetObject.historicMoment;
    }
    if (hasValue(dotNetObject.maxAllowableOffset)) {
        jsRelationshipQuery.maxAllowableOffset = dotNetObject.maxAllowableOffset;
    }
    if (hasValue(dotNetObject.num)) {
        jsRelationshipQuery.num = dotNetObject.num;
    }
    if (hasValue(dotNetObject.objectIds)) {
        jsRelationshipQuery.objectIds = dotNetObject.objectIds;
    }
    if (hasValue(dotNetObject.orderByFields)) {
        jsRelationshipQuery.orderByFields = dotNetObject.orderByFields;
    }
    if (hasValue(dotNetObject.outFields)) {
        jsRelationshipQuery.outFields = dotNetObject.outFields;
    }
    if (hasValue(dotNetObject.relationshipId)) {
        jsRelationshipQuery.relationshipId = dotNetObject.relationshipId;
    }
    if (hasValue(dotNetObject.returnGeometry)) {
        jsRelationshipQuery.returnGeometry = dotNetObject.returnGeometry;
    }
    if (hasValue(dotNetObject.returnM)) {
        jsRelationshipQuery.returnM = dotNetObject.returnM;
    }
    if (hasValue(dotNetObject.returnZ)) {
        jsRelationshipQuery.returnZ = dotNetObject.returnZ;
    }
    if (hasValue(dotNetObject.start)) {
        jsRelationshipQuery.start = dotNetObject.start;
    }
    if (hasValue(dotNetObject.where)) {
        jsRelationshipQuery.where = dotNetObject.where;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsRelationshipQuery);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRelationshipQuery;
    
    let dnInstantiatedObject = await buildDotNetRelationshipQuery(jsRelationshipQuery);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RelationshipQuery', e);
    }
    
    return jsRelationshipQuery;
}

export async function buildDotNetRelationshipQueryGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRelationshipQuery: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.outSpatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetRelationshipQuery.outSpatialReference = buildDotNetSpatialReference(jsObject.outSpatialReference);
        }
        if (hasValue(jsObject.cacheHint)) {
            dotNetRelationshipQuery.cacheHint = jsObject.cacheHint;
        }
        if (hasValue(jsObject.gdbVersion)) {
            dotNetRelationshipQuery.gdbVersion = jsObject.gdbVersion;
        }
        if (hasValue(jsObject.geometryPrecision)) {
            dotNetRelationshipQuery.geometryPrecision = jsObject.geometryPrecision;
        }
        if (hasValue(jsObject.historicMoment)) {
            dotNetRelationshipQuery.historicMoment = jsObject.historicMoment;
        }
        if (hasValue(jsObject.maxAllowableOffset)) {
            dotNetRelationshipQuery.maxAllowableOffset = jsObject.maxAllowableOffset;
        }
        if (hasValue(jsObject.num)) {
            dotNetRelationshipQuery.num = jsObject.num;
        }
        if (hasValue(jsObject.objectIds)) {
            dotNetRelationshipQuery.objectIds = jsObject.objectIds;
        }
        if (hasValue(jsObject.orderByFields)) {
            dotNetRelationshipQuery.orderByFields = jsObject.orderByFields;
        }
        if (hasValue(jsObject.outFields)) {
            dotNetRelationshipQuery.outFields = jsObject.outFields;
        }
        if (hasValue(jsObject.relationshipId)) {
            dotNetRelationshipQuery.relationshipId = jsObject.relationshipId;
        }
        if (hasValue(jsObject.returnGeometry)) {
            dotNetRelationshipQuery.returnGeometry = jsObject.returnGeometry;
        }
        if (hasValue(jsObject.returnM)) {
            dotNetRelationshipQuery.returnM = jsObject.returnM;
        }
        if (hasValue(jsObject.returnZ)) {
            dotNetRelationshipQuery.returnZ = jsObject.returnZ;
        }
        if (hasValue(jsObject.start)) {
            dotNetRelationshipQuery.start = jsObject.start;
        }
        if (hasValue(jsObject.where)) {
            dotNetRelationshipQuery.where = jsObject.where;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRelationshipQuery.id = k;
                break;
            }
        }
    }

    return dotNetRelationshipQuery;
}

