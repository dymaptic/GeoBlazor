// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import RelationshipQuery from '@arcgis/core/rest/support/RelationshipQuery';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetRelationshipQuery } from './relationshipQuery';

export async function buildJsRelationshipQueryGenerated(dotNetObject: any): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.cacheHint)) {
        properties.cacheHint = dotNetObject.cacheHint;
    }
    if (hasValue(dotNetObject.gdbVersion)) {
        properties.gdbVersion = dotNetObject.gdbVersion;
    }
    if (hasValue(dotNetObject.geometryPrecision)) {
        properties.geometryPrecision = dotNetObject.geometryPrecision;
    }
    if (hasValue(dotNetObject.historicMoment)) {
        properties.historicMoment = dotNetObject.historicMoment;
    }
    if (hasValue(dotNetObject.maxAllowableOffset)) {
        properties.maxAllowableOffset = dotNetObject.maxAllowableOffset;
    }
    if (hasValue(dotNetObject.num)) {
        properties.num = dotNetObject.num;
    }
    if (hasValue(dotNetObject.objectIds)) {
        properties.objectIds = dotNetObject.objectIds;
    }
    if (hasValue(dotNetObject.orderByFields)) {
        properties.orderByFields = dotNetObject.orderByFields;
    }
    if (hasValue(dotNetObject.outFields)) {
        properties.outFields = dotNetObject.outFields;
    }
    if (hasValue(dotNetObject.outSpatialReference)) {
        const { id, dotNetComponentReference, ...sanitizedOutSpatialReference } = dotNetObject.outSpatialReference;
        properties.outSpatialReference = sanitizedOutSpatialReference;
    }
    if (hasValue(dotNetObject.relationshipId)) {
        properties.relationshipId = dotNetObject.relationshipId;
    }
    if (hasValue(dotNetObject.returnGeometry)) {
        properties.returnGeometry = dotNetObject.returnGeometry;
    }
    if (hasValue(dotNetObject.returnM)) {
        properties.returnM = dotNetObject.returnM;
    }
    if (hasValue(dotNetObject.returnZ)) {
        properties.returnZ = dotNetObject.returnZ;
    }
    if (hasValue(dotNetObject.start)) {
        properties.start = dotNetObject.start;
    }
    if (hasValue(dotNetObject.where)) {
        properties.where = dotNetObject.where;
    }
    let jsRelationshipQuery = new RelationshipQuery(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsRelationshipQuery);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRelationshipQuery;
    
    let { buildDotNetRelationshipQuery } = await import('./relationshipQuery');
    let dnInstantiatedObject = await buildDotNetRelationshipQuery(jsRelationshipQuery);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type RelationshipQuery detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RelationshipQuery', e);
    }
    
    return jsRelationshipQuery;
}


export async function buildDotNetRelationshipQueryGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRelationshipQuery: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.cacheHint)) {
        dotNetRelationshipQuery.cacheHint = jsObject.cacheHint;
    }
    if (hasValue(jsObject.gdbVersion)) {
        dotNetRelationshipQuery.gdbVersion = jsObject.gdbVersion;
    }
    if (hasValue(jsObject.geometryPrecision)) {
        dotNetRelationshipQuery.geometryPrecision = jsObject.geometryPrecision;
    }
    if (hasValue(jsObject.historicMoment)) {
        dotNetRelationshipQuery.historicMoment = jsObject.historicMoment;
    }
    if (hasValue(jsObject.maxAllowableOffset)) {
        dotNetRelationshipQuery.maxAllowableOffset = jsObject.maxAllowableOffset;
    }
    if (hasValue(jsObject.num)) {
        dotNetRelationshipQuery.num = jsObject.num;
    }
    if (hasValue(jsObject.objectIds)) {
        dotNetRelationshipQuery.objectIds = jsObject.objectIds;
    }
    if (hasValue(jsObject.orderByFields)) {
        dotNetRelationshipQuery.orderByFields = jsObject.orderByFields;
    }
    if (hasValue(jsObject.outFields)) {
        dotNetRelationshipQuery.outFields = jsObject.outFields;
    }
    if (hasValue(jsObject.outSpatialReference)) {
        dotNetRelationshipQuery.outSpatialReference = jsObject.outSpatialReference;
    }
    if (hasValue(jsObject.relationshipId)) {
        dotNetRelationshipQuery.relationshipId = jsObject.relationshipId;
    }
    if (hasValue(jsObject.returnGeometry)) {
        dotNetRelationshipQuery.returnGeometry = jsObject.returnGeometry;
    }
    if (hasValue(jsObject.returnM)) {
        dotNetRelationshipQuery.returnM = jsObject.returnM;
    }
    if (hasValue(jsObject.returnZ)) {
        dotNetRelationshipQuery.returnZ = jsObject.returnZ;
    }
    if (hasValue(jsObject.start)) {
        dotNetRelationshipQuery.start = jsObject.start;
    }
    if (hasValue(jsObject.where)) {
        dotNetRelationshipQuery.where = jsObject.where;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRelationshipQuery.id = k;
                break;
            }
        }
    }

    return dotNetRelationshipQuery;
}

