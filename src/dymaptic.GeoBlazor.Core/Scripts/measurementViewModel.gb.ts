// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import MeasurementViewModel from '@arcgis/core/widgets/Measurement/MeasurementViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetMeasurementViewModel } from './measurementViewModel';

export async function buildJsMeasurementViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsMeasurementViewModel = new MeasurementViewModel();

    if (hasValue(dotNetObject.activeTool)) {
        jsMeasurementViewModel.activeTool = dotNetObject.activeTool;
    }
    if (hasValue(dotNetObject.activeViewModel)) {
        jsMeasurementViewModel.activeViewModel = dotNetObject.activeViewModel;
    }
    if (hasValue(dotNetObject.areaUnit)) {
        jsMeasurementViewModel.areaUnit = dotNetObject.areaUnit;
    }
    if (hasValue(dotNetObject.linearUnit)) {
        jsMeasurementViewModel.linearUnit = dotNetObject.linearUnit;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsMeasurementViewModel);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsMeasurementViewModel;
    
    let dnInstantiatedObject = await buildDotNetMeasurementViewModel(jsMeasurementViewModel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for MeasurementViewModel', e);
    }
    
    return jsMeasurementViewModel;
}

export async function buildDotNetMeasurementViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMeasurementViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.activeTool)) {
        dotNetMeasurementViewModel.activeTool = jsObject.activeTool;
    }
    if (hasValue(jsObject.activeViewModel)) {
        dotNetMeasurementViewModel.activeViewModel = jsObject.activeViewModel;
    }
    if (hasValue(jsObject.areaUnit)) {
        dotNetMeasurementViewModel.areaUnit = jsObject.areaUnit;
    }
    if (hasValue(jsObject.linearUnit)) {
        dotNetMeasurementViewModel.linearUnit = jsObject.linearUnit;
    }
    if (hasValue(jsObject.state)) {
        dotNetMeasurementViewModel.state = jsObject.state;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetMeasurementViewModel.id = k;
                break;
            }
        }
    }

    return dotNetMeasurementViewModel;
}

