// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import MeasurementViewModel from '@arcgis/core/widgets/Measurement/MeasurementViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetMeasurementViewModel } from './measurementViewModel';

export async function buildJsMeasurementViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }

    if (hasValue(dotNetObject.activeTool)) {
        properties.activeTool = dotNetObject.activeTool;
    }
    if (hasValue(dotNetObject.areaUnit)) {
        properties.areaUnit = dotNetObject.areaUnit;
    }
    if (hasValue(dotNetObject.linearUnit)) {
        properties.linearUnit = dotNetObject.linearUnit;
    }
    let jsMeasurementViewModel = new MeasurementViewModel(properties);
    
    jsObjectRefs[dotNetObject.id] = jsMeasurementViewModel;
    arcGisObjectRefs[dotNetObject.id] = jsMeasurementViewModel;
    
    return jsMeasurementViewModel;
}


export async function buildDotNetMeasurementViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMeasurementViewModel: any = {};
    
    if (hasValue(jsObject.activeTool)) {
        dotNetMeasurementViewModel.activeTool = removeCircularReferences(jsObject.activeTool);
    }
    
    if (hasValue(jsObject.activeViewModel)) {
        dotNetMeasurementViewModel.activeViewModel = removeCircularReferences(jsObject.activeViewModel);
    }
    
    if (hasValue(jsObject.areaUnit)) {
        dotNetMeasurementViewModel.areaUnit = removeCircularReferences(jsObject.areaUnit);
    }
    
    if (hasValue(jsObject.linearUnit)) {
        dotNetMeasurementViewModel.linearUnit = removeCircularReferences(jsObject.linearUnit);
    }
    
    if (hasValue(jsObject.state)) {
        dotNetMeasurementViewModel.state = removeCircularReferences(jsObject.state);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetMeasurementViewModel.id = geoBlazorId;
    }

    return dotNetMeasurementViewModel;
}

