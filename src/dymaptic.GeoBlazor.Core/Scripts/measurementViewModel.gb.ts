// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import MeasurementViewModel from '@arcgis/core/widgets/Measurement/MeasurementViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetMeasurementViewModel } from './measurementViewModel';

export async function buildJsMeasurementViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.activeViewModel)) {
        let { buildJsIMeasurementViewModelActiveViewModel } = await import('./iMeasurementViewModelActiveViewModel');
        properties.activeViewModel = buildJsIMeasurementViewModelActiveViewModel(dotNetObject.activeViewModel) as any;
    }

    if (hasValue(dotNetObject.activeTool)) {
        properties.activeTool = dotNetObject.activeTool;
    }
    if (hasValue(dotNetObject.areaUnit)) {
        properties.areaUnit = dotNetObject.areaUnit;
    }
    if (hasValue(dotNetObject.linearUnit)) {
        properties.linearUnit = dotNetObject.linearUnit;
    }
    let jsMeasurementViewModel = new MeasurementViewModel(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsMeasurementViewModel);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsMeasurementViewModel;
    
    try {
        let { buildDotNetMeasurementViewModel } = await import('./measurementViewModel');
        let dnInstantiatedObject = await buildDotNetMeasurementViewModel(jsMeasurementViewModel);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type MeasurementViewModel detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for MeasurementViewModel', e);
    }
    
    return jsMeasurementViewModel;
}


export async function buildDotNetMeasurementViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMeasurementViewModel: any = {};
    
    if (hasValue(jsObject.activeViewModel)) {
        let { buildDotNetIMeasurementViewModelActiveViewModel } = await import('./iMeasurementViewModelActiveViewModel');
        dotNetMeasurementViewModel.activeViewModel = buildDotNetIMeasurementViewModelActiveViewModel(jsObject.activeViewModel);
    }
    
    if (hasValue(jsObject.activeTool)) {
        dotNetMeasurementViewModel.activeTool = jsObject.activeTool;
    }
    
    if (hasValue(jsObject.areaUnit)) {
        dotNetMeasurementViewModel.areaUnit = jsObject.areaUnit;
    }
    
    if (hasValue(jsObject.linearUnit)) {
        dotNetMeasurementViewModel.linearUnit = jsObject.linearUnit;
    }
    
    if (hasValue(jsObject.state)) {
        dotNetMeasurementViewModel.state = jsObject.state;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetMeasurementViewModel.id = geoBlazorId;
    }

    return dotNetMeasurementViewModel;
}

