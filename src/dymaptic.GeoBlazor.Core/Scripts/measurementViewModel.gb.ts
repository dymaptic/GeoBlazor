// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import MeasurementViewModel from '@arcgis/core/widgets/Measurement/MeasurementViewModel';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class MeasurementViewModelGenerated implements IPropertyWrapper {
    public component: MeasurementViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: MeasurementViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsMeasurementViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsMeasurementViewModel = new MeasurementViewModel();

    if (hasValue(dotNetObject.activeTool)) {
        jsMeasurementViewModel.activeTool = dotNetObject.activeTool;
    }
    if (hasValue(dotNetObject.activeViewModel)) {
        jsMeasurementViewModel.activeViewModel = dotNetObject.activeViewModel;
    }
    if (hasValue(dotNetObject.areaUnit)) {
        jsMeasurementViewModel.areaUnit = dotNetObject.areaUnit;
    }
    if (hasValue(dotNetObject.linearUnit)) {
        jsMeasurementViewModel.linearUnit = dotNetObject.linearUnit;
    }
    if (hasValue(dotNetObject.view)) {
        jsMeasurementViewModel.view = dotNetObject.view;
    }
    let { default: MeasurementViewModelWrapper } = await import('./measurementViewModel');
    let measurementViewModelWrapper = new MeasurementViewModelWrapper(jsMeasurementViewModel);
    measurementViewModelWrapper.geoBlazorId = dotNetObject.id;
    measurementViewModelWrapper.viewId = viewId;
    measurementViewModelWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(measurementViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = measurementViewModelWrapper;

    arcGisObjectRefs[dotNetObject.id] = jsMeasurementViewModel;
    let { buildDotNetMeasurementViewModel } = await import('./measurementViewModel');
    let dnInstantiatedObject = await buildDotNetMeasurementViewModel(jsMeasurementViewModel, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for MeasurementViewModel', e);
    }
    
    return jsMeasurementViewModel;
}

export async function buildDotNetMeasurementViewModelGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMeasurementViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.activeTool)) {
            dotNetMeasurementViewModel.activeTool = jsObject.activeTool;
        }
        if (hasValue(jsObject.activeViewModel)) {
            dotNetMeasurementViewModel.activeViewModel = jsObject.activeViewModel;
        }
        if (hasValue(jsObject.areaUnit)) {
            dotNetMeasurementViewModel.areaUnit = jsObject.areaUnit;
        }
        if (hasValue(jsObject.linearUnit)) {
            dotNetMeasurementViewModel.linearUnit = jsObject.linearUnit;
        }
        if (hasValue(jsObject.state)) {
            dotNetMeasurementViewModel.state = jsObject.state;
        }
        if (hasValue(jsObject.view)) {
            dotNetMeasurementViewModel.view = jsObject.view;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetMeasurementViewModel.id = k;
                break;
            }
        }
    }

    return dotNetMeasurementViewModel;
}

