// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import websceneApplicationProperties from '@arcgis/core/webscene/ApplicationProperties';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';

export async function buildJsWebsceneApplicationPropertiesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.viewing)) {
        let { buildJsViewing } = await import('./viewing');
        properties.viewing = await buildJsViewing(dotNetObject.viewing, layerId, viewId) as any;
    }

    let jswebsceneApplicationProperties = new websceneApplicationProperties(properties);
    
    jsObjectRefs[dotNetObject.id] = jswebsceneApplicationProperties;
    arcGisObjectRefs[dotNetObject.id] = jswebsceneApplicationProperties;
    
    return jswebsceneApplicationProperties;
}


export async function buildDotNetWebsceneApplicationPropertiesGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWebsceneApplicationProperties: any = {};
    
    if (hasValue(jsObject.viewing)) {
        let { buildDotNetViewing } = await import('./viewing');
        dotNetWebsceneApplicationProperties.viewing = await buildDotNetViewing(jsObject.viewing, layerId, viewId);
    }
    

    return dotNetWebsceneApplicationProperties;
}

