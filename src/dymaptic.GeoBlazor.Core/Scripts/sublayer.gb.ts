// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Sublayer from '@arcgis/core/layers/support/Sublayer';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, generateSerializableJson } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SublayerGenerated implements IPropertyWrapper {
    public component: Sublayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: Sublayer) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.attributeTableTemplate)) {
            this.component.attributeTableTemplate = dotNetObject.iAttributeTableTemplate;
        }
        if (hasValue(dotNetObject.floorInfo)) {
            let { buildJsLayerFloorInfo } = await import('./layerFloorInfo');
            this.component.floorInfo = await buildJsLayerFloorInfo(dotNetObject.floorInfo, this.viewId) as any;
        }
        if (hasValue(dotNetObject.labelingInfo) && dotNetObject.labelingInfo.length > 0) {
            let { buildJsLabel } = await import('./label');
            this.component.labelingInfo = await Promise.all(dotNetObject.labelingInfo.map(async i => await buildJsLabel(i, this.layerId, this.viewId))) as any;
        }
        if (hasValue(dotNetObject.orderBy) && dotNetObject.orderBy.length > 0) {
            let { buildJsOrderByInfo } = await import('./orderByInfo');
            this.component.orderBy = await Promise.all(dotNetObject.orderBy.map(async i => await buildJsOrderByInfo(i, this.layerId, this.viewId))) as any;
        }
        if (hasValue(dotNetObject.popupTemplate)) {
            let { buildJsPopupTemplate } = await import('./popupTemplate');
            this.component.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.renderer)) {
            let { buildJsRenderer } = await import('./renderer');
            this.component.renderer = await buildJsRenderer(dotNetObject.renderer, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.source)) {
            let { buildJsDynamicLayer } = await import('./dynamicLayer');
            this.component.source = await buildJsDynamicLayer(dotNetObject.source) as any;
        }

        if (hasValue(dotNetObject.definitionExpression)) {
            this.component.definitionExpression = dotNetObject.definitionExpression;
        }
        if (hasValue(dotNetObject.labelsVisible)) {
            this.component.labelsVisible = dotNetObject.labelsVisible;
        }
        if (hasValue(dotNetObject.legendEnabled)) {
            this.component.legendEnabled = dotNetObject.legendEnabled;
        }
        if (hasValue(dotNetObject.listMode)) {
            this.component.listMode = dotNetObject.listMode;
        }
        if (hasValue(dotNetObject.maxScale)) {
            this.component.maxScale = dotNetObject.maxScale;
        }
        if (hasValue(dotNetObject.minScale)) {
            this.component.minScale = dotNetObject.minScale;
        }
        if (hasValue(dotNetObject.opacity)) {
            this.component.opacity = dotNetObject.opacity;
        }
        if (hasValue(dotNetObject.popupEnabled)) {
            this.component.popupEnabled = dotNetObject.popupEnabled;
        }
        if (hasValue(dotNetObject.sublayerId)) {
            this.component.id = dotNetObject.sublayerId;
        }
        if (hasValue(dotNetObject.title)) {
            this.component.title = dotNetObject.title;
        }
        if (hasValue(dotNetObject.url)) {
            this.component.url = dotNetObject.url;
        }
        if (hasValue(dotNetObject.visible)) {
            this.component.visible = dotNetObject.visible;
        }
    }
    
    async cancelLoad(): Promise<void> {
        this.component.cancelLoad();
    }

    async createFeatureLayer(): Promise<any> {
        let result = await this.component.createFeatureLayer();
        let { buildDotNetFeatureLayer } = await import('./featureLayer');
        return await buildDotNetFeatureLayer(result, this.viewId);
    }

    async createPopupTemplate(options: any): Promise<any> {
        return this.component.createPopupTemplate(options);
    }

    async createQuery(): Promise<any> {
        return this.component.createQuery();
    }

    async getFeatureType(feature: any): Promise<any> {
        let { buildJsGraphic } = await import('./graphic');
        let jsFeature = buildJsGraphic(feature) as any;
        return this.component.getFeatureType(jsFeature);
    }

    async getFieldDomain(fieldName: any,
        options: any): Promise<any> {
        let { buildJsSublayerGetFieldDomainOptions } = await import('./sublayerGetFieldDomainOptions');
        let jsOptions = await buildJsSublayerGetFieldDomainOptions(options, this.layerId, this.viewId) as any;
        return this.component.getFieldDomain(fieldName,
            jsOptions);
    }

    async isFulfilled(): Promise<any> {
        return this.component.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.component.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.component.isResolved();
    }

    async load(options: any): Promise<any> {
        let result = await this.component.load(options);
        
        return generateSerializableJson(result);
    }

    async queryAttachments(attachmentQuery: any,
        options: any): Promise<any> {
        return this.component.queryAttachments(attachmentQuery,
            options);
    }

    async queryFeatureCount(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.viewId) as any;
        return await this.component.queryFeatureCount(jsQuery,
            options);
    }

    async queryFeatures(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.viewId) as any;
        return await this.component.queryFeatures(jsQuery,
            options);
    }

    async queryObjectIds(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.viewId) as any;
        return await this.component.queryObjectIds(jsQuery,
            options);
    }

    async queryRelatedFeatures(relationshipQuery: any,
        options: any): Promise<any> {
        let { buildJsRelationshipQuery } = await import('./relationshipQuery');
        let jsRelationshipQuery = await buildJsRelationshipQuery(relationshipQuery, this.viewId) as any;
        return await this.component.queryRelatedFeatures(jsRelationshipQuery,
            options);
    }

    async queryRelatedFeaturesCount(relationshipQuery: any,
        options: any): Promise<any> {
        let { buildJsRelationshipQuery } = await import('./relationshipQuery');
        let jsRelationshipQuery = await buildJsRelationshipQuery(relationshipQuery, this.viewId) as any;
        return await this.component.queryRelatedFeaturesCount(jsRelationshipQuery,
            options);
    }

    async when(callback: any,
        errback: any): Promise<any> {
        let result = await this.component.when(callback,
            errback);
        
        return generateSerializableJson(result);
    }

    // region properties
    
    async getCapabilities(): Promise<any> {
        if (!hasValue(this.component.capabilities)) {
            return null;
        }
        
        let { buildDotNetSublayerCapabilities } = await import('./sublayerCapabilities');
        return await buildDotNetSublayerCapabilities(this.component.capabilities);
    }
    
    getDefinitionExpression(): any {
        if (!hasValue(this.component.definitionExpression)) {
            return null;
        }
        
        return generateSerializableJson(this.component.definitionExpression);
    }
    
    setDefinitionExpression(value: any): void {
        this.component.definitionExpression = JSON.parse(value);
    }
    
    async getFields(): Promise<any> {
        if (!hasValue(this.component.fields)) {
            return null;
        }
        
        let { buildDotNetField } = await import('./field');
        return this.component.fields!.map(i => buildDotNetField(i, this.viewId));
    }
    
    async getFieldsIndex(): Promise<any> {
        if (!hasValue(this.component.fieldsIndex)) {
            return null;
        }
        
        let { buildDotNetFieldsIndex } = await import('./fieldsIndex');
        return await buildDotNetFieldsIndex(this.component.fieldsIndex, this.viewId);
    }
    
    async getFloorInfo(): Promise<any> {
        if (!hasValue(this.component.floorInfo)) {
            return null;
        }
        
        let { buildDotNetLayerFloorInfo } = await import('./layerFloorInfo');
        return await buildDotNetLayerFloorInfo(this.component.floorInfo, this.viewId);
    }
    
    async setFloorInfo(value: any): Promise<void> {
        let { buildJsLayerFloorInfo } = await import('./layerFloorInfo');
        this.component.floorInfo = await  buildJsLayerFloorInfo(value, this.viewId);
    }
    
    async getFullExtent(): Promise<any> {
        if (!hasValue(this.component.fullExtent)) {
            return null;
        }
        
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(this.component.fullExtent);
    }
    
    async getLabelingInfo(): Promise<any> {
        if (!hasValue(this.component.labelingInfo)) {
            return null;
        }
        
        let { buildDotNetLabel } = await import('./label');
        return await Promise.all(this.component.labelingInfo!.map(async i => await buildDotNetLabel(i, this.viewId)));
    }
    
    async setLabelingInfo(value: any): Promise<void> {
        if (!hasValue(value)) {
            this.component.labelingInfo = [];
        }
        let { buildJsLabel } = await import('./label');
        this.component.labelingInfo = await Promise.all(value.map(async i => await buildJsLabel(i, this.layerId, this.viewId))) as any;
    }
    
    async getLayer(): Promise<any> {
        if (!hasValue(this.component.layer)) {
            return null;
        }
        
        let { buildDotNetLayer } = await import('./layer');
        return await buildDotNetLayer(this.component.layer, this.viewId);
    }
    
    getObjectIdField(): any {
        if (!hasValue(this.component.objectIdField)) {
            return null;
        }
        
        return generateSerializableJson(this.component.objectIdField);
    }
    
    async getOrderBy(): Promise<any> {
        if (!hasValue(this.component.orderBy)) {
            return null;
        }
        
        let { buildDotNetOrderByInfo } = await import('./orderByInfo');
        return await Promise.all(this.component.orderBy!.map(async i => await buildDotNetOrderByInfo(i, this.viewId)));
    }
    
    async setOrderBy(value: any): Promise<void> {
        if (!hasValue(value)) {
            this.component.orderBy = [];
        }
        let { buildJsOrderByInfo } = await import('./orderByInfo');
        this.component.orderBy = await Promise.all(value.map(async i => await buildJsOrderByInfo(i, this.layerId, this.viewId))) as any;
    }
    
    async getPopupTemplate(): Promise<any> {
        if (!hasValue(this.component.popupTemplate)) {
            return null;
        }
        
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        return await buildDotNetPopupTemplate(this.component.popupTemplate);
    }
    
    async setPopupTemplate(value: any): Promise<void> {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        this.component.popupTemplate =  buildJsPopupTemplate(value, this.layerId, this.viewId);
    }
    
    async getRenderer(): Promise<any> {
        if (!hasValue(this.component.renderer)) {
            return null;
        }
        
        let { buildDotNetRenderer } = await import('./renderer');
        return await buildDotNetRenderer(this.component.renderer, this.viewId);
    }
    
    async setRenderer(value: any): Promise<void> {
        let { buildJsRenderer } = await import('./renderer');
        this.component.renderer = await  buildJsRenderer(value, this.layerId, this.viewId);
    }
    
    async getSource(): Promise<any> {
        if (!hasValue(this.component.source)) {
            return null;
        }
        
        let { buildDotNetDynamicLayer } = await import('./dynamicLayer');
        return await buildDotNetDynamicLayer(this.component.source, this.viewId);
    }
    
    async setSource(value: any): Promise<void> {
        let { buildJsDynamicLayer } = await import('./dynamicLayer');
        this.component.source = await  buildJsDynamicLayer(value);
    }
    
    getSourceJSON(): any {
        if (!hasValue(this.component.sourceJSON)) {
            return null;
        }
        
        return generateSerializableJson(this.component.sourceJSON);
    }
    
    async getSpatialReference(): Promise<any> {
        if (!hasValue(this.component.spatialReference)) {
            return null;
        }
        
        let { buildDotNetSpatialReference } = await import('./spatialReference');
        return buildDotNetSpatialReference(this.component.spatialReference);
    }
    
    async getSublayers(): Promise<any> {
        if (!hasValue(this.component.sublayers)) {
            return null;
        }
        
        let { buildDotNetSublayer } = await import('./sublayer');
        return await Promise.all(this.component.sublayers!.map(async i => await buildDotNetSublayer(i, this.viewId)));
    }
    
    async setSublayers(value: any): Promise<void> {
        if (!hasValue(value)) {
            this.component.sublayers.removeAll();
        }
        let { buildJsSublayer } = await import('./sublayer');
        this.component.sublayers = await Promise.all(value.map(async i => await buildJsSublayer(i, this.layerId, this.viewId))) as any;
    }
    
    getTitle(): any {
        if (!hasValue(this.component.title)) {
            return null;
        }
        
        return generateSerializableJson(this.component.title);
    }
    
    setTitle(value: any): void {
        this.component.title = JSON.parse(value);
    }
    
    getTypeIdField(): any {
        if (!hasValue(this.component.typeIdField)) {
            return null;
        }
        
        return generateSerializableJson(this.component.typeIdField);
    }
    
    async getTypes(): Promise<any> {
        if (!hasValue(this.component.types)) {
            return null;
        }
        
        let { buildDotNetFeatureType } = await import('./featureType');
        return await Promise.all(this.component.types!.map(async i => await buildDotNetFeatureType(i)));
    }
    
    getUrl(): any {
        if (!hasValue(this.component.url)) {
            return null;
        }
        
        return generateSerializableJson(this.component.url);
    }
    
    setUrl(value: any): void {
        this.component.url = JSON.parse(value);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsSublayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.attributeTableTemplate)) {
        properties.attributeTableTemplate = dotNetObject.attributeTableTemplate;
    }
    if (hasValue(dotNetObject.floorInfo)) {
        let { buildJsLayerFloorInfo } = await import('./layerFloorInfo');
        properties.floorInfo = await buildJsLayerFloorInfo(dotNetObject.floorInfo, viewId) as any;
    }
    if (hasValue(dotNetObject.labelingInfo) && dotNetObject.labelingInfo.length > 0) {
        let { buildJsLabel } = await import('./label');
        properties.labelingInfo = await Promise.all(dotNetObject.labelingInfo.map(async i => await buildJsLabel(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.orderBy) && dotNetObject.orderBy.length > 0) {
        let { buildJsOrderByInfo } = await import('./orderByInfo');
        properties.orderBy = await Promise.all(dotNetObject.orderBy.map(async i => await buildJsOrderByInfo(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.popupTemplate)) {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        properties.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsRenderer } = await import('./renderer');
        properties.renderer = await buildJsRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.source)) {
        let { buildJsDynamicLayer } = await import('./dynamicLayer');
        properties.source = await buildJsDynamicLayer(dotNetObject.source) as any;
    }

    if (hasValue(dotNetObject.definitionExpression)) {
        properties.definitionExpression = dotNetObject.definitionExpression;
    }
    if (hasValue(dotNetObject.labelsVisible)) {
        properties.labelsVisible = dotNetObject.labelsVisible;
    }
    if (hasValue(dotNetObject.legendEnabled)) {
        properties.legendEnabled = dotNetObject.legendEnabled;
    }
    if (hasValue(dotNetObject.listMode)) {
        properties.listMode = dotNetObject.listMode;
    }
    if (hasValue(dotNetObject.maxScale)) {
        properties.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.minScale)) {
        properties.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.opacity)) {
        properties.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        properties.popupEnabled = dotNetObject.popupEnabled;
    }
    if (hasValue(dotNetObject.sublayerId)) {
        properties.id = dotNetObject.sublayerId;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.url)) {
        properties.url = dotNetObject.url;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    let jsSublayer = new Sublayer(properties);

    let { default: SublayerWrapper } = await import('./sublayer');
    let sublayerWrapper = new SublayerWrapper(jsSublayer);
    sublayerWrapper.geoBlazorId = dotNetObject.id;
    sublayerWrapper.viewId = viewId;
    sublayerWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = sublayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsSublayer;
    
    return jsSublayer;
}


export async function buildDotNetSublayerGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSublayer: any = {};
    
    if (hasValue(jsObject.capabilities)) {
        let { buildDotNetSublayerCapabilities } = await import('./sublayerCapabilities');
        dotNetSublayer.capabilities = await buildDotNetSublayerCapabilities(jsObject.capabilities);
    }
    
    if (hasValue(jsObject.fields)) {
        let { buildDotNetField } = await import('./field');
        dotNetSublayer.fields = jsObject.fields.map(i => buildDotNetField(i, viewId));
    }
    
    if (hasValue(jsObject.fieldsIndex)) {
        let { buildDotNetFieldsIndex } = await import('./fieldsIndex');
        dotNetSublayer.fieldsIndex = await buildDotNetFieldsIndex(jsObject.fieldsIndex, viewId);
    }
    
    if (hasValue(jsObject.floorInfo)) {
        let { buildDotNetLayerFloorInfo } = await import('./layerFloorInfo');
        dotNetSublayer.floorInfo = await buildDotNetLayerFloorInfo(jsObject.floorInfo, viewId);
    }
    
    if (hasValue(jsObject.fullExtent)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetSublayer.fullExtent = buildDotNetExtent(jsObject.fullExtent);
    }
    
    if (hasValue(jsObject.labelingInfo)) {
        let { buildDotNetLabel } = await import('./label');
        dotNetSublayer.labelingInfo = await Promise.all(jsObject.labelingInfo.map(async i => await buildDotNetLabel(i, viewId)));
    }
    
    if (hasValue(jsObject.orderBy)) {
        let { buildDotNetOrderByInfo } = await import('./orderByInfo');
        dotNetSublayer.orderBy = await Promise.all(jsObject.orderBy.map(async i => await buildDotNetOrderByInfo(i, viewId)));
    }
    
    if (hasValue(jsObject.popupTemplate)) {
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        dotNetSublayer.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
    }
    
    if (hasValue(jsObject.renderer)) {
        let { buildDotNetRenderer } = await import('./renderer');
        dotNetSublayer.renderer = await buildDotNetRenderer(jsObject.renderer, viewId);
    }
    
    if (hasValue(jsObject.source)) {
        let { buildDotNetDynamicLayer } = await import('./dynamicLayer');
        dotNetSublayer.source = await buildDotNetDynamicLayer(jsObject.source, viewId);
    }
    
    if (hasValue(jsObject.spatialReference)) {
        let { buildDotNetSpatialReference } = await import('./spatialReference');
        dotNetSublayer.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference);
    }
    
    if (hasValue(jsObject.types)) {
        let { buildDotNetFeatureType } = await import('./featureType');
        dotNetSublayer.types = await Promise.all(jsObject.types.map(async i => await buildDotNetFeatureType(i)));
    }
    
    if (hasValue(jsObject.attributeTableTemplate)) {
        dotNetSublayer.attributeTableTemplate = removeCircularReferences(jsObject.attributeTableTemplate);
    }
    
    if (hasValue(jsObject.definitionExpression)) {
        dotNetSublayer.definitionExpression = jsObject.definitionExpression;
    }
    
    if (hasValue(jsObject.isTable)) {
        dotNetSublayer.isTable = jsObject.isTable;
    }
    
    if (hasValue(jsObject.labelsVisible)) {
        dotNetSublayer.labelsVisible = jsObject.labelsVisible;
    }
    
    if (hasValue(jsObject.legendEnabled)) {
        dotNetSublayer.legendEnabled = jsObject.legendEnabled;
    }
    
    if (hasValue(jsObject.listMode)) {
        dotNetSublayer.listMode = removeCircularReferences(jsObject.listMode);
    }
    
    if (hasValue(jsObject.maxScale)) {
        dotNetSublayer.maxScale = jsObject.maxScale;
    }
    
    if (hasValue(jsObject.minScale)) {
        dotNetSublayer.minScale = jsObject.minScale;
    }
    
    if (hasValue(jsObject.objectIdField)) {
        dotNetSublayer.objectIdField = jsObject.objectIdField;
    }
    
    if (hasValue(jsObject.opacity)) {
        dotNetSublayer.opacity = jsObject.opacity;
    }
    
    if (hasValue(jsObject.popupEnabled)) {
        dotNetSublayer.popupEnabled = jsObject.popupEnabled;
    }
    
    if (hasValue(jsObject.relationships)) {
        dotNetSublayer.relationships = removeCircularReferences(jsObject.relationships);
    }
    
    if (hasValue(jsObject.id)) {
        dotNetSublayer.sublayerId = jsObject.id;
    }
    
    if (hasValue(jsObject.title)) {
        dotNetSublayer.title = jsObject.title;
    }
    
    if (hasValue(jsObject.typeIdField)) {
        dotNetSublayer.typeIdField = jsObject.typeIdField;
    }
    
    if (hasValue(jsObject.url)) {
        dotNetSublayer.url = jsObject.url;
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetSublayer.visible = jsObject.visible;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSublayer.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetSublayer.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetSublayer.id)) {
        jsObjectRefs[dotNetSublayer.id] ??= jsObject;
        arcGisObjectRefs[dotNetSublayer.id] ??= jsObject;
    }

    return dotNetSublayer;
}

