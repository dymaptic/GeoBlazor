// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Sublayer from '@arcgis/core/layers/support/Sublayer';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SublayerGenerated implements IPropertyWrapper {
    public component: Sublayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: Sublayer) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.floorInfo)) {
            let { buildJsLayerFloorInfo } = await import('./layerFloorInfo');
            this.component.floorInfo = await buildJsLayerFloorInfo(dotNetObject.floorInfo, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.labelingInfo) && dotNetObject.labelingInfo.length > 0) {
            let { buildJsLabel } = await import('./label');
            this.component.labelingInfo = await Promise.all(dotNetObject.labelingInfo.map(async i => await buildJsLabel(i, this.layerId, this.viewId))) as any;
        }
        if (hasValue(dotNetObject.popupTemplate)) {
            let { buildJsPopupTemplate } = await import('./popupTemplate');
            this.component.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.renderer)) {
            let { buildJsRenderer } = await import('./renderer');
            this.component.renderer = await buildJsRenderer(dotNetObject.renderer, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.source)) {
            let { buildJsDynamicLayer } = await import('./dynamicLayer');
            this.component.source = await buildJsDynamicLayer(dotNetObject.source, this.layerId, this.viewId) as any;
        }

        if (hasValue(dotNetObject.definitionExpression)) {
            this.component.definitionExpression = dotNetObject.definitionExpression;
        }
        if (hasValue(dotNetObject.labelsVisible)) {
            this.component.labelsVisible = dotNetObject.labelsVisible;
        }
        if (hasValue(dotNetObject.legendEnabled)) {
            this.component.legendEnabled = dotNetObject.legendEnabled;
        }
        if (hasValue(dotNetObject.listMode)) {
            this.component.listMode = dotNetObject.listMode;
        }
        if (hasValue(dotNetObject.maxScale)) {
            this.component.maxScale = dotNetObject.maxScale;
        }
        if (hasValue(dotNetObject.minScale)) {
            this.component.minScale = dotNetObject.minScale;
        }
        if (hasValue(dotNetObject.opacity)) {
            this.component.opacity = dotNetObject.opacity;
        }
        if (hasValue(dotNetObject.popupEnabled)) {
            this.component.popupEnabled = dotNetObject.popupEnabled;
        }
        if (hasValue(dotNetObject.sublayerId)) {
            this.component.id = dotNetObject.sublayerId;
        }
        if (hasValue(dotNetObject.title)) {
            this.component.title = dotNetObject.title;
        }
        if (hasValue(dotNetObject.url)) {
            this.component.url = dotNetObject.url;
        }
        if (hasValue(dotNetObject.visible)) {
            this.component.visible = dotNetObject.visible;
        }
    }
    
    async createFeatureLayer(): Promise<any> {
        let result = await this.component.createFeatureLayer();
        let { buildDotNetFeatureLayer } = await import('./featureLayer');
        return await buildDotNetFeatureLayer(result, this.layerId, this.viewId);
    }

    async createPopupTemplate(options: any): Promise<any> {
        return this.component.createPopupTemplate(options);
    }

    async createQuery(): Promise<any> {
        return this.component.createQuery();
    }

    async getFeatureType(feature: any): Promise<any> {
        let { buildJsGraphic } = await import('./graphic');
        let jsFeature = buildJsGraphic(feature) as any;
        return this.component.getFeatureType(jsFeature);
    }

    async getFieldDomain(fieldName: any,
        options: any): Promise<any> {
        let { buildJsSublayerGetFieldDomainOptions } = await import('./sublayerGetFieldDomainOptions');
        let jsOptions = await buildJsSublayerGetFieldDomainOptions(options, this.layerId, this.viewId) as any;
        return this.component.getFieldDomain(fieldName,
            jsOptions);
    }

    async queryAttachments(attachmentQuery: any,
        options: any): Promise<any> {
        return this.component.queryAttachments(attachmentQuery,
            options);
    }

    async queryFeatureCount(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.component.queryFeatureCount(jsQuery,
            options);
    }

    async queryFeatures(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.component.queryFeatures(jsQuery,
            options);
    }

    async queryObjectIds(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.component.queryObjectIds(jsQuery,
            options);
    }

    async queryRelatedFeatures(relationshipQuery: any,
        options: any): Promise<any> {
        let { buildJsRelationshipQuery } = await import('./relationshipQuery');
        let jsRelationshipQuery = await buildJsRelationshipQuery(relationshipQuery) as any;
        return await this.component.queryRelatedFeatures(jsRelationshipQuery,
            options);
    }

    async queryRelatedFeaturesCount(relationshipQuery: any,
        options: any): Promise<any> {
        let { buildJsRelationshipQuery } = await import('./relationshipQuery');
        let jsRelationshipQuery = await buildJsRelationshipQuery(relationshipQuery) as any;
        return await this.component.queryRelatedFeaturesCount(jsRelationshipQuery,
            options);
    }

    // region properties
    
    async getFields(): Promise<any> {
        if (!hasValue(this.component.fields)) {
            return null;
        }
        
        let { buildDotNetField } = await import('./field');
        return this.component.fields!.map(i => buildDotNetField(i));
    }
    
    async getFieldsIndex(): Promise<any> {
        if (!hasValue(this.component.fieldsIndex)) {
            return null;
        }
        
        let { buildDotNetFieldsIndex } = await import('./fieldsIndex');
        return await buildDotNetFieldsIndex(this.component.fieldsIndex, this.layerId, this.viewId);
    }
    
    async getFloorInfo(): Promise<any> {
        if (!hasValue(this.component.floorInfo)) {
            return null;
        }
        
        let { buildDotNetLayerFloorInfo } = await import('./layerFloorInfo');
        return await buildDotNetLayerFloorInfo(this.component.floorInfo, this.layerId, this.viewId);
    }
    
    async setFloorInfo(value: any): Promise<void> {
        let { buildJsLayerFloorInfo } = await import('./layerFloorInfo');
        this.component.floorInfo = await  buildJsLayerFloorInfo(value, this.layerId, this.viewId);
    }
    
    async getFullExtent(): Promise<any> {
        if (!hasValue(this.component.fullExtent)) {
            return null;
        }
        
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(this.component.fullExtent);
    }
    
    async getLabelingInfo(): Promise<any> {
        if (!hasValue(this.component.labelingInfo)) {
            return null;
        }
        
        let { buildDotNetLabel } = await import('./label');
        return await Promise.all(this.component.labelingInfo.map(async i => await buildDotNetLabel(i)));
    }
    
    async setLabelingInfo(value: any): Promise<void> {
        let { buildJsLabel } = await import('./label');
        this.component.labelingInfo = await Promise.all(value.map(async i => await buildJsLabel(i, this.layerId, this.viewId))) as any;
    }
    
    async getLayer(): Promise<any> {
        if (!hasValue(this.component.layer)) {
            return null;
        }
        
        let { buildDotNetLayer } = await import('./layer');
        return await buildDotNetLayer(this.component.layer, this.layerId, this.viewId);
    }
    
    async getPopupTemplate(): Promise<any> {
        if (!hasValue(this.component.popupTemplate)) {
            return null;
        }
        
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        return await buildDotNetPopupTemplate(this.component.popupTemplate);
    }
    
    async setPopupTemplate(value: any): Promise<void> {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        this.component.popupTemplate =  buildJsPopupTemplate(value, this.layerId, this.viewId);
    }
    
    async getRenderer(): Promise<any> {
        if (!hasValue(this.component.renderer)) {
            return null;
        }
        
        let { buildDotNetRenderer } = await import('./renderer');
        return await buildDotNetRenderer(this.component.renderer);
    }
    
    async setRenderer(value: any): Promise<void> {
        let { buildJsRenderer } = await import('./renderer');
        this.component.renderer = await  buildJsRenderer(value, this.layerId, this.viewId);
    }
    
    async getSource(): Promise<any> {
        if (!hasValue(this.component.source)) {
            return null;
        }
        
        let { buildDotNetDynamicLayer } = await import('./dynamicLayer');
        return await buildDotNetDynamicLayer(this.component.source);
    }
    
    async setSource(value: any): Promise<void> {
        let { buildJsDynamicLayer } = await import('./dynamicLayer');
        this.component.source = await  buildJsDynamicLayer(value, this.layerId, this.viewId);
    }
    
    async getSublayers(): Promise<any> {
        if (!hasValue(this.component.sublayers)) {
            return null;
        }
        
        let { buildDotNetSublayer } = await import('./sublayer');
        return await Promise.all(this.component.sublayers.map(async i => await buildDotNetSublayer(i, this.layerId, this.viewId)));
    }
    
    async setSublayers(value: any): Promise<void> {
        let { buildJsSublayer } = await import('./sublayer');
        this.component.sublayers = await Promise.all(value.map(async i => await buildJsSublayer(i, this.layerId, this.viewId))) as any;
    }
    
    async getTypes(): Promise<any> {
        if (!hasValue(this.component.types)) {
            return null;
        }
        
        let { buildDotNetFeatureType } = await import('./featureType');
        return await Promise.all(this.component.types.map(async i => await buildDotNetFeatureType(i, this.layerId, this.viewId)));
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsSublayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.floorInfo)) {
        let { buildJsLayerFloorInfo } = await import('./layerFloorInfo');
        properties.floorInfo = await buildJsLayerFloorInfo(dotNetObject.floorInfo, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.labelingInfo) && dotNetObject.labelingInfo.length > 0) {
        let { buildJsLabel } = await import('./label');
        properties.labelingInfo = await Promise.all(dotNetObject.labelingInfo.map(async i => await buildJsLabel(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.popupTemplate)) {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        properties.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsRenderer } = await import('./renderer');
        properties.renderer = await buildJsRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.source)) {
        let { buildJsDynamicLayer } = await import('./dynamicLayer');
        properties.source = await buildJsDynamicLayer(dotNetObject.source, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.definitionExpression)) {
        properties.definitionExpression = dotNetObject.definitionExpression;
    }
    if (hasValue(dotNetObject.labelsVisible)) {
        properties.labelsVisible = dotNetObject.labelsVisible;
    }
    if (hasValue(dotNetObject.legendEnabled)) {
        properties.legendEnabled = dotNetObject.legendEnabled;
    }
    if (hasValue(dotNetObject.listMode)) {
        properties.listMode = dotNetObject.listMode;
    }
    if (hasValue(dotNetObject.maxScale)) {
        properties.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.minScale)) {
        properties.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.opacity)) {
        properties.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        properties.popupEnabled = dotNetObject.popupEnabled;
    }
    if (hasValue(dotNetObject.sublayerId)) {
        properties.id = dotNetObject.sublayerId;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.url)) {
        properties.url = dotNetObject.url;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    let jsSublayer = new Sublayer(properties);

    let { default: SublayerWrapper } = await import('./sublayer');
    let sublayerWrapper = new SublayerWrapper(jsSublayer);
    sublayerWrapper.geoBlazorId = dotNetObject.id;
    sublayerWrapper.viewId = viewId;
    sublayerWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(sublayerWrapper);
    jsObjectRefs[dotNetObject.id] = sublayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsSublayer;
    
    let { buildDotNetSublayer } = await import('./sublayer');
    let dnInstantiatedObject = await buildDotNetSublayer(jsSublayer, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type Sublayer detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Sublayer', e);
    }
    
    return jsSublayer;
}


export async function buildDotNetSublayerGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSublayer: any = {};
    
    if (hasValue(jsObject.fields)) {
        let { buildDotNetField } = await import('./field');
        dotNetSublayer.fields = jsObject.fields.map(i => buildDotNetField(i));
    }
    
    if (hasValue(jsObject.fieldsIndex)) {
        let { buildDotNetFieldsIndex } = await import('./fieldsIndex');
        dotNetSublayer.fieldsIndex = await buildDotNetFieldsIndex(jsObject.fieldsIndex, layerId, viewId);
    }
    
    if (hasValue(jsObject.floorInfo)) {
        let { buildDotNetLayerFloorInfo } = await import('./layerFloorInfo');
        dotNetSublayer.floorInfo = await buildDotNetLayerFloorInfo(jsObject.floorInfo, layerId, viewId);
    }
    
    if (hasValue(jsObject.fullExtent)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetSublayer.fullExtent = buildDotNetExtent(jsObject.fullExtent);
    }
    
    if (hasValue(jsObject.labelingInfo)) {
        let { buildDotNetLabel } = await import('./label');
        dotNetSublayer.labelingInfo = await Promise.all(jsObject.labelingInfo.map(async i => await buildDotNetLabel(i)));
    }
    
    if (hasValue(jsObject.popupTemplate)) {
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        dotNetSublayer.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
    }
    
    if (hasValue(jsObject.renderer)) {
        let { buildDotNetRenderer } = await import('./renderer');
        dotNetSublayer.renderer = await buildDotNetRenderer(jsObject.renderer);
    }
    
    if (hasValue(jsObject.source)) {
        let { buildDotNetDynamicLayer } = await import('./dynamicLayer');
        dotNetSublayer.source = await buildDotNetDynamicLayer(jsObject.source);
    }
    
    if (hasValue(jsObject.types)) {
        let { buildDotNetFeatureType } = await import('./featureType');
        dotNetSublayer.types = await Promise.all(jsObject.types.map(async i => await buildDotNetFeatureType(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.capabilities)) {
        dotNetSublayer.capabilities = jsObject.capabilities;
    }
    
    if (hasValue(jsObject.definitionExpression)) {
        dotNetSublayer.definitionExpression = jsObject.definitionExpression;
    }
    
    if (hasValue(jsObject.isTable)) {
        dotNetSublayer.isTable = jsObject.isTable;
    }
    
    if (hasValue(jsObject.labelsVisible)) {
        dotNetSublayer.labelsVisible = jsObject.labelsVisible;
    }
    
    if (hasValue(jsObject.legendEnabled)) {
        dotNetSublayer.legendEnabled = jsObject.legendEnabled;
    }
    
    if (hasValue(jsObject.listMode)) {
        dotNetSublayer.listMode = jsObject.listMode;
    }
    
    if (hasValue(jsObject.maxScale)) {
        dotNetSublayer.maxScale = jsObject.maxScale;
    }
    
    if (hasValue(jsObject.minScale)) {
        dotNetSublayer.minScale = jsObject.minScale;
    }
    
    if (hasValue(jsObject.objectIdField)) {
        dotNetSublayer.objectIdField = jsObject.objectIdField;
    }
    
    if (hasValue(jsObject.opacity)) {
        dotNetSublayer.opacity = jsObject.opacity;
    }
    
    if (hasValue(jsObject.popupEnabled)) {
        dotNetSublayer.popupEnabled = jsObject.popupEnabled;
    }
    
    if (hasValue(jsObject.relationships)) {
        dotNetSublayer.relationships = jsObject.relationships;
    }
    
    if (hasValue(jsObject.spatialReference)) {
        dotNetSublayer.spatialReference = jsObject.spatialReference;
    }
    
    if (hasValue(jsObject.id)) {
        dotNetSublayer.sublayerId = jsObject.id;
    }
    
    if (hasValue(jsObject.title)) {
        dotNetSublayer.title = jsObject.title;
    }
    
    if (hasValue(jsObject.typeIdField)) {
        dotNetSublayer.typeIdField = jsObject.typeIdField;
    }
    
    if (hasValue(jsObject.url)) {
        dotNetSublayer.url = jsObject.url;
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetSublayer.visible = jsObject.visible;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSublayer.id = geoBlazorId;
    }

    return dotNetSublayer;
}

