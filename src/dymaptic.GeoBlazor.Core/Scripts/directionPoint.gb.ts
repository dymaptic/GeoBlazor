// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import DirectionPoint from '@arcgis/core/rest/support/DirectionPoint';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class DirectionPointGenerated implements IPropertyWrapper {
    public component: DirectionPoint;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: DirectionPoint) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async toGraphic(): Promise<any> {
        return this.component.toGraphic();
    }

    // region properties
    
    async getGeometry(): Promise<any> {
        if (!hasValue(this.component.geometry)) {
            return null;
        }
        
        let { buildDotNetPoint } = await import('./point');
        return buildDotNetPoint(this.component.geometry);
    }
    async setGeometry(value: any): Promise<void> {
        let { buildJsPoint } = await import('./point');
        this.component.geometry =  buildJsPoint(value);
    }
    async getPopupTemplate(): Promise<any> {
        if (!hasValue(this.component.popupTemplate)) {
            return null;
        }
        
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        return await buildDotNetPopupTemplate(this.component.popupTemplate);
    }
    async setPopupTemplate(value: any): Promise<void> {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        this.component.popupTemplate =  buildJsPopupTemplate(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsDirectionPointGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsDirectionPoint = new DirectionPoint();
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsPoint } = await import('./point');
        jsDirectionPoint.geometry = buildJsPoint(dotNetObject.geometry) as any;
    }
    if (hasValue(dotNetObject.popupTemplate)) {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        jsDirectionPoint.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.arrivalTime)) {
        jsDirectionPoint.arrivalTime = dotNetObject.arrivalTime;
    }
    if (hasValue(dotNetObject.arrivalTimeOffset)) {
        jsDirectionPoint.arrivalTimeOffset = dotNetObject.arrivalTimeOffset;
    }
    if (hasValue(dotNetObject.directionPointType)) {
        jsDirectionPoint.directionPointType = dotNetObject.directionPointType;
    }
    if (hasValue(dotNetObject.displayText)) {
        jsDirectionPoint.displayText = dotNetObject.displayText;
    }
    if (hasValue(dotNetObject.sequence)) {
        jsDirectionPoint.sequence = dotNetObject.sequence;
    }

    let { default: DirectionPointWrapper } = await import('./directionPoint');
    let directionPointWrapper = new DirectionPointWrapper(jsDirectionPoint);
    directionPointWrapper.geoBlazorId = dotNetObject.id;
    directionPointWrapper.viewId = viewId;
    directionPointWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(directionPointWrapper);
    jsObjectRefs[dotNetObject.id] = directionPointWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsDirectionPoint;
    let { buildDotNetDirectionPoint } = await import('./directionPoint');
    let dnInstantiatedObject = await buildDotNetDirectionPoint(jsDirectionPoint);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DirectionPoint', e);
    }
    
    return jsDirectionPoint;
}
export async function buildDotNetDirectionPointGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDirectionPoint: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.geometry)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetDirectionPoint.geometry = buildDotNetPoint(jsObject.geometry);
        }
        if (hasValue(jsObject.popupTemplate)) {
            let { buildDotNetPopupTemplate } = await import('./popupTemplate');
            dotNetDirectionPoint.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
        }
        if (hasValue(jsObject.arrivalTime)) {
            dotNetDirectionPoint.arrivalTime = jsObject.arrivalTime;
        }
        if (hasValue(jsObject.arrivalTimeOffset)) {
            dotNetDirectionPoint.arrivalTimeOffset = jsObject.arrivalTimeOffset;
        }
        if (hasValue(jsObject.directionPointType)) {
            dotNetDirectionPoint.directionPointType = jsObject.directionPointType;
        }
        if (hasValue(jsObject.displayText)) {
            dotNetDirectionPoint.displayText = jsObject.displayText;
        }
        if (hasValue(jsObject.sequence)) {
            dotNetDirectionPoint.sequence = jsObject.sequence;
        }
        if (hasValue(jsObject.type)) {
            dotNetDirectionPoint.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetDirectionPoint.id = k;
                break;
            }
        }
    }

    return dotNetDirectionPoint;
}

