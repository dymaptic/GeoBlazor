// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ListItemPanel from '@arcgis/core/widgets/LayerList/ListItemPanel';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ListItemPanelWidgetGenerated implements IPropertyWrapper {
    public widget: ListItemPanel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: ListItemPanel) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    
    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async own(handleOrHandles: any): Promise<void> {
        let { buildJsWatchHandle } = await import('./watchHandle');
        let jsHandleOrHandles = await buildJsWatchHandle(handleOrHandles, this.layerId, this.viewId) as any;
        this.widget.own(jsHandleOrHandles);
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async render(): Promise<any> {
        return this.widget.render();
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async when(callback: any,
        errback: any): Promise<any> {
        return await this.widget.when(callback,
            errback);
    }

    // region properties
    
    async getListItem(): Promise<any> {
        if (!hasValue(this.widget.listItem)) {
            return null;
        }
        
        let { buildDotNetListItem } = await import('./listItem');
        return await buildDotNetListItem(this.widget.listItem);
    }
    async setListItem(value: any): Promise<void> {
        let { buildJsListItem } = await import('./listItem');
        this.widget.listItem = await  buildJsListItem(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsListItemPanelWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.listItem)) {
        let { buildJsListItem } = await import('./listItem');
        properties.listItem = await buildJsListItem(dotNetObject.listItem, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.className)) {
        properties.className = dotNetObject.className;
    }
    if (hasValue(dotNetObject.container)) {
        properties.container = dotNetObject.container;
    }
    if (hasValue(dotNetObject.content)) {
        properties.content = dotNetObject.content;
    }
    if (hasValue(dotNetObject.disabled)) {
        properties.disabled = dotNetObject.disabled;
    }
    if (hasValue(dotNetObject.flowEnabled)) {
        properties.flowEnabled = dotNetObject.flowEnabled;
    }
    if (hasValue(dotNetObject.icon)) {
        properties.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.image)) {
        properties.image = dotNetObject.image;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.open)) {
        properties.open = dotNetObject.open;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.widgetId)) {
        properties.id = dotNetObject.widgetId;
    }
    let jsListItemPanel = new ListItemPanel(properties);

    let { default: ListItemPanelWidgetWrapper } = await import('./listItemPanelWidget');
    let listItemPanelWidgetWrapper = new ListItemPanelWidgetWrapper(jsListItemPanel);
    listItemPanelWidgetWrapper.geoBlazorId = dotNetObject.id;
    listItemPanelWidgetWrapper.viewId = viewId;
    listItemPanelWidgetWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(listItemPanelWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = listItemPanelWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsListItemPanel;
    let { buildDotNetListItemPanelWidget } = await import('./listItemPanelWidget');
    let dnInstantiatedObject = await buildDotNetListItemPanelWidget(jsListItemPanel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ListItemPanelWidget', e);
    }
    
    return jsListItemPanel;
}

export async function buildDotNetListItemPanelWidgetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetListItemPanelWidget: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.listItem)) {
            let { buildDotNetListItem } = await import('./listItem');
            dotNetListItemPanelWidget.listItem = await buildDotNetListItem(jsObject.listItem);
        }
    if (hasValue(jsObject.className)) {
        dotNetListItemPanelWidget.className = jsObject.className;
    }
    if (hasValue(jsObject.container)) {
        dotNetListItemPanelWidget.container = jsObject.container;
    }
    if (hasValue(jsObject.content)) {
        dotNetListItemPanelWidget.content = jsObject.content;
    }
    if (hasValue(jsObject.disabled)) {
        dotNetListItemPanelWidget.disabled = jsObject.disabled;
    }
    if (hasValue(jsObject.flowEnabled)) {
        dotNetListItemPanelWidget.flowEnabled = jsObject.flowEnabled;
    }
    if (hasValue(jsObject.icon)) {
        dotNetListItemPanelWidget.icon = jsObject.icon;
    }
    if (hasValue(jsObject.image)) {
        dotNetListItemPanelWidget.image = jsObject.image;
    }
    if (hasValue(jsObject.label)) {
        dotNetListItemPanelWidget.label = jsObject.label;
    }
    if (hasValue(jsObject.open)) {
        dotNetListItemPanelWidget.open = jsObject.open;
    }
    if (hasValue(jsObject.title)) {
        dotNetListItemPanelWidget.title = jsObject.title;
    }
    if (hasValue(jsObject.type)) {
        dotNetListItemPanelWidget.type = jsObject.type;
    }
    if (hasValue(jsObject.id)) {
        dotNetListItemPanelWidget.widgetId = jsObject.id;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetListItemPanelWidget.id = k;
                break;
            }
        }
    }

    return dotNetListItemPanelWidget;
}

