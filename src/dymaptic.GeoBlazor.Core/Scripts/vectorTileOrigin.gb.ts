// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetVectorTileOrigin } from './vectorTileOrigin';

export async function buildJsVectorTileOriginGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsVectorTileOrigin: any = {};
    if (hasValue(dotNetObject.layer)) {
        let { buildJsVectorTileLayer } = await import('./vectorTileLayer');
        jsVectorTileOrigin.layer = await buildJsVectorTileLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.layerId)) {
        jsVectorTileOrigin.layerId = dotNetObject.layerId;
    }
    if (hasValue(dotNetObject.layerIndex)) {
        jsVectorTileOrigin.layerIndex = dotNetObject.layerIndex;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsVectorTileOrigin);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsVectorTileOrigin;
    
    return jsVectorTileOrigin;
}


export async function buildDotNetVectorTileOriginGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsVectorTileOrigin } = await import('./vectorTileOrigin');
        jsComponentRef = await buildJsVectorTileOrigin(jsObject, layerId, viewId);
    }
    
    let dotNetVectorTileOrigin: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.layerId)) {
        dotNetVectorTileOrigin.layerId = jsObject.layerId;
    }
    if (hasValue(jsObject.layerIndex)) {
        dotNetVectorTileOrigin.layerIndex = jsObject.layerIndex;
    }
    if (hasValue(jsObject.type)) {
        dotNetVectorTileOrigin.type = jsObject.type;
    }

    return dotNetVectorTileOrigin;
}

