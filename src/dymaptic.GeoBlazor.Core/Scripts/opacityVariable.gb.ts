// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import OpacityVariable from '@arcgis/core/renderers/visualVariables/OpacityVariable';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class OpacityVariableGenerated implements IPropertyWrapper {
    public component: OpacityVariable;
    public readonly geoBlazorId: string = '';

    constructor(component: OpacityVariable) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getLegendOptions(): Promise<any> {
        let { buildDotNetVisualVariableLegendOptions } = await import('./visualVariableLegendOptions');
        return await buildDotNetVisualVariableLegendOptions(this.component.legendOptions);
    }
    async setLegendOptions(value: any): Promise<void> {
        let { buildJsVisualVariableLegendOptions } = await import('./visualVariableLegendOptions');
        this.component.legendOptions = await buildJsVisualVariableLegendOptions(value);
    }
    async getStops(): Promise<any> {
        let { buildDotNetOpacityStop } = await import('./opacityStop');
        return this.component.stops.map(async i => await buildDotNetOpacityStop(i));
    }
    
    async setStops(value: any): Promise<void> {
        let { buildJsOpacityStop } = await import('./opacityStop');
        this.component.stops = value.map(async i => await buildJsOpacityStop(i));
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}
export async function buildJsOpacityVariableGenerated(dotNetObject: any): Promise<any> {
    let { default: OpacityVariable } = await import('@arcgis/core/renderers/visualVariables/OpacityVariable');
    let jsOpacityVariable = new OpacityVariable();
    if (hasValue(dotNetObject.legendOptions)) {
        let { buildJsVisualVariableLegendOptions } = await import('visualVariableLegendOptions');
        jsOpacityVariable.legendOptions = await buildJsVisualVariableLegendOptions(dotNetObject.legendOptions) as any;

    }
    if (hasValue(dotNetObject.stops)) {
        let { buildJsOpacityStop } = await import('opacityStop');
        jsOpacityVariable.stops = dotNetObject.stops.map(async i => await buildJsOpacityStop(i)) as any;

    }
    if (hasValue(dotNetObject.field)) {
        jsOpacityVariable.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.normalizationField)) {
        jsOpacityVariable.normalizationField = dotNetObject.normalizationField;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        jsOpacityVariable.valueExpression = dotNetObject.valueExpression;
    }
    if (hasValue(dotNetObject.valueExpressionTitle)) {
        jsOpacityVariable.valueExpressionTitle = dotNetObject.valueExpressionTitle;
    }
    let { default: OpacityVariableWrapper } = await import('./opacityVariable');
    let opacityVariableWrapper = new OpacityVariableWrapper(jsOpacityVariable);
    jsOpacityVariable.id = dotNetObject.id;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(opacityVariableWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = opacityVariableWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsOpacityVariable;
    
    return jsOpacityVariable;
}

export async function buildDotNetOpacityVariableGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetOpacityVariable: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.legendOptions)) {
            let { buildDotNetVisualVariableLegendOptions } = await import('./visualVariableLegendOptions');
            dotNetOpacityVariable.legendOptions = await buildDotNetVisualVariableLegendOptions(jsObject.legendOptions);
        }
        if (hasValue(jsObject.stops)) {
            let { buildDotNetOpacityStop } = await import('./opacityStop');
            dotNetOpacityVariable.stops = jsObject.stops.map(async i => await buildDotNetOpacityStop(i));
        }
        dotNetOpacityVariable.field = jsObject.field;
        dotNetOpacityVariable.normalizationField = jsObject.normalizationField;
        dotNetOpacityVariable.type = jsObject.type;
        dotNetOpacityVariable.valueExpression = jsObject.valueExpression;
        dotNetOpacityVariable.valueExpressionTitle = jsObject.valueExpressionTitle;
    return dotNetOpacityVariable;
}

