// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import OpacityVariable from '@arcgis/core/renderers/visualVariables/OpacityVariable';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetOpacityVariable } from './opacityVariable';

export async function buildJsOpacityVariableGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.legendOptions)) {
        let { buildJsVisualVariableLegendOptions } = await import('./visualVariableLegendOptions');
        properties.legendOptions = await buildJsVisualVariableLegendOptions(dotNetObject.legendOptions, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.stops) && dotNetObject.stops.length > 0) {
        let { buildJsOpacityStop } = await import('./opacityStop');
        properties.stops = await Promise.all(dotNetObject.stops.map(async i => await buildJsOpacityStop(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.field)) {
        properties.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.normalizationField)) {
        properties.normalizationField = dotNetObject.normalizationField;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        properties.valueExpression = dotNetObject.valueExpression;
    }
    if (hasValue(dotNetObject.valueExpressionTitle)) {
        properties.valueExpressionTitle = dotNetObject.valueExpressionTitle;
    }
    let jsOpacityVariable = new OpacityVariable(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsOpacityVariable);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsOpacityVariable;
    
    try {
        let { buildDotNetOpacityVariable } = await import('./opacityVariable');
        let dnInstantiatedObject = await buildDotNetOpacityVariable(jsOpacityVariable, layerId, viewId);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type OpacityVariable detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for OpacityVariable', e);
    }
    
    return jsOpacityVariable;
}


export async function buildDotNetOpacityVariableGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetOpacityVariable: any = {};
    
    if (hasValue(jsObject.legendOptions)) {
        let { buildDotNetVisualVariableLegendOptions } = await import('./visualVariableLegendOptions');
        dotNetOpacityVariable.legendOptions = await buildDotNetVisualVariableLegendOptions(jsObject.legendOptions, layerId, viewId);
    }
    
    if (hasValue(jsObject.stops)) {
        let { buildDotNetOpacityStop } = await import('./opacityStop');
        dotNetOpacityVariable.stops = await Promise.all(jsObject.stops.map(async i => await buildDotNetOpacityStop(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.field)) {
        dotNetOpacityVariable.field = jsObject.field;
    }
    
    if (hasValue(jsObject.normalizationField)) {
        dotNetOpacityVariable.normalizationField = jsObject.normalizationField;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetOpacityVariable.type = jsObject.type;
    }
    
    if (hasValue(jsObject.valueExpression)) {
        dotNetOpacityVariable.valueExpression = jsObject.valueExpression;
    }
    
    if (hasValue(jsObject.valueExpressionTitle)) {
        dotNetOpacityVariable.valueExpressionTitle = jsObject.valueExpressionTitle;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetOpacityVariable.id = geoBlazorId;
    }

    return dotNetOpacityVariable;
}

