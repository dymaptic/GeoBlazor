// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import OpacityVariable from '@arcgis/core/renderers/visualVariables/OpacityVariable';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetOpacityVariable } from './opacityVariable';

export async function buildJsOpacityVariableGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.legendOptions)) {
        let { buildJsVisualVariableLegendOptions } = await import('./visualVariableLegendOptions');
        properties.legendOptions = await buildJsVisualVariableLegendOptions(dotNetObject.legendOptions) as any;
    }
    if (hasValue(dotNetObject.stops) && dotNetObject.stops.length > 0) {
        let { buildJsOpacityStop } = await import('./opacityStop');
        properties.stops = await Promise.all(dotNetObject.stops.map(async i => await buildJsOpacityStop(i))) as any;
    }

    if (hasValue(dotNetObject.field)) {
        properties.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.normalizationField)) {
        properties.normalizationField = dotNetObject.normalizationField;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        properties.valueExpression = dotNetObject.valueExpression;
    }
    if (hasValue(dotNetObject.valueExpressionTitle)) {
        properties.valueExpressionTitle = dotNetObject.valueExpressionTitle;
    }
    let jsOpacityVariable = new OpacityVariable(properties);
    
    jsObjectRefs[dotNetObject.id] = jsOpacityVariable;
    arcGisObjectRefs[dotNetObject.id] = jsOpacityVariable;
    
    return jsOpacityVariable;
}


export async function buildDotNetOpacityVariableGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetOpacityVariable: any = {};
    
    if (hasValue(jsObject.legendOptions)) {
        let { buildDotNetVisualVariableLegendOptions } = await import('./visualVariableLegendOptions');
        dotNetOpacityVariable.legendOptions = await buildDotNetVisualVariableLegendOptions(jsObject.legendOptions);
    }
    
    if (hasValue(jsObject.stops)) {
        let { buildDotNetOpacityStop } = await import('./opacityStop');
        dotNetOpacityVariable.stops = await Promise.all(jsObject.stops.map(async i => await buildDotNetOpacityStop(i)));
    }
    
    if (hasValue(jsObject.field)) {
        dotNetOpacityVariable.field = jsObject.field;
    }
    
    if (hasValue(jsObject.normalizationField)) {
        dotNetOpacityVariable.normalizationField = jsObject.normalizationField;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetOpacityVariable.type = removeCircularReferences(jsObject.type);
    }
    
    if (hasValue(jsObject.valueExpression)) {
        dotNetOpacityVariable.valueExpression = jsObject.valueExpression;
    }
    
    if (hasValue(jsObject.valueExpressionTitle)) {
        dotNetOpacityVariable.valueExpressionTitle = jsObject.valueExpressionTitle;
    }

    return dotNetOpacityVariable;
}

