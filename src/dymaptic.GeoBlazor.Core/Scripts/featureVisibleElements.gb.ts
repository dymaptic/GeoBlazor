// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetFeatureVisibleElements } from './featureVisibleElements';

export async function buildJsFeatureVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureVisibleElements: any = {};

    if (hasValue(dotNetObject.content)) {
        jsFeatureVisibleElements.content = dotNetObject.content;
    }
    if (hasValue(dotNetObject.lastEditedInfo)) {
        jsFeatureVisibleElements.lastEditedInfo = dotNetObject.lastEditedInfo;
    }
    if (hasValue(dotNetObject.title)) {
        jsFeatureVisibleElements.title = dotNetObject.title;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureVisibleElements);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureVisibleElements;
    
    let { buildDotNetFeatureVisibleElements } = await import('./featureVisibleElements');
    let dnInstantiatedObject = await buildDotNetFeatureVisibleElements(jsFeatureVisibleElements);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type FeatureVisibleElements detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureVisibleElements', e);
    }
    
    return jsFeatureVisibleElements;
}


export async function buildDotNetFeatureVisibleElementsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureVisibleElements: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.content)) {
        dotNetFeatureVisibleElements.content = jsObject.content;
    }
    if (hasValue(jsObject.lastEditedInfo)) {
        dotNetFeatureVisibleElements.lastEditedInfo = jsObject.lastEditedInfo;
    }
    if (hasValue(jsObject.title)) {
        dotNetFeatureVisibleElements.title = jsObject.title;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetFeatureVisibleElements.id = geoBlazorId;
    }

    return dotNetFeatureVisibleElements;
}

