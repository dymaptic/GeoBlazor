// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import FeatureVisibleElements = __esri.FeatureVisibleElements;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FeatureVisibleElementsGenerated implements IPropertyWrapper {
    public component: FeatureVisibleElements;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: FeatureVisibleElements) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsFeatureVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureVisibleElements: any = {}

    if (hasValue(dotNetObject.content)) {
        jsFeatureVisibleElements.content = dotNetObject.content;
    }
    if (hasValue(dotNetObject.lastEditedInfo)) {
        jsFeatureVisibleElements.lastEditedInfo = dotNetObject.lastEditedInfo;
    }
    if (hasValue(dotNetObject.title)) {
        jsFeatureVisibleElements.title = dotNetObject.title;
    }
    let { default: FeatureVisibleElementsWrapper } = await import('./featureVisibleElements');
    let featureVisibleElementsWrapper = new FeatureVisibleElementsWrapper(jsFeatureVisibleElements);
    featureVisibleElementsWrapper.geoBlazorId = dotNetObject.id;
    featureVisibleElementsWrapper.viewId = viewId;
    featureVisibleElementsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(featureVisibleElementsWrapper);
    jsObjectRefs[dotNetObject.id] = featureVisibleElementsWrapper;

    arcGisObjectRefs[dotNetObject.id] = jsFeatureVisibleElements;
    let { buildDotNetFeatureVisibleElements } = await import('./featureVisibleElements');
    let dnInstantiatedObject = await buildDotNetFeatureVisibleElements(jsFeatureVisibleElements, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureVisibleElements', e);
    }
    
    return jsFeatureVisibleElements;
}

export async function buildDotNetFeatureVisibleElementsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureVisibleElements: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.content)) {
            dotNetFeatureVisibleElements.content = jsObject.content;
        }
        if (hasValue(jsObject.lastEditedInfo)) {
            dotNetFeatureVisibleElements.lastEditedInfo = jsObject.lastEditedInfo;
        }
        if (hasValue(jsObject.title)) {
            dotNetFeatureVisibleElements.title = jsObject.title;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFeatureVisibleElements.id = k;
                break;
            }
        }
    }

    return dotNetFeatureVisibleElements;
}

