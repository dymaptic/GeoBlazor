// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import KMLSublayer from '@arcgis/core/layers/support/KMLSublayer';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetKMLSublayer } from './kMLSublayer';

export async function buildJsKMLSublayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.description)) {
        properties.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.kMLSublayerId)) {
        properties.id = dotNetObject.kMLSublayerId;
    }
    if (hasValue(dotNetObject.networkLink)) {
        properties.networkLink = dotNetObject.networkLink;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    let jsKMLSublayer = new KMLSublayer(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsKMLSublayer);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsKMLSublayer;
    
    let dnInstantiatedObject = await buildDotNetKMLSublayer(jsKMLSublayer);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for KMLSublayer', e);
    }
    
    return jsKMLSublayer;
}

export async function buildDotNetKMLSublayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetKMLSublayer: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.description)) {
        dotNetKMLSublayer.description = jsObject.description;
    }
    if (hasValue(jsObject.id)) {
        dotNetKMLSublayer.kMLSublayerId = jsObject.id;
    }
    if (hasValue(jsObject.networkLink)) {
        dotNetKMLSublayer.networkLink = jsObject.networkLink;
    }
    if (hasValue(jsObject.title)) {
        dotNetKMLSublayer.title = jsObject.title;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetKMLSublayer.id = k;
                break;
            }
        }
    }

    return dotNetKMLSublayer;
}

