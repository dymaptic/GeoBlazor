// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import KMLSublayer from '@arcgis/core/layers/support/KMLSublayer';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, generateSerializableJson } from './arcGisJsInterop';

export async function buildJsKMLSublayerGenerated(dotNetObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.description)) {
        properties.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.kMLSublayerId)) {
        properties.id = dotNetObject.kMLSublayerId;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    let jsKMLSublayer = new KMLSublayer(properties);
    
    jsObjectRefs[dotNetObject.id] = jsKMLSublayer;
    arcGisObjectRefs[dotNetObject.id] = jsKMLSublayer;
    
    return jsKMLSublayer;
}


export async function buildDotNetKMLSublayerGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetKMLSublayer: any = {};
    
    if (hasValue(jsObject.description)) {
        dotNetKMLSublayer.description = jsObject.description;
    }
    
    if (hasValue(jsObject.id)) {
        dotNetKMLSublayer.kMLSublayerId = jsObject.id;
    }
    
    if (hasValue(jsObject.networkLink)) {
        dotNetKMLSublayer.networkLink = generateSerializableJson(jsObject.networkLink);
    }
    
    if (hasValue(jsObject.title)) {
        dotNetKMLSublayer.title = jsObject.title;
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetKMLSublayer.visible = jsObject.visible;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetKMLSublayer.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetKMLSublayer.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetKMLSublayer.id)) {
        jsObjectRefs[dotNetKMLSublayer.id] ??= jsObject;
        arcGisObjectRefs[dotNetKMLSublayer.id] ??= jsObject;
    }

    return dotNetKMLSublayer;
}

