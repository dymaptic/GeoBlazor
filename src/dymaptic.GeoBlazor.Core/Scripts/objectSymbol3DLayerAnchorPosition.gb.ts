// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetObjectSymbol3DLayerAnchorPosition } from './objectSymbol3DLayerAnchorPosition';

export async function buildJsObjectSymbol3DLayerAnchorPositionGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsObjectSymbol3DLayerAnchorPosition: any = {};

    if (hasValue(dotNetObject.x)) {
        jsObjectSymbol3DLayerAnchorPosition.x = dotNetObject.x;
    }
    if (hasValue(dotNetObject.y)) {
        jsObjectSymbol3DLayerAnchorPosition.y = dotNetObject.y;
    }
    if (hasValue(dotNetObject.z)) {
        jsObjectSymbol3DLayerAnchorPosition.z = dotNetObject.z;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsObjectSymbol3DLayerAnchorPosition);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsObjectSymbol3DLayerAnchorPosition;
    
    return jsObjectSymbol3DLayerAnchorPosition;
}


export async function buildDotNetObjectSymbol3DLayerAnchorPositionGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetObjectSymbol3DLayerAnchorPosition: any = {};
    
    if (hasValue(jsObject.x)) {
        dotNetObjectSymbol3DLayerAnchorPosition.x = jsObject.x;
    }
    
    if (hasValue(jsObject.y)) {
        dotNetObjectSymbol3DLayerAnchorPosition.y = jsObject.y;
    }
    
    if (hasValue(jsObject.z)) {
        dotNetObjectSymbol3DLayerAnchorPosition.z = jsObject.z;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetObjectSymbol3DLayerAnchorPosition.id = geoBlazorId;
    }

    return dotNetObjectSymbol3DLayerAnchorPosition;
}

