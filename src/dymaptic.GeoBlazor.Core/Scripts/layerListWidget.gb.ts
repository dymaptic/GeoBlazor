// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import LayerList from '@arcgis/core/widgets/LayerList';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, buildJsStreamReference } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class LayerListWidgetGenerated implements IPropertyWrapper {
    public widget: LayerList;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: LayerList) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.catalogOptions)) {
            let { buildJsLayerListCatalogOptions } = await import('./layerListCatalogOptions');
            this.widget.catalogOptions = await buildJsLayerListCatalogOptions(dotNetObject.catalogOptions) as any;
        }
        if (hasValue(dotNetObject.knowledgeGraphOptions)) {
            let { buildJsLayerListKnowledgeGraphOptions } = await import('./layerListKnowledgeGraphOptions');
            this.widget.knowledgeGraphOptions = await buildJsLayerListKnowledgeGraphOptions(dotNetObject.knowledgeGraphOptions) as any;
        }
        if (hasValue(dotNetObject.selectedItems) && dotNetObject.selectedItems.length > 0) {
            let { buildJsListItem } = await import('./listItem');
            this.widget.selectedItems = await Promise.all(dotNetObject.selectedItems.map(async i => await buildJsListItem(i, this.layerId, this.viewId))) as any;
        }
        if (hasValue(dotNetObject.visibleElements)) {
            let { buildJsLayerListVisibleElements } = await import('./layerListVisibleElements');
            this.widget.visibleElements = await buildJsLayerListVisibleElements(dotNetObject.visibleElements) as any;
        }

        if (hasValue(dotNetObject.collapsed)) {
            this.widget.collapsed = dotNetObject.collapsed;
        }
        if (hasValue(dotNetObject.dragEnabled)) {
            this.widget.dragEnabled = dotNetObject.dragEnabled;
        }
        if (hasValue(dotNetObject.filterPlaceholder)) {
            this.widget.filterPlaceholder = dotNetObject.filterPlaceholder;
        }
        if (hasValue(dotNetObject.filterText)) {
            this.widget.filterText = dotNetObject.filterText;
        }
        if (hasValue(dotNetObject.headingLevel)) {
            this.widget.headingLevel = dotNetObject.headingLevel;
        }
        if (hasValue(dotNetObject.icon)) {
            this.widget.icon = dotNetObject.icon;
        }
        if (hasValue(dotNetObject.label)) {
            this.widget.label = dotNetObject.label;
        }
        if (hasValue(dotNetObject.minDragEnabledItems)) {
            this.widget.minDragEnabledItems = dotNetObject.minDragEnabledItems;
        }
        if (hasValue(dotNetObject.minFilterItems)) {
            this.widget.minFilterItems = dotNetObject.minFilterItems;
        }
        if (hasValue(dotNetObject.multipleSelectionEnabled)) {
            this.widget.multipleSelectionEnabled = dotNetObject.multipleSelectionEnabled;
        }
        if (hasValue(dotNetObject.selectionEnabled)) {
            this.widget.selectionEnabled = dotNetObject.selectionEnabled;
        }
        if (hasValue(dotNetObject.selectionMode)) {
            this.widget.selectionMode = dotNetObject.selectionMode;
        }
        if (hasValue(dotNetObject.visibilityAppearance)) {
            this.widget.visibilityAppearance = dotNetObject.visibilityAppearance;
        }
        if (hasValue(dotNetObject.visible)) {
            this.widget.visible = dotNetObject.visible;
        }
        if (hasValue(dotNetObject.widgetId)) {
            this.widget.id = dotNetObject.widgetId;
        }
    }
    
    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async own(handleOrHandles: any): Promise<void> {
        let { buildJsWatchHandle } = await import('./watchHandle');
        let jsHandleOrHandles = await buildJsWatchHandle(handleOrHandles, this.layerId, this.viewId) as any;
        this.widget.own(jsHandleOrHandles);
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async render(): Promise<any> {
        return this.widget.render();
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async triggerAction(action: any,
        item: any): Promise<void> {
        let { buildJsActionBase } = await import('./actionBase');
        let jsAction = buildJsActionBase(action) as any;
        let { buildJsListItem } = await import('./listItem');
        let jsItem = await buildJsListItem(item, this.layerId, this.viewId) as any;
        this.widget.triggerAction(jsAction,
            jsItem);
    }

    async when(callback: any,
        errback: any): Promise<any> {
        return await this.widget.when(callback,
            errback);
    }

    // region properties
    
    async getCatalogOptions(): Promise<any> {
        if (!hasValue(this.widget.catalogOptions)) {
            return null;
        }
        
        let { buildDotNetLayerListCatalogOptions } = await import('./layerListCatalogOptions');
        return await buildDotNetLayerListCatalogOptions(this.widget.catalogOptions);
    }
    
    async setCatalogOptions(value: any): Promise<void> {
        let { buildJsLayerListCatalogOptions } = await import('./layerListCatalogOptions');
        this.widget.catalogOptions = await  buildJsLayerListCatalogOptions(value);
    }
    
    async getKnowledgeGraphOptions(): Promise<any> {
        if (!hasValue(this.widget.knowledgeGraphOptions)) {
            return null;
        }
        
        let { buildDotNetLayerListKnowledgeGraphOptions } = await import('./layerListKnowledgeGraphOptions');
        return await buildDotNetLayerListKnowledgeGraphOptions(this.widget.knowledgeGraphOptions);
    }
    
    async setKnowledgeGraphOptions(value: any): Promise<void> {
        let { buildJsLayerListKnowledgeGraphOptions } = await import('./layerListKnowledgeGraphOptions');
        this.widget.knowledgeGraphOptions = await  buildJsLayerListKnowledgeGraphOptions(value);
    }
    
    async getOperationalItems(): Promise<any> {
        if (!hasValue(this.widget.operationalItems)) {
            return null;
        }
        
        let { buildDotNetListItem } = await import('./listItem');
        return await Promise.all(this.widget.operationalItems.map(async i => await buildDotNetListItem(i)));
    }
    
    async getSelectedItems(): Promise<any> {
        if (!hasValue(this.widget.selectedItems)) {
            return null;
        }
        
        let { buildDotNetListItem } = await import('./listItem');
        return await Promise.all(this.widget.selectedItems.map(async i => await buildDotNetListItem(i)));
    }
    
    async setSelectedItems(value: any): Promise<void> {
        let { buildJsListItem } = await import('./listItem');
        this.widget.selectedItems = await Promise.all(value.map(async i => await buildJsListItem(i, this.layerId, this.viewId))) as any;
    }
    
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetLayerListViewModel } = await import('./layerListViewModel');
        return await buildDotNetLayerListViewModel(this.widget.viewModel);
    }
    
    async setViewModel(value: any): Promise<void> {
        let { buildJsLayerListViewModel } = await import('./layerListViewModel');
        this.widget.viewModel = await  buildJsLayerListViewModel(value, this.layerId, this.viewId);
    }
    
    async getVisibleElements(): Promise<any> {
        if (!hasValue(this.widget.visibleElements)) {
            return null;
        }
        
        let { buildDotNetLayerListVisibleElements } = await import('./layerListVisibleElements');
        return await buildDotNetLayerListVisibleElements(this.widget.visibleElements);
    }
    
    async setVisibleElements(value: any): Promise<void> {
        let { buildJsLayerListVisibleElements } = await import('./layerListVisibleElements');
        this.widget.visibleElements = await  buildJsLayerListVisibleElements(value);
    }
    
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsLayerListWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.catalogOptions)) {
        let { buildJsLayerListCatalogOptions } = await import('./layerListCatalogOptions');
        properties.catalogOptions = await buildJsLayerListCatalogOptions(dotNetObject.catalogOptions) as any;
    }
    if (hasValue(dotNetObject.knowledgeGraphOptions)) {
        let { buildJsLayerListKnowledgeGraphOptions } = await import('./layerListKnowledgeGraphOptions');
        properties.knowledgeGraphOptions = await buildJsLayerListKnowledgeGraphOptions(dotNetObject.knowledgeGraphOptions) as any;
    }
    if (hasValue(dotNetObject.hasListItemCreatedFunction) && dotNetObject.hasListItemCreatedFunction) {
        properties.listItemCreatedFunction = async (event) => {

            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsListItemCreatedFunction', event);
        };
    }
    if (hasValue(dotNetObject.selectedItems) && dotNetObject.selectedItems.length > 0) {
        let { buildJsListItem } = await import('./listItem');
        properties.selectedItems = await Promise.all(dotNetObject.selectedItems.map(async i => await buildJsListItem(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsLayerListViewModel } = await import('./layerListViewModel');
        properties.viewModel = await buildJsLayerListViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.visibleElements)) {
        let { buildJsLayerListVisibleElements } = await import('./layerListVisibleElements');
        properties.visibleElements = await buildJsLayerListVisibleElements(dotNetObject.visibleElements) as any;
    }

    if (hasValue(dotNetObject.collapsed)) {
        properties.collapsed = dotNetObject.collapsed;
    }
    if (hasValue(dotNetObject.dragEnabled)) {
        properties.dragEnabled = dotNetObject.dragEnabled;
    }
    if (hasValue(dotNetObject.filterPlaceholder)) {
        properties.filterPlaceholder = dotNetObject.filterPlaceholder;
    }
    if (hasValue(dotNetObject.filterText)) {
        properties.filterText = dotNetObject.filterText;
    }
    if (hasValue(dotNetObject.headingLevel)) {
        properties.headingLevel = dotNetObject.headingLevel;
    }
    if (hasValue(dotNetObject.icon)) {
        properties.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.minDragEnabledItems)) {
        properties.minDragEnabledItems = dotNetObject.minDragEnabledItems;
    }
    if (hasValue(dotNetObject.minFilterItems)) {
        properties.minFilterItems = dotNetObject.minFilterItems;
    }
    if (hasValue(dotNetObject.multipleSelectionEnabled)) {
        properties.multipleSelectionEnabled = dotNetObject.multipleSelectionEnabled;
    }
    if (hasValue(dotNetObject.selectionEnabled)) {
        properties.selectionEnabled = dotNetObject.selectionEnabled;
    }
    if (hasValue(dotNetObject.selectionMode)) {
        properties.selectionMode = dotNetObject.selectionMode;
    }
    if (hasValue(dotNetObject.visibilityAppearance)) {
        properties.visibilityAppearance = dotNetObject.visibilityAppearance;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    if (hasValue(dotNetObject.widgetId)) {
        properties.id = dotNetObject.widgetId;
    }
    let jsLayerList = new LayerList(properties);
    if (hasValue(dotNetObject.hasTriggerActionListener) && dotNetObject.hasTriggerActionListener) {
        jsLayerList.on('trigger-action', async (evt: any) => {
            let { buildDotNetLayerListTriggerActionEvent } = await import('./layerListTriggerActionEvent');
            let dnEvent = await buildDotNetLayerListTriggerActionEvent(evt, layerId, viewId);
            let streamRef = buildJsStreamReference(dnEvent ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsTriggerAction', streamRef);
        });
    }
    

    let { default: LayerListWidgetWrapper } = await import('./layerListWidget');
    let layerListWidgetWrapper = new LayerListWidgetWrapper(jsLayerList);
    layerListWidgetWrapper.geoBlazorId = dotNetObject.id;
    layerListWidgetWrapper.viewId = viewId;
    layerListWidgetWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(layerListWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = layerListWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsLayerList;
    
    try {
        let { buildDotNetLayerListWidget } = await import('./layerListWidget');
        let dnInstantiatedObject = await buildDotNetLayerListWidget(jsLayerList);

        let dnStream = buildJsStreamReference(dnInstantiatedObject);
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, dnStream);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LayerListWidget', e);
    }
    
    return jsLayerList;
}


export async function buildDotNetLayerListWidgetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLayerListWidget: any = {};
    
    if (hasValue(jsObject.catalogOptions)) {
        let { buildDotNetLayerListCatalogOptions } = await import('./layerListCatalogOptions');
        dotNetLayerListWidget.catalogOptions = await buildDotNetLayerListCatalogOptions(jsObject.catalogOptions);
    }
    
    if (hasValue(jsObject.knowledgeGraphOptions)) {
        let { buildDotNetLayerListKnowledgeGraphOptions } = await import('./layerListKnowledgeGraphOptions');
        dotNetLayerListWidget.knowledgeGraphOptions = await buildDotNetLayerListKnowledgeGraphOptions(jsObject.knowledgeGraphOptions);
    }
    
    if (hasValue(jsObject.operationalItems)) {
        let { buildDotNetListItem } = await import('./listItem');
        dotNetLayerListWidget.operationalItems = await Promise.all(jsObject.operationalItems.map(async i => await buildDotNetListItem(i)));
    }
    
    if (hasValue(jsObject.selectedItems)) {
        let { buildDotNetListItem } = await import('./listItem');
        dotNetLayerListWidget.selectedItems = await Promise.all(jsObject.selectedItems.map(async i => await buildDotNetListItem(i)));
    }
    
    if (hasValue(jsObject.viewModel)) {
        let { buildDotNetLayerListViewModel } = await import('./layerListViewModel');
        dotNetLayerListWidget.viewModel = await buildDotNetLayerListViewModel(jsObject.viewModel);
    }
    
    if (hasValue(jsObject.visibleElements)) {
        let { buildDotNetLayerListVisibleElements } = await import('./layerListVisibleElements');
        dotNetLayerListWidget.visibleElements = await buildDotNetLayerListVisibleElements(jsObject.visibleElements);
    }
    
    if (hasValue(jsObject.catalogLayerList)) {
        dotNetLayerListWidget.catalogLayerList = removeCircularReferences(jsObject.catalogLayerList);
    }
    
    if (hasValue(jsObject.collapsed)) {
        dotNetLayerListWidget.collapsed = jsObject.collapsed;
    }
    
    if (hasValue(jsObject.dragEnabled)) {
        dotNetLayerListWidget.dragEnabled = jsObject.dragEnabled;
    }
    
    if (hasValue(jsObject.filterPlaceholder)) {
        dotNetLayerListWidget.filterPlaceholder = jsObject.filterPlaceholder;
    }
    
    if (hasValue(jsObject.filterText)) {
        dotNetLayerListWidget.filterText = jsObject.filterText;
    }
    
    if (hasValue(jsObject.headingLevel)) {
        dotNetLayerListWidget.headingLevel = jsObject.headingLevel;
    }
    
    if (hasValue(jsObject.icon)) {
        dotNetLayerListWidget.icon = jsObject.icon;
    }
    
    if (hasValue(jsObject.label)) {
        dotNetLayerListWidget.label = jsObject.label;
    }
    
    if (hasValue(jsObject.minDragEnabledItems)) {
        dotNetLayerListWidget.minDragEnabledItems = jsObject.minDragEnabledItems;
    }
    
    if (hasValue(jsObject.minFilterItems)) {
        dotNetLayerListWidget.minFilterItems = jsObject.minFilterItems;
    }
    
    if (hasValue(jsObject.selectionMode)) {
        dotNetLayerListWidget.selectionMode = removeCircularReferences(jsObject.selectionMode);
    }
    
    if (hasValue(jsObject.tableList)) {
        dotNetLayerListWidget.tableList = removeCircularReferences(jsObject.tableList);
    }
    
    if (hasValue(jsObject.type)) {
        dotNetLayerListWidget.type = removeCircularReferences(jsObject.type);
    }
    
    if (hasValue(jsObject.visibilityAppearance)) {
        dotNetLayerListWidget.visibilityAppearance = removeCircularReferences(jsObject.visibilityAppearance);
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetLayerListWidget.visible = jsObject.visible;
    }
    
    if (hasValue(jsObject.id)) {
        dotNetLayerListWidget.widgetId = jsObject.id;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetLayerListWidget.id = geoBlazorId;
    }

    return dotNetLayerListWidget;
}

