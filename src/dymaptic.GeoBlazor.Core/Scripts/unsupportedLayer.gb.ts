// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import UnsupportedLayer from '@arcgis/core/layers/UnsupportedLayer';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, buildJsStreamReference } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class UnsupportedLayerGenerated implements IPropertyWrapper {
    public layer: UnsupportedLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: UnsupportedLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.fullExtent)) {
            let { buildJsExtent } = await import('./extent');
            this.layer.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;
        }
        if (hasValue(dotNetObject.visibilityTimeExtent)) {
            let { buildJsTimeExtent } = await import('./timeExtent');
            this.layer.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent) as any;
        }

        if (hasValue(dotNetObject.arcGISLayerId)) {
            this.layer.id = dotNetObject.arcGISLayerId;
        }
        if (hasValue(dotNetObject.listMode)) {
            this.layer.listMode = dotNetObject.listMode;
        }
        if (hasValue(dotNetObject.opacity)) {
            this.layer.opacity = dotNetObject.opacity;
        }
        if (hasValue(dotNetObject.title)) {
            this.layer.title = dotNetObject.title;
        }
        if (hasValue(dotNetObject.visible)) {
            this.layer.visible = dotNetObject.visible;
        }
    }
    
    async cancelLoad(): Promise<void> {
        this.layer.cancelLoad();
    }

    async createLayerView(view: any,
        options: any): Promise<any> {
        return await this.layer.createLayerView(view,
            options);
    }

    async fetchAttributionData(): Promise<any> {
        return await this.layer.fetchAttributionData();
    }

    async isFulfilled(): Promise<any> {
        return this.layer.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.layer.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.layer.isResolved();
    }

    async load(options: any): Promise<any> {
        return await this.layer.load(options);
    }

    async when(callback: any,
        errback: any): Promise<any> {
        return await this.layer.when(callback,
            errback);
    }

    // region properties
    
    async getFullExtent(): Promise<any> {
        if (!hasValue(this.layer.fullExtent)) {
            return null;
        }
        
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(this.layer.fullExtent);
    }
    
    async setFullExtent(value: any): Promise<void> {
        let { buildJsExtent } = await import('./extent');
        this.layer.fullExtent =  buildJsExtent(value);
    }
    
    async getVisibilityTimeExtent(): Promise<any> {
        if (!hasValue(this.layer.visibilityTimeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.visibilityTimeExtent);
    }
    
    async setVisibilityTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.visibilityTimeExtent = await  buildJsTimeExtent(value);
    }
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}


export async function buildJsUnsupportedLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.fullExtent)) {
        let { buildJsExtent } = await import('./extent');
        properties.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;
    }
    if (hasValue(dotNetObject.visibilityTimeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent) as any;
    }

    if (hasValue(dotNetObject.arcGISLayerId)) {
        properties.id = dotNetObject.arcGISLayerId;
    }
    if (hasValue(dotNetObject.listMode)) {
        properties.listMode = dotNetObject.listMode;
    }
    if (hasValue(dotNetObject.opacity)) {
        properties.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    let jsUnsupportedLayer = new UnsupportedLayer(properties);
    if (hasValue(dotNetObject.hasCreateListener) && dotNetObject.hasCreateListener) {
        jsUnsupportedLayer.on('layerview-create', async (evt: any) => {
            let { buildDotNetLayerViewCreateEvent } = await import('./layerViewCreateEvent');
            let dnEvent = await buildDotNetLayerViewCreateEvent(evt, layerId, viewId);
            let streamRef = buildJsStreamReference(dnEvent ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreate', streamRef);
        });
    }
    
    if (hasValue(dotNetObject.hasCreateErrorListener) && dotNetObject.hasCreateErrorListener) {
        jsUnsupportedLayer.on('layerview-create-error', async (evt: any) => {
            let { buildDotNetLayerViewCreateErrorEvent } = await import('./layerViewCreateErrorEvent');
            let dnEvent = await buildDotNetLayerViewCreateErrorEvent(evt, layerId, viewId);
            let streamRef = buildJsStreamReference(dnEvent ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreateError', streamRef);
        });
    }
    
    if (hasValue(dotNetObject.hasDestroyListener) && dotNetObject.hasDestroyListener) {
        jsUnsupportedLayer.on('layerview-destroy', async (evt: any) => {
            let { buildDotNetLayerViewDestroyEvent } = await import('./layerViewDestroyEvent');
            let dnEvent = await buildDotNetLayerViewDestroyEvent(evt, layerId, viewId);
            let streamRef = buildJsStreamReference(dnEvent ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsDestroy', streamRef);
        });
    }
    

    let { default: UnsupportedLayerWrapper } = await import('./unsupportedLayer');
    let unsupportedLayerWrapper = new UnsupportedLayerWrapper(jsUnsupportedLayer);
    unsupportedLayerWrapper.geoBlazorId = dotNetObject.id;
    unsupportedLayerWrapper.viewId = viewId;
    unsupportedLayerWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = unsupportedLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsUnsupportedLayer;
    
    try {
        let jsObjectRef = DotNet.createJSObjectReference(unsupportedLayerWrapper);
        let { buildDotNetUnsupportedLayer } = await import('./unsupportedLayer');
        let dnInstantiatedObject = await buildDotNetUnsupportedLayer(jsUnsupportedLayer);

        let dnStream = buildJsStreamReference(dnInstantiatedObject);
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, dnStream);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for UnsupportedLayer', e);
    }
    
    return jsUnsupportedLayer;
}


export async function buildDotNetUnsupportedLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUnsupportedLayer: any = {};
    
    if (hasValue(jsObject.fullExtent)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetUnsupportedLayer.fullExtent = buildDotNetExtent(jsObject.fullExtent);
    }
    
    if (hasValue(jsObject.visibilityTimeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetUnsupportedLayer.visibilityTimeExtent = buildDotNetTimeExtent(jsObject.visibilityTimeExtent);
    }
    
    if (hasValue(jsObject.id)) {
        dotNetUnsupportedLayer.arcGISLayerId = jsObject.id;
    }
    
    if (hasValue(jsObject.listMode)) {
        dotNetUnsupportedLayer.listMode = removeCircularReferences(jsObject.listMode);
    }
    
    if (hasValue(jsObject.loaded)) {
        dotNetUnsupportedLayer.loaded = jsObject.loaded;
    }
    
    if (hasValue(jsObject.opacity)) {
        dotNetUnsupportedLayer.opacity = jsObject.opacity;
    }
    
    if (hasValue(jsObject.persistenceEnabled)) {
        dotNetUnsupportedLayer.persistenceEnabled = jsObject.persistenceEnabled;
    }
    
    if (hasValue(jsObject.title)) {
        dotNetUnsupportedLayer.title = jsObject.title;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetUnsupportedLayer.type = removeCircularReferences(jsObject.type);
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetUnsupportedLayer.visible = jsObject.visible;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetUnsupportedLayer.id = geoBlazorId;
    }

    return dotNetUnsupportedLayer;
}

