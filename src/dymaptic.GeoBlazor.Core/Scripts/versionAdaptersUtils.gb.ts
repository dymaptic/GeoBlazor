// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import versionAdaptersUtils = __esri.versionAdaptersUtils;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class VersionAdaptersUtilsGenerated implements IPropertyWrapper {
    public component: versionAdaptersUtils;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: versionAdaptersUtils) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async createVersionAdapter(input: any): Promise<any> {
        return this.component.createVersionAdapter(input);
    }

    async createVersionAdapters(input: any): Promise<any> {
        let { buildJsNetwork } = await import('./network');
        let jsInput = await buildJsNetwork(input, this.layerId, this.viewId) as any;
        return this.component.createVersionAdapters(jsInput);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsVersionAdaptersUtilsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsversionAdaptersUtils: any = {}


    let { default: VersionAdaptersUtilsWrapper } = await import('./versionAdaptersUtils');
    let versionAdaptersUtilsWrapper = new VersionAdaptersUtilsWrapper(jsversionAdaptersUtils);
    versionAdaptersUtilsWrapper.geoBlazorId = dotNetObject.id;
    versionAdaptersUtilsWrapper.viewId = viewId;
    versionAdaptersUtilsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(versionAdaptersUtilsWrapper);
    jsObjectRefs[dotNetObject.id] = versionAdaptersUtilsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsversionAdaptersUtils;
    let { buildDotNetVersionAdaptersUtils } = await import('./versionAdaptersUtils');
    let dnInstantiatedObject = await buildDotNetVersionAdaptersUtils(jsversionAdaptersUtils);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for VersionAdaptersUtils', e);
    }
    
    return jsversionAdaptersUtils;
}

export async function buildDotNetVersionAdaptersUtilsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVersionAdaptersUtils: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetVersionAdaptersUtils.id = k;
                break;
            }
        }
    }

    return dotNetVersionAdaptersUtils;
}

