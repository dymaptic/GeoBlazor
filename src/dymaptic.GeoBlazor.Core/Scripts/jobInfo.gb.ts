// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import JobInfo from '@arcgis/core/rest/support/JobInfo';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class JobInfoGenerated implements IPropertyWrapper {
    public component: JobInfo;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: JobInfo) {
        this.component = component;
    }

    // region methods

    unwrap() {
        return this.component;
    }

    async cancelJob(jobId: any,
                    requestOptions: any): Promise<any> {
        let result = await this.component.cancelJob(jobId,
            requestOptions);
        let {buildDotNetJobInfo} = await import('./jobInfo');
        return await buildDotNetJobInfo(result);
    }

    async checkJobStatus(requestOptions: any): Promise<any> {
        let result = await this.component.checkJobStatus(requestOptions);
        let {buildDotNetJobInfo} = await import('./jobInfo');
        return await buildDotNetJobInfo(result);
    }

    async fetchResultData(resultName: any,
                          gpOptions: any,
                          requestOptions: any): Promise<any> {
        let {buildJsGPOptions} = await import('./gPOptions');
        let jsGpOptions = await buildJsGPOptions(gpOptions, this.layerId, this.viewId) as any;
        return await this.component.fetchResultData(resultName,
            jsGpOptions,
            requestOptions);
    }

    async fetchResultImage(jobId: any,
                           resultName: any,
                           imageParams: any,
                           requestOptions: any): Promise<any> {
        let {buildJsImageParameters} = await import('./imageParameters');
        let jsImageParams = await buildJsImageParameters(imageParams, this.layerId, this.viewId) as any;
        return await this.component.fetchResultImage(jobId,
            resultName,
            jsImageParams,
            requestOptions);
    }

    async fetchResultMapImageLayer(jobId: any): Promise<any> {
        let result = await this.component.fetchResultMapImageLayer(jobId);
        let {buildDotNetMapImageLayer} = await import('./mapImageLayer');
        return await buildDotNetMapImageLayer(result);
    }

    async waitForJobCompletion(options: any): Promise<any> {
        let result = await this.component.waitForJobCompletion(options);
        let {buildDotNetJobInfo} = await import('./jobInfo');
        return await buildDotNetJobInfo(result);
    }

    // region properties

    getProperty(prop: string): any {
        return this.component[prop];
    }

    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsJobInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsJobInfo = new JobInfo();

    if (hasValue(dotNetObject.jobId)) {
        jsJobInfo.jobId = dotNetObject.jobId;
    }
    if (hasValue(dotNetObject.jobStatus)) {
        jsJobInfo.jobStatus = dotNetObject.jobStatus;
    }
    if (hasValue(dotNetObject.messages)) {
        const {id, dotNetComponentReference, layerId, viewId, ...sanitizedMessages} = dotNetObject.messages;
        jsJobInfo.messages = sanitizedMessages;
    }
    if (hasValue(dotNetObject.requestOptions)) {
        jsJobInfo.requestOptions = dotNetObject.requestOptions;
    }
    if (hasValue(dotNetObject.sourceUrl)) {
        jsJobInfo.sourceUrl = dotNetObject.sourceUrl;
    }

    let {default: JobInfoWrapper} = await import('./jobInfo');
    let jobInfoWrapper = new JobInfoWrapper(jsJobInfo);
    jobInfoWrapper.geoBlazorId = dotNetObject.id;
    jobInfoWrapper.viewId = viewId;
    jobInfoWrapper.layerId = layerId;

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jobInfoWrapper);
    jsObjectRefs[dotNetObject.id] = jobInfoWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsJobInfo;
    let {buildDotNetJobInfo} = await import('./jobInfo');
    let dnInstantiatedObject = await buildDotNetJobInfo(jsJobInfo);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for JobInfo', e);
    }

    return jsJobInfo;
}

export async function buildDotNetJobInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetJobInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.jobId)) {
        dotNetJobInfo.jobId = jsObject.jobId;
    }
    if (hasValue(jsObject.jobStatus)) {
        dotNetJobInfo.jobStatus = jsObject.jobStatus;
    }
    if (hasValue(jsObject.messages)) {
        dotNetJobInfo.messages = jsObject.messages;
    }
    if (hasValue(jsObject.progress)) {
        dotNetJobInfo.progress = jsObject.progress;
    }
    if (hasValue(jsObject.requestOptions)) {
        dotNetJobInfo.requestOptions = jsObject.requestOptions;
    }
    if (hasValue(jsObject.sourceUrl)) {
        dotNetJobInfo.sourceUrl = jsObject.sourceUrl;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetJobInfo.id = k;
                break;
            }
        }
    }

    return dotNetJobInfo;
}

