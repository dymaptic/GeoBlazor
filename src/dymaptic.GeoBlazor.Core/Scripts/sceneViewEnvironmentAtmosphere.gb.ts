// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetSceneViewEnvironmentAtmosphere } from './sceneViewEnvironmentAtmosphere';

export async function buildJsSceneViewEnvironmentAtmosphereGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsSceneViewEnvironmentAtmosphere: any = {};

    if (hasValue(dotNetObject.quality)) {
        jsSceneViewEnvironmentAtmosphere.quality = dotNetObject.quality;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSceneViewEnvironmentAtmosphere);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSceneViewEnvironmentAtmosphere;
    
    return jsSceneViewEnvironmentAtmosphere;
}


export async function buildDotNetSceneViewEnvironmentAtmosphereGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSceneViewEnvironmentAtmosphere: any = {};
    
    if (hasValue(jsObject.quality)) {
        dotNetSceneViewEnvironmentAtmosphere.quality = removeCircularReferences(jsObject.quality);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSceneViewEnvironmentAtmosphere.id = geoBlazorId;
    }

    return dotNetSceneViewEnvironmentAtmosphere;
}

