// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetRasterMultidimensionalInfo } from './rasterMultidimensionalInfo';

export async function buildJsRasterMultidimensionalInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsRasterMultidimensionalInfo: any = {};
    if (hasValue(dotNetObject.variables) && dotNetObject.variables.length > 0) {
        let { buildJsRasterMultidimensionalInfoVariables } = await import('./rasterMultidimensionalInfoVariables');
        jsRasterMultidimensionalInfo.variables = await Promise.all(dotNetObject.variables.map(async i => await buildJsRasterMultidimensionalInfoVariables(i, layerId, viewId))) as any;
    }

    
    jsObjectRefs[dotNetObject.id] = jsRasterMultidimensionalInfo;
    arcGisObjectRefs[dotNetObject.id] = jsRasterMultidimensionalInfo;
    
    return jsRasterMultidimensionalInfo;
}


export async function buildDotNetRasterMultidimensionalInfoGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRasterMultidimensionalInfo: any = {};
    
    if (hasValue(jsObject.variables)) {
        let { buildDotNetRasterMultidimensionalInfoVariables } = await import('./rasterMultidimensionalInfoVariables');
        dotNetRasterMultidimensionalInfo.variables = await Promise.all(jsObject.variables.map(async i => await buildDotNetRasterMultidimensionalInfoVariables(i, viewId)));
    }
    

    return dotNetRasterMultidimensionalInfo;
}

