// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import GeographicTransformation from '@arcgis/core/geometry/support/GeographicTransformation';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class GeographicTransformationGenerated implements IPropertyWrapper {
    public component: GeographicTransformation;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: GeographicTransformation) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async getInverse(): Promise<any> {
        let result = this.component.getInverse();
        let { buildDotNetGeographicTransformation } = await import('./geographicTransformation');
        return buildDotNetGeographicTransformation(result);
    }

    // region properties
    
    async getSteps(): Promise<any> {
        if (!hasValue(this.component.steps)) {
            return null;
        }
        
        let { buildDotNetGeographicTransformationStep } = await import('./geographicTransformationStep');
        return await Promise.all(this.component.steps.map(async i => await buildDotNetGeographicTransformationStep(i)));
    }
    
    async setSteps(value: any): Promise<void> {
        let { buildJsGeographicTransformationStep } = await import('./geographicTransformationStep');
        this.component.steps = await Promise.all(value.map(async i => await buildJsGeographicTransformationStep(i, this.layerId, this.viewId))) as any;
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsGeographicTransformationGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.steps)) {
        let { buildJsGeographicTransformationStep } = await import('./geographicTransformationStep');
        properties.steps = await Promise.all(dotNetObject.steps.map(async i => await buildJsGeographicTransformationStep(i, layerId, viewId))) as any;
    }

    let jsGeographicTransformation = new GeographicTransformation(properties);

    let { default: GeographicTransformationWrapper } = await import('./geographicTransformation');
    let geographicTransformationWrapper = new GeographicTransformationWrapper(jsGeographicTransformation);
    geographicTransformationWrapper.geoBlazorId = dotNetObject.id;
    geographicTransformationWrapper.viewId = viewId;
    geographicTransformationWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(geographicTransformationWrapper);
    jsObjectRefs[dotNetObject.id] = geographicTransformationWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsGeographicTransformation;
    
    let { buildDotNetGeographicTransformation } = await import('./geographicTransformation');
    let dnInstantiatedObject = buildDotNetGeographicTransformation(jsGeographicTransformation);

    try {
        let seenObjects = new WeakMap();
        dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type GeographicTransformation detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for GeographicTransformation', e);
    }
    
    return jsGeographicTransformation;
}

