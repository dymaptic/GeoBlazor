// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetLayerInclusionDefinition } from './layerInclusionDefinition';

export async function buildJsLayerInclusionDefinitionGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsLayerInclusionDefinition: any = {};
    if (hasValue(dotNetObject.members)) {
        let { buildJsLayerInclusionMemberDefinition } = await import('./layerInclusionMemberDefinition');
        jsLayerInclusionDefinition.members = await buildJsLayerInclusionMemberDefinition(dotNetObject.members) as any;
    }

    if (hasValue(dotNetObject.useAllData)) {
        jsLayerInclusionDefinition.useAllData = dotNetObject.useAllData;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsLayerInclusionDefinition);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLayerInclusionDefinition;
    
    return jsLayerInclusionDefinition;
}


export async function buildDotNetLayerInclusionDefinitionGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLayerInclusionDefinition: any = {};
    
    if (hasValue(jsObject.members)) {
        let { buildDotNetLayerInclusionMemberDefinition } = await import('./layerInclusionMemberDefinition');
        dotNetLayerInclusionDefinition.members = await buildDotNetLayerInclusionMemberDefinition(jsObject.members);
    }
    
    if (hasValue(jsObject.useAllData)) {
        dotNetLayerInclusionDefinition.useAllData = jsObject.useAllData;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetLayerInclusionDefinition.id = geoBlazorId;
    }

    return dotNetLayerInclusionDefinition;
}

