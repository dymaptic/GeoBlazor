// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import CameraLayout from '@arcgis/core/CameraLayout';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCameraLayout } from './cameraLayout';

export async function buildJsCameraLayoutGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.column)) {
        properties.column = dotNetObject.column;
    }
    if (hasValue(dotNetObject.columns)) {
        properties.columns = dotNetObject.columns;
    }
    if (hasValue(dotNetObject.row)) {
        properties.row = dotNetObject.row;
    }
    if (hasValue(dotNetObject.rows)) {
        properties.rows = dotNetObject.rows;
    }
    let jsCameraLayout = new CameraLayout(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCameraLayout);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCameraLayout;
    
    let { buildDotNetCameraLayout } = await import('./cameraLayout');
    let dnInstantiatedObject = await buildDotNetCameraLayout(jsCameraLayout, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type CameraLayout detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CameraLayout', e);
    }
    
    return jsCameraLayout;
}


export async function buildDotNetCameraLayoutGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsCameraLayout } = await import('./cameraLayout');
        jsComponentRef = await buildJsCameraLayout(jsObject, layerId, viewId);
    }
    
    let dotNetCameraLayout: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.column)) {
        dotNetCameraLayout.column = jsObject.column;
    }
    if (hasValue(jsObject.columns)) {
        dotNetCameraLayout.columns = jsObject.columns;
    }
    if (hasValue(jsObject.row)) {
        dotNetCameraLayout.row = jsObject.row;
    }
    if (hasValue(jsObject.rows)) {
        dotNetCameraLayout.rows = jsObject.rows;
    }


    if (hasValue(geoBlazorId)) {
        dotNetCameraLayout.id = geoBlazorId;
    }

    return dotNetCameraLayout;
}

