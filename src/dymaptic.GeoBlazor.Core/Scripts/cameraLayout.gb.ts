// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import CameraLayout from '@arcgis/core/CameraLayout';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CameraLayoutGenerated implements IPropertyWrapper {
    public component: CameraLayout;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: CameraLayout) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsCameraLayoutGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCameraLayout = new CameraLayout();

    if (hasValue(dotNetObject.column)) {
        jsCameraLayout.column = dotNetObject.column;
    }
    if (hasValue(dotNetObject.columns)) {
        jsCameraLayout.columns = dotNetObject.columns;
    }
    if (hasValue(dotNetObject.row)) {
        jsCameraLayout.row = dotNetObject.row;
    }
    if (hasValue(dotNetObject.rows)) {
        jsCameraLayout.rows = dotNetObject.rows;
    }
    let { default: CameraLayoutWrapper } = await import('./cameraLayout');
    let cameraLayoutWrapper = new CameraLayoutWrapper(jsCameraLayout);
    cameraLayoutWrapper.geoBlazorId = dotNetObject.id;
    cameraLayoutWrapper.viewId = viewId;
    cameraLayoutWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(cameraLayoutWrapper);
    jsObjectRefs[dotNetObject.id] = cameraLayoutWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsCameraLayout;
    
    let { buildDotNetCameraLayout } = await import('./cameraLayout');
    let dnInstantiatedObject = await buildDotNetCameraLayout(jsCameraLayout, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CameraLayout', e);
    }
    
    return jsCameraLayout;
}

export async function buildDotNetCameraLayoutGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCameraLayout: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.column)) {
            dotNetCameraLayout.column = jsObject.column;
        }
        if (hasValue(jsObject.columns)) {
            dotNetCameraLayout.columns = jsObject.columns;
        }
        if (hasValue(jsObject.row)) {
            dotNetCameraLayout.row = jsObject.row;
        }
        if (hasValue(jsObject.rows)) {
            dotNetCameraLayout.rows = jsObject.rows;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCameraLayout.id = k;
                break;
            }
        }
    }

    return dotNetCameraLayout;
}

