// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import CameraLayout from '@arcgis/core/CameraLayout';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';

export async function buildJsCameraLayoutGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.column)) {
        properties.column = dotNetObject.column;
    }
    if (hasValue(dotNetObject.columns)) {
        properties.columns = dotNetObject.columns;
    }
    if (hasValue(dotNetObject.row)) {
        properties.row = dotNetObject.row;
    }
    if (hasValue(dotNetObject.rows)) {
        properties.rows = dotNetObject.rows;
    }
    let jsCameraLayout = new CameraLayout(properties);
    
    jsObjectRefs[dotNetObject.id] = jsCameraLayout;
    arcGisObjectRefs[dotNetObject.id] = jsCameraLayout;
    
    return jsCameraLayout;
}


export async function buildDotNetCameraLayoutGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCameraLayout: any = {};
    
    if (hasValue(jsObject.column)) {
        dotNetCameraLayout.column = jsObject.column;
    }
    
    if (hasValue(jsObject.columns)) {
        dotNetCameraLayout.columns = jsObject.columns;
    }
    
    if (hasValue(jsObject.row)) {
        dotNetCameraLayout.row = jsObject.row;
    }
    
    if (hasValue(jsObject.rows)) {
        dotNetCameraLayout.rows = jsObject.rows;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCameraLayout.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        if (hasValue(dotNetRef)) {
            try {
                dotNetCameraLayout.id = await dotNetRef.invokeMethodAsync('GetId');
            } catch (e) {
                console.error('Error invoking GetId for CameraLayout', e);
            }
        }
    }
    if (hasValue(dotNetCameraLayout.id)) {
        jsObjectRefs[dotNetCameraLayout.id] ??= jsObject;
        arcGisObjectRefs[dotNetCameraLayout.id] ??= jsObject;
    }

    return dotNetCameraLayout;
}

