// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetFlowSchemes } from './flowSchemes';

export async function buildJsFlowSchemesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFlowSchemes: any = {}
    if (hasValue(dotNetObject.primaryScheme)) {
        let { buildJsFlowScheme } = await import('./flowScheme');
        jsFlowSchemes.primaryScheme = await buildJsFlowScheme(dotNetObject.primaryScheme, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.secondarySchemes)) {
        let { buildJsFlowScheme } = await import('./flowScheme');
        jsFlowSchemes.secondarySchemes = await Promise.all(dotNetObject.secondarySchemes.map(async i => await buildJsFlowScheme(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.basemapId)) {
        jsFlowSchemes.basemapId = dotNetObject.basemapId;
    }
    if (hasValue(dotNetObject.basemapTheme)) {
        jsFlowSchemes.basemapTheme = dotNetObject.basemapTheme;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsFlowSchemes);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFlowSchemes;
    
    let dnInstantiatedObject = await buildDotNetFlowSchemes(jsFlowSchemes);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FlowSchemes', e);
    }
    
    return jsFlowSchemes;
}

export async function buildDotNetFlowSchemesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFlowSchemes: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.primaryScheme)) {
            let { buildDotNetFlowScheme } = await import('./flowScheme');
            dotNetFlowSchemes.primaryScheme = await buildDotNetFlowScheme(jsObject.primaryScheme);
        }
        if (hasValue(jsObject.secondarySchemes)) {
            let { buildDotNetFlowScheme } = await import('./flowScheme');
            dotNetFlowSchemes.secondarySchemes = await Promise.all(jsObject.secondarySchemes.map(async i => await buildDotNetFlowScheme(i)));
        }
    if (hasValue(jsObject.basemapId)) {
        dotNetFlowSchemes.basemapId = jsObject.basemapId;
    }
    if (hasValue(jsObject.basemapTheme)) {
        dotNetFlowSchemes.basemapTheme = jsObject.basemapTheme;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFlowSchemes.id = k;
                break;
            }
        }
    }

    return dotNetFlowSchemes;
}

