// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import TimeSliderViewModel from '@arcgis/core/widgets/TimeSlider/TimeSliderViewModel';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class TimeSliderViewModelGenerated implements IPropertyWrapper {
    public component: TimeSliderViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: TimeSliderViewModel) {
        this.component = component;
    }

    // region methods

    unwrap() {
        return this.component;
    }

    async next(): Promise<void> {
        this.component.next();
    }

    async play(): Promise<void> {
        this.component.play();
    }

    async previous(): Promise<void> {
        this.component.previous();
    }

    async stop(): Promise<void> {
        this.component.stop();
    }

    async updateWebDocument(document: any): Promise<void> {
        this.component.updateWebDocument(document);
    }

    // region properties

    async getFullTimeExtent(): Promise<any> {
        if (!hasValue(this.component.fullTimeExtent)) {
            return null;
        }

        let {buildDotNetTimeExtent} = await import('./timeExtent');
        return buildDotNetTimeExtent(this.component.fullTimeExtent);
    }

    async setFullTimeExtent(value: any): Promise<void> {
        let {buildJsTimeExtent} = await import('./timeExtent');
        this.component.fullTimeExtent = await buildJsTimeExtent(value, this.layerId, this.viewId);
    }

    async getTimeExtent(): Promise<any> {
        if (!hasValue(this.component.timeExtent)) {
            return null;
        }

        let {buildDotNetTimeExtent} = await import('./timeExtent');
        return buildDotNetTimeExtent(this.component.timeExtent);
    }

    async setTimeExtent(value: any): Promise<void> {
        let {buildJsTimeExtent} = await import('./timeExtent');
        this.component.timeExtent = await buildJsTimeExtent(value, this.layerId, this.viewId);
    }

    getProperty(prop: string): any {
        return this.component[prop];
    }

    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsTimeSliderViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTimeSliderViewModel = new TimeSliderViewModel();
    if (hasValue(dotNetObject.fullTimeExtent)) {
        let {buildJsTimeExtent} = await import('./timeExtent');
        jsTimeSliderViewModel.fullTimeExtent = await buildJsTimeExtent(dotNetObject.fullTimeExtent, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let {buildJsTimeExtent} = await import('./timeExtent');
        jsTimeSliderViewModel.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.actions)) {
        jsTimeSliderViewModel.actions = dotNetObject.actions;
    }
    if (hasValue(dotNetObject.loop)) {
        jsTimeSliderViewModel.loop = dotNetObject.loop;
    }
    if (hasValue(dotNetObject.mode)) {
        jsTimeSliderViewModel.mode = dotNetObject.mode;
    }
    if (hasValue(dotNetObject.playRate)) {
        jsTimeSliderViewModel.playRate = dotNetObject.playRate;
    }
    if (hasValue(dotNetObject.stops)) {
        jsTimeSliderViewModel.stops = dotNetObject.stops;
    }
    if (hasValue(dotNetObject.view)) {
        jsTimeSliderViewModel.view = dotNetObject.view;
    }
    jsTimeSliderViewModel.on('trigger-action', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsTriggerAction', evt);
    });


    let {default: TimeSliderViewModelWrapper} = await import('./timeSliderViewModel');
    let timeSliderViewModelWrapper = new TimeSliderViewModelWrapper(jsTimeSliderViewModel);
    timeSliderViewModelWrapper.geoBlazorId = dotNetObject.id;
    timeSliderViewModelWrapper.viewId = viewId;
    timeSliderViewModelWrapper.layerId = layerId;

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(timeSliderViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = timeSliderViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsTimeSliderViewModel;
    let {buildDotNetTimeSliderViewModel} = await import('./timeSliderViewModel');
    let dnInstantiatedObject = await buildDotNetTimeSliderViewModel(jsTimeSliderViewModel);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TimeSliderViewModel', e);
    }

    return jsTimeSliderViewModel;
}

export async function buildDotNetTimeSliderViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetTimeSliderViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.fullTimeExtent)) {
        let {buildDotNetTimeExtent} = await import('./timeExtent');
        dotNetTimeSliderViewModel.fullTimeExtent = buildDotNetTimeExtent(jsObject.fullTimeExtent);
    }
    if (hasValue(jsObject.timeExtent)) {
        let {buildDotNetTimeExtent} = await import('./timeExtent');
        dotNetTimeSliderViewModel.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
    }
    if (hasValue(jsObject.actions)) {
        dotNetTimeSliderViewModel.actions = jsObject.actions;
    }
    if (hasValue(jsObject.effectiveStops)) {
        dotNetTimeSliderViewModel.effectiveStops = jsObject.effectiveStops;
    }
    if (hasValue(jsObject.loop)) {
        dotNetTimeSliderViewModel.loop = jsObject.loop;
    }
    if (hasValue(jsObject.mode)) {
        dotNetTimeSliderViewModel.mode = jsObject.mode;
    }
    if (hasValue(jsObject.playRate)) {
        dotNetTimeSliderViewModel.playRate = jsObject.playRate;
    }
    if (hasValue(jsObject.state)) {
        dotNetTimeSliderViewModel.state = jsObject.state;
    }
    if (hasValue(jsObject.stops)) {
        dotNetTimeSliderViewModel.stops = jsObject.stops;
    }
    if (hasValue(jsObject.view)) {
        dotNetTimeSliderViewModel.view = jsObject.view;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTimeSliderViewModel.id = k;
                break;
            }
        }
    }

    return dotNetTimeSliderViewModel;
}

