// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import LevelLayerInfo from '@arcgis/core/layers/support/LevelLayerInfo';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetLevelLayerInfo } from './levelLayerInfo';

export async function buildJsLevelLayerInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.facilityIdField)) {
        properties.facilityIdField = dotNetObject.facilityIdField;
    }
    if (hasValue(dotNetObject.layerId)) {
        properties.layerId = dotNetObject.layerId;
    }
    if (hasValue(dotNetObject.levelIdField)) {
        properties.levelIdField = dotNetObject.levelIdField;
    }
    if (hasValue(dotNetObject.levelNumberField)) {
        properties.levelNumberField = dotNetObject.levelNumberField;
    }
    if (hasValue(dotNetObject.longNameField)) {
        properties.longNameField = dotNetObject.longNameField;
    }
    if (hasValue(dotNetObject.shortNameField)) {
        properties.shortNameField = dotNetObject.shortNameField;
    }
    if (hasValue(dotNetObject.sublayerId)) {
        properties.sublayerId = dotNetObject.sublayerId;
    }
    if (hasValue(dotNetObject.verticalOrderField)) {
        properties.verticalOrderField = dotNetObject.verticalOrderField;
    }
    let jsLevelLayerInfo = new LevelLayerInfo(properties);
    
    jsObjectRefs[dotNetObject.id] = jsLevelLayerInfo;
    arcGisObjectRefs[dotNetObject.id] = jsLevelLayerInfo;
    
    return jsLevelLayerInfo;
}


export async function buildDotNetLevelLayerInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLevelLayerInfo: any = {};
    
    if (hasValue(jsObject.facilityIdField)) {
        dotNetLevelLayerInfo.facilityIdField = jsObject.facilityIdField;
    }
    
    if (hasValue(jsObject.layerId)) {
        dotNetLevelLayerInfo.layerId = jsObject.layerId;
    }
    
    if (hasValue(jsObject.levelIdField)) {
        dotNetLevelLayerInfo.levelIdField = jsObject.levelIdField;
    }
    
    if (hasValue(jsObject.levelNumberField)) {
        dotNetLevelLayerInfo.levelNumberField = jsObject.levelNumberField;
    }
    
    if (hasValue(jsObject.longNameField)) {
        dotNetLevelLayerInfo.longNameField = jsObject.longNameField;
    }
    
    if (hasValue(jsObject.shortNameField)) {
        dotNetLevelLayerInfo.shortNameField = jsObject.shortNameField;
    }
    
    if (hasValue(jsObject.sublayerId)) {
        dotNetLevelLayerInfo.sublayerId = jsObject.sublayerId;
    }
    
    if (hasValue(jsObject.verticalOrderField)) {
        dotNetLevelLayerInfo.verticalOrderField = jsObject.verticalOrderField;
    }
    

    return dotNetLevelLayerInfo;
}

