// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import GridControls from '@arcgis/core/widgets/support/GridControls';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, buildJsStreamReference } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class GridControlsWidgetGenerated implements IPropertyWrapper {
    public widget: GridControls;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: GridControls) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.customColor)) {
            let { buildJsMapColor } = await import('./mapColor');
            this.widget.customColor = buildJsMapColor(dotNetObject.customColor) as any;
        }
        if (hasValue(dotNetObject.snappingOptions)) {
            let { buildJsSnappingOptions } = await import('./snappingOptions');
            this.widget.snappingOptions = await buildJsSnappingOptions(dotNetObject.snappingOptions, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.theme)) {
            let { buildJsTheme } = await import('./theme');
            this.widget.theme = await buildJsTheme(dotNetObject.theme) as any;
        }
        if (hasValue(dotNetObject.visibleElements)) {
            let { buildJsGridControlsVisibleElements } = await import('./gridControlsVisibleElements');
            this.widget.visibleElements = await buildJsGridControlsVisibleElements(dotNetObject.visibleElements, this.layerId, this.viewId) as any;
        }

        if (hasValue(dotNetObject.icon)) {
            this.widget.icon = dotNetObject.icon;
        }
        if (hasValue(dotNetObject.label)) {
            this.widget.label = dotNetObject.label;
        }
        if (hasValue(dotNetObject.visible)) {
            this.widget.visible = dotNetObject.visible;
        }
        if (hasValue(dotNetObject.widgetId)) {
            this.widget.id = dotNetObject.widgetId;
        }
    }
    
    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async render(): Promise<any> {
        return this.widget.render();
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async when(callback: any,
        errback: any): Promise<any> {
        return await this.widget.when(callback,
            errback);
    }

    // region properties
    
    async getCustomColor(): Promise<any> {
        if (!hasValue(this.widget.customColor)) {
            return null;
        }
        
        let { buildDotNetMapColor } = await import('./mapColor');
        return buildDotNetMapColor(this.widget.customColor);
    }
    
    async setCustomColor(value: any): Promise<void> {
        let { buildJsMapColor } = await import('./mapColor');
        this.widget.customColor =  buildJsMapColor(value);
    }
    
    async getSnappingOptions(): Promise<any> {
        if (!hasValue(this.widget.snappingOptions)) {
            return null;
        }
        
        let { buildDotNetSnappingOptions } = await import('./snappingOptions');
        return await buildDotNetSnappingOptions(this.widget.snappingOptions);
    }
    
    async setSnappingOptions(value: any): Promise<void> {
        let { buildJsSnappingOptions } = await import('./snappingOptions');
        this.widget.snappingOptions = await  buildJsSnappingOptions(value, this.layerId, this.viewId);
    }
    
    async getTheme(): Promise<any> {
        if (!hasValue(this.widget.theme)) {
            return null;
        }
        
        let { buildDotNetTheme } = await import('./theme');
        return await buildDotNetTheme(this.widget.theme);
    }
    
    async setTheme(value: any): Promise<void> {
        let { buildJsTheme } = await import('./theme');
        this.widget.theme = await  buildJsTheme(value);
    }
    
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetGridControlsViewModel } = await import('./gridControlsViewModel');
        return await buildDotNetGridControlsViewModel(this.widget.viewModel);
    }
    
    async setViewModel(value: any): Promise<void> {
        let { buildJsGridControlsViewModel } = await import('./gridControlsViewModel');
        this.widget.viewModel = await  buildJsGridControlsViewModel(value, this.layerId, this.viewId);
    }
    
    async getVisibleElements(): Promise<any> {
        if (!hasValue(this.widget.visibleElements)) {
            return null;
        }
        
        let { buildDotNetGridControlsVisibleElements } = await import('./gridControlsVisibleElements');
        return await buildDotNetGridControlsVisibleElements(this.widget.visibleElements);
    }
    
    async setVisibleElements(value: any): Promise<void> {
        let { buildJsGridControlsVisibleElements } = await import('./gridControlsVisibleElements');
        this.widget.visibleElements = await  buildJsGridControlsVisibleElements(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsGridControlsWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.customColor)) {
        let { buildJsMapColor } = await import('./mapColor');
        properties.customColor = buildJsMapColor(dotNetObject.customColor) as any;
    }
    if (hasValue(dotNetObject.snappingOptions)) {
        let { buildJsSnappingOptions } = await import('./snappingOptions');
        properties.snappingOptions = await buildJsSnappingOptions(dotNetObject.snappingOptions, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.theme)) {
        let { buildJsTheme } = await import('./theme');
        properties.theme = await buildJsTheme(dotNetObject.theme) as any;
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsGridControlsViewModel } = await import('./gridControlsViewModel');
        properties.viewModel = await buildJsGridControlsViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.visibleElements)) {
        let { buildJsGridControlsVisibleElements } = await import('./gridControlsVisibleElements');
        properties.visibleElements = await buildJsGridControlsVisibleElements(dotNetObject.visibleElements, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.icon)) {
        properties.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    if (hasValue(dotNetObject.widgetId)) {
        properties.id = dotNetObject.widgetId;
    }
    let jsGridControls = new GridControls(properties);

    let { default: GridControlsWidgetWrapper } = await import('./gridControlsWidget');
    let gridControlsWidgetWrapper = new GridControlsWidgetWrapper(jsGridControls);
    gridControlsWidgetWrapper.geoBlazorId = dotNetObject.id;
    gridControlsWidgetWrapper.viewId = viewId;
    gridControlsWidgetWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = gridControlsWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsGridControls;
    
    try {
        let jsObjectRef = DotNet.createJSObjectReference(gridControlsWidgetWrapper);
        let { buildDotNetGridControlsWidget } = await import('./gridControlsWidget');
        let dnInstantiatedObject = await buildDotNetGridControlsWidget(jsGridControls);

        let dnStream = buildJsStreamReference(dnInstantiatedObject);
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, dnStream);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for GridControlsWidget', e);
    }
    
    return jsGridControls;
}


export async function buildDotNetGridControlsWidgetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGridControlsWidget: any = {};
    
    if (hasValue(jsObject.customColor)) {
        let { buildDotNetMapColor } = await import('./mapColor');
        dotNetGridControlsWidget.customColor = buildDotNetMapColor(jsObject.customColor);
    }
    
    if (hasValue(jsObject.snappingOptions)) {
        let { buildDotNetSnappingOptions } = await import('./snappingOptions');
        dotNetGridControlsWidget.snappingOptions = await buildDotNetSnappingOptions(jsObject.snappingOptions);
    }
    
    if (hasValue(jsObject.theme)) {
        let { buildDotNetTheme } = await import('./theme');
        dotNetGridControlsWidget.theme = await buildDotNetTheme(jsObject.theme);
    }
    
    if (hasValue(jsObject.viewModel)) {
        let { buildDotNetGridControlsViewModel } = await import('./gridControlsViewModel');
        dotNetGridControlsWidget.viewModel = await buildDotNetGridControlsViewModel(jsObject.viewModel);
    }
    
    if (hasValue(jsObject.visibleElements)) {
        let { buildDotNetGridControlsVisibleElements } = await import('./gridControlsVisibleElements');
        dotNetGridControlsWidget.visibleElements = await buildDotNetGridControlsVisibleElements(jsObject.visibleElements);
    }
    
    if (hasValue(jsObject.icon)) {
        dotNetGridControlsWidget.icon = jsObject.icon;
    }
    
    if (hasValue(jsObject.label)) {
        dotNetGridControlsWidget.label = jsObject.label;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetGridControlsWidget.type = removeCircularReferences(jsObject.type);
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetGridControlsWidget.visible = jsObject.visible;
    }
    
    if (hasValue(jsObject.id)) {
        dotNetGridControlsWidget.widgetId = jsObject.id;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetGridControlsWidget.id = geoBlazorId;
    }

    return dotNetGridControlsWidget;
}

