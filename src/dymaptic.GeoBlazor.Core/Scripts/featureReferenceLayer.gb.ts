// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import FeatureReferenceLayer = __esri.FeatureReferenceLayer;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FeatureReferenceLayerGenerated implements IPropertyWrapper {
    public layer: FeatureReferenceLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: FeatureReferenceLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}


export async function buildJsFeatureReferenceLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureReferenceLayer: any = {};

    if (hasValue(dotNetObject.featureReferenceLayerId)) {
        jsFeatureReferenceLayer.id = dotNetObject.featureReferenceLayerId;
    }
    if (hasValue(dotNetObject.objectIdField)) {
        jsFeatureReferenceLayer.objectIdField = dotNetObject.objectIdField;
    }

    let { default: FeatureReferenceLayerWrapper } = await import('./featureReferenceLayer');
    let featureReferenceLayerWrapper = new FeatureReferenceLayerWrapper(jsFeatureReferenceLayer);
    featureReferenceLayerWrapper.geoBlazorId = dotNetObject.id;
    featureReferenceLayerWrapper.viewId = viewId;
    featureReferenceLayerWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(featureReferenceLayerWrapper);
    jsObjectRefs[dotNetObject.id] = featureReferenceLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureReferenceLayer;
    let { buildDotNetFeatureReferenceLayer } = await import('./featureReferenceLayer');
    let dnInstantiatedObject = await buildDotNetFeatureReferenceLayer(jsFeatureReferenceLayer);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureReferenceLayer', e);
    }
    
    return featureReferenceLayerWrapper;
}

export async function buildDotNetFeatureReferenceLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureReferenceLayer: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.id)) {
        dotNetFeatureReferenceLayer.featureReferenceLayerId = jsObject.id;
    }
    if (hasValue(jsObject.objectIdField)) {
        dotNetFeatureReferenceLayer.objectIdField = jsObject.objectIdField;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFeatureReferenceLayer.id = k;
                break;
            }
        }
    }

    return dotNetFeatureReferenceLayer;
}

