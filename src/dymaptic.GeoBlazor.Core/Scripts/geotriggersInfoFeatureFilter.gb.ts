import { buildDotNetGeotriggersInfoFeatureFilter } from './geotriggersInfoFeatureFilter';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import geotriggersInfoFeatureFilter from '@arcgis/core/webdoc/geotriggersInfo/FeatureFilter';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsGeotriggersInfoFeatureFilterGenerated(dotNetObject: any): Promise<any> {
    let jsgeotriggersInfoFeatureFilter = new geotriggersInfoFeatureFilter();
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsGeometry } = await import('./geometry');
        jsgeotriggersInfoFeatureFilter.geometry = buildJsGeometry(dotNetObject.geometry) as any;
    }

    if (hasValue(dotNetObject.where)) {
        jsgeotriggersInfoFeatureFilter.where = dotNetObject.where;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsgeotriggersInfoFeatureFilter);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsgeotriggersInfoFeatureFilter;
    
    let dnInstantiatedObject = await buildDotNetGeotriggersInfoFeatureFilter(jsgeotriggersInfoFeatureFilter);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for GeotriggersInfoFeatureFilter', e);
    }
    
    return jsgeotriggersInfoFeatureFilter;
}
export async function buildDotNetGeotriggersInfoFeatureFilterGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGeotriggersInfoFeatureFilter: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.geometry)) {
            let { buildDotNetGeometry } = await import('./geometry');
            dotNetGeotriggersInfoFeatureFilter.geometry = buildDotNetGeometry(jsObject.geometry);
        }
        if (hasValue(jsObject.where)) {
            dotNetGeotriggersInfoFeatureFilter.where = jsObject.where;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetGeotriggersInfoFeatureFilter.id = k;
                break;
            }
        }
    }

    return dotNetGeotriggersInfoFeatureFilter;
}

