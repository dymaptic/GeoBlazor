// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import FeaturesViewModel from '@arcgis/core/widgets/Features/FeaturesViewModel';
import { hasValue, sanitize } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FeaturesViewModelGenerated implements IPropertyWrapper {
    public component: FeaturesViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: FeaturesViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.actions) && dotNetObject.actions.length > 0) {
            let { buildJsActionBase } = await import('./actionBase');
            this.component.actions = dotNetObject.actions.map(i => buildJsActionBase(i)) as any;
        }
        if (hasValue(dotNetObject.features) && dotNetObject.features.length > 0) {
            let { buildJsGraphic } = await import('./graphic');
            this.component.features = dotNetObject.features.map(i => buildJsGraphic(i)) as any;
        }
        if (hasValue(dotNetObject.featureViewModelAbilities)) {
            let { buildJsAbilities } = await import('./abilities');
            this.component.featureViewModelAbilities = await buildJsAbilities(dotNetObject.featureViewModelAbilities, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.goToOverride)) {
            let { buildJsGoToOverride } = await import('./goToOverride');
            this.component.goToOverride = buildJsGoToOverride(dotNetObject.goToOverride, this.viewId) as any;
        }
        if (hasValue(dotNetObject.location)) {
            let { buildJsPoint } = await import('./point');
            this.component.location = buildJsPoint(dotNetObject.location) as any;
        }

        if (hasValue(dotNetObject.autoCloseEnabled)) {
            this.component.autoCloseEnabled = dotNetObject.autoCloseEnabled;
        }
        if (hasValue(dotNetObject.browseClusterEnabled)) {
            this.component.browseClusterEnabled = dotNetObject.browseClusterEnabled;
        }
        if (hasValue(dotNetObject.defaultPopupTemplateEnabled)) {
            this.component.defaultPopupTemplateEnabled = dotNetObject.defaultPopupTemplateEnabled;
        }
        if (hasValue(dotNetObject.featuresPerPage)) {
            this.component.featuresPerPage = dotNetObject.featuresPerPage;
        }
        if (hasValue(dotNetObject.highlightEnabled)) {
            this.component.highlightEnabled = dotNetObject.highlightEnabled;
        }
        if (hasValue(dotNetObject.includeDefaultActions)) {
            this.component.includeDefaultActions = dotNetObject.includeDefaultActions;
        }
        if (hasValue(dotNetObject.promises)) {
            this.component.promises = dotNetObject.promises;
        }
        if (hasValue(dotNetObject.selectedFeatureIndex)) {
            this.component.selectedFeatureIndex = dotNetObject.selectedFeatureIndex;
        }
        if (hasValue(dotNetObject.spatialReference)) {
            this.component.spatialReference = sanitize(dotNetObject.spatialReference);
        }
        if (hasValue(dotNetObject.timeZone)) {
            this.component.timeZone = dotNetObject.timeZone;
        }
        if (hasValue(dotNetObject.title)) {
            this.component.title = dotNetObject.title;
        }
        if (hasValue(dotNetObject.visible)) {
            this.component.visible = dotNetObject.visible;
        }
    }
    
    async clear(): Promise<void> {
        this.component.clear();
    }

    async fetchFeatures(screenPoint: any,
        options: any): Promise<any> {
        return await this.component.fetchFeatures(screenPoint,
            options);
    }

    async next(): Promise<any> {
        let result = this.component.next();
        let { buildDotNetFeaturesViewModel } = await import('./featuresViewModel');
        return buildDotNetFeaturesViewModel(result);
    }

    async open(options: any): Promise<void> {
        let { buildJsFeaturesViewModelOpenOptions } = await import('./featuresViewModelOpenOptions');
        let jsOptions = await buildJsFeaturesViewModelOpenOptions(options, this.layerId, this.viewId) as any;
        this.component.open(jsOptions);
    }

    async previous(): Promise<any> {
        let result = this.component.previous();
        let { buildDotNetFeaturesViewModel } = await import('./featuresViewModel');
        return buildDotNetFeaturesViewModel(result);
    }

    async triggerAction(actionIndex: any): Promise<void> {
        this.component.triggerAction(actionIndex);
    }

    // region properties
    
    async getActions(): Promise<any> {
        if (!hasValue(this.component.actions)) {
            return null;
        }
        
        let { buildDotNetActionBase } = await import('./actionBase');
        return await Promise.all(this.component.actions.map(async i => await buildDotNetActionBase(i)));
    }
    
    async setActions(value: any): Promise<void> {
        let { buildJsActionBase } = await import('./actionBase');
        this.component.actions = await Promise.all(value.map(async i => await buildJsActionBase(i))) as any;
    }
    
    async getAllActions(): Promise<any> {
        if (!hasValue(this.component.allActions)) {
            return null;
        }
        
        let { buildDotNetActionBase } = await import('./actionBase');
        return await Promise.all(this.component.allActions.map(async i => await buildDotNetActionBase(i)));
    }
    
    async getDefaultActions(): Promise<any> {
        if (!hasValue(this.component.defaultActions)) {
            return null;
        }
        
        let { buildDotNetActionBase } = await import('./actionBase');
        return await Promise.all(this.component.defaultActions.map(async i => await buildDotNetActionBase(i)));
    }
    
    async getFeatures(): Promise<any> {
        if (!hasValue(this.component.features)) {
            return null;
        }
        
        let { buildDotNetGraphic } = await import('./graphic');
        return this.component.features!.map(i => buildDotNetGraphic(i, this.layerId, this.viewId));
    }
    
    async setFeatures(value: any): Promise<void> {
        let { buildJsGraphic } = await import('./graphic');
        this.component.features = value.map(i => buildJsGraphic(i)) as any;
    }
    
    async getFeatureViewModelAbilities(): Promise<any> {
        if (!hasValue(this.component.featureViewModelAbilities)) {
            return null;
        }
        
        let { buildDotNetAbilities } = await import('./abilities');
        return await buildDotNetAbilities(this.component.featureViewModelAbilities, this.layerId, this.viewId);
    }
    
    async setFeatureViewModelAbilities(value: any): Promise<void> {
        let { buildJsAbilities } = await import('./abilities');
        this.component.featureViewModelAbilities = await  buildJsAbilities(value, this.layerId, this.viewId);
    }
    
    async getGoToOverride(): Promise<any> {
        if (!hasValue(this.component.goToOverride)) {
            return null;
        }
        
        let { buildDotNetGoToOverride } = await import('./goToOverride');
        return await buildDotNetGoToOverride(this.component.goToOverride);
    }
    
    async setGoToOverride(value: any): Promise<void> {
        let { buildJsGoToOverride } = await import('./goToOverride');
        this.component.goToOverride =  buildJsGoToOverride(value, this.viewId);
    }
    
    async getLocation(): Promise<any> {
        if (!hasValue(this.component.location)) {
            return null;
        }
        
        let { buildDotNetPoint } = await import('./point');
        return buildDotNetPoint(this.component.location);
    }
    
    async setLocation(value: any): Promise<void> {
        let { buildJsPoint } = await import('./point');
        this.component.location =  buildJsPoint(value);
    }
    
    async getSelectedClusterBoundaryFeature(): Promise<any> {
        if (!hasValue(this.component.selectedClusterBoundaryFeature)) {
            return null;
        }
        
        let { buildDotNetGraphic } = await import('./graphic');
        return buildDotNetGraphic(this.component.selectedClusterBoundaryFeature, this.layerId, this.viewId);
    }
    
    async getSelectedFeature(): Promise<any> {
        if (!hasValue(this.component.selectedFeature)) {
            return null;
        }
        
        let { buildDotNetGraphic } = await import('./graphic');
        return buildDotNetGraphic(this.component.selectedFeature, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export function buildJsFeaturesViewModelGenerated(dotNetObject: any): any {
    return sanitize(dotNetObject);
}

export function buildDotNetFeaturesViewModelGenerated(jsObject: any): any {
    return jsObject;
}

