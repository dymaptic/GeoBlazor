// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import FeaturesViewModel from '@arcgis/core/widgets/Features/FeaturesViewModel';
import { hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FeaturesViewModelGenerated implements IPropertyWrapper {
    public component: FeaturesViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: FeaturesViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async clear(): Promise<void> {
        this.component.clear();
    }

    async fetchFeatures(screenPoint: any,
        options: any): Promise<any> {
        return await this.component.fetchFeatures(screenPoint,
            options);
    }

    async next(): Promise<any> {
        let result = this.component.next();
        let { buildDotNetFeaturesViewModel } = await import('./featuresViewModel');
        return buildDotNetFeaturesViewModel(result);
    }

    async open(options: any): Promise<void> {
                let { buildJsFeaturesViewModelOpenOptions } = await import('./featuresViewModelOpenOptions');
let jsOptions = await buildJsFeaturesViewModelOpenOptions(options, this.layerId, this.viewId) as any;
        this.component.open(jsOptions);
    }

    async previous(): Promise<any> {
        let result = this.component.previous();
        let { buildDotNetFeaturesViewModel } = await import('./featuresViewModel');
        return buildDotNetFeaturesViewModel(result);
    }

    async triggerAction(actionIndex: any): Promise<void> {
        this.component.triggerAction(actionIndex);
    }

    // region properties
    
    async getActions(): Promise<any> {
        if (!hasValue(this.component.actions)) {
            return null;
        }
        
        let { buildDotNetActionBase } = await import('./actionBase');
        return await Promise.all(this.component.actions.map(async i => await buildDotNetActionBase(i)));
    }
    
    async setActions(value: any): Promise<void> {
        let { buildJsActionBase } = await import('./actionBase');
        this.component.actions = await Promise.all(value.map(async i => await buildJsActionBase(i, this.layerId, this.viewId))) as any;
    }
    
    async getAllActions(): Promise<any> {
        if (!hasValue(this.component.allActions)) {
            return null;
        }
        
        let { buildDotNetActionBase } = await import('./actionBase');
        return await Promise.all(this.component.allActions.map(async i => await buildDotNetActionBase(i)));
    }
    
    async getDefaultActions(): Promise<any> {
        if (!hasValue(this.component.defaultActions)) {
            return null;
        }
        
        let { buildDotNetActionBase } = await import('./actionBase');
        return await Promise.all(this.component.defaultActions.map(async i => await buildDotNetActionBase(i)));
    }
    
    async getFeatures(): Promise<any> {
        if (!hasValue(this.component.features)) {
            return null;
        }
        
        let { buildDotNetGraphic } = await import('./graphic');
        return this.component.features!.map(i => buildDotNetGraphic(i));
    }
    
    async setFeatures(value: any): Promise<void> {
        let { buildJsGraphic } = await import('./graphic');
        this.component.features = value.map(i => buildJsGraphic(i)) as any;
    }
    
    async getGoToOverride(): Promise<any> {
        if (!hasValue(this.component.goToOverride)) {
            return null;
        }
        
        let { buildDotNetGoToOverride } = await import('./goToOverride');
        return await buildDotNetGoToOverride(this.component.goToOverride);
    }
    
    async setGoToOverride(value: any): Promise<void> {
        let { buildJsGoToOverride } = await import('./goToOverride');
        this.component.goToOverride =  buildJsGoToOverride(value, this.viewId);
    }
    
    async getLocation(): Promise<any> {
        if (!hasValue(this.component.location)) {
            return null;
        }
        
        let { buildDotNetPoint } = await import('./point');
        return buildDotNetPoint(this.component.location);
    }
    
    async setLocation(value: any): Promise<void> {
        let { buildJsPoint } = await import('./point');
        this.component.location =  buildJsPoint(value);
    }
    
    async getSelectedClusterBoundaryFeature(): Promise<any> {
        if (!hasValue(this.component.selectedClusterBoundaryFeature)) {
            return null;
        }
        
        let { buildDotNetGraphic } = await import('./graphic');
        return buildDotNetGraphic(this.component.selectedClusterBoundaryFeature, this.layerId, this.viewId);
    }
    
    async getSelectedFeature(): Promise<any> {
        if (!hasValue(this.component.selectedFeature)) {
            return null;
        }
        
        let { buildDotNetGraphic } = await import('./graphic');
        return buildDotNetGraphic(this.component.selectedFeature, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export function buildJsFeaturesViewModelGenerated(dotNetObject: any): any {
    let { id, dotNetComponentReference, ...sanitizedDotNetObject } = dotNetObject;
    return sanitizedDotNetObject;
}

export function buildDotNetFeaturesViewModelGenerated(jsObject: any): any {
    return jsObject;
}

