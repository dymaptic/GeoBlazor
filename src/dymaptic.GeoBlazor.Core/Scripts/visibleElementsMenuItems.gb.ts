// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetVisibleElementsMenuItems } from './visibleElementsMenuItems';

export async function buildJsVisibleElementsMenuItemsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsVisibleElementsMenuItems: any = {};

    if (hasValue(dotNetObject.clearSelection)) {
        jsVisibleElementsMenuItems.clearSelection = dotNetObject.clearSelection;
    }
    if (hasValue(dotNetObject.deleteSelection)) {
        jsVisibleElementsMenuItems.deleteSelection = dotNetObject.deleteSelection;
    }
    if (hasValue(dotNetObject.refreshData)) {
        jsVisibleElementsMenuItems.refreshData = dotNetObject.refreshData;
    }
    if (hasValue(dotNetObject.selectedRecordsShowAllToggle)) {
        jsVisibleElementsMenuItems.selectedRecordsShowAllToggle = dotNetObject.selectedRecordsShowAllToggle;
    }
    if (hasValue(dotNetObject.selectedRecordsShowSelectedToggle)) {
        jsVisibleElementsMenuItems.selectedRecordsShowSelectedToggle = dotNetObject.selectedRecordsShowSelectedToggle;
    }
    if (hasValue(dotNetObject.toggleColumns)) {
        jsVisibleElementsMenuItems.toggleColumns = dotNetObject.toggleColumns;
    }
    if (hasValue(dotNetObject.zoomToSelection)) {
        jsVisibleElementsMenuItems.zoomToSelection = dotNetObject.zoomToSelection;
    }
    
    jsObjectRefs[dotNetObject.id] = jsVisibleElementsMenuItems;
    arcGisObjectRefs[dotNetObject.id] = jsVisibleElementsMenuItems;
    
    return jsVisibleElementsMenuItems;
}


export async function buildDotNetVisibleElementsMenuItemsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVisibleElementsMenuItems: any = {};
    
    if (hasValue(jsObject.clearSelection)) {
        dotNetVisibleElementsMenuItems.clearSelection = jsObject.clearSelection;
    }
    
    if (hasValue(jsObject.deleteSelection)) {
        dotNetVisibleElementsMenuItems.deleteSelection = jsObject.deleteSelection;
    }
    
    if (hasValue(jsObject.refreshData)) {
        dotNetVisibleElementsMenuItems.refreshData = jsObject.refreshData;
    }
    
    if (hasValue(jsObject.selectedRecordsShowAllToggle)) {
        dotNetVisibleElementsMenuItems.selectedRecordsShowAllToggle = jsObject.selectedRecordsShowAllToggle;
    }
    
    if (hasValue(jsObject.selectedRecordsShowSelectedToggle)) {
        dotNetVisibleElementsMenuItems.selectedRecordsShowSelectedToggle = jsObject.selectedRecordsShowSelectedToggle;
    }
    
    if (hasValue(jsObject.toggleColumns)) {
        dotNetVisibleElementsMenuItems.toggleColumns = jsObject.toggleColumns;
    }
    
    if (hasValue(jsObject.zoomToSelection)) {
        dotNetVisibleElementsMenuItems.zoomToSelection = jsObject.zoomToSelection;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetVisibleElementsMenuItems.id = geoBlazorId;
    }

    return dotNetVisibleElementsMenuItems;
}

