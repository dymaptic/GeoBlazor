// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import ScaleRanges from '@arcgis/core/widgets/ScaleRangeSlider/ScaleRanges';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ScaleRangesGenerated implements IPropertyWrapper {
    public component: ScaleRanges;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ScaleRanges) {
        this.component = component;
    }

    // region methods

    unwrap() {
        return this.component;
    }

    async clampScale(scale: any): Promise<any> {
        return this.component.clampScale(scale);
    }

    async contains(scale: any): Promise<any> {
        return this.component.contains(scale);
    }

    async findScaleRangeByIndex(index: any): Promise<any> {
        return this.component.findScaleRangeByIndex(index);
    }

    async fromScaleRange(minScale: any,
                         maxScale: any): Promise<any> {
        let result = this.component.fromScaleRange(minScale,
            maxScale);
        let {buildDotNetScaleRanges} = await import('./scaleRanges');
        return await buildDotNetScaleRanges(result);
    }

    async isMaxScaleEdge(scale: any): Promise<any> {
        return this.component.isMaxScaleEdge(scale);
    }

    async isMinScaleEdge(scale: any): Promise<any> {
        return this.component.isMinScaleEdge(scale);
    }

    // region properties

    getProperty(prop: string): any {
        return this.component[prop];
    }

    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsScaleRangesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsScaleRanges = new ScaleRanges();


    let {default: ScaleRangesWrapper} = await import('./scaleRanges');
    let scaleRangesWrapper = new ScaleRangesWrapper(jsScaleRanges);
    scaleRangesWrapper.geoBlazorId = dotNetObject.id;
    scaleRangesWrapper.viewId = viewId;
    scaleRangesWrapper.layerId = layerId;

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(scaleRangesWrapper);
    jsObjectRefs[dotNetObject.id] = scaleRangesWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsScaleRanges;
    let {buildDotNetScaleRanges} = await import('./scaleRanges');
    let dnInstantiatedObject = await buildDotNetScaleRanges(jsScaleRanges);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ScaleRanges', e);
    }

    return jsScaleRanges;
}

export async function buildDotNetScaleRangesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetScaleRanges: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetScaleRanges.id = k;
                break;
            }
        }
    }

    return dotNetScaleRanges;
}

