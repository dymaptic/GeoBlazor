// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageSample from '@arcgis/core/rest/support/ImageSample';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetImageSample } from './imageSample';

export async function buildJsImageSampleGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsImageSample = new ImageSample();
    if (hasValue(dotNetObject.location)) {
        let { buildJsPoint } = await import('./point');
        jsImageSample.location = buildJsPoint(dotNetObject.location) as any;
    }

    if (hasValue(dotNetObject.attributes)) {
        jsImageSample.attributes = dotNetObject.attributes;
    }
    if (hasValue(dotNetObject.locationId)) {
        jsImageSample.locationId = dotNetObject.locationId;
    }
    if (hasValue(dotNetObject.pixelValue)) {
        jsImageSample.pixelValue = dotNetObject.pixelValue;
    }
    if (hasValue(dotNetObject.rasterId)) {
        jsImageSample.rasterId = dotNetObject.rasterId;
    }
    if (hasValue(dotNetObject.resolution)) {
        jsImageSample.resolution = dotNetObject.resolution;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsImageSample);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageSample;
    
    let dnInstantiatedObject = await buildDotNetImageSample(jsImageSample);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImageSample', e);
    }
    
    return jsImageSample;
}

export async function buildDotNetImageSampleGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageSample: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.location)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetImageSample.location = buildDotNetPoint(jsObject.location);
        }
        if (hasValue(jsObject.attributes)) {
            dotNetImageSample.attributes = jsObject.attributes;
        }
        if (hasValue(jsObject.locationId)) {
            dotNetImageSample.locationId = jsObject.locationId;
        }
        if (hasValue(jsObject.pixelValue)) {
            dotNetImageSample.pixelValue = jsObject.pixelValue;
        }
        if (hasValue(jsObject.rasterId)) {
            dotNetImageSample.rasterId = jsObject.rasterId;
        }
        if (hasValue(jsObject.resolution)) {
            dotNetImageSample.resolution = jsObject.resolution;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImageSample.id = k;
                break;
            }
        }
    }

    return dotNetImageSample;
}

