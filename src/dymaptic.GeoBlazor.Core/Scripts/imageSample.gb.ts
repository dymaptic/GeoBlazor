// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageSample from '@arcgis/core/rest/support/ImageSample';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetImageSample } from './imageSample';

export async function buildJsImageSampleGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.location)) {
        let { buildJsPoint } = await import('./point');
        properties.location = buildJsPoint(dotNetObject.location) as any;
    }

    if (hasValue(dotNetObject.attributes)) {
        properties.attributes = dotNetObject.attributes;
    }
    if (hasValue(dotNetObject.locationId)) {
        properties.locationId = dotNetObject.locationId;
    }
    if (hasValue(dotNetObject.pixelValue)) {
        properties.pixelValue = dotNetObject.pixelValue;
    }
    if (hasValue(dotNetObject.rasterId)) {
        properties.rasterId = dotNetObject.rasterId;
    }
    if (hasValue(dotNetObject.resolution)) {
        properties.resolution = dotNetObject.resolution;
    }
    let jsImageSample = new ImageSample(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsImageSample);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageSample;
    
    return jsImageSample;
}


export async function buildDotNetImageSampleGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsImageSample } = await import('./imageSample');
        jsComponentRef = await buildJsImageSample(jsObject, layerId, viewId);
    }
    
    let dotNetImageSample: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.location)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetImageSample.location = buildDotNetPoint(jsObject.location);
    }
    if (hasValue(jsObject.attributes)) {
        dotNetImageSample.attributes = jsObject.attributes;
    }
    if (hasValue(jsObject.locationId)) {
        dotNetImageSample.locationId = jsObject.locationId;
    }
    if (hasValue(jsObject.pixelValue)) {
        dotNetImageSample.pixelValue = jsObject.pixelValue;
    }
    if (hasValue(jsObject.rasterId)) {
        dotNetImageSample.rasterId = jsObject.rasterId;
    }
    if (hasValue(jsObject.resolution)) {
        dotNetImageSample.resolution = jsObject.resolution;
    }

    return dotNetImageSample;
}

