// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetKMLLayerViewMapImage } from './kMLLayerViewMapImage';

export async function buildJsKMLLayerViewMapImageGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsKMLLayerViewMapImage: any = {};
    if (hasValue(dotNetObject.extent)) {
        let { buildJsExtent } = await import('./extent');
        jsKMLLayerViewMapImage.Extent = buildJsExtent(dotNetObject.extent) as any;
    }

    if (hasValue(dotNetObject.href)) {
        jsKMLLayerViewMapImage.href = dotNetObject.href;
    }
    if (hasValue(dotNetObject.kMLLayerViewMapImageId)) {
        jsKMLLayerViewMapImage.id = dotNetObject.kMLLayerViewMapImageId;
    }
    if (hasValue(dotNetObject.rotation)) {
        jsKMLLayerViewMapImage.rotation = dotNetObject.rotation;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsKMLLayerViewMapImage);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsKMLLayerViewMapImage;
    
    return jsKMLLayerViewMapImage;
}


export async function buildDotNetKMLLayerViewMapImageGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetKMLLayerViewMapImage: any = {};
    
    if (hasValue(jsObject.Extent)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetKMLLayerViewMapImage.extent = buildDotNetExtent(jsObject.Extent);
    }
    
    if (hasValue(jsObject.href)) {
        dotNetKMLLayerViewMapImage.href = jsObject.href;
    }
    
    if (hasValue(jsObject.id)) {
        dotNetKMLLayerViewMapImage.kMLLayerViewMapImageId = jsObject.id;
    }
    
    if (hasValue(jsObject.rotation)) {
        dotNetKMLLayerViewMapImage.rotation = jsObject.rotation;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetKMLLayerViewMapImage.id = geoBlazorId;
    }

    return dotNetKMLLayerViewMapImage;
}

