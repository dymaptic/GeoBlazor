// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import CoverageDescriptionV201BoundedByEnvelopeAllDims = __esri.CoverageDescriptionV201BoundedByEnvelopeAllDims;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CoverageDescriptionV201BoundedByEnvelopeAllDimsGenerated implements IPropertyWrapper {
    public component: CoverageDescriptionV201BoundedByEnvelopeAllDims;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: CoverageDescriptionV201BoundedByEnvelopeAllDims) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsCoverageDescriptionV201BoundedByEnvelopeAllDimsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCoverageDescriptionV201BoundedByEnvelopeAllDims: any = {}

    if (hasValue(dotNetObject.maxs)) {
        jsCoverageDescriptionV201BoundedByEnvelopeAllDims.maxs = dotNetObject.maxs;
    }
    if (hasValue(dotNetObject.mins)) {
        jsCoverageDescriptionV201BoundedByEnvelopeAllDims.mins = dotNetObject.mins;
    }
    let { default: CoverageDescriptionV201BoundedByEnvelopeAllDimsWrapper } = await import('./coverageDescriptionV201BoundedByEnvelopeAllDims');
    let coverageDescriptionV201BoundedByEnvelopeAllDimsWrapper = new CoverageDescriptionV201BoundedByEnvelopeAllDimsWrapper(jsCoverageDescriptionV201BoundedByEnvelopeAllDims);
    coverageDescriptionV201BoundedByEnvelopeAllDimsWrapper.geoBlazorId = dotNetObject.id;
    coverageDescriptionV201BoundedByEnvelopeAllDimsWrapper.viewId = viewId;
    coverageDescriptionV201BoundedByEnvelopeAllDimsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(coverageDescriptionV201BoundedByEnvelopeAllDimsWrapper);
    jsObjectRefs[dotNetObject.id] = coverageDescriptionV201BoundedByEnvelopeAllDimsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsCoverageDescriptionV201BoundedByEnvelopeAllDims;
    
    let dnInstantiatedObject = await buildDotNetCoverageDescriptionV201BoundedByEnvelopeAllDims(jsCoverageDescriptionV201BoundedByEnvelopeAllDims, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CoverageDescriptionV201BoundedByEnvelopeAllDims', e);
    }
    
    return jsCoverageDescriptionV201BoundedByEnvelopeAllDims;
}

export async function buildDotNetCoverageDescriptionV201BoundedByEnvelopeAllDimsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCoverageDescriptionV201BoundedByEnvelopeAllDims: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.maxs)) {
            dotNetCoverageDescriptionV201BoundedByEnvelopeAllDims.maxs = jsObject.maxs;
        }
        if (hasValue(jsObject.mins)) {
            dotNetCoverageDescriptionV201BoundedByEnvelopeAllDims.mins = jsObject.mins;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCoverageDescriptionV201BoundedByEnvelopeAllDims.id = k;
                break;
            }
        }
    }

    return dotNetCoverageDescriptionV201BoundedByEnvelopeAllDims;
}

