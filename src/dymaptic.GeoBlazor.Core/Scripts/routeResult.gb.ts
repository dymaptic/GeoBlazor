// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import RouteResult from '@arcgis/core/rest/support/RouteResult';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetRouteResult } from './routeResult';

export async function buildJsRouteResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsRouteResult = new RouteResult();
    if (hasValue(dotNetObject.directionLines)) {
        let { buildJsFeatureSet } = await import('./featureSet');
        jsRouteResult.directionLines = buildJsFeatureSet(dotNetObject.directionLines) as any;
    }
    if (hasValue(dotNetObject.directionPoints)) {
        let { buildJsFeatureSet } = await import('./featureSet');
        jsRouteResult.directionPoints = buildJsFeatureSet(dotNetObject.directionPoints) as any;
    }
    if (hasValue(dotNetObject.route)) {
        let { buildJsGraphic } = await import('./graphic');
        jsRouteResult.route = buildJsGraphic(dotNetObject.route) as any;
    }
    if (hasValue(dotNetObject.stops)) {
        let { buildJsGraphic } = await import('./graphic');
        jsRouteResult.stops = dotNetObject.stops.map(i => buildJsGraphic(i)) as any;
    }
    if (hasValue(dotNetObject.traversedEdges)) {
        let { buildJsFeatureSet } = await import('./featureSet');
        jsRouteResult.traversedEdges = buildJsFeatureSet(dotNetObject.traversedEdges) as any;
    }
    if (hasValue(dotNetObject.traversedJunctions)) {
        let { buildJsFeatureSet } = await import('./featureSet');
        jsRouteResult.traversedJunctions = buildJsFeatureSet(dotNetObject.traversedJunctions) as any;
    }
    if (hasValue(dotNetObject.traversedTurns)) {
        let { buildJsFeatureSet } = await import('./featureSet');
        jsRouteResult.traversedTurns = buildJsFeatureSet(dotNetObject.traversedTurns) as any;
    }

    if (hasValue(dotNetObject.directions)) {
        jsRouteResult.directions = dotNetObject.directions;
    }
    if (hasValue(dotNetObject.routeName)) {
        jsRouteResult.routeName = dotNetObject.routeName;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsRouteResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRouteResult;
    
    let dnInstantiatedObject = await buildDotNetRouteResult(jsRouteResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RouteResult', e);
    }
    
    return jsRouteResult;
}

export async function buildDotNetRouteResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRouteResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.directionLines)) {
            let { buildDotNetFeatureSet } = await import('./featureSet');
            dotNetRouteResult.directionLines = await buildDotNetFeatureSet(jsObject.directionLines, layerId, viewId);
        }
        if (hasValue(jsObject.directionPoints)) {
            let { buildDotNetFeatureSet } = await import('./featureSet');
            dotNetRouteResult.directionPoints = await buildDotNetFeatureSet(jsObject.directionPoints, layerId, viewId);
        }
        if (hasValue(jsObject.route)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetRouteResult.route = buildDotNetGraphic(jsObject.route, layerId, viewId);
        }
        if (hasValue(jsObject.stops)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetRouteResult.stops = jsObject.stops.map(i => buildDotNetGraphic(i, layerId, viewId));
        }
        if (hasValue(jsObject.traversedEdges)) {
            let { buildDotNetFeatureSet } = await import('./featureSet');
            dotNetRouteResult.traversedEdges = await buildDotNetFeatureSet(jsObject.traversedEdges, layerId, viewId);
        }
        if (hasValue(jsObject.traversedJunctions)) {
            let { buildDotNetFeatureSet } = await import('./featureSet');
            dotNetRouteResult.traversedJunctions = await buildDotNetFeatureSet(jsObject.traversedJunctions, layerId, viewId);
        }
        if (hasValue(jsObject.traversedTurns)) {
            let { buildDotNetFeatureSet } = await import('./featureSet');
            dotNetRouteResult.traversedTurns = await buildDotNetFeatureSet(jsObject.traversedTurns, layerId, viewId);
        }
    if (hasValue(jsObject.directions)) {
        dotNetRouteResult.directions = jsObject.directions;
    }
    if (hasValue(jsObject.routeName)) {
        dotNetRouteResult.routeName = jsObject.routeName;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRouteResult.id = k;
                break;
            }
        }
    }

    return dotNetRouteResult;
}

