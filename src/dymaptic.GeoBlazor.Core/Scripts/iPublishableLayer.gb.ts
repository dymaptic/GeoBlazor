// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, buildJsStreamReference } from './arcGisJsInterop';
import { buildDotNetIPublishableLayer } from './iPublishableLayer';

export async function buildJsIPublishableLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsPublishableLayer: any = {};

    
    jsObjectRefs[dotNetObject.id] = jsPublishableLayer;
    arcGisObjectRefs[dotNetObject.id] = jsPublishableLayer;
    
    try {
        let jsObjectRef = DotNet.createJSObjectReference(jsPublishableLayer);
        let { buildDotNetIPublishableLayer } = await import('./iPublishableLayer');
        let dnInstantiatedObject = await buildDotNetIPublishableLayer(jsPublishableLayer, layerId, viewId);

        let dnStream = buildJsStreamReference(dnInstantiatedObject);
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, dnStream);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for IPublishableLayer', e);
    }
    
    return jsPublishableLayer;
}


export async function buildDotNetIPublishableLayerGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIPublishableLayer: any = {};
    
    if (hasValue(jsObject.publishingInfo)) {
        dotNetIPublishableLayer.publishingInfo = removeCircularReferences(jsObject.publishingInfo);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetIPublishableLayer.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetIPublishableLayer.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetIPublishableLayer.id)) {
        jsObjectRefs[dotNetIPublishableLayer.id] ??= jsObject;
        arcGisObjectRefs[dotNetIPublishableLayer.id] ??= jsObject;
    }

    return dotNetIPublishableLayer;
}

