// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetClusterRendererResult } from './clusterRendererResult';

export async function buildJsClusterRendererResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsClusterRendererResult: any = {};
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsPieChartRenderer } = await import('./pieChartRenderer');
        jsClusterRendererResult.renderer = await buildJsPieChartRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.fields)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedFields } = dotNetObject.fields;
        jsClusterRendererResult.fields = sanitizedFields;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsClusterRendererResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsClusterRendererResult;
    
    let dnInstantiatedObject = await buildDotNetClusterRendererResult(jsClusterRendererResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ClusterRendererResult', e);
    }
    
    return jsClusterRendererResult;
}

export async function buildDotNetClusterRendererResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetClusterRendererResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.renderer)) {
            let { buildDotNetPieChartRenderer } = await import('./pieChartRenderer');
            dotNetClusterRendererResult.renderer = await buildDotNetPieChartRenderer(jsObject.renderer);
        }
    if (hasValue(jsObject.fields)) {
        dotNetClusterRendererResult.fields = jsObject.fields;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetClusterRendererResult.id = k;
                break;
            }
        }
    }

    return dotNetClusterRendererResult;
}

