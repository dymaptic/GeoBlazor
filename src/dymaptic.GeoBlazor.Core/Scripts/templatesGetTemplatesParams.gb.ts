// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetTemplatesGetTemplatesParams } from './templatesGetTemplatesParams';

export async function buildJsTemplatesGetTemplatesParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jstemplatesGetTemplatesParams: any = {}
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jstemplatesGetTemplatesParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsRenderer } = await import('./renderer');
        jstemplatesGetTemplatesParams.renderer = await buildJsRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jstemplatesGetTemplatesParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jstemplatesGetTemplatesParams;
    
    let dnInstantiatedObject = await buildDotNetTemplatesGetTemplatesParams(jstemplatesGetTemplatesParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TemplatesGetTemplatesParams', e);
    }
    
    return jstemplatesGetTemplatesParams;
}

export async function buildDotNetTemplatesGetTemplatesParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTemplatesGetTemplatesParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.renderer)) {
            let { buildDotNetRenderer } = await import('./renderer');
            dotNetTemplatesGetTemplatesParams.renderer = await buildDotNetRenderer(jsObject.renderer);
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTemplatesGetTemplatesParams.id = k;
                break;
            }
        }
    }

    return dotNetTemplatesGetTemplatesParams;
}

