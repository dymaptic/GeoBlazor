// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import PointCloudRenderer from '@arcgis/core/renderers/PointCloudRenderer';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetPointCloudRenderer } from './pointCloudRenderer';

export async function buildJsPointCloudRendererGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.colorModulation)) {
        let { buildJsPointCloudRendererColorModulation } = await import('./pointCloudRendererColorModulation');
        properties.colorModulation = await buildJsPointCloudRendererColorModulation(dotNetObject.colorModulation) as any;
    }
    if (hasValue(dotNetObject.pointSizeAlgorithm)) {
        let { buildJsPointCloudRendererPointSizeAlgorithm } = await import('./pointCloudRendererPointSizeAlgorithm');
        properties.pointSizeAlgorithm = await buildJsPointCloudRendererPointSizeAlgorithm(dotNetObject.pointSizeAlgorithm) as any;
    }

    if (hasValue(dotNetObject.pointsPerInch)) {
        properties.pointsPerInch = dotNetObject.pointsPerInch;
    }
    let jsPointCloudRenderer = new PointCloudRenderer(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsPointCloudRenderer);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPointCloudRenderer;
    
    return jsPointCloudRenderer;
}


export async function buildDotNetPointCloudRendererGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPointCloudRenderer: any = {};
    
    if (hasValue(jsObject.colorModulation)) {
        let { buildDotNetPointCloudRendererColorModulation } = await import('./pointCloudRendererColorModulation');
        dotNetPointCloudRenderer.colorModulation = await buildDotNetPointCloudRendererColorModulation(jsObject.colorModulation);
    }
    
    if (hasValue(jsObject.pointSizeAlgorithm)) {
        let { buildDotNetPointCloudRendererPointSizeAlgorithm } = await import('./pointCloudRendererPointSizeAlgorithm');
        dotNetPointCloudRenderer.pointSizeAlgorithm = await buildDotNetPointCloudRendererPointSizeAlgorithm(jsObject.pointSizeAlgorithm);
    }
    
    if (hasValue(jsObject.pointsPerInch)) {
        dotNetPointCloudRenderer.pointsPerInch = jsObject.pointsPerInch;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetPointCloudRenderer.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetPointCloudRenderer.id = geoBlazorId;
    }

    return dotNetPointCloudRenderer;
}

