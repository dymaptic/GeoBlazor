// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import DirectionsFeature from '@arcgis/core/rest/support/DirectionsFeature';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetDirectionsFeature } from './directionsFeature';

export async function buildJsDirectionsFeatureGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.events)) {
        let { buildJsDirectionsEvent } = await import('./directionsEvent');
        properties.events = await Promise.all(dotNetObject.events.map(async i => await buildJsDirectionsEvent(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsPolyline } = await import('./polyline');
        properties.geometry = buildJsPolyline(dotNetObject.geometry) as any;
    }

    if (hasValue(dotNetObject.attributes)) {
        properties.attributes = dotNetObject.attributes;
    }
    if (hasValue(dotNetObject.strings)) {
        properties.strings = dotNetObject.strings;
    }
    let jsDirectionsFeature = new DirectionsFeature(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsDirectionsFeature);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsDirectionsFeature;
    
    let dnInstantiatedObject = await buildDotNetDirectionsFeature(jsDirectionsFeature);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DirectionsFeature', e);
    }
    
    return jsDirectionsFeature;
}

export async function buildDotNetDirectionsFeatureGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDirectionsFeature: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.events)) {
            let { buildDotNetDirectionsEvent } = await import('./directionsEvent');
            dotNetDirectionsFeature.events = await Promise.all(jsObject.events.map(async i => await buildDotNetDirectionsEvent(i)));
        }
        if (hasValue(jsObject.geometry)) {
            let { buildDotNetPolyline } = await import('./polyline');
            dotNetDirectionsFeature.geometry = buildDotNetPolyline(jsObject.geometry);
        }
    if (hasValue(jsObject.attributes)) {
        dotNetDirectionsFeature.attributes = jsObject.attributes;
    }
    if (hasValue(jsObject.strings)) {
        dotNetDirectionsFeature.strings = jsObject.strings;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetDirectionsFeature.id = k;
                break;
            }
        }
    }

    return dotNetDirectionsFeature;
}

