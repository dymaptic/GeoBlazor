// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetGroundView } from './groundView';
import GroundView from '@arcgis/core/views/GroundView';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsGroundViewGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsGroundView = new GroundView();

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsGroundView);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsGroundView;
    
    let dnInstantiatedObject = await buildDotNetGroundView(jsGroundView);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for GroundView', e);
    }
    
    return jsGroundView;
}

export async function buildDotNetGroundViewGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGroundView: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.elevationSampler)) {
            let { buildDotNetElevationSampler } = await import('./elevationSampler');
            dotNetGroundView.elevationSampler = await buildDotNetElevationSampler(jsObject.elevationSampler);
        }
        if (hasValue(jsObject.extent)) {
            let { buildDotNetExtent } = await import('./extent');
            dotNetGroundView.extent = buildDotNetExtent(jsObject.extent);
        }
        if (hasValue(jsObject.layerViews)) {
            let { buildDotNetLayerView } = await import('./layerView');
            dotNetGroundView.layerViews = await Promise.all(jsObject.layerViews.map(async i => await buildDotNetLayerView(i)));
        }
        if (hasValue(jsObject.updating)) {
            dotNetGroundView.updating = jsObject.updating;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetGroundView.id = k;
                break;
            }
        }
    }

    return dotNetGroundView;
}

