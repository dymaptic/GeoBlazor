// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import TraceResult from '@arcgis/core/rest/networks/support/TraceResult';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetTraceResult } from './traceResult';

export async function buildJsTraceResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.aggregatedGeometry)) {
        let { buildJsAggregatedGeometry } = await import('./aggregatedGeometry');
        properties.aggregatedGeometry = await buildJsAggregatedGeometry(dotNetObject.aggregatedGeometry, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.elements)) {
        properties.elements = dotNetObject.elements;
    }
    if (hasValue(dotNetObject.globalFunctionResults)) {
        properties.globalFunctionResults = dotNetObject.globalFunctionResults;
    }
    if (hasValue(dotNetObject.kFeaturesForKNNFound)) {
        properties.kFeaturesForKNNFound = dotNetObject.kFeaturesForKNNFound;
    }
    if (hasValue(dotNetObject.startingPointsIgnored)) {
        properties.startingPointsIgnored = dotNetObject.startingPointsIgnored;
    }
    if (hasValue(dotNetObject.warnings)) {
        properties.warnings = dotNetObject.warnings;
    }
    let jsTraceResult = new TraceResult(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsTraceResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTraceResult;
    
    let dnInstantiatedObject = await buildDotNetTraceResult(jsTraceResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TraceResult', e);
    }
    
    return jsTraceResult;
}

export async function buildDotNetTraceResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTraceResult: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.aggregatedGeometry)) {
        let { buildDotNetAggregatedGeometry } = await import('./aggregatedGeometry');
        dotNetTraceResult.aggregatedGeometry = await buildDotNetAggregatedGeometry(jsObject.aggregatedGeometry);
    }
    if (hasValue(jsObject.elements)) {
        dotNetTraceResult.elements = jsObject.elements;
    }
    if (hasValue(jsObject.globalFunctionResults)) {
        dotNetTraceResult.globalFunctionResults = jsObject.globalFunctionResults;
    }
    if (hasValue(jsObject.kFeaturesForKNNFound)) {
        dotNetTraceResult.kFeaturesForKNNFound = jsObject.kFeaturesForKNNFound;
    }
    if (hasValue(jsObject.startingPointsIgnored)) {
        dotNetTraceResult.startingPointsIgnored = jsObject.startingPointsIgnored;
    }
    if (hasValue(jsObject.warnings)) {
        dotNetTraceResult.warnings = jsObject.warnings;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTraceResult.id = k;
                break;
            }
        }
    }

    return dotNetTraceResult;
}

