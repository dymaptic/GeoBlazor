// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetCIMMarkerGraphic } from './cIMMarkerGraphic';

export async function buildJsCIMMarkerGraphicGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCIMMarkerGraphic: any = {};
    if (hasValue(dotNetObject.symbol)) {
        let { buildJsSymbol } = await import('./symbol');
        jsCIMMarkerGraphic.symbol = buildJsSymbol(dotNetObject.symbol) as any;
    }

    if (hasValue(dotNetObject.geometry)) {
        jsCIMMarkerGraphic.geometry = dotNetObject.geometry;
    }
    if (hasValue(dotNetObject.primitiveName)) {
        jsCIMMarkerGraphic.primitiveName = dotNetObject.primitiveName;
    }
    if (hasValue(dotNetObject.textString)) {
        jsCIMMarkerGraphic.textString = dotNetObject.textString;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCIMMarkerGraphic);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCIMMarkerGraphic;
    
    let dnInstantiatedObject = await buildDotNetCIMMarkerGraphic(jsCIMMarkerGraphic);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CIMMarkerGraphic', e);
    }
    
    return jsCIMMarkerGraphic;
}

export async function buildDotNetCIMMarkerGraphicGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCIMMarkerGraphic: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.symbol)) {
            let { buildDotNetSymbol } = await import('./symbol');
            dotNetCIMMarkerGraphic.symbol = buildDotNetSymbol(jsObject.symbol);
        }
    if (hasValue(jsObject.geometry)) {
        dotNetCIMMarkerGraphic.geometry = jsObject.geometry;
    }
    if (hasValue(jsObject.primitiveName)) {
        dotNetCIMMarkerGraphic.primitiveName = jsObject.primitiveName;
    }
    if (hasValue(jsObject.textString)) {
        dotNetCIMMarkerGraphic.textString = jsObject.textString;
    }
    if (hasValue(jsObject.type)) {
        dotNetCIMMarkerGraphic.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCIMMarkerGraphic.id = k;
                break;
            }
        }
    }

    return dotNetCIMMarkerGraphic;
}

