// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetUniqueValueCreateRendererParams } from './uniqueValueCreateRendererParams';

export async function buildJsUniqueValueCreateRendererParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsuniqueValueCreateRendererParams: any = {};
    if (hasValue(dotNetObject.colorRamp)) {
        let { buildJsColorRamp } = await import('./colorRamp');
        jsuniqueValueCreateRendererParams.colorRamp = buildJsColorRamp(dotNetObject.colorRamp) as any;
    }
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsuniqueValueCreateRendererParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.rasterFunction)) {
        let { buildJsRasterFunction } = await import('./rasterFunction');
        jsuniqueValueCreateRendererParams.rasterFunction = await buildJsRasterFunction(dotNetObject.rasterFunction, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.renderingRule)) {
        let { buildJsRasterFunction } = await import('./rasterFunction');
        jsuniqueValueCreateRendererParams.renderingRule = await buildJsRasterFunction(dotNetObject.renderingRule, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.classFieldName)) {
        jsuniqueValueCreateRendererParams.classFieldName = dotNetObject.classFieldName;
    }
    if (hasValue(dotNetObject.colors)) {
        jsuniqueValueCreateRendererParams.colors = dotNetObject.colors;
    }
    if (hasValue(dotNetObject.signal)) {
        jsuniqueValueCreateRendererParams.signal = dotNetObject.signal;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsuniqueValueCreateRendererParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsuniqueValueCreateRendererParams;
    
    return jsuniqueValueCreateRendererParams;
}


export async function buildDotNetUniqueValueCreateRendererParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUniqueValueCreateRendererParams: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.colorRamp)) {
        let { buildDotNetColorRamp } = await import('./colorRamp');
        dotNetUniqueValueCreateRendererParams.colorRamp = buildDotNetColorRamp(jsObject.colorRamp);
    }
    if (hasValue(jsObject.rasterFunction)) {
        let { buildDotNetRasterFunction } = await import('./rasterFunction');
        dotNetUniqueValueCreateRendererParams.rasterFunction = await buildDotNetRasterFunction(jsObject.rasterFunction);
    }
    if (hasValue(jsObject.classFieldName)) {
        dotNetUniqueValueCreateRendererParams.classFieldName = jsObject.classFieldName;
    }
    if (hasValue(jsObject.colors)) {
        dotNetUniqueValueCreateRendererParams.colors = jsObject.colors;
    }
    if (hasValue(jsObject.signal)) {
        dotNetUniqueValueCreateRendererParams.signal = jsObject.signal;
    }

    return dotNetUniqueValueCreateRendererParams;
}

