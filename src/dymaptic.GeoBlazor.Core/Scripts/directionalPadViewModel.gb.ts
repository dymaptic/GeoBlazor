// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import DirectionalPadViewModel from '@arcgis/core/widgets/DirectionalPad/DirectionalPadViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class DirectionalPadViewModelGenerated implements IPropertyWrapper {
    public component: DirectionalPadViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: DirectionalPadViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async beginFollowingPointer(pointerLocation: any,
        widgetCenter: any): Promise<void> {
        this.component.beginFollowingPointer(pointerLocation,
            widgetCenter);
    }

    async moveOnce(angle: any): Promise<void> {
        this.component.moveOnce(angle);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsDirectionalPadViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.disabled)) {
        properties.disabled = dotNetObject.disabled;
    }
    if (hasValue(dotNetObject.rotation)) {
        properties.rotation = dotNetObject.rotation;
    }
    let jsDirectionalPadViewModel = new DirectionalPadViewModel(properties);

    let { default: DirectionalPadViewModelWrapper } = await import('./directionalPadViewModel');
    let directionalPadViewModelWrapper = new DirectionalPadViewModelWrapper(jsDirectionalPadViewModel);
    directionalPadViewModelWrapper.geoBlazorId = dotNetObject.id;
    directionalPadViewModelWrapper.viewId = viewId;
    directionalPadViewModelWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(directionalPadViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = directionalPadViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsDirectionalPadViewModel;
    let { buildDotNetDirectionalPadViewModel } = await import('./directionalPadViewModel');
    let dnInstantiatedObject = await buildDotNetDirectionalPadViewModel(jsDirectionalPadViewModel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DirectionalPadViewModel', e);
    }
    
    return jsDirectionalPadViewModel;
}

export async function buildDotNetDirectionalPadViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDirectionalPadViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.angle)) {
        dotNetDirectionalPadViewModel.angle = jsObject.angle;
    }
    if (hasValue(jsObject.disabled)) {
        dotNetDirectionalPadViewModel.disabled = jsObject.disabled;
    }
    if (hasValue(jsObject.rotation)) {
        dotNetDirectionalPadViewModel.rotation = jsObject.rotation;
    }
    if (hasValue(jsObject.state)) {
        dotNetDirectionalPadViewModel.state = jsObject.state;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetDirectionalPadViewModel.id = k;
                break;
            }
        }
    }

    return dotNetDirectionalPadViewModel;
}

