// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ColorSizeSlider from '@arcgis/core/widgets/smartMapping/ColorSizeSlider';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ColorSizeSliderGenerated implements IPropertyWrapper {
    public component: ColorSizeSlider;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ColorSizeSlider) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async updateFromRendererResult(rendererResult: any,
        histogramResult: any): Promise<void> {
        let { buildJsUnivariateColorSizeContinuousRendererResult } = await import('./univariateColorSizeContinuousRendererResult');
        let jsRendererResult = await buildJsUnivariateColorSizeContinuousRendererResult(rendererResult, this.layerId, this.viewId) as any;
        this.component.updateFromRendererResult(jsRendererResult,
            histogramResult);
    }

    async updateRenderer(renderer: any): Promise<any> {
        let { buildJsClassBreaksRenderer } = await import('./classBreaksRenderer');
        let jsRenderer = await buildJsClassBreaksRenderer(renderer, this.layerId, this.viewId) as any;
        let result = this.component.updateRenderer(jsRenderer);
        let { buildDotNetClassBreaksRenderer } = await import('./classBreaksRenderer');
        return await buildDotNetClassBreaksRenderer(result);
    }

    async updateVisualVariables(variables: any): Promise<any> {
        return this.component.updateVisualVariables(variables);
    }

    // region properties
    
    async getStops(): Promise<any> {
        if (!hasValue(this.component.stops)) {
            return null;
        }
        
        let { buildDotNetColorSizeStop } = await import('./colorSizeStop');
        return await Promise.all(this.component.stops.map(async i => await buildDotNetColorSizeStop(i)));
    }
    
    async setStops(value: any): Promise<void> {
        let { buildJsColorSizeStop } = await import('./colorSizeStop');
        this.component.stops = await Promise.all(value.map(async i => await buildJsColorSizeStop(i, this.layerId, this.viewId))) as any;
    }
    
    async getViewModel(): Promise<any> {
        if (!hasValue(this.component.viewModel)) {
            return null;
        }
        
        let { buildDotNetColorSizeSliderViewModel } = await import('./colorSizeSliderViewModel');
        return await buildDotNetColorSizeSliderViewModel(this.component.viewModel);
    }
    async setViewModel(value: any): Promise<void> {
        let { buildJsColorSizeSliderViewModel } = await import('./colorSizeSliderViewModel');
        this.component.viewModel = await  buildJsColorSizeSliderViewModel(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsColorSizeSliderGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsColorSizeSlider = new ColorSizeSlider();
    if (hasValue(dotNetObject.hasInputFormatFunction) && dotNetObject.hasInputFormatFunction) {
        jsColorSizeSlider.inputFormatFunction = (value,
        type,
        index) => {
            let func = new Function('value',
            'type',
            'index', dotNetObject.inputFormatFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }
    if (hasValue(dotNetObject.hasInputParseFunction) && dotNetObject.hasInputParseFunction) {
        jsColorSizeSlider.inputParseFunction = (value,
        type,
        index) => {
            let func = new Function('value',
            'type',
            'index', dotNetObject.inputParseFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }
    if (hasValue(dotNetObject.hasLabelFormatFunction) && dotNetObject.hasLabelFormatFunction) {
        jsColorSizeSlider.labelFormatFunction = (value,
        type,
        index) => {
            let func = new Function('value',
            'type',
            'index', dotNetObject.labelFormatFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }
    if (hasValue(dotNetObject.stops)) {
        let { buildJsColorSizeStop } = await import('./colorSizeStop');
        jsColorSizeSlider.stops = await Promise.all(dotNetObject.stops.map(async i => await buildJsColorSizeStop(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsColorSizeSliderViewModel } = await import('./colorSizeSliderViewModel');
        jsColorSizeSlider.viewModel = await buildJsColorSizeSliderViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.handlesSyncedToPrimary)) {
        jsColorSizeSlider.handlesSyncedToPrimary = dotNetObject.handlesSyncedToPrimary;
    }
    if (hasValue(dotNetObject.histogramConfig)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedHistogramConfig } = dotNetObject.histogramConfig;
        jsColorSizeSlider.histogramConfig = sanitizedHistogramConfig;
    }
    if (hasValue(dotNetObject.max)) {
        jsColorSizeSlider.max = dotNetObject.max;
    }
    if (hasValue(dotNetObject.min)) {
        jsColorSizeSlider.min = dotNetObject.min;
    }
    if (hasValue(dotNetObject.persistSizeRangeEnabled)) {
        jsColorSizeSlider.persistSizeRangeEnabled = dotNetObject.persistSizeRangeEnabled;
    }
    if (hasValue(dotNetObject.precision)) {
        jsColorSizeSlider.precision = dotNetObject.precision;
    }
    if (hasValue(dotNetObject.primaryHandleEnabled)) {
        jsColorSizeSlider.primaryHandleEnabled = dotNetObject.primaryHandleEnabled;
    }
    if (hasValue(dotNetObject.syncedSegmentsEnabled)) {
        jsColorSizeSlider.syncedSegmentsEnabled = dotNetObject.syncedSegmentsEnabled;
    }
    if (hasValue(dotNetObject.visibleElements)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedVisibleElements } = dotNetObject.visibleElements;
        jsColorSizeSlider.visibleElements = sanitizedVisibleElements;
    }
    if (hasValue(dotNetObject.zoomOptions)) {
        jsColorSizeSlider.zoomOptions = dotNetObject.zoomOptions;
    }
    jsColorSizeSlider.on('max-change', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsaxChange', evt);
    });
    
    jsColorSizeSlider.on('segment-drag', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsegmentDrag', evt);
    });
    
    jsColorSizeSlider.on('thumb-change', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJshumbChange', evt);
    });
    
    jsColorSizeSlider.on('thumb-drag', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJshumbDrag', evt);
    });
    
    jsColorSizeSlider.on('min-change', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsinChange', evt);
    });
    

    let { default: ColorSizeSliderWrapper } = await import('./colorSizeSlider');
    let colorSizeSliderWrapper = new ColorSizeSliderWrapper(jsColorSizeSlider);
    colorSizeSliderWrapper.geoBlazorId = dotNetObject.id;
    colorSizeSliderWrapper.viewId = viewId;
    colorSizeSliderWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(colorSizeSliderWrapper);
    jsObjectRefs[dotNetObject.id] = colorSizeSliderWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsColorSizeSlider;
    let { buildDotNetColorSizeSlider } = await import('./colorSizeSlider');
    let dnInstantiatedObject = await buildDotNetColorSizeSlider(jsColorSizeSlider);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ColorSizeSlider', e);
    }
    
    return jsColorSizeSlider;
}

export async function buildDotNetColorSizeSliderGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetColorSizeSlider: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.stops)) {
            let { buildDotNetColorSizeStop } = await import('./colorSizeStop');
            dotNetColorSizeSlider.stops = await Promise.all(jsObject.stops.map(async i => await buildDotNetColorSizeStop(i)));
        }
        if (hasValue(jsObject.viewModel)) {
            let { buildDotNetColorSizeSliderViewModel } = await import('./colorSizeSliderViewModel');
            dotNetColorSizeSlider.viewModel = await buildDotNetColorSizeSliderViewModel(jsObject.viewModel);
        }
    if (hasValue(jsObject.handlesSyncedToPrimary)) {
        dotNetColorSizeSlider.handlesSyncedToPrimary = jsObject.handlesSyncedToPrimary;
    }
    if (hasValue(jsObject.histogramConfig)) {
        dotNetColorSizeSlider.histogramConfig = jsObject.histogramConfig;
    }
    if (hasValue(jsObject.inputFormatFunction)) {
        dotNetColorSizeSlider.inputFormatFunction = jsObject.inputFormatFunction;
    }
    if (hasValue(jsObject.inputParseFunction)) {
        dotNetColorSizeSlider.inputParseFunction = jsObject.inputParseFunction;
    }
    if (hasValue(jsObject.labelFormatFunction)) {
        dotNetColorSizeSlider.labelFormatFunction = jsObject.labelFormatFunction;
    }
    if (hasValue(jsObject.max)) {
        dotNetColorSizeSlider.max = jsObject.max;
    }
    if (hasValue(jsObject.min)) {
        dotNetColorSizeSlider.min = jsObject.min;
    }
    if (hasValue(jsObject.persistSizeRangeEnabled)) {
        dotNetColorSizeSlider.persistSizeRangeEnabled = jsObject.persistSizeRangeEnabled;
    }
    if (hasValue(jsObject.precision)) {
        dotNetColorSizeSlider.precision = jsObject.precision;
    }
    if (hasValue(jsObject.primaryHandleEnabled)) {
        dotNetColorSizeSlider.primaryHandleEnabled = jsObject.primaryHandleEnabled;
    }
    if (hasValue(jsObject.state)) {
        dotNetColorSizeSlider.state = jsObject.state;
    }
    if (hasValue(jsObject.syncedSegmentsEnabled)) {
        dotNetColorSizeSlider.syncedSegmentsEnabled = jsObject.syncedSegmentsEnabled;
    }
    if (hasValue(jsObject.type)) {
        dotNetColorSizeSlider.type = jsObject.type;
    }
    if (hasValue(jsObject.visibleElements)) {
        dotNetColorSizeSlider.visibleElements = jsObject.visibleElements;
    }
    if (hasValue(jsObject.zoomOptions)) {
        dotNetColorSizeSlider.zoomOptions = jsObject.zoomOptions;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetColorSizeSlider.id = k;
                break;
            }
        }
    }

    return dotNetColorSizeSlider;
}

