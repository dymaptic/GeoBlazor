// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageAngleParameters from '@arcgis/core/rest/support/ImageAngleParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, sanitize } from './arcGisJsInterop';
import { buildDotNetImageAngleParameters } from './imageAngleParameters';

export async function buildJsImageAngleParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.point)) {
        let { buildJsPoint } = await import('./point');
        properties.point = buildJsPoint(dotNetObject.point) as any;
    }

    if (hasValue(dotNetObject.angleNames)) {
        properties.angleNames = dotNetObject.angleNames;
    }
    if (hasValue(dotNetObject.rasterId)) {
        properties.rasterId = dotNetObject.rasterId;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        properties.spatialReference = sanitize(dotNetObject.spatialReference);
    }
    let jsImageAngleParameters = new ImageAngleParameters(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsImageAngleParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageAngleParameters;
    
    return jsImageAngleParameters;
}


export async function buildDotNetImageAngleParametersGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsImageAngleParameters } = await import('./imageAngleParameters');
        jsComponentRef = await buildJsImageAngleParameters(jsObject, layerId, viewId);
    }
    
    let dotNetImageAngleParameters: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.point)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetImageAngleParameters.point = buildDotNetPoint(jsObject.point);
    }
    if (hasValue(jsObject.angleNames)) {
        dotNetImageAngleParameters.angleNames = jsObject.angleNames;
    }
    if (hasValue(jsObject.rasterId)) {
        dotNetImageAngleParameters.rasterId = jsObject.rasterId;
    }
    if (hasValue(jsObject.spatialReference)) {
        dotNetImageAngleParameters.spatialReference = jsObject.spatialReference;
    }

    return dotNetImageAngleParameters;
}

