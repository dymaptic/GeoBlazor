// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageAngleParameters from '@arcgis/core/rest/support/ImageAngleParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetImageAngleParameters } from './imageAngleParameters';

export async function buildJsImageAngleParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.point)) {
        let { buildJsPoint } = await import('./point');
        properties.point = buildJsPoint(dotNetObject.point) as any;
    }

    if (hasValue(dotNetObject.angleNames)) {
        properties.angleNames = dotNetObject.angleNames;
    }
    if (hasValue(dotNetObject.rasterId)) {
        properties.rasterId = dotNetObject.rasterId;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        const { id, dotNetComponentReference, ...sanitizedSpatialReference } = dotNetObject.spatialReference;
        properties.spatialReference = sanitizedSpatialReference;
    }
    let jsImageAngleParameters = new ImageAngleParameters(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsImageAngleParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageAngleParameters;
    
    let { buildDotNetImageAngleParameters } = await import('./imageAngleParameters');
    let dnInstantiatedObject = await buildDotNetImageAngleParameters(jsImageAngleParameters);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type ImageAngleParameters detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImageAngleParameters', e);
    }
    
    return jsImageAngleParameters;
}


export async function buildDotNetImageAngleParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageAngleParameters: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.point)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetImageAngleParameters.point = buildDotNetPoint(jsObject.point);
    }
    if (hasValue(jsObject.angleNames)) {
        dotNetImageAngleParameters.angleNames = jsObject.angleNames;
    }
    if (hasValue(jsObject.rasterId)) {
        dotNetImageAngleParameters.rasterId = jsObject.rasterId;
    }
    if (hasValue(jsObject.spatialReference)) {
        dotNetImageAngleParameters.spatialReference = jsObject.spatialReference;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImageAngleParameters.id = k;
                break;
            }
        }
    }

    return dotNetImageAngleParameters;
}

