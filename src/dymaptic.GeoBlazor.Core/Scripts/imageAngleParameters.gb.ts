// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetImageAngleParameters } from './imageAngleParameters';
import ImageAngleParameters from '@arcgis/core/rest/support/ImageAngleParameters';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsImageAngleParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsImageAngleParameters = new ImageAngleParameters();
    if (hasValue(dotNetObject.point)) {
        let { buildJsPoint } = await import('./point');
        jsImageAngleParameters.point = buildJsPoint(dotNetObject.point) as any;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        jsImageAngleParameters.spatialReference = buildJsSpatialReference(dotNetObject.spatialReference) as any;
    }

    if (hasValue(dotNetObject.angleNames)) {
        jsImageAngleParameters.angleNames = dotNetObject.angleNames;
    }
    if (hasValue(dotNetObject.rasterId)) {
        jsImageAngleParameters.rasterId = dotNetObject.rasterId;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsImageAngleParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageAngleParameters;
    
    let dnInstantiatedObject = await buildDotNetImageAngleParameters(jsImageAngleParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImageAngleParameters', e);
    }
    
    return jsImageAngleParameters;
}

export async function buildDotNetImageAngleParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageAngleParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.point)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetImageAngleParameters.point = buildDotNetPoint(jsObject.point);
        }
        if (hasValue(jsObject.spatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetImageAngleParameters.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference);
        }
        if (hasValue(jsObject.angleNames)) {
            dotNetImageAngleParameters.angleNames = jsObject.angleNames;
        }
        if (hasValue(jsObject.rasterId)) {
            dotNetImageAngleParameters.rasterId = jsObject.rasterId;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImageAngleParameters.id = k;
                break;
            }
        }
    }

    return dotNetImageAngleParameters;
}

