// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageDistanceParameters from '@arcgis/core/rest/support/ImageDistanceParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetImageDistanceParameters } from './imageDistanceParameters';

export async function buildJsImageDistanceParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.fromGeometry)) {
        let { buildJsPoint } = await import('./point');
        properties.fromGeometry = buildJsPoint(dotNetObject.fromGeometry) as any;
    }
    if (hasValue(dotNetObject.mosaicRule)) {
        let { buildJsMosaicRule } = await import('./mosaicRule');
        properties.mosaicRule = await buildJsMosaicRule(dotNetObject.mosaicRule) as any;
    }
    if (hasValue(dotNetObject.pixelSize)) {
        let { buildJsPoint } = await import('./point');
        properties.pixelSize = buildJsPoint(dotNetObject.pixelSize) as any;
    }
    if (hasValue(dotNetObject.toGeometry)) {
        let { buildJsPoint } = await import('./point');
        properties.toGeometry = buildJsPoint(dotNetObject.toGeometry) as any;
    }

    if (hasValue(dotNetObject.angularUnit)) {
        properties.angularUnit = dotNetObject.angularUnit;
    }
    if (hasValue(dotNetObject.is3D)) {
        properties.is3D = dotNetObject.is3D;
    }
    if (hasValue(dotNetObject.linearUnit)) {
        properties.linearUnit = dotNetObject.linearUnit;
    }
    let jsImageDistanceParameters = new ImageDistanceParameters(properties);
    
    jsObjectRefs[dotNetObject.id] = jsImageDistanceParameters;
    arcGisObjectRefs[dotNetObject.id] = jsImageDistanceParameters;
    
    return jsImageDistanceParameters;
}


export async function buildDotNetImageDistanceParametersGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageDistanceParameters: any = {};
    
    if (hasValue(jsObject.fromGeometry)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetImageDistanceParameters.fromGeometry = buildDotNetPoint(jsObject.fromGeometry);
    }
    
    if (hasValue(jsObject.mosaicRule)) {
        let { buildDotNetMosaicRule } = await import('./mosaicRule');
        dotNetImageDistanceParameters.mosaicRule = await buildDotNetMosaicRule(jsObject.mosaicRule);
    }
    
    if (hasValue(jsObject.pixelSize)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetImageDistanceParameters.pixelSize = buildDotNetPoint(jsObject.pixelSize);
    }
    
    if (hasValue(jsObject.toGeometry)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetImageDistanceParameters.toGeometry = buildDotNetPoint(jsObject.toGeometry);
    }
    
    if (hasValue(jsObject.angularUnit)) {
        dotNetImageDistanceParameters.angularUnit = removeCircularReferences(jsObject.angularUnit);
    }
    
    if (hasValue(jsObject.is3D)) {
        dotNetImageDistanceParameters.is3D = jsObject.is3D;
    }
    
    if (hasValue(jsObject.linearUnit)) {
        dotNetImageDistanceParameters.linearUnit = removeCircularReferences(jsObject.linearUnit);
    }
    
    if (hasValue(jsObject.type)) {
        dotNetImageDistanceParameters.type = removeCircularReferences(jsObject.type);
    }
    

    return dotNetImageDistanceParameters;
}

