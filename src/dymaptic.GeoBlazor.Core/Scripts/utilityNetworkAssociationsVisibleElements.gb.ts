// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetUtilityNetworkAssociationsVisibleElements } from './utilityNetworkAssociationsVisibleElements';

export async function buildJsUtilityNetworkAssociationsVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsUtilityNetworkAssociationsVisibleElements: any = {};
    if (hasValue(dotNetObject.connectivityAssociationsSettings)) {
        let { buildJsVisibleElementsConnectivityAssociationsSettings } = await import('./visibleElementsConnectivityAssociationsSettings');
        jsUtilityNetworkAssociationsVisibleElements.connectivityAssociationsSettings = await buildJsVisibleElementsConnectivityAssociationsSettings(dotNetObject.connectivityAssociationsSettings, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.structuralAttachmentAssociationsSettings)) {
        let { buildJsVisibleElementsStructuralAttachmentAssociationsSettings } = await import('./visibleElementsStructuralAttachmentAssociationsSettings');
        jsUtilityNetworkAssociationsVisibleElements.structuralAttachmentAssociationsSettings = await buildJsVisibleElementsStructuralAttachmentAssociationsSettings(dotNetObject.structuralAttachmentAssociationsSettings, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.maxAllowableAssociationsSlider)) {
        jsUtilityNetworkAssociationsVisibleElements.maxAllowableAssociationsSlider = dotNetObject.maxAllowableAssociationsSlider;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsUtilityNetworkAssociationsVisibleElements);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsUtilityNetworkAssociationsVisibleElements;
    
    let { buildDotNetUtilityNetworkAssociationsVisibleElements } = await import('./utilityNetworkAssociationsVisibleElements');
    let dnInstantiatedObject = await buildDotNetUtilityNetworkAssociationsVisibleElements(jsUtilityNetworkAssociationsVisibleElements, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type UtilityNetworkAssociationsVisibleElements detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for UtilityNetworkAssociationsVisibleElements', e);
    }
    
    return jsUtilityNetworkAssociationsVisibleElements;
}


export async function buildDotNetUtilityNetworkAssociationsVisibleElementsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsUtilityNetworkAssociationsVisibleElements } = await import('./utilityNetworkAssociationsVisibleElements');
        jsComponentRef = await buildJsUtilityNetworkAssociationsVisibleElements(jsObject, layerId, viewId);
    }
    
    let dotNetUtilityNetworkAssociationsVisibleElements: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.connectivityAssociationsSettings)) {
        let { buildDotNetVisibleElementsConnectivityAssociationsSettings } = await import('./visibleElementsConnectivityAssociationsSettings');
        dotNetUtilityNetworkAssociationsVisibleElements.connectivityAssociationsSettings = await buildDotNetVisibleElementsConnectivityAssociationsSettings(jsObject.connectivityAssociationsSettings, layerId, viewId);
    }
    if (hasValue(jsObject.structuralAttachmentAssociationsSettings)) {
        let { buildDotNetVisibleElementsStructuralAttachmentAssociationsSettings } = await import('./visibleElementsStructuralAttachmentAssociationsSettings');
        dotNetUtilityNetworkAssociationsVisibleElements.structuralAttachmentAssociationsSettings = await buildDotNetVisibleElementsStructuralAttachmentAssociationsSettings(jsObject.structuralAttachmentAssociationsSettings, layerId, viewId);
    }
    if (hasValue(jsObject.maxAllowableAssociationsSlider)) {
        dotNetUtilityNetworkAssociationsVisibleElements.maxAllowableAssociationsSlider = jsObject.maxAllowableAssociationsSlider;
    }


    if (hasValue(geoBlazorId)) {
        dotNetUtilityNetworkAssociationsVisibleElements.id = geoBlazorId;
    }

    return dotNetUtilityNetworkAssociationsVisibleElements;
}

