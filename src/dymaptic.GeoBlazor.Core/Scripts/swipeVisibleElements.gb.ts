// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import SwipeVisibleElements = __esri.SwipeVisibleElements;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SwipeVisibleElementsGenerated implements IPropertyWrapper {
    public component: SwipeVisibleElements;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: SwipeVisibleElements) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsSwipeVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSwipeVisibleElements: any = {}

    if (hasValue(dotNetObject.divider)) {
        jsSwipeVisibleElements.divider = dotNetObject.divider;
    }
    if (hasValue(dotNetObject.handle)) {
        jsSwipeVisibleElements.handle = dotNetObject.handle;
    }
    let { default: SwipeVisibleElementsWrapper } = await import('./swipeVisibleElements');
    let swipeVisibleElementsWrapper = new SwipeVisibleElementsWrapper(jsSwipeVisibleElements);
    swipeVisibleElementsWrapper.geoBlazorId = dotNetObject.id;
    swipeVisibleElementsWrapper.viewId = viewId;
    swipeVisibleElementsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(swipeVisibleElementsWrapper);
    jsObjectRefs[dotNetObject.id] = swipeVisibleElementsWrapper;

    arcGisObjectRefs[dotNetObject.id] = jsSwipeVisibleElements;
    let { buildDotNetSwipeVisibleElements } = await import('./swipeVisibleElements');
    let dnInstantiatedObject = await buildDotNetSwipeVisibleElements(jsSwipeVisibleElements, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SwipeVisibleElements', e);
    }
    
    return jsSwipeVisibleElements;
}

export async function buildDotNetSwipeVisibleElementsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSwipeVisibleElements: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.divider)) {
            dotNetSwipeVisibleElements.divider = jsObject.divider;
        }
        if (hasValue(jsObject.handle)) {
            dotNetSwipeVisibleElements.handle = jsObject.handle;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSwipeVisibleElements.id = k;
                break;
            }
        }
    }

    return dotNetSwipeVisibleElements;
}

