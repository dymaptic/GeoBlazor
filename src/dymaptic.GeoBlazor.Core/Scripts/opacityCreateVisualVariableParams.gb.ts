// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetOpacityCreateVisualVariableParams } from './opacityCreateVisualVariableParams';

export async function buildJsOpacityCreateVisualVariableParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsopacityCreateVisualVariableParams: any = {}
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsopacityCreateVisualVariableParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.field)) {
        jsopacityCreateVisualVariableParams.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.forBinning)) {
        jsopacityCreateVisualVariableParams.forBinning = dotNetObject.forBinning;
    }
    if (hasValue(dotNetObject.legendOptions)) {
        jsopacityCreateVisualVariableParams.legendOptions = dotNetObject.legendOptions;
    }
    if (hasValue(dotNetObject.maxValue)) {
        jsopacityCreateVisualVariableParams.maxValue = dotNetObject.maxValue;
    }
    if (hasValue(dotNetObject.minValue)) {
        jsopacityCreateVisualVariableParams.minValue = dotNetObject.minValue;
    }
    if (hasValue(dotNetObject.normalizationField)) {
        jsopacityCreateVisualVariableParams.normalizationField = dotNetObject.normalizationField;
    }
    if (hasValue(dotNetObject.signal)) {
        jsopacityCreateVisualVariableParams.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.sqlExpression)) {
        jsopacityCreateVisualVariableParams.sqlExpression = dotNetObject.sqlExpression;
    }
    if (hasValue(dotNetObject.sqlWhere)) {
        jsopacityCreateVisualVariableParams.sqlWhere = dotNetObject.sqlWhere;
    }
    if (hasValue(dotNetObject.statistics)) {
        jsopacityCreateVisualVariableParams.statistics = dotNetObject.statistics;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        jsopacityCreateVisualVariableParams.valueExpression = dotNetObject.valueExpression;
    }
    if (hasValue(dotNetObject.valueExpressionTitle)) {
        jsopacityCreateVisualVariableParams.valueExpressionTitle = dotNetObject.valueExpressionTitle;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsopacityCreateVisualVariableParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsopacityCreateVisualVariableParams;
    
    let dnInstantiatedObject = await buildDotNetOpacityCreateVisualVariableParams(jsopacityCreateVisualVariableParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for OpacityCreateVisualVariableParams', e);
    }
    
    return jsopacityCreateVisualVariableParams;
}

export async function buildDotNetOpacityCreateVisualVariableParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetOpacityCreateVisualVariableParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.field)) {
        dotNetOpacityCreateVisualVariableParams.field = jsObject.field;
    }
    if (hasValue(jsObject.forBinning)) {
        dotNetOpacityCreateVisualVariableParams.forBinning = jsObject.forBinning;
    }
    if (hasValue(jsObject.legendOptions)) {
        dotNetOpacityCreateVisualVariableParams.legendOptions = jsObject.legendOptions;
    }
    if (hasValue(jsObject.maxValue)) {
        dotNetOpacityCreateVisualVariableParams.maxValue = jsObject.maxValue;
    }
    if (hasValue(jsObject.minValue)) {
        dotNetOpacityCreateVisualVariableParams.minValue = jsObject.minValue;
    }
    if (hasValue(jsObject.normalizationField)) {
        dotNetOpacityCreateVisualVariableParams.normalizationField = jsObject.normalizationField;
    }
    if (hasValue(jsObject.signal)) {
        dotNetOpacityCreateVisualVariableParams.signal = jsObject.signal;
    }
    if (hasValue(jsObject.sqlExpression)) {
        dotNetOpacityCreateVisualVariableParams.sqlExpression = jsObject.sqlExpression;
    }
    if (hasValue(jsObject.sqlWhere)) {
        dotNetOpacityCreateVisualVariableParams.sqlWhere = jsObject.sqlWhere;
    }
    if (hasValue(jsObject.statistics)) {
        dotNetOpacityCreateVisualVariableParams.statistics = jsObject.statistics;
    }
    if (hasValue(jsObject.valueExpression)) {
        dotNetOpacityCreateVisualVariableParams.valueExpression = jsObject.valueExpression;
    }
    if (hasValue(jsObject.valueExpressionTitle)) {
        dotNetOpacityCreateVisualVariableParams.valueExpressionTitle = jsObject.valueExpressionTitle;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetOpacityCreateVisualVariableParams.id = k;
                break;
            }
        }
    }

    return dotNetOpacityCreateVisualVariableParams;
}

