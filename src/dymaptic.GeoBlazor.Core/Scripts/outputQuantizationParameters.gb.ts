// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import OutputQuantizationParameters from '@arcgis/core/rest/knowledgeGraph/OutputQuantizationParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetOutputQuantizationParameters } from './outputQuantizationParameters';

export async function buildJsOutputQuantizationParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.extent)) {
        let { buildJsOutputQuantizationParametersExtent } = await import('./outputQuantizationParametersExtent');
        properties.extent = await buildJsOutputQuantizationParametersExtent(dotNetObject.extent, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.quantizeMode)) {
        properties.quantizeMode = dotNetObject.quantizeMode;
    }
    if (hasValue(dotNetObject.tolerance)) {
        properties.tolerance = dotNetObject.tolerance;
    }
    let jsOutputQuantizationParameters = new OutputQuantizationParameters(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsOutputQuantizationParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsOutputQuantizationParameters;
    
    return jsOutputQuantizationParameters;
}


export async function buildDotNetOutputQuantizationParametersGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetOutputQuantizationParameters: any = {};
    
    if (hasValue(jsObject.extent)) {
        let { buildDotNetOutputQuantizationParametersExtent } = await import('./outputQuantizationParametersExtent');
        dotNetOutputQuantizationParameters.extent = await buildDotNetOutputQuantizationParametersExtent(jsObject.extent, layerId, viewId);
    }
    
    if (hasValue(jsObject.quantizeMode)) {
        dotNetOutputQuantizationParameters.quantizeMode = removeCircularReferences(jsObject.quantizeMode);
    }
    
    if (hasValue(jsObject.tolerance)) {
        dotNetOutputQuantizationParameters.tolerance = jsObject.tolerance;
    }
    

    return dotNetOutputQuantizationParameters;
}

