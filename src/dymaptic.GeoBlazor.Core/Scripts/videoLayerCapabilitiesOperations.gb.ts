// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetVideoLayerCapabilitiesOperations } from './videoLayerCapabilitiesOperations';

export async function buildJsVideoLayerCapabilitiesOperationsGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsVideoLayerCapabilitiesOperations: any = {};

    if (hasValue(dotNetObject.supportsAppend)) {
        jsVideoLayerCapabilitiesOperations.supportsAppend = dotNetObject.supportsAppend;
    }
    if (hasValue(dotNetObject.supportsExportClip)) {
        jsVideoLayerCapabilitiesOperations.supportsExportClip = dotNetObject.supportsExportClip;
    }
    if (hasValue(dotNetObject.supportsExportFrameset)) {
        jsVideoLayerCapabilitiesOperations.supportsExportFrameset = dotNetObject.supportsExportFrameset;
    }
    if (hasValue(dotNetObject.supportsMensuration)) {
        jsVideoLayerCapabilitiesOperations.supportsMensuration = dotNetObject.supportsMensuration;
    }
    if (hasValue(dotNetObject.supportsUpdate)) {
        jsVideoLayerCapabilitiesOperations.supportsUpdate = dotNetObject.supportsUpdate;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsVideoLayerCapabilitiesOperations);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsVideoLayerCapabilitiesOperations;
    
    return jsVideoLayerCapabilitiesOperations;
}


export async function buildDotNetVideoLayerCapabilitiesOperationsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVideoLayerCapabilitiesOperations: any = {};
    
    if (hasValue(jsObject.supportsAppend)) {
        dotNetVideoLayerCapabilitiesOperations.supportsAppend = jsObject.supportsAppend;
    }
    
    if (hasValue(jsObject.supportsExportClip)) {
        dotNetVideoLayerCapabilitiesOperations.supportsExportClip = jsObject.supportsExportClip;
    }
    
    if (hasValue(jsObject.supportsExportFrameset)) {
        dotNetVideoLayerCapabilitiesOperations.supportsExportFrameset = jsObject.supportsExportFrameset;
    }
    
    if (hasValue(jsObject.supportsMensuration)) {
        dotNetVideoLayerCapabilitiesOperations.supportsMensuration = jsObject.supportsMensuration;
    }
    
    if (hasValue(jsObject.supportsUpdate)) {
        dotNetVideoLayerCapabilitiesOperations.supportsUpdate = jsObject.supportsUpdate;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetVideoLayerCapabilitiesOperations.id = geoBlazorId;
    }

    return dotNetVideoLayerCapabilitiesOperations;
}

