import {buildDotNetLineOfSightAnalysis} from './lineOfSightAnalysis';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import LineOfSightAnalysis from '@arcgis/core/analysis/LineOfSightAnalysis';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsLineOfSightAnalysisGenerated(dotNetObject: any): Promise<any> {
    let jsLineOfSightAnalysis = new LineOfSightAnalysis();
    if (hasValue(dotNetObject.observer)) {
        let {buildJsLineOfSightAnalysisObserver} = await import('./lineOfSightAnalysisObserver');
        jsLineOfSightAnalysis.observer = await buildJsLineOfSightAnalysisObserver(dotNetObject.observer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.targets)) {
        let {buildJsLineOfSightAnalysisTarget} = await import('./lineOfSightAnalysisTarget');
        jsLineOfSightAnalysis.targets = await Promise.all(dotNetObject.targets.map(async i => await buildJsLineOfSightAnalysisTarget(i, layerId, viewId))) as any;
    }


    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsLineOfSightAnalysis);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLineOfSightAnalysis;

    let dnInstantiatedObject = await buildDotNetLineOfSightAnalysis(jsLineOfSightAnalysis);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LineOfSightAnalysis', e);
    }

    return jsLineOfSightAnalysis;
}

export async function buildDotNetLineOfSightAnalysisGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetLineOfSightAnalysis: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.observer)) {
        let {buildDotNetLineOfSightAnalysisObserver} = await import('./lineOfSightAnalysisObserver');
        dotNetLineOfSightAnalysis.observer = await buildDotNetLineOfSightAnalysisObserver(jsObject.observer);
    }
    if (hasValue(jsObject.targets)) {
        let {buildDotNetLineOfSightAnalysisTarget} = await import('./lineOfSightAnalysisTarget');
        dotNetLineOfSightAnalysis.targets = await Promise.all(jsObject.targets.map(async i => await buildDotNetLineOfSightAnalysisTarget(i)));
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLineOfSightAnalysis.id = k;
                break;
            }
        }
    }

    return dotNetLineOfSightAnalysis;
}

