// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ScaleRangeSliderViewModel from '@arcgis/core/widgets/ScaleRangeSlider/ScaleRangeSliderViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ScaleRangeSliderViewModelGenerated implements IPropertyWrapper {
    public component: ScaleRangeSliderViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ScaleRangeSliderViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async mapScaleToSlider(scale: any): Promise<any> {
        return this.component.mapScaleToSlider(scale);
    }

    async mapSliderToScale(value: any): Promise<any> {
        return this.component.mapSliderToScale(value);
    }

    // region properties
    
    async getLayer(): Promise<any> {
        if (!hasValue(this.component.layer)) {
            return null;
        }
        
        let { buildDotNetLayer } = await import('./layer');
        return await buildDotNetLayer(this.component.layer);
    }
    async setLayer(value: any): Promise<void> {
        let { buildJsLayer } = await import('./layer');
        this.component.layer = await  buildJsLayer(value, this.layerId, this.viewId);
    }
    async getScaleRanges(): Promise<any> {
        if (!hasValue(this.component.scaleRanges)) {
            return null;
        }
        
        let { buildDotNetScaleRanges } = await import('./scaleRanges');
        return await buildDotNetScaleRanges(this.component.scaleRanges);
    }
    async getSliderViewModel(): Promise<any> {
        if (!hasValue(this.component.sliderViewModel)) {
            return null;
        }
        
        let { buildDotNetSliderViewModel } = await import('./sliderViewModel');
        return await buildDotNetSliderViewModel(this.component.sliderViewModel);
    }
    async setSliderViewModel(value: any): Promise<void> {
        let { buildJsSliderViewModel } = await import('./sliderViewModel');
        this.component.sliderViewModel = await  buildJsSliderViewModel(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsScaleRangeSliderViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsScaleRangeSliderViewModel = new ScaleRangeSliderViewModel();
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsScaleRangeSliderViewModel.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.sliderViewModel)) {
        let { buildJsSliderViewModel } = await import('./sliderViewModel');
        jsScaleRangeSliderViewModel.sliderViewModel = await buildJsSliderViewModel(dotNetObject.sliderViewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.maxScale)) {
        jsScaleRangeSliderViewModel.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.maxScaleLimit)) {
        jsScaleRangeSliderViewModel.maxScaleLimit = dotNetObject.maxScaleLimit;
    }
    if (hasValue(dotNetObject.minScale)) {
        jsScaleRangeSliderViewModel.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.minScaleLimit)) {
        jsScaleRangeSliderViewModel.minScaleLimit = dotNetObject.minScaleLimit;
    }
    if (hasValue(dotNetObject.view)) {
        jsScaleRangeSliderViewModel.view = dotNetObject.view;
    }

    let { default: ScaleRangeSliderViewModelWrapper } = await import('./scaleRangeSliderViewModel');
    let scaleRangeSliderViewModelWrapper = new ScaleRangeSliderViewModelWrapper(jsScaleRangeSliderViewModel);
    scaleRangeSliderViewModelWrapper.geoBlazorId = dotNetObject.id;
    scaleRangeSliderViewModelWrapper.viewId = viewId;
    scaleRangeSliderViewModelWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(scaleRangeSliderViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = scaleRangeSliderViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsScaleRangeSliderViewModel;
    let { buildDotNetScaleRangeSliderViewModel } = await import('./scaleRangeSliderViewModel');
    let dnInstantiatedObject = await buildDotNetScaleRangeSliderViewModel(jsScaleRangeSliderViewModel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ScaleRangeSliderViewModel', e);
    }
    
    return jsScaleRangeSliderViewModel;
}

export async function buildDotNetScaleRangeSliderViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetScaleRangeSliderViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.scaleRanges)) {
            let { buildDotNetScaleRanges } = await import('./scaleRanges');
            dotNetScaleRangeSliderViewModel.scaleRanges = await buildDotNetScaleRanges(jsObject.scaleRanges);
        }
        if (hasValue(jsObject.sliderViewModel)) {
            let { buildDotNetSliderViewModel } = await import('./sliderViewModel');
            dotNetScaleRangeSliderViewModel.sliderViewModel = await buildDotNetSliderViewModel(jsObject.sliderViewModel);
        }
        if (hasValue(jsObject.maxScale)) {
            dotNetScaleRangeSliderViewModel.maxScale = jsObject.maxScale;
        }
        if (hasValue(jsObject.maxScaleLimit)) {
            dotNetScaleRangeSliderViewModel.maxScaleLimit = jsObject.maxScaleLimit;
        }
        if (hasValue(jsObject.minScale)) {
            dotNetScaleRangeSliderViewModel.minScale = jsObject.minScale;
        }
        if (hasValue(jsObject.minScaleLimit)) {
            dotNetScaleRangeSliderViewModel.minScaleLimit = jsObject.minScaleLimit;
        }
        if (hasValue(jsObject.state)) {
            dotNetScaleRangeSliderViewModel.state = jsObject.state;
        }
        if (hasValue(jsObject.view)) {
            dotNetScaleRangeSliderViewModel.view = jsObject.view;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetScaleRangeSliderViewModel.id = k;
                break;
            }
        }
    }

    return dotNetScaleRangeSliderViewModel;
}

