// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetInclusionModeDefinition } from './inclusionModeDefinition';

export async function buildJsInclusionModeDefinitionGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsInclusionModeDefinition: any = {};
    if (hasValue(dotNetObject.namedTypeDefinitions)) {
        let { buildJsLayerInclusionDefinition } = await import('./layerInclusionDefinition');
        jsInclusionModeDefinition.namedTypeDefinitions = await buildJsLayerInclusionDefinition(dotNetObject.namedTypeDefinitions) as any;
    }

    if (hasValue(dotNetObject.generateAllSublayers)) {
        jsInclusionModeDefinition.generateAllSublayers = dotNetObject.generateAllSublayers;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsInclusionModeDefinition);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsInclusionModeDefinition;
    
    return jsInclusionModeDefinition;
}


export async function buildDotNetInclusionModeDefinitionGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetInclusionModeDefinition: any = {};
    
    if (hasValue(jsObject.namedTypeDefinitions)) {
        let { buildDotNetLayerInclusionDefinition } = await import('./layerInclusionDefinition');
        dotNetInclusionModeDefinition.namedTypeDefinitions = await buildDotNetLayerInclusionDefinition(jsObject.namedTypeDefinitions);
    }
    
    if (hasValue(jsObject.generateAllSublayers)) {
        dotNetInclusionModeDefinition.generateAllSublayers = jsObject.generateAllSublayers;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetInclusionModeDefinition.id = geoBlazorId;
    }

    return dotNetInclusionModeDefinition;
}

