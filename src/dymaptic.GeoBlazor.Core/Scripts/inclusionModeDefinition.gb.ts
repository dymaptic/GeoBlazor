// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetInclusionModeDefinition } from './inclusionModeDefinition';

export async function buildJsInclusionModeDefinitionGenerated(dotNetObject: any): Promise<any> {
    let jsInclusionModeDefinition: any = {};
    if (hasValue(dotNetObject.namedTypeDefinitions)) {
        let { buildJsLayerInclusionDefinition } = await import('./layerInclusionDefinition');
        jsInclusionModeDefinition.namedTypeDefinitions = await buildJsLayerInclusionDefinition(dotNetObject.namedTypeDefinitions) as any;
    }

    if (hasValue(dotNetObject.generateAllSublayers)) {
        jsInclusionModeDefinition.generateAllSublayers = dotNetObject.generateAllSublayers;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsInclusionModeDefinition);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsInclusionModeDefinition;
    
    let { buildDotNetInclusionModeDefinition } = await import('./inclusionModeDefinition');
    let dnInstantiatedObject = await buildDotNetInclusionModeDefinition(jsInclusionModeDefinition);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type InclusionModeDefinition detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for InclusionModeDefinition', e);
    }
    
    return jsInclusionModeDefinition;
}


export async function buildDotNetInclusionModeDefinitionGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetInclusionModeDefinition: any = {};
    
    if (hasValue(jsObject.namedTypeDefinitions)) {
        let { buildDotNetLayerInclusionDefinition } = await import('./layerInclusionDefinition');
        dotNetInclusionModeDefinition.namedTypeDefinitions = await buildDotNetLayerInclusionDefinition(jsObject.namedTypeDefinitions);
    }
    
    if (hasValue(jsObject.generateAllSublayers)) {
        dotNetInclusionModeDefinition.generateAllSublayers = jsObject.generateAllSublayers;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetInclusionModeDefinition.id = geoBlazorId;
    }

    return dotNetInclusionModeDefinition;
}

