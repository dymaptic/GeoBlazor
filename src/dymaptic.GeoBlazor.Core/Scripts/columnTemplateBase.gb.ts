import {buildDotNetColumnTemplateBase} from './columnTemplateBase';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import ColumnTemplateBase from '@arcgis/core/widgets/FeatureTable/support/ColumnTemplateBase';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsColumnTemplateBaseGenerated(dotNetObject: any): Promise<any> {
    let jsColumnTemplateBase = new ColumnTemplateBase();
    if (hasValue(dotNetObject.formatFunction)) {
        jsColumnTemplateBase.formatFunction = dotNetObject.formatFunction;
    }
    if (hasValue(dotNetObject.menuConfig)) {
        let {buildJsColumnTableMenuConfig} = await import('./columnTableMenuConfig');
        jsColumnTemplateBase.menuConfig = await buildJsColumnTableMenuConfig(dotNetObject.menuConfig, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.autoWidth)) {
        jsColumnTemplateBase.autoWidth = dotNetObject.autoWidth;
    }
    if (hasValue(dotNetObject.direction)) {
        jsColumnTemplateBase.direction = dotNetObject.direction;
    }
    if (hasValue(dotNetObject.fieldName)) {
        jsColumnTemplateBase.fieldName = dotNetObject.fieldName;
    }
    if (hasValue(dotNetObject.flexGrow)) {
        jsColumnTemplateBase.flexGrow = dotNetObject.flexGrow;
    }
    if (hasValue(dotNetObject.icon)) {
        jsColumnTemplateBase.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.initialSortPriority)) {
        jsColumnTemplateBase.initialSortPriority = dotNetObject.initialSortPriority;
    }
    if (hasValue(dotNetObject.invalid)) {
        jsColumnTemplateBase.invalid = dotNetObject.invalid;
    }
    if (hasValue(dotNetObject.label)) {
        jsColumnTemplateBase.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.resizable)) {
        jsColumnTemplateBase.resizable = dotNetObject.resizable;
    }
    if (hasValue(dotNetObject.sortable)) {
        jsColumnTemplateBase.sortable = dotNetObject.sortable;
    }
    if (hasValue(dotNetObject.textAlign)) {
        jsColumnTemplateBase.textAlign = dotNetObject.textAlign;
    }
    if (hasValue(dotNetObject.textWrap)) {
        jsColumnTemplateBase.textWrap = dotNetObject.textWrap;
    }
    if (hasValue(dotNetObject.width)) {
        jsColumnTemplateBase.width = dotNetObject.width;
    }

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsColumnTemplateBase);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsColumnTemplateBase;

    let dnInstantiatedObject = await buildDotNetColumnTemplateBase(jsColumnTemplateBase);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ColumnTemplateBase', e);
    }

    return jsColumnTemplateBase;
}

export async function buildDotNetColumnTemplateBaseGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetColumnTemplateBase: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.menuConfig)) {
        let {buildDotNetColumnTableMenuConfig} = await import('./columnTableMenuConfig');
        dotNetColumnTemplateBase.menuConfig = await buildDotNetColumnTableMenuConfig(jsObject.menuConfig);
    }
    if (hasValue(jsObject.autoWidth)) {
        dotNetColumnTemplateBase.autoWidth = jsObject.autoWidth;
    }
    if (hasValue(jsObject.direction)) {
        dotNetColumnTemplateBase.direction = jsObject.direction;
    }
    if (hasValue(jsObject.fieldName)) {
        dotNetColumnTemplateBase.fieldName = jsObject.fieldName;
    }
    if (hasValue(jsObject.flexGrow)) {
        dotNetColumnTemplateBase.flexGrow = jsObject.flexGrow;
    }
    if (hasValue(jsObject.formatFunction)) {
        dotNetColumnTemplateBase.formatFunction = jsObject.formatFunction;
    }
    if (hasValue(jsObject.frozen)) {
        dotNetColumnTemplateBase.frozen = jsObject.frozen;
    }
    if (hasValue(jsObject.frozenToEnd)) {
        dotNetColumnTemplateBase.frozenToEnd = jsObject.frozenToEnd;
    }
    if (hasValue(jsObject.icon)) {
        dotNetColumnTemplateBase.icon = jsObject.icon;
    }
    if (hasValue(jsObject.initialSortPriority)) {
        dotNetColumnTemplateBase.initialSortPriority = jsObject.initialSortPriority;
    }
    if (hasValue(jsObject.invalid)) {
        dotNetColumnTemplateBase.invalid = jsObject.invalid;
    }
    if (hasValue(jsObject.label)) {
        dotNetColumnTemplateBase.label = jsObject.label;
    }
    if (hasValue(jsObject.resizable)) {
        dotNetColumnTemplateBase.resizable = jsObject.resizable;
    }
    if (hasValue(jsObject.sortable)) {
        dotNetColumnTemplateBase.sortable = jsObject.sortable;
    }
    if (hasValue(jsObject.textAlign)) {
        dotNetColumnTemplateBase.textAlign = jsObject.textAlign;
    }
    if (hasValue(jsObject.textWrap)) {
        dotNetColumnTemplateBase.textWrap = jsObject.textWrap;
    }
    if (hasValue(jsObject.type)) {
        dotNetColumnTemplateBase.type = jsObject.type;
    }
    if (hasValue(jsObject.width)) {
        dotNetColumnTemplateBase.width = jsObject.width;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetColumnTemplateBase.id = k;
                break;
            }
        }
    }

    return dotNetColumnTemplateBase;
}

