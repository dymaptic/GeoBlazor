// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetStreamLayerElevationInfoFeatureExpressionInfo } from './streamLayerElevationInfoFeatureExpressionInfo';

export async function buildJsStreamLayerElevationInfoFeatureExpressionInfoGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsStreamLayerElevationInfoFeatureExpressionInfo: any = {};

    if (hasValue(dotNetObject.expression)) {
        jsStreamLayerElevationInfoFeatureExpressionInfo.expression = dotNetObject.expression;
    }
    if (hasValue(dotNetObject.title)) {
        jsStreamLayerElevationInfoFeatureExpressionInfo.title = dotNetObject.title;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsStreamLayerElevationInfoFeatureExpressionInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsStreamLayerElevationInfoFeatureExpressionInfo;
    
    return jsStreamLayerElevationInfoFeatureExpressionInfo;
}


export async function buildDotNetStreamLayerElevationInfoFeatureExpressionInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetStreamLayerElevationInfoFeatureExpressionInfo: any = {};
    
    if (hasValue(jsObject.expression)) {
        dotNetStreamLayerElevationInfoFeatureExpressionInfo.expression = jsObject.expression;
    }
    
    if (hasValue(jsObject.title)) {
        dotNetStreamLayerElevationInfoFeatureExpressionInfo.title = jsObject.title;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetStreamLayerElevationInfoFeatureExpressionInfo.id = geoBlazorId;
    }

    return dotNetStreamLayerElevationInfoFeatureExpressionInfo;
}

