// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import TimePickerInput from '@arcgis/core/form/elements/inputs/TimePickerInput';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetTimePickerInput } from './timePickerInput';

export async function buildJsTimePickerInputGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.max)) {
        properties.max = dotNetObject.max;
    }
    if (hasValue(dotNetObject.min)) {
        properties.min = dotNetObject.min;
    }
    if (hasValue(dotNetObject.timeResolution)) {
        properties.timeResolution = dotNetObject.timeResolution;
    }
    let jsTimePickerInput = new TimePickerInput(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsTimePickerInput);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTimePickerInput;
    
    return jsTimePickerInput;
}


export async function buildDotNetTimePickerInputGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTimePickerInput: any = {};
    
    if (hasValue(jsObject.max)) {
        dotNetTimePickerInput.max = jsObject.max;
    }
    
    if (hasValue(jsObject.min)) {
        dotNetTimePickerInput.min = jsObject.min;
    }
    
    if (hasValue(jsObject.timeResolution)) {
        dotNetTimePickerInput.timeResolution = removeCircularReferences(jsObject.timeResolution);
    }
    
    if (hasValue(jsObject.type)) {
        dotNetTimePickerInput.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetTimePickerInput.id = geoBlazorId;
    }

    return dotNetTimePickerInput;
}

