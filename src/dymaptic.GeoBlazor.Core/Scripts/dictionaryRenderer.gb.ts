// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import DictionaryRenderer from '@arcgis/core/renderers/DictionaryRenderer';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class DictionaryRendererGenerated implements IPropertyWrapper {
    public component: DictionaryRenderer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: DictionaryRenderer) {
        this.component = component;
    }

    // region methods

    unwrap() {
        return this.component;
    }

    async getSymbolAsync(graphic: any): Promise<any> {
        let {buildJsGraphic} = await import('./graphic');
        let jsGraphic = buildJsGraphic(graphic) as any;
        return await this.component.getSymbolAsync(jsGraphic);
    }

    // region properties

    async getAuthoringInfo(): Promise<any> {
        if (!hasValue(this.component.authoringInfo)) {
            return null;
        }

        let {buildDotNetAuthoringInfo} = await import('./authoringInfo');
        return await buildDotNetAuthoringInfo(this.component.authoringInfo);
    }

    async setAuthoringInfo(value: any): Promise<void> {
        let {buildJsAuthoringInfo} = await import('./authoringInfo');
        this.component.authoringInfo = await buildJsAuthoringInfo(value, this.layerId, this.viewId);
    }

    getProperty(prop: string): any {
        return this.component[prop];
    }

    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsDictionaryRendererGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsDictionaryRenderer = new DictionaryRenderer();
    if (hasValue(dotNetObject.authoringInfo)) {
        let {buildJsAuthoringInfo} = await import('./authoringInfo');
        jsDictionaryRenderer.authoringInfo = await buildJsAuthoringInfo(dotNetObject.authoringInfo, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.config)) {
        jsDictionaryRenderer.config = dotNetObject.config;
    }
    if (hasValue(dotNetObject.fieldMap)) {
        jsDictionaryRenderer.fieldMap = dotNetObject.fieldMap;
    }
    if (hasValue(dotNetObject.scaleExpression)) {
        jsDictionaryRenderer.scaleExpression = dotNetObject.scaleExpression;
    }
    if (hasValue(dotNetObject.scaleExpressionTitle)) {
        jsDictionaryRenderer.scaleExpressionTitle = dotNetObject.scaleExpressionTitle;
    }
    if (hasValue(dotNetObject.url)) {
        jsDictionaryRenderer.url = dotNetObject.url;
    }

    let {default: DictionaryRendererWrapper} = await import('./dictionaryRenderer');
    let dictionaryRendererWrapper = new DictionaryRendererWrapper(jsDictionaryRenderer);
    dictionaryRendererWrapper.geoBlazorId = dotNetObject.id;
    dictionaryRendererWrapper.viewId = viewId;
    dictionaryRendererWrapper.layerId = layerId;

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(dictionaryRendererWrapper);
    jsObjectRefs[dotNetObject.id] = dictionaryRendererWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsDictionaryRenderer;
    let {buildDotNetDictionaryRenderer} = await import('./dictionaryRenderer');
    let dnInstantiatedObject = await buildDotNetDictionaryRenderer(jsDictionaryRenderer);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DictionaryRenderer', e);
    }

    return jsDictionaryRenderer;
}

export async function buildDotNetDictionaryRendererGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetDictionaryRenderer: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.authoringInfo)) {
        let {buildDotNetAuthoringInfo} = await import('./authoringInfo');
        dotNetDictionaryRenderer.authoringInfo = await buildDotNetAuthoringInfo(jsObject.authoringInfo);
    }
    if (hasValue(jsObject.config)) {
        dotNetDictionaryRenderer.config = jsObject.config;
    }
    if (hasValue(jsObject.fieldMap)) {
        dotNetDictionaryRenderer.fieldMap = jsObject.fieldMap;
    }
    if (hasValue(jsObject.scaleExpression)) {
        dotNetDictionaryRenderer.scaleExpression = jsObject.scaleExpression;
    }
    if (hasValue(jsObject.scaleExpressionTitle)) {
        dotNetDictionaryRenderer.scaleExpressionTitle = jsObject.scaleExpressionTitle;
    }
    if (hasValue(jsObject.type)) {
        dotNetDictionaryRenderer.type = jsObject.type;
    }
    if (hasValue(jsObject.url)) {
        dotNetDictionaryRenderer.url = jsObject.url;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetDictionaryRenderer.id = k;
                break;
            }
        }
    }

    return dotNetDictionaryRenderer;
}

