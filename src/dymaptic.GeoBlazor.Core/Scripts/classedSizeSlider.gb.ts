// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ClassedSizeSlider from '@arcgis/core/widgets/smartMapping/ClassedSizeSlider';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ClassedSizeSliderGenerated implements IPropertyWrapper {
    public component: ClassedSizeSlider;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ClassedSizeSlider) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async classes(): Promise<any> {
        return this.component.classes();
    }

    async isFulfilled(): Promise<any> {
        return this.component.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.component.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.component.isResolved();
    }

    async own(handleOrHandles: any): Promise<void> {
        let { buildJsWatchHandle } = await import('./watchHandle');
        let jsHandleOrHandles = await buildJsWatchHandle(handleOrHandles, this.layerId, this.viewId) as any;
        this.component.own(jsHandleOrHandles);
    }

    async postInitialize(): Promise<void> {
        this.component.postInitialize();
    }

    async render(): Promise<any> {
        return this.component.render();
    }

    async renderNow(): Promise<void> {
        this.component.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.component.scheduleRender();
    }

    async updateClassBreakInfos(breakInfos: any): Promise<any> {
        let { buildJsClassBreakInfo } = await import('./classBreakInfo');
        let jsBreakInfos = await buildJsClassBreakInfo(breakInfos, this.layerId, this.viewId) as any;
        return this.component.updateClassBreakInfos(jsBreakInfos);
    }

    async when(callback: any,
        errback: any): Promise<any> {
        return await this.component.when(callback,
            errback);
    }

    // region properties
    
    async getStyle(): Promise<any> {
        if (!hasValue(this.component.style)) {
            return null;
        }
        
        let { buildDotNetClassedSizeSliderStyle } = await import('./classedSizeSliderStyle');
        return await buildDotNetClassedSizeSliderStyle(this.component.style);
    }
    async setStyle(value: any): Promise<void> {
        let { buildJsClassedSizeSliderStyle } = await import('./classedSizeSliderStyle');
        this.component.style = await  buildJsClassedSizeSliderStyle(value, this.layerId, this.viewId);
    }
    async getViewModel(): Promise<any> {
        if (!hasValue(this.component.viewModel)) {
            return null;
        }
        
        let { buildDotNetClassedSizeSliderViewModel } = await import('./classedSizeSliderViewModel');
        return await buildDotNetClassedSizeSliderViewModel(this.component.viewModel);
    }
    async setViewModel(value: any): Promise<void> {
        let { buildJsClassedSizeSliderViewModel } = await import('./classedSizeSliderViewModel');
        this.component.viewModel = await  buildJsClassedSizeSliderViewModel(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsClassedSizeSliderGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsClassedSizeSlider = new ClassedSizeSlider();
    if (hasValue(dotNetObject.hasInputFormatFunction) && dotNetObject.hasInputFormatFunction) {
        jsClassedSizeSlider.inputFormatFunction = (value,
        type,
        index) => {
            let func = new Function('value',
            'type',
            'index', dotNetObject.inputFormatFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }
    if (hasValue(dotNetObject.hasInputParseFunction) && dotNetObject.hasInputParseFunction) {
        jsClassedSizeSlider.inputParseFunction = (value,
        type,
        index) => {
            let func = new Function('value',
            'type',
            'index', dotNetObject.inputParseFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }
    if (hasValue(dotNetObject.hasLabelFormatFunction) && dotNetObject.hasLabelFormatFunction) {
        jsClassedSizeSlider.labelFormatFunction = (value,
        type,
        index) => {
            let func = new Function('value',
            'type',
            'index', dotNetObject.labelFormatFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }
    if (hasValue(dotNetObject.style)) {
        let { buildJsClassedSizeSliderStyle } = await import('./classedSizeSliderStyle');
        jsClassedSizeSlider.style = await buildJsClassedSizeSliderStyle(dotNetObject.style, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsClassedSizeSliderViewModel } = await import('./classedSizeSliderViewModel');
        jsClassedSizeSlider.viewModel = await buildJsClassedSizeSliderViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.breaks)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedBreaks } = dotNetObject.breaks;
        jsClassedSizeSlider.breaks = sanitizedBreaks;
    }
    if (hasValue(dotNetObject.container)) {
        jsClassedSizeSlider.container = dotNetObject.container;
    }
    if (hasValue(dotNetObject.histogramConfig)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedHistogramConfig } = dotNetObject.histogramConfig;
        jsClassedSizeSlider.histogramConfig = sanitizedHistogramConfig;
    }
    if (hasValue(dotNetObject.icon)) {
        jsClassedSizeSlider.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.label)) {
        jsClassedSizeSlider.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.max)) {
        jsClassedSizeSlider.max = dotNetObject.max;
    }
    if (hasValue(dotNetObject.min)) {
        jsClassedSizeSlider.min = dotNetObject.min;
    }
    if (hasValue(dotNetObject.precision)) {
        jsClassedSizeSlider.precision = dotNetObject.precision;
    }
    if (hasValue(dotNetObject.syncedSegmentsEnabled)) {
        jsClassedSizeSlider.syncedSegmentsEnabled = dotNetObject.syncedSegmentsEnabled;
    }
    if (hasValue(dotNetObject.visibleElements)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedVisibleElements } = dotNetObject.visibleElements;
        jsClassedSizeSlider.visibleElements = sanitizedVisibleElements;
    }
    if (hasValue(dotNetObject.widgetId)) {
        jsClassedSizeSlider.id = dotNetObject.widgetId;
    }
    if (hasValue(dotNetObject.zoomOptions)) {
        jsClassedSizeSlider.zoomOptions = dotNetObject.zoomOptions;
    }
    jsClassedSizeSlider.on('max-change', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsaxChange', evt);
    });
    
    jsClassedSizeSlider.on('segment-drag', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsegmentDrag', evt);
    });
    
    jsClassedSizeSlider.on('thumb-change', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJshumbChange', evt);
    });
    
    jsClassedSizeSlider.on('thumb-drag', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJshumbDrag', evt);
    });
    
    jsClassedSizeSlider.on('min-change', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsinChange', evt);
    });
    

    let { default: ClassedSizeSliderWrapper } = await import('./classedSizeSlider');
    let classedSizeSliderWrapper = new ClassedSizeSliderWrapper(jsClassedSizeSlider);
    classedSizeSliderWrapper.geoBlazorId = dotNetObject.id;
    classedSizeSliderWrapper.viewId = viewId;
    classedSizeSliderWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(classedSizeSliderWrapper);
    jsObjectRefs[dotNetObject.id] = classedSizeSliderWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsClassedSizeSlider;
    let { buildDotNetClassedSizeSlider } = await import('./classedSizeSlider');
    let dnInstantiatedObject = await buildDotNetClassedSizeSlider(jsClassedSizeSlider);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ClassedSizeSlider', e);
    }
    
    return jsClassedSizeSlider;
}

export async function buildDotNetClassedSizeSliderGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetClassedSizeSlider: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.style)) {
            let { buildDotNetClassedSizeSliderStyle } = await import('./classedSizeSliderStyle');
            dotNetClassedSizeSlider.style = await buildDotNetClassedSizeSliderStyle(jsObject.style);
        }
        if (hasValue(jsObject.viewModel)) {
            let { buildDotNetClassedSizeSliderViewModel } = await import('./classedSizeSliderViewModel');
            dotNetClassedSizeSlider.viewModel = await buildDotNetClassedSizeSliderViewModel(jsObject.viewModel);
        }
    if (hasValue(jsObject.breaks)) {
        dotNetClassedSizeSlider.breaks = jsObject.breaks;
    }
    if (hasValue(jsObject.container)) {
        dotNetClassedSizeSlider.container = jsObject.container;
    }
    if (hasValue(jsObject.histogramConfig)) {
        dotNetClassedSizeSlider.histogramConfig = jsObject.histogramConfig;
    }
    if (hasValue(jsObject.icon)) {
        dotNetClassedSizeSlider.icon = jsObject.icon;
    }
    if (hasValue(jsObject.inputFormatFunction)) {
        dotNetClassedSizeSlider.inputFormatFunction = jsObject.inputFormatFunction;
    }
    if (hasValue(jsObject.inputParseFunction)) {
        dotNetClassedSizeSlider.inputParseFunction = jsObject.inputParseFunction;
    }
    if (hasValue(jsObject.label)) {
        dotNetClassedSizeSlider.label = jsObject.label;
    }
    if (hasValue(jsObject.labelFormatFunction)) {
        dotNetClassedSizeSlider.labelFormatFunction = jsObject.labelFormatFunction;
    }
    if (hasValue(jsObject.max)) {
        dotNetClassedSizeSlider.max = jsObject.max;
    }
    if (hasValue(jsObject.min)) {
        dotNetClassedSizeSlider.min = jsObject.min;
    }
    if (hasValue(jsObject.precision)) {
        dotNetClassedSizeSlider.precision = jsObject.precision;
    }
    if (hasValue(jsObject.state)) {
        dotNetClassedSizeSlider.state = jsObject.state;
    }
    if (hasValue(jsObject.syncedSegmentsEnabled)) {
        dotNetClassedSizeSlider.syncedSegmentsEnabled = jsObject.syncedSegmentsEnabled;
    }
    if (hasValue(jsObject.type)) {
        dotNetClassedSizeSlider.type = jsObject.type;
    }
    if (hasValue(jsObject.visibleElements)) {
        dotNetClassedSizeSlider.visibleElements = jsObject.visibleElements;
    }
    if (hasValue(jsObject.id)) {
        dotNetClassedSizeSlider.widgetId = jsObject.id;
    }
    if (hasValue(jsObject.zoomOptions)) {
        dotNetClassedSizeSlider.zoomOptions = jsObject.zoomOptions;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetClassedSizeSlider.id = k;
                break;
            }
        }
    }

    return dotNetClassedSizeSlider;
}

