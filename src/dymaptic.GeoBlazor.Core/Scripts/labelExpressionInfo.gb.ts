// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetLabelExpressionInfo } from './labelExpressionInfo';

export async function buildJsLabelExpressionInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsLabelClassLabelExpressionInfo: any = {};

    if (hasValue(dotNetObject.expression)) {
        jsLabelClassLabelExpressionInfo.expression = dotNetObject.expression;
    }
    if (hasValue(dotNetObject.title)) {
        jsLabelClassLabelExpressionInfo.title = dotNetObject.title;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsLabelClassLabelExpressionInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLabelClassLabelExpressionInfo;
    
    return jsLabelClassLabelExpressionInfo;
}


export async function buildDotNetLabelExpressionInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLabelExpressionInfo: any = {};
    
    if (hasValue(jsObject.expression)) {
        dotNetLabelExpressionInfo.expression = jsObject.expression;
    }
    
    if (hasValue(jsObject.title)) {
        dotNetLabelExpressionInfo.title = jsObject.title;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetLabelExpressionInfo.id = geoBlazorId;
    }

    return dotNetLabelExpressionInfo;
}

