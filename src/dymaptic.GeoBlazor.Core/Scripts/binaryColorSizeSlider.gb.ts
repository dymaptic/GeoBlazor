// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import BinaryColorSizeSlider from '@arcgis/core/widgets/smartMapping/BinaryColorSizeSlider';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class BinaryColorSizeSliderGenerated implements IPropertyWrapper {
    public component: BinaryColorSizeSlider;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: BinaryColorSizeSlider) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async classes(): Promise<any> {
        return this.component.classes();
    }

    async isFulfilled(): Promise<any> {
        return this.component.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.component.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.component.isResolved();
    }

    async own(handleOrHandles: any): Promise<void> {
        let { buildJsWatchHandle } = await import('./watchHandle');
        let jsHandleOrHandles = await buildJsWatchHandle(handleOrHandles, this.layerId, this.viewId) as any;
        this.component.own(jsHandleOrHandles);
    }

    async postInitialize(): Promise<void> {
        this.component.postInitialize();
    }

    async render(): Promise<any> {
        return this.component.render();
    }

    async renderNow(): Promise<void> {
        this.component.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.component.scheduleRender();
    }

    async updateFromRendererResult(rendererResult: any,
        histogramResult: any): Promise<void> {
        let { buildJsUnivariateColorSizeContinuousRendererResult } = await import('./univariateColorSizeContinuousRendererResult');
        let jsRendererResult = await buildJsUnivariateColorSizeContinuousRendererResult(rendererResult, this.layerId, this.viewId) as any;
        this.component.updateFromRendererResult(jsRendererResult,
            histogramResult);
    }

    async updateRenderer(renderer: any): Promise<any> {
        let { buildJsClassBreaksRenderer } = await import('./classBreaksRenderer');
        let jsRenderer = await buildJsClassBreaksRenderer(renderer, this.layerId, this.viewId) as any;
        let result = this.component.updateRenderer(jsRenderer);
        let { buildDotNetClassBreaksRenderer } = await import('./classBreaksRenderer');
        return await buildDotNetClassBreaksRenderer(result);
    }

    async when(callback: any,
        errback: any): Promise<any> {
        return await this.component.when(callback,
            errback);
    }

    // region properties
    
    async getStyle(): Promise<any> {
        if (!hasValue(this.component.style)) {
            return null;
        }
        
        let { buildDotNetBinaryColorSizeSliderStyle } = await import('./binaryColorSizeSliderStyle');
        return await buildDotNetBinaryColorSizeSliderStyle(this.component.style);
    }
    async setStyle(value: any): Promise<void> {
        let { buildJsBinaryColorSizeSliderStyle } = await import('./binaryColorSizeSliderStyle');
        this.component.style = await  buildJsBinaryColorSizeSliderStyle(value, this.layerId, this.viewId);
    }
    async getViewModel(): Promise<any> {
        if (!hasValue(this.component.viewModel)) {
            return null;
        }
        
        let { buildDotNetBinaryColorSizeSliderViewModel } = await import('./binaryColorSizeSliderViewModel');
        return await buildDotNetBinaryColorSizeSliderViewModel(this.component.viewModel);
    }
    async setViewModel(value: any): Promise<void> {
        let { buildJsBinaryColorSizeSliderViewModel } = await import('./binaryColorSizeSliderViewModel');
        this.component.viewModel = await  buildJsBinaryColorSizeSliderViewModel(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsBinaryColorSizeSliderGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsBinaryColorSizeSlider = new BinaryColorSizeSlider();
    if (hasValue(dotNetObject.hasInputFormatFunction) && dotNetObject.hasInputFormatFunction) {
        jsBinaryColorSizeSlider.inputFormatFunction = (value,
        type,
        index) => {
            let func = new Function('value',
            'type',
            'index', dotNetObject.inputFormatFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }
    if (hasValue(dotNetObject.hasInputParseFunction) && dotNetObject.hasInputParseFunction) {
        jsBinaryColorSizeSlider.inputParseFunction = (value,
        type,
        index) => {
            let func = new Function('value',
            'type',
            'index', dotNetObject.inputParseFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }
    if (hasValue(dotNetObject.hasLabelFormatFunction) && dotNetObject.hasLabelFormatFunction) {
        jsBinaryColorSizeSlider.labelFormatFunction = (value,
        type,
        index) => {
            let func = new Function('value',
            'type',
            'index', dotNetObject.labelFormatFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }
    if (hasValue(dotNetObject.style)) {
        let { buildJsBinaryColorSizeSliderStyle } = await import('./binaryColorSizeSliderStyle');
        jsBinaryColorSizeSlider.style = await buildJsBinaryColorSizeSliderStyle(dotNetObject.style, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsBinaryColorSizeSliderViewModel } = await import('./binaryColorSizeSliderViewModel');
        jsBinaryColorSizeSlider.viewModel = await buildJsBinaryColorSizeSliderViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.container)) {
        jsBinaryColorSizeSlider.container = dotNetObject.container;
    }
    if (hasValue(dotNetObject.handlesSyncedToPrimary)) {
        jsBinaryColorSizeSlider.handlesSyncedToPrimary = dotNetObject.handlesSyncedToPrimary;
    }
    if (hasValue(dotNetObject.histogramConfig)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedHistogramConfig } = dotNetObject.histogramConfig;
        jsBinaryColorSizeSlider.histogramConfig = sanitizedHistogramConfig;
    }
    if (hasValue(dotNetObject.icon)) {
        jsBinaryColorSizeSlider.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.label)) {
        jsBinaryColorSizeSlider.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.max)) {
        jsBinaryColorSizeSlider.max = dotNetObject.max;
    }
    if (hasValue(dotNetObject.min)) {
        jsBinaryColorSizeSlider.min = dotNetObject.min;
    }
    if (hasValue(dotNetObject.persistSizeRangeEnabled)) {
        jsBinaryColorSizeSlider.persistSizeRangeEnabled = dotNetObject.persistSizeRangeEnabled;
    }
    if (hasValue(dotNetObject.precision)) {
        jsBinaryColorSizeSlider.precision = dotNetObject.precision;
    }
    if (hasValue(dotNetObject.stops)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedStops } = dotNetObject.stops;
        jsBinaryColorSizeSlider.stops = sanitizedStops;
    }
    if (hasValue(dotNetObject.syncedSegmentsEnabled)) {
        jsBinaryColorSizeSlider.syncedSegmentsEnabled = dotNetObject.syncedSegmentsEnabled;
    }
    if (hasValue(dotNetObject.visibleElements)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedVisibleElements } = dotNetObject.visibleElements;
        jsBinaryColorSizeSlider.visibleElements = sanitizedVisibleElements;
    }
    if (hasValue(dotNetObject.widgetId)) {
        jsBinaryColorSizeSlider.id = dotNetObject.widgetId;
    }
    if (hasValue(dotNetObject.zoomOptions)) {
        jsBinaryColorSizeSlider.zoomOptions = dotNetObject.zoomOptions;
    }
    jsBinaryColorSizeSlider.on('max-change', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsaxChange', evt);
    });
    
    jsBinaryColorSizeSlider.on('segment-drag', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsegmentDrag', evt);
    });
    
    jsBinaryColorSizeSlider.on('thumb-change', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJshumbChange', evt);
    });
    
    jsBinaryColorSizeSlider.on('thumb-drag', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJshumbDrag', evt);
    });
    
    jsBinaryColorSizeSlider.on('min-change', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsinChange', evt);
    });
    

    let { default: BinaryColorSizeSliderWrapper } = await import('./binaryColorSizeSlider');
    let binaryColorSizeSliderWrapper = new BinaryColorSizeSliderWrapper(jsBinaryColorSizeSlider);
    binaryColorSizeSliderWrapper.geoBlazorId = dotNetObject.id;
    binaryColorSizeSliderWrapper.viewId = viewId;
    binaryColorSizeSliderWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(binaryColorSizeSliderWrapper);
    jsObjectRefs[dotNetObject.id] = binaryColorSizeSliderWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsBinaryColorSizeSlider;
    let { buildDotNetBinaryColorSizeSlider } = await import('./binaryColorSizeSlider');
    let dnInstantiatedObject = await buildDotNetBinaryColorSizeSlider(jsBinaryColorSizeSlider);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BinaryColorSizeSlider', e);
    }
    
    return jsBinaryColorSizeSlider;
}

export async function buildDotNetBinaryColorSizeSliderGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBinaryColorSizeSlider: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.style)) {
            let { buildDotNetBinaryColorSizeSliderStyle } = await import('./binaryColorSizeSliderStyle');
            dotNetBinaryColorSizeSlider.style = await buildDotNetBinaryColorSizeSliderStyle(jsObject.style);
        }
        if (hasValue(jsObject.viewModel)) {
            let { buildDotNetBinaryColorSizeSliderViewModel } = await import('./binaryColorSizeSliderViewModel');
            dotNetBinaryColorSizeSlider.viewModel = await buildDotNetBinaryColorSizeSliderViewModel(jsObject.viewModel);
        }
    if (hasValue(jsObject.container)) {
        dotNetBinaryColorSizeSlider.container = jsObject.container;
    }
    if (hasValue(jsObject.handlesSyncedToPrimary)) {
        dotNetBinaryColorSizeSlider.handlesSyncedToPrimary = jsObject.handlesSyncedToPrimary;
    }
    if (hasValue(jsObject.histogramConfig)) {
        dotNetBinaryColorSizeSlider.histogramConfig = jsObject.histogramConfig;
    }
    if (hasValue(jsObject.icon)) {
        dotNetBinaryColorSizeSlider.icon = jsObject.icon;
    }
    if (hasValue(jsObject.inputFormatFunction)) {
        dotNetBinaryColorSizeSlider.inputFormatFunction = jsObject.inputFormatFunction;
    }
    if (hasValue(jsObject.inputParseFunction)) {
        dotNetBinaryColorSizeSlider.inputParseFunction = jsObject.inputParseFunction;
    }
    if (hasValue(jsObject.label)) {
        dotNetBinaryColorSizeSlider.label = jsObject.label;
    }
    if (hasValue(jsObject.labelFormatFunction)) {
        dotNetBinaryColorSizeSlider.labelFormatFunction = jsObject.labelFormatFunction;
    }
    if (hasValue(jsObject.max)) {
        dotNetBinaryColorSizeSlider.max = jsObject.max;
    }
    if (hasValue(jsObject.min)) {
        dotNetBinaryColorSizeSlider.min = jsObject.min;
    }
    if (hasValue(jsObject.persistSizeRangeEnabled)) {
        dotNetBinaryColorSizeSlider.persistSizeRangeEnabled = jsObject.persistSizeRangeEnabled;
    }
    if (hasValue(jsObject.precision)) {
        dotNetBinaryColorSizeSlider.precision = jsObject.precision;
    }
    if (hasValue(jsObject.state)) {
        dotNetBinaryColorSizeSlider.state = jsObject.state;
    }
    if (hasValue(jsObject.stops)) {
        dotNetBinaryColorSizeSlider.stops = jsObject.stops;
    }
    if (hasValue(jsObject.syncedSegmentsEnabled)) {
        dotNetBinaryColorSizeSlider.syncedSegmentsEnabled = jsObject.syncedSegmentsEnabled;
    }
    if (hasValue(jsObject.type)) {
        dotNetBinaryColorSizeSlider.type = jsObject.type;
    }
    if (hasValue(jsObject.visibleElements)) {
        dotNetBinaryColorSizeSlider.visibleElements = jsObject.visibleElements;
    }
    if (hasValue(jsObject.id)) {
        dotNetBinaryColorSizeSlider.widgetId = jsObject.id;
    }
    if (hasValue(jsObject.zoomOptions)) {
        dotNetBinaryColorSizeSlider.zoomOptions = jsObject.zoomOptions;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetBinaryColorSizeSlider.id = k;
                break;
            }
        }
    }

    return dotNetBinaryColorSizeSlider;
}

