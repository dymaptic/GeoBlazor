import { buildDotNetLocationSchemeForPolygon } from './locationSchemeForPolygon';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import LocationSchemeForPolygon = __esri.LocationSchemeForPolygon;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsLocationSchemeForPolygonGenerated(dotNetObject: any): Promise<any> {
    let jsLocationSchemeForPolygon: any = {}
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsLocationSchemeForPolygon.color = buildJsMapColor(dotNetObject.color) as any;
    }
    if (hasValue(dotNetObject.outline)) {
        let { buildJsLocationSchemeForPolygonOutline } = await import('./locationSchemeForPolygonOutline');
        jsLocationSchemeForPolygon.outline = await buildJsLocationSchemeForPolygonOutline(dotNetObject.outline, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.opacity)) {
        jsLocationSchemeForPolygon.opacity = dotNetObject.opacity;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsLocationSchemeForPolygon);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLocationSchemeForPolygon;
    
    let dnInstantiatedObject = await buildDotNetLocationSchemeForPolygon(jsLocationSchemeForPolygon);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LocationSchemeForPolygon', e);
    }
    
    return jsLocationSchemeForPolygon;
}
export async function buildDotNetLocationSchemeForPolygonGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLocationSchemeForPolygon: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.color)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetLocationSchemeForPolygon.color = buildDotNetMapColor(jsObject.color);
        }
        if (hasValue(jsObject.outline)) {
            let { buildDotNetLocationSchemeForPolygonOutline } = await import('./locationSchemeForPolygonOutline');
            dotNetLocationSchemeForPolygon.outline = await buildDotNetLocationSchemeForPolygonOutline(jsObject.outline);
        }
        if (hasValue(jsObject.opacity)) {
            dotNetLocationSchemeForPolygon.opacity = jsObject.opacity;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLocationSchemeForPolygon.id = k;
                break;
            }
        }
    }

    return dotNetLocationSchemeForPolygon;
}

