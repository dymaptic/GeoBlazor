// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetEdgeSourceJSON } from './edgeSourceJSON';

export async function buildJsEdgeSourceJSONGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsEdgeSourceJSON: any = {};
    if (hasValue(dotNetObject.assetGroups)) {
        let { buildJsAssetGroupJSON } = await import('./assetGroupJSON');
        jsEdgeSourceJSON.assetGroups = await Promise.all(dotNetObject.assetGroups.map(async i => await buildJsAssetGroupJSON(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.layerId)) {
        jsEdgeSourceJSON.layerId = dotNetObject.layerId;
    }
    if (hasValue(dotNetObject.sourceId)) {
        jsEdgeSourceJSON.sourceId = dotNetObject.sourceId;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsEdgeSourceJSON);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsEdgeSourceJSON;
    
    return jsEdgeSourceJSON;
}


export async function buildDotNetEdgeSourceJSONGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetEdgeSourceJSON: any = {};
    
    if (hasValue(jsObject.assetGroups)) {
        let { buildDotNetAssetGroupJSON } = await import('./assetGroupJSON');
        dotNetEdgeSourceJSON.assetGroups = await Promise.all(jsObject.assetGroups.map(async i => await buildDotNetAssetGroupJSON(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.layerId)) {
        dotNetEdgeSourceJSON.layerId = jsObject.layerId;
    }
    
    if (hasValue(jsObject.sourceId)) {
        dotNetEdgeSourceJSON.sourceId = jsObject.sourceId;
    }
    

    return dotNetEdgeSourceJSON;
}

