// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ValuePickerCombobox from '@arcgis/core/widgets/ValuePicker/ValuePickerCombobox';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetValuePickerCombobox } from './valuePickerCombobox';

export async function buildJsValuePickerComboboxGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsValuePickerCombobox: any = {};
    if (hasValue(dotNetObject.items) && dotNetObject.items.length > 0) {
        let { buildJsComboboxItem } = await import('./comboboxItem');
        jsValuePickerCombobox.items = await Promise.all(dotNetObject.items.map(async i => await buildJsComboboxItem(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.label)) {
        jsValuePickerCombobox.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.placeholder)) {
        jsValuePickerCombobox.placeholder = dotNetObject.placeholder;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsValuePickerCombobox);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsValuePickerCombobox;
    
    try {
        let { buildDotNetValuePickerCombobox } = await import('./valuePickerCombobox');
        let dnInstantiatedObject = await buildDotNetValuePickerCombobox(jsValuePickerCombobox, layerId, viewId);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type ValuePickerCombobox detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ValuePickerCombobox', e);
    }
    
    return jsValuePickerCombobox;
}


export async function buildDotNetValuePickerComboboxGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetValuePickerCombobox: any = {};
    
    if (hasValue(jsObject.items)) {
        let { buildDotNetComboboxItem } = await import('./comboboxItem');
        dotNetValuePickerCombobox.items = await Promise.all(jsObject.items.map(async i => await buildDotNetComboboxItem(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.label)) {
        dotNetValuePickerCombobox.label = jsObject.label;
    }
    
    if (hasValue(jsObject.placeholder)) {
        dotNetValuePickerCombobox.placeholder = jsObject.placeholder;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetValuePickerCombobox.type = jsObject.type;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetValuePickerCombobox.id = geoBlazorId;
    }

    return dotNetValuePickerCombobox;
}

