// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import RouteSymbols from '@arcgis/core/layers/support/RouteSymbols';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetRouteSymbols } from './routeSymbols';

export async function buildJsRouteSymbolsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.stops)) {
        let { buildJsRouteStopSymbols } = await import('./routeStopSymbols');
        properties.stops = await buildJsRouteStopSymbols(dotNetObject.stops, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.directionLines)) {
        properties.directionLines = dotNetObject.directionLines;
    }
    if (hasValue(dotNetObject.directionPoints)) {
        properties.directionPoints = dotNetObject.directionPoints;
    }
    if (hasValue(dotNetObject.pointBarriers)) {
        properties.pointBarriers = dotNetObject.pointBarriers;
    }
    if (hasValue(dotNetObject.polygonBarriers)) {
        properties.polygonBarriers = dotNetObject.polygonBarriers;
    }
    if (hasValue(dotNetObject.polylineBarriers)) {
        properties.polylineBarriers = dotNetObject.polylineBarriers;
    }
    if (hasValue(dotNetObject.routeInfo)) {
        properties.routeInfo = dotNetObject.routeInfo;
    }
    let jsRouteSymbols = new RouteSymbols(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsRouteSymbols);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRouteSymbols;
    
    let dnInstantiatedObject = await buildDotNetRouteSymbols(jsRouteSymbols);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RouteSymbols', e);
    }
    
    return jsRouteSymbols;
}

export async function buildDotNetRouteSymbolsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRouteSymbols: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.stops)) {
            let { buildDotNetRouteStopSymbols } = await import('./routeStopSymbols');
            dotNetRouteSymbols.stops = await buildDotNetRouteStopSymbols(jsObject.stops);
        }
    if (hasValue(jsObject.directionLines)) {
        dotNetRouteSymbols.directionLines = jsObject.directionLines;
    }
    if (hasValue(jsObject.directionPoints)) {
        dotNetRouteSymbols.directionPoints = jsObject.directionPoints;
    }
    if (hasValue(jsObject.pointBarriers)) {
        dotNetRouteSymbols.pointBarriers = jsObject.pointBarriers;
    }
    if (hasValue(jsObject.polygonBarriers)) {
        dotNetRouteSymbols.polygonBarriers = jsObject.polygonBarriers;
    }
    if (hasValue(jsObject.polylineBarriers)) {
        dotNetRouteSymbols.polylineBarriers = jsObject.polylineBarriers;
    }
    if (hasValue(jsObject.routeInfo)) {
        dotNetRouteSymbols.routeInfo = jsObject.routeInfo;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRouteSymbols.id = k;
                break;
            }
        }
    }

    return dotNetRouteSymbols;
}

