// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetOpacityVisualVariableResult } from './opacityVisualVariableResult';

export async function buildJsOpacityVisualVariableResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsopacityVisualVariableResult: any = {}
    if (hasValue(dotNetObject.authoringInfo)) {
        let { buildJsAuthoringInfo } = await import('./authoringInfo');
        jsopacityVisualVariableResult.authoringInfo = await buildJsAuthoringInfo(dotNetObject.authoringInfo, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.visualVariable)) {
        let { buildJsOpacityVariable } = await import('./opacityVariable');
        jsopacityVisualVariableResult.visualVariable = await buildJsOpacityVariable(dotNetObject.visualVariable, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.defaultValuesUsed)) {
        jsopacityVisualVariableResult.defaultValuesUsed = dotNetObject.defaultValuesUsed;
    }
    if (hasValue(dotNetObject.statistics)) {
        jsopacityVisualVariableResult.statistics = dotNetObject.statistics;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsopacityVisualVariableResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsopacityVisualVariableResult;
    
    let dnInstantiatedObject = await buildDotNetOpacityVisualVariableResult(jsopacityVisualVariableResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for OpacityVisualVariableResult', e);
    }
    
    return jsopacityVisualVariableResult;
}

export async function buildDotNetOpacityVisualVariableResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetOpacityVisualVariableResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.authoringInfo)) {
            let { buildDotNetAuthoringInfo } = await import('./authoringInfo');
            dotNetOpacityVisualVariableResult.authoringInfo = await buildDotNetAuthoringInfo(jsObject.authoringInfo);
        }
        if (hasValue(jsObject.visualVariable)) {
            let { buildDotNetOpacityVariable } = await import('./opacityVariable');
            dotNetOpacityVisualVariableResult.visualVariable = await buildDotNetOpacityVariable(jsObject.visualVariable);
        }
    if (hasValue(jsObject.defaultValuesUsed)) {
        dotNetOpacityVisualVariableResult.defaultValuesUsed = jsObject.defaultValuesUsed;
    }
    if (hasValue(jsObject.statistics)) {
        dotNetOpacityVisualVariableResult.statistics = jsObject.statistics;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetOpacityVisualVariableResult.id = k;
                break;
            }
        }
    }

    return dotNetOpacityVisualVariableResult;
}

