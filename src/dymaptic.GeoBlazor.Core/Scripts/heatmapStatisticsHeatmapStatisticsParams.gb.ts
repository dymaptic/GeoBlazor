// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetHeatmapStatisticsHeatmapStatisticsParams } from './heatmapStatisticsHeatmapStatisticsParams';

export async function buildJsHeatmapStatisticsHeatmapStatisticsParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsheatmapStatisticsHeatmapStatisticsParams: any = {};
    if (hasValue(viewId)) {
        jsheatmapStatisticsHeatmapStatisticsParams.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsheatmapStatisticsHeatmapStatisticsParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.field)) {
        jsheatmapStatisticsHeatmapStatisticsParams.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.radius)) {
        jsheatmapStatisticsHeatmapStatisticsParams.radius = dotNetObject.radius;
    }
    if (hasValue(dotNetObject.signal)) {
        jsheatmapStatisticsHeatmapStatisticsParams.signal = dotNetObject.signal;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsheatmapStatisticsHeatmapStatisticsParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsheatmapStatisticsHeatmapStatisticsParams;
    
    let dnInstantiatedObject = await buildDotNetHeatmapStatisticsHeatmapStatisticsParams(jsheatmapStatisticsHeatmapStatisticsParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for HeatmapStatisticsHeatmapStatisticsParams', e);
    }
    
    return jsheatmapStatisticsHeatmapStatisticsParams;
}

export async function buildDotNetHeatmapStatisticsHeatmapStatisticsParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetHeatmapStatisticsHeatmapStatisticsParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.field)) {
        dotNetHeatmapStatisticsHeatmapStatisticsParams.field = jsObject.field;
    }
    if (hasValue(jsObject.radius)) {
        dotNetHeatmapStatisticsHeatmapStatisticsParams.radius = jsObject.radius;
    }
    if (hasValue(jsObject.signal)) {
        dotNetHeatmapStatisticsHeatmapStatisticsParams.signal = jsObject.signal;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetHeatmapStatisticsHeatmapStatisticsParams.id = k;
                break;
            }
        }
    }

    return dotNetHeatmapStatisticsHeatmapStatisticsParams;
}

