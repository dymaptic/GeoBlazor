// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import query = __esri.query;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class QueryServiceGenerated implements IPropertyWrapper {
    public component: query;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: query) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async executeAttachmentQuery(url: any,
        attachmentQuery: any,
        requestOptions: any): Promise<any> {
        return await this.component.executeAttachmentQuery(url,
            attachmentQuery,
            requestOptions);
    }

    async executeForCount(url: any,
        query: any,
        requestOptions: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.component.executeForCount(url,
            jsQuery,
            requestOptions);
    }

    async executeForExtent(url: any,
        parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsparameters = await buildJsQuery(parameters, this.layerId, this.viewId) as any;
        return await this.component.executeForExtent(url,
            jsparameters,
            requestOptions);
    }

    async executeForIds(url: any,
        query: any,
        requestOptions: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.component.executeForIds(url,
            jsQuery,
            requestOptions);
    }

    async executeForTopCount(url: any,
        topFeaturesQuery: any,
        requestOptions: any): Promise<any> {
        let { buildJsTopFeaturesQuery } = await import('./topFeaturesQuery');
        let jsTopFeaturesQuery = await buildJsTopFeaturesQuery(topFeaturesQuery, this.layerId, this.viewId) as any;
        return await this.component.executeForTopCount(url,
            jsTopFeaturesQuery,
            requestOptions);
    }

    async executeForTopExtents(url: any,
        topFeaturesQuery: any,
        outSpatialReference: any,
        requestOptions: any): Promise<any> {
        let { buildJsTopFeaturesQuery } = await import('./topFeaturesQuery');
        let jsTopFeaturesQuery = await buildJsTopFeaturesQuery(topFeaturesQuery, this.layerId, this.viewId) as any;
        let { buildJsSpatialReference } = await import('./spatialReference');
        let jsOutSpatialReference = buildJsSpatialReference(outSpatialReference) as any;
        return await this.component.executeForTopExtents(url,
            jsTopFeaturesQuery,
            jsOutSpatialReference,
            requestOptions);
    }

    async executeForTopIds(url: any,
        topFeaturesQuery: any,
        outSpatialReference: any,
        requestOptions: any): Promise<any> {
        let { buildJsTopFeaturesQuery } = await import('./topFeaturesQuery');
        let jsTopFeaturesQuery = await buildJsTopFeaturesQuery(topFeaturesQuery, this.layerId, this.viewId) as any;
        let { buildJsSpatialReference } = await import('./spatialReference');
        let jsOutSpatialReference = buildJsSpatialReference(outSpatialReference) as any;
        return await this.component.executeForTopIds(url,
            jsTopFeaturesQuery,
            jsOutSpatialReference,
            requestOptions);
    }

    async executeQueryJSON(url: any,
        query: any,
        requestOptions: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.component.executeQueryJSON(url,
            jsQuery,
            requestOptions);
    }

    async executeQueryPBF(url: any,
        query: any,
        requestOptions: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.component.executeQueryPBF(url,
            jsQuery,
            requestOptions);
    }

    async executeRelationshipQuery(url: any,
        relationshipQuery: any,
        requestOptions: any): Promise<any> {
        let { buildJsRelationshipQuery } = await import('./relationshipQuery');
        let jsRelationshipQuery = await buildJsRelationshipQuery(relationshipQuery, this.layerId, this.viewId) as any;
        return await this.component.executeRelationshipQuery(url,
            jsRelationshipQuery,
            requestOptions);
    }

    async executeTopFeaturesQuery(url: any,
        topFeaturesQuery: any,
        outSpatialReference: any,
        requestOptions: any): Promise<any> {
        let { buildJsTopFeaturesQuery } = await import('./topFeaturesQuery');
        let jsTopFeaturesQuery = await buildJsTopFeaturesQuery(topFeaturesQuery, this.layerId, this.viewId) as any;
        let { buildJsSpatialReference } = await import('./spatialReference');
        let jsOutSpatialReference = buildJsSpatialReference(outSpatialReference) as any;
        return await this.component.executeTopFeaturesQuery(url,
            jsTopFeaturesQuery,
            jsOutSpatialReference,
            requestOptions);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsQueryServiceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsquery: any = {}


    let { default: QueryServiceWrapper } = await import('./queryService');
    let queryServiceWrapper = new QueryServiceWrapper(jsquery);
    queryServiceWrapper.geoBlazorId = dotNetObject.id;
    queryServiceWrapper.viewId = viewId;
    queryServiceWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(queryServiceWrapper);
    jsObjectRefs[dotNetObject.id] = queryServiceWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsquery;
    let { buildDotNetQueryService } = await import('./queryService');
    let dnInstantiatedObject = await buildDotNetQueryService(jsquery);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for QueryService', e);
    }
    
    return jsquery;
}

export async function buildDotNetQueryServiceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetQueryService: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetQueryService.id = k;
                break;
            }
        }
    }

    return dotNetQueryService;
}

