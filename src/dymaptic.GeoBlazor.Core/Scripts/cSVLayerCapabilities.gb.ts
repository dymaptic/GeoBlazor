// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetCSVLayerCapabilities } from './cSVLayerCapabilities';

export async function buildJsCSVLayerCapabilitiesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsCSVLayerCapabilities: any = {};
    if (hasValue(dotNetObject.attachment)) {
        let { buildJsCSVLayerCapabilitiesAttachment } = await import('./cSVLayerCapabilitiesAttachment');
        jsCSVLayerCapabilities.attachment = await buildJsCSVLayerCapabilitiesAttachment(dotNetObject.attachment, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.data)) {
        jsCSVLayerCapabilities.data = dotNetObject.data;
    }
    if (hasValue(dotNetObject.editing)) {
        jsCSVLayerCapabilities.editing = dotNetObject.editing;
    }
    if (hasValue(dotNetObject.operations)) {
        jsCSVLayerCapabilities.operations = dotNetObject.operations;
    }
    if (hasValue(dotNetObject.query)) {
        jsCSVLayerCapabilities.query = dotNetObject.query;
    }
    if (hasValue(dotNetObject.queryRelated)) {
        jsCSVLayerCapabilities.queryRelated = dotNetObject.queryRelated;
    }
    
    jsObjectRefs[dotNetObject.id] = jsCSVLayerCapabilities;
    arcGisObjectRefs[dotNetObject.id] = jsCSVLayerCapabilities;
    
    return jsCSVLayerCapabilities;
}


export async function buildDotNetCSVLayerCapabilitiesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCSVLayerCapabilities: any = {};
    
    if (hasValue(jsObject.attachment)) {
        let { buildDotNetCSVLayerCapabilitiesAttachment } = await import('./cSVLayerCapabilitiesAttachment');
        dotNetCSVLayerCapabilities.attachment = await buildDotNetCSVLayerCapabilitiesAttachment(jsObject.attachment);
    }
    
    if (hasValue(jsObject.data)) {
        dotNetCSVLayerCapabilities.data = removeCircularReferences(jsObject.data);
    }
    
    if (hasValue(jsObject.editing)) {
        dotNetCSVLayerCapabilities.editing = removeCircularReferences(jsObject.editing);
    }
    
    if (hasValue(jsObject.operations)) {
        dotNetCSVLayerCapabilities.operations = removeCircularReferences(jsObject.operations);
    }
    
    if (hasValue(jsObject.query)) {
        dotNetCSVLayerCapabilities.query = removeCircularReferences(jsObject.query);
    }
    
    if (hasValue(jsObject.queryRelated)) {
        dotNetCSVLayerCapabilities.queryRelated = removeCircularReferences(jsObject.queryRelated);
    }
    

    return dotNetCSVLayerCapabilities;
}

