// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import HistogramViewModel from '@arcgis/core/widgets/Histogram/HistogramViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetHistogramViewModel } from './histogramViewModel';

export async function buildJsHistogramViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.bins) && dotNetObject.bins.length > 0) {
        let { buildJsBin } = await import('./bin');
        properties.bins = await Promise.all(dotNetObject.bins.map(async i => await buildJsBin(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.hasLabelFormatFunction) && dotNetObject.hasLabelFormatFunction) {
        properties.labelFormatFunction = async (value,
        type,
        index) => {

            let func = new Function('value',
            'type',
            'index', dotNetObject.labelFormatFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }

    if (hasValue(dotNetObject.average)) {
        properties.average = dotNetObject.average;
    }
    if (hasValue(dotNetObject.max)) {
        properties.max = dotNetObject.max;
    }
    if (hasValue(dotNetObject.min)) {
        properties.min = dotNetObject.min;
    }
    let jsHistogramViewModel = new HistogramViewModel(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsHistogramViewModel);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsHistogramViewModel;
    
    return jsHistogramViewModel;
}


export async function buildDotNetHistogramViewModelGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetHistogramViewModel: any = {};
    
    if (hasValue(jsObject.bins)) {
        let { buildDotNetBin } = await import('./bin');
        dotNetHistogramViewModel.bins = await Promise.all(jsObject.bins.map(async i => await buildDotNetBin(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.average)) {
        dotNetHistogramViewModel.average = jsObject.average;
    }
    
    if (hasValue(jsObject.binRange)) {
        dotNetHistogramViewModel.binRange = jsObject.binRange;
    }
    
    if (hasValue(jsObject.max)) {
        dotNetHistogramViewModel.max = jsObject.max;
    }
    
    if (hasValue(jsObject.min)) {
        dotNetHistogramViewModel.min = jsObject.min;
    }
    
    if (hasValue(jsObject.range)) {
        dotNetHistogramViewModel.range = jsObject.range;
    }
    
    if (hasValue(jsObject.state)) {
        dotNetHistogramViewModel.state = removeCircularReferences(jsObject.state);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetHistogramViewModel.id = geoBlazorId;
    }

    return dotNetHistogramViewModel;
}

