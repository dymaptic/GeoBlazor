// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetClassBreaksClassBreaksParams } from './classBreaksClassBreaksParams';

export async function buildJsClassBreaksClassBreaksParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsclassBreaksClassBreaksParams: any = {}
    if (hasValue(dotNetObject.features)) {
        let { buildJsGraphic } = await import('./graphic');
        jsclassBreaksClassBreaksParams.features = dotNetObject.features.map(i => buildJsGraphic(i)) as any;
    }
    if (hasValue(dotNetObject.filter)) {
        let { buildJsFeatureFilter } = await import('./featureFilter');
        jsclassBreaksClassBreaksParams.filter = await buildJsFeatureFilter(dotNetObject.filter, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsclassBreaksClassBreaksParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.classificationMethod)) {
        jsclassBreaksClassBreaksParams.classificationMethod = dotNetObject.classificationMethod;
    }
    if (hasValue(dotNetObject.field)) {
        jsclassBreaksClassBreaksParams.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.forBinning)) {
        jsclassBreaksClassBreaksParams.forBinning = dotNetObject.forBinning;
    }
    if (hasValue(dotNetObject.maxValue)) {
        jsclassBreaksClassBreaksParams.maxValue = dotNetObject.maxValue;
    }
    if (hasValue(dotNetObject.minValue)) {
        jsclassBreaksClassBreaksParams.minValue = dotNetObject.minValue;
    }
    if (hasValue(dotNetObject.normalizationField)) {
        jsclassBreaksClassBreaksParams.normalizationField = dotNetObject.normalizationField;
    }
    if (hasValue(dotNetObject.numClasses)) {
        jsclassBreaksClassBreaksParams.numClasses = dotNetObject.numClasses;
    }
    if (hasValue(dotNetObject.signal)) {
        jsclassBreaksClassBreaksParams.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.sqlExpression)) {
        jsclassBreaksClassBreaksParams.sqlExpression = dotNetObject.sqlExpression;
    }
    if (hasValue(dotNetObject.sqlWhere)) {
        jsclassBreaksClassBreaksParams.sqlWhere = dotNetObject.sqlWhere;
    }
    if (hasValue(dotNetObject.standardDeviationInterval)) {
        jsclassBreaksClassBreaksParams.standardDeviationInterval = dotNetObject.standardDeviationInterval;
    }
    if (hasValue(dotNetObject.useFeaturesInView)) {
        jsclassBreaksClassBreaksParams.useFeaturesInView = dotNetObject.useFeaturesInView;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        jsclassBreaksClassBreaksParams.valueExpression = dotNetObject.valueExpression;
    }
    if (hasValue(dotNetObject.view)) {
        jsclassBreaksClassBreaksParams.view = dotNetObject.view;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsclassBreaksClassBreaksParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsclassBreaksClassBreaksParams;
    
    let dnInstantiatedObject = await buildDotNetClassBreaksClassBreaksParams(jsclassBreaksClassBreaksParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ClassBreaksClassBreaksParams', e);
    }
    
    return jsclassBreaksClassBreaksParams;
}

export async function buildDotNetClassBreaksClassBreaksParamsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetClassBreaksClassBreaksParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.features)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetClassBreaksClassBreaksParams.features = jsObject.features.map(i => buildDotNetGraphic(i, layerId, viewId));
        }
        if (hasValue(jsObject.filter)) {
            let { buildDotNetFeatureFilter } = await import('./featureFilter');
            dotNetClassBreaksClassBreaksParams.filter = await buildDotNetFeatureFilter(jsObject.filter);
        }
    if (hasValue(jsObject.classificationMethod)) {
        dotNetClassBreaksClassBreaksParams.classificationMethod = jsObject.classificationMethod;
    }
    if (hasValue(jsObject.field)) {
        dotNetClassBreaksClassBreaksParams.field = jsObject.field;
    }
    if (hasValue(jsObject.forBinning)) {
        dotNetClassBreaksClassBreaksParams.forBinning = jsObject.forBinning;
    }
    if (hasValue(jsObject.maxValue)) {
        dotNetClassBreaksClassBreaksParams.maxValue = jsObject.maxValue;
    }
    if (hasValue(jsObject.minValue)) {
        dotNetClassBreaksClassBreaksParams.minValue = jsObject.minValue;
    }
    if (hasValue(jsObject.normalizationField)) {
        dotNetClassBreaksClassBreaksParams.normalizationField = jsObject.normalizationField;
    }
    if (hasValue(jsObject.numClasses)) {
        dotNetClassBreaksClassBreaksParams.numClasses = jsObject.numClasses;
    }
    if (hasValue(jsObject.signal)) {
        dotNetClassBreaksClassBreaksParams.signal = jsObject.signal;
    }
    if (hasValue(jsObject.sqlExpression)) {
        dotNetClassBreaksClassBreaksParams.sqlExpression = jsObject.sqlExpression;
    }
    if (hasValue(jsObject.sqlWhere)) {
        dotNetClassBreaksClassBreaksParams.sqlWhere = jsObject.sqlWhere;
    }
    if (hasValue(jsObject.standardDeviationInterval)) {
        dotNetClassBreaksClassBreaksParams.standardDeviationInterval = jsObject.standardDeviationInterval;
    }
    if (hasValue(jsObject.useFeaturesInView)) {
        dotNetClassBreaksClassBreaksParams.useFeaturesInView = jsObject.useFeaturesInView;
    }
    if (hasValue(jsObject.valueExpression)) {
        dotNetClassBreaksClassBreaksParams.valueExpression = jsObject.valueExpression;
    }
    if (hasValue(jsObject.view)) {
        dotNetClassBreaksClassBreaksParams.view = jsObject.view;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetClassBreaksClassBreaksParams.id = k;
                break;
            }
        }
    }

    return dotNetClassBreaksClassBreaksParams;
}

