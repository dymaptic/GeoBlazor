// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ZoomViewModel from '@arcgis/core/widgets/Zoom/ZoomViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ZoomViewModelGenerated implements IPropertyWrapper {
    public component: ZoomViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ZoomViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async zoomIn(): Promise<void> {
        this.component.zoomIn();
    }

    async zoomOut(): Promise<void> {
        this.component.zoomOut();
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsZoomViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsZoomViewModel = new ZoomViewModel();

    if (hasValue(dotNetObject.canZoomIn)) {
        jsZoomViewModel.canZoomIn = dotNetObject.canZoomIn;
    }
    if (hasValue(dotNetObject.canZoomOut)) {
        jsZoomViewModel.canZoomOut = dotNetObject.canZoomOut;
    }
    if (hasValue(dotNetObject.view)) {
        jsZoomViewModel.view = dotNetObject.view;
    }

    let { default: ZoomViewModelWrapper } = await import('./zoomViewModel');
    let zoomViewModelWrapper = new ZoomViewModelWrapper(jsZoomViewModel);
    zoomViewModelWrapper.geoBlazorId = dotNetObject.id;
    zoomViewModelWrapper.viewId = viewId;
    zoomViewModelWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(zoomViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = zoomViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsZoomViewModel;
    let { buildDotNetZoomViewModel } = await import('./zoomViewModel');
    let dnInstantiatedObject = await buildDotNetZoomViewModel(jsZoomViewModel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ZoomViewModel', e);
    }
    
    return jsZoomViewModel;
}

export async function buildDotNetZoomViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetZoomViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.canZoomIn)) {
        dotNetZoomViewModel.canZoomIn = jsObject.canZoomIn;
    }
    if (hasValue(jsObject.canZoomOut)) {
        dotNetZoomViewModel.canZoomOut = jsObject.canZoomOut;
    }
    if (hasValue(jsObject.state)) {
        dotNetZoomViewModel.state = jsObject.state;
    }
    if (hasValue(jsObject.view)) {
        dotNetZoomViewModel.view = jsObject.view;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetZoomViewModel.id = k;
                break;
            }
        }
    }

    return dotNetZoomViewModel;
}

