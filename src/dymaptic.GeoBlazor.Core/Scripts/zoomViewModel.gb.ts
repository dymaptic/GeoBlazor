// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ZoomViewModel from '@arcgis/core/widgets/Zoom/ZoomViewModel';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ZoomViewModelGenerated implements IPropertyWrapper {
    public component: ZoomViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ZoomViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {

        if (hasValue(dotNetObject.canZoomIn)) {
            this.component.canZoomIn = dotNetObject.canZoomIn;
        }
        if (hasValue(dotNetObject.canZoomOut)) {
            this.component.canZoomOut = dotNetObject.canZoomOut;
        }
    }
    
    async zoomIn(): Promise<void> {
        this.component.zoomIn();
    }

    async zoomOut(): Promise<void> {
        this.component.zoomOut();
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsZoomViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }

    if (hasValue(dotNetObject.canZoomIn)) {
        properties.canZoomIn = dotNetObject.canZoomIn;
    }
    if (hasValue(dotNetObject.canZoomOut)) {
        properties.canZoomOut = dotNetObject.canZoomOut;
    }
    let jsZoomViewModel = new ZoomViewModel(properties);

    let { default: ZoomViewModelWrapper } = await import('./zoomViewModel');

    let zoomViewModelWrapper = new ZoomViewModelWrapper(jsZoomViewModel);
    zoomViewModelWrapper.geoBlazorId = dotNetObject.id;
    zoomViewModelWrapper.viewId = viewId;
    zoomViewModelWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = zoomViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsZoomViewModel;
    
    return jsZoomViewModel;
}


export async function buildDotNetZoomViewModelGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetZoomViewModel: any = {};
    
    if (hasValue(jsObject.canZoomIn)) {
        dotNetZoomViewModel.canZoomIn = jsObject.canZoomIn;
    }
    
    if (hasValue(jsObject.canZoomOut)) {
        dotNetZoomViewModel.canZoomOut = jsObject.canZoomOut;
    }
    
    if (hasValue(jsObject.state)) {
        dotNetZoomViewModel.state = removeCircularReferences(jsObject.state);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetZoomViewModel.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        if (hasValue(dotNetRef)) {
            try {
                dotNetZoomViewModel.id = await dotNetRef.invokeMethodAsync('GetId');
            } catch (e) {
                console.error('Error invoking GetId for ZoomViewModel', e);
            }
        }
    }
    if (hasValue(dotNetZoomViewModel.id)) {
        jsObjectRefs[dotNetZoomViewModel.id] ??= jsObject;
        arcGisObjectRefs[dotNetZoomViewModel.id] ??= jsObject;
    }

    return dotNetZoomViewModel;
}

