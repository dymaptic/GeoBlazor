// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetPrimitiveOverride } from './primitiveOverride';

export async function buildJsPrimitiveOverrideGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsPrimitiveOverride: any = {};
    if (hasValue(dotNetObject.valueExpressionInfo)) {
        let { buildJsPrimitiveOverrideValueExpressionInfo } = await import('./primitiveOverrideValueExpressionInfo');
        jsPrimitiveOverride.valueExpressionInfo = await buildJsPrimitiveOverrideValueExpressionInfo(dotNetObject.valueExpressionInfo, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.primitiveName)) {
        jsPrimitiveOverride.primitiveName = dotNetObject.primitiveName;
    }
    if (hasValue(dotNetObject.propertyName)) {
        jsPrimitiveOverride.propertyName = dotNetObject.propertyName;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsPrimitiveOverride);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPrimitiveOverride;
    
    return jsPrimitiveOverride;
}


export async function buildDotNetPrimitiveOverrideGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPrimitiveOverride: any = {};
    
    if (hasValue(jsObject.valueExpressionInfo)) {
        let { buildDotNetPrimitiveOverrideValueExpressionInfo } = await import('./primitiveOverrideValueExpressionInfo');
        dotNetPrimitiveOverride.valueExpressionInfo = await buildDotNetPrimitiveOverrideValueExpressionInfo(jsObject.valueExpressionInfo, layerId, viewId);
    }
    
    if (hasValue(jsObject.primitiveName)) {
        dotNetPrimitiveOverride.primitiveName = jsObject.primitiveName;
    }
    
    if (hasValue(jsObject.propertyName)) {
        dotNetPrimitiveOverride.propertyName = jsObject.propertyName;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetPrimitiveOverride.type = jsObject.type;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetPrimitiveOverride.id = geoBlazorId;
    }

    return dotNetPrimitiveOverride;
}

