// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import StylePattern3D from '@arcgis/core/symbols/patterns/StylePattern3D';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetStylePattern3D } from './stylePattern3D';

export async function buildJsStylePattern3DGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.style)) {
        properties.style = dotNetObject.style;
    }
    let jsStylePattern3D = new StylePattern3D(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsStylePattern3D);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsStylePattern3D;
    
    return jsStylePattern3D;
}


export async function buildDotNetStylePattern3DGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetStylePattern3D: any = {};
    
    if (hasValue(jsObject.style)) {
        dotNetStylePattern3D.style = removeCircularReferences(jsObject.style);
    }
    
    if (hasValue(jsObject.type)) {
        dotNetStylePattern3D.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetStylePattern3D.id = geoBlazorId;
    }

    return dotNetStylePattern3D;
}

