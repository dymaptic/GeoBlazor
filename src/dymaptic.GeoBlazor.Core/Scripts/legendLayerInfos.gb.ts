// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import LegendLayerInfos = __esri.LegendLayerInfos;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class LegendLayerInfosGenerated implements IPropertyWrapper {
    public component: LegendLayerInfos;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: LegendLayerInfos) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getLayer(): Promise<any> {
        if (!hasValue(this.component.layer)) {
            return null;
        }
        
        let { buildDotNetLayer } = await import('./layer');
        return await buildDotNetLayer(this.component.layer);
    }
    async setLayer(value: any): Promise<void> {
        let { buildJsLayer } = await import('./layer');
        this.component.layer = await  buildJsLayer(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsLegendLayerInfosGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsLegendLayerInfos: any = {}
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsLegendLayerInfos.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.sublayerIds)) {
        jsLegendLayerInfos.sublayerIds = dotNetObject.sublayerIds;
    }
    if (hasValue(dotNetObject.title)) {
        jsLegendLayerInfos.title = dotNetObject.title;
    }
    let { default: LegendLayerInfosWrapper } = await import('./legendLayerInfos');
    let legendLayerInfosWrapper = new LegendLayerInfosWrapper(jsLegendLayerInfos);
    legendLayerInfosWrapper.geoBlazorId = dotNetObject.id;
    legendLayerInfosWrapper.viewId = viewId;
    legendLayerInfosWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(legendLayerInfosWrapper);
    jsObjectRefs[dotNetObject.id] = legendLayerInfosWrapper;

    arcGisObjectRefs[dotNetObject.id] = jsLegendLayerInfos;
    let { buildDotNetLegendLayerInfos } = await import('./legendLayerInfos');
    let dnInstantiatedObject = await buildDotNetLegendLayerInfos(jsLegendLayerInfos, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LegendLayerInfos', e);
    }
    
    return jsLegendLayerInfos;
}

export async function buildDotNetLegendLayerInfosGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLegendLayerInfos: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.layer)) {
            let { buildDotNetLayer } = await import('./layer');
            dotNetLegendLayerInfos.layer = await buildDotNetLayer(jsObject.layer);
        }
        if (hasValue(jsObject.sublayerIds)) {
            dotNetLegendLayerInfos.sublayerIds = jsObject.sublayerIds;
        }
        if (hasValue(jsObject.title)) {
            dotNetLegendLayerInfos.title = jsObject.title;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLegendLayerInfos.id = k;
                break;
            }
        }
    }

    return dotNetLegendLayerInfos;
}

