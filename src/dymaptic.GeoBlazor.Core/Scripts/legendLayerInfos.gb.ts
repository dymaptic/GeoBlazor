// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetLegendLayerInfos } from './legendLayerInfos';

export async function buildJsLegendLayerInfosGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsLegendLayerInfos: any = {};
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsLegendLayerInfos.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.sublayerIds)) {
        jsLegendLayerInfos.sublayerIds = dotNetObject.sublayerIds;
    }
    if (hasValue(dotNetObject.title)) {
        jsLegendLayerInfos.title = dotNetObject.title;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsLegendLayerInfos);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLegendLayerInfos;
    
    let { buildDotNetLegendLayerInfos } = await import('./legendLayerInfos');
    let dnInstantiatedObject = await buildDotNetLegendLayerInfos(jsLegendLayerInfos);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type LegendLayerInfos detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LegendLayerInfos', e);
    }
    
    return jsLegendLayerInfos;
}


export async function buildDotNetLegendLayerInfosGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLegendLayerInfos: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.sublayerIds)) {
        dotNetLegendLayerInfos.sublayerIds = jsObject.sublayerIds;
    }
    if (hasValue(jsObject.title)) {
        dotNetLegendLayerInfos.title = jsObject.title;
    }

    dotNetLegendLayerInfos.id = lookupGeoBlazorId(jsObject);

    return dotNetLegendLayerInfos;
}

