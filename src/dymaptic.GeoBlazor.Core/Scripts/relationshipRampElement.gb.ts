// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetRelationshipRampElement } from './relationshipRampElement';

export async function buildJsRelationshipRampElementGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsRelationshipRampElement: any = {}
    if (hasValue(dotNetObject.colors)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsRelationshipRampElement.colors = dotNetObject.colors.map(i => buildJsMapColor(i)) as any;
    }

    if (hasValue(dotNetObject.focus)) {
        jsRelationshipRampElement.focus = dotNetObject.focus;
    }
    if (hasValue(dotNetObject.infos)) {
        jsRelationshipRampElement.infos = dotNetObject.infos;
    }
    if (hasValue(dotNetObject.labels)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedLabels } = dotNetObject.labels;
        jsRelationshipRampElement.labels = sanitizedLabels;
    }
    if (hasValue(dotNetObject.numClasses)) {
        jsRelationshipRampElement.numClasses = dotNetObject.numClasses;
    }
    if (hasValue(dotNetObject.rotation)) {
        jsRelationshipRampElement.rotation = dotNetObject.rotation;
    }
    if (hasValue(dotNetObject.title)) {
        jsRelationshipRampElement.title = dotNetObject.title;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsRelationshipRampElement);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRelationshipRampElement;
    
    let dnInstantiatedObject = await buildDotNetRelationshipRampElement(jsRelationshipRampElement);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RelationshipRampElement', e);
    }
    
    return jsRelationshipRampElement;
}

export async function buildDotNetRelationshipRampElementGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRelationshipRampElement: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.colors)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetRelationshipRampElement.colors = jsObject.colors.map(i => buildDotNetMapColor(i));
        }
    if (hasValue(jsObject.focus)) {
        dotNetRelationshipRampElement.focus = jsObject.focus;
    }
    if (hasValue(jsObject.infos)) {
        dotNetRelationshipRampElement.infos = jsObject.infos;
    }
    if (hasValue(jsObject.labels)) {
        dotNetRelationshipRampElement.labels = jsObject.labels;
    }
    if (hasValue(jsObject.numClasses)) {
        dotNetRelationshipRampElement.numClasses = jsObject.numClasses;
    }
    if (hasValue(jsObject.rotation)) {
        dotNetRelationshipRampElement.rotation = jsObject.rotation;
    }
    if (hasValue(jsObject.title)) {
        dotNetRelationshipRampElement.title = jsObject.title;
    }
    if (hasValue(jsObject.type)) {
        dotNetRelationshipRampElement.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRelationshipRampElement.id = k;
                break;
            }
        }
    }

    return dotNetRelationshipRampElement;
}

