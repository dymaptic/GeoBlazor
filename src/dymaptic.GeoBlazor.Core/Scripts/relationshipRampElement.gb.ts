// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetRelationshipRampElement } from './relationshipRampElement';

export async function buildJsRelationshipRampElementGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsRelationshipRampElement: any = {};
    if (hasValue(dotNetObject.colors) && dotNetObject.colors.length > 0) {
        let { buildJsMapColor } = await import('./mapColor');
        jsRelationshipRampElement.colors = dotNetObject.colors.map(i => buildJsMapColor(i)) as any;
    }
    if (hasValue(dotNetObject.labels)) {
        let { buildJsRelationshipLabels } = await import('./relationshipLabels');
        jsRelationshipRampElement.labels = await buildJsRelationshipLabels(dotNetObject.labels, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.focus)) {
        jsRelationshipRampElement.focus = dotNetObject.focus;
    }
    if (hasValue(dotNetObject.infos) && dotNetObject.infos.length > 0) {
        jsRelationshipRampElement.infos = dotNetObject.infos;
    }
    if (hasValue(dotNetObject.numClasses)) {
        jsRelationshipRampElement.numClasses = dotNetObject.numClasses;
    }
    if (hasValue(dotNetObject.rotation)) {
        jsRelationshipRampElement.rotation = dotNetObject.rotation;
    }
    if (hasValue(dotNetObject.title)) {
        jsRelationshipRampElement.title = dotNetObject.title;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsRelationshipRampElement);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRelationshipRampElement;
    
    return jsRelationshipRampElement;
}


export async function buildDotNetRelationshipRampElementGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRelationshipRampElement: any = {};
    
    if (hasValue(jsObject.colors)) {
        let { buildDotNetMapColor } = await import('./mapColor');
        dotNetRelationshipRampElement.colors = jsObject.colors.map(i => buildDotNetMapColor(i));
    }
    
    if (hasValue(jsObject.labels)) {
        let { buildDotNetRelationshipLabels } = await import('./relationshipLabels');
        dotNetRelationshipRampElement.labels = await buildDotNetRelationshipLabels(jsObject.labels, layerId, viewId);
    }
    
    if (hasValue(jsObject.focus)) {
        dotNetRelationshipRampElement.focus = jsObject.focus;
    }
    
    if (hasValue(jsObject.infos)) {
        dotNetRelationshipRampElement.infos = jsObject.infos;
    }
    
    if (hasValue(jsObject.numClasses)) {
        dotNetRelationshipRampElement.numClasses = jsObject.numClasses;
    }
    
    if (hasValue(jsObject.rotation)) {
        dotNetRelationshipRampElement.rotation = jsObject.rotation;
    }
    
    if (hasValue(jsObject.title)) {
        dotNetRelationshipRampElement.title = jsObject.title;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetRelationshipRampElement.type = jsObject.type;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetRelationshipRampElement.id = geoBlazorId;
    }

    return dotNetRelationshipRampElement;
}

