// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetConfigWorkersLoaderConfig } from './configWorkersLoaderConfig';

export async function buildJsConfigWorkersLoaderConfigGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsconfigWorkersLoaderConfig: any = {};

    if (hasValue(dotNetObject.baseUrl)) {
        jsconfigWorkersLoaderConfig.baseUrl = dotNetObject.baseUrl;
    }
    if (hasValue(dotNetObject.has)) {
        jsconfigWorkersLoaderConfig.has = dotNetObject.has;
    }
    if (hasValue(dotNetObject.packages) && dotNetObject.packages.length > 0) {
        jsconfigWorkersLoaderConfig.packages = dotNetObject.packages;
    }
    if (hasValue(dotNetObject.paths)) {
        jsconfigWorkersLoaderConfig.paths = dotNetObject.paths;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsconfigWorkersLoaderConfig);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsconfigWorkersLoaderConfig;
    
    return jsconfigWorkersLoaderConfig;
}


export async function buildDotNetConfigWorkersLoaderConfigGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetConfigWorkersLoaderConfig: any = {};
    
    if (hasValue(jsObject.baseUrl)) {
        dotNetConfigWorkersLoaderConfig.baseUrl = jsObject.baseUrl;
    }
    
    if (hasValue(jsObject.has)) {
        dotNetConfigWorkersLoaderConfig.has = jsObject.has;
    }
    
    if (hasValue(jsObject.packages)) {
        dotNetConfigWorkersLoaderConfig.packages = jsObject.packages;
    }
    
    if (hasValue(jsObject.paths)) {
        dotNetConfigWorkersLoaderConfig.paths = jsObject.paths;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetConfigWorkersLoaderConfig.id = geoBlazorId;
    }

    return dotNetConfigWorkersLoaderConfig;
}

