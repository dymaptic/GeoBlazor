// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import SimpleRenderer from '@arcgis/core/renderers/SimpleRenderer';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetSimpleRenderer } from './simpleRenderer';

export async function buildJsSimpleRendererGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.authoringInfo)) {
        let { buildJsAuthoringInfo } = await import('./authoringInfo');
        properties.authoringInfo = await buildJsAuthoringInfo(dotNetObject.authoringInfo, viewId) as any;
    }
    if (hasValue(dotNetObject.symbol)) {
        let { buildJsSymbol } = await import('./symbol');
        properties.symbol = buildJsSymbol(dotNetObject.symbol, viewId) as any;
    }
    if (hasValue(dotNetObject.visualVariables) && dotNetObject.visualVariables.length > 0) {
        let { buildJsVisualVariable } = await import('./visualVariable');
        properties.visualVariables = await Promise.all(dotNetObject.visualVariables.map(async i => await buildJsVisualVariable(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    let jsSimpleRenderer = new SimpleRenderer(properties);
    
    jsObjectRefs[dotNetObject.id] = jsSimpleRenderer;
    arcGisObjectRefs[dotNetObject.id] = jsSimpleRenderer;
    
    return jsSimpleRenderer;
}


export async function buildDotNetSimpleRendererGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSimpleRenderer: any = {};
    
    if (hasValue(jsObject.authoringInfo)) {
        let { buildDotNetAuthoringInfo } = await import('./authoringInfo');
        dotNetSimpleRenderer.authoringInfo = await buildDotNetAuthoringInfo(jsObject.authoringInfo, viewId);
    }
    
    if (hasValue(jsObject.symbol)) {
        let { buildDotNetSymbol } = await import('./symbol');
        dotNetSimpleRenderer.symbol = buildDotNetSymbol(jsObject.symbol, viewId);
    }
    
    if (hasValue(jsObject.visualVariables)) {
        let { buildDotNetVisualVariable } = await import('./visualVariable');
        dotNetSimpleRenderer.visualVariables = await Promise.all(jsObject.visualVariables.map(async i => await buildDotNetVisualVariable(i, viewId)));
    }
    
    if (hasValue(jsObject.label)) {
        dotNetSimpleRenderer.label = jsObject.label;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetSimpleRenderer.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSimpleRenderer.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetSimpleRenderer.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetSimpleRenderer.id)) {
        jsObjectRefs[dotNetSimpleRenderer.id] ??= jsObject;
        arcGisObjectRefs[dotNetSimpleRenderer.id] ??= jsObject;
    }

    return dotNetSimpleRenderer;
}

