// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import SimpleRenderer from '@arcgis/core/renderers/SimpleRenderer';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SimpleRendererGenerated implements IPropertyWrapper {
    public component: SimpleRenderer;
    public readonly geoBlazorId: string = '';

    constructor(component: SimpleRenderer) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getAuthoringInfo(): Promise<any> {
        let { buildDotNetAuthoringInfo } = await import('./authoringInfo');
        return await buildDotNetAuthoringInfo(this.component.authoringInfo);
    }
    async setAuthoringInfo(value: any): Promise<void> {
        let { buildJsAuthoringInfo } = await import('./authoringInfo');
        this.component.authoringInfo = await buildJsAuthoringInfo(value);
    }
    async getSymbol(): Promise<any> {
        let { buildDotNetSymbol } = await import('./symbol');
        return await buildDotNetSymbol(this.component.symbol);
    }
    async setSymbol(value: any): Promise<void> {
        let { buildJsSymbol } = await import('./symbol');
        this.component.symbol = await buildJsSymbol(value);
    }
    async getVisualVariables(): Promise<any> {
        let { buildDotNetVisualVariable } = await import('./visualVariable');
        return this.component.visualVariables.map(async i => await buildDotNetVisualVariable(i));
    }
    
    async setVisualVariables(value: any): Promise<void> {
        let { buildJsVisualVariable } = await import('./visualVariable');
        this.component.visualVariables = value.map(async i => await buildJsVisualVariable(i));
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}
export async function buildJsSimpleRendererGenerated(dotNetObject: any): Promise<any> {
    let { default: SimpleRenderer } = await import('@arcgis/core/renderers/SimpleRenderer');
    let jsSimpleRenderer = new SimpleRenderer();
    if (hasValue(dotNetObject.authoringInfo)) {
        let { buildJsAuthoringInfo } = await import('authoringInfo');
        jsSimpleRenderer.authoringInfo = buildJsAuthoringInfo(dotNetObject.authoringInfo) as any;

    }
    if (hasValue(dotNetObject.symbol)) {
        let { buildJsSymbol } = await import('symbol');
        jsSimpleRenderer.symbol = buildJsSymbol(dotNetObject.symbol) as any;

    }
    if (hasValue(dotNetObject.visualVariables)) {
        let { buildJsVisualVariable } = await import('visualVariable');
        jsSimpleRenderer.visualVariables = dotNetObject.visualVariables.map(i => buildJsVisualVariable(i)) as any;

    }
    if (hasValue(dotNetObject.label)) {
        jsSimpleRenderer.label = dotNetObject.label;
    }
    let { default: SimpleRendererWrapper } = await import('./simpleRenderer');
    let simpleRendererWrapper = new SimpleRendererWrapper(jsSimpleRenderer);
    jsSimpleRenderer.id = dotNetObject.id;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(simpleRendererWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = simpleRendererWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsSimpleRenderer;
    
    return jsSimpleRenderer;
}

export async function buildDotNetSimpleRendererGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSimpleRenderer: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.authoringInfo)) {
            let { buildDotNetAuthoringInfo } = await import('./dotNetBuilder');
            dotNetSimpleRenderer.authoringInfo = await buildDotNetAuthoringInfo(jsObject.authoringInfo);
        }
        if (hasValue(jsObject.symbol)) {
            let { buildDotNetSymbol } = await import('./dotNetBuilder');
            dotNetSimpleRenderer.symbol = await buildDotNetSymbol(jsObject.symbol);
        }
        if (hasValue(jsObject.visualVariables)) {
            let { buildDotNetVisualVariable } = await import('./visualVariable');
            dotNetSimpleRenderer.visualVariables = jsObject.visualVariables.map(async i => await buildDotNetVisualVariable(i));
        }
        dotNetSimpleRenderer.label = jsObject.label;
        dotNetSimpleRenderer.type = jsObject.type;
    return dotNetSimpleRenderer;
}

