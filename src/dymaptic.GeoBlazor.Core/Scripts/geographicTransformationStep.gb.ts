// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import GeographicTransformationStep from '@arcgis/core/geometry/support/GeographicTransformationStep';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class GeographicTransformationStepGenerated implements IPropertyWrapper {
    public component: GeographicTransformationStep;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: GeographicTransformationStep) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async getInverse(): Promise<any> {
        let result = this.component.getInverse();
        let { buildDotNetGeographicTransformationStep } = await import('./geographicTransformationStep');
        return await buildDotNetGeographicTransformationStep(result);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsGeographicTransformationStepGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsGeographicTransformationStep = new GeographicTransformationStep();

    if (hasValue(dotNetObject.isInverse)) {
        jsGeographicTransformationStep.isInverse = dotNetObject.isInverse;
    }
    if (hasValue(dotNetObject.wkid)) {
        jsGeographicTransformationStep.wkid = dotNetObject.wkid;
    }
    if (hasValue(dotNetObject.wkt)) {
        jsGeographicTransformationStep.wkt = dotNetObject.wkt;
    }

    let { default: GeographicTransformationStepWrapper } = await import('./geographicTransformationStep');
    let geographicTransformationStepWrapper = new GeographicTransformationStepWrapper(jsGeographicTransformationStep);
    geographicTransformationStepWrapper.geoBlazorId = dotNetObject.id;
    geographicTransformationStepWrapper.viewId = viewId;
    geographicTransformationStepWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(geographicTransformationStepWrapper);
    jsObjectRefs[dotNetObject.id] = geographicTransformationStepWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsGeographicTransformationStep;
    let { buildDotNetGeographicTransformationStep } = await import('./geographicTransformationStep');
    let dnInstantiatedObject = await buildDotNetGeographicTransformationStep(jsGeographicTransformationStep);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for GeographicTransformationStep', e);
    }
    
    return jsGeographicTransformationStep;
}

export async function buildDotNetGeographicTransformationStepGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGeographicTransformationStep: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.isInverse)) {
            dotNetGeographicTransformationStep.isInverse = jsObject.isInverse;
        }
        if (hasValue(jsObject.wkid)) {
            dotNetGeographicTransformationStep.wkid = jsObject.wkid;
        }
        if (hasValue(jsObject.wkt)) {
            dotNetGeographicTransformationStep.wkt = jsObject.wkt;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetGeographicTransformationStep.id = k;
                break;
            }
        }
    }

    return dotNetGeographicTransformationStep;
}

