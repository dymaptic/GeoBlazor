// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import GeographicTransformationStep from '@arcgis/core/geometry/operators/support/GeographicTransformationStep';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, generateSerializableJson } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class GeographicTransformationStepGenerated implements IPropertyWrapper {
    public component: GeographicTransformationStep;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: GeographicTransformationStep) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {

        if (hasValue(dotNetObject.isInverse)) {
            this.component.isInverse = dotNetObject.isInverse;
        }
        if (hasValue(dotNetObject.wkid)) {
            this.component.wkid = dotNetObject.wkid;
        }
        if (hasValue(dotNetObject.wkt)) {
            this.component.wkt = dotNetObject.wkt;
        }
    }
    
    async getInverse(): Promise<any> {
        let result = this.component.getInverse();
        let { buildDotNetGeographicTransformationStep } = await import('./geographicTransformationStep');
        return await buildDotNetGeographicTransformationStep(result, this.layerId, this.viewId);
    }

    // region properties
    
    getWkt(): any {
        if (!hasValue(this.component.wkt)) {
            return null;
        }
        
        return generateSerializableJson(this.component.wkt);
    }
    
    setWkt(value: any): void {
        this.component.wkt = JSON.parse(value);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsGeographicTransformationStepGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.isInverse)) {
        properties.isInverse = dotNetObject.isInverse;
    }
    if (hasValue(dotNetObject.wkid)) {
        properties.wkid = dotNetObject.wkid;
    }
    if (hasValue(dotNetObject.wkt)) {
        properties.wkt = dotNetObject.wkt;
    }
    let jsGeographicTransformationStep = new GeographicTransformationStep(properties);

    let { default: GeographicTransformationStepWrapper } = await import('./geographicTransformationStep');

    let geographicTransformationStepWrapper = new GeographicTransformationStepWrapper(jsGeographicTransformationStep);
    geographicTransformationStepWrapper.geoBlazorId = dotNetObject.id;
    geographicTransformationStepWrapper.viewId = viewId;
    geographicTransformationStepWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = geographicTransformationStepWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsGeographicTransformationStep;
    
    return jsGeographicTransformationStep;
}


export async function buildDotNetGeographicTransformationStepGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGeographicTransformationStep: any = {};
    
    if (hasValue(jsObject.isInverse)) {
        dotNetGeographicTransformationStep.isInverse = jsObject.isInverse;
    }
    
    if (hasValue(jsObject.wkid)) {
        dotNetGeographicTransformationStep.wkid = jsObject.wkid;
    }
    
    if (hasValue(jsObject.wkt)) {
        dotNetGeographicTransformationStep.wkt = jsObject.wkt;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetGeographicTransformationStep.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        if (hasValue(dotNetRef)) {
            try {
                dotNetGeographicTransformationStep.id = await dotNetRef.invokeMethodAsync('GetId');
            } catch (e) {
                console.error('Error invoking GetId for GeographicTransformationStep', e);
            }
        }
    }
    if (hasValue(dotNetGeographicTransformationStep.id)) {
        jsObjectRefs[dotNetGeographicTransformationStep.id] ??= jsObject;
        arcGisObjectRefs[dotNetGeographicTransformationStep.id] ??= jsObject;
    }

    return dotNetGeographicTransformationStep;
}

