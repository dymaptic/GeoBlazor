// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import PopupTemplate from '@arcgis/core/PopupTemplate';
import { arcGisObjectRefs, hasValue } from './arcGisJsInterop';

export async function buildDotNetPopupTemplateGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPopupTemplate: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.content)) {
            let { buildDotNetPopupContent } = await import('./popupContent');
            dotNetPopupTemplate.content = jsObject.content.map(i => buildDotNetPopupContent(i));
        }
        if (hasValue(jsObject.expressionInfos)) {
            let { buildDotNetExpressionInfo } = await import('./expressionInfo');
            dotNetPopupTemplate.expressionInfos = jsObject.expressionInfos.map(i => buildDotNetExpressionInfo(i));
        }
        if (hasValue(jsObject.fieldInfos)) {
            let { buildDotNetFieldInfo } = await import('./fieldInfo');
            dotNetPopupTemplate.fieldInfos = jsObject.fieldInfos.map(i => buildDotNetFieldInfo(i));
        }
        if (hasValue(jsObject.layerOptions)) {
            let { buildDotNetLayerOptions } = await import('./layerOptions');
            dotNetPopupTemplate.layerOptions = buildDotNetLayerOptions(jsObject.layerOptions);
        }
        if (hasValue(jsObject.actions)) {
            dotNetPopupTemplate.actions = jsObject.actions;
        }
        if (hasValue(jsObject.lastEditInfoEnabled)) {
            dotNetPopupTemplate.lastEditInfoEnabled = jsObject.lastEditInfoEnabled;
        }
        if (hasValue(jsObject.outFields)) {
            dotNetPopupTemplate.outFields = jsObject.outFields;
        }
        if (hasValue(jsObject.overwriteActions)) {
            dotNetPopupTemplate.overwriteActions = jsObject.overwriteActions;
        }
        if (hasValue(jsObject.returnGeometry)) {
            dotNetPopupTemplate.returnGeometry = jsObject.returnGeometry;
        }
        if (hasValue(jsObject.title)) {
            dotNetPopupTemplate.title = jsObject.title;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPopupTemplate.id = k;
                break;
            }
        }
    }

    return dotNetPopupTemplate;
}

