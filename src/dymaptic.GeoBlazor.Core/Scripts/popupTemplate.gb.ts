// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import PopupTemplate from '@arcgis/core/PopupTemplate';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';

export async function buildDotNetPopupTemplateGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPopupTemplate: any = {};
    
    if (hasValue(jsObject.actions)) {
        let { buildDotNetActionBase } = await import('./actionBase');
        dotNetPopupTemplate.actions = await Promise.all(jsObject.actions.map(async i => await buildDotNetActionBase(i, viewId)));
    }
    
    if (hasValue(jsObject.expressionInfos)) {
        let { buildDotNetPopupExpressionInfo } = await import('./popupExpressionInfo');
        dotNetPopupTemplate.expressionInfos = await Promise.all(jsObject.expressionInfos.map(async i => await buildDotNetPopupExpressionInfo(i, viewId)));
    }
    
    if (hasValue(jsObject.fieldInfos)) {
        let { buildDotNetFieldInfo } = await import('./fieldInfo');
        dotNetPopupTemplate.fieldInfos = jsObject.fieldInfos.map(i => buildDotNetFieldInfo(i, viewId));
    }
    
    if (hasValue(jsObject.layerOptions)) {
        let { buildDotNetLayerOptions } = await import('./layerOptions');
        dotNetPopupTemplate.layerOptions = buildDotNetLayerOptions(jsObject.layerOptions, viewId);
    }
    
    if (hasValue(jsObject.lastEditInfoEnabled)) {
        dotNetPopupTemplate.lastEditInfoEnabled = jsObject.lastEditInfoEnabled;
    }
    
    if (hasValue(jsObject.outFields)) {
        dotNetPopupTemplate.outFields = jsObject.outFields;
    }
    
    if (hasValue(jsObject.overwriteActions)) {
        dotNetPopupTemplate.overwriteActions = jsObject.overwriteActions;
    }
    
    if (hasValue(jsObject.returnGeometry)) {
        dotNetPopupTemplate.returnGeometry = jsObject.returnGeometry;
    }
    
    if (hasValue(jsObject.title)) {
        dotNetPopupTemplate.title = jsObject.title;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetPopupTemplate.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetPopupTemplate.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetPopupTemplate.id)) {
        jsObjectRefs[dotNetPopupTemplate.id] ??= jsObject;
        arcGisObjectRefs[dotNetPopupTemplate.id] ??= jsObject;
    }

    return dotNetPopupTemplate;
}

