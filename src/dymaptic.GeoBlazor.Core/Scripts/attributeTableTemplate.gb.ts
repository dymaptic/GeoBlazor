// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import AttributeTableTemplate from '@arcgis/core/tables/AttributeTableTemplate';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetAttributeTableTemplate } from './attributeTableTemplate';

export async function buildJsAttributeTableTemplateGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.elements) && dotNetObject.elements.length > 0) {
        let { buildJsIAttributeTableTemplateElements } = await import('./iAttributeTableTemplateElements');
        properties.elements = dotNetObject.elements.map(i => buildJsIAttributeTableTemplateElements(i)) as any;
    }
    if (hasValue(dotNetObject.orderByFields) && dotNetObject.orderByFields.length > 0) {
        let { buildJsFieldOrder } = await import('./fieldOrder');
        properties.orderByFields = await Promise.all(dotNetObject.orderByFields.map(async i => await buildJsFieldOrder(i, layerId, viewId))) as any;
    }

    let jsAttributeTableTemplate = new AttributeTableTemplate(properties);
    
    jsObjectRefs[dotNetObject.id] = jsAttributeTableTemplate;
    arcGisObjectRefs[dotNetObject.id] = jsAttributeTableTemplate;
    
    return jsAttributeTableTemplate;
}


export async function buildDotNetAttributeTableTemplateGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAttributeTableTemplate: any = {};
    
    if (hasValue(jsObject.elements)) {
        let { buildDotNetIAttributeTableTemplateElements } = await import('./iAttributeTableTemplateElements');
        dotNetAttributeTableTemplate.elements = jsObject.elements.map(i => buildDotNetIAttributeTableTemplateElements(i));
    }
    
    if (hasValue(jsObject.orderByFields)) {
        let { buildDotNetFieldOrder } = await import('./fieldOrder');
        dotNetAttributeTableTemplate.orderByFields = await Promise.all(jsObject.orderByFields.map(async i => await buildDotNetFieldOrder(i)));
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetAttributeTableTemplate.id = geoBlazorId;
    }

    return dotNetAttributeTableTemplate;
}

