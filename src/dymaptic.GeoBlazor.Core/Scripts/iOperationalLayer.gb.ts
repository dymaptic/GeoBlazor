// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import OperationalLayer = __esri.OperationalLayer;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class IOperationalLayerGenerated implements IPropertyWrapper {
    public layer: OperationalLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: OperationalLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}


export async function buildJsIOperationalLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsOperationalLayer = new OperationalLayer();

    if (hasValue(dotNetObject.persistenceEnabled)) {
        jsOperationalLayer.persistenceEnabled = dotNetObject.persistenceEnabled;
    }

    let { default: IOperationalLayerWrapper } = await import('./iOperationalLayer');
    let iOperationalLayerWrapper = new IOperationalLayerWrapper(jsOperationalLayer);
    iOperationalLayerWrapper.geoBlazorId = dotNetObject.id;
    iOperationalLayerWrapper.viewId = viewId;
    iOperationalLayerWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(iOperationalLayerWrapper);
    jsObjectRefs[dotNetObject.id] = iOperationalLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsOperationalLayer;
    let { buildDotNetIOperationalLayer } = await import('./iOperationalLayer');
    let dnInstantiatedObject = await buildDotNetIOperationalLayer(jsOperationalLayer);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for IOperationalLayer', e);
    }
    
    return jsOperationalLayer;
}

export async function buildDotNetIOperationalLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIOperationalLayer: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.persistenceEnabled)) {
        dotNetIOperationalLayer.persistenceEnabled = jsObject.persistenceEnabled;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetIOperationalLayer.id = k;
                break;
            }
        }
    }

    return dotNetIOperationalLayer;
}

