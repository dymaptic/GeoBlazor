// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetDirectLineMeasurement3DViewModelMeasurementValue } from './directLineMeasurement3DViewModelMeasurementValue';

export async function buildJsDirectLineMeasurement3DViewModelMeasurementValueGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsDirectLineMeasurement3DViewModelMeasurementValue: any = {};

    if (hasValue(dotNetObject.state)) {
        jsDirectLineMeasurement3DViewModelMeasurementValue.state = dotNetObject.state;
    }
    if (hasValue(dotNetObject.text)) {
        jsDirectLineMeasurement3DViewModelMeasurementValue.text = dotNetObject.text;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsDirectLineMeasurement3DViewModelMeasurementValue);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsDirectLineMeasurement3DViewModelMeasurementValue;
    
    let { buildDotNetDirectLineMeasurement3DViewModelMeasurementValue } = await import('./directLineMeasurement3DViewModelMeasurementValue');
    let dnInstantiatedObject = await buildDotNetDirectLineMeasurement3DViewModelMeasurementValue(jsDirectLineMeasurement3DViewModelMeasurementValue);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type DirectLineMeasurement3DViewModelMeasurementValue detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DirectLineMeasurement3DViewModelMeasurementValue', e);
    }
    
    return jsDirectLineMeasurement3DViewModelMeasurementValue;
}


export async function buildDotNetDirectLineMeasurement3DViewModelMeasurementValueGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDirectLineMeasurement3DViewModelMeasurementValue: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.state)) {
        dotNetDirectLineMeasurement3DViewModelMeasurementValue.state = jsObject.state;
    }
    if (hasValue(jsObject.text)) {
        dotNetDirectLineMeasurement3DViewModelMeasurementValue.text = jsObject.text;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetDirectLineMeasurement3DViewModelMeasurementValue.id = geoBlazorId;
    }

    return dotNetDirectLineMeasurement3DViewModelMeasurementValue;
}

