// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import RotationVariable from '@arcgis/core/renderers/visualVariables/RotationVariable';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetRotationVariable } from './rotationVariable';

export async function buildJsRotationVariableGenerated(dotNetObject: any): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.axis)) {
        properties.axis = dotNetObject.axis;
    }
    if (hasValue(dotNetObject.field)) {
        properties.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.legendOptions)) {
        const { id, dotNetComponentReference, ...sanitizedLegendOptions } = dotNetObject.legendOptions;
        properties.legendOptions = sanitizedLegendOptions;
    }
    if (hasValue(dotNetObject.rotationType)) {
        properties.rotationType = dotNetObject.rotationType;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        properties.valueExpression = dotNetObject.valueExpression;
    }
    if (hasValue(dotNetObject.valueExpressionTitle)) {
        properties.valueExpressionTitle = dotNetObject.valueExpressionTitle;
    }
    let jsRotationVariable = new RotationVariable(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsRotationVariable);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRotationVariable;
    
    let dnInstantiatedObject = await buildDotNetRotationVariable(jsRotationVariable);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RotationVariable', e);
    }
    
    return jsRotationVariable;
}

export async function buildDotNetRotationVariableGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRotationVariable: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.axis)) {
        dotNetRotationVariable.axis = jsObject.axis;
    }
    if (hasValue(jsObject.field)) {
        dotNetRotationVariable.field = jsObject.field;
    }
    if (hasValue(jsObject.legendOptions)) {
        dotNetRotationVariable.legendOptions = jsObject.legendOptions;
    }
    if (hasValue(jsObject.rotationType)) {
        dotNetRotationVariable.rotationType = jsObject.rotationType;
    }
    if (hasValue(jsObject.type)) {
        dotNetRotationVariable.type = jsObject.type;
    }
    if (hasValue(jsObject.valueExpression)) {
        dotNetRotationVariable.valueExpression = jsObject.valueExpression;
    }
    if (hasValue(jsObject.valueExpressionTitle)) {
        dotNetRotationVariable.valueExpressionTitle = jsObject.valueExpressionTitle;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRotationVariable.id = k;
                break;
            }
        }
    }

    return dotNetRotationVariable;
}

