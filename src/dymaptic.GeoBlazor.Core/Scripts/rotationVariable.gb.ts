// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import RotationVariable from '@arcgis/core/renderers/visualVariables/RotationVariable';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetRotationVariable } from './rotationVariable';

export async function buildJsRotationVariableGenerated(dotNetObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.legendOptions)) {
        let { buildJsVisualVariableLegendOptions } = await import('./visualVariableLegendOptions');
        properties.legendOptions = await buildJsVisualVariableLegendOptions(dotNetObject.legendOptions, viewId) as any;
    }

    if (hasValue(dotNetObject.axis)) {
        properties.axis = dotNetObject.axis;
    }
    if (hasValue(dotNetObject.field)) {
        properties.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.rotationType)) {
        properties.rotationType = dotNetObject.rotationType;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        properties.valueExpression = dotNetObject.valueExpression;
    }
    if (hasValue(dotNetObject.valueExpressionTitle)) {
        properties.valueExpressionTitle = dotNetObject.valueExpressionTitle;
    }
    let jsRotationVariable = new RotationVariable(properties);
    
    jsObjectRefs[dotNetObject.id] = jsRotationVariable;
    arcGisObjectRefs[dotNetObject.id] = jsRotationVariable;
    
    return jsRotationVariable;
}


export async function buildDotNetRotationVariableGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRotationVariable: any = {};
    
    if (hasValue(jsObject.legendOptions)) {
        let { buildDotNetVisualVariableLegendOptions } = await import('./visualVariableLegendOptions');
        dotNetRotationVariable.legendOptions = await buildDotNetVisualVariableLegendOptions(jsObject.legendOptions, viewId);
    }
    
    if (hasValue(jsObject.axis)) {
        dotNetRotationVariable.axis = removeCircularReferences(jsObject.axis);
    }
    
    if (hasValue(jsObject.field)) {
        dotNetRotationVariable.field = jsObject.field;
    }
    
    if (hasValue(jsObject.rotationType)) {
        dotNetRotationVariable.rotationType = removeCircularReferences(jsObject.rotationType);
    }
    
    if (hasValue(jsObject.type)) {
        dotNetRotationVariable.type = removeCircularReferences(jsObject.type);
    }
    
    if (hasValue(jsObject.valueExpression)) {
        dotNetRotationVariable.valueExpression = jsObject.valueExpression;
    }
    
    if (hasValue(jsObject.valueExpressionTitle)) {
        dotNetRotationVariable.valueExpressionTitle = jsObject.valueExpressionTitle;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetRotationVariable.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetRotationVariable.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetRotationVariable.id)) {
        jsObjectRefs[dotNetRotationVariable.id] ??= jsObject;
        arcGisObjectRefs[dotNetRotationVariable.id] ??= jsObject;
    }

    return dotNetRotationVariable;
}

