// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import RotationVariable from '@arcgis/core/renderers/visualVariables/RotationVariable';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetRotationVariable } from './rotationVariable';

export async function buildJsRotationVariableGenerated(dotNetObject: any): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.legendOptions)) {
        let { buildJsVisualVariableLegendOptions } = await import('./visualVariableLegendOptions');
        properties.legendOptions = await buildJsVisualVariableLegendOptions(dotNetObject.legendOptions) as any;
    }

    if (hasValue(dotNetObject.axis)) {
        properties.axis = dotNetObject.axis;
    }
    if (hasValue(dotNetObject.field)) {
        properties.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.rotationType)) {
        properties.rotationType = dotNetObject.rotationType;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        properties.valueExpression = dotNetObject.valueExpression;
    }
    if (hasValue(dotNetObject.valueExpressionTitle)) {
        properties.valueExpressionTitle = dotNetObject.valueExpressionTitle;
    }
    let jsRotationVariable = new RotationVariable(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsRotationVariable);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRotationVariable;
    
    try {
        let { buildDotNetRotationVariable } = await import('./rotationVariable');
        let dnInstantiatedObject = await buildDotNetRotationVariable(jsRotationVariable);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type RotationVariable detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RotationVariable', e);
    }
    
    return jsRotationVariable;
}


export async function buildDotNetRotationVariableGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRotationVariable: any = {};
    
    if (hasValue(jsObject.legendOptions)) {
        let { buildDotNetVisualVariableLegendOptions } = await import('./visualVariableLegendOptions');
        dotNetRotationVariable.legendOptions = await buildDotNetVisualVariableLegendOptions(jsObject.legendOptions);
    }
    
    if (hasValue(jsObject.axis)) {
        dotNetRotationVariable.axis = removeCircularReferences(jsObject.axis);
    }
    
    if (hasValue(jsObject.field)) {
        dotNetRotationVariable.field = jsObject.field;
    }
    
    if (hasValue(jsObject.rotationType)) {
        dotNetRotationVariable.rotationType = removeCircularReferences(jsObject.rotationType);
    }
    
    if (hasValue(jsObject.type)) {
        dotNetRotationVariable.type = removeCircularReferences(jsObject.type);
    }
    
    if (hasValue(jsObject.valueExpression)) {
        dotNetRotationVariable.valueExpression = jsObject.valueExpression;
    }
    
    if (hasValue(jsObject.valueExpressionTitle)) {
        dotNetRotationVariable.valueExpressionTitle = jsObject.valueExpressionTitle;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetRotationVariable.id = geoBlazorId;
    }

    return dotNetRotationVariable;
}

