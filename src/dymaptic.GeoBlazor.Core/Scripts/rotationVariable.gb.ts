// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import RotationVariable from '@arcgis/core/renderers/visualVariables/RotationVariable';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class RotationVariableGenerated implements IPropertyWrapper {
    public component: RotationVariable;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: RotationVariable) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getLegendOptions(): Promise<any> {
        let { buildDotNetVisualVariableLegendOptions } = await import('./visualVariableLegendOptions');
        return await buildDotNetVisualVariableLegendOptions(this.component.legendOptions);
    }
    async setLegendOptions(value: any): Promise<void> {
        let { buildJsVisualVariableLegendOptions } = await import('./visualVariableLegendOptions');
        this.component.legendOptions = await  buildJsVisualVariableLegendOptions(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsRotationVariableGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsRotationVariable = new RotationVariable();
    if (hasValue(dotNetObject.legendOptions)) {
        let { buildJsVisualVariableLegendOptions } = await import('./visualVariableLegendOptions');
        jsRotationVariable.legendOptions = await buildJsVisualVariableLegendOptions(dotNetObject.legendOptions, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.axis)) {
        jsRotationVariable.axis = dotNetObject.axis;
    }
    if (hasValue(dotNetObject.field)) {
        jsRotationVariable.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.rotationType)) {
        jsRotationVariable.rotationType = dotNetObject.rotationType;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        jsRotationVariable.valueExpression = dotNetObject.valueExpression;
    }
    if (hasValue(dotNetObject.valueExpressionTitle)) {
        jsRotationVariable.valueExpressionTitle = dotNetObject.valueExpressionTitle;
    }
    let { default: RotationVariableWrapper } = await import('./rotationVariable');
    let rotationVariableWrapper = new RotationVariableWrapper(jsRotationVariable);
    rotationVariableWrapper.geoBlazorId = dotNetObject.id;
    rotationVariableWrapper.viewId = viewId;
    rotationVariableWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(rotationVariableWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = rotationVariableWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsRotationVariable;
    
    return jsRotationVariable;
}

export async function buildDotNetRotationVariableGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRotationVariable: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.legendOptions)) {
            let { buildDotNetVisualVariableLegendOptions } = await import('./visualVariableLegendOptions');
            dotNetRotationVariable.legendOptions = await buildDotNetVisualVariableLegendOptions(jsObject.legendOptions);
        }
        dotNetRotationVariable.axis = jsObject.axis;
        dotNetRotationVariable.field = jsObject.field;
        dotNetRotationVariable.rotationType = jsObject.rotationType;
        dotNetRotationVariable.type = jsObject.type;
        dotNetRotationVariable.valueExpression = jsObject.valueExpression;
        dotNetRotationVariable.valueExpressionTitle = jsObject.valueExpressionTitle;

    return dotNetRotationVariable;
}

