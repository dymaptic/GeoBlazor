// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ScaleBar from '@arcgis/core/widgets/ScaleBar';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ScaleBarWidgetGenerated implements IPropertyWrapper {
    public widget: ScaleBar;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: ScaleBar) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    
    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async own(handleOrHandles: any): Promise<void> {
                let { buildJsWatchHandle } = await import('./watchHandle');
let jsHandleOrHandles = await buildJsWatchHandle(handleOrHandles, this.layerId, this.viewId) as any;
        this.widget.own(jsHandleOrHandles);
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async render(): Promise<any> {
        return this.widget.render();
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async when(callback: any,
        errback: any): Promise<any> {
        return await this.widget.when(callback,
            errback);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsScaleBarWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }

    if (hasValue(dotNetObject.container)) {
        properties.container = dotNetObject.container;
    }
    if (hasValue(dotNetObject.icon)) {
        properties.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.style)) {
        properties.style = dotNetObject.style;
    }
    if (hasValue(dotNetObject.unit)) {
        properties.unit = dotNetObject.unit;
    }
    if (hasValue(dotNetObject.viewModel)) {
        const { id, dotNetComponentReference, ...sanitizedViewModel } = dotNetObject.viewModel;
        properties.viewModel = sanitizedViewModel;
    }
    if (hasValue(dotNetObject.widgetId)) {
        properties.id = dotNetObject.widgetId;
    }
    let jsScaleBar = new ScaleBar(properties);

    let { default: ScaleBarWidgetWrapper } = await import('./scaleBarWidget');
    let scaleBarWidgetWrapper = new ScaleBarWidgetWrapper(jsScaleBar);
    scaleBarWidgetWrapper.geoBlazorId = dotNetObject.id;
    scaleBarWidgetWrapper.viewId = viewId;
    scaleBarWidgetWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(scaleBarWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = scaleBarWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsScaleBar;
    let { buildDotNetScaleBarWidget } = await import('./scaleBarWidget');
    let dnInstantiatedObject = await buildDotNetScaleBarWidget(jsScaleBar);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ScaleBarWidget', e);
    }
    
    return jsScaleBar;
}

export async function buildDotNetScaleBarWidgetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetScaleBarWidget: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.container)) {
        dotNetScaleBarWidget.container = jsObject.container;
    }
    if (hasValue(jsObject.icon)) {
        dotNetScaleBarWidget.icon = jsObject.icon;
    }
    if (hasValue(jsObject.label)) {
        dotNetScaleBarWidget.label = jsObject.label;
    }
    if (hasValue(jsObject.style)) {
        dotNetScaleBarWidget.style = jsObject.style;
    }
    if (hasValue(jsObject.type)) {
        dotNetScaleBarWidget.type = jsObject.type;
    }
    if (hasValue(jsObject.unit)) {
        dotNetScaleBarWidget.unit = jsObject.unit;
    }
    if (hasValue(jsObject.viewModel)) {
        dotNetScaleBarWidget.viewModel = jsObject.viewModel;
    }
    if (hasValue(jsObject.id)) {
        dotNetScaleBarWidget.widgetId = jsObject.id;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetScaleBarWidget.id = k;
                break;
            }
        }
    }

    return dotNetScaleBarWidget;
}

