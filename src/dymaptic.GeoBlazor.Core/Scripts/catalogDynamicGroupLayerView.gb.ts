// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetCatalogDynamicGroupLayerView } from './catalogDynamicGroupLayerView';
import CatalogDynamicGroupLayerView from '@arcgis/core/views/layers/CatalogDynamicGroupLayerView';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsCatalogDynamicGroupLayerViewGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCatalogDynamicGroupLayerView = new CatalogDynamicGroupLayerView();

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsCatalogDynamicGroupLayerView);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCatalogDynamicGroupLayerView;
    
    let dnInstantiatedObject = await buildDotNetCatalogDynamicGroupLayerView(jsCatalogDynamicGroupLayerView);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CatalogDynamicGroupLayerView', e);
    }
    
    return jsCatalogDynamicGroupLayerView;
}

export async function buildDotNetCatalogDynamicGroupLayerViewGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCatalogDynamicGroupLayerView: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.layerViews)) {
            let { buildDotNetLayerView } = await import('./layerView');
            dotNetCatalogDynamicGroupLayerView.layerViews = await Promise.all(jsObject.layerViews.map(async i => await buildDotNetLayerView(i)));
        }
        if (hasValue(jsObject.spatialReferenceSupported)) {
            dotNetCatalogDynamicGroupLayerView.spatialReferenceSupported = jsObject.spatialReferenceSupported;
        }
        if (hasValue(jsObject.suspended)) {
            dotNetCatalogDynamicGroupLayerView.suspended = jsObject.suspended;
        }
        if (hasValue(jsObject.updating)) {
            dotNetCatalogDynamicGroupLayerView.updating = jsObject.updating;
        }
        if (hasValue(jsObject.view)) {
            dotNetCatalogDynamicGroupLayerView.view = jsObject.view;
        }
        if (hasValue(jsObject.visibleAtCurrentScale)) {
            dotNetCatalogDynamicGroupLayerView.visibleAtCurrentScale = jsObject.visibleAtCurrentScale;
        }
        if (hasValue(jsObject.visibleAtCurrentTimeExtent)) {
            dotNetCatalogDynamicGroupLayerView.visibleAtCurrentTimeExtent = jsObject.visibleAtCurrentTimeExtent;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCatalogDynamicGroupLayerView.id = k;
                break;
            }
        }
    }

    return dotNetCatalogDynamicGroupLayerView;
}

