// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import relationshipUpdateRendererParams = __esri.relationshipUpdateRendererParams;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class RelationshipUpdateRendererParamsGenerated implements IPropertyWrapper {
    public component: relationshipUpdateRendererParams;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: relationshipUpdateRendererParams) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getRenderer(): Promise<any> {
        if (!hasValue(this.component.renderer)) {
            return null;
        }
        
        let { buildDotNetUniqueValueRenderer } = await import('./uniqueValueRenderer');
        return await buildDotNetUniqueValueRenderer(this.component.renderer);
    }
    async setRenderer(value: any): Promise<void> {
        let { buildJsUniqueValueRenderer } = await import('./uniqueValueRenderer');
        this.component.renderer = await  buildJsUniqueValueRenderer(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsRelationshipUpdateRendererParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsrelationshipUpdateRendererParams: any = {}
    if (hasValue(dotNetObject.colors)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsrelationshipUpdateRendererParams.colors = dotNetObject.colors.map(i => buildJsMapColor(i)) as any;
    }
    if (hasValue(dotNetObject.field1)) {
        jsrelationshipUpdateRendererParams.field1 = dotNetObject.relationshipUpdateRendererParamsField1;
    }
    if (hasValue(dotNetObject.field2)) {
        jsrelationshipUpdateRendererParams.field2 = dotNetObject.relationshipUpdateRendererParamsField2;
    }
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsUniqueValueRenderer } = await import('./uniqueValueRenderer');
        jsrelationshipUpdateRendererParams.renderer = await buildJsUniqueValueRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.focus)) {
        jsrelationshipUpdateRendererParams.focus = dotNetObject.focus;
    }
    if (hasValue(dotNetObject.numClasses)) {
        jsrelationshipUpdateRendererParams.numClasses = dotNetObject.numClasses;
    }

    let { default: RelationshipUpdateRendererParamsWrapper } = await import('./relationshipUpdateRendererParams');
    let relationshipUpdateRendererParamsWrapper = new RelationshipUpdateRendererParamsWrapper(jsrelationshipUpdateRendererParams);
    relationshipUpdateRendererParamsWrapper.geoBlazorId = dotNetObject.id;
    relationshipUpdateRendererParamsWrapper.viewId = viewId;
    relationshipUpdateRendererParamsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(relationshipUpdateRendererParamsWrapper);
    jsObjectRefs[dotNetObject.id] = relationshipUpdateRendererParamsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsrelationshipUpdateRendererParams;
    let { buildDotNetRelationshipUpdateRendererParams } = await import('./relationshipUpdateRendererParams');
    let dnInstantiatedObject = await buildDotNetRelationshipUpdateRendererParams(jsrelationshipUpdateRendererParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RelationshipUpdateRendererParams', e);
    }
    
    return jsrelationshipUpdateRendererParams;
}
export async function buildDotNetRelationshipUpdateRendererParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRelationshipUpdateRendererParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.colors)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetRelationshipUpdateRendererParams.colors = jsObject.colors.map(i => buildDotNetMapColor(i));
        }
        dotNetRelationshipUpdateRendererParams.field1 = jsObject.field1;
        dotNetRelationshipUpdateRendererParams.field2 = jsObject.field2;
        if (hasValue(jsObject.renderer)) {
            let { buildDotNetUniqueValueRenderer } = await import('./uniqueValueRenderer');
            dotNetRelationshipUpdateRendererParams.renderer = await buildDotNetUniqueValueRenderer(jsObject.renderer);
        }
        if (hasValue(jsObject.focus)) {
            dotNetRelationshipUpdateRendererParams.focus = jsObject.focus;
        }
        if (hasValue(jsObject.numClasses)) {
            dotNetRelationshipUpdateRendererParams.numClasses = jsObject.numClasses;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRelationshipUpdateRendererParams.id = k;
                break;
            }
        }
    }

    return dotNetRelationshipUpdateRendererParams;
}

