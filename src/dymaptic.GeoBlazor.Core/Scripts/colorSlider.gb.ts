// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import ColorSlider from '@arcgis/core/widgets/smartMapping/ColorSlider';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ColorSliderGenerated implements IPropertyWrapper {
    public component: ColorSlider;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ColorSlider) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async updateFromRendererResult(rendererResult: any,
        histogramResult: any): Promise<void> {
        let { buildJsContinuousRendererResult } = await import('./continuousRendererResult');
        let jsRendererResult = await buildJsContinuousRendererResult(rendererResult, this.layerId, this.viewId) as any;
        this.component.updateFromRendererResult(jsRendererResult,
            histogramResult);
    }

    // region properties
    
    async getViewModel(): Promise<any> {
        if (!hasValue(this.component.viewModel)) {
            return null;
        }
        
        let { buildDotNetColorSliderViewModel } = await import('./colorSliderViewModel');
        return await buildDotNetColorSliderViewModel(this.component.viewModel);
    }
    async setViewModel(value: any): Promise<void> {
        let { buildJsColorSliderViewModel } = await import('./colorSliderViewModel');
        this.component.viewModel = await  buildJsColorSliderViewModel(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsColorSliderGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsColorSlider = new ColorSlider();
    if (hasValue(dotNetObject.inputFormatFunction)) {
        jsColorSlider.inputFormatFunction = dotNetObject.smartMappingSliderBaseLabelFormatter;
    }
    if (hasValue(dotNetObject.inputParseFunction)) {
        jsColorSlider.inputParseFunction = dotNetObject.inputParser;
    }
    if (hasValue(dotNetObject.labelFormatFunction)) {
        jsColorSlider.labelFormatFunction = dotNetObject.smartMappingSliderBaseLabelFormatter;
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsColorSliderViewModel } = await import('./colorSliderViewModel');
        jsColorSlider.viewModel = await buildJsColorSliderViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.handlesSyncedToPrimary)) {
        jsColorSlider.handlesSyncedToPrimary = dotNetObject.handlesSyncedToPrimary;
    }
    if (hasValue(dotNetObject.histogramConfig)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedhistogramConfig } = dotNetObject.histogramConfig;
        jsColorSlider.histogramConfig = sanitizedhistogramConfig;
    }
    if (hasValue(dotNetObject.max)) {
        jsColorSlider.max = dotNetObject.max;
    }
    if (hasValue(dotNetObject.min)) {
        jsColorSlider.min = dotNetObject.min;
    }
    if (hasValue(dotNetObject.precision)) {
        jsColorSlider.precision = dotNetObject.precision;
    }
    if (hasValue(dotNetObject.primaryHandleEnabled)) {
        jsColorSlider.primaryHandleEnabled = dotNetObject.primaryHandleEnabled;
    }
    if (hasValue(dotNetObject.stops)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedstops } = dotNetObject.stops;
        jsColorSlider.stops = sanitizedstops;
    }
    if (hasValue(dotNetObject.syncedSegmentsEnabled)) {
        jsColorSlider.syncedSegmentsEnabled = dotNetObject.syncedSegmentsEnabled;
    }
    if (hasValue(dotNetObject.visibleElements)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedvisibleElements } = dotNetObject.visibleElements;
        jsColorSlider.visibleElements = sanitizedvisibleElements;
    }
    if (hasValue(dotNetObject.zoomOptions)) {
        jsColorSlider.zoomOptions = dotNetObject.zoomOptions;
    }
    jsColorSlider.on('max-change', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsaxChange', evt);
    });
    
    jsColorSlider.on('segment-drag', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsegmentDrag', evt);
    });
    
    jsColorSlider.on('thumb-change', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJshumbChange', evt);
    });
    
    jsColorSlider.on('thumb-drag', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJshumbDrag', evt);
    });
    
    jsColorSlider.on('min-change', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsinChange', evt);
    });
    

    let { default: ColorSliderWrapper } = await import('./colorSlider');
    let colorSliderWrapper = new ColorSliderWrapper(jsColorSlider);
    colorSliderWrapper.geoBlazorId = dotNetObject.id;
    colorSliderWrapper.viewId = viewId;
    colorSliderWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(colorSliderWrapper);
    jsObjectRefs[dotNetObject.id] = colorSliderWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsColorSlider;
    let { buildDotNetColorSlider } = await import('./colorSlider');
    let dnInstantiatedObject = await buildDotNetColorSlider(jsColorSlider);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ColorSlider', e);
    }
    
    return jsColorSlider;
}
export async function buildDotNetColorSliderGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetColorSlider: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.viewModel)) {
            let { buildDotNetColorSliderViewModel } = await import('./colorSliderViewModel');
            dotNetColorSlider.viewModel = await buildDotNetColorSliderViewModel(jsObject.viewModel);
        }
        if (hasValue(jsObject.handlesSyncedToPrimary)) {
            dotNetColorSlider.handlesSyncedToPrimary = jsObject.handlesSyncedToPrimary;
        }
        if (hasValue(jsObject.histogramConfig)) {
            dotNetColorSlider.histogramConfig = jsObject.histogramConfig;
        }
        if (hasValue(jsObject.inputFormatFunction)) {
            dotNetColorSlider.inputFormatFunction = jsObject.inputFormatFunction;
        }
        if (hasValue(jsObject.inputParseFunction)) {
            dotNetColorSlider.inputParseFunction = jsObject.inputParseFunction;
        }
        if (hasValue(jsObject.labelFormatFunction)) {
            dotNetColorSlider.labelFormatFunction = jsObject.labelFormatFunction;
        }
        if (hasValue(jsObject.max)) {
            dotNetColorSlider.max = jsObject.max;
        }
        if (hasValue(jsObject.min)) {
            dotNetColorSlider.min = jsObject.min;
        }
        if (hasValue(jsObject.precision)) {
            dotNetColorSlider.precision = jsObject.precision;
        }
        if (hasValue(jsObject.primaryHandleEnabled)) {
            dotNetColorSlider.primaryHandleEnabled = jsObject.primaryHandleEnabled;
        }
        if (hasValue(jsObject.state)) {
            dotNetColorSlider.state = jsObject.state;
        }
        if (hasValue(jsObject.stops)) {
            dotNetColorSlider.stops = jsObject.stops;
        }
        if (hasValue(jsObject.syncedSegmentsEnabled)) {
            dotNetColorSlider.syncedSegmentsEnabled = jsObject.syncedSegmentsEnabled;
        }
        if (hasValue(jsObject.type)) {
            dotNetColorSlider.type = jsObject.type;
        }
        if (hasValue(jsObject.visibleElements)) {
            dotNetColorSlider.visibleElements = jsObject.visibleElements;
        }
        if (hasValue(jsObject.zoomOptions)) {
            dotNetColorSlider.zoomOptions = jsObject.zoomOptions;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetColorSlider.id = k;
                break;
            }
        }
    }

    return dotNetColorSlider;
}

