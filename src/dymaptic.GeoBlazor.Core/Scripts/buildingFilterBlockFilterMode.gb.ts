// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetBuildingFilterBlockFilterMode } from './buildingFilterBlockFilterMode';

export async function buildJsBuildingFilterBlockFilterModeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsBuildingFilterBlockFilterMode: any = {};
    if (hasValue(dotNetObject.edges)) {
        let { buildJsIBuildingFilterBlockFilterModeEdges } = await import('./iBuildingFilterBlockFilterModeEdges');
        jsBuildingFilterBlockFilterMode.edges = buildJsIBuildingFilterBlockFilterModeEdges(dotNetObject.edges) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsBuildingFilterBlockFilterMode);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsBuildingFilterBlockFilterMode;
    
    return jsBuildingFilterBlockFilterMode;
}


export async function buildDotNetBuildingFilterBlockFilterModeGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBuildingFilterBlockFilterMode: any = {};
    
    if (hasValue(jsObject.edges)) {
        let { buildDotNetIBuildingFilterBlockFilterModeEdges } = await import('./iBuildingFilterBlockFilterModeEdges');
        dotNetBuildingFilterBlockFilterMode.edges = buildDotNetIBuildingFilterBlockFilterModeEdges(jsObject.edges);
    }
    
    if (hasValue(jsObject.type)) {
        dotNetBuildingFilterBlockFilterMode.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetBuildingFilterBlockFilterMode.id = geoBlazorId;
    }

    return dotNetBuildingFilterBlockFilterMode;
}

