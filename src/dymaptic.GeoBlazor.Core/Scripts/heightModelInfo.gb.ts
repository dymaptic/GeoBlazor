// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import HeightModelInfo from '@arcgis/core/geometry/HeightModelInfo';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetHeightModelInfo } from './heightModelInfo';

export async function buildJsHeightModelInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    let jsHeightModelInfo = new HeightModelInfo(properties);
    
    jsObjectRefs[dotNetObject.id] = jsHeightModelInfo;
    arcGisObjectRefs[dotNetObject.id] = jsHeightModelInfo;
    
    return jsHeightModelInfo;
}


export async function buildDotNetHeightModelInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetHeightModelInfo: any = {};
    
    if (hasValue(jsObject.heightModel)) {
        dotNetHeightModelInfo.heightModel = removeCircularReferences(jsObject.heightModel);
    }
    
    if (hasValue(jsObject.heightUnit)) {
        dotNetHeightModelInfo.heightUnit = removeCircularReferences(jsObject.heightUnit);
    }
    
    if (hasValue(jsObject.vertCRS)) {
        dotNetHeightModelInfo.vertCRS = jsObject.vertCRS;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetHeightModelInfo.id = geoBlazorId;
    }

    return dotNetHeightModelInfo;
}

