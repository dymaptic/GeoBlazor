// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetSearchResultsSuggestions } from './searchResultsSuggestions';

export async function buildJsSearchResultsSuggestionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsSearchResultsSuggestions: any = {};
    if (hasValue(dotNetObject.source)) {
        let { buildJsSearchSource } = await import('./searchSource');
        jsSearchResultsSuggestions.source = await buildJsSearchSource(dotNetObject.source, viewId) as any;
    }

    if (hasValue(dotNetObject.error)) {
        jsSearchResultsSuggestions.error = dotNetObject.error;
    }
    if (hasValue(dotNetObject.results) && dotNetObject.results.length > 0) {
        jsSearchResultsSuggestions.results = dotNetObject.results;
    }
    if (hasValue(dotNetObject.sourceIndex)) {
        jsSearchResultsSuggestions.sourceIndex = dotNetObject.sourceIndex;
    }
    
    jsObjectRefs[dotNetObject.id] = jsSearchResultsSuggestions;
    arcGisObjectRefs[dotNetObject.id] = jsSearchResultsSuggestions;
    
    return jsSearchResultsSuggestions;
}


export async function buildDotNetSearchResultsSuggestionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchResultsSuggestions: any = {};
    
    if (hasValue(jsObject.source)) {
        let { buildDotNetSearchSource } = await import('./searchSource');
        dotNetSearchResultsSuggestions.source = await buildDotNetSearchSource(jsObject.source);
    }
    
    if (hasValue(jsObject.error)) {
        dotNetSearchResultsSuggestions.error = removeCircularReferences(jsObject.error);
    }
    
    if (hasValue(jsObject.results)) {
        dotNetSearchResultsSuggestions.results = removeCircularReferences(jsObject.results);
    }
    
    if (hasValue(jsObject.sourceIndex)) {
        dotNetSearchResultsSuggestions.sourceIndex = jsObject.sourceIndex;
    }
    

    return dotNetSearchResultsSuggestions;
}

