import { buildDotNetVideoView } from './videoView';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import VideoView = __esri.VideoView;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsVideoViewGenerated(dotNetObject: any): Promise<any> {
    let jsVideoView: any = {}
    if (hasValue(dotNetObject.layer)) {
        let { buildJsVideoLayer } = await import('./videoLayer');
        jsVideoView.layer = await buildJsVideoLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.container)) {
        jsVideoView.container = dotNetObject.container;
    }
    if (hasValue(dotNetObject.focused)) {
        jsVideoView.focused = dotNetObject.focused;
    }
    if (hasValue(dotNetObject.height)) {
        jsVideoView.height = dotNetObject.height;
    }
    if (hasValue(dotNetObject.ready)) {
        jsVideoView.ready = dotNetObject.ready;
    }
    if (hasValue(dotNetObject.resizing)) {
        jsVideoView.resizing = dotNetObject.resizing;
    }
    if (hasValue(dotNetObject.videoHeight)) {
        jsVideoView.videoHeight = dotNetObject.videoHeight;
    }
    if (hasValue(dotNetObject.videoWidth)) {
        jsVideoView.videoWidth = dotNetObject.videoWidth;
    }
    if (hasValue(dotNetObject.width)) {
        jsVideoView.width = dotNetObject.width;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsVideoView);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsVideoView;
    
    let dnInstantiatedObject = await buildDotNetVideoView(jsVideoView);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for VideoView', e);
    }
    
    return jsVideoView;
}
export async function buildDotNetVideoViewGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVideoView: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.container)) {
            dotNetVideoView.container = jsObject.container;
        }
        if (hasValue(jsObject.focused)) {
            dotNetVideoView.focused = jsObject.focused;
        }
        if (hasValue(jsObject.height)) {
            dotNetVideoView.height = jsObject.height;
        }
        if (hasValue(jsObject.ready)) {
            dotNetVideoView.ready = jsObject.ready;
        }
        if (hasValue(jsObject.resizing)) {
            dotNetVideoView.resizing = jsObject.resizing;
        }
        if (hasValue(jsObject.videoHeight)) {
            dotNetVideoView.videoHeight = jsObject.videoHeight;
        }
        if (hasValue(jsObject.videoWidth)) {
            dotNetVideoView.videoWidth = jsObject.videoWidth;
        }
        if (hasValue(jsObject.width)) {
            dotNetVideoView.width = jsObject.width;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetVideoView.id = k;
                break;
            }
        }
    }

    return dotNetVideoView;
}

