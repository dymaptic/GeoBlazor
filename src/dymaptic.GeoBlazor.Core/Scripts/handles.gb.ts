// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Handles from '@arcgis/core/core/Handles';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class HandlesGenerated implements IPropertyWrapper {
    public component: Handles;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: Handles) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async add(handles: any,
        groupKey: any): Promise<void> {
        let { buildJsWatchHandle } = await import('./watchHandle');
        let jsHandles = await buildJsWatchHandle(handles, this.layerId, this.viewId) as any;
        this.component.add(jsHandles,
            groupKey);
    }

    async has(groupKey: any): Promise<any> {
        return this.component.has(groupKey);
    }

    async remove(groupKey: any): Promise<void> {
        this.component.remove(groupKey);
    }

    async removeAll(): Promise<void> {
        this.component.removeAll();
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsHandlesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsHandles = new Handles();


    let { default: HandlesWrapper } = await import('./handles');
    let handlesWrapper = new HandlesWrapper(jsHandles);
    handlesWrapper.geoBlazorId = dotNetObject.id;
    handlesWrapper.viewId = viewId;
    handlesWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(handlesWrapper);
    jsObjectRefs[dotNetObject.id] = handlesWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsHandles;
    let { buildDotNetHandles } = await import('./handles');
    let dnInstantiatedObject = await buildDotNetHandles(jsHandles);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Handles', e);
    }
    
    return jsHandles;
}

export async function buildDotNetHandlesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetHandles: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetHandles.id = k;
                break;
            }
        }
    }

    return dotNetHandles;
}

