// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import sizeRange from '@arcgis/core/smartMapping/heuristics/sizeRange';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SizeRangeGenerated implements IPropertyWrapper {
    public component: sizeRange;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: sizeRange) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async sizeRange(parameters: any): Promise<any> {
        let { buildJsSizeRangeSizeRangeParams } = await import('./sizeRangeSizeRangeParams');
        let jsparameters = await buildJsSizeRangeSizeRangeParams(parameters, this.layerId, this.viewId) as any;
        return await this.component.sizeRange(jsparameters);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsSizeRangeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jssizeRange = new sizeRange();


    let { default: SizeRangeWrapper } = await import('./sizeRange');
    let sizeRangeWrapper = new SizeRangeWrapper(jssizeRange);
    sizeRangeWrapper.geoBlazorId = dotNetObject.id;
    sizeRangeWrapper.viewId = viewId;
    sizeRangeWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(sizeRangeWrapper);
    jsObjectRefs[dotNetObject.id] = sizeRangeWrapper;
    arcGisObjectRefs[dotNetObject.id] = jssizeRange;
    let { buildDotNetSizeRange } = await import('./sizeRange');
    let dnInstantiatedObject = await buildDotNetSizeRange(jssizeRange);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SizeRange', e);
    }
    
    return jssizeRange;
}

export async function buildDotNetSizeRangeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSizeRange: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSizeRange.id = k;
                break;
            }
        }
    }

    return dotNetSizeRange;
}

