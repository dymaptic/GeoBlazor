// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import voxelVoxelVolumeStyle from '@arcgis/core/layers/voxel/VoxelVolumeStyle';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetVoxelVoxelVolumeStyle } from './voxelVoxelVolumeStyle';

export async function buildJsVoxelVoxelVolumeStyleGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.dynamicSections) && dotNetObject.dynamicSections.length > 0) {
        let { buildJsVoxelDynamicSection } = await import('./voxelDynamicSection');
        properties.dynamicSections = await Promise.all(dotNetObject.dynamicSections.map(async i => await buildJsVoxelDynamicSection(i))) as any;
    }
    if (hasValue(dotNetObject.slices) && dotNetObject.slices.length > 0) {
        let { buildJsVoxelSlice } = await import('./voxelSlice');
        properties.slices = await Promise.all(dotNetObject.slices.map(async i => await buildJsVoxelSlice(i))) as any;
    }

    if (hasValue(dotNetObject.verticalExaggeration)) {
        properties.verticalExaggeration = dotNetObject.verticalExaggeration;
    }
    if (hasValue(dotNetObject.verticalOffset)) {
        properties.verticalOffset = dotNetObject.verticalOffset;
    }
    let jsvoxelVoxelVolumeStyle = new voxelVoxelVolumeStyle(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsvoxelVoxelVolumeStyle);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsvoxelVoxelVolumeStyle;
    
    try {
        let { buildDotNetVoxelVoxelVolumeStyle } = await import('./voxelVoxelVolumeStyle');
        let dnInstantiatedObject = await buildDotNetVoxelVoxelVolumeStyle(jsvoxelVoxelVolumeStyle, layerId, viewId);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type VoxelVoxelVolumeStyle detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for VoxelVoxelVolumeStyle', e);
    }
    
    return jsvoxelVoxelVolumeStyle;
}


export async function buildDotNetVoxelVoxelVolumeStyleGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVoxelVoxelVolumeStyle: any = {};
    
    if (hasValue(jsObject.dynamicSections)) {
        let { buildDotNetVoxelDynamicSection } = await import('./voxelDynamicSection');
        dotNetVoxelVoxelVolumeStyle.dynamicSections = await Promise.all(jsObject.dynamicSections.map(async i => await buildDotNetVoxelDynamicSection(i)));
    }
    
    if (hasValue(jsObject.slices)) {
        let { buildDotNetVoxelSlice } = await import('./voxelSlice');
        dotNetVoxelVoxelVolumeStyle.slices = await Promise.all(jsObject.slices.map(async i => await buildDotNetVoxelSlice(i)));
    }
    
    if (hasValue(jsObject.verticalExaggeration)) {
        dotNetVoxelVoxelVolumeStyle.verticalExaggeration = jsObject.verticalExaggeration;
    }
    
    if (hasValue(jsObject.verticalOffset)) {
        dotNetVoxelVoxelVolumeStyle.verticalOffset = jsObject.verticalOffset;
    }
    
    if (hasValue(jsObject.volumeId)) {
        dotNetVoxelVoxelVolumeStyle.volumeId = jsObject.volumeId;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetVoxelVoxelVolumeStyle.id = geoBlazorId;
    }

    return dotNetVoxelVoxelVolumeStyle;
}

