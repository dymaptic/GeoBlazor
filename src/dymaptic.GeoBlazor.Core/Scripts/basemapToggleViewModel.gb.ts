// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import BasemapToggleViewModel from '@arcgis/core/widgets/BasemapToggle/BasemapToggleViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class BasemapToggleViewModelGenerated implements IPropertyWrapper {
    public component: BasemapToggleViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: BasemapToggleViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.nextBasemap)) {
            let { buildJsBasemap } = await import('./basemap');
            this.component.nextBasemap = await buildJsBasemap(dotNetObject.nextBasemap, this.layerId, this.viewId) as any;
        }

    }
    
    async getThumbnailUrl(basemap: any): Promise<any> {
        let { buildJsBasemap } = await import('./basemap');
        let jsBasemap = await buildJsBasemap(basemap, this.layerId, this.viewId) as any;
        return this.component.getThumbnailUrl(jsBasemap);
    }

    async toggle(): Promise<any> {
        return await this.component.toggle();
    }

    // region properties
    
    async getActiveBasemap(): Promise<any> {
        if (!hasValue(this.component.activeBasemap)) {
            return null;
        }
        
        let { buildDotNetBasemap } = await import('./basemap');
        return await buildDotNetBasemap(this.component.activeBasemap, this.layerId, this.viewId);
    }
    
    async getNextBasemap(): Promise<any> {
        if (!hasValue(this.component.nextBasemap)) {
            return null;
        }
        
        let { buildDotNetBasemap } = await import('./basemap');
        return await buildDotNetBasemap(this.component.nextBasemap, this.layerId, this.viewId);
    }
    
    async setNextBasemap(value: any): Promise<void> {
        let { buildJsBasemap } = await import('./basemap');
        this.component.nextBasemap = await  buildJsBasemap(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsBasemapToggleViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.nextBasemap)) {
        let { buildJsBasemap } = await import('./basemap');
        properties.nextBasemap = await buildJsBasemap(dotNetObject.nextBasemap, layerId, viewId) as any;
    }

    let jsBasemapToggleViewModel = new BasemapToggleViewModel(properties);

    let { default: BasemapToggleViewModelWrapper } = await import('./basemapToggleViewModel');
    let basemapToggleViewModelWrapper = new BasemapToggleViewModelWrapper(jsBasemapToggleViewModel);
    basemapToggleViewModelWrapper.geoBlazorId = dotNetObject.id;
    basemapToggleViewModelWrapper.viewId = viewId;
    basemapToggleViewModelWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(basemapToggleViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = basemapToggleViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsBasemapToggleViewModel;
    
    let { buildDotNetBasemapToggleViewModel } = await import('./basemapToggleViewModel');
    let dnInstantiatedObject = await buildDotNetBasemapToggleViewModel(jsBasemapToggleViewModel, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type BasemapToggleViewModel detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BasemapToggleViewModel', e);
    }
    
    return jsBasemapToggleViewModel;
}


export async function buildDotNetBasemapToggleViewModelGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBasemapToggleViewModel: any = {};
    
    if (hasValue(jsObject.state)) {
        dotNetBasemapToggleViewModel.state = jsObject.state;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetBasemapToggleViewModel.id = geoBlazorId;
    }

    return dotNetBasemapToggleViewModel;
}

