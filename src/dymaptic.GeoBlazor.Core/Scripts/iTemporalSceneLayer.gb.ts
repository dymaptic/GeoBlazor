// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetITemporalSceneLayer } from './iTemporalSceneLayer';

export async function buildJsITemporalSceneLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTemporalSceneLayer: any = {};
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        jsTemporalSceneLayer.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.timeInfo)) {
        let { buildJsTimeInfo } = await import('./timeInfo');
        jsTemporalSceneLayer.timeInfo = await buildJsTimeInfo(dotNetObject.timeInfo, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.timeOffset)) {
        const { id, dotNetComponentReference, ...sanitizedTimeOffset } = dotNetObject.timeOffset;
        jsTemporalSceneLayer.timeOffset = sanitizedTimeOffset;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsTemporalSceneLayer);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTemporalSceneLayer;
    
    let dnInstantiatedObject = await buildDotNetITemporalSceneLayer(jsTemporalSceneLayer);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ITemporalSceneLayer', e);
    }
    
    return jsTemporalSceneLayer;
}

export async function buildDotNetITemporalSceneLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetITemporalSceneLayer: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.timeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetITemporalSceneLayer.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
    }
    if (hasValue(jsObject.timeInfo)) {
        let { buildDotNetTimeInfo } = await import('./timeInfo');
        dotNetITemporalSceneLayer.timeInfo = await buildDotNetTimeInfo(jsObject.timeInfo);
    }
    if (hasValue(jsObject.timeOffset)) {
        dotNetITemporalSceneLayer.timeOffset = jsObject.timeOffset;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetITemporalSceneLayer.id = k;
                break;
            }
        }
    }

    return dotNetITemporalSceneLayer;
}

