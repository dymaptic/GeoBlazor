// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, buildJsStreamReference } from './arcGisJsInterop';
import { buildDotNetITemporalSceneLayer } from './iTemporalSceneLayer';

export async function buildJsITemporalSceneLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsTemporalSceneLayer: any = {};
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        jsTemporalSceneLayer.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent, viewId) as any;
    }
    if (hasValue(dotNetObject.timeInfo)) {
        let { buildJsTimeInfo } = await import('./timeInfo');
        jsTemporalSceneLayer.timeInfo = await buildJsTimeInfo(dotNetObject.timeInfo, viewId) as any;
    }
    if (hasValue(dotNetObject.timeOffset)) {
        let { buildJsTimeInterval } = await import('./timeInterval');
        jsTemporalSceneLayer.timeOffset = await buildJsTimeInterval(dotNetObject.timeOffset) as any;
    }

    
    jsObjectRefs[dotNetObject.id] = jsTemporalSceneLayer;
    arcGisObjectRefs[dotNetObject.id] = jsTemporalSceneLayer;
    
    try {
        let jsObjectRef = DotNet.createJSObjectReference(jsTemporalSceneLayer);
        let { buildDotNetITemporalSceneLayer } = await import('./iTemporalSceneLayer');
        let dnInstantiatedObject = await buildDotNetITemporalSceneLayer(jsTemporalSceneLayer, layerId, viewId);

        let dnStream = buildJsStreamReference(dnInstantiatedObject);
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, dnStream);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ITemporalSceneLayer', e);
    }
    
    return jsTemporalSceneLayer;
}


export async function buildDotNetITemporalSceneLayerGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetITemporalSceneLayer: any = {};
    
    if (hasValue(jsObject.timeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetITemporalSceneLayer.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent, viewId);
    }
    
    if (hasValue(jsObject.timeInfo)) {
        let { buildDotNetTimeInfo } = await import('./timeInfo');
        dotNetITemporalSceneLayer.timeInfo = await buildDotNetTimeInfo(jsObject.timeInfo, viewId);
    }
    
    if (hasValue(jsObject.timeOffset)) {
        let { buildDotNetTimeInterval } = await import('./timeInterval');
        dotNetITemporalSceneLayer.timeOffset = await buildDotNetTimeInterval(jsObject.timeOffset, viewId);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetITemporalSceneLayer.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetITemporalSceneLayer.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetITemporalSceneLayer.id)) {
        jsObjectRefs[dotNetITemporalSceneLayer.id] ??= jsObject;
        arcGisObjectRefs[dotNetITemporalSceneLayer.id] ??= jsObject;
    }

    return dotNetITemporalSceneLayer;
}

