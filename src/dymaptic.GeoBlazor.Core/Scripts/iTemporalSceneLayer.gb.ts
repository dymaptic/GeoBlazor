// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetITemporalSceneLayer } from './iTemporalSceneLayer';

export async function buildJsITemporalSceneLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTemporalSceneLayer: any = {};
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        jsTemporalSceneLayer.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.timeInfo)) {
        let { buildJsTimeInfo } = await import('./timeInfo');
        jsTemporalSceneLayer.timeInfo = await buildJsTimeInfo(dotNetObject.timeInfo, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.timeOffset)) {
        let { buildJsTimeInterval } = await import('./timeInterval');
        jsTemporalSceneLayer.timeOffset = await buildJsTimeInterval(dotNetObject.timeOffset, layerId, viewId) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsTemporalSceneLayer);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTemporalSceneLayer;
    
    let { buildDotNetITemporalSceneLayer } = await import('./iTemporalSceneLayer');
    let dnInstantiatedObject = await buildDotNetITemporalSceneLayer(jsTemporalSceneLayer);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type ITemporalSceneLayer detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ITemporalSceneLayer', e);
    }
    
    return jsTemporalSceneLayer;
}


export async function buildDotNetITemporalSceneLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetITemporalSceneLayer: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.timeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetITemporalSceneLayer.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
    }
    if (hasValue(jsObject.timeInfo)) {
        let { buildDotNetTimeInfo } = await import('./timeInfo');
        dotNetITemporalSceneLayer.timeInfo = await buildDotNetTimeInfo(jsObject.timeInfo);
    }
    if (hasValue(jsObject.timeOffset)) {
        let { buildDotNetTimeInterval } = await import('./timeInterval');
        dotNetITemporalSceneLayer.timeOffset = await buildDotNetTimeInterval(jsObject.timeOffset);
    }

    dotNetITemporalSceneLayer.id = lookupGeoBlazorId(jsObject);

    return dotNetITemporalSceneLayer;
}

