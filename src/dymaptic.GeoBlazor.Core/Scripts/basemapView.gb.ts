import { buildDotNetBasemapView } from './basemapView';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import BasemapView = __esri.BasemapView;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsBasemapViewGenerated(dotNetObject: any): Promise<any> {
    let jsBasemapView = new BasemapView();

    if (hasValue(dotNetObject.view)) {
        jsBasemapView.view = dotNetObject.view;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsBasemapView);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsBasemapView;
    
    let dnInstantiatedObject = await buildDotNetBasemapView(jsBasemapView);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BasemapView', e);
    }
    
    return jsBasemapView;
}
export async function buildDotNetBasemapViewGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBasemapView: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.baseLayerViews)) {
            let { buildDotNetLayerView } = await import('./layerView');
            dotNetBasemapView.baseLayerViews = await Promise.all(jsObject.baseLayerViews.map(async i => await buildDotNetLayerView(i)));
        }
        if (hasValue(jsObject.referenceLayerViews)) {
            let { buildDotNetLayerView } = await import('./layerView');
            dotNetBasemapView.referenceLayerViews = await Promise.all(jsObject.referenceLayerViews.map(async i => await buildDotNetLayerView(i)));
        }
        if (hasValue(jsObject.updating)) {
            dotNetBasemapView.updating = jsObject.updating;
        }
        if (hasValue(jsObject.view)) {
            dotNetBasemapView.view = jsObject.view;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetBasemapView.id = k;
                break;
            }
        }
    }

    return dotNetBasemapView;
}

