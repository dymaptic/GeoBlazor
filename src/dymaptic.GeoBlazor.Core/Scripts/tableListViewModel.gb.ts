// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import TableListViewModel from '@arcgis/core/widgets/TableList/TableListViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetTableListViewModel } from './tableListViewModel';

export async function buildJsTableListViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTableListViewModel = new TableListViewModel();
    if (hasValue(dotNetObject.hasListItemCreatedFunction) && dotNetObject.hasListItemCreatedFunction) {
        jsTableListViewModel.listItemCreatedFunction = (event) => {
            dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsListItemCreatedFunction', event);
        };
    }

    if (hasValue(dotNetObject.checkPublishStatusEnabled)) {
        jsTableListViewModel.checkPublishStatusEnabled = dotNetObject.checkPublishStatusEnabled;
    }
    if (hasValue(dotNetObject.listModeDisabled)) {
        jsTableListViewModel.listModeDisabled = dotNetObject.listModeDisabled;
    }
    if (hasValue(dotNetObject.map)) {
        jsTableListViewModel.map = dotNetObject.map;
    }
    jsTableListViewModel.on('trigger-action', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsTriggerAction', evt);
    });
    
    
        let jsObjectRef = DotNet.createJSObjectReference(jsTableListViewModel);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTableListViewModel;
    
    let dnInstantiatedObject = await buildDotNetTableListViewModel(jsTableListViewModel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TableListViewModel', e);
    }
    
    return jsTableListViewModel;
}

export async function buildDotNetTableListViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTableListViewModel: any = {
                jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.tableItems)) {
            let { buildDotNetTableListListItem } = await import('./tableListListItem');
            dotNetTableListViewModel.tableItems = await Promise.all(jsObject.tableItems.map(async i => await buildDotNetTableListListItem(i)));
        }
    if (hasValue(jsObject.checkPublishStatusEnabled)) {
        dotNetTableListViewModel.checkPublishStatusEnabled = jsObject.checkPublishStatusEnabled;
    }
    if (hasValue(jsObject.listItemCreatedFunction)) {
        dotNetTableListViewModel.listItemCreatedFunction = jsObject.listItemCreatedFunction;
    }
    if (hasValue(jsObject.listModeDisabled)) {
        dotNetTableListViewModel.listModeDisabled = jsObject.listModeDisabled;
    }
    if (hasValue(jsObject.map)) {
        dotNetTableListViewModel.map = jsObject.map;
    }
    if (hasValue(jsObject.state)) {
        dotNetTableListViewModel.state = jsObject.state;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTableListViewModel.id = k;
                break;
            }
        }
    }

    return dotNetTableListViewModel;
}

