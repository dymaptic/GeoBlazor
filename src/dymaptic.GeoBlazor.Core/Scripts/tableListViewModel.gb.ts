// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import TableListViewModel from '@arcgis/core/widgets/TableList/TableListViewModel';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class TableListViewModelGenerated implements IPropertyWrapper {
    public component: TableListViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: TableListViewModel) {
        this.component = component;
    }

    // region methods

    unwrap() {
        return this.component;
    }

    async triggerAction(action: any,
                        item: any): Promise<void> {
        this.component.triggerAction(action,
            item);
    }

    // region properties

    getProperty(prop: string): any {
        return this.component[prop];
    }

    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsTableListViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTableListViewModel = new TableListViewModel();

    if (hasValue(dotNetObject.checkPublishStatusEnabled)) {
        jsTableListViewModel.checkPublishStatusEnabled = dotNetObject.checkPublishStatusEnabled;
    }
    if (hasValue(dotNetObject.listItemCreatedFunction)) {
        jsTableListViewModel.listItemCreatedFunction = dotNetObject.listItemCreatedFunction;
    }
    if (hasValue(dotNetObject.listModeDisabled)) {
        jsTableListViewModel.listModeDisabled = dotNetObject.listModeDisabled;
    }
    if (hasValue(dotNetObject.map)) {
        jsTableListViewModel.map = dotNetObject.map;
    }
    jsTableListViewModel.on('trigger-action', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsTriggerAction', evt);
    });

    let {default: TableListViewModelWrapper} = await import('./tableListViewModel');
    let tableListViewModelWrapper = new TableListViewModelWrapper(jsTableListViewModel);
    tableListViewModelWrapper.geoBlazorId = dotNetObject.id;
    tableListViewModelWrapper.viewId = viewId;
    tableListViewModelWrapper.layerId = layerId;

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(tableListViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = tableListViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsTableListViewModel;

    let dnInstantiatedObject = await buildDotNetTableListViewModel(jsTableListViewModel, layerId, viewId);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TableListViewModel', e);
    }

    return jsTableListViewModel;
}

export async function buildDotNetTableListViewModelGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetTableListViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.checkPublishStatusEnabled)) {
        dotNetTableListViewModel.checkPublishStatusEnabled = jsObject.checkPublishStatusEnabled;
    }
    if (hasValue(jsObject.listItemCreatedFunction)) {
        dotNetTableListViewModel.listItemCreatedFunction = jsObject.listItemCreatedFunction;
    }
    if (hasValue(jsObject.listModeDisabled)) {
        dotNetTableListViewModel.listModeDisabled = jsObject.listModeDisabled;
    }
    if (hasValue(jsObject.map)) {
        dotNetTableListViewModel.map = jsObject.map;
    }
    if (hasValue(jsObject.state)) {
        dotNetTableListViewModel.state = jsObject.state;
    }
    if (hasValue(jsObject.tableItems)) {
        dotNetTableListViewModel.tableItems = jsObject.tableItems;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTableListViewModel.id = k;
                break;
            }
        }
    }

    return dotNetTableListViewModel;
}

