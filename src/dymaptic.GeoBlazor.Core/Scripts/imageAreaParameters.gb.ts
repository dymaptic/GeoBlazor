// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageAreaParameters from '@arcgis/core/rest/support/ImageAreaParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetImageAreaParameters } from './imageAreaParameters';

export async function buildJsImageAreaParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsImageAreaParameters = new ImageAreaParameters();
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsGeometry } = await import('./geometry');
        jsImageAreaParameters.geometry = buildJsGeometry(dotNetObject.geometry) as any;
    }
    if (hasValue(dotNetObject.mosaicRule)) {
        let { buildJsMosaicRule } = await import('./mosaicRule');
        jsImageAreaParameters.mosaicRule = await buildJsMosaicRule(dotNetObject.mosaicRule, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.areaUnit)) {
        jsImageAreaParameters.areaUnit = dotNetObject.areaUnit;
    }
    if (hasValue(dotNetObject.is3D)) {
        jsImageAreaParameters.is3D = dotNetObject.is3D;
    }
    if (hasValue(dotNetObject.linearUnit)) {
        jsImageAreaParameters.linearUnit = dotNetObject.linearUnit;
    }
    if (hasValue(dotNetObject.pixelSize)) {
        jsImageAreaParameters.pixelSize = dotNetObject.pixelSize;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsImageAreaParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageAreaParameters;
    
    let dnInstantiatedObject = await buildDotNetImageAreaParameters(jsImageAreaParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImageAreaParameters', e);
    }
    
    return jsImageAreaParameters;
}

export async function buildDotNetImageAreaParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageAreaParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.geometry)) {
            let { buildDotNetGeometry } = await import('./geometry');
            dotNetImageAreaParameters.geometry = buildDotNetGeometry(jsObject.geometry);
        }
        if (hasValue(jsObject.mosaicRule)) {
            let { buildDotNetMosaicRule } = await import('./mosaicRule');
            dotNetImageAreaParameters.mosaicRule = await buildDotNetMosaicRule(jsObject.mosaicRule);
        }
        if (hasValue(jsObject.areaUnit)) {
            dotNetImageAreaParameters.areaUnit = jsObject.areaUnit;
        }
        if (hasValue(jsObject.is3D)) {
            dotNetImageAreaParameters.is3D = jsObject.is3D;
        }
        if (hasValue(jsObject.linearUnit)) {
            dotNetImageAreaParameters.linearUnit = jsObject.linearUnit;
        }
        if (hasValue(jsObject.pixelSize)) {
            dotNetImageAreaParameters.pixelSize = jsObject.pixelSize;
        }
        if (hasValue(jsObject.type)) {
            dotNetImageAreaParameters.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImageAreaParameters.id = k;
                break;
            }
        }
    }

    return dotNetImageAreaParameters;
}

