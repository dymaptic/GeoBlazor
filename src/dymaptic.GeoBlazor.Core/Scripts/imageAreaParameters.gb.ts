// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageAreaParameters from '@arcgis/core/rest/support/ImageAreaParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetImageAreaParameters } from './imageAreaParameters';

export async function buildJsImageAreaParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsGeometry } = await import('./geometry');
        properties.geometry = buildJsGeometry(dotNetObject.geometry) as any;
    }
    if (hasValue(dotNetObject.mosaicRule)) {
        let { buildJsMosaicRule } = await import('./mosaicRule');
        properties.mosaicRule = await buildJsMosaicRule(dotNetObject.mosaicRule, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.areaUnit)) {
        properties.areaUnit = dotNetObject.areaUnit;
    }
    if (hasValue(dotNetObject.is3D)) {
        properties.is3D = dotNetObject.is3D;
    }
    if (hasValue(dotNetObject.linearUnit)) {
        properties.linearUnit = dotNetObject.linearUnit;
    }
    if (hasValue(dotNetObject.pixelSize)) {
        properties.pixelSize = dotNetObject.pixelSize;
    }
    let jsImageAreaParameters = new ImageAreaParameters(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsImageAreaParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageAreaParameters;
    
    return jsImageAreaParameters;
}


export async function buildDotNetImageAreaParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageAreaParameters: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.geometry)) {
        let { buildDotNetGeometry } = await import('./geometry');
        dotNetImageAreaParameters.geometry = buildDotNetGeometry(jsObject.geometry);
    }
    if (hasValue(jsObject.mosaicRule)) {
        let { buildDotNetMosaicRule } = await import('./mosaicRule');
        dotNetImageAreaParameters.mosaicRule = await buildDotNetMosaicRule(jsObject.mosaicRule);
    }
    if (hasValue(jsObject.areaUnit)) {
        dotNetImageAreaParameters.areaUnit = jsObject.areaUnit;
    }
    if (hasValue(jsObject.is3D)) {
        dotNetImageAreaParameters.is3D = jsObject.is3D;
    }
    if (hasValue(jsObject.linearUnit)) {
        dotNetImageAreaParameters.linearUnit = jsObject.linearUnit;
    }
    if (hasValue(jsObject.pixelSize)) {
        dotNetImageAreaParameters.pixelSize = jsObject.pixelSize;
    }
    if (hasValue(jsObject.type)) {
        dotNetImageAreaParameters.type = jsObject.type;
    }

    return dotNetImageAreaParameters;
}

