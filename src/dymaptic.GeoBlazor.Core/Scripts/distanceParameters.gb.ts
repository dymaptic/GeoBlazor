import {buildDotNetDistanceParameters} from './distanceParameters';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import DistanceParameters from '@arcgis/core/rest/support/DistanceParameters';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsDistanceParametersGenerated(dotNetObject: any): Promise<any> {
    let jsDistanceParameters = new DistanceParameters();
    if (hasValue(dotNetObject.geometry1)) {
        let {buildJsGeometry} = await import('./geometry');
        jsDistanceParameters.geometry1 = buildJsGeometry(dotNetObject.geometry1) as any;
    }
    if (hasValue(dotNetObject.geometry2)) {
        let {buildJsGeometry} = await import('./geometry');
        jsDistanceParameters.geometry2 = buildJsGeometry(dotNetObject.geometry2) as any;
    }

    if (hasValue(dotNetObject.distanceUnit)) {
        jsDistanceParameters.distanceUnit = dotNetObject.distanceUnit;
    }
    if (hasValue(dotNetObject.geodesic)) {
        jsDistanceParameters.geodesic = dotNetObject.geodesic;
    }

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsDistanceParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsDistanceParameters;

    let dnInstantiatedObject = await buildDotNetDistanceParameters(jsDistanceParameters);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DistanceParameters', e);
    }

    return jsDistanceParameters;
}

export async function buildDotNetDistanceParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetDistanceParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.geometry1)) {
        let {buildDotNetGeometry} = await import('./geometry');
        dotNetDistanceParameters.geometry1 = buildDotNetGeometry(jsObject.geometry1);
    }
    if (hasValue(jsObject.geometry2)) {
        let {buildDotNetGeometry} = await import('./geometry');
        dotNetDistanceParameters.geometry2 = buildDotNetGeometry(jsObject.geometry2);
    }
    if (hasValue(jsObject.distanceUnit)) {
        dotNetDistanceParameters.distanceUnit = jsObject.distanceUnit;
    }
    if (hasValue(jsObject.geodesic)) {
        dotNetDistanceParameters.geodesic = jsObject.geodesic;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetDistanceParameters.id = k;
                break;
            }
        }
    }

    return dotNetDistanceParameters;
}

