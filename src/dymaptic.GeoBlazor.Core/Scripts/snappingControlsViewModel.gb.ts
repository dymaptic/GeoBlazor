import {buildDotNetSnappingControlsViewModel} from './snappingControlsViewModel';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import SnappingControlsViewModel from '@arcgis/core/widgets/support/SnappingControls/SnappingControlsViewModel';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsSnappingControlsViewModelGenerated(dotNetObject: any): Promise<any> {
    let jsSnappingControlsViewModel = new SnappingControlsViewModel();
    if (hasValue(dotNetObject.snappingOptions)) {
        let {buildJsSnappingOptions} = await import('./snappingOptions');
        jsSnappingControlsViewModel.snappingOptions = await buildJsSnappingOptions(dotNetObject.snappingOptions, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.view)) {
        jsSnappingControlsViewModel.view = dotNetObject.view;
    }

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsSnappingControlsViewModel);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSnappingControlsViewModel;

    let dnInstantiatedObject = await buildDotNetSnappingControlsViewModel(jsSnappingControlsViewModel);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SnappingControlsViewModel', e);
    }

    return jsSnappingControlsViewModel;
}

export async function buildDotNetSnappingControlsViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetSnappingControlsViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.snappingOptions)) {
        let {buildDotNetSnappingOptions} = await import('./snappingOptions');
        dotNetSnappingControlsViewModel.snappingOptions = await buildDotNetSnappingOptions(jsObject.snappingOptions);
    }
    if (hasValue(jsObject.state)) {
        dotNetSnappingControlsViewModel.state = jsObject.state;
    }
    if (hasValue(jsObject.view)) {
        dotNetSnappingControlsViewModel.view = jsObject.view;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSnappingControlsViewModel.id = k;
                break;
            }
        }
    }

    return dotNetSnappingControlsViewModel;
}

