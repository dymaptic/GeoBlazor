// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import catalogUtils = __esri.catalogUtils;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CatalogUtilsGenerated implements IPropertyWrapper {
    public component: catalogUtils;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: catalogUtils) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async getCatalogLayerForLayer(layer: any): Promise<any> {
        let { buildJsLayer } = await import('./layer');
        let jsLayer = await buildJsLayer(layer, this.layerId, this.viewId) as any;
        let result = this.component.getCatalogLayerForLayer(jsLayer);
        let { buildDotNetCatalogLayer } = await import('./catalogLayer');
        return await buildDotNetCatalogLayer(result, this.layerId, this.viewId);
    }

    async isLayerFromCatalog(layer: any): Promise<any> {
        let { buildJsLayer } = await import('./layer');
        let jsLayer = await buildJsLayer(layer, this.layerId, this.viewId) as any;
        return this.component.isLayerFromCatalog(jsLayer);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsCatalogUtilsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jscatalogUtils: any = {}


    let { default: CatalogUtilsWrapper } = await import('./catalogUtils');
    let catalogUtilsWrapper = new CatalogUtilsWrapper(jscatalogUtils);
    catalogUtilsWrapper.geoBlazorId = dotNetObject.id;
    catalogUtilsWrapper.viewId = viewId;
    catalogUtilsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(catalogUtilsWrapper);
    jsObjectRefs[dotNetObject.id] = catalogUtilsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jscatalogUtils;
    let { buildDotNetCatalogUtils } = await import('./catalogUtils');
    let dnInstantiatedObject = await buildDotNetCatalogUtils(jscatalogUtils);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CatalogUtils', e);
    }
    
    return jscatalogUtils;
}

export async function buildDotNetCatalogUtilsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCatalogUtils: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCatalogUtils.id = k;
                break;
            }
        }
    }

    return dotNetCatalogUtils;
}

