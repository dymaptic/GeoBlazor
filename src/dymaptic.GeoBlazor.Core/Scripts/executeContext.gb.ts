// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetExecuteContext } from './executeContext';
import ExecuteContext = __esri.ExecuteContext;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsExecuteContextGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsExecuteContext: any = {}
    if (hasValue(dotNetObject.spatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        jsExecuteContext.spatialReference = buildJsSpatialReference(dotNetObject.spatialReference) as any;
    }

    if (hasValue(dotNetObject.timeZone)) {
        jsExecuteContext.timeZone = dotNetObject.timeZone;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsExecuteContext);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsExecuteContext;
    
    let dnInstantiatedObject = await buildDotNetExecuteContext(jsExecuteContext);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ExecuteContext', e);
    }
    
    return jsExecuteContext;
}

export async function buildDotNetExecuteContextGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetExecuteContext: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.spatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetExecuteContext.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference);
        }
        if (hasValue(jsObject.timeZone)) {
            dotNetExecuteContext.timeZone = jsObject.timeZone;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetExecuteContext.id = k;
                break;
            }
        }
    }

    return dotNetExecuteContext;
}

