// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetRasterRGBResult } from './rasterRGBResult';
import RasterRGBResult = __esri.RasterRGBResult;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsRasterRGBResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsRasterRGBResult: any = {}
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsRasterStretchRenderer } = await import('./rasterStretchRenderer');
        jsRasterRGBResult.renderer = await buildJsRasterStretchRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.rgbBandIds)) {
        jsRasterRGBResult.rgbBandIds = dotNetObject.rgbBandIds;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsRasterRGBResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRasterRGBResult;
    
    let dnInstantiatedObject = await buildDotNetRasterRGBResult(jsRasterRGBResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RasterRGBResult', e);
    }
    
    return jsRasterRGBResult;
}

export async function buildDotNetRasterRGBResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRasterRGBResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.renderer)) {
            let { buildDotNetRasterStretchRenderer } = await import('./rasterStretchRenderer');
            dotNetRasterRGBResult.renderer = await buildDotNetRasterStretchRenderer(jsObject.renderer);
        }
        if (hasValue(jsObject.rgbBandIds)) {
            dotNetRasterRGBResult.rgbBandIds = jsObject.rgbBandIds;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRasterRGBResult.id = k;
                break;
            }
        }
    }

    return dotNetRasterRGBResult;
}

