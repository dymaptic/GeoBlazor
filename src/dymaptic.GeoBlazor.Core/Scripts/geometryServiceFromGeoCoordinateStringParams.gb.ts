// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetGeometryServiceFromGeoCoordinateStringParams } from './geometryServiceFromGeoCoordinateStringParams';

export async function buildJsGeometryServiceFromGeoCoordinateStringParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsgeometryServiceFromGeoCoordinateStringParams: any = {}
    if (hasValue(dotNetObject.spatialReferenceSr)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        jsgeometryServiceFromGeoCoordinateStringParams.sr = buildJsSpatialReference(dotNetObject.spatialReferenceSr) as any;
    }
    else if (hasValue(dotNetObject.stringSr)) {
        jsgeometryServiceFromGeoCoordinateStringParams.sr = dotNetObject.spatialReference;
    }

    if (hasValue(dotNetObject.conversionMode)) {
        jsgeometryServiceFromGeoCoordinateStringParams.conversionMode = dotNetObject.conversionMode;
    }
    if (hasValue(dotNetObject.conversionType)) {
        jsgeometryServiceFromGeoCoordinateStringParams.conversionType = dotNetObject.conversionType;
    }
    if (hasValue(dotNetObject.strings)) {
        jsgeometryServiceFromGeoCoordinateStringParams.strings = dotNetObject.strings;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsgeometryServiceFromGeoCoordinateStringParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsgeometryServiceFromGeoCoordinateStringParams;
    
    let dnInstantiatedObject = await buildDotNetGeometryServiceFromGeoCoordinateStringParams(jsgeometryServiceFromGeoCoordinateStringParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for GeometryServiceFromGeoCoordinateStringParams', e);
    }
    
    return jsgeometryServiceFromGeoCoordinateStringParams;
}

export async function buildDotNetGeometryServiceFromGeoCoordinateStringParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGeometryServiceFromGeoCoordinateStringParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.sr)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetGeometryServiceFromGeoCoordinateStringParams.sr = buildDotNetSpatialReference(jsObject.sr);
        }
    if (hasValue(jsObject.conversionMode)) {
        dotNetGeometryServiceFromGeoCoordinateStringParams.conversionMode = jsObject.conversionMode;
    }
    if (hasValue(jsObject.conversionType)) {
        dotNetGeometryServiceFromGeoCoordinateStringParams.conversionType = jsObject.conversionType;
    }
    if (hasValue(jsObject.strings)) {
        dotNetGeometryServiceFromGeoCoordinateStringParams.strings = jsObject.strings;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetGeometryServiceFromGeoCoordinateStringParams.id = k;
                break;
            }
        }
    }

    return dotNetGeometryServiceFromGeoCoordinateStringParams;
}

