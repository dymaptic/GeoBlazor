// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetWebMapSaveAsOptions } from './webMapSaveAsOptions';

export async function buildJsWebMapSaveAsOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsWebMapSaveAsOptions: any = {}

    if (hasValue(dotNetObject.folder)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedFolder } = dotNetObject.folder;
        jsWebMapSaveAsOptions.folder = sanitizedFolder;
    }
    if (hasValue(dotNetObject.ignoreUnsupported)) {
        jsWebMapSaveAsOptions.ignoreUnsupported = dotNetObject.ignoreUnsupported;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsWebMapSaveAsOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsWebMapSaveAsOptions;
    
    let dnInstantiatedObject = await buildDotNetWebMapSaveAsOptions(jsWebMapSaveAsOptions);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for WebMapSaveAsOptions', e);
    }
    
    return jsWebMapSaveAsOptions;
}

export async function buildDotNetWebMapSaveAsOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWebMapSaveAsOptions: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.folder)) {
        dotNetWebMapSaveAsOptions.folder = jsObject.folder;
    }
    if (hasValue(jsObject.ignoreUnsupported)) {
        dotNetWebMapSaveAsOptions.ignoreUnsupported = jsObject.ignoreUnsupported;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetWebMapSaveAsOptions.id = k;
                break;
            }
        }
    }

    return dotNetWebMapSaveAsOptions;
}

