// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCIMGeometricEffectDashes } from './cIMGeometricEffectDashes';

export async function buildJsCIMGeometricEffectDashesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCIMGeometricEffectDashes: any = {};

    if (hasValue(dotNetObject.controlPointEnding)) {
        jsCIMGeometricEffectDashes.controlPointEnding = dotNetObject.controlPointEnding;
    }
    if (hasValue(dotNetObject.customEndingOffset)) {
        jsCIMGeometricEffectDashes.customEndingOffset = dotNetObject.customEndingOffset;
    }
    if (hasValue(dotNetObject.dashTemplate)) {
        jsCIMGeometricEffectDashes.dashTemplate = dotNetObject.dashTemplate;
    }
    if (hasValue(dotNetObject.lineDashEnding)) {
        jsCIMGeometricEffectDashes.lineDashEnding = dotNetObject.lineDashEnding;
    }
    if (hasValue(dotNetObject.offsetAlongLine)) {
        jsCIMGeometricEffectDashes.offsetAlongLine = dotNetObject.offsetAlongLine;
    }
    if (hasValue(dotNetObject.primitiveName)) {
        jsCIMGeometricEffectDashes.primitiveName = dotNetObject.primitiveName;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCIMGeometricEffectDashes);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCIMGeometricEffectDashes;
    
    let { buildDotNetCIMGeometricEffectDashes } = await import('./cIMGeometricEffectDashes');
    let dnInstantiatedObject = await buildDotNetCIMGeometricEffectDashes(jsCIMGeometricEffectDashes);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type CIMGeometricEffectDashes detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CIMGeometricEffectDashes', e);
    }
    
    return jsCIMGeometricEffectDashes;
}


export async function buildDotNetCIMGeometricEffectDashesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCIMGeometricEffectDashes: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.controlPointEnding)) {
        dotNetCIMGeometricEffectDashes.controlPointEnding = jsObject.controlPointEnding;
    }
    if (hasValue(jsObject.customEndingOffset)) {
        dotNetCIMGeometricEffectDashes.customEndingOffset = jsObject.customEndingOffset;
    }
    if (hasValue(jsObject.dashTemplate)) {
        dotNetCIMGeometricEffectDashes.dashTemplate = jsObject.dashTemplate;
    }
    if (hasValue(jsObject.lineDashEnding)) {
        dotNetCIMGeometricEffectDashes.lineDashEnding = jsObject.lineDashEnding;
    }
    if (hasValue(jsObject.offsetAlongLine)) {
        dotNetCIMGeometricEffectDashes.offsetAlongLine = jsObject.offsetAlongLine;
    }
    if (hasValue(jsObject.primitiveName)) {
        dotNetCIMGeometricEffectDashes.primitiveName = jsObject.primitiveName;
    }
    if (hasValue(jsObject.type)) {
        dotNetCIMGeometricEffectDashes.type = jsObject.type;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCIMGeometricEffectDashes.id = geoBlazorId;
    }

    return dotNetCIMGeometricEffectDashes;
}

