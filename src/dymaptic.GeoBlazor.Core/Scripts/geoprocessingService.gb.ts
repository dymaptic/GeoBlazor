// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import geoprocessor = __esri.geoprocessor;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class GeoprocessingServiceGenerated implements IPropertyWrapper {
    public component: geoprocessor;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: geoprocessor) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async execute(url: any,
        parameters: any,
        options: any,
        requestOptions: any): Promise<any> {
        let { buildJsGPOptions } = await import('./gPOptions');
        let jsOptions = await buildJsGPOptions(options, this.layerId, this.viewId) as any;
        return await this.component.execute(url,
            parameters,
            jsOptions,
            requestOptions);
    }

    async submitJob(url: any,
        parameters: any,
        options: any,
        requestOptions: any): Promise<any> {
        let { buildJsGPOptions } = await import('./gPOptions');
        let jsOptions = await buildJsGPOptions(options, this.layerId, this.viewId) as any;
        let result = await this.component.submitJob(url,
            parameters,
            jsOptions,
            requestOptions);
        let { buildDotNetJobInfo } = await import('./jobInfo');
        return await buildDotNetJobInfo(result);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsGeoprocessingServiceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsgeoprocessor: any = {}


    let { default: GeoprocessingServiceWrapper } = await import('./geoprocessingService');
    let geoprocessingServiceWrapper = new GeoprocessingServiceWrapper(jsgeoprocessor);
    geoprocessingServiceWrapper.geoBlazorId = dotNetObject.id;
    geoprocessingServiceWrapper.viewId = viewId;
    geoprocessingServiceWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(geoprocessingServiceWrapper);
    jsObjectRefs[dotNetObject.id] = geoprocessingServiceWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsgeoprocessor;
    let { buildDotNetGeoprocessingService } = await import('./geoprocessingService');
    let dnInstantiatedObject = await buildDotNetGeoprocessingService(jsgeoprocessor);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for GeoprocessingService', e);
    }
    
    return jsgeoprocessor;
}
export async function buildDotNetGeoprocessingServiceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGeoprocessingService: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetGeoprocessingService.id = k;
                break;
            }
        }
    }

    return dotNetGeoprocessingService;
}

