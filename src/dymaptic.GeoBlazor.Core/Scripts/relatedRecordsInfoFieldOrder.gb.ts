// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import RelatedRecordsInfoFieldOrder from '@arcgis/core/popup/support/RelatedRecordsInfoFieldOrder';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class RelatedRecordsInfoFieldOrderGenerated implements IPropertyWrapper {
    public component: RelatedRecordsInfoFieldOrder;
    public readonly geoBlazorId: string = '';

    constructor(component: RelatedRecordsInfoFieldOrder) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}
export async function buildJsRelatedRecordsInfoFieldOrderGenerated(dotNetObject: any): Promise<any> {
    let { default: RelatedRecordsInfoFieldOrder } = await import('@arcgis/core/popup/support/RelatedRecordsInfoFieldOrder');
    let jsRelatedRecordsInfoFieldOrder = new RelatedRecordsInfoFieldOrder();
    if (hasValue(dotNetObject.field)) {
        jsRelatedRecordsInfoFieldOrder.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.order)) {
        jsRelatedRecordsInfoFieldOrder.order = dotNetObject.order;
    }
    let { default: RelatedRecordsInfoFieldOrderWrapper } = await import('./relatedRecordsInfoFieldOrder');
    let relatedRecordsInfoFieldOrderWrapper = new RelatedRecordsInfoFieldOrderWrapper(jsRelatedRecordsInfoFieldOrder);
    jsRelatedRecordsInfoFieldOrder.id = dotNetObject.id;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(relatedRecordsInfoFieldOrderWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = relatedRecordsInfoFieldOrderWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsRelatedRecordsInfoFieldOrder;
    
    return jsRelatedRecordsInfoFieldOrder;
}

export async function buildDotNetRelatedRecordsInfoFieldOrderGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRelatedRecordsInfoFieldOrder: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetRelatedRecordsInfoFieldOrder.field = jsObject.field;
        dotNetRelatedRecordsInfoFieldOrder.order = jsObject.order;
    return dotNetRelatedRecordsInfoFieldOrder;
}

