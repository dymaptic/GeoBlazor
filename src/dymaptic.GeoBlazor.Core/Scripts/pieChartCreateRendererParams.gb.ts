// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetPieChartCreateRendererParams } from './pieChartCreateRendererParams';
import pieChartCreateRendererParams = __esri.pieChartCreateRendererParams;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsPieChartCreateRendererParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jspieChartCreateRendererParams: any = {}
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jspieChartCreateRendererParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.pieChartScheme)) {
        let { buildJsPieChartScheme } = await import('./pieChartScheme');
        jspieChartCreateRendererParams.pieChartScheme = await buildJsPieChartScheme(dotNetObject.pieChartScheme, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.attributes)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedAttributes } = dotNetObject.attributes;
        jspieChartCreateRendererParams.attributes = sanitizedAttributes;
    }
    if (hasValue(dotNetObject.forBinning)) {
        jspieChartCreateRendererParams.forBinning = dotNetObject.forBinning;
    }
    if (hasValue(dotNetObject.includeSizeVariable)) {
        jspieChartCreateRendererParams.includeSizeVariable = dotNetObject.includeSizeVariable;
    }
    if (hasValue(dotNetObject.legendOptions)) {
        jspieChartCreateRendererParams.legendOptions = dotNetObject.legendOptions;
    }
    if (hasValue(dotNetObject.outlineOptimizationEnabled)) {
        jspieChartCreateRendererParams.outlineOptimizationEnabled = dotNetObject.outlineOptimizationEnabled;
    }
    if (hasValue(dotNetObject.shape)) {
        jspieChartCreateRendererParams.shape = dotNetObject.shape;
    }
    if (hasValue(dotNetObject.signal)) {
        jspieChartCreateRendererParams.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.sizeOptimizationEnabled)) {
        jspieChartCreateRendererParams.sizeOptimizationEnabled = dotNetObject.sizeOptimizationEnabled;
    }
    if (hasValue(dotNetObject.view)) {
        jspieChartCreateRendererParams.view = dotNetObject.view;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jspieChartCreateRendererParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jspieChartCreateRendererParams;
    
    let dnInstantiatedObject = await buildDotNetPieChartCreateRendererParams(jspieChartCreateRendererParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PieChartCreateRendererParams', e);
    }
    
    return jspieChartCreateRendererParams;
}

export async function buildDotNetPieChartCreateRendererParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPieChartCreateRendererParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.pieChartScheme)) {
            let { buildDotNetPieChartScheme } = await import('./pieChartScheme');
            dotNetPieChartCreateRendererParams.pieChartScheme = await buildDotNetPieChartScheme(jsObject.pieChartScheme);
        }
        if (hasValue(jsObject.attributes)) {
            dotNetPieChartCreateRendererParams.attributes = jsObject.attributes;
        }
        if (hasValue(jsObject.forBinning)) {
            dotNetPieChartCreateRendererParams.forBinning = jsObject.forBinning;
        }
        if (hasValue(jsObject.includeSizeVariable)) {
            dotNetPieChartCreateRendererParams.includeSizeVariable = jsObject.includeSizeVariable;
        }
        if (hasValue(jsObject.legendOptions)) {
            dotNetPieChartCreateRendererParams.legendOptions = jsObject.legendOptions;
        }
        if (hasValue(jsObject.outlineOptimizationEnabled)) {
            dotNetPieChartCreateRendererParams.outlineOptimizationEnabled = jsObject.outlineOptimizationEnabled;
        }
        if (hasValue(jsObject.shape)) {
            dotNetPieChartCreateRendererParams.shape = jsObject.shape;
        }
        if (hasValue(jsObject.signal)) {
            dotNetPieChartCreateRendererParams.signal = jsObject.signal;
        }
        if (hasValue(jsObject.sizeOptimizationEnabled)) {
            dotNetPieChartCreateRendererParams.sizeOptimizationEnabled = jsObject.sizeOptimizationEnabled;
        }
        if (hasValue(jsObject.view)) {
            dotNetPieChartCreateRendererParams.view = jsObject.view;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPieChartCreateRendererParams.id = k;
                break;
            }
        }
    }

    return dotNetPieChartCreateRendererParams;
}

