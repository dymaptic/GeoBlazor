// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import rasterFunctionUtils = __esri.rasterFunctionUtils;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class RasterFunctionUtilsGenerated implements IPropertyWrapper {
    public component: rasterFunctionUtils;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: rasterFunctionUtils) {
        this.component = component;
    }

    // region methods

    unwrap() {
        return this.component;
    }

    async abs(parameters: any): Promise<any> {
        return this.component.abs(parameters);
    }

    async acos(parameters: any): Promise<any> {
        return this.component.acos(parameters);
    }

    async acosh(parameters: any): Promise<any> {
        return this.component.acosh(parameters);
    }

    async asin(parameters: any): Promise<any> {
        return this.component.asin(parameters);
    }

    async asinh(parameters: any): Promise<any> {
        return this.component.asinh(parameters);
    }

    async aspect(parameters: any): Promise<any> {
        return this.component.aspect(parameters);
    }

    async atan(parameters: any): Promise<any> {
        return this.component.atan(parameters);
    }

    async atan2(parameters: any): Promise<any> {
        return this.component.atan2(parameters);
    }

    async atanh(parameters: any): Promise<any> {
        return this.component.atanh(parameters);
    }

    async bandArithmeticBAI(parameters: any): Promise<any> {
        return this.component.bandArithmeticBAI(parameters);
    }

    async bandArithmeticCIg(parameters: any): Promise<any> {
        return this.component.bandArithmeticCIg(parameters);
    }

    async bandArithmeticCIre(parameters: any): Promise<any> {
        return this.component.bandArithmeticCIre(parameters);
    }

    async bandArithmeticClayMinerals(parameters: any): Promise<any> {
        return this.component.bandArithmeticClayMinerals(parameters);
    }

    async bandArithmeticCustom(parameters: any): Promise<any> {
        return this.component.bandArithmeticCustom(parameters);
    }

    async bandArithmeticEVI(parameters: any): Promise<any> {
        return this.component.bandArithmeticEVI(parameters);
    }

    async bandArithmeticFerrousMinerals(parameters: any): Promise<any> {
        return this.component.bandArithmeticFerrousMinerals(parameters);
    }

    async bandArithmeticGEMI(parameters: any): Promise<any> {
        return this.component.bandArithmeticGEMI(parameters);
    }

    async bandArithmeticGNDVI(parameters: any): Promise<any> {
        return this.component.bandArithmeticGNDVI(parameters);
    }

    async bandArithmeticGVITM(parameters: any): Promise<any> {
        return this.component.bandArithmeticGVITM(parameters);
    }

    async bandArithmeticIronOxide(parameters: any): Promise<any> {
        return this.component.bandArithmeticIronOxide(parameters);
    }

    async bandArithmeticMNDWI(parameters: any): Promise<any> {
        return this.component.bandArithmeticMNDWI(parameters);
    }

    async bandArithmeticMSAVI(parameters: any): Promise<any> {
        return this.component.bandArithmeticMSAVI(parameters);
    }

    async bandArithmeticMTVI2(parameters: any): Promise<any> {
        return this.component.bandArithmeticMTVI2(parameters);
    }

    async bandArithmeticNBR(parameters: any): Promise<any> {
        return this.component.bandArithmeticNBR(parameters);
    }

    async bandArithmeticNDBI(parameters: any): Promise<any> {
        return this.component.bandArithmeticNDBI(parameters);
    }

    async bandArithmeticNDMI(parameters: any): Promise<any> {
        return this.component.bandArithmeticNDMI(parameters);
    }

    async bandArithmeticNDSI(parameters: any): Promise<any> {
        return this.component.bandArithmeticNDSI(parameters);
    }

    async bandArithmeticNDVI(parameters: any): Promise<any> {
        return this.component.bandArithmeticNDVI(parameters);
    }

    async bandArithmeticNDVIre(parameters: any): Promise<any> {
        return this.component.bandArithmeticNDVIre(parameters);
    }

    async bandArithmeticNDWI(parameters: any): Promise<any> {
        return this.component.bandArithmeticNDWI(parameters);
    }

    async bandArithmeticPVI(parameters: any): Promise<any> {
        return this.component.bandArithmeticPVI(parameters);
    }

    async bandArithmeticRTVICore(parameters: any): Promise<any> {
        return this.component.bandArithmeticRTVICore(parameters);
    }

    async bandArithmeticSAVI(parameters: any): Promise<any> {
        return this.component.bandArithmeticSAVI(parameters);
    }

    async bandArithmeticSR(parameters: any): Promise<any> {
        return this.component.bandArithmeticSR(parameters);
    }

    async bandArithmeticSRre(parameters: any): Promise<any> {
        return this.component.bandArithmeticSRre(parameters);
    }

    async bandArithmeticSultan(parameters: any): Promise<any> {
        return this.component.bandArithmeticSultan(parameters);
    }

    async bandArithmeticTSAVI(parameters: any): Promise<any> {
        return this.component.bandArithmeticTSAVI(parameters);
    }

    async bandArithmeticVARI(parameters: any): Promise<any> {
        return this.component.bandArithmeticVARI(parameters);
    }

    async bandArithmeticWNDWI(parameters: any): Promise<any> {
        return this.component.bandArithmeticWNDWI(parameters);
    }

    async bitwiseAnd(parameters: any): Promise<any> {
        return this.component.bitwiseAnd(parameters);
    }

    async bitwiseLeftShift(parameters: any): Promise<any> {
        return this.component.bitwiseLeftShift(parameters);
    }

    async bitwiseNot(parameters: any): Promise<any> {
        return this.component.bitwiseNot(parameters);
    }

    async bitwiseOr(parameters: any): Promise<any> {
        return this.component.bitwiseOr(parameters);
    }

    async bitwiseRightShift(parameters: any): Promise<any> {
        return this.component.bitwiseRightShift(parameters);
    }

    async bitwiseXor(parameters: any): Promise<any> {
        return this.component.bitwiseXor(parameters);
    }

    async booleanAnd(parameters: any): Promise<any> {
        return this.component.booleanAnd(parameters);
    }

    async booleanNot(parameters: any): Promise<any> {
        return this.component.booleanNot(parameters);
    }

    async booleanOr(parameters: any): Promise<any> {
        return this.component.booleanOr(parameters);
    }

    async booleanXor(parameters: any): Promise<any> {
        return this.component.booleanXor(parameters);
    }

    async cellStatistics(parameters: any): Promise<any> {
        return this.component.cellStatistics(parameters);
    }

    async clip(parameters: any): Promise<any> {
        let {buildJsRasterFunctionUtilsClipParameters} = await import('./rasterFunctionUtilsClipParameters');
        let jsParameters = await buildJsRasterFunctionUtilsClipParameters(parameters, this.layerId, this.viewId) as any;
        return this.component.clip(jsParameters);
    }

    async colormap(parameters: any): Promise<any> {
        return this.component.colormap(parameters);
    }

    async compositeBands(parameters: any): Promise<any> {
        return this.component.compositeBands(parameters);
    }

    async conditional(parameters: any): Promise<any> {
        return this.component.conditional(parameters);
    }

    async contrastBrightness(parameters: any): Promise<any> {
        return this.component.contrastBrightness(parameters);
    }

    async convolution(parameters: any): Promise<any> {
        return this.component.convolution(parameters);
    }

    async cos(parameters: any): Promise<any> {
        return this.component.cos(parameters);
    }

    async cosh(parameters: any): Promise<any> {
        return this.component.cosh(parameters);
    }

    async curvature(parameters: any): Promise<any> {
        return this.component.curvature(parameters);
    }

    async divide(parameters: any): Promise<any> {
        return this.component.divide(parameters);
    }

    async equalTo(parameters: any): Promise<any> {
        return this.component.equalTo(parameters);
    }

    async exp(parameters: any): Promise<any> {
        return this.component.exp(parameters);
    }

    async exp10(parameters: any): Promise<any> {
        return this.component.exp10(parameters);
    }

    async exp2(parameters: any): Promise<any> {
        return this.component.exp2(parameters);
    }

    async float(parameters: any): Promise<any> {
        return this.component.float(parameters);
    }

    async grayscale(parameters: any): Promise<any> {
        return this.component.grayscale(parameters);
    }

    async greaterThan(parameters: any): Promise<any> {
        return this.component.greaterThan(parameters);
    }

    async greaterThanEqual(parameters: any): Promise<any> {
        return this.component.greaterThanEqual(parameters);
    }

    async int(parameters: any): Promise<any> {
        return this.component.int(parameters);
    }

    async isNull(parameters: any): Promise<any> {
        return this.component.isNull(parameters);
    }

    async lessThan(parameters: any): Promise<any> {
        return this.component.lessThan(parameters);
    }

    async lessThanEqual(parameters: any): Promise<any> {
        return this.component.lessThanEqual(parameters);
    }

    async log(parameters: any): Promise<any> {
        return this.component.log(parameters);
    }

    async log10(parameters: any): Promise<any> {
        return this.component.log10(parameters);
    }

    async log2(parameters: any): Promise<any> {
        return this.component.log2(parameters);
    }

    async mask(parameters: any): Promise<any> {
        return this.component.mask(parameters);
    }

    async minus(parameters: any): Promise<any> {
        return this.component.minus(parameters);
    }

    async mod(parameters: any): Promise<any> {
        return this.component.mod(parameters);
    }

    async negate(parameters: any): Promise<any> {
        return this.component.negate(parameters);
    }

    async notEqual(parameters: any): Promise<any> {
        return this.component.notEqual(parameters);
    }

    async plus(parameters: any): Promise<any> {
        return this.component.plus(parameters);
    }

    async power(parameters: any): Promise<any> {
        return this.component.power(parameters);
    }

    async remap(parameters: any): Promise<any> {
        return this.component.remap(parameters);
    }

    async roundDown(parameters: any): Promise<any> {
        return this.component.roundDown(parameters);
    }

    async roundUp(parameters: any): Promise<any> {
        return this.component.roundUp(parameters);
    }

    async setNull(parameters: any): Promise<any> {
        return this.component.setNull(parameters);
    }

    async sin(parameters: any): Promise<any> {
        return this.component.sin(parameters);
    }

    async sinh(parameters: any): Promise<any> {
        return this.component.sinh(parameters);
    }

    async slope(parameters: any): Promise<any> {
        return this.component.slope(parameters);
    }

    async sqrt(parameters: any): Promise<any> {
        return this.component.sqrt(parameters);
    }

    async square(parameters: any): Promise<any> {
        return this.component.square(parameters);
    }

    async statistics(parameters: any): Promise<any> {
        return this.component.statistics(parameters);
    }

    async statisticsHistogram(parameters: any): Promise<any> {
        return this.component.statisticsHistogram(parameters);
    }

    async stretchMinMax(parameters: any): Promise<any> {
        return this.component.stretchMinMax(parameters);
    }

    async stretchPercentClip(parameters: any): Promise<any> {
        return this.component.stretchPercentClip(parameters);
    }

    async stretchStandardDeviation(parameters: any): Promise<any> {
        return this.component.stretchStandardDeviation(parameters);
    }

    async table(parameters: any): Promise<any> {
        let {buildJsRasterFunctionUtilsTableParameters} = await import('./rasterFunctionUtilsTableParameters');
        let jsParameters = await buildJsRasterFunctionUtilsTableParameters(parameters, this.layerId, this.viewId) as any;
        return this.component.table(jsParameters);
    }

    async tan(parameters: any): Promise<any> {
        return this.component.tan(parameters);
    }

    async tanh(parameters: any): Promise<any> {
        return this.component.tanh(parameters);
    }

    async times(parameters: any): Promise<any> {
        return this.component.times(parameters);
    }

    // region properties

    getProperty(prop: string): any {
        return this.component[prop];
    }

    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsRasterFunctionUtilsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsrasterFunctionUtils: any = {}


    let {default: RasterFunctionUtilsWrapper} = await import('./rasterFunctionUtils');
    let rasterFunctionUtilsWrapper = new RasterFunctionUtilsWrapper(jsrasterFunctionUtils);
    rasterFunctionUtilsWrapper.geoBlazorId = dotNetObject.id;
    rasterFunctionUtilsWrapper.viewId = viewId;
    rasterFunctionUtilsWrapper.layerId = layerId;

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(rasterFunctionUtilsWrapper);
    jsObjectRefs[dotNetObject.id] = rasterFunctionUtilsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsrasterFunctionUtils;
    let {buildDotNetRasterFunctionUtils} = await import('./rasterFunctionUtils');
    let dnInstantiatedObject = await buildDotNetRasterFunctionUtils(jsrasterFunctionUtils);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RasterFunctionUtils', e);
    }

    return jsrasterFunctionUtils;
}

export async function buildDotNetRasterFunctionUtilsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetRasterFunctionUtils: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.defaultRaster)) {
        dotNetRasterFunctionUtils.defaultRaster = jsObject.defaultRaster;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRasterFunctionUtils.id = k;
                break;
            }
        }
    }

    return dotNetRasterFunctionUtils;
}

