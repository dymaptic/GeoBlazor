// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetMeshVertex } from './meshVertex';

export async function buildJsMeshVertexGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsMeshVertex: any = {};

    if (hasValue(dotNetObject.distance)) {
        jsMeshVertex.distance = dotNetObject.distance;
    }
    if (hasValue(dotNetObject.uTexcoord)) {
        jsMeshVertex.uTexcoord = dotNetObject.uTexcoord;
    }
    if (hasValue(dotNetObject.vTexcoord)) {
        jsMeshVertex.vTexcoord = dotNetObject.vTexcoord;
    }
    if (hasValue(dotNetObject.x)) {
        jsMeshVertex.x = dotNetObject.x;
    }
    if (hasValue(dotNetObject.xOffset)) {
        jsMeshVertex.xOffset = dotNetObject.xOffset;
    }
    if (hasValue(dotNetObject.y)) {
        jsMeshVertex.y = dotNetObject.y;
    }
    if (hasValue(dotNetObject.yOffset)) {
        jsMeshVertex.yOffset = dotNetObject.yOffset;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsMeshVertex);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsMeshVertex;
    
    return jsMeshVertex;
}


export async function buildDotNetMeshVertexGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMeshVertex: any = {};
    
    if (hasValue(jsObject.distance)) {
        dotNetMeshVertex.distance = jsObject.distance;
    }
    
    if (hasValue(jsObject.uTexcoord)) {
        dotNetMeshVertex.uTexcoord = jsObject.uTexcoord;
    }
    
    if (hasValue(jsObject.vTexcoord)) {
        dotNetMeshVertex.vTexcoord = jsObject.vTexcoord;
    }
    
    if (hasValue(jsObject.x)) {
        dotNetMeshVertex.x = jsObject.x;
    }
    
    if (hasValue(jsObject.xOffset)) {
        dotNetMeshVertex.xOffset = jsObject.xOffset;
    }
    
    if (hasValue(jsObject.y)) {
        dotNetMeshVertex.y = jsObject.y;
    }
    
    if (hasValue(jsObject.yOffset)) {
        dotNetMeshVertex.yOffset = jsObject.yOffset;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetMeshVertex.id = geoBlazorId;
    }

    return dotNetMeshVertex;
}

