// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import RainyWeather from '@arcgis/core/views/3d/environment/RainyWeather';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetRainyWeather } from './rainyWeather';

export async function buildJsRainyWeatherGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.cloudCover)) {
        properties.cloudCover = dotNetObject.cloudCover;
    }
    if (hasValue(dotNetObject.precipitation)) {
        properties.precipitation = dotNetObject.precipitation;
    }
    let jsRainyWeather = new RainyWeather(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsRainyWeather);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRainyWeather;
    
    return jsRainyWeather;
}


export async function buildDotNetRainyWeatherGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRainyWeather: any = {};
    
    if (hasValue(jsObject.cloudCover)) {
        dotNetRainyWeather.cloudCover = jsObject.cloudCover;
    }
    
    if (hasValue(jsObject.precipitation)) {
        dotNetRainyWeather.precipitation = jsObject.precipitation;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetRainyWeather.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetRainyWeather.id = geoBlazorId;
    }

    return dotNetRainyWeather;
}

