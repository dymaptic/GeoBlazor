// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetDataModel } from './dataModel';
import DataModel from '@arcgis/core/rest/knowledgeGraph/DataModel';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsDataModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsDataModel = new DataModel();

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsDataModel);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsDataModel;
    
    let dnInstantiatedObject = await buildDotNetDataModel(jsDataModel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DataModel', e);
    }
    
    return jsDataModel;
}

export async function buildDotNetDataModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDataModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.spatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetDataModel.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference);
        }
        if (hasValue(jsObject.arcgisManaged)) {
            dotNetDataModel.arcgisManaged = jsObject.arcgisManaged;
        }
        if (hasValue(jsObject.entityTypes)) {
            dotNetDataModel.entityTypes = jsObject.entityTypes;
        }
        if (hasValue(jsObject.identifierInfo)) {
            dotNetDataModel.identifierInfo = jsObject.identifierInfo;
        }
        if (hasValue(jsObject.metaEntityTypes)) {
            dotNetDataModel.metaEntityTypes = jsObject.metaEntityTypes;
        }
        if (hasValue(jsObject.relationshipTypes)) {
            dotNetDataModel.relationshipTypes = jsObject.relationshipTypes;
        }
        if (hasValue(jsObject.searchIndexes)) {
            dotNetDataModel.searchIndexes = jsObject.searchIndexes;
        }
        if (hasValue(jsObject.strict)) {
            dotNetDataModel.strict = jsObject.strict;
        }
        if (hasValue(jsObject.timestamp)) {
            dotNetDataModel.timestamp = jsObject.timestamp;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetDataModel.id = k;
                break;
            }
        }
    }

    return dotNetDataModel;
}

