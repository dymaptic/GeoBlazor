import { buildDotNetHandleOwner } from './handleOwner';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import HandleOwner = __esri.HandleOwner;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsHandleOwnerGenerated(dotNetObject: any): Promise<any> {
    let jsHandleOwner = new HandleOwner();
    if (hasValue(dotNetObject.handles)) {
        let { buildJsHandles } = await import('./handles');
        jsHandleOwner.handles = await buildJsHandles(dotNetObject.handles, layerId, viewId) as any;
    }

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsHandleOwner);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsHandleOwner;
    
    let dnInstantiatedObject = await buildDotNetHandleOwner(jsHandleOwner);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for HandleOwner', e);
    }
    
    return jsHandleOwner;
}
export async function buildDotNetHandleOwnerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetHandleOwner: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.handles)) {
            let { buildDotNetHandles } = await import('./handles');
            dotNetHandleOwner.handles = await buildDotNetHandles(jsObject.handles);
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetHandleOwner.id = k;
                break;
            }
        }
    }

    return dotNetHandleOwner;
}

