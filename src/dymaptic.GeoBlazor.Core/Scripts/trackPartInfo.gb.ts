// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import TrackPartInfo from '@arcgis/core/layers/support/TrackPartInfo';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetTrackPartInfo } from './trackPartInfo';

export async function buildJsTrackPartInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.labelingInfo) && dotNetObject.labelingInfo.length > 0) {
        let { buildJsLabel } = await import('./label');
        properties.labelingInfo = await Promise.all(dotNetObject.labelingInfo.map(async i => await buildJsLabel(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.renderer)) {
        properties.renderer = dotNetObject.renderer;
    }

    if (hasValue(dotNetObject.labelsVisible)) {
        properties.labelsVisible = dotNetObject.labelsVisible;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    let jsTrackPartInfo = new TrackPartInfo(properties);
    
    jsObjectRefs[dotNetObject.id] = jsTrackPartInfo;
    arcGisObjectRefs[dotNetObject.id] = jsTrackPartInfo;
    
    return jsTrackPartInfo;
}


export async function buildDotNetTrackPartInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTrackPartInfo: any = {};
    
    if (hasValue(jsObject.labelingInfo)) {
        let { buildDotNetLabel } = await import('./label');
        dotNetTrackPartInfo.labelingInfo = await Promise.all(jsObject.labelingInfo.map(async i => await buildDotNetLabel(i)));
    }
    
    if (hasValue(jsObject.labelsVisible)) {
        dotNetTrackPartInfo.labelsVisible = jsObject.labelsVisible;
    }
    
    if (hasValue(jsObject.renderer)) {
        dotNetTrackPartInfo.renderer = jsObject.renderer;
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetTrackPartInfo.visible = jsObject.visible;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetTrackPartInfo.id = geoBlazorId;
    }

    return dotNetTrackPartInfo;
}

