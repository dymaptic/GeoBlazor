// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import symbolUtils = __esri.symbolUtils;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SymbolUtilsGenerated implements IPropertyWrapper {
    public component: symbolUtils;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: symbolUtils) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async getDisplayedColor(graphic: any,
        options: any): Promise<any> {
        let { buildJsGraphic } = await import('./graphic');
        let jsGraphic = buildJsGraphic(graphic) as any;
        let { buildJsSymbolUtilsGetDisplayedColorOptions } = await import('./symbolUtilsGetDisplayedColorOptions');
        let jsOptions = await buildJsSymbolUtilsGetDisplayedColorOptions(options, this.layerId, this.viewId) as any;
        return await this.component.getDisplayedColor(jsGraphic,
            jsOptions);
    }

    async getDisplayedSymbol(graphic: any,
        options: any): Promise<any> {
        let { buildJsGraphic } = await import('./graphic');
        let jsGraphic = buildJsGraphic(graphic) as any;
        let { buildJsSymbolUtilsGetDisplayedSymbolOptions } = await import('./symbolUtilsGetDisplayedSymbolOptions');
        let jsOptions = await buildJsSymbolUtilsGetDisplayedSymbolOptions(options, this.layerId, this.viewId) as any;
        return await this.component.getDisplayedSymbol(jsGraphic,
            jsOptions);
    }

    async getLegendLabel(graphic: any,
        view: any,
        options: any): Promise<any> {
        let { buildJsGraphic } = await import('./graphic');
        let jsGraphic = buildJsGraphic(graphic) as any;
        let { buildJsSymbolUtilsGetLegendLabelOptions } = await import('./symbolUtilsGetLegendLabelOptions');
        let jsOptions = await buildJsSymbolUtilsGetLegendLabelOptions(options, this.layerId, this.viewId) as any;
        return await this.component.getLegendLabel(jsGraphic,
            view,
            jsOptions);
    }

    async renderColorRampPreviewHTML(colors: any,
        options: any): Promise<any> {
        let { buildJsMapColor } = await import('./mapColor');
        let jsColors = buildJsMapColor(colors) as any;
        return this.component.renderColorRampPreviewHTML(jsColors,
            options);
    }

    async renderPieChartPreviewHTML(colors: any,
        options: any): Promise<any> {
        let { buildJsMapColor } = await import('./mapColor');
        let jsColors = buildJsMapColor(colors) as any;
        let { buildJsSymbolUtilsRenderPieChartPreviewHTMLOptions } = await import('./symbolUtilsRenderPieChartPreviewHTMLOptions');
        let jsOptions = await buildJsSymbolUtilsRenderPieChartPreviewHTMLOptions(options, this.layerId, this.viewId) as any;
        return this.component.renderPieChartPreviewHTML(jsColors,
            jsOptions);
    }

    async renderPreviewHTML(symbol: any,
        options: any): Promise<any> {
        let { buildJsSymbol } = await import('./symbol');
        let jsSymbol = buildJsSymbol(symbol) as any;
        return await this.component.renderPreviewHTML(jsSymbol,
            options);
    }

    async renderRelationshipRampPreviewHTML(renderer: any,
        options: any): Promise<any> {
        let { buildJsUniqueValueRenderer } = await import('./uniqueValueRenderer');
        let jsRenderer = await buildJsUniqueValueRenderer(renderer, this.layerId, this.viewId) as any;
        return this.component.renderRelationshipRampPreviewHTML(jsRenderer,
            options);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsSymbolUtilsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jssymbolUtils: any = {};


    let { default: SymbolUtilsWrapper } = await import('./symbolUtils');
    let symbolUtilsWrapper = new SymbolUtilsWrapper(jssymbolUtils);
    symbolUtilsWrapper.geoBlazorId = dotNetObject.id;
    symbolUtilsWrapper.viewId = viewId;
    symbolUtilsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(symbolUtilsWrapper);
    jsObjectRefs[dotNetObject.id] = symbolUtilsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jssymbolUtils;
    let { buildDotNetSymbolUtils } = await import('./symbolUtils');
    let dnInstantiatedObject = await buildDotNetSymbolUtils(jssymbolUtils);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SymbolUtils', e);
    }
    
    return jssymbolUtils;
}

export async function buildDotNetSymbolUtilsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSymbolUtils: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSymbolUtils.id = k;
                break;
            }
        }
    }

    return dotNetSymbolUtils;
}

