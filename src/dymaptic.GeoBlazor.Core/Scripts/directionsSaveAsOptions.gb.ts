// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetDirectionsSaveAsOptions } from './directionsSaveAsOptions';

export async function buildJsDirectionsSaveAsOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsDirectionsSaveAsOptions: any = {}

    if (hasValue(dotNetObject.folder)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedFolder } = dotNetObject.folder;
        jsDirectionsSaveAsOptions.folder = sanitizedFolder;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsDirectionsSaveAsOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsDirectionsSaveAsOptions;
    
    let dnInstantiatedObject = await buildDotNetDirectionsSaveAsOptions(jsDirectionsSaveAsOptions);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DirectionsSaveAsOptions', e);
    }
    
    return jsDirectionsSaveAsOptions;
}

export async function buildDotNetDirectionsSaveAsOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDirectionsSaveAsOptions: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.folder)) {
            dotNetDirectionsSaveAsOptions.folder = jsObject.folder;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetDirectionsSaveAsOptions.id = k;
                break;
            }
        }
    }

    return dotNetDirectionsSaveAsOptions;
}

