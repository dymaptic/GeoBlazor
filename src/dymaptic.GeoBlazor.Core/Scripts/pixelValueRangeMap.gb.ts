// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetPixelValueRangeMap } from './pixelValueRangeMap';

export async function buildJsPixelValueRangeMapGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsPixelValueRangeMap: any = {};

    if (hasValue(dotNetObject.output)) {
        jsPixelValueRangeMap.output = dotNetObject.output;
    }
    if (hasValue(dotNetObject.range) && dotNetObject.range.length > 0) {
        jsPixelValueRangeMap.range = dotNetObject.range;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsPixelValueRangeMap);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPixelValueRangeMap;
    
    return jsPixelValueRangeMap;
}


export async function buildDotNetPixelValueRangeMapGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPixelValueRangeMap: any = {};
    
    if (hasValue(jsObject.output)) {
        dotNetPixelValueRangeMap.output = jsObject.output;
    }
    
    if (hasValue(jsObject.range)) {
        dotNetPixelValueRangeMap.range = jsObject.range;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetPixelValueRangeMap.id = geoBlazorId;
    }

    return dotNetPixelValueRangeMap;
}

