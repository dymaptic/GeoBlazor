// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import RenderNode from '@arcgis/core/views/3d/webgl/RenderNode';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class RenderNodeGenerated implements IPropertyWrapper {
    public component: RenderNode;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: RenderNode) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async acquireOutputFramebuffer(): Promise<any> {
        let result = this.component.acquireOutputFramebuffer();
        let { buildDotNetManagedFBO } = await import('./managedFBO');
        return await buildDotNetManagedFBO(result);
    }

    async bindRenderTarget(): Promise<any> {
        let result = this.component.bindRenderTarget();
        let { buildDotNetManagedFBO } = await import('./managedFBO');
        return await buildDotNetManagedFBO(result);
    }

    async render(inputs: any): Promise<any> {
        let { buildJsManagedFBO } = await import('./managedFBO');
        let jsInputs = await buildJsManagedFBO(inputs, this.layerId, this.viewId) as any;
        let result = this.component.render(jsInputs);
        let { buildDotNetManagedFBO } = await import('./managedFBO');
        return await buildDotNetManagedFBO(result);
    }

    async requestRender(): Promise<void> {
        this.component.requestRender();
    }

    async resetWebGLState(): Promise<void> {
        this.component.resetWebGLState();
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsRenderNodeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsRenderNode = new RenderNode();

    if (hasValue(dotNetObject.camera)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedcamera } = dotNetObject.camera;
        jsRenderNode.camera = sanitizedcamera;
    }
    if (hasValue(dotNetObject.consumes)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedconsumes } = dotNetObject.consumes;
        jsRenderNode.consumes = sanitizedconsumes;
    }
    if (hasValue(dotNetObject.gl)) {
        jsRenderNode.gl = dotNetObject.gl;
    }
    if (hasValue(dotNetObject.produces)) {
        jsRenderNode.produces = dotNetObject.produces;
    }
    if (hasValue(dotNetObject.sunLight)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedsunLight } = dotNetObject.sunLight;
        jsRenderNode.sunLight = sanitizedsunLight;
    }
    if (hasValue(dotNetObject.view)) {
        jsRenderNode.view = dotNetObject.view;
    }

    let { default: RenderNodeWrapper } = await import('./renderNode');
    let renderNodeWrapper = new RenderNodeWrapper(jsRenderNode);
    renderNodeWrapper.geoBlazorId = dotNetObject.id;
    renderNodeWrapper.viewId = viewId;
    renderNodeWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(renderNodeWrapper);
    jsObjectRefs[dotNetObject.id] = renderNodeWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsRenderNode;
    let { buildDotNetRenderNode } = await import('./renderNode');
    let dnInstantiatedObject = await buildDotNetRenderNode(jsRenderNode);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RenderNode', e);
    }
    
    return jsRenderNode;
}
export async function buildDotNetRenderNodeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRenderNode: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.camera)) {
            dotNetRenderNode.camera = jsObject.camera;
        }
        if (hasValue(jsObject.consumes)) {
            dotNetRenderNode.consumes = jsObject.consumes;
        }
        if (hasValue(jsObject.gl)) {
            dotNetRenderNode.gl = jsObject.gl;
        }
        if (hasValue(jsObject.produces)) {
            dotNetRenderNode.produces = jsObject.produces;
        }
        if (hasValue(jsObject.sunLight)) {
            dotNetRenderNode.sunLight = jsObject.sunLight;
        }
        if (hasValue(jsObject.view)) {
            dotNetRenderNode.view = jsObject.view;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRenderNode.id = k;
                break;
            }
        }
    }

    return dotNetRenderNode;
}

