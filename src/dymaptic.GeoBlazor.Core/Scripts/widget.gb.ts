// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Widget from '@arcgis/core/widgets/Widget';

import {IPropertyWrapper} from './definitions';

export default class WidgetGenerated implements IPropertyWrapper {
    public widget: Widget;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: Widget) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    
    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async own(handleOrHandles: any): Promise<void> {
                let { buildJsWatchHandle } = await import('./watchHandle');
let jsHandleOrHandles = await buildJsWatchHandle(handleOrHandles, this.layerId, this.viewId) as any;
        this.widget.own(jsHandleOrHandles);
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async render(): Promise<any> {
        return this.widget.render();
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async when(callback: any,
        errback: any): Promise<any> {
        return await this.widget.when(callback,
            errback);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}

export function buildDotNetWidgetGenerated(jsObject: any): any {
    return jsObject;
}

