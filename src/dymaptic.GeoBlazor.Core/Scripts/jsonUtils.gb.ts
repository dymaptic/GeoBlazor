// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import jsonUtils = __esri.jsonUtils;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class JsonUtilsGenerated implements IPropertyWrapper {
    public component: jsonUtils;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: jsonUtils) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async getJsonType(geometry: any): Promise<any> {
        let { buildJsGeometry } = await import('./geometry');
        let jsGeometry = buildJsGeometry(geometry) as any;
        return this.component.getJsonType(jsGeometry);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsJsonUtilsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsjsonUtils: any = {};


    let { default: JsonUtilsWrapper } = await import('./jsonUtils');
    let jsonUtilsWrapper = new JsonUtilsWrapper(jsjsonUtils);
    jsonUtilsWrapper.geoBlazorId = dotNetObject.id;
    jsonUtilsWrapper.viewId = viewId;
    jsonUtilsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsonUtilsWrapper);
    jsObjectRefs[dotNetObject.id] = jsonUtilsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsjsonUtils;
    let { buildDotNetJsonUtils } = await import('./jsonUtils');
    let dnInstantiatedObject = await buildDotNetJsonUtils(jsjsonUtils);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for JsonUtils', e);
    }
    
    return jsjsonUtils;
}

export async function buildDotNetJsonUtilsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetJsonUtils: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetJsonUtils.id = k;
                break;
            }
        }
    }

    return dotNetJsonUtils;
}

