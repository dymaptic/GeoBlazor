// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Navigation from '@arcgis/core/views/navigation/Navigation';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetNavigation } from './navigation';

export async function buildJsNavigationGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.gamepad)) {
        let { buildJsGamepadGamepadSettings } = await import('./gamepadGamepadSettings');
        properties.gamepad = await buildJsGamepadGamepadSettings(dotNetObject.gamepad, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.browserTouchPanEnabled)) {
        properties.browserTouchPanEnabled = dotNetObject.browserTouchPanEnabled;
    }
    if (hasValue(dotNetObject.momentumEnabled)) {
        properties.momentumEnabled = dotNetObject.momentumEnabled;
    }
    if (hasValue(dotNetObject.mouseWheelZoomEnabled)) {
        properties.mouseWheelZoomEnabled = dotNetObject.mouseWheelZoomEnabled;
    }
    let jsNavigation = new Navigation(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsNavigation);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsNavigation;
    
    return jsNavigation;
}


export async function buildDotNetNavigationGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetNavigation: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.gamepad)) {
        let { buildDotNetGamepadGamepadSettings } = await import('./gamepadGamepadSettings');
        dotNetNavigation.gamepad = await buildDotNetGamepadGamepadSettings(jsObject.gamepad);
    }
    if (hasValue(jsObject.browserTouchPanEnabled)) {
        dotNetNavigation.browserTouchPanEnabled = jsObject.browserTouchPanEnabled;
    }
    if (hasValue(jsObject.momentumEnabled)) {
        dotNetNavigation.momentumEnabled = jsObject.momentumEnabled;
    }
    if (hasValue(jsObject.mouseWheelZoomEnabled)) {
        dotNetNavigation.mouseWheelZoomEnabled = jsObject.mouseWheelZoomEnabled;
    }

    return dotNetNavigation;
}

