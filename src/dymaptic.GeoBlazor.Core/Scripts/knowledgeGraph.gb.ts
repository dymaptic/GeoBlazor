import {buildDotNetKnowledgeGraph} from './knowledgeGraph';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import KnowledgeGraph from '@arcgis/core/rest/knowledgeGraph/KnowledgeGraph';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsKnowledgeGraphGenerated(dotNetObject: any): Promise<any> {
    let jsKnowledgeGraph = new KnowledgeGraph();

    if (hasValue(dotNetObject.url)) {
        jsKnowledgeGraph.url = dotNetObject.url;
    }

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsKnowledgeGraph);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsKnowledgeGraph;

    let dnInstantiatedObject = await buildDotNetKnowledgeGraph(jsKnowledgeGraph);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for KnowledgeGraph', e);
    }

    return jsKnowledgeGraph;
}

export async function buildDotNetKnowledgeGraphGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetKnowledgeGraph: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.dataModel)) {
        let {buildDotNetDataModel} = await import('./dataModel');
        dotNetKnowledgeGraph.dataModel = await buildDotNetDataModel(jsObject.dataModel);
    }
    if (hasValue(jsObject.serviceDefinition)) {
        let {buildDotNetServiceDefinition} = await import('./serviceDefinition');
        dotNetKnowledgeGraph.serviceDefinition = await buildDotNetServiceDefinition(jsObject.serviceDefinition);
    }
    if (hasValue(jsObject.url)) {
        dotNetKnowledgeGraph.url = jsObject.url;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetKnowledgeGraph.id = k;
                break;
            }
        }
    }

    return dotNetKnowledgeGraph;
}

