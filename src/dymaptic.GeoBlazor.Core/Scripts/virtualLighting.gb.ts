// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import VirtualLighting from '@arcgis/core/views/3d/environment/VirtualLighting';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class VirtualLightingGenerated implements IPropertyWrapper {
    public component: VirtualLighting;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: VirtualLighting) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async cloneWithWebsceneLighting(): Promise<void> {
        this.component.cloneWithWebsceneLighting();
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsVirtualLightingGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.directShadowsEnabled)) {
        properties.directShadowsEnabled = dotNetObject.directShadowsEnabled;
    }
    let jsVirtualLighting = new VirtualLighting(properties);

    let { default: VirtualLightingWrapper } = await import('./virtualLighting');
    let virtualLightingWrapper = new VirtualLightingWrapper(jsVirtualLighting);
    virtualLightingWrapper.geoBlazorId = dotNetObject.id;
    virtualLightingWrapper.viewId = viewId;
    virtualLightingWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(virtualLightingWrapper);
    jsObjectRefs[dotNetObject.id] = virtualLightingWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsVirtualLighting;
    
    let { buildDotNetVirtualLighting } = await import('./virtualLighting');
    let dnInstantiatedObject = await buildDotNetVirtualLighting(jsVirtualLighting);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type VirtualLighting detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for VirtualLighting', e);
    }
    
    return jsVirtualLighting;
}


export async function buildDotNetVirtualLightingGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVirtualLighting: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.directShadowsEnabled)) {
        dotNetVirtualLighting.directShadowsEnabled = jsObject.directShadowsEnabled;
    }
    if (hasValue(jsObject.type)) {
        dotNetVirtualLighting.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetVirtualLighting.id = k;
                break;
            }
        }
    }

    return dotNetVirtualLighting;
}

