// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import VirtualLighting from '@arcgis/core/views/3d/environment/VirtualLighting';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetVirtualLighting } from './virtualLighting';

export async function buildJsVirtualLightingGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.directShadowsEnabled)) {
        properties.directShadowsEnabled = dotNetObject.directShadowsEnabled;
    }
    let jsVirtualLighting = new VirtualLighting(properties);
    
    jsObjectRefs[dotNetObject.id] = jsVirtualLighting;
    arcGisObjectRefs[dotNetObject.id] = jsVirtualLighting;
    
    return jsVirtualLighting;
}


export async function buildDotNetVirtualLightingGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVirtualLighting: any = {};
    
    if (hasValue(jsObject.directShadowsEnabled)) {
        dotNetVirtualLighting.directShadowsEnabled = jsObject.directShadowsEnabled;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetVirtualLighting.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetVirtualLighting.id = geoBlazorId;
    }

    return dotNetVirtualLighting;
}

