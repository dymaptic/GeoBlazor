// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetArrayVariable } from './arrayVariable';

export async function buildJsArrayVariableGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsArrayVariable: any = {};
    if (hasValue(dotNetObject.elementType)) {
        let { buildJsArrayElementType } = await import('./arrayElementType');
        jsArrayVariable.elementType = await buildJsArrayElementType(dotNetObject.elementType, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.name)) {
        jsArrayVariable.name = dotNetObject.name;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsArrayVariable);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsArrayVariable;
    
    return jsArrayVariable;
}


export async function buildDotNetArrayVariableGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetArrayVariable: any = {};
    
    if (hasValue(jsObject.elementType)) {
        let { buildDotNetArrayElementType } = await import('./arrayElementType');
        dotNetArrayVariable.elementType = await buildDotNetArrayElementType(jsObject.elementType, layerId, viewId);
    }
    
    if (hasValue(jsObject.name)) {
        dotNetArrayVariable.name = jsObject.name;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetArrayVariable.type = jsObject.type;
    }
    

    return dotNetArrayVariable;
}

