import { buildDotNetImageBoundaryResult } from './imageBoundaryResult';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import ImageBoundaryResult from '@arcgis/core/rest/support/ImageBoundaryResult';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsImageBoundaryResultGenerated(dotNetObject: any): Promise<any> {
    let jsImageBoundaryResult = new ImageBoundaryResult();
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsGeometry } = await import('./geometry');
        jsImageBoundaryResult.geometry = buildJsGeometry(dotNetObject.geometry) as any;
    }

    if (hasValue(dotNetObject.area)) {
        jsImageBoundaryResult.area = dotNetObject.area;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsImageBoundaryResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageBoundaryResult;
    
    let dnInstantiatedObject = await buildDotNetImageBoundaryResult(jsImageBoundaryResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImageBoundaryResult', e);
    }
    
    return jsImageBoundaryResult;
}
export async function buildDotNetImageBoundaryResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageBoundaryResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.geometry)) {
            let { buildDotNetGeometry } = await import('./geometry');
            dotNetImageBoundaryResult.geometry = buildDotNetGeometry(jsObject.geometry);
        }
        if (hasValue(jsObject.area)) {
            dotNetImageBoundaryResult.area = jsObject.area;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImageBoundaryResult.id = k;
                break;
            }
        }
    }

    return dotNetImageBoundaryResult;
}

