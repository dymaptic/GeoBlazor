import {buildDotNetRelationshipColumn} from './relationshipColumn';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import RelationshipColumn from '@arcgis/core/widgets/FeatureTable/RelationshipColumn';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsRelationshipColumnGenerated(dotNetObject: any): Promise<any> {
    let jsRelationshipColumn = new RelationshipColumn();

    if (hasValue(dotNetObject.collapsed)) {
        jsRelationshipColumn.collapsed = dotNetObject.collapsed;
    }
    if (hasValue(dotNetObject.icon)) {
        jsRelationshipColumn.icon = dotNetObject.icon;
    }

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsRelationshipColumn);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRelationshipColumn;

    let dnInstantiatedObject = await buildDotNetRelationshipColumn(jsRelationshipColumn);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RelationshipColumn', e);
    }

    return jsRelationshipColumn;
}

export async function buildDotNetRelationshipColumnGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetRelationshipColumn: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.collapsed)) {
        dotNetRelationshipColumn.collapsed = jsObject.collapsed;
    }
    if (hasValue(jsObject.effectiveLabel)) {
        dotNetRelationshipColumn.effectiveLabel = jsObject.effectiveLabel;
    }
    if (hasValue(jsObject.icon)) {
        dotNetRelationshipColumn.icon = jsObject.icon;
    }
    if (hasValue(jsObject.originRelationship)) {
        dotNetRelationshipColumn.originRelationship = jsObject.originRelationship;
    }
    if (hasValue(jsObject.relationship)) {
        dotNetRelationshipColumn.relationship = jsObject.relationship;
    }
    if (hasValue(jsObject.relationshipId)) {
        dotNetRelationshipColumn.relationshipId = jsObject.relationshipId;
    }
    if (hasValue(jsObject.resizable)) {
        dotNetRelationshipColumn.resizable = jsObject.resizable;
    }
    if (hasValue(jsObject.textAlign)) {
        dotNetRelationshipColumn.textAlign = jsObject.textAlign;
    }
    if (hasValue(jsObject.width)) {
        dotNetRelationshipColumn.width = jsObject.width;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRelationshipColumn.id = k;
                break;
            }
        }
    }

    return dotNetRelationshipColumn;
}

