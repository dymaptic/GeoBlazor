// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetThematicStops } from './thematicStops';

export async function buildJsThematicStopsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsThematicStops: any = {}

    if (hasValue(dotNetObject.field)) {
        jsThematicStops.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.normalizationField)) {
        jsThematicStops.normalizationField = dotNetObject.normalizationField;
    }
    if (hasValue(dotNetObject.stops)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedStops } = dotNetObject.stops;
        jsThematicStops.stops = sanitizedStops;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        jsThematicStops.valueExpression = dotNetObject.valueExpression;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsThematicStops);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsThematicStops;
    
    let dnInstantiatedObject = await buildDotNetThematicStops(jsThematicStops);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ThematicStops', e);
    }
    
    return jsThematicStops;
}

export async function buildDotNetThematicStopsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetThematicStops: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.field)) {
            dotNetThematicStops.field = jsObject.field;
        }
        if (hasValue(jsObject.normalizationField)) {
            dotNetThematicStops.normalizationField = jsObject.normalizationField;
        }
        if (hasValue(jsObject.stops)) {
            dotNetThematicStops.stops = jsObject.stops;
        }
        if (hasValue(jsObject.type)) {
            dotNetThematicStops.type = jsObject.type;
        }
        if (hasValue(jsObject.valueExpression)) {
            dotNetThematicStops.valueExpression = jsObject.valueExpression;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetThematicStops.id = k;
                break;
            }
        }
    }

    return dotNetThematicStops;
}

