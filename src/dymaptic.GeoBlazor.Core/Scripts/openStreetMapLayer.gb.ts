// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import OpenStreetMapLayer from '@arcgis/core/layers/OpenStreetMapLayer';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class OpenStreetMapLayerGenerated implements IPropertyWrapper {
    public layer: OpenStreetMapLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: OpenStreetMapLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    async createLayerView(view: any,
        options: any): Promise<any> {
        return await this.layer.createLayerView(view,
            options);
    }

    async fetchAttributionData(): Promise<any> {
        return await this.layer.fetchAttributionData();
    }

    async fetchTile(level: any,
        row: any,
        col: any,
        options: any): Promise<any> {
        return await this.layer.fetchTile(level,
            row,
            col,
            options);
    }

    async getTileUrl(level: any,
        row: any,
        col: any): Promise<any> {
        return this.layer.getTileUrl(level,
            row,
            col);
    }

    async refresh(): Promise<void> {
        this.layer.refresh();
    }

    // region properties
    
    async getPortalItem(): Promise<any> {
        if (!hasValue(this.layer.portalItem)) {
            return null;
        }
        
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(this.layer.portalItem);
    }
    
    async setPortalItem(value: any): Promise<void> {
        let { buildJsPortalItem } = await import('./portalItem');
        this.layer.portalItem = await  buildJsPortalItem(value, this.layerId, this.viewId);
    }
    
    async getTileInfo(): Promise<any> {
        if (!hasValue(this.layer.tileInfo)) {
            return null;
        }
        
        let { buildDotNetTileInfo } = await import('./tileInfo');
        return await buildDotNetTileInfo(this.layer.tileInfo);
    }
    
    async setTileInfo(value: any): Promise<void> {
        let { buildJsTileInfo } = await import('./tileInfo');
        this.layer.tileInfo = await  buildJsTileInfo(value, this.layerId, this.viewId);
    }
    
    async getVisibilityTimeExtent(): Promise<any> {
        if (!hasValue(this.layer.visibilityTimeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.visibilityTimeExtent);
    }
    
    async setVisibilityTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.visibilityTimeExtent = await  buildJsTimeExtent(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}


export async function buildJsOpenStreetMapLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.portalItem)) {
        let { buildJsPortalItem } = await import('./portalItem');
        properties.portalItem = await buildJsPortalItem(dotNetObject.portalItem, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.tileInfo)) {
        let { buildJsTileInfo } = await import('./tileInfo');
        properties.tileInfo = await buildJsTileInfo(dotNetObject.tileInfo, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.visibilityTimeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.arcGISLayerId)) {
        properties.id = dotNetObject.arcGISLayerId;
    }
    if (hasValue(dotNetObject.blendMode)) {
        properties.blendMode = dotNetObject.blendMode;
    }
    if (hasValue(dotNetObject.copyright)) {
        properties.copyright = dotNetObject.copyright;
    }
    if (hasValue(dotNetObject.effect)) {
        properties.effect = dotNetObject.effect;
    }
    if (hasValue(dotNetObject.listMode)) {
        properties.listMode = dotNetObject.listMode;
    }
    if (hasValue(dotNetObject.maxScale)) {
        properties.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.minScale)) {
        properties.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.opacity)) {
        properties.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.persistenceEnabled)) {
        properties.persistenceEnabled = dotNetObject.persistenceEnabled;
    }
    if (hasValue(dotNetObject.refreshInterval)) {
        properties.refreshInterval = dotNetObject.refreshInterval;
    }
    if (hasValue(dotNetObject.subDomains)) {
        properties.subDomains = dotNetObject.subDomains;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.urlTemplate)) {
        properties.urlTemplate = dotNetObject.urlTemplate;
    }
    let jsOpenStreetMapLayer = new OpenStreetMapLayer(properties);
    jsOpenStreetMapLayer.on('layerview-create', async (evt: any) => {
        let { buildDotNetLayerViewCreateEvent } = await import('./layerViewCreateEvent');
        let dnEvent = await buildDotNetLayerViewCreateEvent(evt);
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreate', dnEvent);
    });
    
    jsOpenStreetMapLayer.on('layerview-create-error', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreateError', evt);
    });
    
    jsOpenStreetMapLayer.on('layerview-destroy', async (evt: any) => {
        let { buildDotNetLayerViewDestroyEvent } = await import('./layerViewDestroyEvent');
        let dnEvent = await buildDotNetLayerViewDestroyEvent(evt);
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsDestroy', dnEvent);
    });
    
    jsOpenStreetMapLayer.on('refresh', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsRefresh', evt);
    });
    

    let { default: OpenStreetMapLayerWrapper } = await import('./openStreetMapLayer');
    let openStreetMapLayerWrapper = new OpenStreetMapLayerWrapper(jsOpenStreetMapLayer);
    openStreetMapLayerWrapper.geoBlazorId = dotNetObject.id;
    openStreetMapLayerWrapper.viewId = viewId;
    openStreetMapLayerWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(openStreetMapLayerWrapper);
    jsObjectRefs[dotNetObject.id] = openStreetMapLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsOpenStreetMapLayer;
    
    let { buildDotNetOpenStreetMapLayer } = await import('./openStreetMapLayer');
    let dnInstantiatedObject = await buildDotNetOpenStreetMapLayer(jsOpenStreetMapLayer);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type OpenStreetMapLayer detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for OpenStreetMapLayer', e);
    }
    
    return jsOpenStreetMapLayer;
}


export async function buildDotNetOpenStreetMapLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetOpenStreetMapLayer: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.portalItem)) {
        let { buildDotNetPortalItem } = await import('./portalItem');
        dotNetOpenStreetMapLayer.portalItem = await buildDotNetPortalItem(jsObject.portalItem);
    }
    if (hasValue(jsObject.tileInfo)) {
        let { buildDotNetTileInfo } = await import('./tileInfo');
        dotNetOpenStreetMapLayer.tileInfo = await buildDotNetTileInfo(jsObject.tileInfo);
    }
    if (hasValue(jsObject.visibilityTimeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetOpenStreetMapLayer.visibilityTimeExtent = buildDotNetTimeExtent(jsObject.visibilityTimeExtent);
    }
    if (hasValue(jsObject.id)) {
        dotNetOpenStreetMapLayer.arcGISLayerId = jsObject.id;
    }
    if (hasValue(jsObject.blendMode)) {
        dotNetOpenStreetMapLayer.blendMode = jsObject.blendMode;
    }
    if (hasValue(jsObject.copyright)) {
        dotNetOpenStreetMapLayer.copyright = jsObject.copyright;
    }
    if (hasValue(jsObject.effect)) {
        dotNetOpenStreetMapLayer.effect = jsObject.effect;
    }
    if (hasValue(jsObject.fullExtent)) {
        dotNetOpenStreetMapLayer.fullExtent = jsObject.fullExtent;
    }
    if (hasValue(jsObject.listMode)) {
        dotNetOpenStreetMapLayer.listMode = jsObject.listMode;
    }
    if (hasValue(jsObject.loaded)) {
        dotNetOpenStreetMapLayer.loaded = jsObject.loaded;
    }
    if (hasValue(jsObject.maxScale)) {
        dotNetOpenStreetMapLayer.maxScale = jsObject.maxScale;
    }
    if (hasValue(jsObject.minScale)) {
        dotNetOpenStreetMapLayer.minScale = jsObject.minScale;
    }
    if (hasValue(jsObject.opacity)) {
        dotNetOpenStreetMapLayer.opacity = jsObject.opacity;
    }
    if (hasValue(jsObject.persistenceEnabled)) {
        dotNetOpenStreetMapLayer.persistenceEnabled = jsObject.persistenceEnabled;
    }
    if (hasValue(jsObject.refreshInterval)) {
        dotNetOpenStreetMapLayer.refreshInterval = jsObject.refreshInterval;
    }
    if (hasValue(jsObject.spatialReference)) {
        dotNetOpenStreetMapLayer.spatialReference = jsObject.spatialReference;
    }
    if (hasValue(jsObject.subDomains)) {
        dotNetOpenStreetMapLayer.subDomains = jsObject.subDomains;
    }
    if (hasValue(jsObject.tileServers)) {
        dotNetOpenStreetMapLayer.tileServers = jsObject.tileServers;
    }
    if (hasValue(jsObject.title)) {
        dotNetOpenStreetMapLayer.title = jsObject.title;
    }
    if (hasValue(jsObject.type)) {
        dotNetOpenStreetMapLayer.type = jsObject.type;
    }
    if (hasValue(jsObject.urlTemplate)) {
        dotNetOpenStreetMapLayer.urlTemplate = jsObject.urlTemplate;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetOpenStreetMapLayer.id = k;
                break;
            }
        }
    }

    return dotNetOpenStreetMapLayer;
}

