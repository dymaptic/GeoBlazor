// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetViewClickEvent } from './viewClickEvent';

export async function buildJsViewClickEventGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsViewClickEvent: any = {};

    if (hasValue(dotNetObject.button)) {
        jsViewClickEvent.button = dotNetObject.button;
    }
    if (hasValue(dotNetObject.buttons)) {
        jsViewClickEvent.buttons = dotNetObject.buttons;
    }
    if (hasValue(dotNetObject.mapPoint)) {
        const { id, dotNetComponentReference, ...sanitizedMapPoint } = dotNetObject.mapPoint;
        jsViewClickEvent.mapPoint = sanitizedMapPoint;
    }
    if (hasValue(dotNetObject.native)) {
        jsViewClickEvent.native = dotNetObject.native;
    }
    if (hasValue(dotNetObject.stopPropagation)) {
        jsViewClickEvent.stopPropagation = dotNetObject.stopPropagation;
    }
    if (hasValue(dotNetObject.timestamp)) {
        jsViewClickEvent.timestamp = dotNetObject.timestamp;
    }
    if (hasValue(dotNetObject.x)) {
        jsViewClickEvent.x = dotNetObject.x;
    }
    if (hasValue(dotNetObject.y)) {
        jsViewClickEvent.y = dotNetObject.y;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsViewClickEvent);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsViewClickEvent;
    
    let { buildDotNetViewClickEvent } = await import('./viewClickEvent');
    let dnInstantiatedObject = await buildDotNetViewClickEvent(jsViewClickEvent);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type ViewClickEvent detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ViewClickEvent', e);
    }
    
    return jsViewClickEvent;
}


export async function buildDotNetViewClickEventGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetViewClickEvent: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.button)) {
        dotNetViewClickEvent.button = jsObject.button;
    }
    if (hasValue(jsObject.buttons)) {
        dotNetViewClickEvent.buttons = jsObject.buttons;
    }
    if (hasValue(jsObject.mapPoint)) {
        dotNetViewClickEvent.mapPoint = jsObject.mapPoint;
    }
    if (hasValue(jsObject.native)) {
        dotNetViewClickEvent.native = jsObject.native;
    }
    if (hasValue(jsObject.stopPropagation)) {
        dotNetViewClickEvent.stopPropagation = jsObject.stopPropagation;
    }
    if (hasValue(jsObject.timestamp)) {
        dotNetViewClickEvent.timestamp = jsObject.timestamp;
    }
    if (hasValue(jsObject.type)) {
        dotNetViewClickEvent.type = jsObject.type;
    }
    if (hasValue(jsObject.x)) {
        dotNetViewClickEvent.x = jsObject.x;
    }
    if (hasValue(jsObject.y)) {
        dotNetViewClickEvent.y = jsObject.y;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetViewClickEvent.id = k;
                break;
            }
        }
    }

    return dotNetViewClickEvent;
}

