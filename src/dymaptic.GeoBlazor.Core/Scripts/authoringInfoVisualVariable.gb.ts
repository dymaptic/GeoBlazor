// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import AuthoringInfoVisualVariable from '@arcgis/core/renderers/support/AuthoringInfoVisualVariable';
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';

export async function buildJsAuthoringInfoVisualVariableGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.sizeStops) && dotNetObject.sizeStops.length > 0) {
        let { buildJsSizeStop } = await import('./sizeStop');
        properties.sizeStops = await Promise.all(dotNetObject.sizeStops.map(async i => await buildJsSizeStop(i))) as any;
    }

    if (hasValue(dotNetObject.endTime)) {
        properties.endTime = dotNetObject.endTime;
    }
    if (hasValue(dotNetObject.field)) {
        properties.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.maxSliderValue)) {
        properties.maxSliderValue = dotNetObject.maxSliderValue;
    }
    if (hasValue(dotNetObject.minSliderValue)) {
        properties.minSliderValue = dotNetObject.minSliderValue;
    }
    if (hasValue(dotNetObject.normalizationField)) {
        properties.normalizationField = dotNetObject.normalizationField;
    }
    if (hasValue(dotNetObject.referenceSizeScale)) {
        properties.referenceSizeScale = dotNetObject.referenceSizeScale;
    }
    if (hasValue(dotNetObject.referenceSizeSymbolStyle)) {
        properties.referenceSizeSymbolStyle = dotNetObject.referenceSizeSymbolStyle;
    }
    if (hasValue(dotNetObject.spikeSymbolStyle)) {
        properties.spikeSymbolStyle = dotNetObject.spikeSymbolStyle;
    }
    if (hasValue(dotNetObject.startTime)) {
        properties.startTime = dotNetObject.startTime;
    }
    if (hasValue(dotNetObject.style)) {
        properties.style = dotNetObject.style;
    }
    if (hasValue(dotNetObject.theme)) {
        properties.theme = dotNetObject.theme;
    }
    if (hasValue(dotNetObject.units)) {
        properties.units = dotNetObject.units;
    }
    let jsAuthoringInfoVisualVariable = new AuthoringInfoVisualVariable(properties);
    
    jsObjectRefs[dotNetObject.id] = jsAuthoringInfoVisualVariable;
    arcGisObjectRefs[dotNetObject.id] = jsAuthoringInfoVisualVariable;
    
    return jsAuthoringInfoVisualVariable;
}


export async function buildDotNetAuthoringInfoVisualVariableGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAuthoringInfoVisualVariable: any = {};
    
    if (hasValue(jsObject.sizeStops)) {
        let { buildDotNetSizeStop } = await import('./sizeStop');
        dotNetAuthoringInfoVisualVariable.sizeStops = await Promise.all(jsObject.sizeStops.map(async i => await buildDotNetSizeStop(i)));
    }
    
    if (hasValue(jsObject.endTime)) {
        dotNetAuthoringInfoVisualVariable.endTime = jsObject.endTime;
    }
    
    if (hasValue(jsObject.field)) {
        dotNetAuthoringInfoVisualVariable.field = jsObject.field;
    }
    
    if (hasValue(jsObject.maxSliderValue)) {
        dotNetAuthoringInfoVisualVariable.maxSliderValue = jsObject.maxSliderValue;
    }
    
    if (hasValue(jsObject.minSliderValue)) {
        dotNetAuthoringInfoVisualVariable.minSliderValue = jsObject.minSliderValue;
    }
    
    if (hasValue(jsObject.normalizationField)) {
        dotNetAuthoringInfoVisualVariable.normalizationField = jsObject.normalizationField;
    }
    
    if (hasValue(jsObject.referenceSizeScale)) {
        dotNetAuthoringInfoVisualVariable.referenceSizeScale = jsObject.referenceSizeScale;
    }
    
    if (hasValue(jsObject.referenceSizeSymbolStyle)) {
        dotNetAuthoringInfoVisualVariable.referenceSizeSymbolStyle = removeCircularReferences(jsObject.referenceSizeSymbolStyle);
    }
    
    if (hasValue(jsObject.spikeSymbolStyle)) {
        dotNetAuthoringInfoVisualVariable.spikeSymbolStyle = removeCircularReferences(jsObject.spikeSymbolStyle);
    }
    
    if (hasValue(jsObject.startTime)) {
        dotNetAuthoringInfoVisualVariable.startTime = jsObject.startTime;
    }
    
    if (hasValue(jsObject.style)) {
        dotNetAuthoringInfoVisualVariable.style = removeCircularReferences(jsObject.style);
    }
    
    if (hasValue(jsObject.theme)) {
        dotNetAuthoringInfoVisualVariable.theme = removeCircularReferences(jsObject.theme);
    }
    
    if (hasValue(jsObject.type)) {
        dotNetAuthoringInfoVisualVariable.type = removeCircularReferences(jsObject.type);
    }
    
    if (hasValue(jsObject.units)) {
        dotNetAuthoringInfoVisualVariable.units = removeCircularReferences(jsObject.units);
    }
    

    return dotNetAuthoringInfoVisualVariable;
}

