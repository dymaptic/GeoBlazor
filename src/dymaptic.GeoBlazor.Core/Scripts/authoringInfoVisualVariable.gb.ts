// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import AuthoringInfoVisualVariable from '@arcgis/core/renderers/support/AuthoringInfoVisualVariable';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class AuthoringInfoVisualVariableGenerated implements IPropertyWrapper {
    public component: AuthoringInfoVisualVariable;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: AuthoringInfoVisualVariable) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getSizeStops(layerId: string | null, viewId: string | null): Promise<any> {
        let { buildDotNetSizeStop } = await import('./sizeStop');
        return this.component.sizeStops.map(async i => await buildDotNetSizeStop(i, layerId, viewId));
    }
    
    async setSizeStops(value: any, layerId: string | null, viewId: string | null): Promise<void> {
        let { buildJsSizeStop } = await import('./sizeStop');
        this.component.sizeStops = value.map(async i => await buildJsSizeStop(i, layerId, viewId));
    }
    
    async getTheme(layerId: string | null, viewId: string | null): Promise<any> {
        let { buildDotNetTheme } = await import('./theme');
        return await buildDotNetTheme(this.component.theme, layerId, viewId);
    }
    async setTheme(value: any, layerId: string | null, viewId: string | null): Promise<void> {
        let { buildJsTheme } = await import('./theme');
        this.component.theme = await buildJsTheme(value, layerId, viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsAuthoringInfoVisualVariableGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let { default: AuthoringInfoVisualVariable } = await import('@arcgis/core/renderers/support/AuthoringInfoVisualVariable');
    let jsAuthoringInfoVisualVariable = new AuthoringInfoVisualVariable();
    if (hasValue(dotNetObject.sizeStops)) {
        let { buildJsSizeStop } = await import('./sizeStop');
        jsAuthoringInfoVisualVariable.sizeStops = dotNetObject.sizeStops.map(async i => await buildJsSizeStop(i, layerId, viewId)) as any;
    }
    if (hasValue(dotNetObject.theme)) {
        let { buildJsTheme } = await import('./theme');
        jsAuthoringInfoVisualVariable.theme = await buildJsTheme(dotNetObject.theme, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.endTime)) {
        jsAuthoringInfoVisualVariable.endTime = dotNetObject.endTime;
    }
    if (hasValue(dotNetObject.field)) {
        jsAuthoringInfoVisualVariable.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.maxSliderValue)) {
        jsAuthoringInfoVisualVariable.maxSliderValue = dotNetObject.maxSliderValue;
    }
    if (hasValue(dotNetObject.minSliderValue)) {
        jsAuthoringInfoVisualVariable.minSliderValue = dotNetObject.minSliderValue;
    }
    if (hasValue(dotNetObject.normalizationField)) {
        jsAuthoringInfoVisualVariable.normalizationField = dotNetObject.normalizationField;
    }
    if (hasValue(dotNetObject.referenceSizeScale)) {
        jsAuthoringInfoVisualVariable.referenceSizeScale = dotNetObject.referenceSizeScale;
    }
    if (hasValue(dotNetObject.referenceSizeSymbolStyle)) {
        jsAuthoringInfoVisualVariable.referenceSizeSymbolStyle = dotNetObject.referenceSizeSymbolStyle;
    }
    if (hasValue(dotNetObject.startTime)) {
        jsAuthoringInfoVisualVariable.startTime = dotNetObject.startTime;
    }
    if (hasValue(dotNetObject.style)) {
        jsAuthoringInfoVisualVariable.style = dotNetObject.style;
    }
    if (hasValue(dotNetObject.type)) {
        jsAuthoringInfoVisualVariable.type = dotNetObject.type;
    }
    if (hasValue(dotNetObject.units)) {
        jsAuthoringInfoVisualVariable.units = dotNetObject.units;
    }
    let { default: AuthoringInfoVisualVariableWrapper } = await import('./authoringInfoVisualVariable');
    let authoringInfoVisualVariableWrapper = new AuthoringInfoVisualVariableWrapper(jsAuthoringInfoVisualVariable);
    authoringInfoVisualVariableWrapper.geoBlazorId = dotNetObject.id;
    authoringInfoVisualVariableWrapper.viewId = viewId;
    authoringInfoVisualVariableWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(authoringInfoVisualVariableWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = authoringInfoVisualVariableWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsAuthoringInfoVisualVariable;
    
    return jsAuthoringInfoVisualVariable;
}

export async function buildDotNetAuthoringInfoVisualVariableGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAuthoringInfoVisualVariable: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.sizeStops)) {
            let { buildDotNetSizeStop } = await import('./sizeStop');
            dotNetAuthoringInfoVisualVariable.sizeStops = jsObject.sizeStops.map(async i => await buildDotNetSizeStop(i, layerId, viewId));
        }
        if (hasValue(jsObject.theme)) {
            let { buildDotNetTheme } = await import('./theme');
            dotNetAuthoringInfoVisualVariable.theme = await buildDotNetTheme(jsObject.theme, layerId, viewId);
        }
        dotNetAuthoringInfoVisualVariable.endTime = jsObject.endTime;
        dotNetAuthoringInfoVisualVariable.field = jsObject.field;
        dotNetAuthoringInfoVisualVariable.maxSliderValue = jsObject.maxSliderValue;
        dotNetAuthoringInfoVisualVariable.minSliderValue = jsObject.minSliderValue;
        dotNetAuthoringInfoVisualVariable.normalizationField = jsObject.normalizationField;
        dotNetAuthoringInfoVisualVariable.referenceSizeScale = jsObject.referenceSizeScale;
        dotNetAuthoringInfoVisualVariable.referenceSizeSymbolStyle = jsObject.referenceSizeSymbolStyle;
        dotNetAuthoringInfoVisualVariable.startTime = jsObject.startTime;
        dotNetAuthoringInfoVisualVariable.style = jsObject.style;
        dotNetAuthoringInfoVisualVariable.type = jsObject.type;
        dotNetAuthoringInfoVisualVariable.units = jsObject.units;
    return dotNetAuthoringInfoVisualVariable;
}

