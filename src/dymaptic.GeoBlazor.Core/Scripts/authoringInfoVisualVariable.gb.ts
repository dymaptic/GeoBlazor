// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import AuthoringInfoVisualVariable from '@arcgis/core/renderers/support/AuthoringInfoVisualVariable';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetAuthoringInfoVisualVariable } from './authoringInfoVisualVariable';

export async function buildJsAuthoringInfoVisualVariableGenerated(dotNetObject: any): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.endTime)) {
        properties.endTime = dotNetObject.endTime;
    }
    if (hasValue(dotNetObject.field)) {
        properties.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.maxSliderValue)) {
        properties.maxSliderValue = dotNetObject.maxSliderValue;
    }
    if (hasValue(dotNetObject.minSliderValue)) {
        properties.minSliderValue = dotNetObject.minSliderValue;
    }
    if (hasValue(dotNetObject.normalizationField)) {
        properties.normalizationField = dotNetObject.normalizationField;
    }
    if (hasValue(dotNetObject.referenceSizeScale)) {
        properties.referenceSizeScale = dotNetObject.referenceSizeScale;
    }
    if (hasValue(dotNetObject.referenceSizeSymbolStyle)) {
        properties.referenceSizeSymbolStyle = dotNetObject.referenceSizeSymbolStyle;
    }
    if (hasValue(dotNetObject.sizeStops)) {
        const { id, dotNetComponentReference, ...sanitizedSizeStops } = dotNetObject.sizeStops;
        properties.sizeStops = sanitizedSizeStops;
    }
    if (hasValue(dotNetObject.startTime)) {
        properties.startTime = dotNetObject.startTime;
    }
    if (hasValue(dotNetObject.style)) {
        properties.style = dotNetObject.style;
    }
    if (hasValue(dotNetObject.theme)) {
        properties.theme = dotNetObject.theme;
    }
    if (hasValue(dotNetObject.units)) {
        properties.units = dotNetObject.units;
    }
    let jsAuthoringInfoVisualVariable = new AuthoringInfoVisualVariable(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsAuthoringInfoVisualVariable);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsAuthoringInfoVisualVariable;
    
    let { buildDotNetAuthoringInfoVisualVariable } = await import('./authoringInfoVisualVariable');
    let dnInstantiatedObject = await buildDotNetAuthoringInfoVisualVariable(jsAuthoringInfoVisualVariable);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type AuthoringInfoVisualVariable detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for AuthoringInfoVisualVariable', e);
    }
    
    return jsAuthoringInfoVisualVariable;
}


export async function buildDotNetAuthoringInfoVisualVariableGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAuthoringInfoVisualVariable: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.endTime)) {
        dotNetAuthoringInfoVisualVariable.endTime = jsObject.endTime;
    }
    if (hasValue(jsObject.field)) {
        dotNetAuthoringInfoVisualVariable.field = jsObject.field;
    }
    if (hasValue(jsObject.maxSliderValue)) {
        dotNetAuthoringInfoVisualVariable.maxSliderValue = jsObject.maxSliderValue;
    }
    if (hasValue(jsObject.minSliderValue)) {
        dotNetAuthoringInfoVisualVariable.minSliderValue = jsObject.minSliderValue;
    }
    if (hasValue(jsObject.normalizationField)) {
        dotNetAuthoringInfoVisualVariable.normalizationField = jsObject.normalizationField;
    }
    if (hasValue(jsObject.referenceSizeScale)) {
        dotNetAuthoringInfoVisualVariable.referenceSizeScale = jsObject.referenceSizeScale;
    }
    if (hasValue(jsObject.referenceSizeSymbolStyle)) {
        dotNetAuthoringInfoVisualVariable.referenceSizeSymbolStyle = jsObject.referenceSizeSymbolStyle;
    }
    if (hasValue(jsObject.sizeStops)) {
        dotNetAuthoringInfoVisualVariable.sizeStops = jsObject.sizeStops;
    }
    if (hasValue(jsObject.startTime)) {
        dotNetAuthoringInfoVisualVariable.startTime = jsObject.startTime;
    }
    if (hasValue(jsObject.style)) {
        dotNetAuthoringInfoVisualVariable.style = jsObject.style;
    }
    if (hasValue(jsObject.theme)) {
        dotNetAuthoringInfoVisualVariable.theme = jsObject.theme;
    }
    if (hasValue(jsObject.type)) {
        dotNetAuthoringInfoVisualVariable.type = jsObject.type;
    }
    if (hasValue(jsObject.units)) {
        dotNetAuthoringInfoVisualVariable.units = jsObject.units;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetAuthoringInfoVisualVariable.id = k;
                break;
            }
        }
    }

    return dotNetAuthoringInfoVisualVariable;
}

