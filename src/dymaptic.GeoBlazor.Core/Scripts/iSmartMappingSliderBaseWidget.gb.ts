// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import SmartMappingSliderBase = __esri.SmartMappingSliderBase;
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ISmartMappingSliderBaseWidgetGenerated implements IPropertyWrapper {
    public widget: SmartMappingSliderBase;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: SmartMappingSliderBase) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.histogramConfig)) {
            let { buildJsHistogramConfig } = await import('./histogramConfig');
            this.widget.histogramConfig = await buildJsHistogramConfig(dotNetObject.histogramConfig, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.visibleElements)) {
            let { buildJsSmartMappingSliderBaseVisibleElements } = await import('./smartMappingSliderBaseVisibleElements');
            this.widget.visibleElements = await buildJsSmartMappingSliderBaseVisibleElements(dotNetObject.visibleElements, this.layerId, this.viewId) as any;
        }

        if (hasValue(dotNetObject.container)) {
            this.widget.container = dotNetObject.container;
        }
        if (hasValue(dotNetObject.icon)) {
            this.widget.icon = dotNetObject.icon;
        }
        if (hasValue(dotNetObject.label)) {
            this.widget.label = dotNetObject.label;
        }
        if (hasValue(dotNetObject.max)) {
            this.widget.max = dotNetObject.max;
        }
        if (hasValue(dotNetObject.min)) {
            this.widget.min = dotNetObject.min;
        }
        if (hasValue(dotNetObject.precision)) {
            this.widget.precision = dotNetObject.precision;
        }
        if (hasValue(dotNetObject.syncedSegmentsEnabled)) {
            this.widget.syncedSegmentsEnabled = dotNetObject.syncedSegmentsEnabled;
        }
        if (hasValue(dotNetObject.widgetId)) {
            this.widget.id = dotNetObject.widgetId;
        }
        if (hasValue(dotNetObject.zoomOptions)) {
            this.widget.zoomOptions = dotNetObject.zoomOptions;
        }
    }
    
    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async own(handleOrHandles: any): Promise<void> {
        let { buildJsWatchHandle } = await import('./watchHandle');
        let jsHandleOrHandles = await buildJsWatchHandle(handleOrHandles, this.layerId, this.viewId) as any;
        this.widget.own(jsHandleOrHandles);
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async render(): Promise<any> {
        return this.widget.render();
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async when(callback: any,
        errback: any): Promise<any> {
        return await this.widget.when(callback,
            errback);
    }

    // region properties
    
    async getHistogramConfig(): Promise<any> {
        if (!hasValue(this.widget.histogramConfig)) {
            return null;
        }
        
        let { buildDotNetHistogramConfig } = await import('./histogramConfig');
        return await buildDotNetHistogramConfig(this.widget.histogramConfig);
    }
    
    async setHistogramConfig(value: any): Promise<void> {
        let { buildJsHistogramConfig } = await import('./histogramConfig');
        this.widget.histogramConfig = await  buildJsHistogramConfig(value, this.layerId, this.viewId);
    }
    
    async getVisibleElements(): Promise<any> {
        if (!hasValue(this.widget.visibleElements)) {
            return null;
        }
        
        let { buildDotNetSmartMappingSliderBaseVisibleElements } = await import('./smartMappingSliderBaseVisibleElements');
        return await buildDotNetSmartMappingSliderBaseVisibleElements(this.widget.visibleElements);
    }
    
    async setVisibleElements(value: any): Promise<void> {
        let { buildJsSmartMappingSliderBaseVisibleElements } = await import('./smartMappingSliderBaseVisibleElements');
        this.widget.visibleElements = await  buildJsSmartMappingSliderBaseVisibleElements(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsISmartMappingSliderBaseWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSmartMappingSliderBase: any = {};
    if (hasValue(dotNetObject.histogramConfig)) {
        let { buildJsHistogramConfig } = await import('./histogramConfig');
        jsSmartMappingSliderBase.histogramConfig = await buildJsHistogramConfig(dotNetObject.histogramConfig, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.hasInputFormatFunction) && dotNetObject.hasInputFormatFunction) {
        jsSmartMappingSliderBase.inputFormatFunction = async (value,
        type,
        index) => {

            let func = new Function('value',
            'type',
            'index', dotNetObject.inputFormatFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }
    if (hasValue(dotNetObject.hasInputParseFunction) && dotNetObject.hasInputParseFunction) {
        jsSmartMappingSliderBase.inputParseFunction = async (value,
        type,
        index) => {

            let func = new Function('value',
            'type',
            'index', dotNetObject.inputParseFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }
    if (hasValue(dotNetObject.hasLabelFormatFunction) && dotNetObject.hasLabelFormatFunction) {
        jsSmartMappingSliderBase.labelFormatFunction = async (value,
        type,
        index) => {

            let func = new Function('value',
            'type',
            'index', dotNetObject.labelFormatFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }
    if (hasValue(dotNetObject.visibleElements)) {
        let { buildJsSmartMappingSliderBaseVisibleElements } = await import('./smartMappingSliderBaseVisibleElements');
        jsSmartMappingSliderBase.visibleElements = await buildJsSmartMappingSliderBaseVisibleElements(dotNetObject.visibleElements, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.container)) {
        jsSmartMappingSliderBase.container = dotNetObject.container;
    }
    if (hasValue(dotNetObject.icon)) {
        jsSmartMappingSliderBase.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.label)) {
        jsSmartMappingSliderBase.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.max)) {
        jsSmartMappingSliderBase.max = dotNetObject.max;
    }
    if (hasValue(dotNetObject.min)) {
        jsSmartMappingSliderBase.min = dotNetObject.min;
    }
    if (hasValue(dotNetObject.precision)) {
        jsSmartMappingSliderBase.precision = dotNetObject.precision;
    }
    if (hasValue(dotNetObject.syncedSegmentsEnabled)) {
        jsSmartMappingSliderBase.syncedSegmentsEnabled = dotNetObject.syncedSegmentsEnabled;
    }
    if (hasValue(dotNetObject.widgetId)) {
        jsSmartMappingSliderBase.id = dotNetObject.widgetId;
    }
    if (hasValue(dotNetObject.zoomOptions)) {
        jsSmartMappingSliderBase.zoomOptions = dotNetObject.zoomOptions;
    }
    jsSmartMappingSliderBase.on('max-change', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsaxChange', evt);
    });
    
    jsSmartMappingSliderBase.on('segment-drag', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsegmentDrag', evt);
    });
    
    jsSmartMappingSliderBase.on('thumb-change', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJshumbChange', evt);
    });
    
    jsSmartMappingSliderBase.on('thumb-drag', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJshumbDrag', evt);
    });
    
    jsSmartMappingSliderBase.on('min-change', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsinChange', evt);
    });
    

    let { default: ISmartMappingSliderBaseWidgetWrapper } = await import('./iSmartMappingSliderBaseWidget');
    let iSmartMappingSliderBaseWidgetWrapper = new ISmartMappingSliderBaseWidgetWrapper(jsSmartMappingSliderBase);
    iSmartMappingSliderBaseWidgetWrapper.geoBlazorId = dotNetObject.id;
    iSmartMappingSliderBaseWidgetWrapper.viewId = viewId;
    iSmartMappingSliderBaseWidgetWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(iSmartMappingSliderBaseWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = iSmartMappingSliderBaseWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsSmartMappingSliderBase;
    
    let { buildDotNetISmartMappingSliderBaseWidget } = await import('./iSmartMappingSliderBaseWidget');
    let dnInstantiatedObject = await buildDotNetISmartMappingSliderBaseWidget(jsSmartMappingSliderBase);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type ISmartMappingSliderBaseWidget detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ISmartMappingSliderBaseWidget', e);
    }
    
    return jsSmartMappingSliderBase;
}


export async function buildDotNetISmartMappingSliderBaseWidgetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetISmartMappingSliderBaseWidget: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.histogramConfig)) {
        let { buildDotNetHistogramConfig } = await import('./histogramConfig');
        dotNetISmartMappingSliderBaseWidget.histogramConfig = await buildDotNetHistogramConfig(jsObject.histogramConfig);
    }
    if (hasValue(jsObject.visibleElements)) {
        let { buildDotNetSmartMappingSliderBaseVisibleElements } = await import('./smartMappingSliderBaseVisibleElements');
        dotNetISmartMappingSliderBaseWidget.visibleElements = await buildDotNetSmartMappingSliderBaseVisibleElements(jsObject.visibleElements);
    }
    if (hasValue(jsObject.container)) {
        dotNetISmartMappingSliderBaseWidget.container = jsObject.container;
    }
    if (hasValue(jsObject.icon)) {
        dotNetISmartMappingSliderBaseWidget.icon = jsObject.icon;
    }
    if (hasValue(jsObject.inputFormatFunction)) {
        dotNetISmartMappingSliderBaseWidget.inputFormatFunction = jsObject.inputFormatFunction;
    }
    if (hasValue(jsObject.inputParseFunction)) {
        dotNetISmartMappingSliderBaseWidget.inputParseFunction = jsObject.inputParseFunction;
    }
    if (hasValue(jsObject.label)) {
        dotNetISmartMappingSliderBaseWidget.label = jsObject.label;
    }
    if (hasValue(jsObject.labelFormatFunction)) {
        dotNetISmartMappingSliderBaseWidget.labelFormatFunction = jsObject.labelFormatFunction;
    }
    if (hasValue(jsObject.max)) {
        dotNetISmartMappingSliderBaseWidget.max = jsObject.max;
    }
    if (hasValue(jsObject.min)) {
        dotNetISmartMappingSliderBaseWidget.min = jsObject.min;
    }
    if (hasValue(jsObject.precision)) {
        dotNetISmartMappingSliderBaseWidget.precision = jsObject.precision;
    }
    if (hasValue(jsObject.state)) {
        dotNetISmartMappingSliderBaseWidget.state = jsObject.state;
    }
    if (hasValue(jsObject.syncedSegmentsEnabled)) {
        dotNetISmartMappingSliderBaseWidget.syncedSegmentsEnabled = jsObject.syncedSegmentsEnabled;
    }
    if (hasValue(jsObject.type)) {
        dotNetISmartMappingSliderBaseWidget.type = jsObject.type;
    }
    if (hasValue(jsObject.id)) {
        dotNetISmartMappingSliderBaseWidget.widgetId = jsObject.id;
    }
    if (hasValue(jsObject.zoomOptions)) {
        dotNetISmartMappingSliderBaseWidget.zoomOptions = jsObject.zoomOptions;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetISmartMappingSliderBaseWidget.id = geoBlazorId;
    }

    return dotNetISmartMappingSliderBaseWidget;
}

