// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import SmartMappingSliderBase = __esri.SmartMappingSliderBase;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ISmartMappingSliderBaseWidgetGenerated implements IPropertyWrapper {
    public widget: SmartMappingSliderBase;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: SmartMappingSliderBase) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}

export async function buildJsISmartMappingSliderBaseWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSmartMappingSliderBase = new SmartMappingSliderBase();
    if (hasValue(dotNetObject.inputFormatFunction)) {
        jsSmartMappingSliderBase.inputFormatFunction = dotNetObject.smartMappingSliderBaseLabelFormatter;
    }
    if (hasValue(dotNetObject.inputParseFunction)) {
        jsSmartMappingSliderBase.inputParseFunction = dotNetObject.inputParser;
    }
    if (hasValue(dotNetObject.labelFormatFunction)) {
        jsSmartMappingSliderBase.labelFormatFunction = dotNetObject.smartMappingSliderBaseLabelFormatter;
    }

    if (hasValue(dotNetObject.histogramConfig)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedHistogramConfig } = dotNetObject.histogramConfig;
        jsSmartMappingSliderBase.histogramConfig = sanitizedHistogramConfig;
    }
    if (hasValue(dotNetObject.max)) {
        jsSmartMappingSliderBase.max = dotNetObject.max;
    }
    if (hasValue(dotNetObject.min)) {
        jsSmartMappingSliderBase.min = dotNetObject.min;
    }
    if (hasValue(dotNetObject.precision)) {
        jsSmartMappingSliderBase.precision = dotNetObject.precision;
    }
    if (hasValue(dotNetObject.syncedSegmentsEnabled)) {
        jsSmartMappingSliderBase.syncedSegmentsEnabled = dotNetObject.syncedSegmentsEnabled;
    }
    if (hasValue(dotNetObject.visibleElements)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedVisibleElements } = dotNetObject.visibleElements;
        jsSmartMappingSliderBase.visibleElements = sanitizedVisibleElements;
    }
    if (hasValue(dotNetObject.zoomOptions)) {
        jsSmartMappingSliderBase.zoomOptions = dotNetObject.zoomOptions;
    }
    jsSmartMappingSliderBase.on('max-change', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsaxChange', evt);
    });
    
    jsSmartMappingSliderBase.on('segment-drag', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsegmentDrag', evt);
    });
    
    jsSmartMappingSliderBase.on('thumb-change', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJshumbChange', evt);
    });
    
    jsSmartMappingSliderBase.on('thumb-drag', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJshumbDrag', evt);
    });
    
    jsSmartMappingSliderBase.on('min-change', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsinChange', evt);
    });
    

    let { default: ISmartMappingSliderBaseWidgetWrapper } = await import('./iSmartMappingSliderBaseWidget');
    let iSmartMappingSliderBaseWidgetWrapper = new ISmartMappingSliderBaseWidgetWrapper(jsSmartMappingSliderBase);
    iSmartMappingSliderBaseWidgetWrapper.geoBlazorId = dotNetObject.id;
    iSmartMappingSliderBaseWidgetWrapper.viewId = viewId;
    iSmartMappingSliderBaseWidgetWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(iSmartMappingSliderBaseWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = iSmartMappingSliderBaseWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsSmartMappingSliderBase;
    let { buildDotNetISmartMappingSliderBaseWidget } = await import('./iSmartMappingSliderBaseWidget');
    let dnInstantiatedObject = await buildDotNetISmartMappingSliderBaseWidget(jsSmartMappingSliderBase);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ISmartMappingSliderBaseWidget', e);
    }
    
    return jsSmartMappingSliderBase;
}
export async function buildDotNetISmartMappingSliderBaseWidgetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetISmartMappingSliderBaseWidget: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.histogramConfig)) {
            dotNetISmartMappingSliderBaseWidget.histogramConfig = jsObject.histogramConfig;
        }
        if (hasValue(jsObject.inputFormatFunction)) {
            dotNetISmartMappingSliderBaseWidget.inputFormatFunction = jsObject.inputFormatFunction;
        }
        if (hasValue(jsObject.inputParseFunction)) {
            dotNetISmartMappingSliderBaseWidget.inputParseFunction = jsObject.inputParseFunction;
        }
        if (hasValue(jsObject.labelFormatFunction)) {
            dotNetISmartMappingSliderBaseWidget.labelFormatFunction = jsObject.labelFormatFunction;
        }
        if (hasValue(jsObject.max)) {
            dotNetISmartMappingSliderBaseWidget.max = jsObject.max;
        }
        if (hasValue(jsObject.min)) {
            dotNetISmartMappingSliderBaseWidget.min = jsObject.min;
        }
        if (hasValue(jsObject.precision)) {
            dotNetISmartMappingSliderBaseWidget.precision = jsObject.precision;
        }
        if (hasValue(jsObject.state)) {
            dotNetISmartMappingSliderBaseWidget.state = jsObject.state;
        }
        if (hasValue(jsObject.syncedSegmentsEnabled)) {
            dotNetISmartMappingSliderBaseWidget.syncedSegmentsEnabled = jsObject.syncedSegmentsEnabled;
        }
        if (hasValue(jsObject.type)) {
            dotNetISmartMappingSliderBaseWidget.type = jsObject.type;
        }
        if (hasValue(jsObject.visibleElements)) {
            dotNetISmartMappingSliderBaseWidget.visibleElements = jsObject.visibleElements;
        }
        if (hasValue(jsObject.zoomOptions)) {
            dotNetISmartMappingSliderBaseWidget.zoomOptions = jsObject.zoomOptions;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetISmartMappingSliderBaseWidget.id = k;
                break;
            }
        }
    }

    return dotNetISmartMappingSliderBaseWidget;
}

