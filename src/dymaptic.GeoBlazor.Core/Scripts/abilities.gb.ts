// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import Abilities = __esri.Abilities;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class AbilitiesGenerated implements IPropertyWrapper {
    public component: Abilities;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: Abilities) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsAbilitiesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsAbilities: any = {}

    if (hasValue(dotNetObject.attachmentsContent)) {
        jsAbilities.attachmentsContent = dotNetObject.attachmentsContent;
    }
    if (hasValue(dotNetObject.chartAnimation)) {
        jsAbilities.chartAnimation = dotNetObject.chartAnimation;
    }
    if (hasValue(dotNetObject.customContent)) {
        jsAbilities.customContent = dotNetObject.customContent;
    }
    if (hasValue(dotNetObject.fieldsContent)) {
        jsAbilities.fieldsContent = dotNetObject.fieldsContent;
    }
    if (hasValue(dotNetObject.mediaContent)) {
        jsAbilities.mediaContent = dotNetObject.mediaContent;
    }
    if (hasValue(dotNetObject.textContent)) {
        jsAbilities.textContent = dotNetObject.textContent;
    }
    let { default: AbilitiesWrapper } = await import('./abilities');
    let abilitiesWrapper = new AbilitiesWrapper(jsAbilities);
    abilitiesWrapper.geoBlazorId = dotNetObject.id;
    abilitiesWrapper.viewId = viewId;
    abilitiesWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(abilitiesWrapper);
    jsObjectRefs[dotNetObject.id] = abilitiesWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsAbilities;
    
    let { buildDotNetAbilities } = await import('./abilities');
    let dnInstantiatedObject = await buildDotNetAbilities(jsAbilities, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Abilities', e);
    }
    
    return jsAbilities;
}

export async function buildDotNetAbilitiesGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAbilities: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.attachmentsContent)) {
            dotNetAbilities.attachmentsContent = jsObject.attachmentsContent;
        }
        if (hasValue(jsObject.chartAnimation)) {
            dotNetAbilities.chartAnimation = jsObject.chartAnimation;
        }
        if (hasValue(jsObject.customContent)) {
            dotNetAbilities.customContent = jsObject.customContent;
        }
        if (hasValue(jsObject.fieldsContent)) {
            dotNetAbilities.fieldsContent = jsObject.fieldsContent;
        }
        if (hasValue(jsObject.mediaContent)) {
            dotNetAbilities.mediaContent = jsObject.mediaContent;
        }
        if (hasValue(jsObject.textContent)) {
            dotNetAbilities.textContent = jsObject.textContent;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetAbilities.id = k;
                break;
            }
        }
    }

    return dotNetAbilities;
}

