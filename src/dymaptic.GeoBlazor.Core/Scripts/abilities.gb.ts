// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetAbilities } from './abilities';

export async function buildJsAbilitiesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsAbilities: any = {};

    if (hasValue(dotNetObject.attachmentsContent)) {
        jsAbilities.attachmentsContent = dotNetObject.attachmentsContent;
    }
    if (hasValue(dotNetObject.chartAnimation)) {
        jsAbilities.chartAnimation = dotNetObject.chartAnimation;
    }
    if (hasValue(dotNetObject.customContent)) {
        jsAbilities.customContent = dotNetObject.customContent;
    }
    if (hasValue(dotNetObject.fieldsContent)) {
        jsAbilities.fieldsContent = dotNetObject.fieldsContent;
    }
    if (hasValue(dotNetObject.mediaContent)) {
        jsAbilities.mediaContent = dotNetObject.mediaContent;
    }
    if (hasValue(dotNetObject.relationshipContent)) {
        jsAbilities.relationshipContent = dotNetObject.relationshipContent;
    }
    if (hasValue(dotNetObject.textContent)) {
        jsAbilities.textContent = dotNetObject.textContent;
    }
    if (hasValue(dotNetObject.utilityNetworkAssociationsContent)) {
        jsAbilities.utilityNetworkAssociationsContent = dotNetObject.utilityNetworkAssociationsContent;
    }
    
    jsObjectRefs[dotNetObject.id] = jsAbilities;
    arcGisObjectRefs[dotNetObject.id] = jsAbilities;
    
    return jsAbilities;
}


export async function buildDotNetAbilitiesGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAbilities: any = {};
    
    if (hasValue(jsObject.attachmentsContent)) {
        dotNetAbilities.attachmentsContent = jsObject.attachmentsContent;
    }
    
    if (hasValue(jsObject.chartAnimation)) {
        dotNetAbilities.chartAnimation = jsObject.chartAnimation;
    }
    
    if (hasValue(jsObject.customContent)) {
        dotNetAbilities.customContent = jsObject.customContent;
    }
    
    if (hasValue(jsObject.fieldsContent)) {
        dotNetAbilities.fieldsContent = jsObject.fieldsContent;
    }
    
    if (hasValue(jsObject.mediaContent)) {
        dotNetAbilities.mediaContent = jsObject.mediaContent;
    }
    
    if (hasValue(jsObject.relationshipContent)) {
        dotNetAbilities.relationshipContent = jsObject.relationshipContent;
    }
    
    if (hasValue(jsObject.textContent)) {
        dotNetAbilities.textContent = jsObject.textContent;
    }
    
    if (hasValue(jsObject.utilityNetworkAssociationsContent)) {
        dotNetAbilities.utilityNetworkAssociationsContent = jsObject.utilityNetworkAssociationsContent;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetAbilities.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetAbilities.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetAbilities.id)) {
        jsObjectRefs[dotNetAbilities.id] ??= jsObject;
        arcGisObjectRefs[dotNetAbilities.id] ??= jsObject;
    }

    return dotNetAbilities;
}

