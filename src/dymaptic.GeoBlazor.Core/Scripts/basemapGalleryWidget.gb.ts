// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import BasemapGallery from '@arcgis/core/widgets/BasemapGallery';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class BasemapGalleryWidgetGenerated implements IPropertyWrapper {
    public widget: BasemapGallery;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: BasemapGallery) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    
    // region properties
    
    async getActiveBasemap(): Promise<any> {
        if (!hasValue(this.widget.activeBasemap)) {
            return null;
        }
        
        let { buildDotNetBasemap } = await import('./basemap');
        return await buildDotNetBasemap(this.widget.activeBasemap);
    }
    async setActiveBasemap(value: any): Promise<void> {
        let { buildJsBasemap } = await import('./basemap');
        this.widget.activeBasemap = await  buildJsBasemap(value, this.layerId, this.viewId);
    }
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetBasemapGalleryViewModel } = await import('./basemapGalleryViewModel');
        return await buildDotNetBasemapGalleryViewModel(this.widget.viewModel);
    }
    async setViewModel(value: any): Promise<void> {
        let { buildJsBasemapGalleryViewModel } = await import('./basemapGalleryViewModel');
        this.widget.viewModel = await  buildJsBasemapGalleryViewModel(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsBasemapGalleryWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsBasemapGallery = new BasemapGallery();
    if (hasValue(dotNetObject.activeBasemap)) {
        let { buildJsBasemap } = await import('./basemap');
        jsBasemapGallery.activeBasemap = await buildJsBasemap(dotNetObject.activeBasemap, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsBasemapGalleryViewModel } = await import('./basemapGalleryViewModel');
        jsBasemapGallery.viewModel = await buildJsBasemapGalleryViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.disabled)) {
        jsBasemapGallery.disabled = dotNetObject.disabled;
    }
    if (hasValue(dotNetObject.headingLevel)) {
        jsBasemapGallery.headingLevel = dotNetObject.headingLevel;
    }
    if (hasValue(dotNetObject.source)) {
        jsBasemapGallery.source = dotNetObject.source;
    }
    if (hasValue(dotNetObject.view)) {
        jsBasemapGallery.view = dotNetObject.view;
    }

    let { default: BasemapGalleryWidgetWrapper } = await import('./basemapGalleryWidget');
    let basemapGalleryWidgetWrapper = new BasemapGalleryWidgetWrapper(jsBasemapGallery);
    basemapGalleryWidgetWrapper.geoBlazorId = dotNetObject.id;
    basemapGalleryWidgetWrapper.viewId = viewId;
    basemapGalleryWidgetWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(basemapGalleryWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = basemapGalleryWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsBasemapGallery;
    let { buildDotNetBasemapGalleryWidget } = await import('./basemapGalleryWidget');
    let dnInstantiatedObject = await buildDotNetBasemapGalleryWidget(jsBasemapGallery);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BasemapGalleryWidget', e);
    }
    
    return jsBasemapGallery;
}

export async function buildDotNetBasemapGalleryWidgetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBasemapGalleryWidget: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.activeBasemap)) {
            let { buildDotNetBasemap } = await import('./basemap');
            dotNetBasemapGalleryWidget.activeBasemap = await buildDotNetBasemap(jsObject.activeBasemap);
        }
        if (hasValue(jsObject.viewModel)) {
            let { buildDotNetBasemapGalleryViewModel } = await import('./basemapGalleryViewModel');
            dotNetBasemapGalleryWidget.viewModel = await buildDotNetBasemapGalleryViewModel(jsObject.viewModel);
        }
        if (hasValue(jsObject.disabled)) {
            dotNetBasemapGalleryWidget.disabled = jsObject.disabled;
        }
        if (hasValue(jsObject.headingLevel)) {
            dotNetBasemapGalleryWidget.headingLevel = jsObject.headingLevel;
        }
        if (hasValue(jsObject.source)) {
            dotNetBasemapGalleryWidget.source = jsObject.source;
        }
        if (hasValue(jsObject.type)) {
            dotNetBasemapGalleryWidget.type = jsObject.type;
        }
        if (hasValue(jsObject.view)) {
            dotNetBasemapGalleryWidget.view = jsObject.view;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetBasemapGalleryWidget.id = k;
                break;
            }
        }
    }

    return dotNetBasemapGalleryWidget;
}

