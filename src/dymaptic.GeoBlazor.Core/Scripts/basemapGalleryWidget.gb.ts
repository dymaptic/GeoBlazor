// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import BasemapGallery from '@arcgis/core/widgets/BasemapGallery';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, buildJsStreamReference } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class BasemapGalleryWidgetGenerated implements IPropertyWrapper {
    public widget: BasemapGallery;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: BasemapGallery) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.activeBasemap)) {
            let { buildJsBasemap } = await import('./basemap');
            this.widget.activeBasemap = await buildJsBasemap(dotNetObject.activeBasemap, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.source)) {
            let { buildJsIBasemapGalleryWidgetSource } = await import('./iBasemapGalleryWidgetSource');
            this.widget.source = await buildJsIBasemapGalleryWidgetSource(dotNetObject.source, this.layerId, this.viewId) as any;
        }

        if (hasValue(dotNetObject.disabled)) {
            this.widget.disabled = dotNetObject.disabled;
        }
        if (hasValue(dotNetObject.headingLevel)) {
            this.widget.headingLevel = dotNetObject.headingLevel;
        }
        if (hasValue(dotNetObject.icon)) {
            this.widget.icon = dotNetObject.icon;
        }
        if (hasValue(dotNetObject.label)) {
            this.widget.label = dotNetObject.label;
        }
        if (hasValue(dotNetObject.visible)) {
            this.widget.visible = dotNetObject.visible;
        }
        if (hasValue(dotNetObject.widgetId)) {
            this.widget.id = dotNetObject.widgetId;
        }
    }
    
    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async render(): Promise<any> {
        return this.widget.render();
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async when(callback: any,
        errback: any): Promise<any> {
        return await this.widget.when(callback,
            errback);
    }

    // region properties
    
    async getActiveBasemap(): Promise<any> {
        if (!hasValue(this.widget.activeBasemap)) {
            return null;
        }
        
        let { buildDotNetBasemap } = await import('./basemap');
        return await buildDotNetBasemap(this.widget.activeBasemap);
    }
    
    async setActiveBasemap(value: any): Promise<void> {
        let { buildJsBasemap } = await import('./basemap');
        this.widget.activeBasemap = await  buildJsBasemap(value, this.layerId, this.viewId);
    }
    
    async getSource(): Promise<any> {
        if (!hasValue(this.widget.source)) {
            return null;
        }
        
        let { buildDotNetIBasemapGalleryWidgetSource } = await import('./iBasemapGalleryWidgetSource');
        return await buildDotNetIBasemapGalleryWidgetSource(this.widget.source);
    }
    
    async setSource(value: any): Promise<void> {
        let { buildJsIBasemapGalleryWidgetSource } = await import('./iBasemapGalleryWidgetSource');
        this.widget.source = await  buildJsIBasemapGalleryWidgetSource(value, this.layerId, this.viewId);
    }
    
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetBasemapGalleryViewModel } = await import('./basemapGalleryViewModel');
        return await buildDotNetBasemapGalleryViewModel(this.widget.viewModel);
    }
    
    async setViewModel(value: any): Promise<void> {
        let { buildJsBasemapGalleryViewModel } = await import('./basemapGalleryViewModel');
        this.widget.viewModel = await  buildJsBasemapGalleryViewModel(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsBasemapGalleryWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.activeBasemap)) {
        let { buildJsBasemap } = await import('./basemap');
        properties.activeBasemap = await buildJsBasemap(dotNetObject.activeBasemap, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.source)) {
        let { buildJsIBasemapGalleryWidgetSource } = await import('./iBasemapGalleryWidgetSource');
        properties.source = await buildJsIBasemapGalleryWidgetSource(dotNetObject.source, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsBasemapGalleryViewModel } = await import('./basemapGalleryViewModel');
        properties.viewModel = await buildJsBasemapGalleryViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.disabled)) {
        properties.disabled = dotNetObject.disabled;
    }
    if (hasValue(dotNetObject.headingLevel)) {
        properties.headingLevel = dotNetObject.headingLevel;
    }
    if (hasValue(dotNetObject.icon)) {
        properties.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    if (hasValue(dotNetObject.widgetId)) {
        properties.id = dotNetObject.widgetId;
    }
    let jsBasemapGallery = new BasemapGallery(properties);

    let { default: BasemapGalleryWidgetWrapper } = await import('./basemapGalleryWidget');
    let basemapGalleryWidgetWrapper = new BasemapGalleryWidgetWrapper(jsBasemapGallery);
    basemapGalleryWidgetWrapper.geoBlazorId = dotNetObject.id;
    basemapGalleryWidgetWrapper.viewId = viewId;
    basemapGalleryWidgetWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = basemapGalleryWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsBasemapGallery;
    
    try {
        let jsObjectRef = DotNet.createJSObjectReference(basemapGalleryWidgetWrapper);
        let { buildDotNetBasemapGalleryWidget } = await import('./basemapGalleryWidget');
        let dnInstantiatedObject = await buildDotNetBasemapGalleryWidget(jsBasemapGallery);

        let dnStream = buildJsStreamReference(dnInstantiatedObject);
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, dnStream);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BasemapGalleryWidget', e);
    }
    
    return jsBasemapGallery;
}


export async function buildDotNetBasemapGalleryWidgetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBasemapGalleryWidget: any = {};
    
    if (hasValue(jsObject.viewModel)) {
        let { buildDotNetBasemapGalleryViewModel } = await import('./basemapGalleryViewModel');
        dotNetBasemapGalleryWidget.viewModel = await buildDotNetBasemapGalleryViewModel(jsObject.viewModel);
    }
    
    if (hasValue(jsObject.disabled)) {
        dotNetBasemapGalleryWidget.disabled = jsObject.disabled;
    }
    
    if (hasValue(jsObject.headingLevel)) {
        dotNetBasemapGalleryWidget.headingLevel = jsObject.headingLevel;
    }
    
    if (hasValue(jsObject.icon)) {
        dotNetBasemapGalleryWidget.icon = jsObject.icon;
    }
    
    if (hasValue(jsObject.label)) {
        dotNetBasemapGalleryWidget.label = jsObject.label;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetBasemapGalleryWidget.type = removeCircularReferences(jsObject.type);
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetBasemapGalleryWidget.visible = jsObject.visible;
    }
    
    if (hasValue(jsObject.id)) {
        dotNetBasemapGalleryWidget.widgetId = jsObject.id;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetBasemapGalleryWidget.id = geoBlazorId;
    }

    return dotNetBasemapGalleryWidget;
}

