// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetPointCloudRendererPointSizeAlgorithm } from './pointCloudRendererPointSizeAlgorithm';

export async function buildJsPointCloudRendererPointSizeAlgorithmGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsPointCloudRendererPointSizeAlgorithm: any = {};

    if (hasValue(dotNetObject.scaleFactor)) {
        jsPointCloudRendererPointSizeAlgorithm.scaleFactor = dotNetObject.scaleFactor;
    }
    if (hasValue(dotNetObject.size)) {
        jsPointCloudRendererPointSizeAlgorithm.size = dotNetObject.size;
    }
    if (hasValue(dotNetObject.useRealWorldSymbolSizes)) {
        jsPointCloudRendererPointSizeAlgorithm.useRealWorldSymbolSizes = dotNetObject.useRealWorldSymbolSizes;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsPointCloudRendererPointSizeAlgorithm);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPointCloudRendererPointSizeAlgorithm;
    
    return jsPointCloudRendererPointSizeAlgorithm;
}


export async function buildDotNetPointCloudRendererPointSizeAlgorithmGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPointCloudRendererPointSizeAlgorithm: any = {};
    
    if (hasValue(jsObject.scaleFactor)) {
        dotNetPointCloudRendererPointSizeAlgorithm.scaleFactor = jsObject.scaleFactor;
    }
    
    if (hasValue(jsObject.size)) {
        dotNetPointCloudRendererPointSizeAlgorithm.size = jsObject.size;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetPointCloudRendererPointSizeAlgorithm.type = removeCircularReferences(jsObject.type);
    }
    
    if (hasValue(jsObject.useRealWorldSymbolSizes)) {
        dotNetPointCloudRendererPointSizeAlgorithm.useRealWorldSymbolSizes = jsObject.useRealWorldSymbolSizes;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetPointCloudRendererPointSizeAlgorithm.id = geoBlazorId;
    }

    return dotNetPointCloudRendererPointSizeAlgorithm;
}

