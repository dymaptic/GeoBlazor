// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetCompositeTransformationGeoTransforms1 } from './compositeTransformationGeoTransforms1';

export async function buildJsCompositeTransformationGeoTransforms1Generated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsCompositeTransformationGeoTransforms1: any = {};

    if (hasValue(dotNetObject.transformForward)) {
        jsCompositeTransformationGeoTransforms1.transformForward = dotNetObject.transformForward;
    }
    if (hasValue(dotNetObject.wkid)) {
        jsCompositeTransformationGeoTransforms1.wkid = dotNetObject.wkid;
    }
    
    jsObjectRefs[dotNetObject.id] = jsCompositeTransformationGeoTransforms1;
    arcGisObjectRefs[dotNetObject.id] = jsCompositeTransformationGeoTransforms1;
    
    return jsCompositeTransformationGeoTransforms1;
}


export async function buildDotNetCompositeTransformationGeoTransforms1Generated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCompositeTransformationGeoTransforms1: any = {};
    
    if (hasValue(jsObject.transformForward)) {
        dotNetCompositeTransformationGeoTransforms1.transformForward = jsObject.transformForward;
    }
    
    if (hasValue(jsObject.wkid)) {
        dotNetCompositeTransformationGeoTransforms1.wkid = jsObject.wkid;
    }
    

    return dotNetCompositeTransformationGeoTransforms1;
}

