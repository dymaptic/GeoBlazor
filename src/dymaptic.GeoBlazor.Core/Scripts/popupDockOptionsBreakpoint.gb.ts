// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetPopupDockOptionsBreakpoint } from './popupDockOptionsBreakpoint';

export async function buildJsPopupDockOptionsBreakpointGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsPopupDockOptionsBreakpoint: any = {};

    if (hasValue(dotNetObject.height)) {
        jsPopupDockOptionsBreakpoint.height = dotNetObject.height;
    }
    if (hasValue(dotNetObject.width)) {
        jsPopupDockOptionsBreakpoint.width = dotNetObject.width;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsPopupDockOptionsBreakpoint);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPopupDockOptionsBreakpoint;
    
    return jsPopupDockOptionsBreakpoint;
}


export async function buildDotNetPopupDockOptionsBreakpointGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPopupDockOptionsBreakpoint: any = {};
    
    if (hasValue(jsObject.height)) {
        dotNetPopupDockOptionsBreakpoint.height = jsObject.height;
    }
    
    if (hasValue(jsObject.width)) {
        dotNetPopupDockOptionsBreakpoint.width = jsObject.width;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetPopupDockOptionsBreakpoint.id = geoBlazorId;
    }

    return dotNetPopupDockOptionsBreakpoint;
}

