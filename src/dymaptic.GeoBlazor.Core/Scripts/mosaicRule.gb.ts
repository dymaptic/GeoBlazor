// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import MosaicRule from '@arcgis/core/layers/support/MosaicRule';
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';

export async function buildJsMosaicRuleGenerated(dotNetObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.itemRasterFunction)) {
        let { buildJsRasterFunction } = await import('./rasterFunction');
        properties.itemRasterFunction = await buildJsRasterFunction(dotNetObject.itemRasterFunction, viewId) as any;
    }
    if (hasValue(dotNetObject.multidimensionalDefinition) && dotNetObject.multidimensionalDefinition.length > 0) {
        let { buildJsDimensionalDefinition } = await import('./dimensionalDefinition');
        properties.multidimensionalDefinition = await Promise.all(dotNetObject.multidimensionalDefinition.map(async i => await buildJsDimensionalDefinition(i, viewId))) as any;
    }
    if (hasValue(dotNetObject.viewpoint)) {
        let { buildJsPoint } = await import('./point');
        properties.viewpoint = buildJsPoint(dotNetObject.viewpoint) as any;
    }

    if (hasValue(dotNetObject.ascending)) {
        properties.ascending = dotNetObject.ascending;
    }
    if (hasValue(dotNetObject.lockRasterIds) && dotNetObject.lockRasterIds.length > 0) {
        properties.lockRasterIds = dotNetObject.lockRasterIds;
    }
    if (hasValue(dotNetObject.method)) {
        properties.method = dotNetObject.method;
    }
    if (hasValue(dotNetObject.objectIds) && dotNetObject.objectIds.length > 0) {
        properties.objectIds = dotNetObject.objectIds;
    }
    if (hasValue(dotNetObject.operation)) {
        properties.operation = dotNetObject.operation;
    }
    if (hasValue(dotNetObject.sortField)) {
        properties.sortField = dotNetObject.sortField;
    }
    if (hasValue(dotNetObject.sortValue)) {
        properties.sortValue = dotNetObject.sortValue;
    }
    if (hasValue(dotNetObject.where)) {
        properties.where = dotNetObject.where;
    }
    let jsMosaicRule = new MosaicRule(properties);
    
    jsObjectRefs[dotNetObject.id] = jsMosaicRule;
    arcGisObjectRefs[dotNetObject.id] = jsMosaicRule;
    
    return jsMosaicRule;
}


export async function buildDotNetMosaicRuleGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMosaicRule: any = {};
    
    if (hasValue(jsObject.itemRasterFunction)) {
        let { buildDotNetRasterFunction } = await import('./rasterFunction');
        dotNetMosaicRule.itemRasterFunction = await buildDotNetRasterFunction(jsObject.itemRasterFunction, viewId);
    }
    
    if (hasValue(jsObject.multidimensionalDefinition)) {
        let { buildDotNetDimensionalDefinition } = await import('./dimensionalDefinition');
        dotNetMosaicRule.multidimensionalDefinition = await Promise.all(jsObject.multidimensionalDefinition.map(async i => await buildDotNetDimensionalDefinition(i, viewId)));
    }
    
    if (hasValue(jsObject.viewpoint)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetMosaicRule.viewpoint = buildDotNetPoint(jsObject.viewpoint);
    }
    
    if (hasValue(jsObject.ascending)) {
        dotNetMosaicRule.ascending = jsObject.ascending;
    }
    
    if (hasValue(jsObject.lockRasterIds)) {
        dotNetMosaicRule.lockRasterIds = jsObject.lockRasterIds;
    }
    
    if (hasValue(jsObject.method)) {
        dotNetMosaicRule.method = removeCircularReferences(jsObject.method);
    }
    
    if (hasValue(jsObject.objectIds)) {
        dotNetMosaicRule.objectIds = removeCircularReferences(jsObject.objectIds);
    }
    
    if (hasValue(jsObject.operation)) {
        dotNetMosaicRule.operation = removeCircularReferences(jsObject.operation);
    }
    
    if (hasValue(jsObject.sortField)) {
        dotNetMosaicRule.sortField = jsObject.sortField;
    }
    
    if (hasValue(jsObject.sortValue)) {
        dotNetMosaicRule.sortValue = jsObject.sortValue;
    }
    
    if (hasValue(jsObject.where)) {
        dotNetMosaicRule.where = jsObject.where;
    }
    

    return dotNetMosaicRule;
}

