// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetMosaicRule } from './mosaicRule';
import MosaicRule from '@arcgis/core/layers/support/MosaicRule';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsMosaicRuleGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsMosaicRule = new MosaicRule();
    if (hasValue(dotNetObject.viewpoint)) {
        let { buildJsPoint } = await import('./point');
        jsMosaicRule.viewpoint = buildJsPoint(dotNetObject.viewpoint) as any;
    }

    if (hasValue(dotNetObject.ascending)) {
        jsMosaicRule.ascending = dotNetObject.ascending;
    }
    if (hasValue(dotNetObject.itemRasterFunction)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedItemRasterFunction } = dotNetObject.itemRasterFunction;
        jsMosaicRule.itemRasterFunction = sanitizedItemRasterFunction;
    }
    if (hasValue(dotNetObject.itemRenderingRule)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedItemRenderingRule } = dotNetObject.itemRenderingRule;
        jsMosaicRule.itemRenderingRule = sanitizedItemRenderingRule;
    }
    if (hasValue(dotNetObject.lockRasterIds)) {
        jsMosaicRule.lockRasterIds = dotNetObject.lockRasterIds;
    }
    if (hasValue(dotNetObject.method)) {
        jsMosaicRule.method = dotNetObject.method;
    }
    if (hasValue(dotNetObject.multidimensionalDefinition)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedMultidimensionalDefinition } = dotNetObject.multidimensionalDefinition;
        jsMosaicRule.multidimensionalDefinition = sanitizedMultidimensionalDefinition;
    }
    if (hasValue(dotNetObject.objectIds)) {
        jsMosaicRule.objectIds = dotNetObject.objectIds;
    }
    if (hasValue(dotNetObject.operation)) {
        jsMosaicRule.operation = dotNetObject.operation;
    }
    if (hasValue(dotNetObject.sortField)) {
        jsMosaicRule.sortField = dotNetObject.sortField;
    }
    if (hasValue(dotNetObject.sortValue)) {
        jsMosaicRule.sortValue = dotNetObject.sortValue;
    }
    if (hasValue(dotNetObject.where)) {
        jsMosaicRule.where = dotNetObject.where;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsMosaicRule);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsMosaicRule;
    
    let dnInstantiatedObject = await buildDotNetMosaicRule(jsMosaicRule);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for MosaicRule', e);
    }
    
    return jsMosaicRule;
}

export async function buildDotNetMosaicRuleGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMosaicRule: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.viewpoint)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetMosaicRule.viewpoint = buildDotNetPoint(jsObject.viewpoint);
        }
        if (hasValue(jsObject.ascending)) {
            dotNetMosaicRule.ascending = jsObject.ascending;
        }
        if (hasValue(jsObject.itemRasterFunction)) {
            dotNetMosaicRule.itemRasterFunction = jsObject.itemRasterFunction;
        }
        if (hasValue(jsObject.itemRenderingRule)) {
            dotNetMosaicRule.itemRenderingRule = jsObject.itemRenderingRule;
        }
        if (hasValue(jsObject.lockRasterIds)) {
            dotNetMosaicRule.lockRasterIds = jsObject.lockRasterIds;
        }
        if (hasValue(jsObject.method)) {
            dotNetMosaicRule.method = jsObject.method;
        }
        if (hasValue(jsObject.multidimensionalDefinition)) {
            dotNetMosaicRule.multidimensionalDefinition = jsObject.multidimensionalDefinition;
        }
        if (hasValue(jsObject.objectIds)) {
            dotNetMosaicRule.objectIds = jsObject.objectIds;
        }
        if (hasValue(jsObject.operation)) {
            dotNetMosaicRule.operation = jsObject.operation;
        }
        if (hasValue(jsObject.sortField)) {
            dotNetMosaicRule.sortField = jsObject.sortField;
        }
        if (hasValue(jsObject.sortValue)) {
            dotNetMosaicRule.sortValue = jsObject.sortValue;
        }
        if (hasValue(jsObject.where)) {
            dotNetMosaicRule.where = jsObject.where;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetMosaicRule.id = k;
                break;
            }
        }
    }

    return dotNetMosaicRule;
}

