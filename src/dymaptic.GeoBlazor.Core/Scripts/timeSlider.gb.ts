// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import TimeSlider from '@arcgis/core/webdoc/widgets/TimeSlider';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetTimeSlider } from './timeSlider';

export async function buildJsTimeSliderGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTimeSlider = new TimeSlider();
    if (hasValue(dotNetObject.currentTimeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        jsTimeSlider.currentTimeExtent = await buildJsTimeExtent(dotNetObject.currentTimeExtent, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.fullTimeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        jsTimeSlider.fullTimeExtent = await buildJsTimeExtent(dotNetObject.fullTimeExtent, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.loop)) {
        jsTimeSlider.loop = dotNetObject.loop;
    }
    if (hasValue(dotNetObject.numStops)) {
        jsTimeSlider.numStops = dotNetObject.numStops;
    }
    if (hasValue(dotNetObject.numThumbs)) {
        jsTimeSlider.numThumbs = dotNetObject.numThumbs;
    }
    if (hasValue(dotNetObject.stopDelay)) {
        jsTimeSlider.stopDelay = dotNetObject.stopDelay;
    }
    if (hasValue(dotNetObject.stopInterval)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedStopInterval } = dotNetObject.stopInterval;
        jsTimeSlider.stopInterval = sanitizedStopInterval;
    }
    if (hasValue(dotNetObject.stops)) {
        jsTimeSlider.stops = dotNetObject.stops;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsTimeSlider);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTimeSlider;
    
    let dnInstantiatedObject = await buildDotNetTimeSlider(jsTimeSlider);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TimeSlider', e);
    }
    
    return jsTimeSlider;
}

export async function buildDotNetTimeSliderGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTimeSlider: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.currentTimeExtent)) {
            let { buildDotNetTimeExtent } = await import('./timeExtent');
            dotNetTimeSlider.currentTimeExtent = buildDotNetTimeExtent(jsObject.currentTimeExtent);
        }
        if (hasValue(jsObject.fullTimeExtent)) {
            let { buildDotNetTimeExtent } = await import('./timeExtent');
            dotNetTimeSlider.fullTimeExtent = buildDotNetTimeExtent(jsObject.fullTimeExtent);
        }
    if (hasValue(jsObject.loop)) {
        dotNetTimeSlider.loop = jsObject.loop;
    }
    if (hasValue(jsObject.numStops)) {
        dotNetTimeSlider.numStops = jsObject.numStops;
    }
    if (hasValue(jsObject.numThumbs)) {
        dotNetTimeSlider.numThumbs = jsObject.numThumbs;
    }
    if (hasValue(jsObject.stopDelay)) {
        dotNetTimeSlider.stopDelay = jsObject.stopDelay;
    }
    if (hasValue(jsObject.stopInterval)) {
        dotNetTimeSlider.stopInterval = jsObject.stopInterval;
    }
    if (hasValue(jsObject.stops)) {
        dotNetTimeSlider.stops = jsObject.stops;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTimeSlider.id = k;
                break;
            }
        }
    }

    return dotNetTimeSlider;
}

