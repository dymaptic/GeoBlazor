// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import SwipeViewModel from '@arcgis/core/widgets/Swipe/SwipeViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSwipeViewModel } from './swipeViewModel';

export async function buildJsSwipeViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSwipeViewModel = new SwipeViewModel();
    if (hasValue(dotNetObject.leadingLayers)) {
        let { buildJsLayer } = await import('./layer');
        jsSwipeViewModel.leadingLayers = await Promise.all(dotNetObject.leadingLayers.map(async i => await buildJsLayer(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.trailingLayers)) {
        let { buildJsLayer } = await import('./layer');
        jsSwipeViewModel.trailingLayers = await Promise.all(dotNetObject.trailingLayers.map(async i => await buildJsLayer(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.direction)) {
        jsSwipeViewModel.direction = dotNetObject.direction;
    }
    if (hasValue(dotNetObject.position)) {
        jsSwipeViewModel.position = dotNetObject.position;
    }
    if (hasValue(dotNetObject.view)) {
        jsSwipeViewModel.view = dotNetObject.view;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsSwipeViewModel);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSwipeViewModel;
    
    let dnInstantiatedObject = await buildDotNetSwipeViewModel(jsSwipeViewModel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SwipeViewModel', e);
    }
    
    return jsSwipeViewModel;
}

export async function buildDotNetSwipeViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSwipeViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.direction)) {
        dotNetSwipeViewModel.direction = jsObject.direction;
    }
    if (hasValue(jsObject.position)) {
        dotNetSwipeViewModel.position = jsObject.position;
    }
    if (hasValue(jsObject.state)) {
        dotNetSwipeViewModel.state = jsObject.state;
    }
    if (hasValue(jsObject.view)) {
        dotNetSwipeViewModel.view = jsObject.view;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSwipeViewModel.id = k;
                break;
            }
        }
    }

    return dotNetSwipeViewModel;
}

