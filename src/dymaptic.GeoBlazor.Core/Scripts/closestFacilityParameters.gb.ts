// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ClosestFacilityParameters from '@arcgis/core/rest/support/ClosestFacilityParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetClosestFacilityParameters } from './closestFacilityParameters';

export async function buildJsClosestFacilityParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.outSpatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        properties.outSpatialReference = buildJsSpatialReference(dotNetObject.outSpatialReference) as any;
    }
    if (hasValue(dotNetObject.pointBarrierCollectionPointBarriers)) {
        let { buildJsPointBarrier } = await import('./pointBarrier');
        properties.pointBarriers = await Promise.all(dotNetObject.pointBarrierCollectionPointBarriers.map(async i => await buildJsPointBarrier(i, layerId, viewId))) as any;
    }
    else if (hasValue(dotNetObject.dataLayerPointBarriers)) {
        let { buildJsDataLayer } = await import('./pointBarrier');
        properties.pointBarriers = await Promise.all(dotNetObject.dataLayerPointBarriers.map(async i => await buildJsDataLayer(i, layerId, viewId))) as any;
    }
    else if (hasValue(dotNetObject.featureSetPointBarriers)) {
        let { buildJsFeatureSet } = await import('./pointBarrier');
        properties.pointBarriers = dotNetObject.featureSetPointBarriers.map(i => buildJsFeatureSet(i)) as any;
    }
    else if (hasValue(dotNetObject.networkFeatureSetPointBarriers)) {
        properties.pointBarriers = dotNetObject.pointBarrier;
    }
    if (hasValue(dotNetObject.polygonBarrierCollectionPolygonBarriers)) {
        let { buildJsPolygonBarrier } = await import('./polygonBarrier');
        properties.polygonBarriers = await Promise.all(dotNetObject.polygonBarrierCollectionPolygonBarriers.map(async i => await buildJsPolygonBarrier(i, layerId, viewId))) as any;
    }
    else if (hasValue(dotNetObject.dataLayerPolygonBarriers)) {
        let { buildJsDataLayer } = await import('./polygonBarrier');
        properties.polygonBarriers = await Promise.all(dotNetObject.dataLayerPolygonBarriers.map(async i => await buildJsDataLayer(i, layerId, viewId))) as any;
    }
    else if (hasValue(dotNetObject.featureSetPolygonBarriers)) {
        let { buildJsFeatureSet } = await import('./polygonBarrier');
        properties.polygonBarriers = dotNetObject.featureSetPolygonBarriers.map(i => buildJsFeatureSet(i)) as any;
    }
    else if (hasValue(dotNetObject.networkFeatureSetPolygonBarriers)) {
        properties.polygonBarriers = dotNetObject.polygonBarrier;
    }
    if (hasValue(dotNetObject.polylineBarrierCollectionPolylineBarriers)) {
        let { buildJsPolylineBarrier } = await import('./polylineBarrier');
        properties.polylineBarriers = await Promise.all(dotNetObject.polylineBarrierCollectionPolylineBarriers.map(async i => await buildJsPolylineBarrier(i, layerId, viewId))) as any;
    }
    else if (hasValue(dotNetObject.dataLayerPolylineBarriers)) {
        let { buildJsDataLayer } = await import('./polylineBarrier');
        properties.polylineBarriers = await Promise.all(dotNetObject.dataLayerPolylineBarriers.map(async i => await buildJsDataLayer(i, layerId, viewId))) as any;
    }
    else if (hasValue(dotNetObject.featureSetPolylineBarriers)) {
        let { buildJsFeatureSet } = await import('./polylineBarrier');
        properties.polylineBarriers = dotNetObject.featureSetPolylineBarriers.map(i => buildJsFeatureSet(i)) as any;
    }
    else if (hasValue(dotNetObject.networkFeatureSetPolylineBarriers)) {
        properties.polylineBarriers = dotNetObject.polylineBarrier;
    }

    if (hasValue(dotNetObject.accumulateAttributes)) {
        properties.accumulateAttributes = dotNetObject.accumulateAttributes;
    }
    if (hasValue(dotNetObject.apiKey)) {
        properties.apiKey = dotNetObject.apiKey;
    }
    if (hasValue(dotNetObject.attributeParameterValues)) {
        properties.attributeParameterValues = dotNetObject.attributeParameterValues;
    }
    if (hasValue(dotNetObject.defaultCutoff)) {
        properties.defaultCutoff = dotNetObject.defaultCutoff;
    }
    if (hasValue(dotNetObject.defaultTargetFacilityCount)) {
        properties.defaultTargetFacilityCount = dotNetObject.defaultTargetFacilityCount;
    }
    if (hasValue(dotNetObject.directionsLanguage)) {
        properties.directionsLanguage = dotNetObject.directionsLanguage;
    }
    if (hasValue(dotNetObject.directionsLengthUnits)) {
        properties.directionsLengthUnits = dotNetObject.directionsLengthUnits;
    }
    if (hasValue(dotNetObject.directionsOutputType)) {
        properties.directionsOutputType = dotNetObject.directionsOutputType;
    }
    if (hasValue(dotNetObject.directionsStyleName)) {
        properties.directionsStyleName = dotNetObject.directionsStyleName;
    }
    if (hasValue(dotNetObject.directionsTimeAttribute)) {
        properties.directionsTimeAttribute = dotNetObject.directionsTimeAttribute;
    }
    if (hasValue(dotNetObject.facilities)) {
        properties.facilities = dotNetObject.facilities;
    }
    if (hasValue(dotNetObject.geometryPrecision)) {
        properties.geometryPrecision = dotNetObject.geometryPrecision;
    }
    if (hasValue(dotNetObject.geometryPrecisionM)) {
        properties.geometryPrecisionM = dotNetObject.geometryPrecisionM;
    }
    if (hasValue(dotNetObject.geometryPrecisionZ)) {
        properties.geometryPrecisionZ = dotNetObject.geometryPrecisionZ;
    }
    if (hasValue(dotNetObject.ignoreInvalidLocations)) {
        properties.ignoreInvalidLocations = dotNetObject.ignoreInvalidLocations;
    }
    if (hasValue(dotNetObject.impedanceAttribute)) {
        properties.impedanceAttribute = dotNetObject.impedanceAttribute;
    }
    if (hasValue(dotNetObject.incidents)) {
        properties.incidents = dotNetObject.incidents;
    }
    if (hasValue(dotNetObject.outputGeometryPrecision)) {
        properties.outputGeometryPrecision = dotNetObject.outputGeometryPrecision;
    }
    if (hasValue(dotNetObject.outputGeometryPrecisionUnits)) {
        properties.outputGeometryPrecisionUnits = dotNetObject.outputGeometryPrecisionUnits;
    }
    if (hasValue(dotNetObject.outputLines)) {
        properties.outputLines = dotNetObject.outputLines;
    }
    if (hasValue(dotNetObject.overrides)) {
        properties.overrides = dotNetObject.overrides;
    }
    if (hasValue(dotNetObject.preserveObjectID)) {
        properties.preserveObjectID = dotNetObject.preserveObjectID;
    }
    if (hasValue(dotNetObject.restrictionAttributes)) {
        properties.restrictionAttributes = dotNetObject.restrictionAttributes;
    }
    if (hasValue(dotNetObject.restrictUTurns)) {
        properties.restrictUTurns = dotNetObject.restrictUTurns;
    }
    if (hasValue(dotNetObject.returnDirections)) {
        properties.returnDirections = dotNetObject.returnDirections;
    }
    if (hasValue(dotNetObject.returnFacilities)) {
        properties.returnFacilities = dotNetObject.returnFacilities;
    }
    if (hasValue(dotNetObject.returnIncidents)) {
        properties.returnIncidents = dotNetObject.returnIncidents;
    }
    if (hasValue(dotNetObject.returnPointBarriers)) {
        properties.returnPointBarriers = dotNetObject.returnPointBarriers;
    }
    if (hasValue(dotNetObject.returnPolygonBarriers)) {
        properties.returnPolygonBarriers = dotNetObject.returnPolygonBarriers;
    }
    if (hasValue(dotNetObject.returnPolylineBarriers)) {
        properties.returnPolylineBarriers = dotNetObject.returnPolylineBarriers;
    }
    if (hasValue(dotNetObject.returnRoutes)) {
        properties.returnRoutes = dotNetObject.returnRoutes;
    }
    if (hasValue(dotNetObject.returnTraversedEdges)) {
        properties.returnTraversedEdges = dotNetObject.returnTraversedEdges;
    }
    if (hasValue(dotNetObject.returnTraversedJunctions)) {
        properties.returnTraversedJunctions = dotNetObject.returnTraversedJunctions;
    }
    if (hasValue(dotNetObject.returnTraversedTurns)) {
        properties.returnTraversedTurns = dotNetObject.returnTraversedTurns;
    }
    if (hasValue(dotNetObject.returnZ)) {
        properties.returnZ = dotNetObject.returnZ;
    }
    if (hasValue(dotNetObject.timeOfDay)) {
        properties.timeOfDay = dotNetObject.timeOfDay;
    }
    if (hasValue(dotNetObject.timeOfDayIsUTC)) {
        properties.timeOfDayIsUTC = dotNetObject.timeOfDayIsUTC;
    }
    if (hasValue(dotNetObject.timeOfDayUsage)) {
        properties.timeOfDayUsage = dotNetObject.timeOfDayUsage;
    }
    if (hasValue(dotNetObject.travelDirection)) {
        properties.travelDirection = dotNetObject.travelDirection;
    }
    if (hasValue(dotNetObject.travelMode)) {
        properties.travelMode = dotNetObject.travelMode;
    }
    if (hasValue(dotNetObject.useHierarchy)) {
        properties.useHierarchy = dotNetObject.useHierarchy;
    }
    let jsClosestFacilityParameters = new ClosestFacilityParameters(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsClosestFacilityParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsClosestFacilityParameters;
    
    let dnInstantiatedObject = await buildDotNetClosestFacilityParameters(jsClosestFacilityParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ClosestFacilityParameters', e);
    }
    
    return jsClosestFacilityParameters;
}

export async function buildDotNetClosestFacilityParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetClosestFacilityParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.outSpatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetClosestFacilityParameters.outSpatialReference = buildDotNetSpatialReference(jsObject.outSpatialReference);
        }
        if (hasValue(jsObject.pointBarriers)) {
            let { buildDotNetPointBarrier } = await import('./pointBarrier');
            dotNetClosestFacilityParameters.pointBarriers = await Promise.all(jsObject.pointBarriers.map(async i => await buildDotNetPointBarrier(i)));
        }
        if (hasValue(jsObject.polygonBarriers)) {
            let { buildDotNetPolygonBarrier } = await import('./polygonBarrier');
            dotNetClosestFacilityParameters.polygonBarriers = await Promise.all(jsObject.polygonBarriers.map(async i => await buildDotNetPolygonBarrier(i)));
        }
        if (hasValue(jsObject.polylineBarriers)) {
            let { buildDotNetPolylineBarrier } = await import('./polylineBarrier');
            dotNetClosestFacilityParameters.polylineBarriers = await Promise.all(jsObject.polylineBarriers.map(async i => await buildDotNetPolylineBarrier(i)));
        }
    if (hasValue(jsObject.accumulateAttributes)) {
        dotNetClosestFacilityParameters.accumulateAttributes = jsObject.accumulateAttributes;
    }
    if (hasValue(jsObject.apiKey)) {
        dotNetClosestFacilityParameters.apiKey = jsObject.apiKey;
    }
    if (hasValue(jsObject.attributeParameterValues)) {
        dotNetClosestFacilityParameters.attributeParameterValues = jsObject.attributeParameterValues;
    }
    if (hasValue(jsObject.defaultCutoff)) {
        dotNetClosestFacilityParameters.defaultCutoff = jsObject.defaultCutoff;
    }
    if (hasValue(jsObject.defaultTargetFacilityCount)) {
        dotNetClosestFacilityParameters.defaultTargetFacilityCount = jsObject.defaultTargetFacilityCount;
    }
    if (hasValue(jsObject.directionsLanguage)) {
        dotNetClosestFacilityParameters.directionsLanguage = jsObject.directionsLanguage;
    }
    if (hasValue(jsObject.directionsLengthUnits)) {
        dotNetClosestFacilityParameters.directionsLengthUnits = jsObject.directionsLengthUnits;
    }
    if (hasValue(jsObject.directionsOutputType)) {
        dotNetClosestFacilityParameters.directionsOutputType = jsObject.directionsOutputType;
    }
    if (hasValue(jsObject.directionsStyleName)) {
        dotNetClosestFacilityParameters.directionsStyleName = jsObject.directionsStyleName;
    }
    if (hasValue(jsObject.directionsTimeAttribute)) {
        dotNetClosestFacilityParameters.directionsTimeAttribute = jsObject.directionsTimeAttribute;
    }
    if (hasValue(jsObject.facilities)) {
        dotNetClosestFacilityParameters.facilities = jsObject.facilities;
    }
    if (hasValue(jsObject.geometryPrecision)) {
        dotNetClosestFacilityParameters.geometryPrecision = jsObject.geometryPrecision;
    }
    if (hasValue(jsObject.geometryPrecisionM)) {
        dotNetClosestFacilityParameters.geometryPrecisionM = jsObject.geometryPrecisionM;
    }
    if (hasValue(jsObject.geometryPrecisionZ)) {
        dotNetClosestFacilityParameters.geometryPrecisionZ = jsObject.geometryPrecisionZ;
    }
    if (hasValue(jsObject.ignoreInvalidLocations)) {
        dotNetClosestFacilityParameters.ignoreInvalidLocations = jsObject.ignoreInvalidLocations;
    }
    if (hasValue(jsObject.impedanceAttribute)) {
        dotNetClosestFacilityParameters.impedanceAttribute = jsObject.impedanceAttribute;
    }
    if (hasValue(jsObject.incidents)) {
        dotNetClosestFacilityParameters.incidents = jsObject.incidents;
    }
    if (hasValue(jsObject.outputGeometryPrecision)) {
        dotNetClosestFacilityParameters.outputGeometryPrecision = jsObject.outputGeometryPrecision;
    }
    if (hasValue(jsObject.outputGeometryPrecisionUnits)) {
        dotNetClosestFacilityParameters.outputGeometryPrecisionUnits = jsObject.outputGeometryPrecisionUnits;
    }
    if (hasValue(jsObject.outputLines)) {
        dotNetClosestFacilityParameters.outputLines = jsObject.outputLines;
    }
    if (hasValue(jsObject.overrides)) {
        dotNetClosestFacilityParameters.overrides = jsObject.overrides;
    }
    if (hasValue(jsObject.preserveObjectID)) {
        dotNetClosestFacilityParameters.preserveObjectID = jsObject.preserveObjectID;
    }
    if (hasValue(jsObject.restrictionAttributes)) {
        dotNetClosestFacilityParameters.restrictionAttributes = jsObject.restrictionAttributes;
    }
    if (hasValue(jsObject.restrictUTurns)) {
        dotNetClosestFacilityParameters.restrictUTurns = jsObject.restrictUTurns;
    }
    if (hasValue(jsObject.returnDirections)) {
        dotNetClosestFacilityParameters.returnDirections = jsObject.returnDirections;
    }
    if (hasValue(jsObject.returnFacilities)) {
        dotNetClosestFacilityParameters.returnFacilities = jsObject.returnFacilities;
    }
    if (hasValue(jsObject.returnIncidents)) {
        dotNetClosestFacilityParameters.returnIncidents = jsObject.returnIncidents;
    }
    if (hasValue(jsObject.returnPointBarriers)) {
        dotNetClosestFacilityParameters.returnPointBarriers = jsObject.returnPointBarriers;
    }
    if (hasValue(jsObject.returnPolygonBarriers)) {
        dotNetClosestFacilityParameters.returnPolygonBarriers = jsObject.returnPolygonBarriers;
    }
    if (hasValue(jsObject.returnPolylineBarriers)) {
        dotNetClosestFacilityParameters.returnPolylineBarriers = jsObject.returnPolylineBarriers;
    }
    if (hasValue(jsObject.returnRoutes)) {
        dotNetClosestFacilityParameters.returnRoutes = jsObject.returnRoutes;
    }
    if (hasValue(jsObject.returnTraversedEdges)) {
        dotNetClosestFacilityParameters.returnTraversedEdges = jsObject.returnTraversedEdges;
    }
    if (hasValue(jsObject.returnTraversedJunctions)) {
        dotNetClosestFacilityParameters.returnTraversedJunctions = jsObject.returnTraversedJunctions;
    }
    if (hasValue(jsObject.returnTraversedTurns)) {
        dotNetClosestFacilityParameters.returnTraversedTurns = jsObject.returnTraversedTurns;
    }
    if (hasValue(jsObject.returnZ)) {
        dotNetClosestFacilityParameters.returnZ = jsObject.returnZ;
    }
    if (hasValue(jsObject.timeOfDay)) {
        dotNetClosestFacilityParameters.timeOfDay = jsObject.timeOfDay;
    }
    if (hasValue(jsObject.timeOfDayIsUTC)) {
        dotNetClosestFacilityParameters.timeOfDayIsUTC = jsObject.timeOfDayIsUTC;
    }
    if (hasValue(jsObject.timeOfDayUsage)) {
        dotNetClosestFacilityParameters.timeOfDayUsage = jsObject.timeOfDayUsage;
    }
    if (hasValue(jsObject.travelDirection)) {
        dotNetClosestFacilityParameters.travelDirection = jsObject.travelDirection;
    }
    if (hasValue(jsObject.travelMode)) {
        dotNetClosestFacilityParameters.travelMode = jsObject.travelMode;
    }
    if (hasValue(jsObject.useHierarchy)) {
        dotNetClosestFacilityParameters.useHierarchy = jsObject.useHierarchy;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetClosestFacilityParameters.id = k;
                break;
            }
        }
    }

    return dotNetClosestFacilityParameters;
}

