// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import FieldInfo from '@arcgis/core/popup/FieldInfo';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FieldInfoGenerated implements IPropertyWrapper {
    public component: FieldInfo;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: FieldInfo) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getFormat(): Promise<any> {
        let { buildDotNetFieldInfoFormat } = await import('./fieldInfoFormat');
        return buildDotNetFieldInfoFormat(this.component.format);
    }
    async setFormat(value: any): Promise<void> {
        let { buildJsFieldInfoFormat } = await import('./fieldInfoFormat');
        this.component.format = await  buildJsFieldInfoFormat(value);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsFieldInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFieldInfo = new FieldInfo();
    if (hasValue(dotNetObject.format)) {
        let { buildJsFieldInfoFormat } = await import('./jsBuilder');
        jsFieldInfo.format = await buildJsFieldInfoFormat(dotNetObject.format) as any;
    }

    if (hasValue(dotNetObject.fieldName)) {
        jsFieldInfo.fieldName = dotNetObject.fieldName;
    }
    if (hasValue(dotNetObject.isEditable)) {
        jsFieldInfo.isEditable = dotNetObject.isEditable;
    }
    if (hasValue(dotNetObject.label)) {
        jsFieldInfo.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.statisticType)) {
        jsFieldInfo.statisticType = dotNetObject.statisticType;
    }
    if (hasValue(dotNetObject.stringFieldOption)) {
        jsFieldInfo.stringFieldOption = dotNetObject.stringFieldOption;
    }
    if (hasValue(dotNetObject.tooltip)) {
        jsFieldInfo.tooltip = dotNetObject.tooltip;
    }
    let { default: FieldInfoWrapper } = await import('./fieldInfo');
    let fieldInfoWrapper = new FieldInfoWrapper(jsFieldInfo);
    fieldInfoWrapper.geoBlazorId = dotNetObject.id;
    fieldInfoWrapper.viewId = viewId;
    fieldInfoWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(fieldInfoWrapper);
    jsObjectRefs[dotNetObject.id] = fieldInfoWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsFieldInfo;
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FieldInfo', e);
    }
    
    return jsFieldInfo;
}

export async function buildDotNetFieldInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFieldInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.format)) {
            let { buildDotNetFieldInfoFormat } = await import('./dotNetBuilder');
            dotNetFieldInfo.format = buildDotNetFieldInfoFormat(jsObject.format);
        }
        if (hasValue(jsObject.fieldName)) {
            dotNetFieldInfo.fieldName = jsObject.fieldName;
        }
        if (hasValue(jsObject.isEditable)) {
            dotNetFieldInfo.isEditable = jsObject.isEditable;
        }
        if (hasValue(jsObject.label)) {
            dotNetFieldInfo.label = jsObject.label;
        }
        if (hasValue(jsObject.statisticType)) {
            dotNetFieldInfo.statisticType = jsObject.statisticType;
        }
        if (hasValue(jsObject.stringFieldOption)) {
            dotNetFieldInfo.stringFieldOption = jsObject.stringFieldOption;
        }
        if (hasValue(jsObject.tooltip)) {
            dotNetFieldInfo.tooltip = jsObject.tooltip;
        }

    return dotNetFieldInfo;
}

