// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import UniqueValueInfo from '@arcgis/core/renderers/support/UniqueValueInfo';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetUniqueValueInfo } from './uniqueValueInfo';

export async function buildJsUniqueValueInfoGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.symbol)) {
        properties.symbol = dotNetObject.symbol;
    }

    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.value)) {
        properties.value = dotNetObject.value;
    }
    let jsUniqueValueInfo = new UniqueValueInfo(properties);
    
    jsObjectRefs[dotNetObject.id] = jsUniqueValueInfo;
    arcGisObjectRefs[dotNetObject.id] = jsUniqueValueInfo;
    
    return jsUniqueValueInfo;
}


export async function buildDotNetUniqueValueInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUniqueValueInfo: any = {};
    
    if (hasValue(jsObject.label)) {
        dotNetUniqueValueInfo.label = jsObject.label;
    }
    
    if (hasValue(jsObject.symbol)) {
        dotNetUniqueValueInfo.symbol = jsObject.symbol;
    }
    
    if (hasValue(jsObject.value)) {
        dotNetUniqueValueInfo.value = jsObject.value;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetUniqueValueInfo.id = geoBlazorId;
    }

    return dotNetUniqueValueInfo;
}

