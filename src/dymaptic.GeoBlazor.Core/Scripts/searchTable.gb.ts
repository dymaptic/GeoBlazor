// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import SearchTable from '@arcgis/core/webdoc/applicationProperties/SearchTable';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetSearchTable } from './searchTable';

export async function buildJsSearchTableGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.field)) {
        let { buildJsSearchTableField } = await import('./searchTableField');
        properties.field = await buildJsSearchTableField(dotNetObject.field, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.searchTableId)) {
        properties.id = dotNetObject.searchTableId;
    }
    let jsSearchTable = new SearchTable(properties);
    
    jsObjectRefs[dotNetObject.id] = jsSearchTable;
    arcGisObjectRefs[dotNetObject.id] = jsSearchTable;
    
    return jsSearchTable;
}


export async function buildDotNetSearchTableGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchTable: any = {};
    
    if (hasValue(jsObject.field)) {
        let { buildDotNetSearchTableField } = await import('./searchTableField');
        dotNetSearchTable.field = await buildDotNetSearchTableField(jsObject.field, layerId, viewId);
    }
    
    if (hasValue(jsObject.id)) {
        dotNetSearchTable.searchTableId = jsObject.id;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSearchTable.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetSearchTable.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetSearchTable.id)) {
        jsObjectRefs[dotNetSearchTable.id] ??= jsObject;
        arcGisObjectRefs[dotNetSearchTable.id] ??= jsObject;
    }

    return dotNetSearchTable;
}

