// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import GeotriggersInfo from '@arcgis/core/webdoc/GeotriggersInfo';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetGeotriggersInfo } from './geotriggersInfo';

export async function buildJsGeotriggersInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.geotriggers) && dotNetObject.geotriggers.length > 0) {
        let { buildJsGeotrigger } = await import('./geotrigger');
        properties.geotriggers = await Promise.all(dotNetObject.geotriggers.map(async i => await buildJsGeotrigger(i, layerId, viewId))) as any;
    }

    let jsGeotriggersInfo = new GeotriggersInfo(properties);
    
    jsObjectRefs[dotNetObject.id] = jsGeotriggersInfo;
    arcGisObjectRefs[dotNetObject.id] = jsGeotriggersInfo;
    
    return jsGeotriggersInfo;
}


export async function buildDotNetGeotriggersInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGeotriggersInfo: any = {};
    
    if (hasValue(jsObject.geotriggers)) {
        let { buildDotNetGeotrigger } = await import('./geotrigger');
        dotNetGeotriggersInfo.geotriggers = await Promise.all(jsObject.geotriggers.map(async i => await buildDotNetGeotrigger(i)));
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetGeotriggersInfo.id = geoBlazorId;
    }

    return dotNetGeotriggersInfo;
}

