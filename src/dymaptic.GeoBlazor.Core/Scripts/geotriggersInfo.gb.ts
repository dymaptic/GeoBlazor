// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import GeotriggersInfo from '@arcgis/core/webdoc/GeotriggersInfo';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetGeotriggersInfo } from './geotriggersInfo';

export async function buildJsGeotriggersInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsGeotriggersInfo = new GeotriggersInfo();

    if (hasValue(dotNetObject.geotriggers)) {
        jsGeotriggersInfo.geotriggers = dotNetObject.geotriggers;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsGeotriggersInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsGeotriggersInfo;
    
    let dnInstantiatedObject = await buildDotNetGeotriggersInfo(jsGeotriggersInfo);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for GeotriggersInfo', e);
    }
    
    return jsGeotriggersInfo;
}

export async function buildDotNetGeotriggersInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGeotriggersInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.geotriggers)) {
        dotNetGeotriggersInfo.geotriggers = jsObject.geotriggers;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetGeotriggersInfo.id = k;
                break;
            }
        }
    }

    return dotNetGeotriggersInfo;
}

