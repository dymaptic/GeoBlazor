// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import BasemapGalleryViewModel from '@arcgis/core/widgets/BasemapGallery/BasemapGalleryViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class BasemapGalleryViewModelGenerated implements IPropertyWrapper {
    public component: BasemapGalleryViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: BasemapGalleryViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async basemapEquals(basemap1: any,
        basemap2: any): Promise<any> {
                let { buildJsBasemap } = await import('./basemap');
let jsBasemap1 = await buildJsBasemap(basemap1, this.layerId, this.viewId) as any;
        let jsBasemap2 = await buildJsBasemap(basemap2, this.layerId, this.viewId) as any;
        return this.component.basemapEquals(jsBasemap1,
            jsBasemap2);
    }

    // region properties
    
    async getActiveBasemap(): Promise<any> {
        if (!hasValue(this.component.activeBasemap)) {
            return null;
        }
        
        let { buildDotNetBasemap } = await import('./basemap');
        return await buildDotNetBasemap(this.component.activeBasemap);
    }
    
    async setActiveBasemap(value: any): Promise<void> {
        let { buildJsBasemap } = await import('./basemap');
        this.component.activeBasemap = await  buildJsBasemap(value, this.layerId, this.viewId);
    }
    
    async getItems(): Promise<any> {
        if (!hasValue(this.component.items)) {
            return null;
        }
        
        let { buildDotNetBasemapGalleryItem } = await import('./basemapGalleryItem');
        return await Promise.all(this.component.items.map(async i => await buildDotNetBasemapGalleryItem(i)));
    }
    
    async setItems(value: any): Promise<void> {
        let { buildJsBasemapGalleryItem } = await import('./basemapGalleryItem');
        this.component.items = await Promise.all(value.map(async i => await buildJsBasemapGalleryItem(i, this.layerId, this.viewId))) as any;
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsBasemapGalleryViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.activeBasemap)) {
        let { buildJsBasemap } = await import('./basemap');
        properties.activeBasemap = await buildJsBasemap(dotNetObject.activeBasemap, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.items)) {
        let { buildJsBasemapGalleryItem } = await import('./basemapGalleryItem');
        properties.items = await Promise.all(dotNetObject.items.map(async i => await buildJsBasemapGalleryItem(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.source)) {
        const { id, dotNetComponentReference, ...sanitizedSource } = dotNetObject.source;
        properties.source = sanitizedSource;
    }
    let jsBasemapGalleryViewModel = new BasemapGalleryViewModel(properties);

    let { default: BasemapGalleryViewModelWrapper } = await import('./basemapGalleryViewModel');
    let basemapGalleryViewModelWrapper = new BasemapGalleryViewModelWrapper(jsBasemapGalleryViewModel);
    basemapGalleryViewModelWrapper.geoBlazorId = dotNetObject.id;
    basemapGalleryViewModelWrapper.viewId = viewId;
    basemapGalleryViewModelWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(basemapGalleryViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = basemapGalleryViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsBasemapGalleryViewModel;
    let { buildDotNetBasemapGalleryViewModel } = await import('./basemapGalleryViewModel');
    let dnInstantiatedObject = await buildDotNetBasemapGalleryViewModel(jsBasemapGalleryViewModel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BasemapGalleryViewModel', e);
    }
    
    return jsBasemapGalleryViewModel;
}

export async function buildDotNetBasemapGalleryViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBasemapGalleryViewModel: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.activeBasemap)) {
        let { buildDotNetBasemap } = await import('./basemap');
        dotNetBasemapGalleryViewModel.activeBasemap = await buildDotNetBasemap(jsObject.activeBasemap);
    }
    if (hasValue(jsObject.items)) {
        let { buildDotNetBasemapGalleryItem } = await import('./basemapGalleryItem');
        dotNetBasemapGalleryViewModel.items = await Promise.all(jsObject.items.map(async i => await buildDotNetBasemapGalleryItem(i)));
    }
    if (hasValue(jsObject.source)) {
        dotNetBasemapGalleryViewModel.source = jsObject.source;
    }
    if (hasValue(jsObject.state)) {
        dotNetBasemapGalleryViewModel.state = jsObject.state;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetBasemapGalleryViewModel.id = k;
                break;
            }
        }
    }

    return dotNetBasemapGalleryViewModel;
}

