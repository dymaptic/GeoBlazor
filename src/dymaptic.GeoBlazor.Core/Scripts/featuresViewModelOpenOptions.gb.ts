// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetFeaturesViewModelOpenOptions } from './featuresViewModelOpenOptions';

export async function buildJsFeaturesViewModelOpenOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeaturesViewModelOpenOptions: any = {};
    if (hasValue(dotNetObject.features)) {
        let { buildJsGraphic } = await import('./graphic');
        jsFeaturesViewModelOpenOptions.features = dotNetObject.features.map(i => buildJsGraphic(i)) as any;
    }
    if (hasValue(dotNetObject.location)) {
        let { buildJsPoint } = await import('./point');
        jsFeaturesViewModelOpenOptions.location = buildJsPoint(dotNetObject.location) as any;
    }

    if (hasValue(dotNetObject.content)) {
        jsFeaturesViewModelOpenOptions.content = dotNetObject.content;
    }
    if (hasValue(dotNetObject.fetchFeatures)) {
        jsFeaturesViewModelOpenOptions.fetchFeatures = dotNetObject.fetchFeatures;
    }
    if (hasValue(dotNetObject.promises)) {
        jsFeaturesViewModelOpenOptions.promises = dotNetObject.promises;
    }
    if (hasValue(dotNetObject.title)) {
        jsFeaturesViewModelOpenOptions.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.updateLocationEnabled)) {
        jsFeaturesViewModelOpenOptions.updateLocationEnabled = dotNetObject.updateLocationEnabled;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFeaturesViewModelOpenOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeaturesViewModelOpenOptions;
    
    let dnInstantiatedObject = await buildDotNetFeaturesViewModelOpenOptions(jsFeaturesViewModelOpenOptions, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeaturesViewModelOpenOptions', e);
    }
    
    return jsFeaturesViewModelOpenOptions;
}

export async function buildDotNetFeaturesViewModelOpenOptionsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeaturesViewModelOpenOptions: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.features)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetFeaturesViewModelOpenOptions.features = jsObject.features.map(i => buildDotNetGraphic(i, layerId, viewId));
    }
    if (hasValue(jsObject.location)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetFeaturesViewModelOpenOptions.location = buildDotNetPoint(jsObject.location);
    }
    if (hasValue(jsObject.content)) {
        dotNetFeaturesViewModelOpenOptions.content = jsObject.content;
    }
    if (hasValue(jsObject.fetchFeatures)) {
        dotNetFeaturesViewModelOpenOptions.fetchFeatures = jsObject.fetchFeatures;
    }
    if (hasValue(jsObject.promises)) {
        dotNetFeaturesViewModelOpenOptions.promises = jsObject.promises;
    }
    if (hasValue(jsObject.title)) {
        dotNetFeaturesViewModelOpenOptions.title = jsObject.title;
    }
    if (hasValue(jsObject.updateLocationEnabled)) {
        dotNetFeaturesViewModelOpenOptions.updateLocationEnabled = jsObject.updateLocationEnabled;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFeaturesViewModelOpenOptions.id = k;
                break;
            }
        }
    }

    return dotNetFeaturesViewModelOpenOptions;
}

