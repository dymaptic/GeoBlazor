// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import ColumnTableMenuConfig = __esri.ColumnTableMenuConfig;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ColumnTableMenuConfigGenerated implements IPropertyWrapper {
    public component: ColumnTableMenuConfig;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ColumnTableMenuConfig) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getItems(): Promise<any> {
        if (!hasValue(this.component.items)) {
            return null;
        }
        
        let { buildDotNetTableMenuItemConfig } = await import('./tableMenuItemConfig');
        return await Promise.all(this.component.items.map(async i => await buildDotNetTableMenuItemConfig(i)));
    }
    
    async setItems(value: any): Promise<void> {
        let { buildJsTableMenuItemConfig } = await import('./tableMenuItemConfig');
        this.component.items = await Promise.all(value.map(async i => await buildJsTableMenuItemConfig(i, this.layerId, this.viewId))) as any;
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsColumnTableMenuConfigGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsColumnTableMenuConfig: any = {}
    if (hasValue(dotNetObject.items)) {
        let { buildJsTableMenuItemConfig } = await import('./tableMenuItemConfig');
        jsColumnTableMenuConfig.items = await Promise.all(dotNetObject.items.map(async i => await buildJsTableMenuItemConfig(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.selectionMode)) {
        jsColumnTableMenuConfig.selectionMode = dotNetObject.selectionMode;
    }

    if (hasValue(dotNetObject.disabled)) {
        jsColumnTableMenuConfig.disabled = dotNetObject.disabled;
    }
    if (hasValue(dotNetObject.icon)) {
        jsColumnTableMenuConfig.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.open)) {
        jsColumnTableMenuConfig.open = dotNetObject.open;
    }

    let { default: ColumnTableMenuConfigWrapper } = await import('./columnTableMenuConfig');
    let columnTableMenuConfigWrapper = new ColumnTableMenuConfigWrapper(jsColumnTableMenuConfig);
    columnTableMenuConfigWrapper.geoBlazorId = dotNetObject.id;
    columnTableMenuConfigWrapper.viewId = viewId;
    columnTableMenuConfigWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(columnTableMenuConfigWrapper);
    jsObjectRefs[dotNetObject.id] = columnTableMenuConfigWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsColumnTableMenuConfig;
    let { buildDotNetColumnTableMenuConfig } = await import('./columnTableMenuConfig');
    let dnInstantiatedObject = await buildDotNetColumnTableMenuConfig(jsColumnTableMenuConfig);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ColumnTableMenuConfig', e);
    }
    
    return jsColumnTableMenuConfig;
}
export async function buildDotNetColumnTableMenuConfigGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetColumnTableMenuConfig: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.items)) {
            let { buildDotNetTableMenuItemConfig } = await import('./tableMenuItemConfig');
            dotNetColumnTableMenuConfig.items = await Promise.all(jsObject.items.map(async i => await buildDotNetTableMenuItemConfig(i)));
        }
        dotNetColumnTableMenuConfig.selectionMode = jsObject.selectionMode;
        if (hasValue(jsObject.disabled)) {
            dotNetColumnTableMenuConfig.disabled = jsObject.disabled;
        }
        if (hasValue(jsObject.icon)) {
            dotNetColumnTableMenuConfig.icon = jsObject.icon;
        }
        if (hasValue(jsObject.open)) {
            dotNetColumnTableMenuConfig.open = jsObject.open;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetColumnTableMenuConfig.id = k;
                break;
            }
        }
    }

    return dotNetColumnTableMenuConfig;
}

