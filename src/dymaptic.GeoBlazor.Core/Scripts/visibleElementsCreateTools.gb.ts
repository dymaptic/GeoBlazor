// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetVisibleElementsCreateTools } from './visibleElementsCreateTools';

export async function buildJsVisibleElementsCreateToolsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsVisibleElementsCreateTools: any = {};

    if (hasValue(dotNetObject.circle)) {
        jsVisibleElementsCreateTools.circle = dotNetObject.circle;
    }
    if (hasValue(dotNetObject.point)) {
        jsVisibleElementsCreateTools.point = dotNetObject.point;
    }
    if (hasValue(dotNetObject.polygon)) {
        jsVisibleElementsCreateTools.polygon = dotNetObject.polygon;
    }
    if (hasValue(dotNetObject.polyline)) {
        jsVisibleElementsCreateTools.polyline = dotNetObject.polyline;
    }
    if (hasValue(dotNetObject.rectangle)) {
        jsVisibleElementsCreateTools.rectangle = dotNetObject.rectangle;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsVisibleElementsCreateTools);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsVisibleElementsCreateTools;
    
    return jsVisibleElementsCreateTools;
}


export async function buildDotNetVisibleElementsCreateToolsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVisibleElementsCreateTools: any = {};
    
    if (hasValue(jsObject.circle)) {
        dotNetVisibleElementsCreateTools.circle = jsObject.circle;
    }
    
    if (hasValue(jsObject.point)) {
        dotNetVisibleElementsCreateTools.point = jsObject.point;
    }
    
    if (hasValue(jsObject.polygon)) {
        dotNetVisibleElementsCreateTools.polygon = jsObject.polygon;
    }
    
    if (hasValue(jsObject.polyline)) {
        dotNetVisibleElementsCreateTools.polyline = jsObject.polyline;
    }
    
    if (hasValue(jsObject.rectangle)) {
        dotNetVisibleElementsCreateTools.rectangle = jsObject.rectangle;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetVisibleElementsCreateTools.id = geoBlazorId;
    }

    return dotNetVisibleElementsCreateTools;
}

