// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import RelationshipElement from '@arcgis/core/form/elements/RelationshipElement';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetRelationshipElement } from './relationshipElement';

export async function buildJsRelationshipElementGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.orderByFields)) {
        let { buildJsRelatedRecordsInfoFieldOrder } = await import('./relatedRecordsInfoFieldOrder');
        properties.orderByFields = dotNetObject.orderByFields.map(i => buildJsRelatedRecordsInfoFieldOrder(i)) as any;
    }

    if (hasValue(dotNetObject.description)) {
        properties.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.displayCount)) {
        properties.displayCount = dotNetObject.displayCount;
    }
    if (hasValue(dotNetObject.displayType)) {
        properties.displayType = dotNetObject.displayType;
    }
    if (hasValue(dotNetObject.editableExpression)) {
        properties.editableExpression = dotNetObject.editableExpression;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.relationshipId)) {
        properties.relationshipId = dotNetObject.relationshipId;
    }
    if (hasValue(dotNetObject.visibilityExpression)) {
        properties.visibilityExpression = dotNetObject.visibilityExpression;
    }
    let jsRelationshipElement = new RelationshipElement(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsRelationshipElement);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRelationshipElement;
    
    let { buildDotNetRelationshipElement } = await import('./relationshipElement');
    let dnInstantiatedObject = await buildDotNetRelationshipElement(jsRelationshipElement, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type RelationshipElement detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RelationshipElement', e);
    }
    
    return jsRelationshipElement;
}


export async function buildDotNetRelationshipElementGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRelationshipElement: any = {};
    
    if (hasValue(jsObject.orderByFields)) {
        let { buildDotNetRelatedRecordsInfoFieldOrder } = await import('./relatedRecordsInfoFieldOrder');
        dotNetRelationshipElement.orderByFields = jsObject.orderByFields.map(i => buildDotNetRelatedRecordsInfoFieldOrder(i));
    }
    
    if (hasValue(jsObject.description)) {
        dotNetRelationshipElement.description = jsObject.description;
    }
    
    if (hasValue(jsObject.displayCount)) {
        dotNetRelationshipElement.displayCount = jsObject.displayCount;
    }
    
    if (hasValue(jsObject.displayType)) {
        dotNetRelationshipElement.displayType = jsObject.displayType;
    }
    
    if (hasValue(jsObject.editableExpression)) {
        dotNetRelationshipElement.editableExpression = jsObject.editableExpression;
    }
    
    if (hasValue(jsObject.label)) {
        dotNetRelationshipElement.label = jsObject.label;
    }
    
    if (hasValue(jsObject.relationshipId)) {
        dotNetRelationshipElement.relationshipId = jsObject.relationshipId;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetRelationshipElement.type = jsObject.type;
    }
    
    if (hasValue(jsObject.visibilityExpression)) {
        dotNetRelationshipElement.visibilityExpression = jsObject.visibilityExpression;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetRelationshipElement.id = geoBlazorId;
    }

    return dotNetRelationshipElement;
}

