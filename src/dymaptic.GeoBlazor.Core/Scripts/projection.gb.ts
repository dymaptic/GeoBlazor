// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import projection = __esri.projection;
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ProjectionGenerated implements IPropertyWrapper {
    public component: projection;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: projection) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async isLoaded(): Promise<any> {
        return this.component.isLoaded();
    }

    async load(): Promise<any> {
        return await this.component.load();
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsProjectionGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsprojection: any = {};


    let { default: ProjectionWrapper } = await import('./projection');
    let projectionWrapper = new ProjectionWrapper(jsprojection);
    projectionWrapper.geoBlazorId = dotNetObject.id;
    projectionWrapper.viewId = viewId;
    projectionWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(projectionWrapper);
    jsObjectRefs[dotNetObject.id] = projectionWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsprojection;
    
    let { buildDotNetProjection } = await import('./projection');
    let dnInstantiatedObject = await buildDotNetProjection(jsprojection);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type Projection detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Projection', e);
    }
    
    return jsprojection;
}


export async function buildDotNetProjectionGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetProjection: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetProjection.id = geoBlazorId;
    }

    return dotNetProjection;
}

