// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import CollectionEvent = __esri.CollectionEvent;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CollectionEventGenerated implements IPropertyWrapper {
    public component: CollectionEvent;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: CollectionEvent) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async preventDefault(): Promise<void> {
        this.component.preventDefault();
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsCollectionEventGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCollectionEvent: any = {}

    if (hasValue(dotNetObject.cancellable)) {
        jsCollectionEvent.cancellable = dotNetObject.cancellable;
    }
    if (hasValue(dotNetObject.defaultPrevented)) {
        jsCollectionEvent.defaultPrevented = dotNetObject.defaultPrevented;
    }

    let { default: CollectionEventWrapper } = await import('./collectionEvent');
    let collectionEventWrapper = new CollectionEventWrapper(jsCollectionEvent);
    collectionEventWrapper.geoBlazorId = dotNetObject.id;
    collectionEventWrapper.viewId = viewId;
    collectionEventWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(collectionEventWrapper);
    jsObjectRefs[dotNetObject.id] = collectionEventWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsCollectionEvent;
    let { buildDotNetCollectionEvent } = await import('./collectionEvent');
    let dnInstantiatedObject = await buildDotNetCollectionEvent(jsCollectionEvent);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CollectionEvent', e);
    }
    
    return jsCollectionEvent;
}

export async function buildDotNetCollectionEventGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCollectionEvent: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.cancellable)) {
            dotNetCollectionEvent.cancellable = jsObject.cancellable;
        }
        if (hasValue(jsObject.defaultPrevented)) {
            dotNetCollectionEvent.defaultPrevented = jsObject.defaultPrevented;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCollectionEvent.id = k;
                break;
            }
        }
    }

    return dotNetCollectionEvent;
}

