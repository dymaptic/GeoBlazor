// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Magnifier from '@arcgis/core/views/Magnifier';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetMagnifier } from './magnifier';

export async function buildJsMagnifierGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.offset)) {
        let { buildJsMagnifierScreenPoint } = await import('./magnifierScreenPoint');
        properties.offset = await buildJsMagnifierScreenPoint(dotNetObject.offset, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.position)) {
        let { buildJsMagnifierScreenPoint } = await import('./magnifierScreenPoint');
        properties.position = await buildJsMagnifierScreenPoint(dotNetObject.position, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.factor)) {
        properties.factor = dotNetObject.factor;
    }
    if (hasValue(dotNetObject.maskEnabled)) {
        properties.maskEnabled = dotNetObject.maskEnabled;
    }
    if (hasValue(dotNetObject.maskUrl)) {
        properties.maskUrl = dotNetObject.maskUrl;
    }
    if (hasValue(dotNetObject.overlayEnabled)) {
        properties.overlayEnabled = dotNetObject.overlayEnabled;
    }
    if (hasValue(dotNetObject.overlayUrl)) {
        properties.overlayUrl = dotNetObject.overlayUrl;
    }
    if (hasValue(dotNetObject.size)) {
        properties.size = dotNetObject.size;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    let jsMagnifier = new Magnifier(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsMagnifier);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsMagnifier;
    
    return jsMagnifier;
}


export async function buildDotNetMagnifierGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMagnifier: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.offset)) {
        let { buildDotNetMagnifierScreenPoint } = await import('./magnifierScreenPoint');
        dotNetMagnifier.offset = await buildDotNetMagnifierScreenPoint(jsObject.offset);
    }
    if (hasValue(jsObject.position)) {
        let { buildDotNetMagnifierScreenPoint } = await import('./magnifierScreenPoint');
        dotNetMagnifier.position = await buildDotNetMagnifierScreenPoint(jsObject.position);
    }
    if (hasValue(jsObject.factor)) {
        dotNetMagnifier.factor = jsObject.factor;
    }
    if (hasValue(jsObject.maskEnabled)) {
        dotNetMagnifier.maskEnabled = jsObject.maskEnabled;
    }
    if (hasValue(jsObject.maskUrl)) {
        dotNetMagnifier.maskUrl = jsObject.maskUrl;
    }
    if (hasValue(jsObject.overlayEnabled)) {
        dotNetMagnifier.overlayEnabled = jsObject.overlayEnabled;
    }
    if (hasValue(jsObject.overlayUrl)) {
        dotNetMagnifier.overlayUrl = jsObject.overlayUrl;
    }
    if (hasValue(jsObject.size)) {
        dotNetMagnifier.size = jsObject.size;
    }
    if (hasValue(jsObject.visible)) {
        dotNetMagnifier.visible = jsObject.visible;
    }

    return dotNetMagnifier;
}

