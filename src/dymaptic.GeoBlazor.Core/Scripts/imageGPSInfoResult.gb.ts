// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageGPSInfoResult from '@arcgis/core/rest/support/ImageGPSInfoResult';
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetImageGPSInfoResult } from './imageGPSInfoResult';

export async function buildJsImageGPSInfoResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.images) && dotNetObject.images.length > 0) {
        let { buildJsImageGPSInfo } = await import('./imageGPSInfo');
        properties.images = await Promise.all(dotNetObject.images.map(async i => await buildJsImageGPSInfo(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.cameras) && dotNetObject.cameras.length > 0) {
        properties.cameras = dotNetObject.cameras;
    }
    let jsImageGPSInfoResult = new ImageGPSInfoResult(properties);
    
    jsObjectRefs[dotNetObject.id] = jsImageGPSInfoResult;
    arcGisObjectRefs[dotNetObject.id] = jsImageGPSInfoResult;
    
    return jsImageGPSInfoResult;
}


export async function buildDotNetImageGPSInfoResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageGPSInfoResult: any = {};
    
    if (hasValue(jsObject.images)) {
        let { buildDotNetImageGPSInfo } = await import('./imageGPSInfo');
        dotNetImageGPSInfoResult.images = await Promise.all(jsObject.images.map(async i => await buildDotNetImageGPSInfo(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.cameras)) {
        dotNetImageGPSInfoResult.cameras = removeCircularReferences(jsObject.cameras);
    }
    

    return dotNetImageGPSInfoResult;
}

