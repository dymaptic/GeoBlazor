// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageGPSInfoResult from '@arcgis/core/rest/support/ImageGPSInfoResult';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetImageGPSInfoResult } from './imageGPSInfoResult';

export async function buildJsImageGPSInfoResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.images)) {
        let { buildJsImageGPSInfo } = await import('./imageGPSInfo');
        properties.images = await Promise.all(dotNetObject.images.map(async i => await buildJsImageGPSInfo(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.cameras)) {
        properties.cameras = dotNetObject.cameras;
    }
    let jsImageGPSInfoResult = new ImageGPSInfoResult(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsImageGPSInfoResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageGPSInfoResult;
    
    let { buildDotNetImageGPSInfoResult } = await import('./imageGPSInfoResult');
    let dnInstantiatedObject = await buildDotNetImageGPSInfoResult(jsImageGPSInfoResult);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type ImageGPSInfoResult detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImageGPSInfoResult', e);
    }
    
    return jsImageGPSInfoResult;
}


export async function buildDotNetImageGPSInfoResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageGPSInfoResult: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.images)) {
        let { buildDotNetImageGPSInfo } = await import('./imageGPSInfo');
        dotNetImageGPSInfoResult.images = await Promise.all(jsObject.images.map(async i => await buildDotNetImageGPSInfo(i)));
    }
    if (hasValue(jsObject.cameras)) {
        dotNetImageGPSInfoResult.cameras = jsObject.cameras;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImageGPSInfoResult.id = k;
                break;
            }
        }
    }

    return dotNetImageGPSInfoResult;
}

