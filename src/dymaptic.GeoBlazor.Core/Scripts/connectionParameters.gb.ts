// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetConnectionParameters } from './connectionParameters';

export async function buildJsConnectionParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsConnectionParameters: any = {}
    if (hasValue(dotNetObject.geometryDefinition)) {
        let { buildJsExtent } = await import('./extent');
        jsConnectionParameters.geometryDefinition = buildJsExtent(dotNetObject.geometryDefinition) as any;
    }

    if (hasValue(dotNetObject.customParameters)) {
        jsConnectionParameters.customParameters = dotNetObject.customParameters;
    }
    if (hasValue(dotNetObject.definitionExpression)) {
        jsConnectionParameters.definitionExpression = dotNetObject.definitionExpression;
    }
    if (hasValue(dotNetObject.maxReconnectionAttempts)) {
        jsConnectionParameters.maxReconnectionAttempts = dotNetObject.maxReconnectionAttempts;
    }
    if (hasValue(dotNetObject.maxReconnectionInterval)) {
        jsConnectionParameters.maxReconnectionInterval = dotNetObject.maxReconnectionInterval;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        jsConnectionParameters.spatialReference = dotNetObject.spatialReference;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsConnectionParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsConnectionParameters;
    
    let dnInstantiatedObject = await buildDotNetConnectionParameters(jsConnectionParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ConnectionParameters', e);
    }
    
    return jsConnectionParameters;
}

export async function buildDotNetConnectionParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetConnectionParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.geometryDefinition)) {
            let { buildDotNetExtent } = await import('./extent');
            dotNetConnectionParameters.geometryDefinition = buildDotNetExtent(jsObject.geometryDefinition);
        }
        if (hasValue(jsObject.customParameters)) {
            dotNetConnectionParameters.customParameters = jsObject.customParameters;
        }
        if (hasValue(jsObject.definitionExpression)) {
            dotNetConnectionParameters.definitionExpression = jsObject.definitionExpression;
        }
        if (hasValue(jsObject.maxReconnectionAttempts)) {
            dotNetConnectionParameters.maxReconnectionAttempts = jsObject.maxReconnectionAttempts;
        }
        if (hasValue(jsObject.maxReconnectionInterval)) {
            dotNetConnectionParameters.maxReconnectionInterval = jsObject.maxReconnectionInterval;
        }
        if (hasValue(jsObject.spatialReference)) {
            dotNetConnectionParameters.spatialReference = jsObject.spatialReference;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetConnectionParameters.id = k;
                break;
            }
        }
    }

    return dotNetConnectionParameters;
}

