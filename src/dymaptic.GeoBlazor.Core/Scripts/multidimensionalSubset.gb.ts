// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import MultidimensionalSubset from '@arcgis/core/layers/support/MultidimensionalSubset';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetMultidimensionalSubset } from './multidimensionalSubset';

export async function buildJsMultidimensionalSubsetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.areaOfInterest)) {
        let { buildJsGeometry } = await import('./geometry');
        properties.areaOfInterest = buildJsGeometry(dotNetObject.areaOfInterest) as any;
    }
    if (hasValue(dotNetObject.subsetDefinitions)) {
        let { buildJsDimensionalDefinition } = await import('./dimensionalDefinition');
        properties.subsetDefinitions = await Promise.all(dotNetObject.subsetDefinitions.map(async i => await buildJsDimensionalDefinition(i, layerId, viewId))) as any;
    }

    let jsMultidimensionalSubset = new MultidimensionalSubset(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsMultidimensionalSubset);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsMultidimensionalSubset;
    
    let { buildDotNetMultidimensionalSubset } = await import('./multidimensionalSubset');
    let dnInstantiatedObject = await buildDotNetMultidimensionalSubset(jsMultidimensionalSubset);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type MultidimensionalSubset detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for MultidimensionalSubset', e);
    }
    
    return jsMultidimensionalSubset;
}


export async function buildDotNetMultidimensionalSubsetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMultidimensionalSubset: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.areaOfInterest)) {
        let { buildDotNetGeometry } = await import('./geometry');
        dotNetMultidimensionalSubset.areaOfInterest = buildDotNetGeometry(jsObject.areaOfInterest);
    }
    if (hasValue(jsObject.subsetDefinitions)) {
        let { buildDotNetDimensionalDefinition } = await import('./dimensionalDefinition');
        dotNetMultidimensionalSubset.subsetDefinitions = await Promise.all(jsObject.subsetDefinitions.map(async i => await buildDotNetDimensionalDefinition(i)));
    }
    if (hasValue(jsObject.dimensions)) {
        dotNetMultidimensionalSubset.dimensions = jsObject.dimensions;
    }
    if (hasValue(jsObject.variables)) {
        dotNetMultidimensionalSubset.variables = jsObject.variables;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetMultidimensionalSubset.id = geoBlazorId;
    }

    return dotNetMultidimensionalSubset;
}

