// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import MultidimensionalSubset from '@arcgis/core/layers/support/MultidimensionalSubset';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class MultidimensionalSubsetGenerated implements IPropertyWrapper {
    public component: MultidimensionalSubset;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: MultidimensionalSubset) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getSubsetDefinitions(): Promise<any> {
        if (!hasValue(this.component.subsetDefinitions)) {
            return null;
        }
        
        let { buildDotNetDimensionalDefinition } = await import('./dimensionalDefinition');
        return await Promise.all(this.component.subsetDefinitions.map(async i => await buildDotNetDimensionalDefinition(i)));
    }
    
    async setSubsetDefinitions(value: any): Promise<void> {
        let { buildJsDimensionalDefinition } = await import('./dimensionalDefinition');
        this.component.subsetDefinitions = await Promise.all(value.map(async i => await buildJsDimensionalDefinition(i)));
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsMultidimensionalSubsetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsMultidimensionalSubset = new MultidimensionalSubset();
    if (hasValue(dotNetObject.subsetDefinitions)) {
        let { buildJsDimensionalDefinition } = await import('./jsBuilder');
        jsMultidimensionalSubset.subsetDefinitions = dotNetObject.subsetDefinitions.map(i => buildJsDimensionalDefinition(i)) as any;
    }

    if (hasValue(dotNetObject.areaOfInterest)) {
        jsMultidimensionalSubset.areaOfInterest = dotNetObject.areaOfInterest;
    }
    let { default: MultidimensionalSubsetWrapper } = await import('./multidimensionalSubset');
    let multidimensionalSubsetWrapper = new MultidimensionalSubsetWrapper(jsMultidimensionalSubset);
    multidimensionalSubsetWrapper.geoBlazorId = dotNetObject.id;
    multidimensionalSubsetWrapper.viewId = viewId;
    multidimensionalSubsetWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(multidimensionalSubsetWrapper);
    jsObjectRefs[dotNetObject.id] = multidimensionalSubsetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsMultidimensionalSubset;
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for MultidimensionalSubset', e);
    }
    
    return jsMultidimensionalSubset;
}

export async function buildDotNetMultidimensionalSubsetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMultidimensionalSubset: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.subsetDefinitions)) {
            let { buildDotNetDimensionalDefinition } = await import('./dimensionalDefinition');
            dotNetMultidimensionalSubset.subsetDefinitions = await Promise.all(jsObject.subsetDefinitions.map(async i => await buildDotNetDimensionalDefinition(i)));
        }
        if (hasValue(jsObject.areaOfInterest)) {
            dotNetMultidimensionalSubset.areaOfInterest = jsObject.areaOfInterest;
        }
        if (hasValue(jsObject.dimensions)) {
            dotNetMultidimensionalSubset.dimensions = jsObject.dimensions;
        }
        if (hasValue(jsObject.variables)) {
            dotNetMultidimensionalSubset.variables = jsObject.variables;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetMultidimensionalSubset.id = k;
                break;
            }
        }
    }

    return dotNetMultidimensionalSubset;
}

