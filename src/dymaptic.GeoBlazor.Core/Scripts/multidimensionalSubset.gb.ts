// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import MultidimensionalSubset from '@arcgis/core/layers/support/MultidimensionalSubset';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';

export async function buildJsMultidimensionalSubsetGenerated(dotNetObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.areaOfInterest)) {
        properties.areaOfInterest = dotNetObject.areaOfInterest;
    }
    if (hasValue(dotNetObject.subsetDefinitions) && dotNetObject.subsetDefinitions.length > 0) {
        let { buildJsDimensionalDefinition } = await import('./dimensionalDefinition');
        properties.subsetDefinitions = await Promise.all(dotNetObject.subsetDefinitions.map(async i => await buildJsDimensionalDefinition(i, viewId))) as any;
    }

    let jsMultidimensionalSubset = new MultidimensionalSubset(properties);
    
    jsObjectRefs[dotNetObject.id] = jsMultidimensionalSubset;
    arcGisObjectRefs[dotNetObject.id] = jsMultidimensionalSubset;
    
    return jsMultidimensionalSubset;
}


export async function buildDotNetMultidimensionalSubsetGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMultidimensionalSubset: any = {};
    
    if (hasValue(jsObject.subsetDefinitions)) {
        let { buildDotNetDimensionalDefinition } = await import('./dimensionalDefinition');
        dotNetMultidimensionalSubset.subsetDefinitions = await Promise.all(jsObject.subsetDefinitions.map(async i => await buildDotNetDimensionalDefinition(i, viewId)));
    }
    
    if (hasValue(jsObject.areaOfInterest)) {
        dotNetMultidimensionalSubset.areaOfInterest = jsObject.areaOfInterest;
    }
    
    if (hasValue(jsObject.dimensions)) {
        dotNetMultidimensionalSubset.dimensions = removeCircularReferences(jsObject.dimensions);
    }
    
    if (hasValue(jsObject.variables)) {
        dotNetMultidimensionalSubset.variables = jsObject.variables;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetMultidimensionalSubset.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetMultidimensionalSubset.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetMultidimensionalSubset.id)) {
        jsObjectRefs[dotNetMultidimensionalSubset.id] ??= jsObject;
        arcGisObjectRefs[dotNetMultidimensionalSubset.id] ??= jsObject;
    }

    return dotNetMultidimensionalSubset;
}

