// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import MultidimensionalSubset from '@arcgis/core/layers/support/MultidimensionalSubset';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetMultidimensionalSubset } from './multidimensionalSubset';

export async function buildJsMultidimensionalSubsetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsMultidimensionalSubset = new MultidimensionalSubset();
    if (hasValue(dotNetObject.areaOfInterest)) {
        let { buildJsGeometry } = await import('./geometry');
        jsMultidimensionalSubset.areaOfInterest = buildJsGeometry(dotNetObject.areaOfInterest) as any;
    }

    if (hasValue(dotNetObject.subsetDefinitions)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedSubsetDefinitions } = dotNetObject.subsetDefinitions;
        jsMultidimensionalSubset.subsetDefinitions = sanitizedSubsetDefinitions;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsMultidimensionalSubset);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsMultidimensionalSubset;
    
    let dnInstantiatedObject = await buildDotNetMultidimensionalSubset(jsMultidimensionalSubset);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for MultidimensionalSubset', e);
    }
    
    return jsMultidimensionalSubset;
}

export async function buildDotNetMultidimensionalSubsetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMultidimensionalSubset: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.areaOfInterest)) {
            let { buildDotNetGeometry } = await import('./geometry');
            dotNetMultidimensionalSubset.areaOfInterest = buildDotNetGeometry(jsObject.areaOfInterest);
        }
    if (hasValue(jsObject.dimensions)) {
        dotNetMultidimensionalSubset.dimensions = jsObject.dimensions;
    }
    if (hasValue(jsObject.subsetDefinitions)) {
        dotNetMultidimensionalSubset.subsetDefinitions = jsObject.subsetDefinitions;
    }
    if (hasValue(jsObject.variables)) {
        dotNetMultidimensionalSubset.variables = jsObject.variables;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetMultidimensionalSubset.id = k;
                break;
            }
        }
    }

    return dotNetMultidimensionalSubset;
}

