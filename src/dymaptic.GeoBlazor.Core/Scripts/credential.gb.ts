// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Credential from '@arcgis/core/identity/Credential';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, buildJsStreamReference } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CredentialGenerated implements IPropertyWrapper {
    public component: Credential;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: Credential) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {

        if (hasValue(dotNetObject.expires)) {
            this.component.expires = dotNetObject.expires;
        }
        if (hasValue(dotNetObject.isAdmin)) {
            this.component.isAdmin = dotNetObject.isAdmin;
        }
        if (hasValue(dotNetObject.oAuthState)) {
            this.component.oAuthState = dotNetObject.oAuthState;
        }
        if (hasValue(dotNetObject.server)) {
            this.component.server = dotNetObject.server;
        }
        if (hasValue(dotNetObject.ssl)) {
            this.component.ssl = dotNetObject.ssl;
        }
        if (hasValue(dotNetObject.token)) {
            this.component.token = dotNetObject.token;
        }
        if (hasValue(dotNetObject.userId)) {
            this.component.userId = dotNetObject.userId;
        }
    }
    
    async refreshToken(): Promise<void> {
        this.component.refreshToken();
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsCredentialGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.expires)) {
        properties.expires = dotNetObject.expires;
    }
    if (hasValue(dotNetObject.isAdmin)) {
        properties.isAdmin = dotNetObject.isAdmin;
    }
    if (hasValue(dotNetObject.oAuthState)) {
        properties.oAuthState = dotNetObject.oAuthState;
    }
    if (hasValue(dotNetObject.server)) {
        properties.server = dotNetObject.server;
    }
    if (hasValue(dotNetObject.ssl)) {
        properties.ssl = dotNetObject.ssl;
    }
    if (hasValue(dotNetObject.token)) {
        properties.token = dotNetObject.token;
    }
    if (hasValue(dotNetObject.userId)) {
        properties.userId = dotNetObject.userId;
    }
    let jsCredential = new Credential(properties);
    jsCredential.on('destroy', async (evt: any) => {
        let streamRef = buildJsStreamReference(evt ?? {});
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsDestroy', streamRef);
    });
    
    jsCredential.on('token-change', async (evt: any) => {
        let streamRef = buildJsStreamReference(evt ?? {});
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsTokenChange', streamRef);
    });
    

    let { default: CredentialWrapper } = await import('./credential');
    let credentialWrapper = new CredentialWrapper(jsCredential);
    credentialWrapper.geoBlazorId = dotNetObject.id;
    credentialWrapper.viewId = viewId;
    credentialWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(credentialWrapper);
    jsObjectRefs[dotNetObject.id] = credentialWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsCredential;
    
    return jsCredential;
}


export async function buildDotNetCredentialGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCredential: any = {};
    
    if (hasValue(jsObject.expires)) {
        dotNetCredential.expires = jsObject.expires;
    }
    
    if (hasValue(jsObject.isAdmin)) {
        dotNetCredential.isAdmin = jsObject.isAdmin;
    }
    
    if (hasValue(jsObject.oAuthState)) {
        dotNetCredential.oAuthState = jsObject.oAuthState;
    }
    
    if (hasValue(jsObject.server)) {
        dotNetCredential.server = jsObject.server;
    }
    
    if (hasValue(jsObject.ssl)) {
        dotNetCredential.ssl = jsObject.ssl;
    }
    
    if (hasValue(jsObject.token)) {
        dotNetCredential.token = jsObject.token;
    }
    
    if (hasValue(jsObject.userId)) {
        dotNetCredential.userId = jsObject.userId;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCredential.id = geoBlazorId;
    }

    return dotNetCredential;
}

