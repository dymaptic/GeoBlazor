// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import CapabilitiesAnalytics = __esri.CapabilitiesAnalytics;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CapabilitiesAnalyticsGenerated implements IPropertyWrapper {
    public component: CapabilitiesAnalytics;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: CapabilitiesAnalytics) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsCapabilitiesAnalyticsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCapabilitiesAnalytics: any = {}

    if (hasValue(dotNetObject.supportsCacheHint)) {
        jsCapabilitiesAnalytics.supportsCacheHint = dotNetObject.supportsCacheHint;
    }
    let { default: CapabilitiesAnalyticsWrapper } = await import('./capabilitiesAnalytics');
    let capabilitiesAnalyticsWrapper = new CapabilitiesAnalyticsWrapper(jsCapabilitiesAnalytics);
    capabilitiesAnalyticsWrapper.geoBlazorId = dotNetObject.id;
    capabilitiesAnalyticsWrapper.viewId = viewId;
    capabilitiesAnalyticsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(capabilitiesAnalyticsWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = capabilitiesAnalyticsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsCapabilitiesAnalytics;
    
    return jsCapabilitiesAnalytics;
}

export async function buildDotNetCapabilitiesAnalyticsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCapabilitiesAnalytics: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetCapabilitiesAnalytics.supportsCacheHint = jsObject.supportsCacheHint;

    return dotNetCapabilitiesAnalytics;
}

