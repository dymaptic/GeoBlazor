// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import BuildingGroupSublayer from '@arcgis/core/layers/buildingSublayers/BuildingGroupSublayer';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class BuildingGroupSublayerGenerated implements IPropertyWrapper {
    public component: BuildingGroupSublayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: BuildingGroupSublayer) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async loadAll(): Promise<any> {
        let result = await this.component.loadAll();
        let { buildDotNetBuildingSceneLayer } = await import('./buildingSceneLayer');
        return await buildDotNetBuildingSceneLayer(result);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsBuildingGroupSublayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.listMode)) {
        properties.listMode = dotNetObject.listMode;
    }
    if (hasValue(dotNetObject.opacity)) {
        properties.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    let jsBuildingGroupSublayer = new BuildingGroupSublayer(properties);

    let { default: BuildingGroupSublayerWrapper } = await import('./buildingGroupSublayer');
    let buildingGroupSublayerWrapper = new BuildingGroupSublayerWrapper(jsBuildingGroupSublayer);
    buildingGroupSublayerWrapper.geoBlazorId = dotNetObject.id;
    buildingGroupSublayerWrapper.viewId = viewId;
    buildingGroupSublayerWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(buildingGroupSublayerWrapper);
    jsObjectRefs[dotNetObject.id] = buildingGroupSublayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsBuildingGroupSublayer;
    let { buildDotNetBuildingGroupSublayer } = await import('./buildingGroupSublayer');
    let dnInstantiatedObject = await buildDotNetBuildingGroupSublayer(jsBuildingGroupSublayer);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BuildingGroupSublayer', e);
    }
    
    return jsBuildingGroupSublayer;
}

export async function buildDotNetBuildingGroupSublayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBuildingGroupSublayer: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.id)) {
        dotNetBuildingGroupSublayer.buildingSublayerId = jsObject.id;
    }
    if (hasValue(jsObject.isEmpty)) {
        dotNetBuildingGroupSublayer.isEmpty = jsObject.isEmpty;
    }
    if (hasValue(jsObject.listMode)) {
        dotNetBuildingGroupSublayer.listMode = jsObject.listMode;
    }
    if (hasValue(jsObject.modelName)) {
        dotNetBuildingGroupSublayer.modelName = jsObject.modelName;
    }
    if (hasValue(jsObject.opacity)) {
        dotNetBuildingGroupSublayer.opacity = jsObject.opacity;
    }
    if (hasValue(jsObject.title)) {
        dotNetBuildingGroupSublayer.title = jsObject.title;
    }
    if (hasValue(jsObject.type)) {
        dotNetBuildingGroupSublayer.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetBuildingGroupSublayer.id = k;
                break;
            }
        }
    }

    return dotNetBuildingGroupSublayer;
}

