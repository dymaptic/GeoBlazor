// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import VoxelVolumeStyle from '@arcgis/core/layers/support/VoxelVolumeStyle';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetVoxelVolumeStyle } from './voxelVolumeStyle';

export async function buildJsVoxelVolumeStyleGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.dynamicSections)) {
        let { buildJsVoxelDynamicSection } = await import('./voxelDynamicSection');
        properties.dynamicSections = await Promise.all(dotNetObject.dynamicSections.map(async i => await buildJsVoxelDynamicSection(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.slices)) {
        let { buildJsVoxelSlice } = await import('./voxelSlice');
        properties.slices = await Promise.all(dotNetObject.slices.map(async i => await buildJsVoxelSlice(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.verticalExaggeration)) {
        properties.verticalExaggeration = dotNetObject.verticalExaggeration;
    }
    if (hasValue(dotNetObject.verticalOffset)) {
        properties.verticalOffset = dotNetObject.verticalOffset;
    }
    let jsVoxelVolumeStyle = new VoxelVolumeStyle(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsVoxelVolumeStyle);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsVoxelVolumeStyle;
    
    return jsVoxelVolumeStyle;
}


export async function buildDotNetVoxelVolumeStyleGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsVoxelVolumeStyle } = await import('./voxelVolumeStyle');
        jsComponentRef = await buildJsVoxelVolumeStyle(jsObject, layerId, viewId);
    }
    
    let dotNetVoxelVolumeStyle: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.dynamicSections)) {
        let { buildDotNetVoxelDynamicSection } = await import('./voxelDynamicSection');
        dotNetVoxelVolumeStyle.dynamicSections = await Promise.all(jsObject.dynamicSections.map(async i => await buildDotNetVoxelDynamicSection(i, layerId, viewId)));
    }
    if (hasValue(jsObject.slices)) {
        let { buildDotNetVoxelSlice } = await import('./voxelSlice');
        dotNetVoxelVolumeStyle.slices = await Promise.all(jsObject.slices.map(async i => await buildDotNetVoxelSlice(i, layerId, viewId)));
    }
    if (hasValue(jsObject.verticalExaggeration)) {
        dotNetVoxelVolumeStyle.verticalExaggeration = jsObject.verticalExaggeration;
    }
    if (hasValue(jsObject.verticalOffset)) {
        dotNetVoxelVolumeStyle.verticalOffset = jsObject.verticalOffset;
    }
    if (hasValue(jsObject.volumeId)) {
        dotNetVoxelVolumeStyle.volumeId = jsObject.volumeId;
    }

    return dotNetVoxelVolumeStyle;
}

