// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import FeatureLayerBaseElevationInfo = __esri.FeatureLayerBaseElevationInfo;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FeatureLayerBaseElevationInfoGenerated implements IPropertyWrapper {
    public component: FeatureLayerBaseElevationInfo;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: FeatureLayerBaseElevationInfo) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getFeatureExpressionInfo(): Promise<any> {
        if (!hasValue(this.component.featureExpressionInfo)) {
            return null;
        }
        
        let { buildDotNetFeatureLayerBaseElevationInfoFeatureExpressionInfo } = await import('./featureLayerBaseElevationInfoFeatureExpressionInfo');
        return await buildDotNetFeatureLayerBaseElevationInfoFeatureExpressionInfo(this.component.featureExpressionInfo);
    }
    async setFeatureExpressionInfo(value: any): Promise<void> {
        let { buildJsFeatureLayerBaseElevationInfoFeatureExpressionInfo } = await import('./featureLayerBaseElevationInfoFeatureExpressionInfo');
        this.component.featureExpressionInfo = await  buildJsFeatureLayerBaseElevationInfoFeatureExpressionInfo(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsFeatureLayerBaseElevationInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureLayerBaseElevationInfo: any = {}
    if (hasValue(dotNetObject.featureExpressionInfo)) {
        let { buildJsFeatureLayerBaseElevationInfoFeatureExpressionInfo } = await import('./featureLayerBaseElevationInfoFeatureExpressionInfo');
        jsFeatureLayerBaseElevationInfo.featureExpressionInfo = await buildJsFeatureLayerBaseElevationInfoFeatureExpressionInfo(dotNetObject.featureExpressionInfo, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.mode)) {
        jsFeatureLayerBaseElevationInfo.mode = dotNetObject.mode;
    }
    if (hasValue(dotNetObject.offset)) {
        jsFeatureLayerBaseElevationInfo.offset = dotNetObject.offset;
    }
    if (hasValue(dotNetObject.unit)) {
        jsFeatureLayerBaseElevationInfo.unit = dotNetObject.unit;
    }
    let { default: FeatureLayerBaseElevationInfoWrapper } = await import('./featureLayerBaseElevationInfo');
    let featureLayerBaseElevationInfoWrapper = new FeatureLayerBaseElevationInfoWrapper(jsFeatureLayerBaseElevationInfo);
    featureLayerBaseElevationInfoWrapper.geoBlazorId = dotNetObject.id;
    featureLayerBaseElevationInfoWrapper.viewId = viewId;
    featureLayerBaseElevationInfoWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(featureLayerBaseElevationInfoWrapper);
    jsObjectRefs[dotNetObject.id] = featureLayerBaseElevationInfoWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureLayerBaseElevationInfo;
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureLayerBaseElevationInfo', e);
    }
    
    return jsFeatureLayerBaseElevationInfo;
}

export async function buildDotNetFeatureLayerBaseElevationInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureLayerBaseElevationInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.featureExpressionInfo)) {
            let { buildDotNetFeatureLayerBaseElevationInfoFeatureExpressionInfo } = await import('./featureLayerBaseElevationInfoFeatureExpressionInfo');
            dotNetFeatureLayerBaseElevationInfo.featureExpressionInfo = await buildDotNetFeatureLayerBaseElevationInfoFeatureExpressionInfo(jsObject.featureExpressionInfo);
        }
        if (hasValue(jsObject.mode)) {
            dotNetFeatureLayerBaseElevationInfo.mode = jsObject.mode;
        }
        if (hasValue(jsObject.offset)) {
            dotNetFeatureLayerBaseElevationInfo.offset = jsObject.offset;
        }
        if (hasValue(jsObject.unit)) {
            dotNetFeatureLayerBaseElevationInfo.unit = jsObject.unit;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFeatureLayerBaseElevationInfo.id = k;
                break;
            }
        }
    }

    return dotNetFeatureLayerBaseElevationInfo;
}

