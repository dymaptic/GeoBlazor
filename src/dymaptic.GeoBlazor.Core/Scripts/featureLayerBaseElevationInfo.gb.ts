// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetFeatureLayerBaseElevationInfo } from './featureLayerBaseElevationInfo';

export async function buildJsFeatureLayerBaseElevationInfoGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsFeatureLayerBaseElevationInfo: any = {};
    if (hasValue(dotNetObject.featureExpressionInfo)) {
        let { buildJsFeatureLayerBaseElevationInfoFeatureExpressionInfo } = await import('./featureLayerBaseElevationInfoFeatureExpressionInfo');
        jsFeatureLayerBaseElevationInfo.featureExpressionInfo = await buildJsFeatureLayerBaseElevationInfoFeatureExpressionInfo(dotNetObject.featureExpressionInfo) as any;
    }

    if (hasValue(dotNetObject.mode)) {
        jsFeatureLayerBaseElevationInfo.mode = dotNetObject.mode;
    }
    if (hasValue(dotNetObject.offset)) {
        jsFeatureLayerBaseElevationInfo.offset = dotNetObject.offset;
    }
    if (hasValue(dotNetObject.unit)) {
        jsFeatureLayerBaseElevationInfo.unit = dotNetObject.unit;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureLayerBaseElevationInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureLayerBaseElevationInfo;
    
    return jsFeatureLayerBaseElevationInfo;
}


export async function buildDotNetFeatureLayerBaseElevationInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureLayerBaseElevationInfo: any = {};
    
    if (hasValue(jsObject.featureExpressionInfo)) {
        let { buildDotNetFeatureLayerBaseElevationInfoFeatureExpressionInfo } = await import('./featureLayerBaseElevationInfoFeatureExpressionInfo');
        dotNetFeatureLayerBaseElevationInfo.featureExpressionInfo = await buildDotNetFeatureLayerBaseElevationInfoFeatureExpressionInfo(jsObject.featureExpressionInfo);
    }
    
    if (hasValue(jsObject.mode)) {
        dotNetFeatureLayerBaseElevationInfo.mode = removeCircularReferences(jsObject.mode);
    }
    
    if (hasValue(jsObject.offset)) {
        dotNetFeatureLayerBaseElevationInfo.offset = jsObject.offset;
    }
    
    if (hasValue(jsObject.unit)) {
        dotNetFeatureLayerBaseElevationInfo.unit = removeCircularReferences(jsObject.unit);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetFeatureLayerBaseElevationInfo.id = geoBlazorId;
    }

    return dotNetFeatureLayerBaseElevationInfo;
}

