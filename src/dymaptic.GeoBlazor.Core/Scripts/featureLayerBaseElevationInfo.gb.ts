// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetFeatureLayerBaseElevationInfo } from './featureLayerBaseElevationInfo';

export async function buildJsFeatureLayerBaseElevationInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureLayerBaseElevationInfo: any = {};
    if (hasValue(dotNetObject.featureExpressionInfo)) {
        let { buildJsFeatureLayerBaseElevationInfoFeatureExpressionInfo } = await import('./featureLayerBaseElevationInfoFeatureExpressionInfo');
        jsFeatureLayerBaseElevationInfo.featureExpressionInfo = await buildJsFeatureLayerBaseElevationInfoFeatureExpressionInfo(dotNetObject.featureExpressionInfo, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.mode)) {
        jsFeatureLayerBaseElevationInfo.mode = dotNetObject.mode;
    }
    if (hasValue(dotNetObject.offset)) {
        jsFeatureLayerBaseElevationInfo.offset = dotNetObject.offset;
    }
    if (hasValue(dotNetObject.unit)) {
        jsFeatureLayerBaseElevationInfo.unit = dotNetObject.unit;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureLayerBaseElevationInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureLayerBaseElevationInfo;
    
    let { buildDotNetFeatureLayerBaseElevationInfo } = await import('./featureLayerBaseElevationInfo');
    let dnInstantiatedObject = await buildDotNetFeatureLayerBaseElevationInfo(jsFeatureLayerBaseElevationInfo, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type FeatureLayerBaseElevationInfo detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureLayerBaseElevationInfo', e);
    }
    
    return jsFeatureLayerBaseElevationInfo;
}


export async function buildDotNetFeatureLayerBaseElevationInfoGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureLayerBaseElevationInfo: any = {};
    
    if (hasValue(jsObject.featureExpressionInfo)) {
        let { buildDotNetFeatureLayerBaseElevationInfoFeatureExpressionInfo } = await import('./featureLayerBaseElevationInfoFeatureExpressionInfo');
        dotNetFeatureLayerBaseElevationInfo.featureExpressionInfo = await buildDotNetFeatureLayerBaseElevationInfoFeatureExpressionInfo(jsObject.featureExpressionInfo, layerId, viewId);
    }
    
    if (hasValue(jsObject.mode)) {
        dotNetFeatureLayerBaseElevationInfo.mode = jsObject.mode;
    }
    
    if (hasValue(jsObject.offset)) {
        dotNetFeatureLayerBaseElevationInfo.offset = jsObject.offset;
    }
    
    if (hasValue(jsObject.unit)) {
        dotNetFeatureLayerBaseElevationInfo.unit = jsObject.unit;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetFeatureLayerBaseElevationInfo.id = geoBlazorId;
    }

    return dotNetFeatureLayerBaseElevationInfo;
}

