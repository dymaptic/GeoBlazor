// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import IconSymbol3DLayer from '@arcgis/core/symbols/IconSymbol3DLayer';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class IIconSymbol3DLayerGenerated implements IPropertyWrapper {
    public layer: IconSymbol3DLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: IconSymbol3DLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    // region properties
    
    async getMaterial(): Promise<any> {
        if (!hasValue(this.layer.material)) {
            return null;
        }
        
        let { buildDotNetIconSymbol3DLayerMaterial } = await import('./iconSymbol3DLayerMaterial');
        return await buildDotNetIconSymbol3DLayerMaterial(this.layer.material);
    }
    async setMaterial(value: any): Promise<void> {
        let { buildJsIconSymbol3DLayerMaterial } = await import('./iconSymbol3DLayerMaterial');
        this.layer.material = await  buildJsIconSymbol3DLayerMaterial(value, this.layerId, this.viewId);
    }
    async getOutline(): Promise<any> {
        if (!hasValue(this.layer.outline)) {
            return null;
        }
        
        let { buildDotNetIconSymbol3DLayerOutline } = await import('./iconSymbol3DLayerOutline');
        return await buildDotNetIconSymbol3DLayerOutline(this.layer.outline);
    }
    async setOutline(value: any): Promise<void> {
        let { buildJsIconSymbol3DLayerOutline } = await import('./iconSymbol3DLayerOutline');
        this.layer.outline = await  buildJsIconSymbol3DLayerOutline(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}


export async function buildJsIIconSymbol3DLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.material)) {
        let { buildJsIconSymbol3DLayerMaterial } = await import('./iconSymbol3DLayerMaterial');
        properties.material = await buildJsIconSymbol3DLayerMaterial(dotNetObject.material, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.outline)) {
        let { buildJsIconSymbol3DLayerOutline } = await import('./iconSymbol3DLayerOutline');
        properties.outline = await buildJsIconSymbol3DLayerOutline(dotNetObject.outline, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.anchor)) {
        properties.anchor = dotNetObject.anchor;
    }
    if (hasValue(dotNetObject.anchorPosition)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedAnchorPosition } = dotNetObject.anchorPosition;
        properties.anchorPosition = sanitizedAnchorPosition;
    }
    if (hasValue(dotNetObject.resource)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedResource } = dotNetObject.resource;
        properties.resource = sanitizedResource;
    }
    if (hasValue(dotNetObject.size)) {
        properties.size = dotNetObject.size;
    }
    let jsIconSymbol3DLayer = new IconSymbol3DLayer(properties);

    let { default: IIconSymbol3DLayerWrapper } = await import('./iIconSymbol3DLayer');
    let iIconSymbol3DLayerWrapper = new IIconSymbol3DLayerWrapper(jsIconSymbol3DLayer);
    iIconSymbol3DLayerWrapper.geoBlazorId = dotNetObject.id;
    iIconSymbol3DLayerWrapper.viewId = viewId;
    iIconSymbol3DLayerWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(iIconSymbol3DLayerWrapper);
    jsObjectRefs[dotNetObject.id] = iIconSymbol3DLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsIconSymbol3DLayer;
    let { buildDotNetIIconSymbol3DLayer } = await import('./iIconSymbol3DLayer');
    let dnInstantiatedObject = await buildDotNetIIconSymbol3DLayer(jsIconSymbol3DLayer);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for IIconSymbol3DLayer', e);
    }
    
    return jsIconSymbol3DLayer;
}

export async function buildDotNetIIconSymbol3DLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIIconSymbol3DLayer: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.material)) {
            let { buildDotNetIconSymbol3DLayerMaterial } = await import('./iconSymbol3DLayerMaterial');
            dotNetIIconSymbol3DLayer.material = await buildDotNetIconSymbol3DLayerMaterial(jsObject.material);
        }
        if (hasValue(jsObject.outline)) {
            let { buildDotNetIconSymbol3DLayerOutline } = await import('./iconSymbol3DLayerOutline');
            dotNetIIconSymbol3DLayer.outline = await buildDotNetIconSymbol3DLayerOutline(jsObject.outline);
        }
    if (hasValue(jsObject.anchor)) {
        dotNetIIconSymbol3DLayer.anchor = jsObject.anchor;
    }
    if (hasValue(jsObject.anchorPosition)) {
        dotNetIIconSymbol3DLayer.anchorPosition = jsObject.anchorPosition;
    }
    if (hasValue(jsObject.resource)) {
        dotNetIIconSymbol3DLayer.resource = jsObject.resource;
    }
    if (hasValue(jsObject.size)) {
        dotNetIIconSymbol3DLayer.size = jsObject.size;
    }
    if (hasValue(jsObject.type)) {
        dotNetIIconSymbol3DLayer.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetIIconSymbol3DLayer.id = k;
                break;
            }
        }
    }

    return dotNetIIconSymbol3DLayer;
}

