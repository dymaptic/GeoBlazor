// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetTile } from './tile';

export async function buildJsTileGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTile: any = {};

    if (hasValue(dotNetObject.bounds)) {
        jsTile.bounds = dotNetObject.bounds;
    }
    if (hasValue(dotNetObject.col)) {
        jsTile.col = dotNetObject.col;
    }
    if (hasValue(dotNetObject.coords)) {
        jsTile.coords = dotNetObject.coords;
    }
    if (hasValue(dotNetObject.level)) {
        jsTile.level = dotNetObject.level;
    }
    if (hasValue(dotNetObject.resolution)) {
        jsTile.resolution = dotNetObject.resolution;
    }
    if (hasValue(dotNetObject.row)) {
        jsTile.row = dotNetObject.row;
    }
    if (hasValue(dotNetObject.scale)) {
        jsTile.scale = dotNetObject.scale;
    }
    if (hasValue(dotNetObject.tileId)) {
        jsTile.id = dotNetObject.tileId;
    }
    if (hasValue(dotNetObject.world)) {
        jsTile.world = dotNetObject.world;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsTile);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTile;
    
    let { buildDotNetTile } = await import('./tile');
    let dnInstantiatedObject = await buildDotNetTile(jsTile, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type Tile detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Tile', e);
    }
    
    return jsTile;
}


export async function buildDotNetTileGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTile: any = {};
    
    if (hasValue(jsObject.bounds)) {
        dotNetTile.bounds = jsObject.bounds;
    }
    
    if (hasValue(jsObject.col)) {
        dotNetTile.col = jsObject.col;
    }
    
    if (hasValue(jsObject.coords)) {
        dotNetTile.coords = jsObject.coords;
    }
    
    if (hasValue(jsObject.level)) {
        dotNetTile.level = jsObject.level;
    }
    
    if (hasValue(jsObject.resolution)) {
        dotNetTile.resolution = jsObject.resolution;
    }
    
    if (hasValue(jsObject.row)) {
        dotNetTile.row = jsObject.row;
    }
    
    if (hasValue(jsObject.scale)) {
        dotNetTile.scale = jsObject.scale;
    }
    
    if (hasValue(jsObject.id)) {
        dotNetTile.tileId = jsObject.id;
    }
    
    if (hasValue(jsObject.world)) {
        dotNetTile.world = jsObject.world;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetTile.id = geoBlazorId;
    }

    return dotNetTile;
}

