// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetPortalUserFetchItemsParams } from './portalUserFetchItemsParams';

export async function buildJsPortalUserFetchItemsParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPortalUserFetchItemsParams: any = {};
    if (hasValue(dotNetObject.folder)) {
        let { buildJsPortalFolder } = await import('./portalFolder');
        jsPortalUserFetchItemsParams.folder = await buildJsPortalFolder(dotNetObject.folder, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.includeSubfolderItems)) {
        jsPortalUserFetchItemsParams.includeSubfolderItems = dotNetObject.includeSubfolderItems;
    }
    if (hasValue(dotNetObject.inRecycleBin)) {
        jsPortalUserFetchItemsParams.inRecycleBin = dotNetObject.inRecycleBin;
    }
    if (hasValue(dotNetObject.num)) {
        jsPortalUserFetchItemsParams.num = dotNetObject.num;
    }
    if (hasValue(dotNetObject.sortField)) {
        jsPortalUserFetchItemsParams.sortField = dotNetObject.sortField;
    }
    if (hasValue(dotNetObject.sortOrder)) {
        jsPortalUserFetchItemsParams.sortOrder = dotNetObject.sortOrder;
    }
    if (hasValue(dotNetObject.start)) {
        jsPortalUserFetchItemsParams.start = dotNetObject.start;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsPortalUserFetchItemsParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPortalUserFetchItemsParams;
    
    let dnInstantiatedObject = await buildDotNetPortalUserFetchItemsParams(jsPortalUserFetchItemsParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PortalUserFetchItemsParams', e);
    }
    
    return jsPortalUserFetchItemsParams;
}

export async function buildDotNetPortalUserFetchItemsParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPortalUserFetchItemsParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.folder)) {
            let { buildDotNetPortalFolder } = await import('./portalFolder');
            dotNetPortalUserFetchItemsParams.folder = await buildDotNetPortalFolder(jsObject.folder);
        }
    if (hasValue(jsObject.includeSubfolderItems)) {
        dotNetPortalUserFetchItemsParams.includeSubfolderItems = jsObject.includeSubfolderItems;
    }
    if (hasValue(jsObject.inRecycleBin)) {
        dotNetPortalUserFetchItemsParams.inRecycleBin = jsObject.inRecycleBin;
    }
    if (hasValue(jsObject.num)) {
        dotNetPortalUserFetchItemsParams.num = jsObject.num;
    }
    if (hasValue(jsObject.sortField)) {
        dotNetPortalUserFetchItemsParams.sortField = jsObject.sortField;
    }
    if (hasValue(jsObject.sortOrder)) {
        dotNetPortalUserFetchItemsParams.sortOrder = jsObject.sortOrder;
    }
    if (hasValue(jsObject.start)) {
        dotNetPortalUserFetchItemsParams.start = jsObject.start;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPortalUserFetchItemsParams.id = k;
                break;
            }
        }
    }

    return dotNetPortalUserFetchItemsParams;
}

