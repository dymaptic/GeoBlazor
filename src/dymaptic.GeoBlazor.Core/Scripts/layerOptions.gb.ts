// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import LayerOptions from '@arcgis/core/popup/LayerOptions';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class LayerOptionsGenerated implements IPropertyWrapper {
    public component: LayerOptions;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: LayerOptions) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsLayerOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsLayerOptions = new LayerOptions();

    if (hasValue(dotNetObject.returnTopmostRaster)) {
        jsLayerOptions.returnTopmostRaster = dotNetObject.returnTopmostRaster;
    }
    if (hasValue(dotNetObject.showNoDataRecords)) {
        jsLayerOptions.showNoDataRecords = dotNetObject.showNoDataRecords;
    }
    let { default: LayerOptionsWrapper } = await import('./layerOptions');
    let layerOptionsWrapper = new LayerOptionsWrapper(jsLayerOptions);
    layerOptionsWrapper.geoBlazorId = dotNetObject.id;
    layerOptionsWrapper.viewId = viewId;
    layerOptionsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(layerOptionsWrapper);
    jsObjectRefs[dotNetObject.id] = layerOptionsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsLayerOptions;
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LayerOptions', e);
    }
    
    return jsLayerOptions;
}

export async function buildDotNetLayerOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLayerOptions: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.returnTopmostRaster)) {
            dotNetLayerOptions.returnTopmostRaster = jsObject.returnTopmostRaster;
        }
        if (hasValue(jsObject.showNoDataRecords)) {
            dotNetLayerOptions.showNoDataRecords = jsObject.showNoDataRecords;
        }

    return dotNetLayerOptions;
}

