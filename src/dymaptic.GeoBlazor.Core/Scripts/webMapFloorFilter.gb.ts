// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';

export async function buildJsWebMapFloorFilterGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsWebMapFloorFilter: any = {};

    if (hasValue(dotNetObject.enabled)) {
        jsWebMapFloorFilter.enabled = dotNetObject.enabled;
    }
    if (hasValue(dotNetObject.facility)) {
        jsWebMapFloorFilter.facility = dotNetObject.facility;
    }
    if (hasValue(dotNetObject.level)) {
        jsWebMapFloorFilter.level = dotNetObject.level;
    }
    if (hasValue(dotNetObject.longNames)) {
        jsWebMapFloorFilter.longNames = dotNetObject.longNames;
    }
    if (hasValue(dotNetObject.minimized)) {
        jsWebMapFloorFilter.minimized = dotNetObject.minimized;
    }
    if (hasValue(dotNetObject.pinnedLevels)) {
        jsWebMapFloorFilter.pinnedLevels = dotNetObject.pinnedLevels;
    }
    if (hasValue(dotNetObject.site)) {
        jsWebMapFloorFilter.site = dotNetObject.site;
    }
    
    jsObjectRefs[dotNetObject.id] = jsWebMapFloorFilter;
    arcGisObjectRefs[dotNetObject.id] = jsWebMapFloorFilter;
    
    return jsWebMapFloorFilter;
}


export async function buildDotNetWebMapFloorFilterGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWebMapFloorFilter: any = {};
    
    if (hasValue(jsObject.enabled)) {
        dotNetWebMapFloorFilter.enabled = jsObject.enabled;
    }
    
    if (hasValue(jsObject.facility)) {
        dotNetWebMapFloorFilter.facility = jsObject.facility;
    }
    
    if (hasValue(jsObject.level)) {
        dotNetWebMapFloorFilter.level = jsObject.level;
    }
    
    if (hasValue(jsObject.longNames)) {
        dotNetWebMapFloorFilter.longNames = jsObject.longNames;
    }
    
    if (hasValue(jsObject.minimized)) {
        dotNetWebMapFloorFilter.minimized = jsObject.minimized;
    }
    
    if (hasValue(jsObject.pinnedLevels)) {
        dotNetWebMapFloorFilter.pinnedLevels = jsObject.pinnedLevels;
    }
    
    if (hasValue(jsObject.site)) {
        dotNetWebMapFloorFilter.site = jsObject.site;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetWebMapFloorFilter.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetWebMapFloorFilter.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetWebMapFloorFilter.id)) {
        jsObjectRefs[dotNetWebMapFloorFilter.id] ??= jsObject;
        arcGisObjectRefs[dotNetWebMapFloorFilter.id] ??= jsObject;
    }

    return dotNetWebMapFloorFilter;
}

