// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetILayersMixin } from './iLayersMixin';

export async function buildJsILayersMixinGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsLayersMixin: any = {};
    if (hasValue(dotNetObject.layers)) {
        let { buildJsLayer } = await import('./layer');
        jsLayersMixin.layers = await Promise.all(dotNetObject.layers.map(async i => await buildJsLayer(i, layerId, viewId))) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsLayersMixin);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLayersMixin;
    
    let dnInstantiatedObject = await buildDotNetILayersMixin(jsLayersMixin);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ILayersMixin', e);
    }
    
    return jsLayersMixin;
}

export async function buildDotNetILayersMixinGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetILayersMixin: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetILayersMixin.id = k;
                break;
            }
        }
    }

    return dotNetILayersMixin;
}

