// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetILayersMixin } from './iLayersMixin';

export async function buildJsILayersMixinGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsLayersMixin: any = {};
    if (hasValue(dotNetObject.layers) && dotNetObject.layers.length > 0) {
        let { buildJsLayer } = await import('./layer');
        jsLayersMixin.layers = await Promise.all(dotNetObject.layers.map(async i => await buildJsLayer(i, layerId, viewId))) as any;
    }

    
    jsObjectRefs[dotNetObject.id] = jsLayersMixin;
    arcGisObjectRefs[dotNetObject.id] = jsLayersMixin;
    
    return jsLayersMixin;
}


export async function buildDotNetILayersMixinGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetILayersMixin: any = {};
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetILayersMixin.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetILayersMixin.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetILayersMixin.id)) {
        jsObjectRefs[dotNetILayersMixin.id] ??= jsObject;
        arcGisObjectRefs[dotNetILayersMixin.id] ??= jsObject;
    }

    return dotNetILayersMixin;
}

