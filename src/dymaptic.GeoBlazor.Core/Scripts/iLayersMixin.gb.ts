// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import LayersMixin = __esri.LayersMixin;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ILayersMixinGenerated implements IPropertyWrapper {
    public component: LayersMixin;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: LayersMixin) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async add(layer: any,
        index: any): Promise<void> {
        let { buildJsLayer } = await import('./layer');
        let jsLayer = await buildJsLayer(layer, this.layerId, this.viewId) as any;
        this.component.add(jsLayer,
            index);
    }

    async addMany(layers: any,
        index: any): Promise<void> {
        let { buildJsLayer } = await import('./layer');
        let jsLayers = await buildJsLayer(layers, this.layerId, this.viewId) as any;
        this.component.addMany(jsLayers,
            index);
    }

    async findLayerById(layerId: any): Promise<any> {
        return this.component.findLayerById(layerId);
    }

    async remove(layer: any): Promise<any> {
        let { buildJsLayer } = await import('./layer');
        let jsLayer = await buildJsLayer(layer, this.layerId, this.viewId) as any;
        return this.component.remove(jsLayer);
    }

    async removeAll(): Promise<any> {
        return this.component.removeAll();
    }

    async removeMany(layers: any): Promise<any> {
        let { buildJsLayer } = await import('./layer');
        let jsLayers = await buildJsLayer(layers, this.layerId, this.viewId) as any;
        return this.component.removeMany(jsLayers);
    }

    async reorder(layer: any,
        index: any): Promise<any> {
        let { buildJsLayer } = await import('./layer');
        let jsLayer = await buildJsLayer(layer, this.layerId, this.viewId) as any;
        return this.component.reorder(jsLayer,
            index);
    }

    // region properties
    
    async getLayers(): Promise<any> {
        if (!hasValue(this.component.layers)) {
            return null;
        }
        
        let { buildDotNetLayer } = await import('./layer');
        return await Promise.all(this.component.layers.map(async i => await buildDotNetLayer(i)));
    }
    
    async setLayers(value: any): Promise<void> {
        let { buildJsLayer } = await import('./layer');
        this.component.layers = await Promise.all(value.map(async i => await buildJsLayer(i, this.layerId, this.viewId))) as any;
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsILayersMixinGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsLayersMixin = new LayersMixin();
    if (hasValue(dotNetObject.layers)) {
        let { buildJsLayer } = await import('./layer');
        jsLayersMixin.layers = await Promise.all(dotNetObject.layers.map(async i => await buildJsLayer(i, layerId, viewId))) as any;
    }


    let { default: ILayersMixinWrapper } = await import('./iLayersMixin');
    let iLayersMixinWrapper = new ILayersMixinWrapper(jsLayersMixin);
    iLayersMixinWrapper.geoBlazorId = dotNetObject.id;
    iLayersMixinWrapper.viewId = viewId;
    iLayersMixinWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(iLayersMixinWrapper);
    jsObjectRefs[dotNetObject.id] = iLayersMixinWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsLayersMixin;
    let { buildDotNetILayersMixin } = await import('./iLayersMixin');
    let dnInstantiatedObject = await buildDotNetILayersMixin(jsLayersMixin);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ILayersMixin', e);
    }
    
    return jsLayersMixin;
}
export async function buildDotNetILayersMixinGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetILayersMixin: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetILayersMixin.id = k;
                break;
            }
        }
    }

    return dotNetILayersMixin;
}

