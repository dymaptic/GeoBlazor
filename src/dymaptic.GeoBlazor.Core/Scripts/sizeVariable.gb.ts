// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import SizeVariable from '@arcgis/core/renderers/visualVariables/SizeVariable';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SizeVariableGenerated implements IPropertyWrapper {
    public component: SizeVariable;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: SizeVariable) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.legendOptions)) {
            let { buildJsVisualVariableLegendOptions } = await import('./visualVariableLegendOptions');
            this.component.legendOptions = await buildJsVisualVariableLegendOptions(dotNetObject.legendOptions, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.stops) && dotNetObject.stops.length > 0) {
            let { buildJsSizeStop } = await import('./sizeStop');
            this.component.stops = await Promise.all(dotNetObject.stops.map(async i => await buildJsSizeStop(i, this.layerId, this.viewId))) as any;
        }

        if (hasValue(dotNetObject.axis)) {
            this.component.axis = dotNetObject.axis;
        }
        if (hasValue(dotNetObject.field)) {
            this.component.field = dotNetObject.field;
        }
        if (hasValue(dotNetObject.maxDataValue)) {
            this.component.maxDataValue = dotNetObject.maxDataValue;
        }
        if (hasValue(dotNetObject.maxSize)) {
            this.component.maxSize = dotNetObject.maxSize;
        }
        if (hasValue(dotNetObject.minDataValue)) {
            this.component.minDataValue = dotNetObject.minDataValue;
        }
        if (hasValue(dotNetObject.minSize)) {
            this.component.minSize = dotNetObject.minSize;
        }
        if (hasValue(dotNetObject.normalizationField)) {
            this.component.normalizationField = dotNetObject.normalizationField;
        }
        if (hasValue(dotNetObject.target)) {
            this.component.target = dotNetObject.target;
        }
        if (hasValue(dotNetObject.useSymbolValue)) {
            this.component.useSymbolValue = dotNetObject.useSymbolValue;
        }
        if (hasValue(dotNetObject.valueExpression)) {
            this.component.valueExpression = dotNetObject.valueExpression;
        }
        if (hasValue(dotNetObject.valueExpressionTitle)) {
            this.component.valueExpressionTitle = dotNetObject.valueExpressionTitle;
        }
        if (hasValue(dotNetObject.valueRepresentation)) {
            this.component.valueRepresentation = dotNetObject.valueRepresentation;
        }
        if (hasValue(dotNetObject.valueUnit)) {
            this.component.valueUnit = dotNetObject.valueUnit;
        }
    }
    
    async flipSizes(): Promise<void> {
        this.component.flipSizes();
    }

    // region properties
    
    async getLegendOptions(): Promise<any> {
        if (!hasValue(this.component.legendOptions)) {
            return null;
        }
        
        let { buildDotNetVisualVariableLegendOptions } = await import('./visualVariableLegendOptions');
        return await buildDotNetVisualVariableLegendOptions(this.component.legendOptions, this.layerId, this.viewId);
    }
    
    async setLegendOptions(value: any): Promise<void> {
        let { buildJsVisualVariableLegendOptions } = await import('./visualVariableLegendOptions');
        this.component.legendOptions = await  buildJsVisualVariableLegendOptions(value, this.layerId, this.viewId);
    }
    
    async getStops(): Promise<any> {
        if (!hasValue(this.component.stops)) {
            return null;
        }
        
        let { buildDotNetSizeStop } = await import('./sizeStop');
        return await Promise.all(this.component.stops.map(async i => await buildDotNetSizeStop(i, this.layerId, this.viewId)));
    }
    
    async setStops(value: any): Promise<void> {
        let { buildJsSizeStop } = await import('./sizeStop');
        this.component.stops = await Promise.all(value.map(async i => await buildJsSizeStop(i, this.layerId, this.viewId))) as any;
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsSizeVariableGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.legendOptions)) {
        let { buildJsVisualVariableLegendOptions } = await import('./visualVariableLegendOptions');
        properties.legendOptions = await buildJsVisualVariableLegendOptions(dotNetObject.legendOptions, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.stops) && dotNetObject.stops.length > 0) {
        let { buildJsSizeStop } = await import('./sizeStop');
        properties.stops = await Promise.all(dotNetObject.stops.map(async i => await buildJsSizeStop(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.axis)) {
        properties.axis = dotNetObject.axis;
    }
    if (hasValue(dotNetObject.field)) {
        properties.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.maxDataValue)) {
        properties.maxDataValue = dotNetObject.maxDataValue;
    }
    if (hasValue(dotNetObject.maxSize)) {
        properties.maxSize = dotNetObject.maxSize;
    }
    if (hasValue(dotNetObject.minDataValue)) {
        properties.minDataValue = dotNetObject.minDataValue;
    }
    if (hasValue(dotNetObject.minSize)) {
        properties.minSize = dotNetObject.minSize;
    }
    if (hasValue(dotNetObject.normalizationField)) {
        properties.normalizationField = dotNetObject.normalizationField;
    }
    if (hasValue(dotNetObject.target)) {
        properties.target = dotNetObject.target;
    }
    if (hasValue(dotNetObject.useSymbolValue)) {
        properties.useSymbolValue = dotNetObject.useSymbolValue;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        properties.valueExpression = dotNetObject.valueExpression;
    }
    if (hasValue(dotNetObject.valueExpressionTitle)) {
        properties.valueExpressionTitle = dotNetObject.valueExpressionTitle;
    }
    if (hasValue(dotNetObject.valueRepresentation)) {
        properties.valueRepresentation = dotNetObject.valueRepresentation;
    }
    if (hasValue(dotNetObject.valueUnit)) {
        properties.valueUnit = dotNetObject.valueUnit;
    }
    let jsSizeVariable = new SizeVariable(properties);

    let { default: SizeVariableWrapper } = await import('./sizeVariable');
    let sizeVariableWrapper = new SizeVariableWrapper(jsSizeVariable);
    sizeVariableWrapper.geoBlazorId = dotNetObject.id;
    sizeVariableWrapper.viewId = viewId;
    sizeVariableWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(sizeVariableWrapper);
    jsObjectRefs[dotNetObject.id] = sizeVariableWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsSizeVariable;
    
    let { buildDotNetSizeVariable } = await import('./sizeVariable');
    let dnInstantiatedObject = await buildDotNetSizeVariable(jsSizeVariable, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type SizeVariable detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SizeVariable', e);
    }
    
    return jsSizeVariable;
}


export async function buildDotNetSizeVariableGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSizeVariable: any = {};
    
    if (hasValue(jsObject.legendOptions)) {
        let { buildDotNetVisualVariableLegendOptions } = await import('./visualVariableLegendOptions');
        dotNetSizeVariable.legendOptions = await buildDotNetVisualVariableLegendOptions(jsObject.legendOptions, layerId, viewId);
    }
    
    if (hasValue(jsObject.stops)) {
        let { buildDotNetSizeStop } = await import('./sizeStop');
        dotNetSizeVariable.stops = await Promise.all(jsObject.stops.map(async i => await buildDotNetSizeStop(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.axis)) {
        dotNetSizeVariable.axis = jsObject.axis;
    }
    
    if (hasValue(jsObject.field)) {
        dotNetSizeVariable.field = jsObject.field;
    }
    
    if (hasValue(jsObject.maxDataValue)) {
        dotNetSizeVariable.maxDataValue = jsObject.maxDataValue;
    }
    
    if (hasValue(jsObject.maxSize)) {
        dotNetSizeVariable.maxSize = jsObject.maxSize;
    }
    
    if (hasValue(jsObject.minDataValue)) {
        dotNetSizeVariable.minDataValue = jsObject.minDataValue;
    }
    
    if (hasValue(jsObject.minSize)) {
        dotNetSizeVariable.minSize = jsObject.minSize;
    }
    
    if (hasValue(jsObject.normalizationField)) {
        dotNetSizeVariable.normalizationField = jsObject.normalizationField;
    }
    
    if (hasValue(jsObject.target)) {
        dotNetSizeVariable.target = jsObject.target;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetSizeVariable.type = jsObject.type;
    }
    
    if (hasValue(jsObject.useSymbolValue)) {
        dotNetSizeVariable.useSymbolValue = jsObject.useSymbolValue;
    }
    
    if (hasValue(jsObject.valueExpression)) {
        dotNetSizeVariable.valueExpression = jsObject.valueExpression;
    }
    
    if (hasValue(jsObject.valueExpressionTitle)) {
        dotNetSizeVariable.valueExpressionTitle = jsObject.valueExpressionTitle;
    }
    
    if (hasValue(jsObject.valueRepresentation)) {
        dotNetSizeVariable.valueRepresentation = jsObject.valueRepresentation;
    }
    
    if (hasValue(jsObject.valueUnit)) {
        dotNetSizeVariable.valueUnit = jsObject.valueUnit;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSizeVariable.id = geoBlazorId;
    }

    return dotNetSizeVariable;
}

