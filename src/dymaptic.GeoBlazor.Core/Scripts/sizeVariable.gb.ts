// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import SizeVariable from '@arcgis/core/renderers/visualVariables/SizeVariable';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SizeVariableGenerated implements IPropertyWrapper {
    public component: SizeVariable;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: SizeVariable) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async flipSizes(): Promise<void> {
        this.component.flipSizes();
    }

    // region properties
    
    async getType(): Promise<any> {
        if (!hasValue(this.component.type)) {
            return null;
        }
        
        let { buildDotNetSize } = await import('./size');
        return await buildDotNetSize(this.component.type);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsSizeVariableGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSizeVariable = new SizeVariable();

    if (hasValue(dotNetObject.axis)) {
        jsSizeVariable.axis = dotNetObject.axis;
    }
    if (hasValue(dotNetObject.field)) {
        jsSizeVariable.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.legendOptions)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedLegendOptions } = dotNetObject.legendOptions;
        jsSizeVariable.legendOptions = sanitizedLegendOptions;
    }
    if (hasValue(dotNetObject.maxDataValue)) {
        jsSizeVariable.maxDataValue = dotNetObject.maxDataValue;
    }
    if (hasValue(dotNetObject.maxSize)) {
        jsSizeVariable.maxSize = dotNetObject.maxSize;
    }
    if (hasValue(dotNetObject.minDataValue)) {
        jsSizeVariable.minDataValue = dotNetObject.minDataValue;
    }
    if (hasValue(dotNetObject.minSize)) {
        jsSizeVariable.minSize = dotNetObject.minSize;
    }
    if (hasValue(dotNetObject.normalizationField)) {
        jsSizeVariable.normalizationField = dotNetObject.normalizationField;
    }
    if (hasValue(dotNetObject.stops)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedStops } = dotNetObject.stops;
        jsSizeVariable.stops = sanitizedStops;
    }
    if (hasValue(dotNetObject.target)) {
        jsSizeVariable.target = dotNetObject.target;
    }
    if (hasValue(dotNetObject.useSymbolValue)) {
        jsSizeVariable.useSymbolValue = dotNetObject.useSymbolValue;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        jsSizeVariable.valueExpression = dotNetObject.valueExpression;
    }
    if (hasValue(dotNetObject.valueExpressionTitle)) {
        jsSizeVariable.valueExpressionTitle = dotNetObject.valueExpressionTitle;
    }
    if (hasValue(dotNetObject.valueRepresentation)) {
        jsSizeVariable.valueRepresentation = dotNetObject.valueRepresentation;
    }
    if (hasValue(dotNetObject.valueUnit)) {
        jsSizeVariable.valueUnit = dotNetObject.valueUnit;
    }

    let { default: SizeVariableWrapper } = await import('./sizeVariable');
    let sizeVariableWrapper = new SizeVariableWrapper(jsSizeVariable);
    sizeVariableWrapper.geoBlazorId = dotNetObject.id;
    sizeVariableWrapper.viewId = viewId;
    sizeVariableWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(sizeVariableWrapper);
    jsObjectRefs[dotNetObject.id] = sizeVariableWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsSizeVariable;
    let { buildDotNetSizeVariable } = await import('./sizeVariable');
    let dnInstantiatedObject = await buildDotNetSizeVariable(jsSizeVariable);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SizeVariable', e);
    }
    
    return jsSizeVariable;
}

export async function buildDotNetSizeVariableGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSizeVariable: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.axis)) {
            dotNetSizeVariable.axis = jsObject.axis;
        }
        if (hasValue(jsObject.field)) {
            dotNetSizeVariable.field = jsObject.field;
        }
        if (hasValue(jsObject.legendOptions)) {
            dotNetSizeVariable.legendOptions = jsObject.legendOptions;
        }
        if (hasValue(jsObject.maxDataValue)) {
            dotNetSizeVariable.maxDataValue = jsObject.maxDataValue;
        }
        if (hasValue(jsObject.maxSize)) {
            dotNetSizeVariable.maxSize = jsObject.maxSize;
        }
        if (hasValue(jsObject.minDataValue)) {
            dotNetSizeVariable.minDataValue = jsObject.minDataValue;
        }
        if (hasValue(jsObject.minSize)) {
            dotNetSizeVariable.minSize = jsObject.minSize;
        }
        if (hasValue(jsObject.normalizationField)) {
            dotNetSizeVariable.normalizationField = jsObject.normalizationField;
        }
        if (hasValue(jsObject.stops)) {
            dotNetSizeVariable.stops = jsObject.stops;
        }
        if (hasValue(jsObject.target)) {
            dotNetSizeVariable.target = jsObject.target;
        }
        if (hasValue(jsObject.type)) {
            dotNetSizeVariable.type = jsObject.type;
        }
        if (hasValue(jsObject.useSymbolValue)) {
            dotNetSizeVariable.useSymbolValue = jsObject.useSymbolValue;
        }
        if (hasValue(jsObject.valueExpression)) {
            dotNetSizeVariable.valueExpression = jsObject.valueExpression;
        }
        if (hasValue(jsObject.valueExpressionTitle)) {
            dotNetSizeVariable.valueExpressionTitle = jsObject.valueExpressionTitle;
        }
        if (hasValue(jsObject.valueRepresentation)) {
            dotNetSizeVariable.valueRepresentation = jsObject.valueRepresentation;
        }
        if (hasValue(jsObject.valueUnit)) {
            dotNetSizeVariable.valueUnit = jsObject.valueUnit;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSizeVariable.id = k;
                break;
            }
        }
    }

    return dotNetSizeVariable;
}

