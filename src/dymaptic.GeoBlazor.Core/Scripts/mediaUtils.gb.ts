// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import mediaUtils = __esri.mediaUtils;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class MediaUtilsGenerated implements IPropertyWrapper {
    public component: mediaUtils;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: mediaUtils) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async createDefaultControlPointsGeoreference(mediaElement: any,
        extent: any): Promise<any> {
        let { buildJsExtent } = await import('./extent');
        let jsExtent = buildJsExtent(extent) as any;
        let result = await this.component.createDefaultControlPointsGeoreference(mediaElement,
            jsExtent);
        let { buildDotNetControlPointsGeoreference } = await import('./controlPointsGeoreference');
        return await buildDotNetControlPointsGeoreference(result);
    }

    async createLocalModeControlPointsGeoreference(mediaElement: any): Promise<any> {
        let result = this.component.createLocalModeControlPointsGeoreference(mediaElement);
        let { buildDotNetControlPointsGeoreference } = await import('./controlPointsGeoreference');
        return await buildDotNetControlPointsGeoreference(result);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsMediaUtilsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsmediaUtils: any = {}


    let { default: MediaUtilsWrapper } = await import('./mediaUtils');
    let mediaUtilsWrapper = new MediaUtilsWrapper(jsmediaUtils);
    mediaUtilsWrapper.geoBlazorId = dotNetObject.id;
    mediaUtilsWrapper.viewId = viewId;
    mediaUtilsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(mediaUtilsWrapper);
    jsObjectRefs[dotNetObject.id] = mediaUtilsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsmediaUtils;
    let { buildDotNetMediaUtils } = await import('./mediaUtils');
    let dnInstantiatedObject = await buildDotNetMediaUtils(jsmediaUtils);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for MediaUtils', e);
    }
    
    return jsmediaUtils;
}
export async function buildDotNetMediaUtilsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMediaUtils: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetMediaUtils.id = k;
                break;
            }
        }
    }

    return dotNetMediaUtils;
}

