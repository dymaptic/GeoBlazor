// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Legend from '@arcgis/core/widgets/Legend';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class LegendWidgetGenerated implements IPropertyWrapper {
    public widget: Legend;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: Legend) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.activeLayerInfos)) {
            let { buildJsActiveLayerInfo } = await import('./activeLayerInfo');
            this.widget.activeLayerInfos = await Promise.all(dotNetObject.activeLayerInfos.map(async i => await buildJsActiveLayerInfo(i, this.layerId, this.viewId))) as any;
        }
        if (hasValue(dotNetObject.layerInfos)) {
            let { buildJsLegendLayerInfos } = await import('./legendLayerInfos');
            this.widget.layerInfos = await Promise.all(dotNetObject.layerInfos.map(async i => await buildJsLegendLayerInfos(i, this.layerId, this.viewId))) as any;
        }
        if (hasValue(dotNetObject.viewModel)) {
            let { buildJsLegendViewModel } = await import('./legendViewModel');
            this.widget.viewModel = await buildJsLegendViewModel(dotNetObject.viewModel, this.layerId, this.viewId) as any;
        }

        if (hasValue(dotNetObject.basemapLegendVisible)) {
            this.widget.basemapLegendVisible = dotNetObject.basemapLegendVisible;
        }
        if (hasValue(dotNetObject.container)) {
            this.widget.container = dotNetObject.container;
        }
        if (hasValue(dotNetObject.headingLevel)) {
            this.widget.headingLevel = dotNetObject.headingLevel;
        }
        if (hasValue(dotNetObject.hideLayersNotInCurrentView)) {
            this.widget.hideLayersNotInCurrentView = dotNetObject.hideLayersNotInCurrentView;
        }
        if (hasValue(dotNetObject.icon)) {
            this.widget.icon = dotNetObject.icon;
        }
        if (hasValue(dotNetObject.label)) {
            this.widget.label = dotNetObject.label;
        }
        if (hasValue(dotNetObject.respectLayerDefinitionExpression)) {
            this.widget.respectLayerDefinitionExpression = dotNetObject.respectLayerDefinitionExpression;
        }
        if (hasValue(dotNetObject.respectLayerVisibility)) {
            this.widget.respectLayerVisibility = dotNetObject.respectLayerVisibility;
        }
        if (hasValue(dotNetObject.style)) {
            this.widget.style = dotNetObject.style;
        }
        if (hasValue(dotNetObject.widgetId)) {
            this.widget.id = dotNetObject.widgetId;
        }
    }
    
    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async own(handleOrHandles: any): Promise<void> {
        let { buildJsWatchHandle } = await import('./watchHandle');
        let jsHandleOrHandles = await buildJsWatchHandle(handleOrHandles, this.layerId, this.viewId) as any;
        this.widget.own(jsHandleOrHandles);
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async render(): Promise<any> {
        return this.widget.render();
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async when(callback: any,
        errback: any): Promise<any> {
        return await this.widget.when(callback,
            errback);
    }

    // region properties
    
    async getActiveLayerInfos(): Promise<any> {
        if (!hasValue(this.widget.activeLayerInfos)) {
            return null;
        }
        
        let { buildDotNetActiveLayerInfo } = await import('./activeLayerInfo');
        return await Promise.all(this.widget.activeLayerInfos.map(async i => await buildDotNetActiveLayerInfo(i)));
    }
    
    async setActiveLayerInfos(value: any): Promise<void> {
        let { buildJsActiveLayerInfo } = await import('./activeLayerInfo');
        this.widget.activeLayerInfos = await Promise.all(value.map(async i => await buildJsActiveLayerInfo(i, this.layerId, this.viewId))) as any;
    }
    
    async getLayerInfos(): Promise<any> {
        if (!hasValue(this.widget.layerInfos)) {
            return null;
        }
        
        let { buildDotNetLegendLayerInfos } = await import('./legendLayerInfos');
        return await Promise.all(this.widget.layerInfos.map(async i => await buildDotNetLegendLayerInfos(i)));
    }
    
    async setLayerInfos(value: any): Promise<void> {
        let { buildJsLegendLayerInfos } = await import('./legendLayerInfos');
        this.widget.layerInfos = await Promise.all(value.map(async i => await buildJsLegendLayerInfos(i, this.layerId, this.viewId))) as any;
    }
    
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetLegendViewModel } = await import('./legendViewModel');
        return await buildDotNetLegendViewModel(this.widget.viewModel);
    }
    
    async setViewModel(value: any): Promise<void> {
        let { buildJsLegendViewModel } = await import('./legendViewModel');
        this.widget.viewModel = await  buildJsLegendViewModel(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsLegendWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.activeLayerInfos)) {
        let { buildJsActiveLayerInfo } = await import('./activeLayerInfo');
        properties.activeLayerInfos = await Promise.all(dotNetObject.activeLayerInfos.map(async i => await buildJsActiveLayerInfo(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.layerInfos)) {
        let { buildJsLegendLayerInfos } = await import('./legendLayerInfos');
        properties.layerInfos = await Promise.all(dotNetObject.layerInfos.map(async i => await buildJsLegendLayerInfos(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsLegendViewModel } = await import('./legendViewModel');
        properties.viewModel = await buildJsLegendViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.basemapLegendVisible)) {
        properties.basemapLegendVisible = dotNetObject.basemapLegendVisible;
    }
    if (hasValue(dotNetObject.container)) {
        properties.container = dotNetObject.container;
    }
    if (hasValue(dotNetObject.headingLevel)) {
        properties.headingLevel = dotNetObject.headingLevel;
    }
    if (hasValue(dotNetObject.hideLayersNotInCurrentView)) {
        properties.hideLayersNotInCurrentView = dotNetObject.hideLayersNotInCurrentView;
    }
    if (hasValue(dotNetObject.icon)) {
        properties.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.respectLayerDefinitionExpression)) {
        properties.respectLayerDefinitionExpression = dotNetObject.respectLayerDefinitionExpression;
    }
    if (hasValue(dotNetObject.respectLayerVisibility)) {
        properties.respectLayerVisibility = dotNetObject.respectLayerVisibility;
    }
    if (hasValue(dotNetObject.style)) {
        properties.style = dotNetObject.style;
    }
    if (hasValue(dotNetObject.widgetId)) {
        properties.id = dotNetObject.widgetId;
    }
    let jsLegend = new Legend(properties);

    let { default: LegendWidgetWrapper } = await import('./legendWidget');
    let legendWidgetWrapper = new LegendWidgetWrapper(jsLegend);
    legendWidgetWrapper.geoBlazorId = dotNetObject.id;
    legendWidgetWrapper.viewId = viewId;
    legendWidgetWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(legendWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = legendWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsLegend;
    
    let { buildDotNetLegendWidget } = await import('./legendWidget');
    let dnInstantiatedObject = await buildDotNetLegendWidget(jsLegend);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type LegendWidget detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LegendWidget', e);
    }
    
    return jsLegend;
}


export async function buildDotNetLegendWidgetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLegendWidget: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.activeLayerInfos)) {
        let { buildDotNetActiveLayerInfo } = await import('./activeLayerInfo');
        dotNetLegendWidget.activeLayerInfos = await Promise.all(jsObject.activeLayerInfos.map(async i => await buildDotNetActiveLayerInfo(i)));
    }
    if (hasValue(jsObject.layerInfos)) {
        let { buildDotNetLegendLayerInfos } = await import('./legendLayerInfos');
        dotNetLegendWidget.layerInfos = await Promise.all(jsObject.layerInfos.map(async i => await buildDotNetLegendLayerInfos(i)));
    }
    if (hasValue(jsObject.viewModel)) {
        let { buildDotNetLegendViewModel } = await import('./legendViewModel');
        dotNetLegendWidget.viewModel = await buildDotNetLegendViewModel(jsObject.viewModel);
    }
    if (hasValue(jsObject.basemapLegendVisible)) {
        dotNetLegendWidget.basemapLegendVisible = jsObject.basemapLegendVisible;
    }
    if (hasValue(jsObject.container)) {
        dotNetLegendWidget.container = jsObject.container;
    }
    if (hasValue(jsObject.headingLevel)) {
        dotNetLegendWidget.headingLevel = jsObject.headingLevel;
    }
    if (hasValue(jsObject.hideLayersNotInCurrentView)) {
        dotNetLegendWidget.hideLayersNotInCurrentView = jsObject.hideLayersNotInCurrentView;
    }
    if (hasValue(jsObject.icon)) {
        dotNetLegendWidget.icon = jsObject.icon;
    }
    if (hasValue(jsObject.label)) {
        dotNetLegendWidget.label = jsObject.label;
    }
    if (hasValue(jsObject.respectLayerDefinitionExpression)) {
        dotNetLegendWidget.respectLayerDefinitionExpression = jsObject.respectLayerDefinitionExpression;
    }
    if (hasValue(jsObject.respectLayerVisibility)) {
        dotNetLegendWidget.respectLayerVisibility = jsObject.respectLayerVisibility;
    }
    if (hasValue(jsObject.style)) {
        dotNetLegendWidget.style = jsObject.style;
    }
    if (hasValue(jsObject.type)) {
        dotNetLegendWidget.type = jsObject.type;
    }
    if (hasValue(jsObject.id)) {
        dotNetLegendWidget.widgetId = jsObject.id;
    }

    dotNetLegendWidget.id = lookupGeoBlazorId(jsObject);

    return dotNetLegendWidget;
}

