// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import BingMapsLayer from '@arcgis/core/layers/BingMapsLayer';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class BingMapsLayerGenerated implements IPropertyWrapper {
    public layer: BingMapsLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: BingMapsLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    async addResolvingPromise(promiseToLoad: any): Promise<any> {
        return await this.layer.addResolvingPromise(promiseToLoad);
    }

    async createLayerView(view: any,
        options: any): Promise<any> {
        return await this.layer.createLayerView(view,
            options);
    }

    async fetchAttributionData(): Promise<any> {
        return await this.layer.fetchAttributionData();
    }

    async fetchTile(level: any,
        row: any,
        col: any,
        options: any): Promise<any> {
        return await this.layer.fetchTile(level,
            row,
            col,
            options);
    }

    async getTileBounds(level: any,
        row: any,
        column: any,
        out: any): Promise<any> {
        return this.layer.getTileBounds(level,
            row,
            column,
            out);
    }

    async getTileUrl(level: any,
        row: any,
        col: any): Promise<any> {
        return this.layer.getTileUrl(level,
            row,
            col);
    }

    async refresh(): Promise<void> {
        this.layer.refresh();
    }

    // region properties
    
    async getEffect(): Promise<any> {
        if (!hasValue(this.layer.effect)) {
            return null;
        }
        
        let { buildDotNetEffect } = await import('./effect');
        return buildDotNetEffect(this.layer.effect);
    }
    
    async setEffect(value: any): Promise<void> {
        let { buildJsEffect } = await import('./effect');
        this.layer.effect =  buildJsEffect(value);
    }
    
    async getFullExtent(): Promise<any> {
        if (!hasValue(this.layer.fullExtent)) {
            return null;
        }
        
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(this.layer.fullExtent);
    }
    
    async setFullExtent(value: any): Promise<void> {
        let { buildJsExtent } = await import('./extent');
        this.layer.fullExtent =  buildJsExtent(value);
    }
    
    async setTileInfo(value: any): Promise<void> {
        let { buildJsTileInfo } = await import('./tileInfo');
        this.layer.tileInfo = await  buildJsTileInfo(value, this.layerId, this.viewId);
    }
    
    async getVisibilityTimeExtent(): Promise<any> {
        if (!hasValue(this.layer.visibilityTimeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.visibilityTimeExtent);
    }
    
    async setVisibilityTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.visibilityTimeExtent = await  buildJsTimeExtent(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}


export async function buildJsBingMapsLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.effect)) {
        let { buildJsEffect } = await import('./effect');
        properties.effect = buildJsEffect(dotNetObject.effect) as any;
    }
    if (hasValue(dotNetObject.fullExtent)) {
        let { buildJsExtent } = await import('./extent');
        properties.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;
    }
    if (hasValue(dotNetObject.tileInfo)) {
        let { buildJsTileInfo } = await import('./tileInfo');
        properties.tileInfo = await buildJsTileInfo(dotNetObject.tileInfo, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.visibilityTimeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.arcGISLayerId)) {
        properties.id = dotNetObject.arcGISLayerId;
    }
    if (hasValue(dotNetObject.blendMode)) {
        properties.blendMode = dotNetObject.blendMode;
    }
    if (hasValue(dotNetObject.culture)) {
        properties.culture = dotNetObject.culture;
    }
    if (hasValue(dotNetObject.key)) {
        properties.key = dotNetObject.key;
    }
    if (hasValue(dotNetObject.listMode)) {
        properties.listMode = dotNetObject.listMode;
    }
    if (hasValue(dotNetObject.maxScale)) {
        properties.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.minScale)) {
        properties.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.opacity)) {
        properties.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.persistenceEnabled)) {
        properties.persistenceEnabled = dotNetObject.persistenceEnabled;
    }
    if (hasValue(dotNetObject.refreshInterval)) {
        properties.refreshInterval = dotNetObject.refreshInterval;
    }
    if (hasValue(dotNetObject.region)) {
        properties.region = dotNetObject.region;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        const { id, dotNetComponentReference, ...sanitizedSpatialReference } = dotNetObject.spatialReference;
        properties.spatialReference = sanitizedSpatialReference;
    }
    if (hasValue(dotNetObject.style)) {
        properties.style = dotNetObject.style;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    let jsBingMapsLayer = new BingMapsLayer(properties);
    jsBingMapsLayer.on('layerview-create', async (evt: any) => {
        let { buildDotNetLayerViewCreateEvent } = await import('./layerViewCreateEvent');
        let dnEvent = await buildDotNetLayerViewCreateEvent(evt);
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreate', dnEvent);
    });
    
    jsBingMapsLayer.on('layerview-create-error', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreateError', evt);
    });
    
    jsBingMapsLayer.on('layerview-destroy', async (evt: any) => {
        let { buildDotNetLayerViewDestroyEvent } = await import('./layerViewDestroyEvent');
        let dnEvent = await buildDotNetLayerViewDestroyEvent(evt);
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsDestroy', dnEvent);
    });
    
    jsBingMapsLayer.on('refresh', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsRefresh', evt);
    });
    

    let { default: BingMapsLayerWrapper } = await import('./bingMapsLayer');
    let bingMapsLayerWrapper = new BingMapsLayerWrapper(jsBingMapsLayer);
    bingMapsLayerWrapper.geoBlazorId = dotNetObject.id;
    bingMapsLayerWrapper.viewId = viewId;
    bingMapsLayerWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(bingMapsLayerWrapper);
    jsObjectRefs[dotNetObject.id] = bingMapsLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsBingMapsLayer;
    let { buildDotNetBingMapsLayer } = await import('./bingMapsLayer');
    let dnInstantiatedObject = await buildDotNetBingMapsLayer(jsBingMapsLayer);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BingMapsLayer', e);
    }
    
    return bingMapsLayerWrapper;
}

export async function buildDotNetBingMapsLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBingMapsLayer: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.effect)) {
        let { buildDotNetEffect } = await import('./effect');
        dotNetBingMapsLayer.effect = buildDotNetEffect(jsObject.effect);
    }
    if (hasValue(jsObject.fullExtent)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetBingMapsLayer.fullExtent = buildDotNetExtent(jsObject.fullExtent);
    }
    if (hasValue(jsObject.tileInfo)) {
        let { buildDotNetTileInfo } = await import('./tileInfo');
        dotNetBingMapsLayer.tileInfo = await buildDotNetTileInfo(jsObject.tileInfo);
    }
    if (hasValue(jsObject.visibilityTimeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetBingMapsLayer.visibilityTimeExtent = buildDotNetTimeExtent(jsObject.visibilityTimeExtent);
    }
    if (hasValue(jsObject.id)) {
        dotNetBingMapsLayer.arcGISLayerId = jsObject.id;
    }
    if (hasValue(jsObject.bingLogo)) {
        dotNetBingMapsLayer.bingLogo = jsObject.bingLogo;
    }
    if (hasValue(jsObject.blendMode)) {
        dotNetBingMapsLayer.blendMode = jsObject.blendMode;
    }
    if (hasValue(jsObject.copyright)) {
        dotNetBingMapsLayer.copyright = jsObject.copyright;
    }
    if (hasValue(jsObject.culture)) {
        dotNetBingMapsLayer.culture = jsObject.culture;
    }
    if (hasValue(jsObject.hasAttributionData)) {
        dotNetBingMapsLayer.hasAttributionData = jsObject.hasAttributionData;
    }
    if (hasValue(jsObject.key)) {
        dotNetBingMapsLayer.key = jsObject.key;
    }
    if (hasValue(jsObject.listMode)) {
        dotNetBingMapsLayer.listMode = jsObject.listMode;
    }
    if (hasValue(jsObject.loaded)) {
        dotNetBingMapsLayer.loaded = jsObject.loaded;
    }
    if (hasValue(jsObject.maxScale)) {
        dotNetBingMapsLayer.maxScale = jsObject.maxScale;
    }
    if (hasValue(jsObject.minScale)) {
        dotNetBingMapsLayer.minScale = jsObject.minScale;
    }
    if (hasValue(jsObject.opacity)) {
        dotNetBingMapsLayer.opacity = jsObject.opacity;
    }
    if (hasValue(jsObject.persistenceEnabled)) {
        dotNetBingMapsLayer.persistenceEnabled = jsObject.persistenceEnabled;
    }
    if (hasValue(jsObject.refreshInterval)) {
        dotNetBingMapsLayer.refreshInterval = jsObject.refreshInterval;
    }
    if (hasValue(jsObject.region)) {
        dotNetBingMapsLayer.region = jsObject.region;
    }
    if (hasValue(jsObject.spatialReference)) {
        dotNetBingMapsLayer.spatialReference = jsObject.spatialReference;
    }
    if (hasValue(jsObject.style)) {
        dotNetBingMapsLayer.style = jsObject.style;
    }
    if (hasValue(jsObject.title)) {
        dotNetBingMapsLayer.title = jsObject.title;
    }
    if (hasValue(jsObject.type)) {
        dotNetBingMapsLayer.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetBingMapsLayer.id = k;
                break;
            }
        }
    }

    return dotNetBingMapsLayer;
}

