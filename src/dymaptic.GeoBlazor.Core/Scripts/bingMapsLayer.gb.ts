// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import BingMapsLayer from '@arcgis/core/layers/BingMapsLayer';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, sanitize, removeCircularReferences, buildJsStreamReference, generateSerializableJson } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class BingMapsLayerGenerated implements IPropertyWrapper {
    public layer: BingMapsLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: BingMapsLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.fullExtent)) {
            let { buildJsExtent } = await import('./extent');
            this.layer.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;
        }
        if (hasValue(dotNetObject.tileInfo)) {
            let { buildJsTileInfo } = await import('./tileInfo');
            this.layer.tileInfo = await buildJsTileInfo(dotNetObject.tileInfo, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.visibilityTimeExtent)) {
            let { buildJsTimeExtent } = await import('./timeExtent');
            this.layer.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent) as any;
        }

        if (hasValue(dotNetObject.arcGISLayerId)) {
            this.layer.id = dotNetObject.arcGISLayerId;
        }
        if (hasValue(dotNetObject.blendMode)) {
            this.layer.blendMode = dotNetObject.blendMode;
        }
        if (hasValue(dotNetObject.culture)) {
            this.layer.culture = dotNetObject.culture;
        }
        if (hasValue(dotNetObject.effect)) {
            this.layer.effect = dotNetObject.effect;
        }
        if (hasValue(dotNetObject.key)) {
            this.layer.key = dotNetObject.key;
        }
        if (hasValue(dotNetObject.listMode)) {
            this.layer.listMode = dotNetObject.listMode;
        }
        if (hasValue(dotNetObject.maxScale)) {
            this.layer.maxScale = dotNetObject.maxScale;
        }
        if (hasValue(dotNetObject.minScale)) {
            this.layer.minScale = dotNetObject.minScale;
        }
        if (hasValue(dotNetObject.opacity)) {
            this.layer.opacity = dotNetObject.opacity;
        }
        if (hasValue(dotNetObject.persistenceEnabled)) {
            this.layer.persistenceEnabled = dotNetObject.persistenceEnabled;
        }
        if (hasValue(dotNetObject.refreshInterval)) {
            this.layer.refreshInterval = dotNetObject.refreshInterval;
        }
        if (hasValue(dotNetObject.region)) {
            this.layer.region = dotNetObject.region;
        }
        if (hasValue(dotNetObject.spatialReference)) {
            this.layer.spatialReference = sanitize(dotNetObject.spatialReference);
        }
        if (hasValue(dotNetObject.style)) {
            this.layer.style = dotNetObject.style;
        }
        if (hasValue(dotNetObject.title)) {
            this.layer.title = dotNetObject.title;
        }
        if (hasValue(dotNetObject.visible)) {
            this.layer.visible = dotNetObject.visible;
        }
    }
    
    async addResolvingPromise(promiseToLoad: any): Promise<void> {
        this.layer.addResolvingPromise(promiseToLoad);
    }

    async cancelLoad(): Promise<void> {
        this.layer.cancelLoad();
    }

    async createLayerView(view: any,
        options: any): Promise<any> {
        return await this.layer.createLayerView(view,
            options);
    }

    async fetchAttributionData(): Promise<any> {
        let result = await this.layer.fetchAttributionData();
        
        return generateSerializableJson(result);
    }

    async fetchTile(level: any,
        row: any,
        col: any,
        options: any): Promise<any> {
        return await this.layer.fetchTile(level,
            row,
            col,
            options);
    }

    async getTileBounds(level: any,
        row: any,
        column: any,
        out: any): Promise<any> {
        return this.layer.getTileBounds(level,
            row,
            column,
            out);
    }

    async getTileUrl(level: any,
        row: any,
        col: any): Promise<any> {
        return this.layer.getTileUrl(level,
            row,
            col);
    }

    async isFulfilled(): Promise<any> {
        return this.layer.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.layer.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.layer.isResolved();
    }

    async load(options: any): Promise<any> {
        let result = await this.layer.load(options);
        
        return generateSerializableJson(result);
    }

    async refresh(): Promise<void> {
        this.layer.refresh();
    }

    async when(callback: any,
        errback: any): Promise<any> {
        let result = await this.layer.when(callback,
            errback);
        
        return generateSerializableJson(result);
    }

    // region properties
    
    getArcGISLayerId(): any {
        if (!hasValue(this.layer.id)) {
            return null;
        }
        
        return generateSerializableJson(this.layer.id);
    }
    
    setArcGISLayerId(value: any): void {
        this.layer.id = JSON.parse(value);
    }
    
    setBingLogo(value: any): void {
        this.layer.bingLogo = JSON.parse(value);
    }
    
    setCopyright(value: any): void {
        this.layer.copyright = JSON.parse(value);
    }
    
    async getFullExtent(): Promise<any> {
        if (!hasValue(this.layer.fullExtent)) {
            return null;
        }
        
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(this.layer.fullExtent);
    }
    
    async setFullExtent(value: any): Promise<void> {
        let { buildJsExtent } = await import('./extent');
        this.layer.fullExtent =  buildJsExtent(value);
    }
    
    getKey(): any {
        if (!hasValue(this.layer.key)) {
            return null;
        }
        
        return generateSerializableJson(this.layer.key);
    }
    
    setKey(value: any): void {
        this.layer.key = JSON.parse(value);
    }
    
    getRegion(): any {
        if (!hasValue(this.layer.region)) {
            return null;
        }
        
        return generateSerializableJson(this.layer.region);
    }
    
    setRegion(value: any): void {
        this.layer.region = JSON.parse(value);
    }
    
    async setTileInfo(value: any): Promise<void> {
        let { buildJsTileInfo } = await import('./tileInfo');
        this.layer.tileInfo = await  buildJsTileInfo(value, this.layerId, this.viewId);
    }
    
    getTitle(): any {
        if (!hasValue(this.layer.title)) {
            return null;
        }
        
        return generateSerializableJson(this.layer.title);
    }
    
    setTitle(value: any): void {
        this.layer.title = JSON.parse(value);
    }
    
    async getVisibilityTimeExtent(): Promise<any> {
        if (!hasValue(this.layer.visibilityTimeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.visibilityTimeExtent);
    }
    
    async setVisibilityTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.visibilityTimeExtent = await  buildJsTimeExtent(value);
    }
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}


export async function buildJsBingMapsLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.fullExtent)) {
        let { buildJsExtent } = await import('./extent');
        properties.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;
    }
    if (hasValue(dotNetObject.tileInfo)) {
        let { buildJsTileInfo } = await import('./tileInfo');
        properties.tileInfo = await buildJsTileInfo(dotNetObject.tileInfo, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.visibilityTimeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent) as any;
    }

    if (hasValue(dotNetObject.arcGISLayerId)) {
        properties.id = dotNetObject.arcGISLayerId;
    }
    if (hasValue(dotNetObject.blendMode)) {
        properties.blendMode = dotNetObject.blendMode;
    }
    if (hasValue(dotNetObject.culture)) {
        properties.culture = dotNetObject.culture;
    }
    if (hasValue(dotNetObject.effect)) {
        properties.effect = dotNetObject.effect;
    }
    if (hasValue(dotNetObject.key)) {
        properties.key = dotNetObject.key;
    }
    if (hasValue(dotNetObject.listMode)) {
        properties.listMode = dotNetObject.listMode;
    }
    if (hasValue(dotNetObject.maxScale)) {
        properties.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.minScale)) {
        properties.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.opacity)) {
        properties.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.persistenceEnabled)) {
        properties.persistenceEnabled = dotNetObject.persistenceEnabled;
    }
    if (hasValue(dotNetObject.refreshInterval)) {
        properties.refreshInterval = dotNetObject.refreshInterval;
    }
    if (hasValue(dotNetObject.region)) {
        properties.region = dotNetObject.region;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        properties.spatialReference = sanitize(dotNetObject.spatialReference);
    }
    if (hasValue(dotNetObject.style)) {
        properties.style = dotNetObject.style;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    let jsBingMapsLayer = new BingMapsLayer(properties);
    if (hasValue(dotNetObject.hasCreateListener) && dotNetObject.hasCreateListener) {
        jsBingMapsLayer.on('layerview-create', async (evt: any) => {
            let streamRef = buildJsStreamReference(evt ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreate', streamRef);
        });
    }
    
    if (hasValue(dotNetObject.hasCreateErrorListener) && dotNetObject.hasCreateErrorListener) {
        jsBingMapsLayer.on('layerview-create-error', async (evt: any) => {
            let { buildDotNetLayerViewCreateErrorEvent } = await import('./layerViewCreateErrorEvent');
            let dnEvent = await buildDotNetLayerViewCreateErrorEvent(evt, layerId, viewId);
            let streamRef = buildJsStreamReference(dnEvent ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreateError', streamRef);
        });
    }
    
    if (hasValue(dotNetObject.hasDestroyListener) && dotNetObject.hasDestroyListener) {
        jsBingMapsLayer.on('layerview-destroy', async (evt: any) => {
            let streamRef = buildJsStreamReference(evt ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsDestroy', streamRef);
        });
    }
    
    if (hasValue(dotNetObject.hasRefreshListener) && dotNetObject.hasRefreshListener) {
        jsBingMapsLayer.on('refresh', async (evt: any) => {
            let streamRef = buildJsStreamReference(evt ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsRefresh', streamRef);
        });
    }
    

    let { default: BingMapsLayerWrapper } = await import('./bingMapsLayer');
    let bingMapsLayerWrapper = new BingMapsLayerWrapper(jsBingMapsLayer);
    bingMapsLayerWrapper.geoBlazorId = dotNetObject.id;
    bingMapsLayerWrapper.viewId = viewId;
    bingMapsLayerWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = bingMapsLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsBingMapsLayer;
    
    try {
        let jsObjectRef = DotNet.createJSObjectReference(bingMapsLayerWrapper);
        let { buildDotNetBingMapsLayer } = await import('./bingMapsLayer');
        let dnInstantiatedObject = await buildDotNetBingMapsLayer(jsBingMapsLayer);

        let dnStream = buildJsStreamReference(dnInstantiatedObject);
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, dnStream);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BingMapsLayer', e);
    }
    
    return jsBingMapsLayer;
}


export async function buildDotNetBingMapsLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBingMapsLayer: any = {};
    
    if (hasValue(jsObject.fullExtent)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetBingMapsLayer.fullExtent = buildDotNetExtent(jsObject.fullExtent);
    }
    
    if (hasValue(jsObject.tileInfo)) {
        let { buildDotNetTileInfo } = await import('./tileInfo');
        dotNetBingMapsLayer.tileInfo = await buildDotNetTileInfo(jsObject.tileInfo);
    }
    
    if (hasValue(jsObject.visibilityTimeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetBingMapsLayer.visibilityTimeExtent = buildDotNetTimeExtent(jsObject.visibilityTimeExtent);
    }
    
    if (hasValue(jsObject.id)) {
        dotNetBingMapsLayer.arcGISLayerId = jsObject.id;
    }
    
    if (hasValue(jsObject.bingLogo)) {
        dotNetBingMapsLayer.bingLogo = jsObject.bingLogo;
    }
    
    if (hasValue(jsObject.blendMode)) {
        dotNetBingMapsLayer.blendMode = removeCircularReferences(jsObject.blendMode);
    }
    
    if (hasValue(jsObject.copyright)) {
        dotNetBingMapsLayer.copyright = jsObject.copyright;
    }
    
    if (hasValue(jsObject.culture)) {
        dotNetBingMapsLayer.culture = removeCircularReferences(jsObject.culture);
    }
    
    if (hasValue(jsObject.effect)) {
        dotNetBingMapsLayer.effect = removeCircularReferences(jsObject.effect);
    }
    
    if (hasValue(jsObject.hasAttributionData)) {
        dotNetBingMapsLayer.hasAttributionData = jsObject.hasAttributionData;
    }
    
    if (hasValue(jsObject.key)) {
        dotNetBingMapsLayer.key = jsObject.key;
    }
    
    if (hasValue(jsObject.listMode)) {
        dotNetBingMapsLayer.listMode = removeCircularReferences(jsObject.listMode);
    }
    
    if (hasValue(jsObject.loaded)) {
        dotNetBingMapsLayer.loaded = jsObject.loaded;
    }
    
    if (hasValue(jsObject.maxScale)) {
        dotNetBingMapsLayer.maxScale = jsObject.maxScale;
    }
    
    if (hasValue(jsObject.minScale)) {
        dotNetBingMapsLayer.minScale = jsObject.minScale;
    }
    
    if (hasValue(jsObject.opacity)) {
        dotNetBingMapsLayer.opacity = jsObject.opacity;
    }
    
    if (hasValue(jsObject.persistenceEnabled)) {
        dotNetBingMapsLayer.persistenceEnabled = jsObject.persistenceEnabled;
    }
    
    if (hasValue(jsObject.refreshInterval)) {
        dotNetBingMapsLayer.refreshInterval = jsObject.refreshInterval;
    }
    
    if (hasValue(jsObject.region)) {
        dotNetBingMapsLayer.region = jsObject.region;
    }
    
    if (hasValue(jsObject.spatialReference)) {
        dotNetBingMapsLayer.spatialReference = removeCircularReferences(jsObject.spatialReference);
    }
    
    if (hasValue(jsObject.style)) {
        dotNetBingMapsLayer.style = removeCircularReferences(jsObject.style);
    }
    
    if (hasValue(jsObject.title)) {
        dotNetBingMapsLayer.title = jsObject.title;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetBingMapsLayer.type = removeCircularReferences(jsObject.type);
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetBingMapsLayer.visible = jsObject.visible;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetBingMapsLayer.id = geoBlazorId;
    }

    return dotNetBingMapsLayer;
}

