// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetGraphNamedObjectDeletes } from './graphNamedObjectDeletes';

export async function buildJsGraphNamedObjectDeletesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsGraphNamedObjectDeletes: any = {};

    if (hasValue(dotNetObject.ids) && dotNetObject.ids.length > 0) {
        jsGraphNamedObjectDeletes.ids = dotNetObject.ids;
    }
    if (hasValue(dotNetObject.typeName)) {
        jsGraphNamedObjectDeletes.typeName = dotNetObject.typeName;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsGraphNamedObjectDeletes);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsGraphNamedObjectDeletes;
    
    return jsGraphNamedObjectDeletes;
}


export async function buildDotNetGraphNamedObjectDeletesGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGraphNamedObjectDeletes: any = {};
    
    if (hasValue(jsObject.ids)) {
        dotNetGraphNamedObjectDeletes.ids = jsObject.ids;
    }
    
    if (hasValue(jsObject.typeName)) {
        dotNetGraphNamedObjectDeletes.typeName = jsObject.typeName;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetGraphNamedObjectDeletes.id = geoBlazorId;
    }

    return dotNetGraphNamedObjectDeletes;
}

