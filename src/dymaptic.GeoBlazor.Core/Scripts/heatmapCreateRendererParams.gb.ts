// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetHeatmapCreateRendererParams } from './heatmapCreateRendererParams';

export async function buildJsHeatmapCreateRendererParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsheatmapCreateRendererParams: any = {};
    if (hasValue(dotNetObject.heatmapScheme)) {
        let { buildJsHeatmapScheme } = await import('./heatmapScheme');
        jsheatmapCreateRendererParams.heatmapScheme = await buildJsHeatmapScheme(dotNetObject.heatmapScheme, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsheatmapCreateRendererParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.fadeRatio)) {
        jsheatmapCreateRendererParams.fadeRatio = dotNetObject.fadeRatio;
    }
    if (hasValue(dotNetObject.fadeToTransparent)) {
        jsheatmapCreateRendererParams.fadeToTransparent = dotNetObject.fadeToTransparent;
    }
    if (hasValue(dotNetObject.field)) {
        jsheatmapCreateRendererParams.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.maxRatio)) {
        jsheatmapCreateRendererParams.maxRatio = dotNetObject.maxRatio;
    }
    if (hasValue(dotNetObject.minRatio)) {
        jsheatmapCreateRendererParams.minRatio = dotNetObject.minRatio;
    }
    if (hasValue(dotNetObject.radius)) {
        jsheatmapCreateRendererParams.radius = dotNetObject.radius;
    }
    if (hasValue(dotNetObject.signal)) {
        jsheatmapCreateRendererParams.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.statistics)) {
        jsheatmapCreateRendererParams.statistics = dotNetObject.statistics;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsheatmapCreateRendererParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsheatmapCreateRendererParams;
    
    let dnInstantiatedObject = await buildDotNetHeatmapCreateRendererParams(jsheatmapCreateRendererParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for HeatmapCreateRendererParams', e);
    }
    
    return jsheatmapCreateRendererParams;
}

export async function buildDotNetHeatmapCreateRendererParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetHeatmapCreateRendererParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.heatmapScheme)) {
            let { buildDotNetHeatmapScheme } = await import('./heatmapScheme');
            dotNetHeatmapCreateRendererParams.heatmapScheme = await buildDotNetHeatmapScheme(jsObject.heatmapScheme);
        }
    if (hasValue(jsObject.fadeRatio)) {
        dotNetHeatmapCreateRendererParams.fadeRatio = jsObject.fadeRatio;
    }
    if (hasValue(jsObject.fadeToTransparent)) {
        dotNetHeatmapCreateRendererParams.fadeToTransparent = jsObject.fadeToTransparent;
    }
    if (hasValue(jsObject.field)) {
        dotNetHeatmapCreateRendererParams.field = jsObject.field;
    }
    if (hasValue(jsObject.maxRatio)) {
        dotNetHeatmapCreateRendererParams.maxRatio = jsObject.maxRatio;
    }
    if (hasValue(jsObject.minRatio)) {
        dotNetHeatmapCreateRendererParams.minRatio = jsObject.minRatio;
    }
    if (hasValue(jsObject.radius)) {
        dotNetHeatmapCreateRendererParams.radius = jsObject.radius;
    }
    if (hasValue(jsObject.signal)) {
        dotNetHeatmapCreateRendererParams.signal = jsObject.signal;
    }
    if (hasValue(jsObject.statistics)) {
        dotNetHeatmapCreateRendererParams.statistics = jsObject.statistics;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetHeatmapCreateRendererParams.id = k;
                break;
            }
        }
    }

    return dotNetHeatmapCreateRendererParams;
}

