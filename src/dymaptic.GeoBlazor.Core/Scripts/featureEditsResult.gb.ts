// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetFeatureEditsResult } from './featureEditsResult';

export async function buildJsFeatureEditsResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsEditsResult: any = {};
    if (hasValue(dotNetObject.editedFeatureResults) && dotNetObject.editedFeatureResults.length > 0) {
        let { buildJsEditedFeatureResult } = await import('./editedFeatureResult');
        jsEditsResult.editedFeatureResults = await Promise.all(dotNetObject.editedFeatureResults.map(async i => await buildJsEditedFeatureResult(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.addAttachmentResults) && dotNetObject.addAttachmentResults.length > 0) {
        jsEditsResult.addAttachmentResults = dotNetObject.addAttachmentResults;
    }
    if (hasValue(dotNetObject.addFeatureResults) && dotNetObject.addFeatureResults.length > 0) {
        jsEditsResult.addFeatureResults = dotNetObject.addFeatureResults;
    }
    if (hasValue(dotNetObject.deleteAttachmentResults) && dotNetObject.deleteAttachmentResults.length > 0) {
        jsEditsResult.deleteAttachmentResults = dotNetObject.deleteAttachmentResults;
    }
    if (hasValue(dotNetObject.deleteFeatureResults) && dotNetObject.deleteFeatureResults.length > 0) {
        jsEditsResult.deleteFeatureResults = dotNetObject.deleteFeatureResults;
    }
    if (hasValue(dotNetObject.editMoment)) {
        jsEditsResult.editMoment = dotNetObject.editMoment;
    }
    if (hasValue(dotNetObject.updateAttachmentResults) && dotNetObject.updateAttachmentResults.length > 0) {
        jsEditsResult.updateAttachmentResults = dotNetObject.updateAttachmentResults;
    }
    if (hasValue(dotNetObject.updateFeatureResults) && dotNetObject.updateFeatureResults.length > 0) {
        jsEditsResult.updateFeatureResults = dotNetObject.updateFeatureResults;
    }
    
    jsObjectRefs[dotNetObject.id] = jsEditsResult;
    arcGisObjectRefs[dotNetObject.id] = jsEditsResult;
    
    return jsEditsResult;
}


export async function buildDotNetFeatureEditsResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureEditsResult: any = {};
    
    if (hasValue(jsObject.editedFeatureResults)) {
        let { buildDotNetEditedFeatureResult } = await import('./editedFeatureResult');
        dotNetFeatureEditsResult.editedFeatureResults = await Promise.all(jsObject.editedFeatureResults.map(async i => await buildDotNetEditedFeatureResult(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.addAttachmentResults)) {
        dotNetFeatureEditsResult.addAttachmentResults = removeCircularReferences(jsObject.addAttachmentResults);
    }
    
    if (hasValue(jsObject.addFeatureResults)) {
        dotNetFeatureEditsResult.addFeatureResults = removeCircularReferences(jsObject.addFeatureResults);
    }
    
    if (hasValue(jsObject.deleteAttachmentResults)) {
        dotNetFeatureEditsResult.deleteAttachmentResults = removeCircularReferences(jsObject.deleteAttachmentResults);
    }
    
    if (hasValue(jsObject.deleteFeatureResults)) {
        dotNetFeatureEditsResult.deleteFeatureResults = removeCircularReferences(jsObject.deleteFeatureResults);
    }
    
    if (hasValue(jsObject.editMoment)) {
        dotNetFeatureEditsResult.editMoment = jsObject.editMoment;
    }
    
    if (hasValue(jsObject.updateAttachmentResults)) {
        dotNetFeatureEditsResult.updateAttachmentResults = removeCircularReferences(jsObject.updateAttachmentResults);
    }
    
    if (hasValue(jsObject.updateFeatureResults)) {
        dotNetFeatureEditsResult.updateFeatureResults = removeCircularReferences(jsObject.updateFeatureResults);
    }
    

    return dotNetFeatureEditsResult;
}

