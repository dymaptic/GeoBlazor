// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetFeatureEditsResult } from './featureEditsResult';

export async function buildJsFeatureEditsResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsEditsResult: any = {};
    if (hasValue(dotNetObject.editedFeatureResults)) {
        let { buildJsEditedFeatureResult } = await import('./editedFeatureResult');
        jsEditsResult.editedFeatureResults = await Promise.all(dotNetObject.editedFeatureResults.map(async i => await buildJsEditedFeatureResult(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.addAttachmentResults)) {
        jsEditsResult.addAttachmentResults = dotNetObject.addAttachmentResults;
    }
    if (hasValue(dotNetObject.addFeatureResults)) {
        jsEditsResult.addFeatureResults = dotNetObject.addFeatureResults;
    }
    if (hasValue(dotNetObject.deleteAttachmentResults)) {
        jsEditsResult.deleteAttachmentResults = dotNetObject.deleteAttachmentResults;
    }
    if (hasValue(dotNetObject.deleteFeatureResults)) {
        jsEditsResult.deleteFeatureResults = dotNetObject.deleteFeatureResults;
    }
    if (hasValue(dotNetObject.editMoment)) {
        jsEditsResult.editMoment = dotNetObject.editMoment;
    }
    if (hasValue(dotNetObject.updateAttachmentResults)) {
        jsEditsResult.updateAttachmentResults = dotNetObject.updateAttachmentResults;
    }
    if (hasValue(dotNetObject.updateFeatureResults)) {
        jsEditsResult.updateFeatureResults = dotNetObject.updateFeatureResults;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsEditsResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsEditsResult;
    
    return jsEditsResult;
}


export async function buildDotNetFeatureEditsResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureEditsResult: any = {};
    
    if (hasValue(jsObject.editedFeatureResults)) {
        let { buildDotNetEditedFeatureResult } = await import('./editedFeatureResult');
        dotNetFeatureEditsResult.editedFeatureResults = await Promise.all(jsObject.editedFeatureResults.map(async i => await buildDotNetEditedFeatureResult(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.addAttachmentResults)) {
        dotNetFeatureEditsResult.addAttachmentResults = jsObject.addAttachmentResults;
    }
    
    if (hasValue(jsObject.addFeatureResults)) {
        dotNetFeatureEditsResult.addFeatureResults = jsObject.addFeatureResults;
    }
    
    if (hasValue(jsObject.deleteAttachmentResults)) {
        dotNetFeatureEditsResult.deleteAttachmentResults = jsObject.deleteAttachmentResults;
    }
    
    if (hasValue(jsObject.deleteFeatureResults)) {
        dotNetFeatureEditsResult.deleteFeatureResults = jsObject.deleteFeatureResults;
    }
    
    if (hasValue(jsObject.editMoment)) {
        dotNetFeatureEditsResult.editMoment = jsObject.editMoment;
    }
    
    if (hasValue(jsObject.updateAttachmentResults)) {
        dotNetFeatureEditsResult.updateAttachmentResults = jsObject.updateAttachmentResults;
    }
    
    if (hasValue(jsObject.updateFeatureResults)) {
        dotNetFeatureEditsResult.updateFeatureResults = jsObject.updateFeatureResults;
    }
    

    return dotNetFeatureEditsResult;
}

