// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import FeatureLayerBaseElevationInfoFeatureExpressionInfo = __esri.FeatureLayerBaseElevationInfoFeatureExpressionInfo;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FeatureLayerBaseElevationInfoFeatureExpressionInfoGenerated implements IPropertyWrapper {
    public component: FeatureLayerBaseElevationInfoFeatureExpressionInfo;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: FeatureLayerBaseElevationInfoFeatureExpressionInfo) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsFeatureLayerBaseElevationInfoFeatureExpressionInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureLayerBaseElevationInfoFeatureExpressionInfo: any = {}

    if (hasValue(dotNetObject.expression)) {
        jsFeatureLayerBaseElevationInfoFeatureExpressionInfo.expression = dotNetObject.expression;
    }
    if (hasValue(dotNetObject.title)) {
        jsFeatureLayerBaseElevationInfoFeatureExpressionInfo.title = dotNetObject.title;
    }
    let { default: FeatureLayerBaseElevationInfoFeatureExpressionInfoWrapper } = await import('./featureLayerBaseElevationInfoFeatureExpressionInfo');
    let featureLayerBaseElevationInfoFeatureExpressionInfoWrapper = new FeatureLayerBaseElevationInfoFeatureExpressionInfoWrapper(jsFeatureLayerBaseElevationInfoFeatureExpressionInfo);
    featureLayerBaseElevationInfoFeatureExpressionInfoWrapper.geoBlazorId = dotNetObject.id;
    featureLayerBaseElevationInfoFeatureExpressionInfoWrapper.viewId = viewId;
    featureLayerBaseElevationInfoFeatureExpressionInfoWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(featureLayerBaseElevationInfoFeatureExpressionInfoWrapper);
    jsObjectRefs[dotNetObject.id] = featureLayerBaseElevationInfoFeatureExpressionInfoWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureLayerBaseElevationInfoFeatureExpressionInfo;
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureLayerBaseElevationInfoFeatureExpressionInfo', e);
    }
    
    return jsFeatureLayerBaseElevationInfoFeatureExpressionInfo;
}

export async function buildDotNetFeatureLayerBaseElevationInfoFeatureExpressionInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureLayerBaseElevationInfoFeatureExpressionInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.expression)) {
            dotNetFeatureLayerBaseElevationInfoFeatureExpressionInfo.expression = jsObject.expression;
        }
        if (hasValue(jsObject.title)) {
            dotNetFeatureLayerBaseElevationInfoFeatureExpressionInfo.title = jsObject.title;
        }

    return dotNetFeatureLayerBaseElevationInfoFeatureExpressionInfo;
}

