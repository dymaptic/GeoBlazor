// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetFeatureServiceCapabilitiesData } from './featureServiceCapabilitiesData';

export async function buildJsFeatureServiceCapabilitiesDataGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureServiceCapabilitiesData: any = {};

    if (hasValue(dotNetObject.isVersioned)) {
        jsFeatureServiceCapabilitiesData.isVersioned = dotNetObject.isVersioned;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureServiceCapabilitiesData);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureServiceCapabilitiesData;
    
    try {
        let { buildDotNetFeatureServiceCapabilitiesData } = await import('./featureServiceCapabilitiesData');
        let dnInstantiatedObject = await buildDotNetFeatureServiceCapabilitiesData(jsFeatureServiceCapabilitiesData, layerId, viewId);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type FeatureServiceCapabilitiesData detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureServiceCapabilitiesData', e);
    }
    
    return jsFeatureServiceCapabilitiesData;
}


export async function buildDotNetFeatureServiceCapabilitiesDataGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureServiceCapabilitiesData: any = {};
    
    if (hasValue(jsObject.isVersioned)) {
        dotNetFeatureServiceCapabilitiesData.isVersioned = jsObject.isVersioned;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetFeatureServiceCapabilitiesData.id = geoBlazorId;
    }

    return dotNetFeatureServiceCapabilitiesData;
}

