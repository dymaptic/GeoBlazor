// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetFeatureServiceCapabilitiesData } from './featureServiceCapabilitiesData';

export async function buildJsFeatureServiceCapabilitiesDataGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsFeatureServiceCapabilitiesData: any = {};

    if (hasValue(dotNetObject.isVersioned)) {
        jsFeatureServiceCapabilitiesData.isVersioned = dotNetObject.isVersioned;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureServiceCapabilitiesData);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureServiceCapabilitiesData;
    
    return jsFeatureServiceCapabilitiesData;
}


export async function buildDotNetFeatureServiceCapabilitiesDataGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureServiceCapabilitiesData: any = {};
    
    if (hasValue(jsObject.isVersioned)) {
        dotNetFeatureServiceCapabilitiesData.isVersioned = jsObject.isVersioned;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetFeatureServiceCapabilitiesData.id = geoBlazorId;
    }

    return dotNetFeatureServiceCapabilitiesData;
}

