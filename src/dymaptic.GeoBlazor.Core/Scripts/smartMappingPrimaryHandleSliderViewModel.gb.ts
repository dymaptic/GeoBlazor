// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import SmartMappingPrimaryHandleSliderViewModel from '@arcgis/core/widgets/smartMapping/SmartMappingPrimaryHandleSliderViewModel';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SmartMappingPrimaryHandleSliderViewModelGenerated implements IPropertyWrapper {
    public component: SmartMappingPrimaryHandleSliderViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: SmartMappingPrimaryHandleSliderViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async defaultInputFormatFunction(value: any): Promise<any> {
        return this.component.defaultInputFormatFunction(value);
    }

    async defaultInputParseFunction(value: any): Promise<any> {
        return this.component.defaultInputParseFunction(value);
    }

    async defaultLabelFormatFunction(value: any): Promise<any> {
        return this.component.defaultLabelFormatFunction(value);
    }

    async getBounds(): Promise<any> {
        return this.component.getBounds();
    }

    async getBoundsForValueAtIndex(index: any): Promise<any> {
        return this.component.getBoundsForValueAtIndex(index);
    }

    async getLabelForValue(value: any,
        type: any,
        index: any): Promise<any> {
        return this.component.getLabelForValue(value,
            type,
            index);
    }

    async getUnzoomedMax(): Promise<void> {
        this.component.getUnzoomedMax();
    }

    async getUnzoomedMin(): Promise<void> {
        this.component.getUnzoomedMin();
    }

    async setValue(index: any,
        value: any): Promise<void> {
        this.component.setValue(index,
            value);
    }

    async toPrecision(value: any): Promise<any> {
        return this.component.toPrecision(value);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsSmartMappingPrimaryHandleSliderViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSmartMappingPrimaryHandleSliderViewModel = new SmartMappingPrimaryHandleSliderViewModel();
    if (hasValue(dotNetObject.hasInputFormatFunction) && dotNetObject.hasInputFormatFunction) {
        jsSmartMappingPrimaryHandleSliderViewModel.inputFormatFunction = (value,
        type,
        index) => {
            let func = new Function('value',
            'type',
            'index', dotNetObject.inputFormatFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }
    if (hasValue(dotNetObject.hasInputParseFunction) && dotNetObject.hasInputParseFunction) {
        jsSmartMappingPrimaryHandleSliderViewModel.inputParseFunction = (value,
        type,
        index) => {
            let func = new Function('value',
            'type',
            'index', dotNetObject.inputParseFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }
    if (hasValue(dotNetObject.hasLabelFormatFunction) && dotNetObject.hasLabelFormatFunction) {
        jsSmartMappingPrimaryHandleSliderViewModel.labelFormatFunction = (value,
        type,
        index) => {
            let func = new Function('value',
            'type',
            'index', dotNetObject.labelFormatFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }

    if (hasValue(dotNetObject.effectiveMax)) {
        jsSmartMappingPrimaryHandleSliderViewModel.effectiveMax = dotNetObject.effectiveMax;
    }
    if (hasValue(dotNetObject.effectiveMin)) {
        jsSmartMappingPrimaryHandleSliderViewModel.effectiveMin = dotNetObject.effectiveMin;
    }
    if (hasValue(dotNetObject.handlesSyncedToPrimary)) {
        jsSmartMappingPrimaryHandleSliderViewModel.handlesSyncedToPrimary = dotNetObject.handlesSyncedToPrimary;
    }
    if (hasValue(dotNetObject.max)) {
        jsSmartMappingPrimaryHandleSliderViewModel.max = dotNetObject.max;
    }
    if (hasValue(dotNetObject.min)) {
        jsSmartMappingPrimaryHandleSliderViewModel.min = dotNetObject.min;
    }
    if (hasValue(dotNetObject.precision)) {
        jsSmartMappingPrimaryHandleSliderViewModel.precision = dotNetObject.precision;
    }
    if (hasValue(dotNetObject.primaryHandleEnabled)) {
        jsSmartMappingPrimaryHandleSliderViewModel.primaryHandleEnabled = dotNetObject.primaryHandleEnabled;
    }
    if (hasValue(dotNetObject.thumbsConstrained)) {
        jsSmartMappingPrimaryHandleSliderViewModel.thumbsConstrained = dotNetObject.thumbsConstrained;
    }
    if (hasValue(dotNetObject.values)) {
        jsSmartMappingPrimaryHandleSliderViewModel.values = dotNetObject.values;
    }
    if (hasValue(dotNetObject.zoomingEnabled)) {
        jsSmartMappingPrimaryHandleSliderViewModel.zoomingEnabled = dotNetObject.zoomingEnabled;
    }
    if (hasValue(dotNetObject.zoomOptions)) {
        jsSmartMappingPrimaryHandleSliderViewModel.zoomOptions = dotNetObject.zoomOptions;
    }

    let { default: SmartMappingPrimaryHandleSliderViewModelWrapper } = await import('./smartMappingPrimaryHandleSliderViewModel');
    let smartMappingPrimaryHandleSliderViewModelWrapper = new SmartMappingPrimaryHandleSliderViewModelWrapper(jsSmartMappingPrimaryHandleSliderViewModel);
    smartMappingPrimaryHandleSliderViewModelWrapper.geoBlazorId = dotNetObject.id;
    smartMappingPrimaryHandleSliderViewModelWrapper.viewId = viewId;
    smartMappingPrimaryHandleSliderViewModelWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(smartMappingPrimaryHandleSliderViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = smartMappingPrimaryHandleSliderViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsSmartMappingPrimaryHandleSliderViewModel;
    let { buildDotNetSmartMappingPrimaryHandleSliderViewModel } = await import('./smartMappingPrimaryHandleSliderViewModel');
    let dnInstantiatedObject = await buildDotNetSmartMappingPrimaryHandleSliderViewModel(jsSmartMappingPrimaryHandleSliderViewModel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SmartMappingPrimaryHandleSliderViewModel', e);
    }
    
    return jsSmartMappingPrimaryHandleSliderViewModel;
}

export async function buildDotNetSmartMappingPrimaryHandleSliderViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSmartMappingPrimaryHandleSliderViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.effectiveMax)) {
            dotNetSmartMappingPrimaryHandleSliderViewModel.effectiveMax = jsObject.effectiveMax;
        }
        if (hasValue(jsObject.effectiveMin)) {
            dotNetSmartMappingPrimaryHandleSliderViewModel.effectiveMin = jsObject.effectiveMin;
        }
        if (hasValue(jsObject.handlesSyncedToPrimary)) {
            dotNetSmartMappingPrimaryHandleSliderViewModel.handlesSyncedToPrimary = jsObject.handlesSyncedToPrimary;
        }
        if (hasValue(jsObject.inputFormatFunction)) {
            dotNetSmartMappingPrimaryHandleSliderViewModel.inputFormatFunction = jsObject.inputFormatFunction;
        }
        if (hasValue(jsObject.inputParseFunction)) {
            dotNetSmartMappingPrimaryHandleSliderViewModel.inputParseFunction = jsObject.inputParseFunction;
        }
        if (hasValue(jsObject.labelFormatFunction)) {
            dotNetSmartMappingPrimaryHandleSliderViewModel.labelFormatFunction = jsObject.labelFormatFunction;
        }
        if (hasValue(jsObject.labels)) {
            dotNetSmartMappingPrimaryHandleSliderViewModel.labels = jsObject.labels;
        }
        if (hasValue(jsObject.max)) {
            dotNetSmartMappingPrimaryHandleSliderViewModel.max = jsObject.max;
        }
        if (hasValue(jsObject.min)) {
            dotNetSmartMappingPrimaryHandleSliderViewModel.min = jsObject.min;
        }
        if (hasValue(jsObject.precision)) {
            dotNetSmartMappingPrimaryHandleSliderViewModel.precision = jsObject.precision;
        }
        if (hasValue(jsObject.primaryHandleEnabled)) {
            dotNetSmartMappingPrimaryHandleSliderViewModel.primaryHandleEnabled = jsObject.primaryHandleEnabled;
        }
        if (hasValue(jsObject.state)) {
            dotNetSmartMappingPrimaryHandleSliderViewModel.state = jsObject.state;
        }
        if (hasValue(jsObject.thumbsConstrained)) {
            dotNetSmartMappingPrimaryHandleSliderViewModel.thumbsConstrained = jsObject.thumbsConstrained;
        }
        if (hasValue(jsObject.values)) {
            dotNetSmartMappingPrimaryHandleSliderViewModel.values = jsObject.values;
        }
        if (hasValue(jsObject.zoomingEnabled)) {
            dotNetSmartMappingPrimaryHandleSliderViewModel.zoomingEnabled = jsObject.zoomingEnabled;
        }
        if (hasValue(jsObject.zoomOptions)) {
            dotNetSmartMappingPrimaryHandleSliderViewModel.zoomOptions = jsObject.zoomOptions;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSmartMappingPrimaryHandleSliderViewModel.id = k;
                break;
            }
        }
    }

    return dotNetSmartMappingPrimaryHandleSliderViewModel;
}

