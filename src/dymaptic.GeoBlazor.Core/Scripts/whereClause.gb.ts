// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import WhereClause = __esri.WhereClause;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class WhereClauseGenerated implements IPropertyWrapper {
    public component: WhereClause;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: WhereClause) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async calculateValue(feature: any): Promise<any> {
        return this.component.calculateValue(feature);
    }

    async testFeature(feature: any): Promise<any> {
        return this.component.testFeature(feature);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsWhereClauseGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsWhereClause: any = {}

    if (hasValue(dotNetObject.fieldNames)) {
        jsWhereClause.fieldNames = dotNetObject.fieldNames;
    }
    if (hasValue(dotNetObject.parseTree)) {
        jsWhereClause.parseTree = dotNetObject.parseTree;
    }

    let { default: WhereClauseWrapper } = await import('./whereClause');
    let whereClauseWrapper = new WhereClauseWrapper(jsWhereClause);
    whereClauseWrapper.geoBlazorId = dotNetObject.id;
    whereClauseWrapper.viewId = viewId;
    whereClauseWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(whereClauseWrapper);
    jsObjectRefs[dotNetObject.id] = whereClauseWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsWhereClause;
    let { buildDotNetWhereClause } = await import('./whereClause');
    let dnInstantiatedObject = await buildDotNetWhereClause(jsWhereClause);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for WhereClause', e);
    }
    
    return jsWhereClause;
}

export async function buildDotNetWhereClauseGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWhereClause: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.fieldNames)) {
            dotNetWhereClause.fieldNames = jsObject.fieldNames;
        }
        if (hasValue(jsObject.isStandardized)) {
            dotNetWhereClause.isStandardized = jsObject.isStandardized;
        }
        if (hasValue(jsObject.parseTree)) {
            dotNetWhereClause.parseTree = jsObject.parseTree;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetWhereClause.id = k;
                break;
            }
        }
    }

    return dotNetWhereClause;
}

