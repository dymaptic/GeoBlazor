// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import promiseUtils = __esri.promiseUtils;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PromiseUtilsGenerated implements IPropertyWrapper {
    public component: promiseUtils;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: promiseUtils) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async createAbortError(): Promise<any> {
        return this.component.createAbortError();
    }

    async eachAlways(promises: any): Promise<any> {
        return await this.component.eachAlways(promises);
    }

    async isAbortError(error: any): Promise<any> {
        return this.component.isAbortError(error);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsPromiseUtilsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jspromiseUtils: any = {}


    let { default: PromiseUtilsWrapper } = await import('./promiseUtils');
    let promiseUtilsWrapper = new PromiseUtilsWrapper(jspromiseUtils);
    promiseUtilsWrapper.geoBlazorId = dotNetObject.id;
    promiseUtilsWrapper.viewId = viewId;
    promiseUtilsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(promiseUtilsWrapper);
    jsObjectRefs[dotNetObject.id] = promiseUtilsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jspromiseUtils;
    let { buildDotNetPromiseUtils } = await import('./promiseUtils');
    let dnInstantiatedObject = await buildDotNetPromiseUtils(jspromiseUtils);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PromiseUtils', e);
    }
    
    return jspromiseUtils;
}

export async function buildDotNetPromiseUtilsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPromiseUtils: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPromiseUtils.id = k;
                break;
            }
        }
    }

    return dotNetPromiseUtils;
}

