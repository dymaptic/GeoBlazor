// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, sanitize } from './arcGisJsInterop';
import { buildDotNetActionBaseProperties } from './actionBaseProperties';
export async function buildJsActionBasePropertiesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }
    
    switch (dotNetObject.type) {
        case 'any':
            let jsActionBaseProperties: any = {};

            if (hasValue(dotNetObject.actionBaseId)) {
                jsActionBaseProperties.id = dotNetObject.actionBaseId;
            }
            if (hasValue(dotNetObject.active)) {
                jsActionBaseProperties.active = dotNetObject.active;
            }
            if (hasValue(dotNetObject.className)) {
                jsActionBaseProperties.className = dotNetObject.className;
            }
            if (hasValue(dotNetObject.disabled)) {
                jsActionBaseProperties.disabled = dotNetObject.disabled;
            }
            if (hasValue(dotNetObject.icon)) {
                jsActionBaseProperties.icon = dotNetObject.icon;
            }
            if (hasValue(dotNetObject.title)) {
                jsActionBaseProperties.title = dotNetObject.title;
            }
            if (hasValue(dotNetObject.visible)) {
                jsActionBaseProperties.visible = dotNetObject.visible;
            }
    
            let jsObjectRef = DotNet.createJSObjectReference(jsActionBaseProperties);
            jsObjectRefs[dotNetObject.id] = jsObjectRef;
            arcGisObjectRefs[dotNetObject.id] = jsActionBaseProperties;
    
            return jsActionBaseProperties;

        default: 
            return sanitize(dotNetObject);
    }
}     

export async function buildDotNetActionBasePropertiesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    switch (jsObject.type) {
        case 'any': 
        let dotNetActionBaseProperties: any = {};
            if (hasValue(jsObject.id)) {
                dotNetActionBaseProperties.actionBaseId = jsObject.id;
            }
    
            if (hasValue(jsObject.active)) {
                dotNetActionBaseProperties.active = jsObject.active;
            }
    
            if (hasValue(jsObject.className)) {
                dotNetActionBaseProperties.className = jsObject.className;
            }
    
            if (hasValue(jsObject.disabled)) {
                dotNetActionBaseProperties.disabled = jsObject.disabled;
            }
    
            if (hasValue(jsObject.icon)) {
                dotNetActionBaseProperties.icon = jsObject.icon;
            }
    
            if (hasValue(jsObject.title)) {
                dotNetActionBaseProperties.title = jsObject.title;
            }
    
            if (hasValue(jsObject.type)) {
                dotNetActionBaseProperties.type = jsObject.type;
            }
    
            if (hasValue(jsObject.visible)) {
                dotNetActionBaseProperties.visible = jsObject.visible;
            }
    

            return dotNetActionBaseProperties;

        default: 
            return jsObject;
    }
}     

