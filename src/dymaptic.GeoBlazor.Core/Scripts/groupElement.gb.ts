// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import GroupElement from '@arcgis/core/form/elements/GroupElement';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetGroupElement } from './groupElement';

export async function buildJsGroupElementGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsGroupElement = new GroupElement();

    if (hasValue(dotNetObject.description)) {
        jsGroupElement.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.elements)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedElements } = dotNetObject.elements;
        jsGroupElement.elements = sanitizedElements;
    }
    if (hasValue(dotNetObject.initialState)) {
        jsGroupElement.initialState = dotNetObject.initialState;
    }
    if (hasValue(dotNetObject.label)) {
        jsGroupElement.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.visibilityExpression)) {
        jsGroupElement.visibilityExpression = dotNetObject.visibilityExpression;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsGroupElement);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsGroupElement;
    
    let dnInstantiatedObject = await buildDotNetGroupElement(jsGroupElement);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for GroupElement', e);
    }
    
    return jsGroupElement;
}

export async function buildDotNetGroupElementGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGroupElement: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.description)) {
        dotNetGroupElement.description = jsObject.description;
    }
    if (hasValue(jsObject.elements)) {
        dotNetGroupElement.elements = jsObject.elements;
    }
    if (hasValue(jsObject.initialState)) {
        dotNetGroupElement.initialState = jsObject.initialState;
    }
    if (hasValue(jsObject.label)) {
        dotNetGroupElement.label = jsObject.label;
    }
    if (hasValue(jsObject.type)) {
        dotNetGroupElement.type = jsObject.type;
    }
    if (hasValue(jsObject.visibilityExpression)) {
        dotNetGroupElement.visibilityExpression = jsObject.visibilityExpression;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetGroupElement.id = k;
                break;
            }
        }
    }

    return dotNetGroupElement;
}

