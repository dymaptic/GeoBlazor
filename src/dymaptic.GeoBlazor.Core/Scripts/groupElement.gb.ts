// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import GroupElement from '@arcgis/core/form/elements/GroupElement';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class GroupElementGenerated implements IPropertyWrapper {
    public component: GroupElement;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: GroupElement) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsGroupElementGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsGroupElement = new GroupElement();
    if (hasValue(dotNetObject.elements)) {
        jsGroupElement.elements = dotNetObject.formElement;
    }

    if (hasValue(dotNetObject.description)) {
        jsGroupElement.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.initialState)) {
        jsGroupElement.initialState = dotNetObject.initialState;
    }
    if (hasValue(dotNetObject.label)) {
        jsGroupElement.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.visibilityExpression)) {
        jsGroupElement.visibilityExpression = dotNetObject.visibilityExpression;
    }
    let { default: GroupElementWrapper } = await import('./groupElement');
    let groupElementWrapper = new GroupElementWrapper(jsGroupElement);
    groupElementWrapper.geoBlazorId = dotNetObject.id;
    groupElementWrapper.viewId = viewId;
    groupElementWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(groupElementWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = groupElementWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsGroupElement;
    
    return jsGroupElement;
}

export async function buildDotNetGroupElementGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGroupElement: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetGroupElement.elements = jsObject.elements;
        dotNetGroupElement.description = jsObject.description;
        dotNetGroupElement.initialState = jsObject.initialState;
        dotNetGroupElement.label = jsObject.label;
        dotNetGroupElement.type = jsObject.type;
        dotNetGroupElement.visibilityExpression = jsObject.visibilityExpression;

    return dotNetGroupElement;
}

