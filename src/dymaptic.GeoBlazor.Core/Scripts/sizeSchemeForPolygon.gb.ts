// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetSizeSchemeForPolygon } from './sizeSchemeForPolygon';
import SizeSchemeForPolygon = __esri.SizeSchemeForPolygon;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsSizeSchemeForPolygonGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSizeSchemeForPolygon: any = {}
    if (hasValue(dotNetObject.background)) {
        let { buildJsSizeSchemeForPolygonBackground } = await import('./sizeSchemeForPolygonBackground');
        jsSizeSchemeForPolygon.background = await buildJsSizeSchemeForPolygonBackground(dotNetObject.background, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.marker)) {
        let { buildJsSizeSchemeForPoint } = await import('./sizeSchemeForPoint');
        jsSizeSchemeForPolygon.marker = await buildJsSizeSchemeForPoint(dotNetObject.marker, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.opacity)) {
        jsSizeSchemeForPolygon.opacity = dotNetObject.opacity;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsSizeSchemeForPolygon);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSizeSchemeForPolygon;
    
    let dnInstantiatedObject = await buildDotNetSizeSchemeForPolygon(jsSizeSchemeForPolygon);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SizeSchemeForPolygon', e);
    }
    
    return jsSizeSchemeForPolygon;
}

export async function buildDotNetSizeSchemeForPolygonGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSizeSchemeForPolygon: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.background)) {
            let { buildDotNetSizeSchemeForPolygonBackground } = await import('./sizeSchemeForPolygonBackground');
            dotNetSizeSchemeForPolygon.background = await buildDotNetSizeSchemeForPolygonBackground(jsObject.background);
        }
        if (hasValue(jsObject.marker)) {
            let { buildDotNetSizeSchemeForPoint } = await import('./sizeSchemeForPoint');
            dotNetSizeSchemeForPolygon.marker = await buildDotNetSizeSchemeForPoint(jsObject.marker);
        }
        if (hasValue(jsObject.opacity)) {
            dotNetSizeSchemeForPolygon.opacity = jsObject.opacity;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSizeSchemeForPolygon.id = k;
                break;
            }
        }
    }

    return dotNetSizeSchemeForPolygon;
}

