// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetDisplayField } from './displayField';

export async function buildJsDisplayFieldGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsDisplayField: any = {};

    if (hasValue(dotNetObject.field)) {
        jsDisplayField.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.value)) {
        jsDisplayField.value = dotNetObject.value;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsDisplayField);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsDisplayField;
    
    return jsDisplayField;
}


export async function buildDotNetDisplayFieldGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDisplayField: any = {};
    
    if (hasValue(jsObject.field)) {
        dotNetDisplayField.field = jsObject.field;
    }
    
    if (hasValue(jsObject.value)) {
        dotNetDisplayField.value = jsObject.value;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetDisplayField.id = geoBlazorId;
    }

    return dotNetDisplayField;
}

