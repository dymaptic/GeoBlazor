import { buildDotNetAddressCandidate } from './addressCandidate';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import AddressCandidate from '@arcgis/core/rest/support/AddressCandidate';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsAddressCandidateGenerated(dotNetObject: any): Promise<any> {
    let jsAddressCandidate = new AddressCandidate();
    if (hasValue(dotNetObject.extent)) {
        let { buildJsExtent } = await import('./extent');
        jsAddressCandidate.extent = buildJsExtent(dotNetObject.extent) as any;
    }
    if (hasValue(dotNetObject.location)) {
        let { buildJsPoint } = await import('./point');
        jsAddressCandidate.location = buildJsPoint(dotNetObject.location) as any;
    }

    if (hasValue(dotNetObject.address)) {
        jsAddressCandidate.address = dotNetObject.address;
    }
    if (hasValue(dotNetObject.attributes)) {
        jsAddressCandidate.attributes = dotNetObject.attributes;
    }
    if (hasValue(dotNetObject.score)) {
        jsAddressCandidate.score = dotNetObject.score;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsAddressCandidate);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsAddressCandidate;
    
    let dnInstantiatedObject = buildDotNetAddressCandidate(jsAddressCandidate);
    
    try {
        dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for AddressCandidate', e);
    }
    
    return jsAddressCandidate;
}
