// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetExternalReferencePolygon } from './externalReferencePolygon';

export async function buildJsExternalReferencePolygonGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsExternalReferencePolygon: any = {};
    if (hasValue(dotNetObject.spatialReference)) {
        let { buildJsExternalReferenceSpatialReference } = await import('./externalReferenceSpatialReference');
        jsExternalReferencePolygon.spatialReference = await buildJsExternalReferenceSpatialReference(dotNetObject.spatialReference, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.curveRings)) {
        jsExternalReferencePolygon.curveRings = dotNetObject.curveRings;
    }
    if (hasValue(dotNetObject.hasM)) {
        jsExternalReferencePolygon.hasM = dotNetObject.hasM;
    }
    if (hasValue(dotNetObject.hasZ)) {
        jsExternalReferencePolygon.hasZ = dotNetObject.hasZ;
    }
    if (hasValue(dotNetObject.rings)) {
        jsExternalReferencePolygon.rings = dotNetObject.rings;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsExternalReferencePolygon);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsExternalReferencePolygon;
    
    let { buildDotNetExternalReferencePolygon } = await import('./externalReferencePolygon');
    let dnInstantiatedObject = await buildDotNetExternalReferencePolygon(jsExternalReferencePolygon);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type ExternalReferencePolygon detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ExternalReferencePolygon', e);
    }
    
    return jsExternalReferencePolygon;
}


export async function buildDotNetExternalReferencePolygonGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetExternalReferencePolygon: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.spatialReference)) {
        let { buildDotNetExternalReferenceSpatialReference } = await import('./externalReferenceSpatialReference');
        dotNetExternalReferencePolygon.spatialReference = await buildDotNetExternalReferenceSpatialReference(jsObject.spatialReference);
    }
    if (hasValue(jsObject.curveRings)) {
        dotNetExternalReferencePolygon.curveRings = jsObject.curveRings;
    }
    if (hasValue(jsObject.hasM)) {
        dotNetExternalReferencePolygon.hasM = jsObject.hasM;
    }
    if (hasValue(jsObject.hasZ)) {
        dotNetExternalReferencePolygon.hasZ = jsObject.hasZ;
    }
    if (hasValue(jsObject.rings)) {
        dotNetExternalReferencePolygon.rings = jsObject.rings;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetExternalReferencePolygon.id = geoBlazorId;
    }

    return dotNetExternalReferencePolygon;
}

