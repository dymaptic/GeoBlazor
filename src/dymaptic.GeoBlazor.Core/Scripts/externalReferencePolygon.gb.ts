// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetExternalReferencePolygon } from './externalReferencePolygon';

export async function buildJsExternalReferencePolygonGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsExternalReferencePolygon: any = {};
    if (hasValue(dotNetObject.spatialReference)) {
        let { buildJsExternalReferenceSpatialReference } = await import('./externalReferenceSpatialReference');
        jsExternalReferencePolygon.spatialReference = await buildJsExternalReferenceSpatialReference(dotNetObject.spatialReference, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.curveRings) && dotNetObject.curveRings.length > 0) {
        jsExternalReferencePolygon.curveRings = dotNetObject.curveRings;
    }
    if (hasValue(dotNetObject.hasM)) {
        jsExternalReferencePolygon.hasM = dotNetObject.hasM;
    }
    if (hasValue(dotNetObject.hasZ)) {
        jsExternalReferencePolygon.hasZ = dotNetObject.hasZ;
    }
    if (hasValue(dotNetObject.rings) && dotNetObject.rings.length > 0) {
        jsExternalReferencePolygon.rings = dotNetObject.rings;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsExternalReferencePolygon);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsExternalReferencePolygon;
    
    return jsExternalReferencePolygon;
}


export async function buildDotNetExternalReferencePolygonGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetExternalReferencePolygon: any = {};
    
    if (hasValue(jsObject.spatialReference)) {
        let { buildDotNetExternalReferenceSpatialReference } = await import('./externalReferenceSpatialReference');
        dotNetExternalReferencePolygon.spatialReference = await buildDotNetExternalReferenceSpatialReference(jsObject.spatialReference, layerId, viewId);
    }
    
    if (hasValue(jsObject.curveRings)) {
        dotNetExternalReferencePolygon.curveRings = jsObject.curveRings;
    }
    
    if (hasValue(jsObject.hasM)) {
        dotNetExternalReferencePolygon.hasM = jsObject.hasM;
    }
    
    if (hasValue(jsObject.hasZ)) {
        dotNetExternalReferencePolygon.hasZ = jsObject.hasZ;
    }
    
    if (hasValue(jsObject.rings)) {
        dotNetExternalReferencePolygon.rings = jsObject.rings;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetExternalReferencePolygon.id = geoBlazorId;
    }

    return dotNetExternalReferencePolygon;
}

