// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetRasterUniqueValuesResult } from './rasterUniqueValuesResult';

export async function buildJsRasterUniqueValuesResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsRasterUniqueValuesResult: any = {}
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsUniqueValueRenderer } = await import('./uniqueValueRenderer');
        jsRasterUniqueValuesResult.renderer = await buildJsUniqueValueRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.classFieldName)) {
        jsRasterUniqueValuesResult.classFieldName = dotNetObject.classFieldName;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsRasterUniqueValuesResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRasterUniqueValuesResult;
    
    let dnInstantiatedObject = await buildDotNetRasterUniqueValuesResult(jsRasterUniqueValuesResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RasterUniqueValuesResult', e);
    }
    
    return jsRasterUniqueValuesResult;
}

export async function buildDotNetRasterUniqueValuesResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRasterUniqueValuesResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.renderer)) {
            let { buildDotNetUniqueValueRenderer } = await import('./uniqueValueRenderer');
            dotNetRasterUniqueValuesResult.renderer = await buildDotNetUniqueValueRenderer(jsObject.renderer);
        }
        if (hasValue(jsObject.classFieldName)) {
            dotNetRasterUniqueValuesResult.classFieldName = jsObject.classFieldName;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRasterUniqueValuesResult.id = k;
                break;
            }
        }
    }

    return dotNetRasterUniqueValuesResult;
}

