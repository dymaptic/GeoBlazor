// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetWeatherVisibleElements } from './weatherVisibleElements';

export async function buildJsWeatherVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsWeatherVisibleElements: any = {};

    if (hasValue(dotNetObject.header)) {
        jsWeatherVisibleElements.header = dotNetObject.header;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsWeatherVisibleElements);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsWeatherVisibleElements;
    
    return jsWeatherVisibleElements;
}


export async function buildDotNetWeatherVisibleElementsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWeatherVisibleElements: any = {};
    
    if (hasValue(jsObject.header)) {
        dotNetWeatherVisibleElements.header = jsObject.header;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetWeatherVisibleElements.id = geoBlazorId;
    }

    return dotNetWeatherVisibleElements;
}

