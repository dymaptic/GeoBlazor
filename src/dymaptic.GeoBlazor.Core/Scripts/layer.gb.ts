// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import Layer from '@arcgis/core/layers/Layer';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class LayerGenerated implements IPropertyWrapper {
    public layer: Layer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: Layer) {
        this.layer = layer;
        // set all properties from layer
        for (let prop in layer) {
            if (layer.hasOwnProperty(prop)) {
                this[prop] = layer[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    async createLayerView(view: any,
        options: any): Promise<any> {
        let result = await this.layer.createLayerView(view,
            options);
        let { buildDotNetLayerView } = await import('./layerView');
        return buildDotNetLayerView(result);
    }

    async fetchAttributionData(): Promise<any> {
        return await this.layer.fetchAttributionData();
    }

    // region properties
    
    async getVisibilityTimeExtent(layerId: string | null, viewId: string | null): Promise<any> {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return await buildDotNetTimeExtent(this.layer.visibilityTimeExtent, layerId, viewId);
    }
    async setVisibilityTimeExtent(value: any, layerId: string | null, viewId: string | null): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.visibilityTimeExtent = await buildJsTimeExtent(value, layerId, viewId);
    }
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}

export async function buildJsLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let { default: Layer } = await import('@arcgis/core/layers/Layer');
    let jsLayer = new Layer();
    if (hasValue(dotNetObject.fullExtent)) {
        let { buildJsExtent } = await import('./jsBuilder');
        jsLayer.fullExtent = buildJsExtent(dotNetObject.fullExtent, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.visibilityTimeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        jsLayer.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.arcGISLayerId)) {
        jsLayer.id = dotNetObject.arcGISLayerId;
    }
    if (hasValue(dotNetObject.listMode)) {
        jsLayer.listMode = dotNetObject.listMode;
    }
    if (hasValue(dotNetObject.opacity)) {
        jsLayer.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.persistenceEnabled)) {
        jsLayer.persistenceEnabled = dotNetObject.persistenceEnabled;
    }
    if (hasValue(dotNetObject.title)) {
        jsLayer.title = dotNetObject.title;
    }
    let { default: LayerWrapper } = await import('./layer');
    let layerWrapper = new LayerWrapper(jsLayer);
    layerWrapper.geoBlazorId = dotNetObject.id;
    layerWrapper.viewId = viewId;
    layerWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(layerWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = layerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsLayer;
    
    return jsLayer;
}

export async function buildDotNetLayerGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLayer: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.visibilityTimeExtent)) {
            let { buildDotNetTimeExtent } = await import('./dotNetBuilder');
            dotNetLayer.visibilityTimeExtent = await buildDotNetTimeExtent(jsObject.visibilityTimeExtent, layerId, viewId);
        }
        dotNetLayer.arcGISLayerId = jsObject.id;
        dotNetLayer.fullExtent = jsObject.fullExtent;
        dotNetLayer.listMode = jsObject.listMode;
        dotNetLayer.loaded = jsObject.loaded;
        dotNetLayer.opacity = jsObject.opacity;
        dotNetLayer.persistenceEnabled = jsObject.persistenceEnabled;
        dotNetLayer.title = jsObject.title;
        dotNetLayer.type = jsObject.type;
    return dotNetLayer;
}

