// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import FixedBoundariesBinParameters from '@arcgis/core/rest/support/FixedBoundariesBinParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetFixedBoundariesBinParameters } from './fixedBoundariesBinParameters';

export async function buildJsFixedBoundariesBinParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.splitBy)) {
        let { buildJsAttributeBinsGrouping } = await import('./attributeBinsGrouping');
        properties.splitBy = await buildJsAttributeBinsGrouping(dotNetObject.splitBy, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.stackBy)) {
        let { buildJsAttributeBinsGrouping } = await import('./attributeBinsGrouping');
        properties.stackBy = await buildJsAttributeBinsGrouping(dotNetObject.stackBy, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.boundaries) && dotNetObject.boundaries.length > 0) {
        properties.boundaries = dotNetObject.boundaries;
    }
    if (hasValue(dotNetObject.expression)) {
        properties.expression = dotNetObject.expression;
    }
    if (hasValue(dotNetObject.expressionValueType)) {
        properties.expressionValueType = dotNetObject.expressionValueType;
    }
    if (hasValue(dotNetObject.field)) {
        properties.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.firstDayOfWeek)) {
        properties.firstDayOfWeek = dotNetObject.firstDayOfWeek;
    }
    if (hasValue(dotNetObject.hideUpperBound)) {
        properties.hideUpperBound = dotNetObject.hideUpperBound;
    }
    let jsFixedBoundariesBinParameters = new FixedBoundariesBinParameters(properties);
    
    jsObjectRefs[dotNetObject.id] = jsFixedBoundariesBinParameters;
    arcGisObjectRefs[dotNetObject.id] = jsFixedBoundariesBinParameters;
    
    return jsFixedBoundariesBinParameters;
}


export async function buildDotNetFixedBoundariesBinParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFixedBoundariesBinParameters: any = {};
    
    if (hasValue(jsObject.splitBy)) {
        let { buildDotNetAttributeBinsGrouping } = await import('./attributeBinsGrouping');
        dotNetFixedBoundariesBinParameters.splitBy = await buildDotNetAttributeBinsGrouping(jsObject.splitBy);
    }
    
    if (hasValue(jsObject.stackBy)) {
        let { buildDotNetAttributeBinsGrouping } = await import('./attributeBinsGrouping');
        dotNetFixedBoundariesBinParameters.stackBy = await buildDotNetAttributeBinsGrouping(jsObject.stackBy);
    }
    
    if (hasValue(jsObject.boundaries)) {
        dotNetFixedBoundariesBinParameters.boundaries = jsObject.boundaries;
    }
    
    if (hasValue(jsObject.expression)) {
        dotNetFixedBoundariesBinParameters.expression = jsObject.expression;
    }
    
    if (hasValue(jsObject.expressionValueType)) {
        dotNetFixedBoundariesBinParameters.expressionValueType = removeCircularReferences(jsObject.expressionValueType);
    }
    
    if (hasValue(jsObject.field)) {
        dotNetFixedBoundariesBinParameters.field = jsObject.field;
    }
    
    if (hasValue(jsObject.firstDayOfWeek)) {
        dotNetFixedBoundariesBinParameters.firstDayOfWeek = jsObject.firstDayOfWeek;
    }
    
    if (hasValue(jsObject.hideUpperBound)) {
        dotNetFixedBoundariesBinParameters.hideUpperBound = jsObject.hideUpperBound;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetFixedBoundariesBinParameters.type = removeCircularReferences(jsObject.type);
    }
    

    return dotNetFixedBoundariesBinParameters;
}

