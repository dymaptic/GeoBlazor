// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import FeatureSnappingLayerSource from '@arcgis/core/views/interactive/snapping/FeatureSnappingLayerSource';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';

export async function buildJsFeatureSnappingLayerSourceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.enabled)) {
        properties.enabled = dotNetObject.enabled;
    }
    let jsFeatureSnappingLayerSource = new FeatureSnappingLayerSource(properties);
    
    jsObjectRefs[dotNetObject.id] = jsFeatureSnappingLayerSource;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureSnappingLayerSource;
    
    return jsFeatureSnappingLayerSource;
}


export async function buildDotNetFeatureSnappingLayerSourceGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureSnappingLayerSource: any = {};
    
    if (hasValue(jsObject.enabled)) {
        dotNetFeatureSnappingLayerSource.enabled = jsObject.enabled;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetFeatureSnappingLayerSource.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetFeatureSnappingLayerSource.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetFeatureSnappingLayerSource.id)) {
        jsObjectRefs[dotNetFeatureSnappingLayerSource.id] ??= jsObject;
        arcGisObjectRefs[dotNetFeatureSnappingLayerSource.id] ??= jsObject;
    }

    return dotNetFeatureSnappingLayerSource;
}

