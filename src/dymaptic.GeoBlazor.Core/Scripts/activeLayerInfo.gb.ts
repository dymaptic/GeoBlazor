// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ActiveLayerInfo from '@arcgis/core/widgets/Legend/support/ActiveLayerInfo';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetActiveLayerInfo } from './activeLayerInfo';

export async function buildJsActiveLayerInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        properties.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.layerView)) {
        let { buildJsLayerView } = await import('./layerView');
        properties.layerView = await buildJsLayerView(dotNetObject.layerView, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.legendElements)) {
        let { buildJsILegendElement } = await import('./iLegendElement');
        properties.legendElements = dotNetObject.legendElements.map(i => buildJsILegendElement(i)) as any;
    }

    if (hasValue(dotNetObject.hideLayersNotInCurrentView)) {
        properties.hideLayersNotInCurrentView = dotNetObject.hideLayersNotInCurrentView;
    }
    if (hasValue(dotNetObject.isScaleDriven)) {
        properties.isScaleDriven = dotNetObject.isScaleDriven;
    }
    if (hasValue(dotNetObject.ready)) {
        properties.ready = dotNetObject.ready;
    }
    if (hasValue(dotNetObject.respectLayerVisibility)) {
        properties.respectLayerVisibility = dotNetObject.respectLayerVisibility;
    }
    if (hasValue(dotNetObject.scale)) {
        properties.scale = dotNetObject.scale;
    }
    if (hasValue(dotNetObject.sublayerIds)) {
        properties.sublayerIds = dotNetObject.sublayerIds;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.version)) {
        properties.version = dotNetObject.version;
    }
    let jsActiveLayerInfo = new ActiveLayerInfo(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsActiveLayerInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsActiveLayerInfo;
    
    let { buildDotNetActiveLayerInfo } = await import('./activeLayerInfo');
    let dnInstantiatedObject = await buildDotNetActiveLayerInfo(jsActiveLayerInfo);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type ActiveLayerInfo detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ActiveLayerInfo', e);
    }
    
    return jsActiveLayerInfo;
}


export async function buildDotNetActiveLayerInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetActiveLayerInfo: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.layerView)) {
        let { buildDotNetLayerView } = await import('./layerView');
        dotNetActiveLayerInfo.layerView = await buildDotNetLayerView(jsObject.layerView);
    }
    if (hasValue(jsObject.legendElements)) {
        let { buildDotNetILegendElement } = await import('./iLegendElement');
        dotNetActiveLayerInfo.legendElements = jsObject.legendElements.map(i => buildDotNetILegendElement(i));
    }
    if (hasValue(jsObject.hideLayersNotInCurrentView)) {
        dotNetActiveLayerInfo.hideLayersNotInCurrentView = jsObject.hideLayersNotInCurrentView;
    }
    if (hasValue(jsObject.isScaleDriven)) {
        dotNetActiveLayerInfo.isScaleDriven = jsObject.isScaleDriven;
    }
    if (hasValue(jsObject.opacity)) {
        dotNetActiveLayerInfo.opacity = jsObject.opacity;
    }
    if (hasValue(jsObject.ready)) {
        dotNetActiveLayerInfo.ready = jsObject.ready;
    }
    if (hasValue(jsObject.respectLayerVisibility)) {
        dotNetActiveLayerInfo.respectLayerVisibility = jsObject.respectLayerVisibility;
    }
    if (hasValue(jsObject.scale)) {
        dotNetActiveLayerInfo.scale = jsObject.scale;
    }
    if (hasValue(jsObject.sublayerIds)) {
        dotNetActiveLayerInfo.sublayerIds = jsObject.sublayerIds;
    }
    if (hasValue(jsObject.title)) {
        dotNetActiveLayerInfo.title = jsObject.title;
    }
    if (hasValue(jsObject.version)) {
        dotNetActiveLayerInfo.version = jsObject.version;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetActiveLayerInfo.id = k;
                break;
            }
        }
    }

    return dotNetActiveLayerInfo;
}

