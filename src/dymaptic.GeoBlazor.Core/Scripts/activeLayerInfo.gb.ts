// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ActiveLayerInfo from '@arcgis/core/widgets/Legend/support/ActiveLayerInfo';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';

export async function buildJsActiveLayerInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.layerId) && arcGisObjectRefs.hasOwnProperty(dotNetObject.layerId)) {
        properties.layer = arcGisObjectRefs[dotNetObject.layerId!];
    } else if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        properties.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId);
    }
    if (hasValue(dotNetObject.layerView)) {
        let { buildJsLayerView } = await import('./layerView');
        properties.layerView = await buildJsLayerView(dotNetObject.layerView, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.legendElements) && dotNetObject.legendElements.length > 0) {
        let { buildJsILegendElement } = await import('./iLegendElement');
        properties.legendElements = await Promise.all(dotNetObject.legendElements.map(async i => await buildJsILegendElement(i))) as any;
    }

    if (hasValue(dotNetObject.hideLayersNotInCurrentView)) {
        properties.hideLayersNotInCurrentView = dotNetObject.hideLayersNotInCurrentView;
    }
    if (hasValue(dotNetObject.respectLayerVisibility)) {
        properties.respectLayerVisibility = dotNetObject.respectLayerVisibility;
    }
    if (hasValue(dotNetObject.sublayerIds) && dotNetObject.sublayerIds.length > 0) {
        properties.sublayerIds = dotNetObject.sublayerIds;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    let jsActiveLayerInfo = new ActiveLayerInfo(properties);
    
    jsObjectRefs[dotNetObject.id] = jsActiveLayerInfo;
    arcGisObjectRefs[dotNetObject.id] = jsActiveLayerInfo;
    
    return jsActiveLayerInfo;
}


export async function buildDotNetActiveLayerInfoGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetActiveLayerInfo: any = {};
    
    if (hasValue(jsObject.layerView)) {
        let { buildDotNetLayerView } = await import('./layerView');
        dotNetActiveLayerInfo.layerView = await buildDotNetLayerView(jsObject.layerView, viewId);
    }
    
    if (hasValue(jsObject.legendElements)) {
        let { buildDotNetILegendElement } = await import('./iLegendElement');
        dotNetActiveLayerInfo.legendElements = await Promise.all(jsObject.legendElements.map(async i => await buildDotNetILegendElement(i)));
    }
    
    if (hasValue(jsObject.hideLayersNotInCurrentView)) {
        dotNetActiveLayerInfo.hideLayersNotInCurrentView = jsObject.hideLayersNotInCurrentView;
    }
    
    if (hasValue(jsObject.isScaleDriven)) {
        dotNetActiveLayerInfo.isScaleDriven = jsObject.isScaleDriven;
    }
    
    if (hasValue(jsObject.opacity)) {
        dotNetActiveLayerInfo.opacity = jsObject.opacity;
    }
    
    if (hasValue(jsObject.ready)) {
        dotNetActiveLayerInfo.ready = jsObject.ready;
    }
    
    if (hasValue(jsObject.respectLayerVisibility)) {
        dotNetActiveLayerInfo.respectLayerVisibility = jsObject.respectLayerVisibility;
    }
    
    if (hasValue(jsObject.scale)) {
        dotNetActiveLayerInfo.scale = jsObject.scale;
    }
    
    if (hasValue(jsObject.sublayerIds)) {
        dotNetActiveLayerInfo.sublayerIds = jsObject.sublayerIds;
    }
    
    if (hasValue(jsObject.title)) {
        dotNetActiveLayerInfo.title = jsObject.title;
    }
    
    if (hasValue(jsObject.version)) {
        dotNetActiveLayerInfo.version = jsObject.version;
    }
    

    return dotNetActiveLayerInfo;
}

