// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import FoggyWeather from '@arcgis/core/views/3d/environment/FoggyWeather';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetFoggyWeather } from './foggyWeather';

export async function buildJsFoggyWeatherGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.fogStrength)) {
        properties.fogStrength = dotNetObject.fogStrength;
    }
    let jsFoggyWeather = new FoggyWeather(properties);
    
    jsObjectRefs[dotNetObject.id] = jsFoggyWeather;
    arcGisObjectRefs[dotNetObject.id] = jsFoggyWeather;
    
    return jsFoggyWeather;
}


export async function buildDotNetFoggyWeatherGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFoggyWeather: any = {};
    
    if (hasValue(jsObject.fogStrength)) {
        dotNetFoggyWeather.fogStrength = jsObject.fogStrength;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetFoggyWeather.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetFoggyWeather.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetFoggyWeather.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetFoggyWeather.id)) {
        jsObjectRefs[dotNetFoggyWeather.id] ??= jsObject;
        arcGisObjectRefs[dotNetFoggyWeather.id] ??= jsObject;
    }

    return dotNetFoggyWeather;
}

