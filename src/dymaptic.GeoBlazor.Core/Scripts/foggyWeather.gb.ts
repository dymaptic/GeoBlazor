// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import FoggyWeather from '@arcgis/core/views/3d/environment/FoggyWeather';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetFoggyWeather } from './foggyWeather';

export async function buildJsFoggyWeatherGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.fogStrength)) {
        properties.fogStrength = dotNetObject.fogStrength;
    }
    let jsFoggyWeather = new FoggyWeather(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFoggyWeather);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFoggyWeather;
    
    let { buildDotNetFoggyWeather } = await import('./foggyWeather');
    let dnInstantiatedObject = await buildDotNetFoggyWeather(jsFoggyWeather, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type FoggyWeather detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FoggyWeather', e);
    }
    
    return jsFoggyWeather;
}


export async function buildDotNetFoggyWeatherGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsFoggyWeather } = await import('./foggyWeather');
        jsComponentRef = await buildJsFoggyWeather(jsObject, layerId, viewId);
    }
    
    let dotNetFoggyWeather: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.fogStrength)) {
        dotNetFoggyWeather.fogStrength = jsObject.fogStrength;
    }
    if (hasValue(jsObject.type)) {
        dotNetFoggyWeather.type = jsObject.type;
    }


    if (hasValue(geoBlazorId)) {
        dotNetFoggyWeather.id = geoBlazorId;
    }

    return dotNetFoggyWeather;
}

