// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetRasterColormapByNameParameters } from './rasterColormapByNameParameters';

export async function buildJsRasterColormapByNameParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsRasterColormapByNameParameters: any = {};
    if (hasValue(dotNetObject.colorRampName)) {
        let { buildJsColorRampName } = await import('./colorRampName');
        jsRasterColormapByNameParameters.colorRampName = await buildJsColorRampName(dotNetObject.colorRampName, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.outputPixelType)) {
        jsRasterColormapByNameParameters.outputPixelType = dotNetObject.outputPixelType;
    }
    if (hasValue(dotNetObject.raster)) {
        jsRasterColormapByNameParameters.raster = dotNetObject.raster;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsRasterColormapByNameParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRasterColormapByNameParameters;
    
    return jsRasterColormapByNameParameters;
}


export async function buildDotNetRasterColormapByNameParametersGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsRasterColormapByNameParameters } = await import('./rasterColormapByNameParameters');
        jsComponentRef = await buildJsRasterColormapByNameParameters(jsObject, layerId, viewId);
    }
    
    let dotNetRasterColormapByNameParameters: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.colorRampName)) {
        let { buildDotNetColorRampName } = await import('./colorRampName');
        dotNetRasterColormapByNameParameters.colorRampName = await buildDotNetColorRampName(jsObject.colorRampName, layerId, viewId);
    }
    if (hasValue(jsObject.outputPixelType)) {
        dotNetRasterColormapByNameParameters.outputPixelType = jsObject.outputPixelType;
    }
    if (hasValue(jsObject.raster)) {
        dotNetRasterColormapByNameParameters.raster = jsObject.raster;
    }

    return dotNetRasterColormapByNameParameters;
}

