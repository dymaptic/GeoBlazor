// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetVersionInfoJSON } from './versionInfoJSON';

export async function buildJsVersionInfoJSONGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsVersionInfoJSON: any = {};
    if (hasValue(dotNetObject.versionIdentifier)) {
        let { buildJsVersionInfoJSONVersionIdentifier } = await import('./versionInfoJSONVersionIdentifier');
        jsVersionInfoJSON.versionIdentifier = await buildJsVersionInfoJSONVersionIdentifier(dotNetObject.versionIdentifier, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.access)) {
        jsVersionInfoJSON.access = dotNetObject.access;
    }
    if (hasValue(dotNetObject.commonAncestorDate)) {
        jsVersionInfoJSON.commonAncestorDate = dotNetObject.commonAncestorDate;
    }
    if (hasValue(dotNetObject.creationDate)) {
        jsVersionInfoJSON.creationDate = dotNetObject.creationDate;
    }
    if (hasValue(dotNetObject.description)) {
        jsVersionInfoJSON.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.evaluationDate)) {
        jsVersionInfoJSON.evaluationDate = dotNetObject.evaluationDate;
    }
    if (hasValue(dotNetObject.modifiedDate)) {
        jsVersionInfoJSON.modifiedDate = dotNetObject.modifiedDate;
    }
    if (hasValue(dotNetObject.previousAncestorDate)) {
        jsVersionInfoJSON.previousAncestorDate = dotNetObject.previousAncestorDate;
    }
    if (hasValue(dotNetObject.reconcileDate)) {
        jsVersionInfoJSON.reconcileDate = dotNetObject.reconcileDate;
    }
    if (hasValue(dotNetObject.versionId)) {
        jsVersionInfoJSON.versionId = dotNetObject.versionId;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsVersionInfoJSON);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsVersionInfoJSON;
    
    return jsVersionInfoJSON;
}


export async function buildDotNetVersionInfoJSONGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVersionInfoJSON: any = {};
    
    if (hasValue(jsObject.versionIdentifier)) {
        let { buildDotNetVersionInfoJSONVersionIdentifier } = await import('./versionInfoJSONVersionIdentifier');
        dotNetVersionInfoJSON.versionIdentifier = await buildDotNetVersionInfoJSONVersionIdentifier(jsObject.versionIdentifier, layerId, viewId);
    }
    
    if (hasValue(jsObject.access)) {
        dotNetVersionInfoJSON.access = jsObject.access;
    }
    
    if (hasValue(jsObject.commonAncestorDate)) {
        dotNetVersionInfoJSON.commonAncestorDate = jsObject.commonAncestorDate;
    }
    
    if (hasValue(jsObject.creationDate)) {
        dotNetVersionInfoJSON.creationDate = jsObject.creationDate;
    }
    
    if (hasValue(jsObject.description)) {
        dotNetVersionInfoJSON.description = jsObject.description;
    }
    
    if (hasValue(jsObject.evaluationDate)) {
        dotNetVersionInfoJSON.evaluationDate = jsObject.evaluationDate;
    }
    
    if (hasValue(jsObject.modifiedDate)) {
        dotNetVersionInfoJSON.modifiedDate = jsObject.modifiedDate;
    }
    
    if (hasValue(jsObject.previousAncestorDate)) {
        dotNetVersionInfoJSON.previousAncestorDate = jsObject.previousAncestorDate;
    }
    
    if (hasValue(jsObject.reconcileDate)) {
        dotNetVersionInfoJSON.reconcileDate = jsObject.reconcileDate;
    }
    
    if (hasValue(jsObject.versionId)) {
        dotNetVersionInfoJSON.versionId = jsObject.versionId;
    }
    

    return dotNetVersionInfoJSON;
}

