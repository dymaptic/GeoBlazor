// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetMapViewHitTestOptions } from './mapViewHitTestOptions';

export async function buildJsMapViewHitTestOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsMapViewHitTestOptions: any = {};
    if (hasValue(dotNetObject.exclude)) {
        let { buildJsIHitTestItem } = await import('./iHitTestItem');
        jsMapViewHitTestOptions.exclude = dotNetObject.exclude.map(i => buildJsIHitTestItem(i)) as any;
    }
    if (hasValue(dotNetObject.include)) {
        let { buildJsIHitTestItem } = await import('./iHitTestItem');
        jsMapViewHitTestOptions.include = dotNetObject.include.map(i => buildJsIHitTestItem(i)) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsMapViewHitTestOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsMapViewHitTestOptions;
    
    return jsMapViewHitTestOptions;
}


export async function buildDotNetMapViewHitTestOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMapViewHitTestOptions: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.exclude)) {
        let { buildDotNetIHitTestItem } = await import('./iHitTestItem');
        dotNetMapViewHitTestOptions.exclude = jsObject.exclude.map(i => buildDotNetIHitTestItem(i));
    }
    if (hasValue(jsObject.include)) {
        let { buildDotNetIHitTestItem } = await import('./iHitTestItem');
        dotNetMapViewHitTestOptions.include = jsObject.include.map(i => buildDotNetIHitTestItem(i));
    }

    return dotNetMapViewHitTestOptions;
}

