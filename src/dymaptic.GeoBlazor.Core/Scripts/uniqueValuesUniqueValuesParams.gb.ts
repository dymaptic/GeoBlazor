// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetUniqueValuesUniqueValuesParams } from './uniqueValuesUniqueValuesParams';
import uniqueValuesUniqueValuesParams = __esri.uniqueValuesUniqueValuesParams;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsUniqueValuesUniqueValuesParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsuniqueValuesUniqueValuesParams: any = {}
    if (hasValue(dotNetObject.features)) {
        let { buildJsGraphic } = await import('./graphic');
        jsuniqueValuesUniqueValuesParams.features = dotNetObject.features.map(i => buildJsGraphic(i)) as any;
    }
    if (hasValue(dotNetObject.filter)) {
        let { buildJsFeatureFilter } = await import('./featureFilter');
        jsuniqueValuesUniqueValuesParams.filter = await buildJsFeatureFilter(dotNetObject.filter, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsuniqueValuesUniqueValuesParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.field)) {
        jsuniqueValuesUniqueValuesParams.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.forBinning)) {
        jsuniqueValuesUniqueValuesParams.forBinning = dotNetObject.forBinning;
    }
    if (hasValue(dotNetObject.returnAllCodedValues)) {
        jsuniqueValuesUniqueValuesParams.returnAllCodedValues = dotNetObject.returnAllCodedValues;
    }
    if (hasValue(dotNetObject.signal)) {
        jsuniqueValuesUniqueValuesParams.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.sqlExpression)) {
        jsuniqueValuesUniqueValuesParams.sqlExpression = dotNetObject.sqlExpression;
    }
    if (hasValue(dotNetObject.sqlWhere)) {
        jsuniqueValuesUniqueValuesParams.sqlWhere = dotNetObject.sqlWhere;
    }
    if (hasValue(dotNetObject.useFeaturesInView)) {
        jsuniqueValuesUniqueValuesParams.useFeaturesInView = dotNetObject.useFeaturesInView;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        jsuniqueValuesUniqueValuesParams.valueExpression = dotNetObject.valueExpression;
    }
    if (hasValue(dotNetObject.view)) {
        jsuniqueValuesUniqueValuesParams.view = dotNetObject.view;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsuniqueValuesUniqueValuesParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsuniqueValuesUniqueValuesParams;
    
    let dnInstantiatedObject = await buildDotNetUniqueValuesUniqueValuesParams(jsuniqueValuesUniqueValuesParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for UniqueValuesUniqueValuesParams', e);
    }
    
    return jsuniqueValuesUniqueValuesParams;
}

export async function buildDotNetUniqueValuesUniqueValuesParamsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUniqueValuesUniqueValuesParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.features)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetUniqueValuesUniqueValuesParams.features = jsObject.features.map(i => buildDotNetGraphic(i, layerId, viewId));
        }
        if (hasValue(jsObject.filter)) {
            let { buildDotNetFeatureFilter } = await import('./featureFilter');
            dotNetUniqueValuesUniqueValuesParams.filter = await buildDotNetFeatureFilter(jsObject.filter);
        }
        if (hasValue(jsObject.field)) {
            dotNetUniqueValuesUniqueValuesParams.field = jsObject.field;
        }
        if (hasValue(jsObject.forBinning)) {
            dotNetUniqueValuesUniqueValuesParams.forBinning = jsObject.forBinning;
        }
        if (hasValue(jsObject.returnAllCodedValues)) {
            dotNetUniqueValuesUniqueValuesParams.returnAllCodedValues = jsObject.returnAllCodedValues;
        }
        if (hasValue(jsObject.signal)) {
            dotNetUniqueValuesUniqueValuesParams.signal = jsObject.signal;
        }
        if (hasValue(jsObject.sqlExpression)) {
            dotNetUniqueValuesUniqueValuesParams.sqlExpression = jsObject.sqlExpression;
        }
        if (hasValue(jsObject.sqlWhere)) {
            dotNetUniqueValuesUniqueValuesParams.sqlWhere = jsObject.sqlWhere;
        }
        if (hasValue(jsObject.useFeaturesInView)) {
            dotNetUniqueValuesUniqueValuesParams.useFeaturesInView = jsObject.useFeaturesInView;
        }
        if (hasValue(jsObject.valueExpression)) {
            dotNetUniqueValuesUniqueValuesParams.valueExpression = jsObject.valueExpression;
        }
        if (hasValue(jsObject.view)) {
            dotNetUniqueValuesUniqueValuesParams.view = jsObject.view;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetUniqueValuesUniqueValuesParams.id = k;
                break;
            }
        }
    }

    return dotNetUniqueValuesUniqueValuesParams;
}

