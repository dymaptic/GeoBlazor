// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetGraphicHit } from './graphicHit';

export async function buildJsGraphicHitGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsGraphicHit: any = {};
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsGraphicHit.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.graphic)) {
        const { id, dotNetComponentReference, ...sanitizedGraphic } = dotNetObject.graphic;
        jsGraphicHit.graphic = sanitizedGraphic;
    }
    if (hasValue(dotNetObject.mapPoint)) {
        const { id, dotNetComponentReference, ...sanitizedMapPoint } = dotNetObject.mapPoint;
        jsGraphicHit.mapPoint = sanitizedMapPoint;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsGraphicHit);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsGraphicHit;
    
    let { buildDotNetGraphicHit } = await import('./graphicHit');
    let dnInstantiatedObject = await buildDotNetGraphicHit(jsGraphicHit, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type GraphicHit detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for GraphicHit', e);
    }
    
    return jsGraphicHit;
}


export async function buildDotNetGraphicHitGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGraphicHit: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.graphic)) {
        dotNetGraphicHit.graphic = jsObject.graphic;
    }
    if (hasValue(jsObject.mapPoint)) {
        dotNetGraphicHit.mapPoint = jsObject.mapPoint;
    }
    if (hasValue(jsObject.type)) {
        dotNetGraphicHit.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetGraphicHit.id = k;
                break;
            }
        }
    }

    return dotNetGraphicHit;
}

