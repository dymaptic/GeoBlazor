// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetElevationProfileVisibleElements } from './elevationProfileVisibleElements';

export async function buildJsElevationProfileVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsElevationProfileVisibleElements: any = {};

    if (hasValue(dotNetObject.chart)) {
        jsElevationProfileVisibleElements.chart = dotNetObject.chart;
    }
    if (hasValue(dotNetObject.clearButton)) {
        jsElevationProfileVisibleElements.clearButton = dotNetObject.clearButton;
    }
    if (hasValue(dotNetObject.legend)) {
        jsElevationProfileVisibleElements.legend = dotNetObject.legend;
    }
    if (hasValue(dotNetObject.selectButton)) {
        jsElevationProfileVisibleElements.selectButton = dotNetObject.selectButton;
    }
    if (hasValue(dotNetObject.settingsButton)) {
        jsElevationProfileVisibleElements.settingsButton = dotNetObject.settingsButton;
    }
    if (hasValue(dotNetObject.sketchButton)) {
        jsElevationProfileVisibleElements.sketchButton = dotNetObject.sketchButton;
    }
    if (hasValue(dotNetObject.uniformChartScalingToggle)) {
        jsElevationProfileVisibleElements.uniformChartScalingToggle = dotNetObject.uniformChartScalingToggle;
    }
    if (hasValue(dotNetObject.unitSelector)) {
        jsElevationProfileVisibleElements.unitSelector = dotNetObject.unitSelector;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsElevationProfileVisibleElements);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsElevationProfileVisibleElements;
    
    let { buildDotNetElevationProfileVisibleElements } = await import('./elevationProfileVisibleElements');
    let dnInstantiatedObject = await buildDotNetElevationProfileVisibleElements(jsElevationProfileVisibleElements);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type ElevationProfileVisibleElements detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ElevationProfileVisibleElements', e);
    }
    
    return jsElevationProfileVisibleElements;
}


export async function buildDotNetElevationProfileVisibleElementsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetElevationProfileVisibleElements: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.chart)) {
        dotNetElevationProfileVisibleElements.chart = jsObject.chart;
    }
    if (hasValue(jsObject.clearButton)) {
        dotNetElevationProfileVisibleElements.clearButton = jsObject.clearButton;
    }
    if (hasValue(jsObject.legend)) {
        dotNetElevationProfileVisibleElements.legend = jsObject.legend;
    }
    if (hasValue(jsObject.selectButton)) {
        dotNetElevationProfileVisibleElements.selectButton = jsObject.selectButton;
    }
    if (hasValue(jsObject.settingsButton)) {
        dotNetElevationProfileVisibleElements.settingsButton = jsObject.settingsButton;
    }
    if (hasValue(jsObject.sketchButton)) {
        dotNetElevationProfileVisibleElements.sketchButton = jsObject.sketchButton;
    }
    if (hasValue(jsObject.uniformChartScalingToggle)) {
        dotNetElevationProfileVisibleElements.uniformChartScalingToggle = jsObject.uniformChartScalingToggle;
    }
    if (hasValue(jsObject.unitSelector)) {
        dotNetElevationProfileVisibleElements.unitSelector = jsObject.unitSelector;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetElevationProfileVisibleElements.id = geoBlazorId;
    }

    return dotNetElevationProfileVisibleElements;
}

