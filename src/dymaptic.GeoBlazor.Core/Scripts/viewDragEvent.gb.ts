// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetViewDragEvent } from './viewDragEvent';

export async function buildJsViewDragEventGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsViewDragEvent: any = {};
    if (hasValue(dotNetObject.origin)) {
        let { buildJsViewDragEventOrigin } = await import('./viewDragEventOrigin');
        jsViewDragEvent.origin = await buildJsViewDragEventOrigin(dotNetObject.origin, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.action)) {
        jsViewDragEvent.action = dotNetObject.action;
    }
    if (hasValue(dotNetObject.angle)) {
        jsViewDragEvent.angle = dotNetObject.angle;
    }
    if (hasValue(dotNetObject.button)) {
        jsViewDragEvent.button = dotNetObject.button;
    }
    if (hasValue(dotNetObject.buttons)) {
        jsViewDragEvent.buttons = dotNetObject.buttons;
    }
    if (hasValue(dotNetObject.native)) {
        jsViewDragEvent.native = dotNetObject.native;
    }
    if (hasValue(dotNetObject.radius)) {
        jsViewDragEvent.radius = dotNetObject.radius;
    }
    if (hasValue(dotNetObject.stopPropagation)) {
        jsViewDragEvent.stopPropagation = dotNetObject.stopPropagation;
    }
    if (hasValue(dotNetObject.timestamp)) {
        jsViewDragEvent.timestamp = dotNetObject.timestamp;
    }
    if (hasValue(dotNetObject.x)) {
        jsViewDragEvent.x = dotNetObject.x;
    }
    if (hasValue(dotNetObject.y)) {
        jsViewDragEvent.y = dotNetObject.y;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsViewDragEvent);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsViewDragEvent;
    
    return jsViewDragEvent;
}


export async function buildDotNetViewDragEventGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetViewDragEvent: any = {};
    
    if (hasValue(jsObject.origin)) {
        let { buildDotNetViewDragEventOrigin } = await import('./viewDragEventOrigin');
        dotNetViewDragEvent.origin = await buildDotNetViewDragEventOrigin(jsObject.origin, layerId, viewId);
    }
    
    if (hasValue(jsObject.action)) {
        dotNetViewDragEvent.action = removeCircularReferences(jsObject.action);
    }
    
    if (hasValue(jsObject.angle)) {
        dotNetViewDragEvent.angle = jsObject.angle;
    }
    
    if (hasValue(jsObject.button)) {
        dotNetViewDragEvent.button = jsObject.button;
    }
    
    if (hasValue(jsObject.buttons)) {
        dotNetViewDragEvent.buttons = jsObject.buttons;
    }
    
    if (hasValue(jsObject.native)) {
        dotNetViewDragEvent.native = jsObject.native;
    }
    
    if (hasValue(jsObject.radius)) {
        dotNetViewDragEvent.radius = jsObject.radius;
    }
    
    if (hasValue(jsObject.stopPropagation)) {
        dotNetViewDragEvent.stopPropagation = jsObject.stopPropagation;
    }
    
    if (hasValue(jsObject.timestamp)) {
        dotNetViewDragEvent.timestamp = jsObject.timestamp;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetViewDragEvent.type = jsObject.type;
    }
    
    if (hasValue(jsObject.x)) {
        dotNetViewDragEvent.x = jsObject.x;
    }
    
    if (hasValue(jsObject.y)) {
        dotNetViewDragEvent.y = jsObject.y;
    }
    

    return dotNetViewDragEvent;
}

