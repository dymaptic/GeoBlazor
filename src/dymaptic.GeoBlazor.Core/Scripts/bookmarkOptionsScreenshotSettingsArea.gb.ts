// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetBookmarkOptionsScreenshotSettingsArea } from './bookmarkOptionsScreenshotSettingsArea';

export async function buildJsBookmarkOptionsScreenshotSettingsAreaGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsBookmarkOptionsScreenshotSettingsArea: any = {};

    if (hasValue(dotNetObject.height)) {
        jsBookmarkOptionsScreenshotSettingsArea.height = dotNetObject.height;
    }
    if (hasValue(dotNetObject.width)) {
        jsBookmarkOptionsScreenshotSettingsArea.width = dotNetObject.width;
    }
    if (hasValue(dotNetObject.x)) {
        jsBookmarkOptionsScreenshotSettingsArea.x = dotNetObject.x;
    }
    if (hasValue(dotNetObject.y)) {
        jsBookmarkOptionsScreenshotSettingsArea.y = dotNetObject.y;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsBookmarkOptionsScreenshotSettingsArea);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsBookmarkOptionsScreenshotSettingsArea;
    
    let { buildDotNetBookmarkOptionsScreenshotSettingsArea } = await import('./bookmarkOptionsScreenshotSettingsArea');
    let dnInstantiatedObject = await buildDotNetBookmarkOptionsScreenshotSettingsArea(jsBookmarkOptionsScreenshotSettingsArea, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type BookmarkOptionsScreenshotSettingsArea detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BookmarkOptionsScreenshotSettingsArea', e);
    }
    
    return jsBookmarkOptionsScreenshotSettingsArea;
}


export async function buildDotNetBookmarkOptionsScreenshotSettingsAreaGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBookmarkOptionsScreenshotSettingsArea: any = {};
    
    if (hasValue(jsObject.height)) {
        dotNetBookmarkOptionsScreenshotSettingsArea.height = jsObject.height;
    }
    
    if (hasValue(jsObject.width)) {
        dotNetBookmarkOptionsScreenshotSettingsArea.width = jsObject.width;
    }
    
    if (hasValue(jsObject.x)) {
        dotNetBookmarkOptionsScreenshotSettingsArea.x = jsObject.x;
    }
    
    if (hasValue(jsObject.y)) {
        dotNetBookmarkOptionsScreenshotSettingsArea.y = jsObject.y;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetBookmarkOptionsScreenshotSettingsArea.id = geoBlazorId;
    }

    return dotNetBookmarkOptionsScreenshotSettingsArea;
}

