// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import LOD from '@arcgis/core/layers/support/LOD';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetLOD } from './lOD';

export async function buildJsLODGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.level)) {
        properties.level = dotNetObject.level;
    }
    if (hasValue(dotNetObject.levelValue)) {
        properties.levelValue = dotNetObject.levelValue;
    }
    if (hasValue(dotNetObject.resolution)) {
        properties.resolution = dotNetObject.resolution;
    }
    if (hasValue(dotNetObject.scale)) {
        properties.scale = dotNetObject.scale;
    }
    let jsLOD = new LOD(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsLOD);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLOD;
    
    let { buildDotNetLOD } = await import('./lOD');
    let dnInstantiatedObject = await buildDotNetLOD(jsLOD);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type LOD detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LOD', e);
    }
    
    return jsLOD;
}


export async function buildDotNetLODGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLOD: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.level)) {
        dotNetLOD.level = jsObject.level;
    }
    if (hasValue(jsObject.levelValue)) {
        dotNetLOD.levelValue = jsObject.levelValue;
    }
    if (hasValue(jsObject.resolution)) {
        dotNetLOD.resolution = jsObject.resolution;
    }
    if (hasValue(jsObject.scale)) {
        dotNetLOD.scale = jsObject.scale;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetLOD.id = geoBlazorId;
    }

    return dotNetLOD;
}

