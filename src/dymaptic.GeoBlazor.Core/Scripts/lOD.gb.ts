// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import LOD from '@arcgis/core/layers/support/LOD';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';

export async function buildJsLODGenerated(dotNetObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.level)) {
        properties.level = dotNetObject.level;
    }
    if (hasValue(dotNetObject.levelValue)) {
        properties.levelValue = dotNetObject.levelValue;
    }
    if (hasValue(dotNetObject.resolution)) {
        properties.resolution = dotNetObject.resolution;
    }
    if (hasValue(dotNetObject.scale)) {
        properties.scale = dotNetObject.scale;
    }
    let jsLOD = new LOD(properties);
    
    jsObjectRefs[dotNetObject.id] = jsLOD;
    arcGisObjectRefs[dotNetObject.id] = jsLOD;
    
    return jsLOD;
}


export async function buildDotNetLODGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLOD: any = {};
    
    if (hasValue(jsObject.level)) {
        dotNetLOD.level = jsObject.level;
    }
    
    if (hasValue(jsObject.levelValue)) {
        dotNetLOD.levelValue = jsObject.levelValue;
    }
    
    if (hasValue(jsObject.resolution)) {
        dotNetLOD.resolution = jsObject.resolution;
    }
    
    if (hasValue(jsObject.scale)) {
        dotNetLOD.scale = jsObject.scale;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetLOD.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetLOD.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetLOD.id)) {
        jsObjectRefs[dotNetLOD.id] ??= jsObject;
        arcGisObjectRefs[dotNetLOD.id] ??= jsObject;
    }

    return dotNetLOD;
}

