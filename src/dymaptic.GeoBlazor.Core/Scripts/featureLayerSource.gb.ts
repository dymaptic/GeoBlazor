// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import FeatureLayerSource from '@arcgis/core/webdoc/geotriggersInfo/FeatureLayerSource';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetFeatureLayerSource } from './featureLayerSource';

export async function buildJsFeatureLayerSourceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.layerId)) {
        properties.layerId = dotNetObject.layerId;
    }
    if (hasValue(dotNetObject.layerUrl)) {
        properties.layerUrl = dotNetObject.layerUrl;
    }
    let jsFeatureLayerSource = new FeatureLayerSource(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureLayerSource);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureLayerSource;
    
    return jsFeatureLayerSource;
}


export async function buildDotNetFeatureLayerSourceGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureLayerSource: any = {};
    
    if (hasValue(jsObject.layerId)) {
        dotNetFeatureLayerSource.layerId = jsObject.layerId;
    }
    
    if (hasValue(jsObject.layerUrl)) {
        dotNetFeatureLayerSource.layerUrl = jsObject.layerUrl;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetFeatureLayerSource.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetFeatureLayerSource.id = geoBlazorId;
    }

    return dotNetFeatureLayerSource;
}

