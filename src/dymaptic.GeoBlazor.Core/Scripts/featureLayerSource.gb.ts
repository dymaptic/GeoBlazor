// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import FeatureLayerSource from '@arcgis/core/webdoc/geotriggersInfo/FeatureLayerSource';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetFeatureLayerSource } from './featureLayerSource';

export async function buildJsFeatureLayerSourceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.layerId)) {
        properties.layerId = dotNetObject.layerId;
    }
    if (hasValue(dotNetObject.layerUrl)) {
        properties.layerUrl = dotNetObject.layerUrl;
    }
    let jsFeatureLayerSource = new FeatureLayerSource(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureLayerSource);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureLayerSource;
    
    let { buildDotNetFeatureLayerSource } = await import('./featureLayerSource');
    let dnInstantiatedObject = await buildDotNetFeatureLayerSource(jsFeatureLayerSource);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type FeatureLayerSource detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureLayerSource', e);
    }
    
    return jsFeatureLayerSource;
}


export async function buildDotNetFeatureLayerSourceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureLayerSource: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.layerId)) {
        dotNetFeatureLayerSource.layerId = jsObject.layerId;
    }
    if (hasValue(jsObject.layerUrl)) {
        dotNetFeatureLayerSource.layerUrl = jsObject.layerUrl;
    }
    if (hasValue(jsObject.type)) {
        dotNetFeatureLayerSource.type = jsObject.type;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetFeatureLayerSource.id = geoBlazorId;
    }

    return dotNetFeatureLayerSource;
}

