// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import VoxelVariableStyle from '@arcgis/core/layers/voxel/VoxelVariableStyle';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetVoxelVariableStyle } from './voxelVariableStyle';

export async function buildJsVoxelVariableStyleGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsVoxelVariableStyle = new VoxelVariableStyle();
    if (hasValue(dotNetObject.isosurfaces)) {
        let { buildJsVoxelIsosurface } = await import('./voxelIsosurface');
        jsVoxelVariableStyle.isosurfaces = await Promise.all(dotNetObject.isosurfaces.map(async i => await buildJsVoxelIsosurface(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.transferFunction)) {
        let { buildJsVoxelTransferFunctionStyle } = await import('./voxelTransferFunctionStyle');
        jsVoxelVariableStyle.transferFunction = await buildJsVoxelTransferFunctionStyle(dotNetObject.transferFunction, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.uniqueValues)) {
        let { buildJsVoxelUniqueValue } = await import('./voxelUniqueValue');
        jsVoxelVariableStyle.uniqueValues = await Promise.all(dotNetObject.uniqueValues.map(async i => await buildJsVoxelUniqueValue(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.label)) {
        jsVoxelVariableStyle.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.variableId)) {
        jsVoxelVariableStyle.variableId = dotNetObject.variableId;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsVoxelVariableStyle);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsVoxelVariableStyle;
    
    let dnInstantiatedObject = await buildDotNetVoxelVariableStyle(jsVoxelVariableStyle);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for VoxelVariableStyle', e);
    }
    
    return jsVoxelVariableStyle;
}

export async function buildDotNetVoxelVariableStyleGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVoxelVariableStyle: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.isosurfaces)) {
            let { buildDotNetVoxelIsosurface } = await import('./voxelIsosurface');
            dotNetVoxelVariableStyle.isosurfaces = await Promise.all(jsObject.isosurfaces.map(async i => await buildDotNetVoxelIsosurface(i)));
        }
        if (hasValue(jsObject.transferFunction)) {
            let { buildDotNetVoxelTransferFunctionStyle } = await import('./voxelTransferFunctionStyle');
            dotNetVoxelVariableStyle.transferFunction = await buildDotNetVoxelTransferFunctionStyle(jsObject.transferFunction);
        }
        if (hasValue(jsObject.uniqueValues)) {
            let { buildDotNetVoxelUniqueValue } = await import('./voxelUniqueValue');
            dotNetVoxelVariableStyle.uniqueValues = await Promise.all(jsObject.uniqueValues.map(async i => await buildDotNetVoxelUniqueValue(i)));
        }
    if (hasValue(jsObject.label)) {
        dotNetVoxelVariableStyle.label = jsObject.label;
    }
    if (hasValue(jsObject.variableId)) {
        dotNetVoxelVariableStyle.variableId = jsObject.variableId;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetVoxelVariableStyle.id = k;
                break;
            }
        }
    }

    return dotNetVoxelVariableStyle;
}

