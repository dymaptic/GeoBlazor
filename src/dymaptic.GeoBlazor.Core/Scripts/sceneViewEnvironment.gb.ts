// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetSceneViewEnvironment } from './sceneViewEnvironment';

export async function buildJsSceneViewEnvironmentGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSceneViewEnvironment: any = {};
    if (hasValue(dotNetObject.atmosphere)) {
        let { buildJsSceneViewEnvironmentAtmosphere } = await import('./sceneViewEnvironmentAtmosphere');
        jsSceneViewEnvironment.atmosphere = await buildJsSceneViewEnvironmentAtmosphere(dotNetObject.atmosphere, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.background)) {
        let { buildJsBackground } = await import('./background');
        jsSceneViewEnvironment.background = buildJsBackground(dotNetObject.background) as any;
    }
    if (hasValue(dotNetObject.weather)) {
        let { buildJsISceneViewEnvironmentWeather } = await import('./iSceneViewEnvironmentWeather');
        jsSceneViewEnvironment.weather = buildJsISceneViewEnvironmentWeather(dotNetObject.weather) as any;
    }

    if (hasValue(dotNetObject.atmosphereEnabled)) {
        jsSceneViewEnvironment.atmosphereEnabled = dotNetObject.atmosphereEnabled;
    }
    if (hasValue(dotNetObject.lighting)) {
        jsSceneViewEnvironment.lighting = dotNetObject.lighting;
    }
    if (hasValue(dotNetObject.starsEnabled)) {
        jsSceneViewEnvironment.starsEnabled = dotNetObject.starsEnabled;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSceneViewEnvironment);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSceneViewEnvironment;
    
    let { buildDotNetSceneViewEnvironment } = await import('./sceneViewEnvironment');
    let dnInstantiatedObject = await buildDotNetSceneViewEnvironment(jsSceneViewEnvironment);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type SceneViewEnvironment detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SceneViewEnvironment', e);
    }
    
    return jsSceneViewEnvironment;
}


export async function buildDotNetSceneViewEnvironmentGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSceneViewEnvironment: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.atmosphere)) {
        let { buildDotNetSceneViewEnvironmentAtmosphere } = await import('./sceneViewEnvironmentAtmosphere');
        dotNetSceneViewEnvironment.atmosphere = await buildDotNetSceneViewEnvironmentAtmosphere(jsObject.atmosphere);
    }
    if (hasValue(jsObject.background)) {
        let { buildDotNetBackground } = await import('./background');
        dotNetSceneViewEnvironment.background = buildDotNetBackground(jsObject.background);
    }
    if (hasValue(jsObject.weather)) {
        let { buildDotNetISceneViewEnvironmentWeather } = await import('./iSceneViewEnvironmentWeather');
        dotNetSceneViewEnvironment.weather = buildDotNetISceneViewEnvironmentWeather(jsObject.weather);
    }
    if (hasValue(jsObject.atmosphereEnabled)) {
        dotNetSceneViewEnvironment.atmosphereEnabled = jsObject.atmosphereEnabled;
    }
    if (hasValue(jsObject.lighting)) {
        dotNetSceneViewEnvironment.lighting = jsObject.lighting;
    }
    if (hasValue(jsObject.starsEnabled)) {
        dotNetSceneViewEnvironment.starsEnabled = jsObject.starsEnabled;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSceneViewEnvironment.id = geoBlazorId;
    }

    return dotNetSceneViewEnvironment;
}

