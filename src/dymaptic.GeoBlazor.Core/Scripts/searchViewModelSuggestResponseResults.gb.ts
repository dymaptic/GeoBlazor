// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetSearchViewModelSuggestResponseResults } from './searchViewModelSuggestResponseResults';

export async function buildJsSearchViewModelSuggestResponseResultsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSearchViewModelSuggestResponseResults: any = {};
    if (hasValue(dotNetObject.source)) {
        let { buildJsSearchSource } = await import('./searchSource');
        jsSearchViewModelSuggestResponseResults.source = await buildJsSearchSource(dotNetObject.source, viewId) as any;
    }

    if (hasValue(dotNetObject.results) && dotNetObject.results.length > 0) {
        jsSearchViewModelSuggestResponseResults.results = dotNetObject.results;
    }
    if (hasValue(dotNetObject.sourceIndex)) {
        jsSearchViewModelSuggestResponseResults.sourceIndex = dotNetObject.sourceIndex;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSearchViewModelSuggestResponseResults);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSearchViewModelSuggestResponseResults;
    
    return jsSearchViewModelSuggestResponseResults;
}


export async function buildDotNetSearchViewModelSuggestResponseResultsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchViewModelSuggestResponseResults: any = {};
    
    if (hasValue(jsObject.source)) {
        let { buildDotNetSearchSource } = await import('./searchSource');
        dotNetSearchViewModelSuggestResponseResults.source = await buildDotNetSearchSource(jsObject.source);
    }
    
    if (hasValue(jsObject.results)) {
        dotNetSearchViewModelSuggestResponseResults.results = removeCircularReferences(jsObject.results);
    }
    
    if (hasValue(jsObject.sourceIndex)) {
        dotNetSearchViewModelSuggestResponseResults.sourceIndex = jsObject.sourceIndex;
    }
    

    return dotNetSearchViewModelSuggestResponseResults;
}

