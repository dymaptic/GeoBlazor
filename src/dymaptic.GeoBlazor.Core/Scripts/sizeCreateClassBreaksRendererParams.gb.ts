// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSizeCreateClassBreaksRendererParams } from './sizeCreateClassBreaksRendererParams';

export async function buildJsSizeCreateClassBreaksRendererParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jssizeCreateClassBreaksRendererParams: any = {};
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jssizeCreateClassBreaksRendererParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.classificationMethod)) {
        jssizeCreateClassBreaksRendererParams.classificationMethod = dotNetObject.classificationMethod;
    }
    if (hasValue(dotNetObject.defaultSymbolEnabled)) {
        jssizeCreateClassBreaksRendererParams.defaultSymbolEnabled = dotNetObject.defaultSymbolEnabled;
    }
    if (hasValue(dotNetObject.field)) {
        jssizeCreateClassBreaksRendererParams.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.forBinning)) {
        jssizeCreateClassBreaksRendererParams.forBinning = dotNetObject.forBinning;
    }
    if (hasValue(dotNetObject.legendOptions)) {
        jssizeCreateClassBreaksRendererParams.legendOptions = dotNetObject.legendOptions;
    }
    if (hasValue(dotNetObject.maxValue)) {
        jssizeCreateClassBreaksRendererParams.maxValue = dotNetObject.maxValue;
    }
    if (hasValue(dotNetObject.minValue)) {
        jssizeCreateClassBreaksRendererParams.minValue = dotNetObject.minValue;
    }
    if (hasValue(dotNetObject.normalizationField)) {
        jssizeCreateClassBreaksRendererParams.normalizationField = dotNetObject.normalizationField;
    }
    if (hasValue(dotNetObject.normalizationTotal)) {
        jssizeCreateClassBreaksRendererParams.normalizationTotal = dotNetObject.normalizationTotal;
    }
    if (hasValue(dotNetObject.normalizationType)) {
        jssizeCreateClassBreaksRendererParams.normalizationType = dotNetObject.normalizationType;
    }
    if (hasValue(dotNetObject.numClasses)) {
        jssizeCreateClassBreaksRendererParams.numClasses = dotNetObject.numClasses;
    }
    if (hasValue(dotNetObject.outlineOptimizationEnabled)) {
        jssizeCreateClassBreaksRendererParams.outlineOptimizationEnabled = dotNetObject.outlineOptimizationEnabled;
    }
    if (hasValue(dotNetObject.signal)) {
        jssizeCreateClassBreaksRendererParams.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.sizeScheme)) {
        jssizeCreateClassBreaksRendererParams.sizeScheme = dotNetObject.sizeScheme;
    }
    if (hasValue(dotNetObject.sqlExpression)) {
        jssizeCreateClassBreaksRendererParams.sqlExpression = dotNetObject.sqlExpression;
    }
    if (hasValue(dotNetObject.sqlWhere)) {
        jssizeCreateClassBreaksRendererParams.sqlWhere = dotNetObject.sqlWhere;
    }
    if (hasValue(dotNetObject.standardDeviationInterval)) {
        jssizeCreateClassBreaksRendererParams.standardDeviationInterval = dotNetObject.standardDeviationInterval;
    }
    if (hasValue(dotNetObject.symbolType)) {
        jssizeCreateClassBreaksRendererParams.symbolType = dotNetObject.symbolType;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        jssizeCreateClassBreaksRendererParams.valueExpression = dotNetObject.valueExpression;
    }
    if (hasValue(dotNetObject.valueExpressionTitle)) {
        jssizeCreateClassBreaksRendererParams.valueExpressionTitle = dotNetObject.valueExpressionTitle;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jssizeCreateClassBreaksRendererParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jssizeCreateClassBreaksRendererParams;
    
    let dnInstantiatedObject = await buildDotNetSizeCreateClassBreaksRendererParams(jssizeCreateClassBreaksRendererParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SizeCreateClassBreaksRendererParams', e);
    }
    
    return jssizeCreateClassBreaksRendererParams;
}

export async function buildDotNetSizeCreateClassBreaksRendererParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSizeCreateClassBreaksRendererParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.classificationMethod)) {
        dotNetSizeCreateClassBreaksRendererParams.classificationMethod = jsObject.classificationMethod;
    }
    if (hasValue(jsObject.defaultSymbolEnabled)) {
        dotNetSizeCreateClassBreaksRendererParams.defaultSymbolEnabled = jsObject.defaultSymbolEnabled;
    }
    if (hasValue(jsObject.field)) {
        dotNetSizeCreateClassBreaksRendererParams.field = jsObject.field;
    }
    if (hasValue(jsObject.forBinning)) {
        dotNetSizeCreateClassBreaksRendererParams.forBinning = jsObject.forBinning;
    }
    if (hasValue(jsObject.legendOptions)) {
        dotNetSizeCreateClassBreaksRendererParams.legendOptions = jsObject.legendOptions;
    }
    if (hasValue(jsObject.maxValue)) {
        dotNetSizeCreateClassBreaksRendererParams.maxValue = jsObject.maxValue;
    }
    if (hasValue(jsObject.minValue)) {
        dotNetSizeCreateClassBreaksRendererParams.minValue = jsObject.minValue;
    }
    if (hasValue(jsObject.normalizationField)) {
        dotNetSizeCreateClassBreaksRendererParams.normalizationField = jsObject.normalizationField;
    }
    if (hasValue(jsObject.normalizationTotal)) {
        dotNetSizeCreateClassBreaksRendererParams.normalizationTotal = jsObject.normalizationTotal;
    }
    if (hasValue(jsObject.normalizationType)) {
        dotNetSizeCreateClassBreaksRendererParams.normalizationType = jsObject.normalizationType;
    }
    if (hasValue(jsObject.numClasses)) {
        dotNetSizeCreateClassBreaksRendererParams.numClasses = jsObject.numClasses;
    }
    if (hasValue(jsObject.outlineOptimizationEnabled)) {
        dotNetSizeCreateClassBreaksRendererParams.outlineOptimizationEnabled = jsObject.outlineOptimizationEnabled;
    }
    if (hasValue(jsObject.signal)) {
        dotNetSizeCreateClassBreaksRendererParams.signal = jsObject.signal;
    }
    if (hasValue(jsObject.sizeScheme)) {
        dotNetSizeCreateClassBreaksRendererParams.sizeScheme = jsObject.sizeScheme;
    }
    if (hasValue(jsObject.sqlExpression)) {
        dotNetSizeCreateClassBreaksRendererParams.sqlExpression = jsObject.sqlExpression;
    }
    if (hasValue(jsObject.sqlWhere)) {
        dotNetSizeCreateClassBreaksRendererParams.sqlWhere = jsObject.sqlWhere;
    }
    if (hasValue(jsObject.standardDeviationInterval)) {
        dotNetSizeCreateClassBreaksRendererParams.standardDeviationInterval = jsObject.standardDeviationInterval;
    }
    if (hasValue(jsObject.symbolType)) {
        dotNetSizeCreateClassBreaksRendererParams.symbolType = jsObject.symbolType;
    }
    if (hasValue(jsObject.valueExpression)) {
        dotNetSizeCreateClassBreaksRendererParams.valueExpression = jsObject.valueExpression;
    }
    if (hasValue(jsObject.valueExpressionTitle)) {
        dotNetSizeCreateClassBreaksRendererParams.valueExpressionTitle = jsObject.valueExpressionTitle;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSizeCreateClassBreaksRendererParams.id = k;
                break;
            }
        }
    }

    return dotNetSizeCreateClassBreaksRendererParams;
}

