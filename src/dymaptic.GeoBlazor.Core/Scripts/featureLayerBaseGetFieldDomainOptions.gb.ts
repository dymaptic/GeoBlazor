// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetFeatureLayerBaseGetFieldDomainOptions } from './featureLayerBaseGetFieldDomainOptions';

export async function buildJsFeatureLayerBaseGetFieldDomainOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureLayerBaseGetFieldDomainOptions: any = {};
    if (hasValue(dotNetObject.feature)) {
        let { buildJsGraphic } = await import('./graphic');
        jsFeatureLayerBaseGetFieldDomainOptions.feature = buildJsGraphic(dotNetObject.feature) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureLayerBaseGetFieldDomainOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureLayerBaseGetFieldDomainOptions;
    
    return jsFeatureLayerBaseGetFieldDomainOptions;
}


export async function buildDotNetFeatureLayerBaseGetFieldDomainOptionsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureLayerBaseGetFieldDomainOptions: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.feature)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetFeatureLayerBaseGetFieldDomainOptions.feature = buildDotNetGraphic(jsObject.feature, layerId, viewId);
    }

    return dotNetFeatureLayerBaseGetFieldDomainOptions;
}

