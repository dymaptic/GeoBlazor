// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageGPSInfo from '@arcgis/core/rest/support/ImageGPSInfo';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetImageGPSInfo } from './imageGPSInfo';

export async function buildJsImageGPSInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsImageGPSInfo = new ImageGPSInfo();
    if (hasValue(dotNetObject.center)) {
        let { buildJsPoint } = await import('./point');
        jsImageGPSInfo.center = buildJsPoint(dotNetObject.center) as any;
    }

    if (hasValue(dotNetObject.acquisitionDate)) {
        jsImageGPSInfo.acquisitionDate = dotNetObject.acquisitionDate;
    }
    if (hasValue(dotNetObject.cameraID)) {
        jsImageGPSInfo.cameraID = dotNetObject.cameraID;
    }
    if (hasValue(dotNetObject.gps)) {
        jsImageGPSInfo.gps = dotNetObject.gps;
    }
    if (hasValue(dotNetObject.imageGPSInfoId)) {
        jsImageGPSInfo.id = dotNetObject.imageGPSInfoId;
    }
    if (hasValue(dotNetObject.name)) {
        jsImageGPSInfo.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.orientation)) {
        jsImageGPSInfo.orientation = dotNetObject.orientation;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsImageGPSInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageGPSInfo;
    
    let dnInstantiatedObject = await buildDotNetImageGPSInfo(jsImageGPSInfo);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImageGPSInfo', e);
    }
    
    return jsImageGPSInfo;
}

export async function buildDotNetImageGPSInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageGPSInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.center)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetImageGPSInfo.center = buildDotNetPoint(jsObject.center);
        }
        if (hasValue(jsObject.acquisitionDate)) {
            dotNetImageGPSInfo.acquisitionDate = jsObject.acquisitionDate;
        }
        if (hasValue(jsObject.cameraID)) {
            dotNetImageGPSInfo.cameraID = jsObject.cameraID;
        }
        if (hasValue(jsObject.gps)) {
            dotNetImageGPSInfo.gps = jsObject.gps;
        }
        if (hasValue(jsObject.id)) {
            dotNetImageGPSInfo.imageGPSInfoId = jsObject.id;
        }
        if (hasValue(jsObject.name)) {
            dotNetImageGPSInfo.name = jsObject.name;
        }
        if (hasValue(jsObject.orientation)) {
            dotNetImageGPSInfo.orientation = jsObject.orientation;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImageGPSInfo.id = k;
                break;
            }
        }
    }

    return dotNetImageGPSInfo;
}

