// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageGPSInfo from '@arcgis/core/rest/support/ImageGPSInfo';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetImageGPSInfo } from './imageGPSInfo';

export async function buildJsImageGPSInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.center)) {
        let { buildJsPoint } = await import('./point');
        properties.center = buildJsPoint(dotNetObject.center) as any;
    }

    if (hasValue(dotNetObject.acquisitionDate)) {
        properties.acquisitionDate = dotNetObject.acquisitionDate;
    }
    if (hasValue(dotNetObject.cameraID)) {
        properties.cameraID = dotNetObject.cameraID;
    }
    if (hasValue(dotNetObject.gps)) {
        properties.gps = dotNetObject.gps;
    }
    if (hasValue(dotNetObject.imageGPSInfoId)) {
        properties.id = dotNetObject.imageGPSInfoId;
    }
    if (hasValue(dotNetObject.name)) {
        properties.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.orientation)) {
        properties.orientation = dotNetObject.orientation;
    }
    let jsImageGPSInfo = new ImageGPSInfo(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsImageGPSInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageGPSInfo;
    
    return jsImageGPSInfo;
}


export async function buildDotNetImageGPSInfoGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageGPSInfo: any = {};
    
    if (hasValue(jsObject.center)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetImageGPSInfo.center = buildDotNetPoint(jsObject.center);
    }
    
    if (hasValue(jsObject.acquisitionDate)) {
        dotNetImageGPSInfo.acquisitionDate = jsObject.acquisitionDate;
    }
    
    if (hasValue(jsObject.cameraID)) {
        dotNetImageGPSInfo.cameraID = jsObject.cameraID;
    }
    
    if (hasValue(jsObject.gps)) {
        dotNetImageGPSInfo.gps = jsObject.gps;
    }
    
    if (hasValue(jsObject.id)) {
        dotNetImageGPSInfo.imageGPSInfoId = jsObject.id;
    }
    
    if (hasValue(jsObject.name)) {
        dotNetImageGPSInfo.name = jsObject.name;
    }
    
    if (hasValue(jsObject.orientation)) {
        dotNetImageGPSInfo.orientation = jsObject.orientation;
    }
    

    return dotNetImageGPSInfo;
}

