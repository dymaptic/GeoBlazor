// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import DisplayFilteredLayer = __esri.DisplayFilteredLayer;
import { hasValue, sanitize } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class IDisplayFilteredLayerGenerated implements IPropertyWrapper {
    public layer: DisplayFilteredLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: DisplayFilteredLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.displayFilterInfo)) {
            let { buildJsDisplayFilterInfo } = await import('./displayFilterInfo');
            this.layer.displayFilterInfo = await buildJsDisplayFilterInfo(dotNetObject.displayFilterInfo, this.layerId, this.viewId) as any;
        }

        if (hasValue(dotNetObject.displayFilterEnabled)) {
            this.layer.displayFilterEnabled = dotNetObject.displayFilterEnabled;
        }
    }
    
    // region properties
    
    async getDisplayFilterInfo(): Promise<any> {
        if (!hasValue(this.layer.displayFilterInfo)) {
            return null;
        }
        
        let { buildDotNetDisplayFilterInfo } = await import('./displayFilterInfo');
        return await buildDotNetDisplayFilterInfo(this.layer.displayFilterInfo);
    }
    
    async setDisplayFilterInfo(value: any): Promise<void> {
        let { buildJsDisplayFilterInfo } = await import('./displayFilterInfo');
        this.layer.displayFilterInfo = await  buildJsDisplayFilterInfo(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}

export function buildJsIDisplayFilteredLayerGenerated(dotNetObject: any): any {
    return sanitize(dotNetObject);
}

export function buildDotNetIDisplayFilteredLayerGenerated(jsObject: any): any {
    return jsObject;
}

