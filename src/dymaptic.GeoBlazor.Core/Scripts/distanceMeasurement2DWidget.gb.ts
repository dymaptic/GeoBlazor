// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import DistanceMeasurement2D from '@arcgis/core/widgets/DistanceMeasurement2D';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, buildJsStreamReference, generateSerializableJson } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class DistanceMeasurement2DWidgetGenerated implements IPropertyWrapper {
    public widget: DistanceMeasurement2D;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: DistanceMeasurement2D) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.snappingOptions)) {
            let { buildJsSnappingOptions } = await import('./snappingOptions');
            this.widget.snappingOptions = await buildJsSnappingOptions(dotNetObject.snappingOptions, this.layerId, this.viewId) as any;
        }

        if (hasValue(dotNetObject.icon)) {
            this.widget.icon = dotNetObject.icon;
        }
        if (hasValue(dotNetObject.label)) {
            this.widget.label = dotNetObject.label;
        }
        if (hasValue(dotNetObject.unit)) {
            this.widget.unit = dotNetObject.unit;
        }
        if (hasValue(dotNetObject.unitOptions) && dotNetObject.unitOptions.length > 0) {
            this.widget.unitOptions = dotNetObject.unitOptions;
        }
        if (hasValue(dotNetObject.visible)) {
            this.widget.visible = dotNetObject.visible;
        }
        if (hasValue(dotNetObject.widgetId)) {
            this.widget.id = dotNetObject.widgetId;
        }
    }
    
    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async render(): Promise<any> {
        let result = this.widget.render();
        
        return generateSerializableJson(result);
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async when(callback: any,
        errback: any): Promise<any> {
        let result = await this.widget.when(callback,
            errback);
        
        return generateSerializableJson(result);
    }

    // region properties
    
    getIcon(): any {
        if (!hasValue(this.widget.icon)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.icon);
    }
    
    setIcon(value: any): void {
        this.widget.icon = JSON.parse(value);
    }
    
    getLabel(): any {
        if (!hasValue(this.widget.label)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.label);
    }
    
    setLabel(value: any): void {
        this.widget.label = JSON.parse(value);
    }
    
    async getSnappingOptions(): Promise<any> {
        if (!hasValue(this.widget.snappingOptions)) {
            return null;
        }
        
        let { buildDotNetSnappingOptions } = await import('./snappingOptions');
        return await buildDotNetSnappingOptions(this.widget.snappingOptions, this.viewId);
    }
    
    async setSnappingOptions(value: any): Promise<void> {
        let { buildJsSnappingOptions } = await import('./snappingOptions');
        this.widget.snappingOptions = await  buildJsSnappingOptions(value, this.layerId, this.viewId);
    }
    
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetDistanceMeasurement2DViewModel } = await import('./distanceMeasurement2DViewModel');
        return await buildDotNetDistanceMeasurement2DViewModel(this.widget.viewModel, this.viewId);
    }
    
    async setViewModel(value: any): Promise<void> {
        let { buildJsDistanceMeasurement2DViewModel } = await import('./distanceMeasurement2DViewModel');
        this.widget.viewModel = await  buildJsDistanceMeasurement2DViewModel(value, this.layerId, this.viewId);
    }
    
    getWidgetId(): any {
        if (!hasValue(this.widget.id)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.id);
    }
    
    setWidgetId(value: any): void {
        this.widget.id = JSON.parse(value);
    }
    
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsDistanceMeasurement2DWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.snappingOptions)) {
        let { buildJsSnappingOptions } = await import('./snappingOptions');
        properties.snappingOptions = await buildJsSnappingOptions(dotNetObject.snappingOptions, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsDistanceMeasurement2DViewModel } = await import('./distanceMeasurement2DViewModel');
        properties.viewModel = await buildJsDistanceMeasurement2DViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.icon)) {
        properties.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.unit)) {
        properties.unit = dotNetObject.unit;
    }
    if (hasValue(dotNetObject.unitOptions) && dotNetObject.unitOptions.length > 0) {
        properties.unitOptions = dotNetObject.unitOptions;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    if (hasValue(dotNetObject.widgetId)) {
        properties.id = dotNetObject.widgetId;
    }
    let jsDistanceMeasurement2D = new DistanceMeasurement2D(properties);

    let { default: DistanceMeasurement2DWidgetWrapper } = await import('./distanceMeasurement2DWidget');
    let distanceMeasurement2DWidgetWrapper = new DistanceMeasurement2DWidgetWrapper(jsDistanceMeasurement2D);
    distanceMeasurement2DWidgetWrapper.geoBlazorId = dotNetObject.id;
    distanceMeasurement2DWidgetWrapper.viewId = viewId;
    distanceMeasurement2DWidgetWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = distanceMeasurement2DWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsDistanceMeasurement2D;
    
    try {
        let jsObjectRef = DotNet.createJSObjectReference(distanceMeasurement2DWidgetWrapper);
        let { buildDotNetDistanceMeasurement2DWidget } = await import('./distanceMeasurement2DWidget');
        let dnInstantiatedObject = await buildDotNetDistanceMeasurement2DWidget(jsDistanceMeasurement2D, viewId);

        let dnStream = buildJsStreamReference(dnInstantiatedObject);
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, dnStream);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DistanceMeasurement2DWidget', e);
    }
    
    return jsDistanceMeasurement2D;
}


export async function buildDotNetDistanceMeasurement2DWidgetGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDistanceMeasurement2DWidget: any = {};
    
    if (hasValue(jsObject.snappingOptions)) {
        let { buildDotNetSnappingOptions } = await import('./snappingOptions');
        dotNetDistanceMeasurement2DWidget.snappingOptions = await buildDotNetSnappingOptions(jsObject.snappingOptions, viewId);
    }
    
    if (hasValue(jsObject.viewModel)) {
        let { buildDotNetDistanceMeasurement2DViewModel } = await import('./distanceMeasurement2DViewModel');
        dotNetDistanceMeasurement2DWidget.viewModel = await buildDotNetDistanceMeasurement2DViewModel(jsObject.viewModel, viewId);
    }
    
    if (hasValue(jsObject.icon)) {
        dotNetDistanceMeasurement2DWidget.icon = jsObject.icon;
    }
    
    if (hasValue(jsObject.label)) {
        dotNetDistanceMeasurement2DWidget.label = jsObject.label;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetDistanceMeasurement2DWidget.type = removeCircularReferences(jsObject.type);
    }
    
    if (hasValue(jsObject.unit)) {
        dotNetDistanceMeasurement2DWidget.unit = removeCircularReferences(jsObject.unit);
    }
    
    if (hasValue(jsObject.unitOptions)) {
        dotNetDistanceMeasurement2DWidget.unitOptions = removeCircularReferences(jsObject.unitOptions);
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetDistanceMeasurement2DWidget.visible = jsObject.visible;
    }
    
    if (hasValue(jsObject.id)) {
        dotNetDistanceMeasurement2DWidget.widgetId = jsObject.id;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetDistanceMeasurement2DWidget.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetDistanceMeasurement2DWidget.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetDistanceMeasurement2DWidget.id)) {
        jsObjectRefs[dotNetDistanceMeasurement2DWidget.id] ??= jsObject;
        arcGisObjectRefs[dotNetDistanceMeasurement2DWidget.id] ??= jsObject;
    }

    return dotNetDistanceMeasurement2DWidget;
}

