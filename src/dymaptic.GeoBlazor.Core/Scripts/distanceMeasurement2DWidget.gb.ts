// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import DistanceMeasurement2D from '@arcgis/core/widgets/DistanceMeasurement2D';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class DistanceMeasurement2DWidgetGenerated implements IPropertyWrapper {
    public widget: DistanceMeasurement2D;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: DistanceMeasurement2D) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.viewModel)) {
            let { buildJsDistanceMeasurement2DViewModel } = await import('./distanceMeasurement2DViewModel');
            this.widget.viewModel = await buildJsDistanceMeasurement2DViewModel(dotNetObject.viewModel, this.layerId, this.viewId) as any;
        }

        if (hasValue(dotNetObject.icon)) {
            this.widget.icon = dotNetObject.icon;
        }
        if (hasValue(dotNetObject.label)) {
            this.widget.label = dotNetObject.label;
        }
        if (hasValue(dotNetObject.unit)) {
            this.widget.unit = dotNetObject.unit;
        }
        if (hasValue(dotNetObject.unitOptions)) {
            this.widget.unitOptions = dotNetObject.unitOptions;
        }
        if (hasValue(dotNetObject.visible)) {
            this.widget.visible = dotNetObject.visible;
        }
        if (hasValue(dotNetObject.widgetId)) {
            this.widget.id = dotNetObject.widgetId;
        }
    }
    
    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async own(handleOrHandles: any): Promise<void> {
        let { buildJsWatchHandle } = await import('./watchHandle');
        let jsHandleOrHandles = await buildJsWatchHandle(handleOrHandles, this.layerId, this.viewId) as any;
        this.widget.own(jsHandleOrHandles);
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async render(): Promise<any> {
        return this.widget.render();
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async when(callback: any,
        errback: any): Promise<any> {
        return await this.widget.when(callback,
            errback);
    }

    // region properties
    
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetDistanceMeasurement2DViewModel } = await import('./distanceMeasurement2DViewModel');
        return await buildDotNetDistanceMeasurement2DViewModel(this.widget.viewModel, this.layerId, this.viewId);
    }
    
    async setViewModel(value: any): Promise<void> {
        let { buildJsDistanceMeasurement2DViewModel } = await import('./distanceMeasurement2DViewModel');
        this.widget.viewModel = await  buildJsDistanceMeasurement2DViewModel(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsDistanceMeasurement2DWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsDistanceMeasurement2DViewModel } = await import('./distanceMeasurement2DViewModel');
        properties.viewModel = await buildJsDistanceMeasurement2DViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.icon)) {
        properties.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.unit)) {
        properties.unit = dotNetObject.unit;
    }
    if (hasValue(dotNetObject.unitOptions)) {
        properties.unitOptions = dotNetObject.unitOptions;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    if (hasValue(dotNetObject.widgetId)) {
        properties.id = dotNetObject.widgetId;
    }
    let jsDistanceMeasurement2D = new DistanceMeasurement2D(properties);

    let { default: DistanceMeasurement2DWidgetWrapper } = await import('./distanceMeasurement2DWidget');
    let distanceMeasurement2DWidgetWrapper = new DistanceMeasurement2DWidgetWrapper(jsDistanceMeasurement2D);
    distanceMeasurement2DWidgetWrapper.geoBlazorId = dotNetObject.id;
    distanceMeasurement2DWidgetWrapper.viewId = viewId;
    distanceMeasurement2DWidgetWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(distanceMeasurement2DWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = distanceMeasurement2DWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsDistanceMeasurement2D;
    
    let { buildDotNetDistanceMeasurement2DWidget } = await import('./distanceMeasurement2DWidget');
    let dnInstantiatedObject = await buildDotNetDistanceMeasurement2DWidget(jsDistanceMeasurement2D, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type DistanceMeasurement2DWidget detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DistanceMeasurement2DWidget', e);
    }
    
    return jsDistanceMeasurement2D;
}


export async function buildDotNetDistanceMeasurement2DWidgetGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsDistanceMeasurement2DWidget } = await import('./distanceMeasurement2DWidget');
        jsComponentRef = await buildJsDistanceMeasurement2DWidget(jsObject, layerId, viewId);
    }
    
    let dotNetDistanceMeasurement2DWidget: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.viewModel)) {
        let { buildDotNetDistanceMeasurement2DViewModel } = await import('./distanceMeasurement2DViewModel');
        dotNetDistanceMeasurement2DWidget.viewModel = await buildDotNetDistanceMeasurement2DViewModel(jsObject.viewModel, layerId, viewId);
    }
    if (hasValue(jsObject.icon)) {
        dotNetDistanceMeasurement2DWidget.icon = jsObject.icon;
    }
    if (hasValue(jsObject.label)) {
        dotNetDistanceMeasurement2DWidget.label = jsObject.label;
    }
    if (hasValue(jsObject.type)) {
        dotNetDistanceMeasurement2DWidget.type = jsObject.type;
    }
    if (hasValue(jsObject.unit)) {
        dotNetDistanceMeasurement2DWidget.unit = jsObject.unit;
    }
    if (hasValue(jsObject.unitOptions)) {
        dotNetDistanceMeasurement2DWidget.unitOptions = jsObject.unitOptions;
    }
    if (hasValue(jsObject.visible)) {
        dotNetDistanceMeasurement2DWidget.visible = jsObject.visible;
    }
    if (hasValue(jsObject.id)) {
        dotNetDistanceMeasurement2DWidget.widgetId = jsObject.id;
    }


    if (hasValue(geoBlazorId)) {
        dotNetDistanceMeasurement2DWidget.id = geoBlazorId;
    }

    return dotNetDistanceMeasurement2DWidget;
}

