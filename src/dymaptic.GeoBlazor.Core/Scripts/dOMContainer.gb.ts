// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetDOMContainer } from './dOMContainer';

export async function buildJsDOMContainerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsDOMContainer: any = {};
    if (hasValue(dotNetObject.ui)) {
        let { buildJsDefaultUI } = await import('./defaultUI');
        jsDOMContainer.ui = await buildJsDefaultUI(dotNetObject.ui, layerId, viewId) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsDOMContainer);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsDOMContainer;
    
    return jsDOMContainer;
}


export async function buildDotNetDOMContainerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDOMContainer: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.ui)) {
        let { buildDotNetDefaultUI } = await import('./defaultUI');
        dotNetDOMContainer.ui = await buildDotNetDefaultUI(jsObject.ui);
    }
    if (hasValue(jsObject.focused)) {
        dotNetDOMContainer.focused = jsObject.focused;
    }
    if (hasValue(jsObject.height)) {
        dotNetDOMContainer.height = jsObject.height;
    }
    if (hasValue(jsObject.resizing)) {
        dotNetDOMContainer.resizing = jsObject.resizing;
    }
    if (hasValue(jsObject.size)) {
        dotNetDOMContainer.size = jsObject.size;
    }
    if (hasValue(jsObject.suspended)) {
        dotNetDOMContainer.suspended = jsObject.suspended;
    }
    if (hasValue(jsObject.width)) {
        dotNetDOMContainer.width = jsObject.width;
    }

    return dotNetDOMContainer;
}

