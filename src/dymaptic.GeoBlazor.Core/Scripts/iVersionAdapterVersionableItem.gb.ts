// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetIVersionAdapterVersionableItem } from './iVersionAdapterVersionableItem';

export async function buildJsIVersionAdapterVersionableItemGenerated(dotNetObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsVersionAdapterVersionableItem: any = {};

    
    jsObjectRefs[dotNetObject.id] = jsVersionAdapterVersionableItem;
    arcGisObjectRefs[dotNetObject.id] = jsVersionAdapterVersionableItem;
    
    return jsVersionAdapterVersionableItem;
}


export async function buildDotNetIVersionAdapterVersionableItemGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIVersionAdapterVersionableItem: any = {};
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetIVersionAdapterVersionableItem.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetIVersionAdapterVersionableItem.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetIVersionAdapterVersionableItem.id)) {
        jsObjectRefs[dotNetIVersionAdapterVersionableItem.id] ??= jsObject;
        arcGisObjectRefs[dotNetIVersionAdapterVersionableItem.id] ??= jsObject;
    }

    return dotNetIVersionAdapterVersionableItem;
}

