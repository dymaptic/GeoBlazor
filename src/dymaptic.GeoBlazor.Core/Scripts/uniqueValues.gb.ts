// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import uniqueValues from '@arcgis/core/smartMapping/statistics/uniqueValues';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class UniqueValuesGenerated implements IPropertyWrapper {
    public component: uniqueValues;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: uniqueValues) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async uniqueValues(parameters: any): Promise<any> {
                let { buildJsUniqueValuesUniqueValuesParams } = await import('./uniqueValuesUniqueValuesParams');
let jsparameters = await buildJsUniqueValuesUniqueValuesParams(parameters, this.layerId, this.viewId) as any;
        return await this.component.uniqueValues(jsparameters);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsUniqueValuesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    let jsuniqueValues = new uniqueValues(properties);

    let { default: UniqueValuesWrapper } = await import('./uniqueValues');
    let uniqueValuesWrapper = new UniqueValuesWrapper(jsuniqueValues);
    uniqueValuesWrapper.geoBlazorId = dotNetObject.id;
    uniqueValuesWrapper.viewId = viewId;
    uniqueValuesWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(uniqueValuesWrapper);
    jsObjectRefs[dotNetObject.id] = uniqueValuesWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsuniqueValues;
    
    let { buildDotNetUniqueValues } = await import('./uniqueValues');
    let dnInstantiatedObject = await buildDotNetUniqueValues(jsuniqueValues);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type UniqueValues detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for UniqueValues', e);
    }
    
    return jsuniqueValues;
}


export async function buildDotNetUniqueValuesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUniqueValues: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetUniqueValues.id = k;
                break;
            }
        }
    }

    return dotNetUniqueValues;
}

