// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import cimSymbolUtils = __esri.cimSymbolUtils;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CimSymbolUtilsGenerated implements IPropertyWrapper {
    public component: cimSymbolUtils;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: cimSymbolUtils) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async applyCIMSymbolColor(symbol: any,
        color: any,
        options: any): Promise<void> {
        let { buildJsCIMSymbol } = await import('./cIMSymbol');
        let jsSymbol = await buildJsCIMSymbol(symbol, this.layerId, this.viewId) as any;
        let { buildJsMapColor } = await import('./mapColor');
        let jsColor = buildJsMapColor(color) as any;
        this.component.applyCIMSymbolColor(jsSymbol,
            jsColor,
            options);
    }

    async applyCIMSymbolRotation(symbol: any,
        rotation: any,
        clockwise: any): Promise<void> {
        let { buildJsCIMSymbol } = await import('./cIMSymbol');
        let jsSymbol = await buildJsCIMSymbol(symbol, this.layerId, this.viewId) as any;
        this.component.applyCIMSymbolRotation(jsSymbol,
            rotation,
            clockwise);
    }

    async getCIMSymbolColor(symbol: any): Promise<any> {
        let { buildJsCIMSymbol } = await import('./cIMSymbol');
        let jsSymbol = await buildJsCIMSymbol(symbol, this.layerId, this.viewId) as any;
        return this.component.getCIMSymbolColor(jsSymbol);
    }

    async getCIMSymbolRotation(symbol: any,
        clockwise: any): Promise<any> {
        let { buildJsCIMSymbol } = await import('./cIMSymbol');
        let jsSymbol = await buildJsCIMSymbol(symbol, this.layerId, this.viewId) as any;
        return this.component.getCIMSymbolRotation(jsSymbol,
            clockwise);
    }

    async getCIMSymbolSize(symbol: any): Promise<any> {
        let { buildJsCIMSymbol } = await import('./cIMSymbol');
        let jsSymbol = await buildJsCIMSymbol(symbol, this.layerId, this.viewId) as any;
        return this.component.getCIMSymbolSize(jsSymbol);
    }

    async scaleCIMSymbolTo(symbol: any,
        size: any,
        options: any): Promise<void> {
        let { buildJsCIMSymbol } = await import('./cIMSymbol');
        let jsSymbol = await buildJsCIMSymbol(symbol, this.layerId, this.viewId) as any;
        this.component.scaleCIMSymbolTo(jsSymbol,
            size,
            options);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsCimSymbolUtilsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jscimSymbolUtils: any = {};


    let { default: CimSymbolUtilsWrapper } = await import('./cimSymbolUtils');
    let cimSymbolUtilsWrapper = new CimSymbolUtilsWrapper(jscimSymbolUtils);
    cimSymbolUtilsWrapper.geoBlazorId = dotNetObject.id;
    cimSymbolUtilsWrapper.viewId = viewId;
    cimSymbolUtilsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(cimSymbolUtilsWrapper);
    jsObjectRefs[dotNetObject.id] = cimSymbolUtilsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jscimSymbolUtils;
    let { buildDotNetCimSymbolUtils } = await import('./cimSymbolUtils');
    let dnInstantiatedObject = await buildDotNetCimSymbolUtils(jscimSymbolUtils);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CimSymbolUtils', e);
    }
    
    return jscimSymbolUtils;
}

export async function buildDotNetCimSymbolUtilsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCimSymbolUtils: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCimSymbolUtils.id = k;
                break;
            }
        }
    }

    return dotNetCimSymbolUtils;
}

