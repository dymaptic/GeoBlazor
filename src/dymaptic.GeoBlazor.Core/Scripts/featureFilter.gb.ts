// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import FeatureFilter from '@arcgis/core/layers/support/FeatureFilter';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FeatureFilterGenerated implements IPropertyWrapper {
    public component: FeatureFilter;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: FeatureFilter) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async createQuery(): Promise<any> {
        return this.component.createQuery();
    }

    // region properties
    
    async getGeometry(): Promise<any> {
        if (!hasValue(this.component.geometry)) {
            return null;
        }
        
        let { buildDotNetGeometry } = await import('./geometry');
        return buildDotNetGeometry(this.component.geometry);
    }
    
    async setGeometry(value: any): Promise<void> {
        let { buildJsGeometry } = await import('./geometry');
        this.component.geometry =  buildJsGeometry(value);
    }
    
    async getTimeExtent(): Promise<any> {
        if (!hasValue(this.component.timeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.component.timeExtent);
    }
    
    async setTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.component.timeExtent = await  buildJsTimeExtent(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsFeatureFilterGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsGeometry } = await import('./geometry');
        properties.geometry = buildJsGeometry(dotNetObject.geometry) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.distance)) {
        properties.distance = dotNetObject.distance;
    }
    if (hasValue(dotNetObject.objectIds)) {
        properties.objectIds = dotNetObject.objectIds;
    }
    if (hasValue(dotNetObject.spatialRelationship)) {
        properties.spatialRelationship = dotNetObject.spatialRelationship;
    }
    if (hasValue(dotNetObject.units)) {
        properties.units = dotNetObject.units;
    }
    if (hasValue(dotNetObject.where)) {
        properties.where = dotNetObject.where;
    }
    let jsFeatureFilter = new FeatureFilter(properties);

    let { default: FeatureFilterWrapper } = await import('./featureFilter');
    let featureFilterWrapper = new FeatureFilterWrapper(jsFeatureFilter);
    featureFilterWrapper.geoBlazorId = dotNetObject.id;
    featureFilterWrapper.viewId = viewId;
    featureFilterWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(featureFilterWrapper);
    jsObjectRefs[dotNetObject.id] = featureFilterWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureFilter;
    let { buildDotNetFeatureFilter } = await import('./featureFilter');
    let dnInstantiatedObject = await buildDotNetFeatureFilter(jsFeatureFilter);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureFilter', e);
    }
    
    return jsFeatureFilter;
}

export async function buildDotNetFeatureFilterGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureFilter: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.geometry)) {
        let { buildDotNetGeometry } = await import('./geometry');
        dotNetFeatureFilter.geometry = buildDotNetGeometry(jsObject.geometry);
    }
    if (hasValue(jsObject.timeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetFeatureFilter.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
    }
    if (hasValue(jsObject.distance)) {
        dotNetFeatureFilter.distance = jsObject.distance;
    }
    if (hasValue(jsObject.objectIds)) {
        dotNetFeatureFilter.objectIds = jsObject.objectIds;
    }
    if (hasValue(jsObject.spatialRelationship)) {
        dotNetFeatureFilter.spatialRelationship = jsObject.spatialRelationship;
    }
    if (hasValue(jsObject.units)) {
        dotNetFeatureFilter.units = jsObject.units;
    }
    if (hasValue(jsObject.where)) {
        dotNetFeatureFilter.where = jsObject.where;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFeatureFilter.id = k;
                break;
            }
        }
    }

    return dotNetFeatureFilter;
}

