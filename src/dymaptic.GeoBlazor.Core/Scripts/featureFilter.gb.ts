// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import FeatureFilter from '@arcgis/core/layers/support/FeatureFilter';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, generateSerializableJson } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FeatureFilterGenerated implements IPropertyWrapper {
    public component: FeatureFilter;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: FeatureFilter) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.geometry)) {
            this.component.geometry = dotNetObject.geometry;
        }
        if (hasValue(dotNetObject.timeExtent)) {
            let { buildJsTimeExtent } = await import('./timeExtent');
            this.component.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent) as any;
        }

        if (hasValue(dotNetObject.distance)) {
            this.component.distance = dotNetObject.distance;
        }
        if (hasValue(dotNetObject.objectIds) && dotNetObject.objectIds.length > 0) {
            this.component.objectIds = dotNetObject.objectIds;
        }
        if (hasValue(dotNetObject.spatialRelationship)) {
            this.component.spatialRelationship = dotNetObject.spatialRelationship;
        }
        if (hasValue(dotNetObject.units)) {
            this.component.units = dotNetObject.units;
        }
        if (hasValue(dotNetObject.where)) {
            this.component.where = dotNetObject.where;
        }
    }
    
    async createQuery(): Promise<any> {
        return this.component.createQuery();
    }

    // region properties
    
    async getTimeExtent(): Promise<any> {
        if (!hasValue(this.component.timeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.component.timeExtent);
    }
    
    async setTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.component.timeExtent = await  buildJsTimeExtent(value);
    }
    
    getWhere(): any {
        if (!hasValue(this.component.where)) {
            return null;
        }
        
        return generateSerializableJson(this.component.where);
    }
    
    setWhere(value: any): void {
        this.component.where = JSON.parse(value);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsFeatureFilterGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.geometry)) {
        properties.geometry = dotNetObject.geometry;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent) as any;
    }

    if (hasValue(dotNetObject.distance)) {
        properties.distance = dotNetObject.distance;
    }
    if (hasValue(dotNetObject.objectIds) && dotNetObject.objectIds.length > 0) {
        properties.objectIds = dotNetObject.objectIds;
    }
    if (hasValue(dotNetObject.spatialRelationship)) {
        properties.spatialRelationship = dotNetObject.spatialRelationship;
    }
    if (hasValue(dotNetObject.units)) {
        properties.units = dotNetObject.units;
    }
    if (hasValue(dotNetObject.where)) {
        properties.where = dotNetObject.where;
    }
    let jsFeatureFilter = new FeatureFilter(properties);

    let { default: FeatureFilterWrapper } = await import('./featureFilter');
    let featureFilterWrapper = new FeatureFilterWrapper(jsFeatureFilter);
    featureFilterWrapper.geoBlazorId = dotNetObject.id;
    featureFilterWrapper.viewId = viewId;
    featureFilterWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = featureFilterWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureFilter;
    
    return jsFeatureFilter;
}


export async function buildDotNetFeatureFilterGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureFilter: any = {};
    
    if (hasValue(jsObject.timeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetFeatureFilter.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
    }
    
    if (hasValue(jsObject.distance)) {
        dotNetFeatureFilter.distance = jsObject.distance;
    }
    
    if (hasValue(jsObject.geometry)) {
        dotNetFeatureFilter.geometry = jsObject.geometry;
    }
    
    if (hasValue(jsObject.objectIds)) {
        dotNetFeatureFilter.objectIds = removeCircularReferences(jsObject.objectIds);
    }
    
    if (hasValue(jsObject.spatialRelationship)) {
        dotNetFeatureFilter.spatialRelationship = removeCircularReferences(jsObject.spatialRelationship);
    }
    
    if (hasValue(jsObject.units)) {
        dotNetFeatureFilter.units = removeCircularReferences(jsObject.units);
    }
    
    if (hasValue(jsObject.where)) {
        dotNetFeatureFilter.where = jsObject.where;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetFeatureFilter.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetFeatureFilter.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetFeatureFilter.id)) {
        jsObjectRefs[dotNetFeatureFilter.id] ??= jsObject;
        arcGisObjectRefs[dotNetFeatureFilter.id] ??= jsObject;
    }

    return dotNetFeatureFilter;
}

