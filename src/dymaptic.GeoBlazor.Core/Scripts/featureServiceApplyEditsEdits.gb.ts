// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetFeatureServiceApplyEditsEdits } from './featureServiceApplyEditsEdits';

export async function buildJsFeatureServiceApplyEditsEditsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureServiceApplyEditsEdits: any = {};
    if (hasValue(dotNetObject.addFeatures)) {
        let { buildJsGraphic } = await import('./graphic');
        jsFeatureServiceApplyEditsEdits.addFeatures = dotNetObject.addFeatures.map(i => buildJsGraphic(i)) as any;
    }
    if (hasValue(dotNetObject.graphicCollectionDeleteFeatures)) {
        let { buildJsGraphic } = await import('./graphic');
        jsFeatureServiceApplyEditsEdits.deleteFeatures = dotNetObject.graphicCollectionDeleteFeatures.map(i => buildJsGraphic(i)) as any;
    }
    else if (hasValue(dotNetObject.stringCollectionDeleteFeatures)) {
        jsFeatureServiceApplyEditsEdits.deleteFeatures = dotNetObject.graphic;
    }
    if (hasValue(dotNetObject.updateFeatures)) {
        let { buildJsGraphic } = await import('./graphic');
        jsFeatureServiceApplyEditsEdits.updateFeatures = dotNetObject.updateFeatures.map(i => buildJsGraphic(i)) as any;
    }

    if (hasValue(dotNetObject.addAttachments)) {
        jsFeatureServiceApplyEditsEdits.addAttachments = dotNetObject.addAttachments;
    }
    if (hasValue(dotNetObject.deleteAttachments)) {
        jsFeatureServiceApplyEditsEdits.deleteAttachments = dotNetObject.deleteAttachments;
    }
    if (hasValue(dotNetObject.featureServiceApplyEditsEditsId)) {
        jsFeatureServiceApplyEditsEdits.id = dotNetObject.featureServiceApplyEditsEditsId;
    }
    if (hasValue(dotNetObject.identifierFields)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedIdentifierFields } = dotNetObject.identifierFields;
        jsFeatureServiceApplyEditsEdits.identifierFields = sanitizedIdentifierFields;
    }
    if (hasValue(dotNetObject.updateAttachments)) {
        jsFeatureServiceApplyEditsEdits.updateAttachments = dotNetObject.updateAttachments;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureServiceApplyEditsEdits);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureServiceApplyEditsEdits;
    
    let dnInstantiatedObject = await buildDotNetFeatureServiceApplyEditsEdits(jsFeatureServiceApplyEditsEdits, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureServiceApplyEditsEdits', e);
    }
    
    return jsFeatureServiceApplyEditsEdits;
}

export async function buildDotNetFeatureServiceApplyEditsEditsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureServiceApplyEditsEdits: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.addFeatures)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetFeatureServiceApplyEditsEdits.addFeatures = jsObject.addFeatures.map(i => buildDotNetGraphic(i, layerId, viewId));
        }
        if (hasValue(jsObject.deleteFeatures)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetFeatureServiceApplyEditsEdits.deleteFeatures = jsObject.deleteFeatures.map(i => buildDotNetGraphic(i, layerId, viewId));
        }
        if (hasValue(jsObject.updateFeatures)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetFeatureServiceApplyEditsEdits.updateFeatures = jsObject.updateFeatures.map(i => buildDotNetGraphic(i, layerId, viewId));
        }
    if (hasValue(jsObject.addAttachments)) {
        dotNetFeatureServiceApplyEditsEdits.addAttachments = jsObject.addAttachments;
    }
    if (hasValue(jsObject.deleteAttachments)) {
        dotNetFeatureServiceApplyEditsEdits.deleteAttachments = jsObject.deleteAttachments;
    }
    if (hasValue(jsObject.id)) {
        dotNetFeatureServiceApplyEditsEdits.featureServiceApplyEditsEditsId = jsObject.id;
    }
    if (hasValue(jsObject.identifierFields)) {
        dotNetFeatureServiceApplyEditsEdits.identifierFields = jsObject.identifierFields;
    }
    if (hasValue(jsObject.updateAttachments)) {
        dotNetFeatureServiceApplyEditsEdits.updateAttachments = jsObject.updateAttachments;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFeatureServiceApplyEditsEdits.id = k;
                break;
            }
        }
    }

    return dotNetFeatureServiceApplyEditsEdits;
}

