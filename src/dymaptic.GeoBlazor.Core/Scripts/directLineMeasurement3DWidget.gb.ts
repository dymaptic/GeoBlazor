// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import DirectLineMeasurement3D from '@arcgis/core/widgets/DirectLineMeasurement3D';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class DirectLineMeasurement3DWidgetGenerated implements IPropertyWrapper {
    public widget: DirectLineMeasurement3D;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: DirectLineMeasurement3D) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    
    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async own(handleOrHandles: any): Promise<void> {
        let { buildJsWatchHandle } = await import('./watchHandle');
        let jsHandleOrHandles = await buildJsWatchHandle(handleOrHandles, this.layerId, this.viewId) as any;
        this.widget.own(jsHandleOrHandles);
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async render(): Promise<any> {
        return this.widget.render();
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async when(callback: any,
        errback: any): Promise<any> {
        return await this.widget.when(callback,
            errback);
    }

    // region properties
    
    async getAnalysis(): Promise<any> {
        if (!hasValue(this.widget.analysis)) {
            return null;
        }
        
        let { buildDotNetDirectLineMeasurementAnalysis } = await import('./directLineMeasurementAnalysis');
        return await buildDotNetDirectLineMeasurementAnalysis(this.widget.analysis);
    }
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetDirectLineMeasurement3DViewModel } = await import('./directLineMeasurement3DViewModel');
        return await buildDotNetDirectLineMeasurement3DViewModel(this.widget.viewModel);
    }
    async setViewModel(value: any): Promise<void> {
        let { buildJsDirectLineMeasurement3DViewModel } = await import('./directLineMeasurement3DViewModel');
        this.widget.viewModel = await  buildJsDirectLineMeasurement3DViewModel(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsDirectLineMeasurement3DWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsDirectLineMeasurement3D = new DirectLineMeasurement3D();
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsDirectLineMeasurement3DViewModel } = await import('./directLineMeasurement3DViewModel');
        jsDirectLineMeasurement3D.viewModel = await buildJsDirectLineMeasurement3DViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.container)) {
        jsDirectLineMeasurement3D.container = dotNetObject.container;
    }
    if (hasValue(dotNetObject.icon)) {
        jsDirectLineMeasurement3D.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.label)) {
        jsDirectLineMeasurement3D.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.unit)) {
        jsDirectLineMeasurement3D.unit = dotNetObject.unit;
    }
    if (hasValue(dotNetObject.unitOptions)) {
        jsDirectLineMeasurement3D.unitOptions = dotNetObject.unitOptions;
    }
    if (hasValue(dotNetObject.view)) {
        jsDirectLineMeasurement3D.view = dotNetObject.view;
    }
    if (hasValue(dotNetObject.widgetId)) {
        jsDirectLineMeasurement3D.id = dotNetObject.widgetId;
    }

    let { default: DirectLineMeasurement3DWidgetWrapper } = await import('./directLineMeasurement3DWidget');
    let directLineMeasurement3DWidgetWrapper = new DirectLineMeasurement3DWidgetWrapper(jsDirectLineMeasurement3D);
    directLineMeasurement3DWidgetWrapper.geoBlazorId = dotNetObject.id;
    directLineMeasurement3DWidgetWrapper.viewId = viewId;
    directLineMeasurement3DWidgetWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(directLineMeasurement3DWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = directLineMeasurement3DWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsDirectLineMeasurement3D;
    let { buildDotNetDirectLineMeasurement3DWidget } = await import('./directLineMeasurement3DWidget');
    let dnInstantiatedObject = await buildDotNetDirectLineMeasurement3DWidget(jsDirectLineMeasurement3D);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DirectLineMeasurement3DWidget', e);
    }
    
    return jsDirectLineMeasurement3D;
}

export async function buildDotNetDirectLineMeasurement3DWidgetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDirectLineMeasurement3DWidget: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.analysis)) {
            let { buildDotNetDirectLineMeasurementAnalysis } = await import('./directLineMeasurementAnalysis');
            dotNetDirectLineMeasurement3DWidget.analysis = await buildDotNetDirectLineMeasurementAnalysis(jsObject.analysis);
        }
        if (hasValue(jsObject.viewModel)) {
            let { buildDotNetDirectLineMeasurement3DViewModel } = await import('./directLineMeasurement3DViewModel');
            dotNetDirectLineMeasurement3DWidget.viewModel = await buildDotNetDirectLineMeasurement3DViewModel(jsObject.viewModel);
        }
    if (hasValue(jsObject.container)) {
        dotNetDirectLineMeasurement3DWidget.container = jsObject.container;
    }
    if (hasValue(jsObject.icon)) {
        dotNetDirectLineMeasurement3DWidget.icon = jsObject.icon;
    }
    if (hasValue(jsObject.label)) {
        dotNetDirectLineMeasurement3DWidget.label = jsObject.label;
    }
    if (hasValue(jsObject.type)) {
        dotNetDirectLineMeasurement3DWidget.type = jsObject.type;
    }
    if (hasValue(jsObject.unit)) {
        dotNetDirectLineMeasurement3DWidget.unit = jsObject.unit;
    }
    if (hasValue(jsObject.unitOptions)) {
        dotNetDirectLineMeasurement3DWidget.unitOptions = jsObject.unitOptions;
    }
    if (hasValue(jsObject.view)) {
        dotNetDirectLineMeasurement3DWidget.view = jsObject.view;
    }
    if (hasValue(jsObject.id)) {
        dotNetDirectLineMeasurement3DWidget.widgetId = jsObject.id;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetDirectLineMeasurement3DWidget.id = k;
                break;
            }
        }
    }

    return dotNetDirectLineMeasurement3DWidget;
}

