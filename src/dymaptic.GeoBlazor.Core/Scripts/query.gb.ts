// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Query from '@arcgis/core/rest/support/Query';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetQuery } from './query';

export async function buildJsQueryGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsQuery = new Query();
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsGeometry } = await import('./geometry');
        jsQuery.geometry = buildJsGeometry(dotNetObject.geometry) as any;
    }
    if (hasValue(dotNetObject.outSpatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        jsQuery.outSpatialReference = buildJsSpatialReference(dotNetObject.outSpatialReference) as any;
    }
    if (hasValue(dotNetObject.pixelSize)) {
        let { buildJsPoint } = await import('./point');
        jsQuery.pixelSize = buildJsPoint(dotNetObject.pixelSize) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        jsQuery.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.aggregateIds)) {
        jsQuery.aggregateIds = dotNetObject.aggregateIds;
    }
    if (hasValue(dotNetObject.cacheHint)) {
        jsQuery.cacheHint = dotNetObject.cacheHint;
    }
    if (hasValue(dotNetObject.datumTransformation)) {
        jsQuery.datumTransformation = dotNetObject.datumTransformation;
    }
    if (hasValue(dotNetObject.distance)) {
        jsQuery.distance = dotNetObject.distance;
    }
    if (hasValue(dotNetObject.gdbVersion)) {
        jsQuery.gdbVersion = dotNetObject.gdbVersion;
    }
    if (hasValue(dotNetObject.geometryPrecision)) {
        jsQuery.geometryPrecision = dotNetObject.geometryPrecision;
    }
    if (hasValue(dotNetObject.groupByFieldsForStatistics)) {
        jsQuery.groupByFieldsForStatistics = dotNetObject.groupByFieldsForStatistics;
    }
    if (hasValue(dotNetObject.having)) {
        jsQuery.having = dotNetObject.having;
    }
    if (hasValue(dotNetObject.historicMoment)) {
        jsQuery.historicMoment = dotNetObject.historicMoment;
    }
    if (hasValue(dotNetObject.maxAllowableOffset)) {
        jsQuery.maxAllowableOffset = dotNetObject.maxAllowableOffset;
    }
    if (hasValue(dotNetObject.maxRecordCountFactor)) {
        jsQuery.maxRecordCountFactor = dotNetObject.maxRecordCountFactor;
    }
    if (hasValue(dotNetObject.multipatchOption)) {
        jsQuery.multipatchOption = dotNetObject.multipatchOption;
    }
    if (hasValue(dotNetObject.num)) {
        jsQuery.num = dotNetObject.num;
    }
    if (hasValue(dotNetObject.objectIds)) {
        jsQuery.objectIds = dotNetObject.objectIds;
    }
    if (hasValue(dotNetObject.orderByFields)) {
        jsQuery.orderByFields = dotNetObject.orderByFields;
    }
    if (hasValue(dotNetObject.outFields)) {
        jsQuery.outFields = dotNetObject.outFields;
    }
    if (hasValue(dotNetObject.outStatistics)) {
        jsQuery.outStatistics = dotNetObject.outStatistics;
    }
    if (hasValue(dotNetObject.parameterValues)) {
        jsQuery.parameterValues = dotNetObject.parameterValues;
    }
    if (hasValue(dotNetObject.quantizationParameters)) {
        jsQuery.quantizationParameters = dotNetObject.quantizationParameters;
    }
    if (hasValue(dotNetObject.rangeValues)) {
        jsQuery.rangeValues = dotNetObject.rangeValues;
    }
    if (hasValue(dotNetObject.relationParameter)) {
        jsQuery.relationParameter = dotNetObject.relationParameter;
    }
    if (hasValue(dotNetObject.returnCentroid)) {
        jsQuery.returnCentroid = dotNetObject.returnCentroid;
    }
    if (hasValue(dotNetObject.returnDistinctValues)) {
        jsQuery.returnDistinctValues = dotNetObject.returnDistinctValues;
    }
    if (hasValue(dotNetObject.returnExceededLimitFeatures)) {
        jsQuery.returnExceededLimitFeatures = dotNetObject.returnExceededLimitFeatures;
    }
    if (hasValue(dotNetObject.returnGeometry)) {
        jsQuery.returnGeometry = dotNetObject.returnGeometry;
    }
    if (hasValue(dotNetObject.returnM)) {
        jsQuery.returnM = dotNetObject.returnM;
    }
    if (hasValue(dotNetObject.returnQueryGeometry)) {
        jsQuery.returnQueryGeometry = dotNetObject.returnQueryGeometry;
    }
    if (hasValue(dotNetObject.returnZ)) {
        jsQuery.returnZ = dotNetObject.returnZ;
    }
    if (hasValue(dotNetObject.spatialRelationship)) {
        jsQuery.spatialRelationship = dotNetObject.spatialRelationship;
    }
    if (hasValue(dotNetObject.sqlFormat)) {
        jsQuery.sqlFormat = dotNetObject.sqlFormat;
    }
    if (hasValue(dotNetObject.start)) {
        jsQuery.start = dotNetObject.start;
    }
    if (hasValue(dotNetObject.text)) {
        jsQuery.text = dotNetObject.text;
    }
    if (hasValue(dotNetObject.units)) {
        jsQuery.units = dotNetObject.units;
    }
    if (hasValue(dotNetObject.where)) {
        jsQuery.where = dotNetObject.where;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsQuery);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsQuery;
    
    let dnInstantiatedObject = await buildDotNetQuery(jsQuery);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Query', e);
    }
    
    return jsQuery;
}

export async function buildDotNetQueryGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetQuery: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.geometry)) {
            let { buildDotNetGeometry } = await import('./geometry');
            dotNetQuery.geometry = buildDotNetGeometry(jsObject.geometry);
        }
        if (hasValue(jsObject.outSpatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetQuery.outSpatialReference = buildDotNetSpatialReference(jsObject.outSpatialReference);
        }
        if (hasValue(jsObject.pixelSize)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetQuery.pixelSize = buildDotNetPoint(jsObject.pixelSize);
        }
        if (hasValue(jsObject.timeExtent)) {
            let { buildDotNetTimeExtent } = await import('./timeExtent');
            dotNetQuery.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
        }
    if (hasValue(jsObject.aggregateIds)) {
        dotNetQuery.aggregateIds = jsObject.aggregateIds;
    }
    if (hasValue(jsObject.cacheHint)) {
        dotNetQuery.cacheHint = jsObject.cacheHint;
    }
    if (hasValue(jsObject.datumTransformation)) {
        dotNetQuery.datumTransformation = jsObject.datumTransformation;
    }
    if (hasValue(jsObject.distance)) {
        dotNetQuery.distance = jsObject.distance;
    }
    if (hasValue(jsObject.gdbVersion)) {
        dotNetQuery.gdbVersion = jsObject.gdbVersion;
    }
    if (hasValue(jsObject.geometryPrecision)) {
        dotNetQuery.geometryPrecision = jsObject.geometryPrecision;
    }
    if (hasValue(jsObject.groupByFieldsForStatistics)) {
        dotNetQuery.groupByFieldsForStatistics = jsObject.groupByFieldsForStatistics;
    }
    if (hasValue(jsObject.having)) {
        dotNetQuery.having = jsObject.having;
    }
    if (hasValue(jsObject.historicMoment)) {
        dotNetQuery.historicMoment = jsObject.historicMoment;
    }
    if (hasValue(jsObject.maxAllowableOffset)) {
        dotNetQuery.maxAllowableOffset = jsObject.maxAllowableOffset;
    }
    if (hasValue(jsObject.maxRecordCountFactor)) {
        dotNetQuery.maxRecordCountFactor = jsObject.maxRecordCountFactor;
    }
    if (hasValue(jsObject.multipatchOption)) {
        dotNetQuery.multipatchOption = jsObject.multipatchOption;
    }
    if (hasValue(jsObject.num)) {
        dotNetQuery.num = jsObject.num;
    }
    if (hasValue(jsObject.objectIds)) {
        dotNetQuery.objectIds = jsObject.objectIds;
    }
    if (hasValue(jsObject.orderByFields)) {
        dotNetQuery.orderByFields = jsObject.orderByFields;
    }
    if (hasValue(jsObject.outFields)) {
        dotNetQuery.outFields = jsObject.outFields;
    }
    if (hasValue(jsObject.outStatistics)) {
        dotNetQuery.outStatistics = jsObject.outStatistics;
    }
    if (hasValue(jsObject.parameterValues)) {
        dotNetQuery.parameterValues = jsObject.parameterValues;
    }
    if (hasValue(jsObject.quantizationParameters)) {
        dotNetQuery.quantizationParameters = jsObject.quantizationParameters;
    }
    if (hasValue(jsObject.rangeValues)) {
        dotNetQuery.rangeValues = jsObject.rangeValues;
    }
    if (hasValue(jsObject.relationParameter)) {
        dotNetQuery.relationParameter = jsObject.relationParameter;
    }
    if (hasValue(jsObject.returnCentroid)) {
        dotNetQuery.returnCentroid = jsObject.returnCentroid;
    }
    if (hasValue(jsObject.returnDistinctValues)) {
        dotNetQuery.returnDistinctValues = jsObject.returnDistinctValues;
    }
    if (hasValue(jsObject.returnExceededLimitFeatures)) {
        dotNetQuery.returnExceededLimitFeatures = jsObject.returnExceededLimitFeatures;
    }
    if (hasValue(jsObject.returnGeometry)) {
        dotNetQuery.returnGeometry = jsObject.returnGeometry;
    }
    if (hasValue(jsObject.returnM)) {
        dotNetQuery.returnM = jsObject.returnM;
    }
    if (hasValue(jsObject.returnQueryGeometry)) {
        dotNetQuery.returnQueryGeometry = jsObject.returnQueryGeometry;
    }
    if (hasValue(jsObject.returnZ)) {
        dotNetQuery.returnZ = jsObject.returnZ;
    }
    if (hasValue(jsObject.spatialRelationship)) {
        dotNetQuery.spatialRelationship = jsObject.spatialRelationship;
    }
    if (hasValue(jsObject.sqlFormat)) {
        dotNetQuery.sqlFormat = jsObject.sqlFormat;
    }
    if (hasValue(jsObject.start)) {
        dotNetQuery.start = jsObject.start;
    }
    if (hasValue(jsObject.text)) {
        dotNetQuery.text = jsObject.text;
    }
    if (hasValue(jsObject.units)) {
        dotNetQuery.units = jsObject.units;
    }
    if (hasValue(jsObject.where)) {
        dotNetQuery.where = jsObject.where;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetQuery.id = k;
                break;
            }
        }
    }

    return dotNetQuery;
}

