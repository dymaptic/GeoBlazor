// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetBookmarkOptionsScreenshotSettings } from './bookmarkOptionsScreenshotSettings';

export async function buildJsBookmarkOptionsScreenshotSettingsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsBookmarkOptionsScreenshotSettings: any = {};
    if (hasValue(dotNetObject.area)) {
        let { buildJsBookmarkOptionsScreenshotSettingsArea } = await import('./bookmarkOptionsScreenshotSettingsArea');
        jsBookmarkOptionsScreenshotSettings.area = await buildJsBookmarkOptionsScreenshotSettingsArea(dotNetObject.area, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.layers)) {
        let { buildJsLayer } = await import('./layer');
        jsBookmarkOptionsScreenshotSettings.layers = await Promise.all(dotNetObject.layers.map(async i => await buildJsLayer(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.height)) {
        jsBookmarkOptionsScreenshotSettings.height = dotNetObject.height;
    }
    if (hasValue(dotNetObject.width)) {
        jsBookmarkOptionsScreenshotSettings.width = dotNetObject.width;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsBookmarkOptionsScreenshotSettings);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsBookmarkOptionsScreenshotSettings;
    
    let { buildDotNetBookmarkOptionsScreenshotSettings } = await import('./bookmarkOptionsScreenshotSettings');
    let dnInstantiatedObject = await buildDotNetBookmarkOptionsScreenshotSettings(jsBookmarkOptionsScreenshotSettings);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type BookmarkOptionsScreenshotSettings detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BookmarkOptionsScreenshotSettings', e);
    }
    
    return jsBookmarkOptionsScreenshotSettings;
}


export async function buildDotNetBookmarkOptionsScreenshotSettingsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBookmarkOptionsScreenshotSettings: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.area)) {
        let { buildDotNetBookmarkOptionsScreenshotSettingsArea } = await import('./bookmarkOptionsScreenshotSettingsArea');
        dotNetBookmarkOptionsScreenshotSettings.area = await buildDotNetBookmarkOptionsScreenshotSettingsArea(jsObject.area);
    }
    if (hasValue(jsObject.height)) {
        dotNetBookmarkOptionsScreenshotSettings.height = jsObject.height;
    }
    if (hasValue(jsObject.width)) {
        dotNetBookmarkOptionsScreenshotSettings.width = jsObject.width;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetBookmarkOptionsScreenshotSettings.id = geoBlazorId;
    }

    return dotNetBookmarkOptionsScreenshotSettings;
}

