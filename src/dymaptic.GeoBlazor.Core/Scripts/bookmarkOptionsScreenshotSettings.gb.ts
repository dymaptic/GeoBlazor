// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import BookmarkOptionsScreenshotSettings = __esri.BookmarkOptionsScreenshotSettings;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class BookmarkOptionsScreenshotSettingsGenerated implements IPropertyWrapper {
    public component: BookmarkOptionsScreenshotSettings;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: BookmarkOptionsScreenshotSettings) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getArea(): Promise<any> {
        if (!hasValue(this.component.area)) {
            return null;
        }
        
        let { buildDotNetBookmarkOptionsScreenshotSettingsArea } = await import('./bookmarkOptionsScreenshotSettingsArea');
        return await buildDotNetBookmarkOptionsScreenshotSettingsArea(this.component.area, this.layerId, this.viewId);
    }
    async setArea(value: any): Promise<void> {
        let { buildJsBookmarkOptionsScreenshotSettingsArea } = await import('./bookmarkOptionsScreenshotSettingsArea');
        this.component.area = await  buildJsBookmarkOptionsScreenshotSettingsArea(value, this.layerId, this.viewId);
    }
    async getLayers(): Promise<any> {
        if (!hasValue(this.component.layers)) {
            return null;
        }
        
        let { buildDotNetLayer } = await import('./layer');
        return await Promise.all(this.component.layers.map(async i => await buildDotNetLayer(i)));
    }
    
    async setLayers(value: any): Promise<void> {
        let { buildJsLayer } = await import('./layer');
        this.component.layers = await Promise.all(value.map(async i => await buildJsLayer(i, this.layerId, this.viewId))) as any;
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsBookmarkOptionsScreenshotSettingsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsBookmarkOptionsScreenshotSettings: any = {}
    if (hasValue(dotNetObject.area)) {
        let { buildJsBookmarkOptionsScreenshotSettingsArea } = await import('./bookmarkOptionsScreenshotSettingsArea');
        jsBookmarkOptionsScreenshotSettings.area = await buildJsBookmarkOptionsScreenshotSettingsArea(dotNetObject.area, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.layers)) {
        let { buildJsLayer } = await import('./layer');
        jsBookmarkOptionsScreenshotSettings.layers = await Promise.all(dotNetObject.layers.map(async i => await buildJsLayer(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.height)) {
        jsBookmarkOptionsScreenshotSettings.height = dotNetObject.height;
    }
    if (hasValue(dotNetObject.width)) {
        jsBookmarkOptionsScreenshotSettings.width = dotNetObject.width;
    }
    let { default: BookmarkOptionsScreenshotSettingsWrapper } = await import('./bookmarkOptionsScreenshotSettings');
    let bookmarkOptionsScreenshotSettingsWrapper = new BookmarkOptionsScreenshotSettingsWrapper(jsBookmarkOptionsScreenshotSettings);
    bookmarkOptionsScreenshotSettingsWrapper.geoBlazorId = dotNetObject.id;
    bookmarkOptionsScreenshotSettingsWrapper.viewId = viewId;
    bookmarkOptionsScreenshotSettingsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(bookmarkOptionsScreenshotSettingsWrapper);
    jsObjectRefs[dotNetObject.id] = bookmarkOptionsScreenshotSettingsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsBookmarkOptionsScreenshotSettings;
    
    let { buildDotNetBookmarkOptionsScreenshotSettings } = await import('./bookmarkOptionsScreenshotSettings');
    let dnInstantiatedObject = await buildDotNetBookmarkOptionsScreenshotSettings(jsBookmarkOptionsScreenshotSettings, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BookmarkOptionsScreenshotSettings', e);
    }
    
    return jsBookmarkOptionsScreenshotSettings;
}

export async function buildDotNetBookmarkOptionsScreenshotSettingsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBookmarkOptionsScreenshotSettings: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.area)) {
            let { buildDotNetBookmarkOptionsScreenshotSettingsArea } = await import('./bookmarkOptionsScreenshotSettingsArea');
            dotNetBookmarkOptionsScreenshotSettings.area = await buildDotNetBookmarkOptionsScreenshotSettingsArea(jsObject.area, layerId, viewId);
        }
        if (hasValue(jsObject.layers)) {
            let { buildDotNetLayer } = await import('./layer');
            dotNetBookmarkOptionsScreenshotSettings.layers = await Promise.all(jsObject.layers.map(async i => await buildDotNetLayer(i)));
        }
        if (hasValue(jsObject.height)) {
            dotNetBookmarkOptionsScreenshotSettings.height = jsObject.height;
        }
        if (hasValue(jsObject.width)) {
            dotNetBookmarkOptionsScreenshotSettings.width = jsObject.width;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetBookmarkOptionsScreenshotSettings.id = k;
                break;
            }
        }
    }

    return dotNetBookmarkOptionsScreenshotSettings;
}

