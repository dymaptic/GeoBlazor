// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetBookmarkOptionsScreenshotSettings } from './bookmarkOptionsScreenshotSettings';

export async function buildJsBookmarkOptionsScreenshotSettingsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsBookmarkOptionsScreenshotSettings: any = {};
    if (hasValue(dotNetObject.area)) {
        let { buildJsBookmarkOptionsScreenshotSettingsArea } = await import('./bookmarkOptionsScreenshotSettingsArea');
        jsBookmarkOptionsScreenshotSettings.area = await buildJsBookmarkOptionsScreenshotSettingsArea(dotNetObject.area, viewId) as any;
    }
    if (hasValue(dotNetObject.layers) && dotNetObject.layers.length > 0) {
        let { buildJsLayer } = await import('./layer');
        jsBookmarkOptionsScreenshotSettings.layers = await Promise.all(dotNetObject.layers.map(async i => await buildJsLayer(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.height)) {
        jsBookmarkOptionsScreenshotSettings.height = dotNetObject.height;
    }
    if (hasValue(dotNetObject.width)) {
        jsBookmarkOptionsScreenshotSettings.width = dotNetObject.width;
    }
    
    jsObjectRefs[dotNetObject.id] = jsBookmarkOptionsScreenshotSettings;
    arcGisObjectRefs[dotNetObject.id] = jsBookmarkOptionsScreenshotSettings;
    
    return jsBookmarkOptionsScreenshotSettings;
}


export async function buildDotNetBookmarkOptionsScreenshotSettingsGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBookmarkOptionsScreenshotSettings: any = {};
    
    if (hasValue(jsObject.area)) {
        let { buildDotNetBookmarkOptionsScreenshotSettingsArea } = await import('./bookmarkOptionsScreenshotSettingsArea');
        dotNetBookmarkOptionsScreenshotSettings.area = await buildDotNetBookmarkOptionsScreenshotSettingsArea(jsObject.area, viewId);
    }
    
    if (hasValue(jsObject.height)) {
        dotNetBookmarkOptionsScreenshotSettings.height = jsObject.height;
    }
    
    if (hasValue(jsObject.width)) {
        dotNetBookmarkOptionsScreenshotSettings.width = jsObject.width;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetBookmarkOptionsScreenshotSettings.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetBookmarkOptionsScreenshotSettings.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetBookmarkOptionsScreenshotSettings.id)) {
        jsObjectRefs[dotNetBookmarkOptionsScreenshotSettings.id] ??= jsObject;
        arcGisObjectRefs[dotNetBookmarkOptionsScreenshotSettings.id] ??= jsObject;
    }

    return dotNetBookmarkOptionsScreenshotSettings;
}

