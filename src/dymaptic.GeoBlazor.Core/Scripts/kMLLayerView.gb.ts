// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetKMLLayerView } from './kMLLayerView';

export async function buildJsKMLLayerViewGenerated(dotNetObject: any): Promise<any> {
    let jsKMLLayerView: any = {};

    
    let jsObjectRef = DotNet.createJSObjectReference(jsKMLLayerView);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsKMLLayerView;
    
    let dnInstantiatedObject = await buildDotNetKMLLayerView(jsKMLLayerView);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for KMLLayerView', e);
    }
    
    return jsKMLLayerView;
}

export async function buildDotNetKMLLayerViewGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetKMLLayerView: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.allVisibleMapImages)) {
        let { buildDotNetKMLLayerViewMapImage } = await import('./kMLLayerViewMapImage');
        dotNetKMLLayerView.allVisibleMapImages = await Promise.all(jsObject.allVisibleMapImages.map(async i => await buildDotNetKMLLayerViewMapImage(i)));
    }
    if (hasValue(jsObject.spatialReferenceSupported)) {
        dotNetKMLLayerView.spatialReferenceSupported = jsObject.spatialReferenceSupported;
    }
    if (hasValue(jsObject.suspended)) {
        dotNetKMLLayerView.suspended = jsObject.suspended;
    }
    if (hasValue(jsObject.updating)) {
        dotNetKMLLayerView.updating = jsObject.updating;
    }
    if (hasValue(jsObject.visibleAtCurrentScale)) {
        dotNetKMLLayerView.visibleAtCurrentScale = jsObject.visibleAtCurrentScale;
    }
    if (hasValue(jsObject.visibleAtCurrentTimeExtent)) {
        dotNetKMLLayerView.visibleAtCurrentTimeExtent = jsObject.visibleAtCurrentTimeExtent;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetKMLLayerView.id = k;
                break;
            }
        }
    }

    return dotNetKMLLayerView;
}

