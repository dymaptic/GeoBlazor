// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import KMLLayerView = __esri.KMLLayerView;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class KMLLayerViewGenerated implements IPropertyWrapper {
    public component: KMLLayerView;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: KMLLayerView) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getAllVisibleMapImages(): Promise<any> {
        if (!hasValue(this.component.allVisibleMapImages)) {
            return null;
        }
        
        let { buildDotNetKMLLayerViewMapImage } = await import('./kMLLayerViewMapImage');
        return await Promise.all(this.component.allVisibleMapImages.map(async i => await buildDotNetKMLLayerViewMapImage(i)));
    }
    
    async getLayer(): Promise<any> {
        if (!hasValue(this.component.layer)) {
            return null;
        }
        
        let { buildDotNetLayer } = await import('./layer');
        return await buildDotNetLayer(this.component.layer);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsKMLLayerViewGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsKMLLayerView: any = {};


    let { default: KMLLayerViewWrapper } = await import('./kMLLayerView');
    let kMLLayerViewWrapper = new KMLLayerViewWrapper(jsKMLLayerView);
    kMLLayerViewWrapper.geoBlazorId = dotNetObject.id;
    kMLLayerViewWrapper.viewId = viewId;
    kMLLayerViewWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(kMLLayerViewWrapper);
    jsObjectRefs[dotNetObject.id] = kMLLayerViewWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsKMLLayerView;
    
    let { buildDotNetKMLLayerView } = await import('./kMLLayerView');
    let dnInstantiatedObject = await buildDotNetKMLLayerView(jsKMLLayerView);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type KMLLayerView detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for KMLLayerView', e);
    }
    
    return jsKMLLayerView;
}


export async function buildDotNetKMLLayerViewGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetKMLLayerView: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.allVisibleMapImages)) {
        let { buildDotNetKMLLayerViewMapImage } = await import('./kMLLayerViewMapImage');
        dotNetKMLLayerView.allVisibleMapImages = await Promise.all(jsObject.allVisibleMapImages.map(async i => await buildDotNetKMLLayerViewMapImage(i)));
    }
    if (hasValue(jsObject.spatialReferenceSupported)) {
        dotNetKMLLayerView.spatialReferenceSupported = jsObject.spatialReferenceSupported;
    }
    if (hasValue(jsObject.suspended)) {
        dotNetKMLLayerView.suspended = jsObject.suspended;
    }
    if (hasValue(jsObject.updating)) {
        dotNetKMLLayerView.updating = jsObject.updating;
    }
    if (hasValue(jsObject.visibleAtCurrentScale)) {
        dotNetKMLLayerView.visibleAtCurrentScale = jsObject.visibleAtCurrentScale;
    }
    if (hasValue(jsObject.visibleAtCurrentTimeExtent)) {
        dotNetKMLLayerView.visibleAtCurrentTimeExtent = jsObject.visibleAtCurrentTimeExtent;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetKMLLayerView.id = k;
                break;
            }
        }
    }

    return dotNetKMLLayerView;
}

