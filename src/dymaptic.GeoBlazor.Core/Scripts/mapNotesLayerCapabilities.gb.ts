// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetMapNotesLayerCapabilities } from './mapNotesLayerCapabilities';

export async function buildJsMapNotesLayerCapabilitiesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsMapNotesLayerCapabilities: any = {};
    if (hasValue(dotNetObject.operations)) {
        let { buildJsMapNotesLayerCapabilitiesOperations } = await import('./mapNotesLayerCapabilitiesOperations');
        jsMapNotesLayerCapabilities.operations = await buildJsMapNotesLayerCapabilitiesOperations(dotNetObject.operations, layerId, viewId) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsMapNotesLayerCapabilities);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsMapNotesLayerCapabilities;
    
    return jsMapNotesLayerCapabilities;
}


export async function buildDotNetMapNotesLayerCapabilitiesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMapNotesLayerCapabilities: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.operations)) {
        let { buildDotNetMapNotesLayerCapabilitiesOperations } = await import('./mapNotesLayerCapabilitiesOperations');
        dotNetMapNotesLayerCapabilities.operations = await buildDotNetMapNotesLayerCapabilitiesOperations(jsObject.operations);
    }

    return dotNetMapNotesLayerCapabilities;
}

