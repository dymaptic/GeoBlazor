// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import VisibleElements = __esri.VisibleElements;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class VisibleElementsGenerated implements IPropertyWrapper {
    public component: VisibleElements;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: VisibleElements) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsVisibleElements: any = {}

    if (hasValue(dotNetObject.area)) {
        jsVisibleElements.area = dotNetObject.area;
    }
    if (hasValue(dotNetObject.coordinates)) {
        jsVisibleElements.coordinates = dotNetObject.coordinates;
    }
    if (hasValue(dotNetObject.direction)) {
        jsVisibleElements.direction = dotNetObject.direction;
    }
    if (hasValue(dotNetObject.distance)) {
        jsVisibleElements.distance = dotNetObject.distance;
    }
    if (hasValue(dotNetObject.elevation)) {
        jsVisibleElements.elevation = dotNetObject.elevation;
    }
    if (hasValue(dotNetObject.header)) {
        jsVisibleElements.header = dotNetObject.header;
    }
    if (hasValue(dotNetObject.helpMessage)) {
        jsVisibleElements.helpMessage = dotNetObject.helpMessage;
    }
    if (hasValue(dotNetObject.orientation)) {
        jsVisibleElements.orientation = dotNetObject.orientation;
    }
    if (hasValue(dotNetObject.radius)) {
        jsVisibleElements.radius = dotNetObject.radius;
    }
    if (hasValue(dotNetObject.rotation)) {
        jsVisibleElements.rotation = dotNetObject.rotation;
    }
    if (hasValue(dotNetObject.scale)) {
        jsVisibleElements.scale = dotNetObject.scale;
    }
    if (hasValue(dotNetObject.size)) {
        jsVisibleElements.size = dotNetObject.size;
    }
    if (hasValue(dotNetObject.totalLength)) {
        jsVisibleElements.totalLength = dotNetObject.totalLength;
    }
    let { default: VisibleElementsWrapper } = await import('./visibleElements');
    let visibleElementsWrapper = new VisibleElementsWrapper(jsVisibleElements);
    visibleElementsWrapper.geoBlazorId = dotNetObject.id;
    visibleElementsWrapper.viewId = viewId;
    visibleElementsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(visibleElementsWrapper);
    jsObjectRefs[dotNetObject.id] = visibleElementsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsVisibleElements;
    
    let { buildDotNetVisibleElements } = await import('./visibleElements');
    let dnInstantiatedObject = await buildDotNetVisibleElements(jsVisibleElements, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for VisibleElements', e);
    }
    
    return jsVisibleElements;
}

export async function buildDotNetVisibleElementsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVisibleElements: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.area)) {
            dotNetVisibleElements.area = jsObject.area;
        }
        if (hasValue(jsObject.coordinates)) {
            dotNetVisibleElements.coordinates = jsObject.coordinates;
        }
        if (hasValue(jsObject.direction)) {
            dotNetVisibleElements.direction = jsObject.direction;
        }
        if (hasValue(jsObject.distance)) {
            dotNetVisibleElements.distance = jsObject.distance;
        }
        if (hasValue(jsObject.elevation)) {
            dotNetVisibleElements.elevation = jsObject.elevation;
        }
        if (hasValue(jsObject.header)) {
            dotNetVisibleElements.header = jsObject.header;
        }
        if (hasValue(jsObject.helpMessage)) {
            dotNetVisibleElements.helpMessage = jsObject.helpMessage;
        }
        if (hasValue(jsObject.orientation)) {
            dotNetVisibleElements.orientation = jsObject.orientation;
        }
        if (hasValue(jsObject.radius)) {
            dotNetVisibleElements.radius = jsObject.radius;
        }
        if (hasValue(jsObject.rotation)) {
            dotNetVisibleElements.rotation = jsObject.rotation;
        }
        if (hasValue(jsObject.scale)) {
            dotNetVisibleElements.scale = jsObject.scale;
        }
        if (hasValue(jsObject.size)) {
            dotNetVisibleElements.size = jsObject.size;
        }
        if (hasValue(jsObject.totalLength)) {
            dotNetVisibleElements.totalLength = jsObject.totalLength;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetVisibleElements.id = k;
                break;
            }
        }
    }

    return dotNetVisibleElements;
}

