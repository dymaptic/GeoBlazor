// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetCIMVectorMarker } from './cIMVectorMarker';

export async function buildJsCIMVectorMarkerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCIMVectorMarker: any = {}
    if (hasValue(dotNetObject.markerGraphics)) {
        let { buildJsCIMMarkerGraphic } = await import('./cIMMarkerGraphic');
        jsCIMVectorMarker.markerGraphics = await Promise.all(dotNetObject.markerGraphics.map(async i => await buildJsCIMMarkerGraphic(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.anchorPoint)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedAnchorPoint } = dotNetObject.anchorPoint;
        jsCIMVectorMarker.anchorPoint = sanitizedAnchorPoint;
    }
    if (hasValue(dotNetObject.anchorPointUnits)) {
        jsCIMVectorMarker.anchorPointUnits = dotNetObject.anchorPointUnits;
    }
    if (hasValue(dotNetObject.angleX)) {
        jsCIMVectorMarker.angleX = dotNetObject.angleX;
    }
    if (hasValue(dotNetObject.angleY)) {
        jsCIMVectorMarker.angleY = dotNetObject.angleY;
    }
    if (hasValue(dotNetObject.billboardMode3D)) {
        jsCIMVectorMarker.billboardMode3D = dotNetObject.billboardMode3D;
    }
    if (hasValue(dotNetObject.clippingPath)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedClippingPath } = dotNetObject.clippingPath;
        jsCIMVectorMarker.clippingPath = sanitizedClippingPath;
    }
    if (hasValue(dotNetObject.colorLocked)) {
        jsCIMVectorMarker.colorLocked = dotNetObject.colorLocked;
    }
    if (hasValue(dotNetObject.depth3D)) {
        jsCIMVectorMarker.depth3D = dotNetObject.depth3D;
    }
    if (hasValue(dotNetObject.dominantSizeAxis3D)) {
        jsCIMVectorMarker.dominantSizeAxis3D = dotNetObject.dominantSizeAxis3D;
    }
    if (hasValue(dotNetObject.effects)) {
        jsCIMVectorMarker.effects = dotNetObject.effects;
    }
    if (hasValue(dotNetObject.enable)) {
        jsCIMVectorMarker.enable = dotNetObject.enable;
    }
    if (hasValue(dotNetObject.frame)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedFrame } = dotNetObject.frame;
        jsCIMVectorMarker.frame = sanitizedFrame;
    }
    if (hasValue(dotNetObject.markerPlacement)) {
        jsCIMVectorMarker.markerPlacement = dotNetObject.markerPlacement;
    }
    if (hasValue(dotNetObject.name)) {
        jsCIMVectorMarker.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.offsetX)) {
        jsCIMVectorMarker.offsetX = dotNetObject.offsetX;
    }
    if (hasValue(dotNetObject.offsetY)) {
        jsCIMVectorMarker.offsetY = dotNetObject.offsetY;
    }
    if (hasValue(dotNetObject.offsetZ)) {
        jsCIMVectorMarker.offsetZ = dotNetObject.offsetZ;
    }
    if (hasValue(dotNetObject.overprint)) {
        jsCIMVectorMarker.overprint = dotNetObject.overprint;
    }
    if (hasValue(dotNetObject.primitiveName)) {
        jsCIMVectorMarker.primitiveName = dotNetObject.primitiveName;
    }
    if (hasValue(dotNetObject.respectFrame)) {
        jsCIMVectorMarker.respectFrame = dotNetObject.respectFrame;
    }
    if (hasValue(dotNetObject.rotateClockwise)) {
        jsCIMVectorMarker.rotateClockwise = dotNetObject.rotateClockwise;
    }
    if (hasValue(dotNetObject.rotation)) {
        jsCIMVectorMarker.rotation = dotNetObject.rotation;
    }
    if (hasValue(dotNetObject.scaleSymbolsProportionally)) {
        jsCIMVectorMarker.scaleSymbolsProportionally = dotNetObject.scaleSymbolsProportionally;
    }
    if (hasValue(dotNetObject.size)) {
        jsCIMVectorMarker.size = dotNetObject.size;
    }
    if (hasValue(dotNetObject.verticalOrientation3D)) {
        jsCIMVectorMarker.verticalOrientation3D = dotNetObject.verticalOrientation3D;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsCIMVectorMarker);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCIMVectorMarker;
    
    let dnInstantiatedObject = await buildDotNetCIMVectorMarker(jsCIMVectorMarker);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CIMVectorMarker', e);
    }
    
    return jsCIMVectorMarker;
}

export async function buildDotNetCIMVectorMarkerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCIMVectorMarker: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.markerGraphics)) {
            let { buildDotNetCIMMarkerGraphic } = await import('./cIMMarkerGraphic');
            dotNetCIMVectorMarker.markerGraphics = await Promise.all(jsObject.markerGraphics.map(async i => await buildDotNetCIMMarkerGraphic(i)));
        }
        if (hasValue(jsObject.anchorPoint)) {
            dotNetCIMVectorMarker.anchorPoint = jsObject.anchorPoint;
        }
        if (hasValue(jsObject.anchorPointUnits)) {
            dotNetCIMVectorMarker.anchorPointUnits = jsObject.anchorPointUnits;
        }
        if (hasValue(jsObject.angleX)) {
            dotNetCIMVectorMarker.angleX = jsObject.angleX;
        }
        if (hasValue(jsObject.angleY)) {
            dotNetCIMVectorMarker.angleY = jsObject.angleY;
        }
        if (hasValue(jsObject.billboardMode3D)) {
            dotNetCIMVectorMarker.billboardMode3D = jsObject.billboardMode3D;
        }
        if (hasValue(jsObject.clippingPath)) {
            dotNetCIMVectorMarker.clippingPath = jsObject.clippingPath;
        }
        if (hasValue(jsObject.colorLocked)) {
            dotNetCIMVectorMarker.colorLocked = jsObject.colorLocked;
        }
        if (hasValue(jsObject.depth3D)) {
            dotNetCIMVectorMarker.depth3D = jsObject.depth3D;
        }
        if (hasValue(jsObject.dominantSizeAxis3D)) {
            dotNetCIMVectorMarker.dominantSizeAxis3D = jsObject.dominantSizeAxis3D;
        }
        if (hasValue(jsObject.effects)) {
            dotNetCIMVectorMarker.effects = jsObject.effects;
        }
        if (hasValue(jsObject.enable)) {
            dotNetCIMVectorMarker.enable = jsObject.enable;
        }
        if (hasValue(jsObject.frame)) {
            dotNetCIMVectorMarker.frame = jsObject.frame;
        }
        if (hasValue(jsObject.markerPlacement)) {
            dotNetCIMVectorMarker.markerPlacement = jsObject.markerPlacement;
        }
        if (hasValue(jsObject.name)) {
            dotNetCIMVectorMarker.name = jsObject.name;
        }
        if (hasValue(jsObject.offsetX)) {
            dotNetCIMVectorMarker.offsetX = jsObject.offsetX;
        }
        if (hasValue(jsObject.offsetY)) {
            dotNetCIMVectorMarker.offsetY = jsObject.offsetY;
        }
        if (hasValue(jsObject.offsetZ)) {
            dotNetCIMVectorMarker.offsetZ = jsObject.offsetZ;
        }
        if (hasValue(jsObject.overprint)) {
            dotNetCIMVectorMarker.overprint = jsObject.overprint;
        }
        if (hasValue(jsObject.primitiveName)) {
            dotNetCIMVectorMarker.primitiveName = jsObject.primitiveName;
        }
        if (hasValue(jsObject.respectFrame)) {
            dotNetCIMVectorMarker.respectFrame = jsObject.respectFrame;
        }
        if (hasValue(jsObject.rotateClockwise)) {
            dotNetCIMVectorMarker.rotateClockwise = jsObject.rotateClockwise;
        }
        if (hasValue(jsObject.rotation)) {
            dotNetCIMVectorMarker.rotation = jsObject.rotation;
        }
        if (hasValue(jsObject.scaleSymbolsProportionally)) {
            dotNetCIMVectorMarker.scaleSymbolsProportionally = jsObject.scaleSymbolsProportionally;
        }
        if (hasValue(jsObject.size)) {
            dotNetCIMVectorMarker.size = jsObject.size;
        }
        if (hasValue(jsObject.type)) {
            dotNetCIMVectorMarker.type = jsObject.type;
        }
        if (hasValue(jsObject.verticalOrientation3D)) {
            dotNetCIMVectorMarker.verticalOrientation3D = jsObject.verticalOrientation3D;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCIMVectorMarker.id = k;
                break;
            }
        }
    }

    return dotNetCIMVectorMarker;
}

