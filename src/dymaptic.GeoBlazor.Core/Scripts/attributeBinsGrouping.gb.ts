// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import AttributeBinsGrouping from '@arcgis/core/rest/support/AttributeBinsGrouping';
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetAttributeBinsGrouping } from './attributeBinsGrouping';

export async function buildJsAttributeBinsGroupingGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.alias)) {
        properties.alias = dotNetObject.alias;
    }
    if (hasValue(dotNetObject.value)) {
        properties.value = dotNetObject.value;
    }
    if (hasValue(dotNetObject.valueType)) {
        properties.valueType = dotNetObject.valueType;
    }
    let jsAttributeBinsGrouping = new AttributeBinsGrouping(properties);
    
    jsObjectRefs[dotNetObject.id] = jsAttributeBinsGrouping;
    arcGisObjectRefs[dotNetObject.id] = jsAttributeBinsGrouping;
    
    return jsAttributeBinsGrouping;
}


export async function buildDotNetAttributeBinsGroupingGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAttributeBinsGrouping: any = {};
    
    if (hasValue(jsObject.alias)) {
        dotNetAttributeBinsGrouping.alias = jsObject.alias;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetAttributeBinsGrouping.type = removeCircularReferences(jsObject.type);
    }
    
    if (hasValue(jsObject.value)) {
        dotNetAttributeBinsGrouping.value = jsObject.value;
    }
    
    if (hasValue(jsObject.valueType)) {
        dotNetAttributeBinsGrouping.valueType = removeCircularReferences(jsObject.valueType);
    }
    

    return dotNetAttributeBinsGrouping;
}

