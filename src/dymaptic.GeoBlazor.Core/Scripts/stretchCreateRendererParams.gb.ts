// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetStretchCreateRendererParams } from './stretchCreateRendererParams';

export async function buildJsStretchCreateRendererParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsstretchCreateRendererParams: any = {}
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsstretchCreateRendererParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.bandId)) {
        jsstretchCreateRendererParams.bandId = dotNetObject.bandId;
    }
    if (hasValue(dotNetObject.colorRamp)) {
        jsstretchCreateRendererParams.colorRamp = dotNetObject.colorRamp;
    }
    if (hasValue(dotNetObject.dynamicRangeAdjustment)) {
        jsstretchCreateRendererParams.dynamicRangeAdjustment = dotNetObject.dynamicRangeAdjustment;
    }
    if (hasValue(dotNetObject.estimateStatistics)) {
        jsstretchCreateRendererParams.estimateStatistics = dotNetObject.estimateStatistics;
    }
    if (hasValue(dotNetObject.gamma)) {
        jsstretchCreateRendererParams.gamma = dotNetObject.gamma;
    }
    if (hasValue(dotNetObject.rasterFunction)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedRasterFunction } = dotNetObject.rasterFunction;
        jsstretchCreateRendererParams.rasterFunction = sanitizedRasterFunction;
    }
    if (hasValue(dotNetObject.renderingRule)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedRenderingRule } = dotNetObject.renderingRule;
        jsstretchCreateRendererParams.renderingRule = sanitizedRenderingRule;
    }
    if (hasValue(dotNetObject.signal)) {
        jsstretchCreateRendererParams.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.stretchType)) {
        jsstretchCreateRendererParams.stretchType = dotNetObject.stretchType;
    }
    if (hasValue(dotNetObject.useGamma)) {
        jsstretchCreateRendererParams.useGamma = dotNetObject.useGamma;
    }
    if (hasValue(dotNetObject.variableName)) {
        jsstretchCreateRendererParams.variableName = dotNetObject.variableName;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsstretchCreateRendererParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsstretchCreateRendererParams;
    
    let dnInstantiatedObject = await buildDotNetStretchCreateRendererParams(jsstretchCreateRendererParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for StretchCreateRendererParams', e);
    }
    
    return jsstretchCreateRendererParams;
}

export async function buildDotNetStretchCreateRendererParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetStretchCreateRendererParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.bandId)) {
            dotNetStretchCreateRendererParams.bandId = jsObject.bandId;
        }
        if (hasValue(jsObject.colorRamp)) {
            dotNetStretchCreateRendererParams.colorRamp = jsObject.colorRamp;
        }
        if (hasValue(jsObject.dynamicRangeAdjustment)) {
            dotNetStretchCreateRendererParams.dynamicRangeAdjustment = jsObject.dynamicRangeAdjustment;
        }
        if (hasValue(jsObject.estimateStatistics)) {
            dotNetStretchCreateRendererParams.estimateStatistics = jsObject.estimateStatistics;
        }
        if (hasValue(jsObject.gamma)) {
            dotNetStretchCreateRendererParams.gamma = jsObject.gamma;
        }
        if (hasValue(jsObject.rasterFunction)) {
            dotNetStretchCreateRendererParams.rasterFunction = jsObject.rasterFunction;
        }
        if (hasValue(jsObject.renderingRule)) {
            dotNetStretchCreateRendererParams.renderingRule = jsObject.renderingRule;
        }
        if (hasValue(jsObject.signal)) {
            dotNetStretchCreateRendererParams.signal = jsObject.signal;
        }
        if (hasValue(jsObject.stretchType)) {
            dotNetStretchCreateRendererParams.stretchType = jsObject.stretchType;
        }
        if (hasValue(jsObject.useGamma)) {
            dotNetStretchCreateRendererParams.useGamma = jsObject.useGamma;
        }
        if (hasValue(jsObject.variableName)) {
            dotNetStretchCreateRendererParams.variableName = jsObject.variableName;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetStretchCreateRendererParams.id = k;
                break;
            }
        }
    }

    return dotNetStretchCreateRendererParams;
}

