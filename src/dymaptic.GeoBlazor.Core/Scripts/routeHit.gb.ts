// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import RouteHit = __esri.RouteHit;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class RouteHitGenerated implements IPropertyWrapper {
    public component: RouteHit;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: RouteHit) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getLayer(): Promise<any> {
        if (!hasValue(this.component.layer)) {
            return null;
        }
        
        let { buildDotNetRouteLayer } = await import('./routeLayer');
        return await buildDotNetRouteLayer(this.component.layer);
    }
    async setLayer(value: any): Promise<void> {
        let { buildJsRouteLayer } = await import('./routeLayer');
        this.component.layer = await  buildJsRouteLayer(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsRouteHitGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsRouteHit: any = {}
    if (hasValue(dotNetObject.layer)) {
        let { buildJsRouteLayer } = await import('./routeLayer');
        jsRouteHit.layer = await buildJsRouteLayer(dotNetObject.layer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.mapPoint)) {
        let { buildJsPoint } = await import('./point');
        jsRouteHit.mapPoint = buildJsPoint(dotNetObject.mapPoint) as any;
    }
    if (hasValue(dotNetObject.networkFeature)) {
        jsRouteHit.networkFeature = dotNetObject.iRouteHitNetworkFeature;
    }


    let { default: RouteHitWrapper } = await import('./routeHit');
    let routeHitWrapper = new RouteHitWrapper(jsRouteHit);
    routeHitWrapper.geoBlazorId = dotNetObject.id;
    routeHitWrapper.viewId = viewId;
    routeHitWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(routeHitWrapper);
    jsObjectRefs[dotNetObject.id] = routeHitWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsRouteHit;
    let { buildDotNetRouteHit } = await import('./routeHit');
    let dnInstantiatedObject = await buildDotNetRouteHit(jsRouteHit);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RouteHit', e);
    }
    
    return jsRouteHit;
}
export async function buildDotNetRouteHitGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRouteHit: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.mapPoint)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetRouteHit.mapPoint = buildDotNetPoint(jsObject.mapPoint);
        }
        dotNetRouteHit.networkFeature = jsObject.networkFeature;
        if (hasValue(jsObject.type)) {
            dotNetRouteHit.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRouteHit.id = k;
                break;
            }
        }
    }

    return dotNetRouteHit;
}

