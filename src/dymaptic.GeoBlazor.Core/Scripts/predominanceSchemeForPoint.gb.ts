// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetPredominanceSchemeForPoint } from './predominanceSchemeForPoint';
import PredominanceSchemeForPoint = __esri.PredominanceSchemeForPoint;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsPredominanceSchemeForPointGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPredominanceSchemeForPoint: any = {}
    if (hasValue(dotNetObject.colors)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsPredominanceSchemeForPoint.colors = dotNetObject.colors.map(i => buildJsMapColor(i)) as any;
    }
    if (hasValue(dotNetObject.noDataColor)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsPredominanceSchemeForPoint.noDataColor = buildJsMapColor(dotNetObject.noDataColor) as any;
    }
    if (hasValue(dotNetObject.outline)) {
        let { buildJsPredominanceSchemeForPointOutline } = await import('./predominanceSchemeForPointOutline');
        jsPredominanceSchemeForPoint.outline = await buildJsPredominanceSchemeForPointOutline(dotNetObject.outline, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.sizeScheme)) {
        let { buildJsSizeSchemeForPoint } = await import('./sizeSchemeForPoint');
        jsPredominanceSchemeForPoint.sizeScheme = await buildJsSizeSchemeForPoint(dotNetObject.sizeScheme, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.name)) {
        jsPredominanceSchemeForPoint.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.opacity)) {
        jsPredominanceSchemeForPoint.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.tags)) {
        jsPredominanceSchemeForPoint.tags = dotNetObject.tags;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsPredominanceSchemeForPoint);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPredominanceSchemeForPoint;
    
    let dnInstantiatedObject = await buildDotNetPredominanceSchemeForPoint(jsPredominanceSchemeForPoint);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PredominanceSchemeForPoint', e);
    }
    
    return jsPredominanceSchemeForPoint;
}

export async function buildDotNetPredominanceSchemeForPointGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPredominanceSchemeForPoint: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.colors)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetPredominanceSchemeForPoint.colors = jsObject.colors.map(i => buildDotNetMapColor(i));
        }
        if (hasValue(jsObject.noDataColor)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetPredominanceSchemeForPoint.noDataColor = buildDotNetMapColor(jsObject.noDataColor);
        }
        if (hasValue(jsObject.outline)) {
            let { buildDotNetPredominanceSchemeForPointOutline } = await import('./predominanceSchemeForPointOutline');
            dotNetPredominanceSchemeForPoint.outline = await buildDotNetPredominanceSchemeForPointOutline(jsObject.outline);
        }
        if (hasValue(jsObject.sizeScheme)) {
            let { buildDotNetSizeSchemeForPoint } = await import('./sizeSchemeForPoint');
            dotNetPredominanceSchemeForPoint.sizeScheme = await buildDotNetSizeSchemeForPoint(jsObject.sizeScheme);
        }
        if (hasValue(jsObject.name)) {
            dotNetPredominanceSchemeForPoint.name = jsObject.name;
        }
        if (hasValue(jsObject.opacity)) {
            dotNetPredominanceSchemeForPoint.opacity = jsObject.opacity;
        }
        if (hasValue(jsObject.tags)) {
            dotNetPredominanceSchemeForPoint.tags = jsObject.tags;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPredominanceSchemeForPoint.id = k;
                break;
            }
        }
    }

    return dotNetPredominanceSchemeForPoint;
}

