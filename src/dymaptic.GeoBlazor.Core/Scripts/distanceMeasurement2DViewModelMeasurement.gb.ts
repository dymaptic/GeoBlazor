// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import DistanceMeasurement2DViewModelMeasurement = __esri.DistanceMeasurement2DViewModelMeasurement;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class DistanceMeasurement2DViewModelMeasurementGenerated implements IPropertyWrapper {
    public component: DistanceMeasurement2DViewModelMeasurement;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: DistanceMeasurement2DViewModelMeasurement) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsDistanceMeasurement2DViewModelMeasurementGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsDistanceMeasurement2DViewModelMeasurement: any = {}

    if (hasValue(dotNetObject.geometry)) {
        jsDistanceMeasurement2DViewModelMeasurement.geometry = dotNetObject.geometry;
    }
    if (hasValue(dotNetObject.length)) {
        jsDistanceMeasurement2DViewModelMeasurement.length = dotNetObject.length;
    }
    let { default: DistanceMeasurement2DViewModelMeasurementWrapper } = await import('./distanceMeasurement2DViewModelMeasurement');
    let distanceMeasurement2DViewModelMeasurementWrapper = new DistanceMeasurement2DViewModelMeasurementWrapper(jsDistanceMeasurement2DViewModelMeasurement);
    distanceMeasurement2DViewModelMeasurementWrapper.geoBlazorId = dotNetObject.id;
    distanceMeasurement2DViewModelMeasurementWrapper.viewId = viewId;
    distanceMeasurement2DViewModelMeasurementWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(distanceMeasurement2DViewModelMeasurementWrapper);
    jsObjectRefs[dotNetObject.id] = distanceMeasurement2DViewModelMeasurementWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsDistanceMeasurement2DViewModelMeasurement;
    
    let { buildDotNetDistanceMeasurement2DViewModelMeasurement } = await import('./distanceMeasurement2DViewModelMeasurement');
    let dnInstantiatedObject = await buildDotNetDistanceMeasurement2DViewModelMeasurement(jsDistanceMeasurement2DViewModelMeasurement, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DistanceMeasurement2DViewModelMeasurement', e);
    }
    
    return jsDistanceMeasurement2DViewModelMeasurement;
}

export async function buildDotNetDistanceMeasurement2DViewModelMeasurementGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDistanceMeasurement2DViewModelMeasurement: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.geometry)) {
            dotNetDistanceMeasurement2DViewModelMeasurement.geometry = jsObject.geometry;
        }
        if (hasValue(jsObject.length)) {
            dotNetDistanceMeasurement2DViewModelMeasurement.length = jsObject.length;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetDistanceMeasurement2DViewModelMeasurement.id = k;
                break;
            }
        }
    }

    return dotNetDistanceMeasurement2DViewModelMeasurement;
}

