// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetDistanceMeasurement2DViewModelMeasurement } from './distanceMeasurement2DViewModelMeasurement';

export async function buildJsDistanceMeasurement2DViewModelMeasurementGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsDistanceMeasurement2DViewModelMeasurement: any = {};
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsPolyline } = await import('./polyline');
        jsDistanceMeasurement2DViewModelMeasurement.geometry = buildJsPolyline(dotNetObject.geometry) as any;
    }

    if (hasValue(dotNetObject.length)) {
        jsDistanceMeasurement2DViewModelMeasurement.length = dotNetObject.length;
    }
    
    jsObjectRefs[dotNetObject.id] = jsDistanceMeasurement2DViewModelMeasurement;
    arcGisObjectRefs[dotNetObject.id] = jsDistanceMeasurement2DViewModelMeasurement;
    
    return jsDistanceMeasurement2DViewModelMeasurement;
}


export async function buildDotNetDistanceMeasurement2DViewModelMeasurementGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDistanceMeasurement2DViewModelMeasurement: any = {};
    
    if (hasValue(jsObject.geometry)) {
        let { buildDotNetPolyline } = await import('./polyline');
        dotNetDistanceMeasurement2DViewModelMeasurement.geometry = buildDotNetPolyline(jsObject.geometry);
    }
    
    if (hasValue(jsObject.length)) {
        dotNetDistanceMeasurement2DViewModelMeasurement.length = jsObject.length;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetDistanceMeasurement2DViewModelMeasurement.id = geoBlazorId;
    }

    return dotNetDistanceMeasurement2DViewModelMeasurement;
}

