// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetPopupViewOpenPopupOptions } from './popupViewOpenPopupOptions';
import PopupViewOpenPopupOptions = __esri.PopupViewOpenPopupOptions;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsPopupViewOpenPopupOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPopupViewOpenPopupOptions: any = {}
    if (hasValue(dotNetObject.features)) {
        let { buildJsGraphic } = await import('./graphic');
        jsPopupViewOpenPopupOptions.features = dotNetObject.features.map(i => buildJsGraphic(i)) as any;
    }
    if (hasValue(dotNetObject.location)) {
        let { buildJsPoint } = await import('./point');
        jsPopupViewOpenPopupOptions.location = buildJsPoint(dotNetObject.location) as any;
    }

    if (hasValue(dotNetObject.collapsed)) {
        jsPopupViewOpenPopupOptions.collapsed = dotNetObject.collapsed;
    }
    if (hasValue(dotNetObject.content)) {
        jsPopupViewOpenPopupOptions.content = dotNetObject.content;
    }
    if (hasValue(dotNetObject.featureMenuOpen)) {
        jsPopupViewOpenPopupOptions.featureMenuOpen = dotNetObject.featureMenuOpen;
    }
    if (hasValue(dotNetObject.fetchFeatures)) {
        jsPopupViewOpenPopupOptions.fetchFeatures = dotNetObject.fetchFeatures;
    }
    if (hasValue(dotNetObject.promises)) {
        jsPopupViewOpenPopupOptions.promises = dotNetObject.promises;
    }
    if (hasValue(dotNetObject.shouldFocus)) {
        jsPopupViewOpenPopupOptions.shouldFocus = dotNetObject.shouldFocus;
    }
    if (hasValue(dotNetObject.title)) {
        jsPopupViewOpenPopupOptions.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.updateLocationEnabled)) {
        jsPopupViewOpenPopupOptions.updateLocationEnabled = dotNetObject.updateLocationEnabled;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsPopupViewOpenPopupOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPopupViewOpenPopupOptions;
    
    let dnInstantiatedObject = await buildDotNetPopupViewOpenPopupOptions(jsPopupViewOpenPopupOptions);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PopupViewOpenPopupOptions', e);
    }
    
    return jsPopupViewOpenPopupOptions;
}

export async function buildDotNetPopupViewOpenPopupOptionsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPopupViewOpenPopupOptions: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.features)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetPopupViewOpenPopupOptions.features = jsObject.features.map(i => buildDotNetGraphic(i, layerId, viewId));
        }
        if (hasValue(jsObject.location)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetPopupViewOpenPopupOptions.location = buildDotNetPoint(jsObject.location);
        }
        if (hasValue(jsObject.collapsed)) {
            dotNetPopupViewOpenPopupOptions.collapsed = jsObject.collapsed;
        }
        if (hasValue(jsObject.content)) {
            dotNetPopupViewOpenPopupOptions.content = jsObject.content;
        }
        if (hasValue(jsObject.featureMenuOpen)) {
            dotNetPopupViewOpenPopupOptions.featureMenuOpen = jsObject.featureMenuOpen;
        }
        if (hasValue(jsObject.fetchFeatures)) {
            dotNetPopupViewOpenPopupOptions.fetchFeatures = jsObject.fetchFeatures;
        }
        if (hasValue(jsObject.promises)) {
            dotNetPopupViewOpenPopupOptions.promises = jsObject.promises;
        }
        if (hasValue(jsObject.shouldFocus)) {
            dotNetPopupViewOpenPopupOptions.shouldFocus = jsObject.shouldFocus;
        }
        if (hasValue(jsObject.title)) {
            dotNetPopupViewOpenPopupOptions.title = jsObject.title;
        }
        if (hasValue(jsObject.updateLocationEnabled)) {
            dotNetPopupViewOpenPopupOptions.updateLocationEnabled = jsObject.updateLocationEnabled;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPopupViewOpenPopupOptions.id = k;
                break;
            }
        }
    }

    return dotNetPopupViewOpenPopupOptions;
}

