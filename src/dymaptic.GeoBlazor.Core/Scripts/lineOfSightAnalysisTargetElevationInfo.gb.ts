// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetLineOfSightAnalysisTargetElevationInfo } from './lineOfSightAnalysisTargetElevationInfo';

export async function buildJsLineOfSightAnalysisTargetElevationInfoGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsLineOfSightAnalysisTargetElevationInfo: any = {};

    if (hasValue(dotNetObject.mode)) {
        jsLineOfSightAnalysisTargetElevationInfo.mode = dotNetObject.mode;
    }
    if (hasValue(dotNetObject.offset)) {
        jsLineOfSightAnalysisTargetElevationInfo.offset = dotNetObject.offset;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsLineOfSightAnalysisTargetElevationInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLineOfSightAnalysisTargetElevationInfo;
    
    return jsLineOfSightAnalysisTargetElevationInfo;
}


export async function buildDotNetLineOfSightAnalysisTargetElevationInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLineOfSightAnalysisTargetElevationInfo: any = {};
    
    if (hasValue(jsObject.mode)) {
        dotNetLineOfSightAnalysisTargetElevationInfo.mode = removeCircularReferences(jsObject.mode);
    }
    
    if (hasValue(jsObject.offset)) {
        dotNetLineOfSightAnalysisTargetElevationInfo.offset = jsObject.offset;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetLineOfSightAnalysisTargetElevationInfo.id = geoBlazorId;
    }

    return dotNetLineOfSightAnalysisTargetElevationInfo;
}

