// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetBuildingFilterBlock } from './buildingFilterBlock';

export async function buildJsBuildingFilterBlockGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsBuildingFilterBlock: any = {};
    if (hasValue(dotNetObject.filterMode)) {
        let { buildJsBuildingFilterBlockFilterMode } = await import('./buildingFilterBlockFilterMode');
        jsBuildingFilterBlock.filterMode = await buildJsBuildingFilterBlockFilterMode(dotNetObject.filterMode, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.filterExpression)) {
        jsBuildingFilterBlock.filterExpression = dotNetObject.filterExpression;
    }
    if (hasValue(dotNetObject.title)) {
        jsBuildingFilterBlock.title = dotNetObject.title;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsBuildingFilterBlock);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsBuildingFilterBlock;
    
    return jsBuildingFilterBlock;
}


export async function buildDotNetBuildingFilterBlockGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBuildingFilterBlock: any = {};
    
    if (hasValue(jsObject.filterMode)) {
        let { buildDotNetBuildingFilterBlockFilterMode } = await import('./buildingFilterBlockFilterMode');
        dotNetBuildingFilterBlock.filterMode = await buildDotNetBuildingFilterBlockFilterMode(jsObject.filterMode, layerId, viewId);
    }
    
    if (hasValue(jsObject.filterExpression)) {
        dotNetBuildingFilterBlock.filterExpression = jsObject.filterExpression;
    }
    
    if (hasValue(jsObject.title)) {
        dotNetBuildingFilterBlock.title = jsObject.title;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetBuildingFilterBlock.id = geoBlazorId;
    }

    return dotNetBuildingFilterBlock;
}

