// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetSearchCompleteEvent } from './searchCompleteEvent';

export async function buildJsSearchCompleteEventGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSearchSearchCompleteEvent: any = {};
    if (hasValue(dotNetObject.results) && dotNetObject.results.length > 0) {
        let { buildJsSearchCompleteEventResults } = await import('./searchCompleteEventResults');
        jsSearchSearchCompleteEvent.results = await Promise.all(dotNetObject.results.map(async i => await buildJsSearchCompleteEventResults(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.activeSourceIndex)) {
        jsSearchSearchCompleteEvent.activeSourceIndex = dotNetObject.activeSourceIndex;
    }
    if (hasValue(dotNetObject.errors) && dotNetObject.errors.length > 0) {
        jsSearchSearchCompleteEvent.errors = dotNetObject.errors;
    }
    if (hasValue(dotNetObject.numResults)) {
        jsSearchSearchCompleteEvent.numResults = dotNetObject.numResults;
    }
    if (hasValue(dotNetObject.searchTerm)) {
        jsSearchSearchCompleteEvent.searchTerm = dotNetObject.searchTerm;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSearchSearchCompleteEvent);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSearchSearchCompleteEvent;
    
    return jsSearchSearchCompleteEvent;
}


export async function buildDotNetSearchCompleteEventGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchCompleteEvent: any = {};
    
    if (hasValue(jsObject.results)) {
        let { buildDotNetSearchCompleteEventResults } = await import('./searchCompleteEventResults');
        dotNetSearchCompleteEvent.results = await Promise.all(jsObject.results.map(async i => await buildDotNetSearchCompleteEventResults(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.activeSourceIndex)) {
        dotNetSearchCompleteEvent.activeSourceIndex = jsObject.activeSourceIndex;
    }
    
    if (hasValue(jsObject.errors)) {
        dotNetSearchCompleteEvent.errors = removeCircularReferences(jsObject.errors);
    }
    
    if (hasValue(jsObject.numResults)) {
        dotNetSearchCompleteEvent.numResults = jsObject.numResults;
    }
    
    if (hasValue(jsObject.searchTerm)) {
        dotNetSearchCompleteEvent.searchTerm = jsObject.searchTerm;
    }
    

    return dotNetSearchCompleteEvent;
}

