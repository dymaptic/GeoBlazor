// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import FeatureTemplatesSelectEvent = __esri.FeatureTemplatesSelectEvent;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FeatureTemplatesSelectEventGenerated implements IPropertyWrapper {
    public component: FeatureTemplatesSelectEvent;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: FeatureTemplatesSelectEvent) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getItem(): Promise<any> {
        if (!hasValue(this.component.item)) {
            return null;
        }
        
        let { buildDotNetTemplateItem } = await import('./templateItem');
        return await buildDotNetTemplateItem(this.component.item);
    }
    async setItem(value: any): Promise<void> {
        let { buildJsTemplateItem } = await import('./templateItem');
        this.component.item = await  buildJsTemplateItem(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsFeatureTemplatesSelectEventGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureTemplatesSelectEvent: any = {}
    if (hasValue(dotNetObject.item)) {
        let { buildJsTemplateItem } = await import('./templateItem');
        jsFeatureTemplatesSelectEvent.item = await buildJsTemplateItem(dotNetObject.item, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.template)) {
        jsFeatureTemplatesSelectEvent.template = dotNetObject.featureTemplate;
    }


    let { default: FeatureTemplatesSelectEventWrapper } = await import('./featureTemplatesSelectEvent');
    let featureTemplatesSelectEventWrapper = new FeatureTemplatesSelectEventWrapper(jsFeatureTemplatesSelectEvent);
    featureTemplatesSelectEventWrapper.geoBlazorId = dotNetObject.id;
    featureTemplatesSelectEventWrapper.viewId = viewId;
    featureTemplatesSelectEventWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(featureTemplatesSelectEventWrapper);
    jsObjectRefs[dotNetObject.id] = featureTemplatesSelectEventWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureTemplatesSelectEvent;
    let { buildDotNetFeatureTemplatesSelectEvent } = await import('./featureTemplatesSelectEvent');
    let dnInstantiatedObject = await buildDotNetFeatureTemplatesSelectEvent(jsFeatureTemplatesSelectEvent);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureTemplatesSelectEvent', e);
    }
    
    return jsFeatureTemplatesSelectEvent;
}
export async function buildDotNetFeatureTemplatesSelectEventGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureTemplatesSelectEvent: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.item)) {
            let { buildDotNetTemplateItem } = await import('./templateItem');
            dotNetFeatureTemplatesSelectEvent.item = await buildDotNetTemplateItem(jsObject.item);
        }
        dotNetFeatureTemplatesSelectEvent.template = jsObject.template;

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFeatureTemplatesSelectEvent.id = k;
                break;
            }
        }
    }

    return dotNetFeatureTemplatesSelectEvent;
}

