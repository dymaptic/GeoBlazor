// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetFeatureTemplatesSelectEvent } from './featureTemplatesSelectEvent';

export async function buildJsFeatureTemplatesSelectEventGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureTemplatesSelectEvent: any = {};
    if (hasValue(dotNetObject.item)) {
        let { buildJsTemplateItem } = await import('./templateItem');
        jsFeatureTemplatesSelectEvent.item = await buildJsTemplateItem(dotNetObject.item, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.template)) {
        let { buildJsFeatureTemplate } = await import('./featureTemplate');
        jsFeatureTemplatesSelectEvent.template = await buildJsFeatureTemplate(dotNetObject.template, layerId, viewId) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureTemplatesSelectEvent);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureTemplatesSelectEvent;
    
    let dnInstantiatedObject = await buildDotNetFeatureTemplatesSelectEvent(jsFeatureTemplatesSelectEvent);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureTemplatesSelectEvent', e);
    }
    
    return jsFeatureTemplatesSelectEvent;
}

export async function buildDotNetFeatureTemplatesSelectEventGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureTemplatesSelectEvent: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.item)) {
            let { buildDotNetTemplateItem } = await import('./templateItem');
            dotNetFeatureTemplatesSelectEvent.item = await buildDotNetTemplateItem(jsObject.item);
        }
        if (hasValue(jsObject.template)) {
            let { buildDotNetFeatureTemplate } = await import('./featureTemplate');
            dotNetFeatureTemplatesSelectEvent.template = await buildDotNetFeatureTemplate(jsObject.template);
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFeatureTemplatesSelectEvent.id = k;
                break;
            }
        }
    }

    return dotNetFeatureTemplatesSelectEvent;
}

