import {buildDotNetLayerSearchSource} from './layerSearchSource';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import LayerSearchSource from '@arcgis/core/widgets/Search/LayerSearchSource';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsLayerSearchSourceGenerated(dotNetObject: any): Promise<any> {
    let jsLayerSearchSource = new LayerSearchSource();
    if (hasValue(dotNetObject.filter)) {
        let {buildJsSearchSourceFilter} = await import('./searchSourceFilter');
        jsLayerSearchSource.filter = await buildJsSearchSourceFilter(dotNetObject.filter, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.hasGetResultsHandler) && dotNetObject.hasGetResultsHandler) {
        jsLayerSearchSource.getResults = async (parameters) => {
            return await dotNetObject.invokeMethodAsync('OnJsGetResultsHandler', parameters);
        };
    }
    if (hasValue(dotNetObject.hasGetSuggestionsHandler) && dotNetObject.hasGetSuggestionsHandler) {
        jsLayerSearchSource.getSuggestions = async (parameters) => {
            return await dotNetObject.invokeMethodAsync('OnJsGetSuggestionsHandler', parameters);
        };
    }
    if (hasValue(dotNetObject.layer)) {
        let {buildJsLayer} = await import('./layer');
        jsLayerSearchSource.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.popupTemplate)) {
        let {buildJsPopupTemplate} = await import('./popupTemplate');
        jsLayerSearchSource.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.resultSymbol)) {
        let {buildJsSymbol} = await import('./symbol');
        jsLayerSearchSource.resultSymbol = buildJsSymbol(dotNetObject.resultSymbol) as any;
    }

    if (hasValue(dotNetObject.autoNavigate)) {
        jsLayerSearchSource.autoNavigate = dotNetObject.autoNavigate;
    }
    if (hasValue(dotNetObject.displayField)) {
        jsLayerSearchSource.displayField = dotNetObject.displayField;
    }
    if (hasValue(dotNetObject.exactMatch)) {
        jsLayerSearchSource.exactMatch = dotNetObject.exactMatch;
    }
    if (hasValue(dotNetObject.maxResults)) {
        jsLayerSearchSource.maxResults = dotNetObject.maxResults;
    }
    if (hasValue(dotNetObject.maxSuggestions)) {
        jsLayerSearchSource.maxSuggestions = dotNetObject.maxSuggestions;
    }
    if (hasValue(dotNetObject.minSuggestCharacters)) {
        jsLayerSearchSource.minSuggestCharacters = dotNetObject.minSuggestCharacters;
    }
    if (hasValue(dotNetObject.name)) {
        jsLayerSearchSource.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.orderByFields)) {
        jsLayerSearchSource.orderByFields = dotNetObject.orderByFields;
    }
    if (hasValue(dotNetObject.outFields)) {
        jsLayerSearchSource.outFields = dotNetObject.outFields;
    }
    if (hasValue(dotNetObject.placeholder)) {
        jsLayerSearchSource.placeholder = dotNetObject.placeholder;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        jsLayerSearchSource.popupEnabled = dotNetObject.popupEnabled;
    }
    if (hasValue(dotNetObject.prefix)) {
        jsLayerSearchSource.prefix = dotNetObject.prefix;
    }
    if (hasValue(dotNetObject.resultGraphicEnabled)) {
        jsLayerSearchSource.resultGraphicEnabled = dotNetObject.resultGraphicEnabled;
    }
    if (hasValue(dotNetObject.searchFields)) {
        jsLayerSearchSource.searchFields = dotNetObject.searchFields;
    }
    if (hasValue(dotNetObject.searchTemplate)) {
        jsLayerSearchSource.searchTemplate = dotNetObject.searchTemplate;
    }
    if (hasValue(dotNetObject.suffix)) {
        jsLayerSearchSource.suffix = dotNetObject.suffix;
    }
    if (hasValue(dotNetObject.suggestionsEnabled)) {
        jsLayerSearchSource.suggestionsEnabled = dotNetObject.suggestionsEnabled;
    }
    if (hasValue(dotNetObject.suggestionTemplate)) {
        jsLayerSearchSource.suggestionTemplate = dotNetObject.suggestionTemplate;
    }
    if (hasValue(dotNetObject.withinViewEnabled)) {
        jsLayerSearchSource.withinViewEnabled = dotNetObject.withinViewEnabled;
    }
    if (hasValue(dotNetObject.zoomScale)) {
        jsLayerSearchSource.zoomScale = dotNetObject.zoomScale;
    }

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsLayerSearchSource);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLayerSearchSource;

    let dnInstantiatedObject = await buildDotNetLayerSearchSource(jsLayerSearchSource);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LayerSearchSource', e);
    }

    return jsLayerSearchSource;
}

export async function buildDotNetLayerSearchSourceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetLayerSearchSource: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.filter)) {
        let {buildDotNetSearchSourceFilter} = await import('./searchSourceFilter');
        dotNetLayerSearchSource.filter = await buildDotNetSearchSourceFilter(jsObject.filter);
    }
    if (hasValue(jsObject.popupTemplate)) {
        let {buildDotNetPopupTemplate} = await import('./popupTemplate');
        dotNetLayerSearchSource.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
    }
    if (hasValue(jsObject.resultSymbol)) {
        let {buildDotNetSymbol} = await import('./symbol');
        dotNetLayerSearchSource.resultSymbol = buildDotNetSymbol(jsObject.resultSymbol);
    }
    if (hasValue(jsObject.autoNavigate)) {
        dotNetLayerSearchSource.autoNavigate = jsObject.autoNavigate;
    }
    if (hasValue(jsObject.displayField)) {
        dotNetLayerSearchSource.displayField = jsObject.displayField;
    }
    if (hasValue(jsObject.exactMatch)) {
        dotNetLayerSearchSource.exactMatch = jsObject.exactMatch;
    }
    if (hasValue(jsObject.getResults)) {
        dotNetLayerSearchSource.getResultsHandler = jsObject.getResults;
    }
    if (hasValue(jsObject.getSuggestions)) {
        dotNetLayerSearchSource.getSuggestionsHandler = jsObject.getSuggestions;
    }
    if (hasValue(jsObject.maxResults)) {
        dotNetLayerSearchSource.maxResults = jsObject.maxResults;
    }
    if (hasValue(jsObject.maxSuggestions)) {
        dotNetLayerSearchSource.maxSuggestions = jsObject.maxSuggestions;
    }
    if (hasValue(jsObject.minSuggestCharacters)) {
        dotNetLayerSearchSource.minSuggestCharacters = jsObject.minSuggestCharacters;
    }
    if (hasValue(jsObject.name)) {
        dotNetLayerSearchSource.name = jsObject.name;
    }
    if (hasValue(jsObject.orderByFields)) {
        dotNetLayerSearchSource.orderByFields = jsObject.orderByFields;
    }
    if (hasValue(jsObject.outFields)) {
        dotNetLayerSearchSource.outFields = jsObject.outFields;
    }
    if (hasValue(jsObject.placeholder)) {
        dotNetLayerSearchSource.placeholder = jsObject.placeholder;
    }
    if (hasValue(jsObject.popupEnabled)) {
        dotNetLayerSearchSource.popupEnabled = jsObject.popupEnabled;
    }
    if (hasValue(jsObject.prefix)) {
        dotNetLayerSearchSource.prefix = jsObject.prefix;
    }
    if (hasValue(jsObject.resultGraphicEnabled)) {
        dotNetLayerSearchSource.resultGraphicEnabled = jsObject.resultGraphicEnabled;
    }
    if (hasValue(jsObject.searchFields)) {
        dotNetLayerSearchSource.searchFields = jsObject.searchFields;
    }
    if (hasValue(jsObject.searchTemplate)) {
        dotNetLayerSearchSource.searchTemplate = jsObject.searchTemplate;
    }
    if (hasValue(jsObject.suffix)) {
        dotNetLayerSearchSource.suffix = jsObject.suffix;
    }
    if (hasValue(jsObject.suggestionsEnabled)) {
        dotNetLayerSearchSource.suggestionsEnabled = jsObject.suggestionsEnabled;
    }
    if (hasValue(jsObject.suggestionTemplate)) {
        dotNetLayerSearchSource.suggestionTemplate = jsObject.suggestionTemplate;
    }
    if (hasValue(jsObject.withinViewEnabled)) {
        dotNetLayerSearchSource.withinViewEnabled = jsObject.withinViewEnabled;
    }
    if (hasValue(jsObject.zoomScale)) {
        dotNetLayerSearchSource.zoomScale = jsObject.zoomScale;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLayerSearchSource.id = k;
                break;
            }
        }
    }

    return dotNetLayerSearchSource;
}

