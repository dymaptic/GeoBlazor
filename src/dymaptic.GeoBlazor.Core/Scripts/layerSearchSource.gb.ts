// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import LayerSearchSource from '@arcgis/core/widgets/Search/LayerSearchSource';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';

export async function buildDotNetLayerSearchSourceGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLayerSearchSource: any = {};
    
    if (hasValue(jsObject.filter)) {
        let { buildDotNetSearchSourceFilter } = await import('./searchSourceFilter');
        dotNetLayerSearchSource.filter = await buildDotNetSearchSourceFilter(jsObject.filter, viewId);
    }
    
    if (hasValue(jsObject.popupTemplate)) {
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        dotNetLayerSearchSource.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
    }
    
    if (hasValue(jsObject.resultSymbol)) {
        let { buildDotNetSymbol } = await import('./symbol');
        dotNetLayerSearchSource.resultSymbol = buildDotNetSymbol(jsObject.resultSymbol);
    }
    
    if (hasValue(jsObject.autoNavigate)) {
        dotNetLayerSearchSource.autoNavigate = jsObject.autoNavigate;
    }
    
    if (hasValue(jsObject.displayField)) {
        dotNetLayerSearchSource.displayField = jsObject.displayField;
    }
    
    if (hasValue(jsObject.exactMatch)) {
        dotNetLayerSearchSource.exactMatch = jsObject.exactMatch;
    }
    
    if (hasValue(jsObject.maxResults)) {
        dotNetLayerSearchSource.maxResults = jsObject.maxResults;
    }
    
    if (hasValue(jsObject.maxSuggestions)) {
        dotNetLayerSearchSource.maxSuggestions = jsObject.maxSuggestions;
    }
    
    if (hasValue(jsObject.minSuggestCharacters)) {
        dotNetLayerSearchSource.minSuggestCharacters = jsObject.minSuggestCharacters;
    }
    
    if (hasValue(jsObject.name)) {
        dotNetLayerSearchSource.name = jsObject.name;
    }
    
    if (hasValue(jsObject.orderByFields)) {
        dotNetLayerSearchSource.orderByFields = jsObject.orderByFields;
    }
    
    if (hasValue(jsObject.outFields)) {
        dotNetLayerSearchSource.outFields = jsObject.outFields;
    }
    
    if (hasValue(jsObject.placeholder)) {
        dotNetLayerSearchSource.placeholder = jsObject.placeholder;
    }
    
    if (hasValue(jsObject.popupEnabled)) {
        dotNetLayerSearchSource.popupEnabled = jsObject.popupEnabled;
    }
    
    if (hasValue(jsObject.prefix)) {
        dotNetLayerSearchSource.prefix = jsObject.prefix;
    }
    
    if (hasValue(jsObject.resultGraphicEnabled)) {
        dotNetLayerSearchSource.resultGraphicEnabled = jsObject.resultGraphicEnabled;
    }
    
    if (hasValue(jsObject.searchFields)) {
        dotNetLayerSearchSource.searchFields = jsObject.searchFields;
    }
    
    if (hasValue(jsObject.searchTemplate)) {
        dotNetLayerSearchSource.searchTemplate = jsObject.searchTemplate;
    }
    
    if (hasValue(jsObject.suffix)) {
        dotNetLayerSearchSource.suffix = jsObject.suffix;
    }
    
    if (hasValue(jsObject.suggestionsEnabled)) {
        dotNetLayerSearchSource.suggestionsEnabled = jsObject.suggestionsEnabled;
    }
    
    if (hasValue(jsObject.suggestionTemplate)) {
        dotNetLayerSearchSource.suggestionTemplate = jsObject.suggestionTemplate;
    }
    
    if (hasValue(jsObject.withinViewEnabled)) {
        dotNetLayerSearchSource.withinViewEnabled = jsObject.withinViewEnabled;
    }
    
    if (hasValue(jsObject.zoomScale)) {
        dotNetLayerSearchSource.zoomScale = jsObject.zoomScale;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetLayerSearchSource.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        if (hasValue(dotNetRef)) {
            try {
                dotNetLayerSearchSource.id = await dotNetRef.invokeMethodAsync('GetId');
            } catch (e) {
                console.error('Error invoking GetId for LayerSearchSource', e);
            }
        }
    }
    if (hasValue(dotNetLayerSearchSource.id)) {
        jsObjectRefs[dotNetLayerSearchSource.id] ??= jsObject;
        arcGisObjectRefs[dotNetLayerSearchSource.id] ??= jsObject;
    }

    return dotNetLayerSearchSource;
}

