// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import LayerSearchSource from '@arcgis/core/widgets/Search/LayerSearchSource';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetLayerSearchSource } from './layerSearchSource';

export async function buildJsLayerSearchSourceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.filter)) {
        let { buildJsSearchSourceFilter } = await import('./searchSourceFilter');
        properties.filter = await buildJsSearchSourceFilter(dotNetObject.filter) as any;
    }
    if (hasValue(dotNetObject.layerId) && arcGisObjectRefs.hasOwnProperty(dotNetObject.layerId)) {
        properties.layer = arcGisObjectRefs[dotNetObject.layerId!];
    } else if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        properties.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId);
    }
    if (hasValue(dotNetObject.popupTemplate)) {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        properties.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.resultSymbol)) {
        let { buildJsSymbol } = await import('./symbol');
        properties.resultSymbol = buildJsSymbol(dotNetObject.resultSymbol) as any;
    }

    if (hasValue(dotNetObject.autoNavigate)) {
        properties.autoNavigate = dotNetObject.autoNavigate;
    }
    if (hasValue(dotNetObject.displayField)) {
        properties.displayField = dotNetObject.displayField;
    }
    if (hasValue(dotNetObject.exactMatch)) {
        properties.exactMatch = dotNetObject.exactMatch;
    }
    if (hasValue(dotNetObject.maxResults)) {
        properties.maxResults = dotNetObject.maxResults;
    }
    if (hasValue(dotNetObject.maxSuggestions)) {
        properties.maxSuggestions = dotNetObject.maxSuggestions;
    }
    if (hasValue(dotNetObject.minSuggestCharacters)) {
        properties.minSuggestCharacters = dotNetObject.minSuggestCharacters;
    }
    if (hasValue(dotNetObject.name)) {
        properties.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.orderByFields) && dotNetObject.orderByFields.length > 0) {
        properties.orderByFields = dotNetObject.orderByFields;
    }
    if (hasValue(dotNetObject.outFields) && dotNetObject.outFields.length > 0) {
        properties.outFields = dotNetObject.outFields;
    }
    if (hasValue(dotNetObject.placeholder)) {
        properties.placeholder = dotNetObject.placeholder;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        properties.popupEnabled = dotNetObject.popupEnabled;
    }
    if (hasValue(dotNetObject.prefix)) {
        properties.prefix = dotNetObject.prefix;
    }
    if (hasValue(dotNetObject.resultGraphicEnabled)) {
        properties.resultGraphicEnabled = dotNetObject.resultGraphicEnabled;
    }
    if (hasValue(dotNetObject.searchFields) && dotNetObject.searchFields.length > 0) {
        properties.searchFields = dotNetObject.searchFields;
    }
    if (hasValue(dotNetObject.searchTemplate)) {
        properties.searchTemplate = dotNetObject.searchTemplate;
    }
    if (hasValue(dotNetObject.suffix)) {
        properties.suffix = dotNetObject.suffix;
    }
    if (hasValue(dotNetObject.suggestionsEnabled)) {
        properties.suggestionsEnabled = dotNetObject.suggestionsEnabled;
    }
    if (hasValue(dotNetObject.suggestionTemplate)) {
        properties.suggestionTemplate = dotNetObject.suggestionTemplate;
    }
    if (hasValue(dotNetObject.withinViewEnabled)) {
        properties.withinViewEnabled = dotNetObject.withinViewEnabled;
    }
    if (hasValue(dotNetObject.zoomScale)) {
        properties.zoomScale = dotNetObject.zoomScale;
    }
    let jsLayerSearchSource = new LayerSearchSource(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsLayerSearchSource);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLayerSearchSource;
    
    return jsLayerSearchSource;
}


export async function buildDotNetLayerSearchSourceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLayerSearchSource: any = {};
    
    if (hasValue(jsObject.filter)) {
        let { buildDotNetSearchSourceFilter } = await import('./searchSourceFilter');
        dotNetLayerSearchSource.filter = await buildDotNetSearchSourceFilter(jsObject.filter);
    }
    
    if (hasValue(jsObject.popupTemplate)) {
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        dotNetLayerSearchSource.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
    }
    
    if (hasValue(jsObject.resultSymbol)) {
        let { buildDotNetSymbol } = await import('./symbol');
        dotNetLayerSearchSource.resultSymbol = buildDotNetSymbol(jsObject.resultSymbol);
    }
    
    if (hasValue(jsObject.autoNavigate)) {
        dotNetLayerSearchSource.autoNavigate = jsObject.autoNavigate;
    }
    
    if (hasValue(jsObject.displayField)) {
        dotNetLayerSearchSource.displayField = jsObject.displayField;
    }
    
    if (hasValue(jsObject.exactMatch)) {
        dotNetLayerSearchSource.exactMatch = jsObject.exactMatch;
    }
    
    if (hasValue(jsObject.maxResults)) {
        dotNetLayerSearchSource.maxResults = jsObject.maxResults;
    }
    
    if (hasValue(jsObject.maxSuggestions)) {
        dotNetLayerSearchSource.maxSuggestions = jsObject.maxSuggestions;
    }
    
    if (hasValue(jsObject.minSuggestCharacters)) {
        dotNetLayerSearchSource.minSuggestCharacters = jsObject.minSuggestCharacters;
    }
    
    if (hasValue(jsObject.name)) {
        dotNetLayerSearchSource.name = jsObject.name;
    }
    
    if (hasValue(jsObject.orderByFields)) {
        dotNetLayerSearchSource.orderByFields = jsObject.orderByFields;
    }
    
    if (hasValue(jsObject.outFields)) {
        dotNetLayerSearchSource.outFields = jsObject.outFields;
    }
    
    if (hasValue(jsObject.placeholder)) {
        dotNetLayerSearchSource.placeholder = jsObject.placeholder;
    }
    
    if (hasValue(jsObject.popupEnabled)) {
        dotNetLayerSearchSource.popupEnabled = jsObject.popupEnabled;
    }
    
    if (hasValue(jsObject.prefix)) {
        dotNetLayerSearchSource.prefix = jsObject.prefix;
    }
    
    if (hasValue(jsObject.resultGraphicEnabled)) {
        dotNetLayerSearchSource.resultGraphicEnabled = jsObject.resultGraphicEnabled;
    }
    
    if (hasValue(jsObject.searchFields)) {
        dotNetLayerSearchSource.searchFields = jsObject.searchFields;
    }
    
    if (hasValue(jsObject.searchTemplate)) {
        dotNetLayerSearchSource.searchTemplate = jsObject.searchTemplate;
    }
    
    if (hasValue(jsObject.suffix)) {
        dotNetLayerSearchSource.suffix = jsObject.suffix;
    }
    
    if (hasValue(jsObject.suggestionsEnabled)) {
        dotNetLayerSearchSource.suggestionsEnabled = jsObject.suggestionsEnabled;
    }
    
    if (hasValue(jsObject.suggestionTemplate)) {
        dotNetLayerSearchSource.suggestionTemplate = jsObject.suggestionTemplate;
    }
    
    if (hasValue(jsObject.withinViewEnabled)) {
        dotNetLayerSearchSource.withinViewEnabled = jsObject.withinViewEnabled;
    }
    
    if (hasValue(jsObject.zoomScale)) {
        dotNetLayerSearchSource.zoomScale = jsObject.zoomScale;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetLayerSearchSource.id = geoBlazorId;
    }

    return dotNetLayerSearchSource;
}

