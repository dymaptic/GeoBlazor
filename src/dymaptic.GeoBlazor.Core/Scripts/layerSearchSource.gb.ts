// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import LayerSearchSource from '@arcgis/core/widgets/Search/LayerSearchSource';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class LayerSearchSourceGenerated implements IPropertyWrapper {
    public component: LayerSearchSource;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: LayerSearchSource) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getLayer(): Promise<any> {
        if (!hasValue(this.component.layer)) {
            return null;
        }
        
        let { buildDotNetLayer } = await import('./layer');
        return await buildDotNetLayer(this.component.layer);
    }
    async setLayer(value: any): Promise<void> {
        let { buildJsLayer } = await import('./layer');
        this.component.layer = await  buildJsLayer(value, this.layerId, this.viewId);
    }
    async getPopupTemplate(): Promise<any> {
        if (!hasValue(this.component.popupTemplate)) {
            return null;
        }
        
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        return await buildDotNetPopupTemplate(this.component.popupTemplate);
    }
    async setPopupTemplate(value: any): Promise<void> {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        this.component.popupTemplate = await  buildJsPopupTemplate(value, this.layerId, this.viewId);
    }
    async getResultSymbol(): Promise<any> {
        if (!hasValue(this.component.resultSymbol)) {
            return null;
        }
        
        let { buildDotNetSymbol } = await import('./symbol');
        return await buildDotNetSymbol(this.component.resultSymbol);
    }
    async setResultSymbol(value: any): Promise<void> {
        let { buildJsSymbol } = await import('./symbol');
        this.component.resultSymbol = await  buildJsSymbol(value);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsLayerSearchSourceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsLayerSearchSource = new LayerSearchSource();
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsLayerSearchSource.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.popupTemplate)) {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        jsLayerSearchSource.popupTemplate = await buildJsPopupTemplate(dotNetObject.popupTemplate, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.resultSymbol)) {
        let { buildJsSymbol } = await import('./symbol');
        jsLayerSearchSource.resultSymbol = await buildJsSymbol(dotNetObject.resultSymbol) as any;
    }

    if (hasValue(dotNetObject.autoNavigate)) {
        jsLayerSearchSource.autoNavigate = dotNetObject.autoNavigate;
    }
    if (hasValue(dotNetObject.displayField)) {
        jsLayerSearchSource.displayField = dotNetObject.displayField;
    }
    if (hasValue(dotNetObject.exactMatch)) {
        jsLayerSearchSource.exactMatch = dotNetObject.exactMatch;
    }
    if (hasValue(dotNetObject.filter)) {
        jsLayerSearchSource.filter = dotNetObject.filter;
    }
    if (hasValue(dotNetObject.getResults)) {
        jsLayerSearchSource.getResults = dotNetObject.getResults;
    }
    if (hasValue(dotNetObject.getSuggestions)) {
        jsLayerSearchSource.getSuggestions = dotNetObject.getSuggestions;
    }
    if (hasValue(dotNetObject.maxResults)) {
        jsLayerSearchSource.maxResults = dotNetObject.maxResults;
    }
    if (hasValue(dotNetObject.maxSuggestions)) {
        jsLayerSearchSource.maxSuggestions = dotNetObject.maxSuggestions;
    }
    if (hasValue(dotNetObject.minSuggestCharacters)) {
        jsLayerSearchSource.minSuggestCharacters = dotNetObject.minSuggestCharacters;
    }
    if (hasValue(dotNetObject.name)) {
        jsLayerSearchSource.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.orderByFields)) {
        jsLayerSearchSource.orderByFields = dotNetObject.orderByFields;
    }
    if (hasValue(dotNetObject.outFields)) {
        jsLayerSearchSource.outFields = dotNetObject.outFields;
    }
    if (hasValue(dotNetObject.placeholder)) {
        jsLayerSearchSource.placeholder = dotNetObject.placeholder;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        jsLayerSearchSource.popupEnabled = dotNetObject.popupEnabled;
    }
    if (hasValue(dotNetObject.prefix)) {
        jsLayerSearchSource.prefix = dotNetObject.prefix;
    }
    if (hasValue(dotNetObject.resultGraphicEnabled)) {
        jsLayerSearchSource.resultGraphicEnabled = dotNetObject.resultGraphicEnabled;
    }
    if (hasValue(dotNetObject.searchFields)) {
        jsLayerSearchSource.searchFields = dotNetObject.searchFields;
    }
    if (hasValue(dotNetObject.searchTemplate)) {
        jsLayerSearchSource.searchTemplate = dotNetObject.searchTemplate;
    }
    if (hasValue(dotNetObject.suffix)) {
        jsLayerSearchSource.suffix = dotNetObject.suffix;
    }
    if (hasValue(dotNetObject.suggestionsEnabled)) {
        jsLayerSearchSource.suggestionsEnabled = dotNetObject.suggestionsEnabled;
    }
    if (hasValue(dotNetObject.suggestionTemplate)) {
        jsLayerSearchSource.suggestionTemplate = dotNetObject.suggestionTemplate;
    }
    if (hasValue(dotNetObject.withinViewEnabled)) {
        jsLayerSearchSource.withinViewEnabled = dotNetObject.withinViewEnabled;
    }
    if (hasValue(dotNetObject.zoomScale)) {
        jsLayerSearchSource.zoomScale = dotNetObject.zoomScale;
    }
    let { default: LayerSearchSourceWrapper } = await import('./layerSearchSource');
    let layerSearchSourceWrapper = new LayerSearchSourceWrapper(jsLayerSearchSource);
    layerSearchSourceWrapper.geoBlazorId = dotNetObject.id;
    layerSearchSourceWrapper.viewId = viewId;
    layerSearchSourceWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(layerSearchSourceWrapper);
    jsObjectRefs[dotNetObject.id] = layerSearchSourceWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsLayerSearchSource;
    
    let { buildDotNetLayerSearchSource } = await import('./layerSearchSource');
    let dnInstantiatedObject = await buildDotNetLayerSearchSource(jsLayerSearchSource);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LayerSearchSource', e);
    }
    
    return jsLayerSearchSource;
}

export async function buildDotNetLayerSearchSourceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLayerSearchSource: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.layer)) {
            let { buildDotNetLayer } = await import('./layer');
            dotNetLayerSearchSource.layer = await buildDotNetLayer(jsObject.layer);
        }
        if (hasValue(jsObject.popupTemplate)) {
            let { buildDotNetPopupTemplate } = await import('./popupTemplate');
            dotNetLayerSearchSource.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
        }
        if (hasValue(jsObject.resultSymbol)) {
            let { buildDotNetSymbol } = await import('./symbol');
            dotNetLayerSearchSource.resultSymbol = await buildDotNetSymbol(jsObject.resultSymbol);
        }
        if (hasValue(jsObject.autoNavigate)) {
            dotNetLayerSearchSource.autoNavigate = jsObject.autoNavigate;
        }
        if (hasValue(jsObject.displayField)) {
            dotNetLayerSearchSource.displayField = jsObject.displayField;
        }
        if (hasValue(jsObject.exactMatch)) {
            dotNetLayerSearchSource.exactMatch = jsObject.exactMatch;
        }
        if (hasValue(jsObject.filter)) {
            dotNetLayerSearchSource.filter = jsObject.filter;
        }
        if (hasValue(jsObject.getResults)) {
            dotNetLayerSearchSource.getResults = jsObject.getResults;
        }
        if (hasValue(jsObject.getSuggestions)) {
            dotNetLayerSearchSource.getSuggestions = jsObject.getSuggestions;
        }
        if (hasValue(jsObject.maxResults)) {
            dotNetLayerSearchSource.maxResults = jsObject.maxResults;
        }
        if (hasValue(jsObject.maxSuggestions)) {
            dotNetLayerSearchSource.maxSuggestions = jsObject.maxSuggestions;
        }
        if (hasValue(jsObject.minSuggestCharacters)) {
            dotNetLayerSearchSource.minSuggestCharacters = jsObject.minSuggestCharacters;
        }
        if (hasValue(jsObject.name)) {
            dotNetLayerSearchSource.name = jsObject.name;
        }
        if (hasValue(jsObject.orderByFields)) {
            dotNetLayerSearchSource.orderByFields = jsObject.orderByFields;
        }
        if (hasValue(jsObject.outFields)) {
            dotNetLayerSearchSource.outFields = jsObject.outFields;
        }
        if (hasValue(jsObject.placeholder)) {
            dotNetLayerSearchSource.placeholder = jsObject.placeholder;
        }
        if (hasValue(jsObject.popupEnabled)) {
            dotNetLayerSearchSource.popupEnabled = jsObject.popupEnabled;
        }
        if (hasValue(jsObject.prefix)) {
            dotNetLayerSearchSource.prefix = jsObject.prefix;
        }
        if (hasValue(jsObject.resultGraphicEnabled)) {
            dotNetLayerSearchSource.resultGraphicEnabled = jsObject.resultGraphicEnabled;
        }
        if (hasValue(jsObject.searchFields)) {
            dotNetLayerSearchSource.searchFields = jsObject.searchFields;
        }
        if (hasValue(jsObject.searchTemplate)) {
            dotNetLayerSearchSource.searchTemplate = jsObject.searchTemplate;
        }
        if (hasValue(jsObject.suffix)) {
            dotNetLayerSearchSource.suffix = jsObject.suffix;
        }
        if (hasValue(jsObject.suggestionsEnabled)) {
            dotNetLayerSearchSource.suggestionsEnabled = jsObject.suggestionsEnabled;
        }
        if (hasValue(jsObject.suggestionTemplate)) {
            dotNetLayerSearchSource.suggestionTemplate = jsObject.suggestionTemplate;
        }
        if (hasValue(jsObject.withinViewEnabled)) {
            dotNetLayerSearchSource.withinViewEnabled = jsObject.withinViewEnabled;
        }
        if (hasValue(jsObject.zoomScale)) {
            dotNetLayerSearchSource.zoomScale = jsObject.zoomScale;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLayerSearchSource.id = k;
                break;
            }
        }
    }

    return dotNetLayerSearchSource;
}

