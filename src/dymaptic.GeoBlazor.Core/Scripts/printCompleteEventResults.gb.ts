// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetPrintCompleteEventResults } from './printCompleteEventResults';

export async function buildJsPrintCompleteEventResultsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPrintCompleteEventResults: any = {};
    if (hasValue(dotNetObject.link) && dotNetObject.link.length > 0) {
        let { buildJsFileLink } = await import('./fileLink');
        jsPrintCompleteEventResults.link = await Promise.all(dotNetObject.link.map(async i => await buildJsFileLink(i, layerId, viewId))) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsPrintCompleteEventResults);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPrintCompleteEventResults;
    
    try {
        let { buildDotNetPrintCompleteEventResults } = await import('./printCompleteEventResults');
        let dnInstantiatedObject = await buildDotNetPrintCompleteEventResults(jsPrintCompleteEventResults, layerId, viewId);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type PrintCompleteEventResults detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PrintCompleteEventResults', e);
    }
    
    return jsPrintCompleteEventResults;
}


export async function buildDotNetPrintCompleteEventResultsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPrintCompleteEventResults: any = {};
    
    if (hasValue(jsObject.link)) {
        let { buildDotNetFileLink } = await import('./fileLink');
        dotNetPrintCompleteEventResults.link = await Promise.all(jsObject.link.map(async i => await buildDotNetFileLink(i, layerId, viewId)));
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetPrintCompleteEventResults.id = geoBlazorId;
    }

    return dotNetPrintCompleteEventResults;
}

