// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import MeshTexture from '@arcgis/core/geometry/support/MeshTexture';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class MeshTextureGenerated implements IPropertyWrapper {
    public component: MeshTexture;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: MeshTexture) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsMeshTextureGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsMeshTexture = new MeshTexture();

    if (hasValue(dotNetObject.data)) {
        jsMeshTexture.data = dotNetObject.data;
    }
    if (hasValue(dotNetObject.transparent)) {
        jsMeshTexture.transparent = dotNetObject.transparent;
    }
    if (hasValue(dotNetObject.url)) {
        jsMeshTexture.url = dotNetObject.url;
    }
    if (hasValue(dotNetObject.wrap)) {
        jsMeshTexture.wrap = dotNetObject.wrap;
    }
    let { default: MeshTextureWrapper } = await import('./meshTexture');
    let meshTextureWrapper = new MeshTextureWrapper(jsMeshTexture);
    meshTextureWrapper.geoBlazorId = dotNetObject.id;
    meshTextureWrapper.viewId = viewId;
    meshTextureWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(meshTextureWrapper);
    jsObjectRefs[dotNetObject.id] = meshTextureWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsMeshTexture;
    
    let { buildDotNetMeshTexture } = await import('./meshTexture');
    let dnInstantiatedObject = await buildDotNetMeshTexture(jsMeshTexture, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for MeshTexture', e);
    }
    
    return jsMeshTexture;
}

export async function buildDotNetMeshTextureGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMeshTexture: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.data)) {
            dotNetMeshTexture.data = jsObject.data;
        }
        if (hasValue(jsObject.transparent)) {
            dotNetMeshTexture.transparent = jsObject.transparent;
        }
        if (hasValue(jsObject.url)) {
            dotNetMeshTexture.url = jsObject.url;
        }
        if (hasValue(jsObject.wrap)) {
            dotNetMeshTexture.wrap = jsObject.wrap;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetMeshTexture.id = k;
                break;
            }
        }
    }

    return dotNetMeshTexture;
}

