// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import LineSymbol from '@arcgis/core/symbols/LineSymbol';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetLineSymbol } from './lineSymbol';

export async function buildJsLineSymbolGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        properties.color = buildJsMapColor(dotNetObject.color) as any;
    }

    if (hasValue(dotNetObject.width)) {
        properties.width = dotNetObject.width;
    }
    let jsLineSymbol = new LineSymbol(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsLineSymbol);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLineSymbol;
    
    return jsLineSymbol;
}


export async function buildDotNetLineSymbolGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLineSymbol: any = {};
    
    if (hasValue(jsObject.color)) {
        let { buildDotNetMapColor } = await import('./mapColor');
        dotNetLineSymbol.color = buildDotNetMapColor(jsObject.color);
    }
    
    if (hasValue(jsObject.type)) {
        dotNetLineSymbol.type = jsObject.type;
    }
    
    if (hasValue(jsObject.width)) {
        dotNetLineSymbol.width = removeCircularReferences(jsObject.width);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetLineSymbol.id = geoBlazorId;
    }

    return dotNetLineSymbol;
}

