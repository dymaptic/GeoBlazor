// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetRelationshipSchemeForPolyline } from './relationshipSchemeForPolyline';

export async function buildJsRelationshipSchemeForPolylineGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsRelationshipSchemeForPolyline: any = {}
    if (hasValue(dotNetObject.colorsForClassBreaks)) {
        let { buildJsRelationshipSchemeForPolylineColorsForClassBreaks } = await import('./relationshipSchemeForPolylineColorsForClassBreaks');
        jsRelationshipSchemeForPolyline.colorsForClassBreaks = await Promise.all(dotNetObject.colorsForClassBreaks.map(async i => await buildJsRelationshipSchemeForPolylineColorsForClassBreaks(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.noDataColor)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsRelationshipSchemeForPolyline.noDataColor = buildJsMapColor(dotNetObject.noDataColor) as any;
    }

    if (hasValue(dotNetObject.name)) {
        jsRelationshipSchemeForPolyline.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.opacity)) {
        jsRelationshipSchemeForPolyline.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.relationshipSchemeForPolylineId)) {
        jsRelationshipSchemeForPolyline.id = dotNetObject.relationshipSchemeForPolylineId;
    }
    if (hasValue(dotNetObject.tags)) {
        jsRelationshipSchemeForPolyline.tags = dotNetObject.tags;
    }
    if (hasValue(dotNetObject.width)) {
        jsRelationshipSchemeForPolyline.width = dotNetObject.width;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsRelationshipSchemeForPolyline);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRelationshipSchemeForPolyline;
    
    let dnInstantiatedObject = await buildDotNetRelationshipSchemeForPolyline(jsRelationshipSchemeForPolyline);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RelationshipSchemeForPolyline', e);
    }
    
    return jsRelationshipSchemeForPolyline;
}

export async function buildDotNetRelationshipSchemeForPolylineGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRelationshipSchemeForPolyline: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.colorsForClassBreaks)) {
            let { buildDotNetRelationshipSchemeForPolylineColorsForClassBreaks } = await import('./relationshipSchemeForPolylineColorsForClassBreaks');
            dotNetRelationshipSchemeForPolyline.colorsForClassBreaks = await Promise.all(jsObject.colorsForClassBreaks.map(async i => await buildDotNetRelationshipSchemeForPolylineColorsForClassBreaks(i)));
        }
        if (hasValue(jsObject.noDataColor)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetRelationshipSchemeForPolyline.noDataColor = buildDotNetMapColor(jsObject.noDataColor);
        }
    if (hasValue(jsObject.name)) {
        dotNetRelationshipSchemeForPolyline.name = jsObject.name;
    }
    if (hasValue(jsObject.opacity)) {
        dotNetRelationshipSchemeForPolyline.opacity = jsObject.opacity;
    }
    if (hasValue(jsObject.id)) {
        dotNetRelationshipSchemeForPolyline.relationshipSchemeForPolylineId = jsObject.id;
    }
    if (hasValue(jsObject.tags)) {
        dotNetRelationshipSchemeForPolyline.tags = jsObject.tags;
    }
    if (hasValue(jsObject.width)) {
        dotNetRelationshipSchemeForPolyline.width = jsObject.width;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRelationshipSchemeForPolyline.id = k;
                break;
            }
        }
    }

    return dotNetRelationshipSchemeForPolyline;
}

