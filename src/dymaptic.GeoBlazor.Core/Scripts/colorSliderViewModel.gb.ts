// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ColorSliderViewModel from '@arcgis/core/widgets/smartMapping/ColorSlider/ColorSliderViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ColorSliderViewModelGenerated implements IPropertyWrapper {
    public component: ColorSliderViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ColorSliderViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async defaultInputFormatFunction(value: any): Promise<any> {
        return this.component.defaultInputFormatFunction(value);
    }

    async defaultInputParseFunction(value: any): Promise<any> {
        return this.component.defaultInputParseFunction(value);
    }

    async defaultLabelFormatFunction(value: any): Promise<any> {
        return this.component.defaultLabelFormatFunction(value);
    }

    async getBounds(): Promise<any> {
        return this.component.getBounds();
    }

    async getBoundsForValueAtIndex(index: any): Promise<any> {
        return this.component.getBoundsForValueAtIndex(index);
    }

    async getLabelForValue(value: any,
        type: any,
        index: any): Promise<any> {
        return this.component.getLabelForValue(value,
            type,
            index);
    }

    async getStopInfo(): Promise<any> {
        return this.component.getStopInfo();
    }

    async getUnzoomedMax(): Promise<void> {
        this.component.getUnzoomedMax();
    }

    async getUnzoomedMin(): Promise<void> {
        this.component.getUnzoomedMin();
    }

    async setValue(index: any,
        value: any): Promise<void> {
        this.component.setValue(index,
            value);
    }

    async toPrecision(value: any): Promise<any> {
        return this.component.toPrecision(value);
    }

    // region properties
    
    async getStops(): Promise<any> {
        if (!hasValue(this.component.stops)) {
            return null;
        }
        
        let { buildDotNetColorStop } = await import('./colorStop');
        return await Promise.all(this.component.stops.map(async i => await buildDotNetColorStop(i)));
    }
    
    async setStops(value: any): Promise<void> {
        let { buildJsColorStop } = await import('./colorStop');
        this.component.stops = await Promise.all(value.map(async i => await buildJsColorStop(i, this.layerId, this.viewId))) as any;
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsColorSliderViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.hasInputFormatFunction) && dotNetObject.hasInputFormatFunction) {
        properties.inputFormatFunction = (value,
        type,
        index) => {
            let func = new Function('value',
            'type',
            'index', dotNetObject.inputFormatFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }
    if (hasValue(dotNetObject.hasInputParseFunction) && dotNetObject.hasInputParseFunction) {
        properties.inputParseFunction = (value,
        type,
        index) => {
            let func = new Function('value',
            'type',
            'index', dotNetObject.inputParseFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }
    if (hasValue(dotNetObject.hasLabelFormatFunction) && dotNetObject.hasLabelFormatFunction) {
        properties.labelFormatFunction = (value,
        type,
        index) => {
            let func = new Function('value',
            'type',
            'index', dotNetObject.labelFormatFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }
    if (hasValue(dotNetObject.stops)) {
        let { buildJsColorStop } = await import('./colorStop');
        properties.stops = await Promise.all(dotNetObject.stops.map(async i => await buildJsColorStop(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.effectiveMax)) {
        properties.effectiveMax = dotNetObject.effectiveMax;
    }
    if (hasValue(dotNetObject.effectiveMin)) {
        properties.effectiveMin = dotNetObject.effectiveMin;
    }
    if (hasValue(dotNetObject.handlesSyncedToPrimary)) {
        properties.handlesSyncedToPrimary = dotNetObject.handlesSyncedToPrimary;
    }
    if (hasValue(dotNetObject.max)) {
        properties.max = dotNetObject.max;
    }
    if (hasValue(dotNetObject.min)) {
        properties.min = dotNetObject.min;
    }
    if (hasValue(dotNetObject.precision)) {
        properties.precision = dotNetObject.precision;
    }
    if (hasValue(dotNetObject.primaryHandleEnabled)) {
        properties.primaryHandleEnabled = dotNetObject.primaryHandleEnabled;
    }
    if (hasValue(dotNetObject.thumbsConstrained)) {
        properties.thumbsConstrained = dotNetObject.thumbsConstrained;
    }
    if (hasValue(dotNetObject.values)) {
        properties.values = dotNetObject.values;
    }
    if (hasValue(dotNetObject.zoomingEnabled)) {
        properties.zoomingEnabled = dotNetObject.zoomingEnabled;
    }
    if (hasValue(dotNetObject.zoomOptions)) {
        properties.zoomOptions = dotNetObject.zoomOptions;
    }
    let jsColorSliderViewModel = new ColorSliderViewModel(properties);

    let { default: ColorSliderViewModelWrapper } = await import('./colorSliderViewModel');
    let colorSliderViewModelWrapper = new ColorSliderViewModelWrapper(jsColorSliderViewModel);
    colorSliderViewModelWrapper.geoBlazorId = dotNetObject.id;
    colorSliderViewModelWrapper.viewId = viewId;
    colorSliderViewModelWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(colorSliderViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = colorSliderViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsColorSliderViewModel;
    let { buildDotNetColorSliderViewModel } = await import('./colorSliderViewModel');
    let dnInstantiatedObject = await buildDotNetColorSliderViewModel(jsColorSliderViewModel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ColorSliderViewModel', e);
    }
    
    return jsColorSliderViewModel;
}

export async function buildDotNetColorSliderViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetColorSliderViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.stops)) {
            let { buildDotNetColorStop } = await import('./colorStop');
            dotNetColorSliderViewModel.stops = await Promise.all(jsObject.stops.map(async i => await buildDotNetColorStop(i)));
        }
    if (hasValue(jsObject.effectiveMax)) {
        dotNetColorSliderViewModel.effectiveMax = jsObject.effectiveMax;
    }
    if (hasValue(jsObject.effectiveMin)) {
        dotNetColorSliderViewModel.effectiveMin = jsObject.effectiveMin;
    }
    if (hasValue(jsObject.handlesSyncedToPrimary)) {
        dotNetColorSliderViewModel.handlesSyncedToPrimary = jsObject.handlesSyncedToPrimary;
    }
    if (hasValue(jsObject.inputFormatFunction)) {
        dotNetColorSliderViewModel.inputFormatFunction = jsObject.inputFormatFunction;
    }
    if (hasValue(jsObject.inputParseFunction)) {
        dotNetColorSliderViewModel.inputParseFunction = jsObject.inputParseFunction;
    }
    if (hasValue(jsObject.labelFormatFunction)) {
        dotNetColorSliderViewModel.labelFormatFunction = jsObject.labelFormatFunction;
    }
    if (hasValue(jsObject.labels)) {
        dotNetColorSliderViewModel.labels = jsObject.labels;
    }
    if (hasValue(jsObject.max)) {
        dotNetColorSliderViewModel.max = jsObject.max;
    }
    if (hasValue(jsObject.min)) {
        dotNetColorSliderViewModel.min = jsObject.min;
    }
    if (hasValue(jsObject.precision)) {
        dotNetColorSliderViewModel.precision = jsObject.precision;
    }
    if (hasValue(jsObject.primaryHandleEnabled)) {
        dotNetColorSliderViewModel.primaryHandleEnabled = jsObject.primaryHandleEnabled;
    }
    if (hasValue(jsObject.state)) {
        dotNetColorSliderViewModel.state = jsObject.state;
    }
    if (hasValue(jsObject.thumbsConstrained)) {
        dotNetColorSliderViewModel.thumbsConstrained = jsObject.thumbsConstrained;
    }
    if (hasValue(jsObject.values)) {
        dotNetColorSliderViewModel.values = jsObject.values;
    }
    if (hasValue(jsObject.zoomingEnabled)) {
        dotNetColorSliderViewModel.zoomingEnabled = jsObject.zoomingEnabled;
    }
    if (hasValue(jsObject.zoomOptions)) {
        dotNetColorSliderViewModel.zoomOptions = jsObject.zoomOptions;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetColorSliderViewModel.id = k;
                break;
            }
        }
    }

    return dotNetColorSliderViewModel;
}

