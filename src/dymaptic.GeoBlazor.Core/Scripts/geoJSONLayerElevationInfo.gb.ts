// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import GeoJSONLayerElevationInfo = __esri.GeoJSONLayerElevationInfo;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class GeoJSONLayerElevationInfoGenerated implements IPropertyWrapper {
    public component: GeoJSONLayerElevationInfo;
    public readonly geoBlazorId: string = '';

    constructor(component: GeoJSONLayerElevationInfo) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getFeatureExpressionInfo(): Promise<any> {
        let { buildDotNetGeoJSONLayerElevationInfoFeatureExpressionInfo } = await import('./geoJSONLayerElevationInfoFeatureExpressionInfo');
        return await buildDotNetGeoJSONLayerElevationInfoFeatureExpressionInfo(this.component.featureExpressionInfo);
    }
    async setFeatureExpressionInfo(value: any): Promise<void> {
        let { buildJsGeoJSONLayerElevationInfoFeatureExpressionInfo } = await import('./geoJSONLayerElevationInfoFeatureExpressionInfo');
        this.component.featureExpressionInfo = await buildJsGeoJSONLayerElevationInfoFeatureExpressionInfo(value);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}
export async function buildJsGeoJSONLayerElevationInfoGenerated(dotNetObject: any): Promise<any> {
    let jsGeoJSONLayerElevationInfo = {
    if (hasValue(dotNetObject.featureExpressionInfo)) {
        let { buildJsGeoJSONLayerElevationInfoFeatureExpressionInfo } = await import('geoJSONLayerElevationInfoFeatureExpressionInfo');
        jsGeoJSONLayerElevationInfo.featureExpressionInfo = await buildJsGeoJSONLayerElevationInfoFeatureExpressionInfo(dotNetObject.featureExpressionInfo) as any;

    }
        mode: dotNetObject.mode,
        offset: dotNetObject.offset,
        unit: dotNetObject.unit,
    }
    let { default: GeoJSONLayerElevationInfoWrapper } = await import('./geoJSONLayerElevationInfo');
    let geoJSONLayerElevationInfoWrapper = new GeoJSONLayerElevationInfoWrapper(jsGeoJSONLayerElevationInfo);
    jsGeoJSONLayerElevationInfo.id = dotNetObject.id;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(geoJSONLayerElevationInfoWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = geoJSONLayerElevationInfoWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsGeoJSONLayerElevationInfo;
    
    return jsGeoJSONLayerElevationInfo;
}

export async function buildDotNetGeoJSONLayerElevationInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGeoJSONLayerElevationInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.featureExpressionInfo)) {
            let { buildDotNetGeoJSONLayerElevationInfoFeatureExpressionInfo } = await import('./geoJSONLayerElevationInfoFeatureExpressionInfo');
            dotNetGeoJSONLayerElevationInfo.featureExpressionInfo = await buildDotNetGeoJSONLayerElevationInfoFeatureExpressionInfo(jsObject.featureExpressionInfo);
        }
        dotNetGeoJSONLayerElevationInfo.mode = jsObject.mode;
        dotNetGeoJSONLayerElevationInfo.offset = jsObject.offset;
        dotNetGeoJSONLayerElevationInfo.unit = jsObject.unit;
    return dotNetGeoJSONLayerElevationInfo;
}

