import { buildDotNetElevationQueryResultSampleInfo } from './elevationQueryResultSampleInfo';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import ElevationQueryResultSampleInfo = __esri.ElevationQueryResultSampleInfo;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsElevationQueryResultSampleInfoGenerated(dotNetObject: any): Promise<any> {
    let jsElevationQueryResultSampleInfo: any = {}
    if (hasValue(dotNetObject.source)) {
        let { buildJsElevationLayer } = await import('./elevationLayer');
        jsElevationQueryResultSampleInfo.source = await buildJsElevationLayer(dotNetObject.source, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.demResolution)) {
        jsElevationQueryResultSampleInfo.demResolution = dotNetObject.demResolution;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsElevationQueryResultSampleInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsElevationQueryResultSampleInfo;
    
    let dnInstantiatedObject = await buildDotNetElevationQueryResultSampleInfo(jsElevationQueryResultSampleInfo);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ElevationQueryResultSampleInfo', e);
    }
    
    return jsElevationQueryResultSampleInfo;
}
export async function buildDotNetElevationQueryResultSampleInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetElevationQueryResultSampleInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.demResolution)) {
            dotNetElevationQueryResultSampleInfo.demResolution = jsObject.demResolution;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetElevationQueryResultSampleInfo.id = k;
                break;
            }
        }
    }

    return dotNetElevationQueryResultSampleInfo;
}

