// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetElevationQueryResultSampleInfo } from './elevationQueryResultSampleInfo';

export async function buildJsElevationQueryResultSampleInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsElevationQueryResultSampleInfo: any = {};
    if (hasValue(dotNetObject.source)) {
        let { buildJsElevationLayer } = await import('./elevationLayer');
        jsElevationQueryResultSampleInfo.source = await buildJsElevationLayer(dotNetObject.source, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.demResolution)) {
        jsElevationQueryResultSampleInfo.demResolution = dotNetObject.demResolution;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsElevationQueryResultSampleInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsElevationQueryResultSampleInfo;
    
    return jsElevationQueryResultSampleInfo;
}


export async function buildDotNetElevationQueryResultSampleInfoGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsElevationQueryResultSampleInfo } = await import('./elevationQueryResultSampleInfo');
        jsComponentRef = await buildJsElevationQueryResultSampleInfo(jsObject, layerId, viewId);
    }
    
    let dotNetElevationQueryResultSampleInfo: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.demResolution)) {
        dotNetElevationQueryResultSampleInfo.demResolution = jsObject.demResolution;
    }

    return dotNetElevationQueryResultSampleInfo;
}

