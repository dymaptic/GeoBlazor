// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetFeatureLayerSaveAsOptions } from './featureLayerSaveAsOptions';

export async function buildJsFeatureLayerSaveAsOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsFeatureLayerSaveAsOptions: any = {};
    if (hasValue(dotNetObject.folder)) {
        let { buildJsPortalFolder } = await import('./portalFolder');
        jsFeatureLayerSaveAsOptions.folder = await buildJsPortalFolder(dotNetObject.folder) as any;
    }

    if (hasValue(dotNetObject.ignoreUnsupported)) {
        jsFeatureLayerSaveAsOptions.ignoreUnsupported = dotNetObject.ignoreUnsupported;
    }
    
    jsObjectRefs[dotNetObject.id] = jsFeatureLayerSaveAsOptions;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureLayerSaveAsOptions;
    
    return jsFeatureLayerSaveAsOptions;
}


export async function buildDotNetFeatureLayerSaveAsOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureLayerSaveAsOptions: any = {};
    
    if (hasValue(jsObject.folder)) {
        let { buildDotNetPortalFolder } = await import('./portalFolder');
        dotNetFeatureLayerSaveAsOptions.folder = await buildDotNetPortalFolder(jsObject.folder);
    }
    
    if (hasValue(jsObject.ignoreUnsupported)) {
        dotNetFeatureLayerSaveAsOptions.ignoreUnsupported = jsObject.ignoreUnsupported;
    }
    

    return dotNetFeatureLayerSaveAsOptions;
}

