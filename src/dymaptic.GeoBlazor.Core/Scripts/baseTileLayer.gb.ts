// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import BaseTileLayer from '@arcgis/core/layers/BaseTileLayer';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, sanitize } from './arcGisJsInterop';
import { buildDotNetBaseTileLayer } from './baseTileLayer';
import {IPropertyWrapper} from './definitions';

export default class BaseTileLayerGenerated implements IPropertyWrapper {
    public layer: BaseTileLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: BaseTileLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }


    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.effect)) {
            let { buildJsEffect } = await import('./effect');
            this.layer.effect = buildJsEffect(dotNetObject.effect) as any;
        }
        if (hasValue(dotNetObject.fullExtent)) {
            let { buildJsExtent } = await import('./extent');
            this.layer.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;
        }
        if (hasValue(dotNetObject.tileInfo)) {
            let { buildJsTileInfo } = await import('./tileInfo');
            this.layer.tileInfo = await buildJsTileInfo(dotNetObject.tileInfo, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.visibilityTimeExtent)) {
            let { buildJsTimeExtent } = await import('./timeExtent');
            this.layer.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent) as any;
        }

        if (hasValue(dotNetObject.arcGISLayerId)) {
            this.layer.id = dotNetObject.arcGISLayerId;
        }
        if (hasValue(dotNetObject.blendMode)) {
            this.layer.blendMode = dotNetObject.blendMode;
        }
        if (hasValue(dotNetObject.listMode)) {
            this.layer.listMode = dotNetObject.listMode;
        }
        if (hasValue(dotNetObject.maxScale)) {
            this.layer.maxScale = dotNetObject.maxScale;
        }
        if (hasValue(dotNetObject.minScale)) {
            this.layer.minScale = dotNetObject.minScale;
        }
        if (hasValue(dotNetObject.opacity)) {
            this.layer.opacity = dotNetObject.opacity;
        }
        if (hasValue(dotNetObject.persistenceEnabled)) {
            this.layer.persistenceEnabled = dotNetObject.persistenceEnabled;
        }
        if (hasValue(dotNetObject.refreshInterval)) {
            this.layer.refreshInterval = dotNetObject.refreshInterval;
        }
        if (hasValue(dotNetObject.spatialReference)) {
            this.layer.spatialReference = sanitize(dotNetObject.spatialReference);
        }
        if (hasValue(dotNetObject.title)) {
            this.layer.title = dotNetObject.title;
        }
        if (hasValue(dotNetObject.visible)) {
            this.layer.visible = dotNetObject.visible;
        }
    }
    
    async addResolvingPromise(promiseToLoad: any): Promise<any> {
        return await this.layer.addResolvingPromise(promiseToLoad);
    }

    async createLayerView(view: any,
        options: any): Promise<any> {
        return await this.layer.createLayerView(view,
            options);
    }

    async fetchAttributionData(): Promise<any> {
        return await this.layer.fetchAttributionData();
    }

    async fetchTile(level: any,
        row: any,
        col: any,
        options: any): Promise<any> {
        return await this.layer.fetchTile(level,
            row,
            col,
            options);
    }

    async getTileUrl(level: any,
        row: any,
        col: any): Promise<any> {
        return this.layer.getTileUrl(level,
            row,
            col);
    }

    async refresh(): Promise<void> {
        this.layer.refresh();
    }

    // region properties
    
    async getEffect(): Promise<any> {
        if (!hasValue(this.layer.effect)) {
            return null;
        }
        
        let { buildDotNetEffect } = await import('./effect');
        return buildDotNetEffect(this.layer.effect);
    }
    
    async getFullExtent(): Promise<any> {
        if (!hasValue(this.layer.fullExtent)) {
            return null;
        }
        
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(this.layer.fullExtent);
    }
    
    async setFullExtent(value: any): Promise<void> {
        let { buildJsExtent } = await import('./extent');
        this.layer.fullExtent =  buildJsExtent(value);
    }
    
    async getTileInfo(): Promise<any> {
        if (!hasValue(this.layer.tileInfo)) {
            return null;
        }
        
        let { buildDotNetTileInfo } = await import('./tileInfo');
        return await buildDotNetTileInfo(this.layer.tileInfo);
    }
    
    async setTileInfo(value: any): Promise<void> {
        let { buildJsTileInfo } = await import('./tileInfo');
        this.layer.tileInfo = await  buildJsTileInfo(value, this.layerId, this.viewId);
    }
    
    async getVisibilityTimeExtent(): Promise<any> {
        if (!hasValue(this.layer.visibilityTimeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.visibilityTimeExtent);
    }
    
    async setVisibilityTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.visibilityTimeExtent = await  buildJsTimeExtent(value);
    }
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}

export async function buildJsBaseTileLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }
    
    switch (dotNetObject.type) {
        case 'base-tile':
            let properties: any = {};
            if (hasValue(dotNetObject.effect)) {
                let { buildJsEffect } = await import('./effect');
                properties.effect = buildJsEffect(dotNetObject.effect) as any;
            }
            if (hasValue(dotNetObject.fullExtent)) {
                let { buildJsExtent } = await import('./extent');
                properties.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;
            }
            if (hasValue(dotNetObject.tileInfo)) {
                let { buildJsTileInfo } = await import('./tileInfo');
                properties.tileInfo = await buildJsTileInfo(dotNetObject.tileInfo, layerId, viewId) as any;
            }
            if (hasValue(dotNetObject.visibilityTimeExtent)) {
                let { buildJsTimeExtent } = await import('./timeExtent');
                properties.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent) as any;
            }

            if (hasValue(dotNetObject.arcGISLayerId)) {
                properties.id = dotNetObject.arcGISLayerId;
            }
            if (hasValue(dotNetObject.blendMode)) {
                properties.blendMode = dotNetObject.blendMode;
            }
            if (hasValue(dotNetObject.listMode)) {
                properties.listMode = dotNetObject.listMode;
            }
            if (hasValue(dotNetObject.maxScale)) {
                properties.maxScale = dotNetObject.maxScale;
            }
            if (hasValue(dotNetObject.minScale)) {
                properties.minScale = dotNetObject.minScale;
            }
            if (hasValue(dotNetObject.opacity)) {
                properties.opacity = dotNetObject.opacity;
            }
            if (hasValue(dotNetObject.persistenceEnabled)) {
                properties.persistenceEnabled = dotNetObject.persistenceEnabled;
            }
            if (hasValue(dotNetObject.refreshInterval)) {
                properties.refreshInterval = dotNetObject.refreshInterval;
            }
            if (hasValue(dotNetObject.spatialReference)) {
                properties.spatialReference = sanitize(dotNetObject.spatialReference);
            }
            if (hasValue(dotNetObject.title)) {
                properties.title = dotNetObject.title;
            }
            if (hasValue(dotNetObject.visible)) {
                properties.visible = dotNetObject.visible;
            }
            let jsBaseTileLayer = new BaseTileLayer(properties);
            jsBaseTileLayer.on('layerview-create', async (evt: any) => {
                let { buildDotNetLayerViewCreateEvent } = await import('./layerViewCreateEvent');
                let dnEvent = await buildDotNetLayerViewCreateEvent(evt, layerId, viewId);
                await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreate', dnEvent);
            });
    
            jsBaseTileLayer.on('layerview-create-error', async (evt: any) => {
                let { buildDotNetLayerViewCreateErrorEvent } = await import('./layerViewCreateErrorEvent');
                let dnEvent = await buildDotNetLayerViewCreateErrorEvent(evt, layerId, viewId);
                await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreateError', dnEvent);
            });
    
            jsBaseTileLayer.on('layerview-destroy', async (evt: any) => {
                let { buildDotNetLayerViewDestroyEvent } = await import('./layerViewDestroyEvent');
                let dnEvent = await buildDotNetLayerViewDestroyEvent(evt, layerId, viewId);
                await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsDestroy', dnEvent);
            });
    
            jsBaseTileLayer.on('refresh', async (evt: any) => {
                await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsRefresh', evt);
            });
    

            let { default: BaseTileLayerWrapper } = await import('./baseTileLayer');
            let baseTileLayerWrapper = new BaseTileLayerWrapper(jsBaseTileLayer);
            baseTileLayerWrapper.geoBlazorId = dotNetObject.id;
            baseTileLayerWrapper.viewId = viewId;
            baseTileLayerWrapper.layerId = layerId;
    
            let jsObjectRef = DotNet.createJSObjectReference(baseTileLayerWrapper);
            jsObjectRefs[dotNetObject.id] = baseTileLayerWrapper;
            arcGisObjectRefs[dotNetObject.id] = jsBaseTileLayer;
    
            try {
                let { buildDotNetBaseTileLayer } = await import('./baseTileLayer');
                let dnInstantiatedObject = await buildDotNetBaseTileLayer(jsBaseTileLayer);

                let seenObjects = new WeakMap();
                await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
                    jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                        if (key.startsWith('_') || key === 'jsComponentReference') {
                            return undefined;
                        }
                        if (typeof value === 'object' && value !== null
                            && !(Array.isArray(value) && value.length === 0)) {
                            if (seenObjects.has(value)) {
                                console.debug(`Circular reference in serializing type BaseTileLayer detected at path: ${key}, value: ${value.declaredClass}`);
                                return undefined;
                            }
                            seenObjects.set(value, true);
                        }
                        return value;
                    }));
            } catch (e) {
                console.error('Error invoking OnJsComponentCreated for BaseTileLayer', e);
            }
    
            return jsBaseTileLayer;

        case 'bing-maps': 
            let { buildJsBingMapsLayer } = await import('./bingMapsLayer');
            return await buildJsBingMapsLayer(dotNetObject, layerId, viewId);
        default: 
            return sanitize(dotNetObject);
    }
}     

export async function buildDotNetBaseTileLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    switch (jsObject.type) {
        case 'base-tile': 
        let dotNetBaseTileLayer: any = {};
            if (hasValue(jsObject.effect)) {
                let { buildDotNetEffect } = await import('./effect');
                dotNetBaseTileLayer.effect = buildDotNetEffect(jsObject.effect);
            }
    
            if (hasValue(jsObject.fullExtent)) {
                let { buildDotNetExtent } = await import('./extent');
                dotNetBaseTileLayer.fullExtent = buildDotNetExtent(jsObject.fullExtent);
            }
    
            if (hasValue(jsObject.tileInfo)) {
                let { buildDotNetTileInfo } = await import('./tileInfo');
                dotNetBaseTileLayer.tileInfo = await buildDotNetTileInfo(jsObject.tileInfo);
            }
    
            if (hasValue(jsObject.visibilityTimeExtent)) {
                let { buildDotNetTimeExtent } = await import('./timeExtent');
                dotNetBaseTileLayer.visibilityTimeExtent = buildDotNetTimeExtent(jsObject.visibilityTimeExtent);
            }
    
            if (hasValue(jsObject.id)) {
                dotNetBaseTileLayer.arcGISLayerId = jsObject.id;
            }
    
            if (hasValue(jsObject.blendMode)) {
                dotNetBaseTileLayer.blendMode = jsObject.blendMode;
            }
    
            if (hasValue(jsObject.listMode)) {
                dotNetBaseTileLayer.listMode = jsObject.listMode;
            }
    
            if (hasValue(jsObject.loaded)) {
                dotNetBaseTileLayer.loaded = jsObject.loaded;
            }
    
            if (hasValue(jsObject.maxScale)) {
                dotNetBaseTileLayer.maxScale = jsObject.maxScale;
            }
    
            if (hasValue(jsObject.minScale)) {
                dotNetBaseTileLayer.minScale = jsObject.minScale;
            }
    
            if (hasValue(jsObject.opacity)) {
                dotNetBaseTileLayer.opacity = jsObject.opacity;
            }
    
            if (hasValue(jsObject.persistenceEnabled)) {
                dotNetBaseTileLayer.persistenceEnabled = jsObject.persistenceEnabled;
            }
    
            if (hasValue(jsObject.refreshInterval)) {
                dotNetBaseTileLayer.refreshInterval = jsObject.refreshInterval;
            }
    
            if (hasValue(jsObject.spatialReference)) {
                dotNetBaseTileLayer.spatialReference = jsObject.spatialReference;
            }
    
            if (hasValue(jsObject.title)) {
                dotNetBaseTileLayer.title = jsObject.title;
            }
    
            if (hasValue(jsObject.type)) {
                dotNetBaseTileLayer.type = jsObject.type;
            }
    
            if (hasValue(jsObject.visible)) {
                dotNetBaseTileLayer.visible = jsObject.visible;
            }
    

            let geoBlazorId = lookupGeoBlazorId(jsObject);
            if (hasValue(geoBlazorId)) {
                dotNetBaseTileLayer.id = geoBlazorId;
            }

            return dotNetBaseTileLayer;

        case 'bing-maps': 
            let { buildDotNetBingMapsLayer } = await import('./bingMapsLayer');
            return await buildDotNetBingMapsLayer(jsObject);
        default: 
            return jsObject;
    }
}     

