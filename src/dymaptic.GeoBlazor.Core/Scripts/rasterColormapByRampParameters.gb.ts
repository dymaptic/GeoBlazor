import { buildDotNetRasterColormapByRampParameters } from './rasterColormapByRampParameters';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import RasterColormapByRampParameters = __esri.RasterColormapByRampParameters;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsRasterColormapByRampParametersGenerated(dotNetObject: any): Promise<any> {
    let jsRasterColormapByRampParameters: any = {}

    if (hasValue(dotNetObject.colorRamp)) {
        jsRasterColormapByRampParameters.colorRamp = dotNetObject.colorRamp;
    }
    if (hasValue(dotNetObject.outputPixelType)) {
        jsRasterColormapByRampParameters.outputPixelType = dotNetObject.outputPixelType;
    }
    if (hasValue(dotNetObject.raster)) {
        jsRasterColormapByRampParameters.raster = dotNetObject.raster;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsRasterColormapByRampParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRasterColormapByRampParameters;
    
    let dnInstantiatedObject = await buildDotNetRasterColormapByRampParameters(jsRasterColormapByRampParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RasterColormapByRampParameters', e);
    }
    
    return jsRasterColormapByRampParameters;
}
export async function buildDotNetRasterColormapByRampParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRasterColormapByRampParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.colorRamp)) {
            dotNetRasterColormapByRampParameters.colorRamp = jsObject.colorRamp;
        }
        if (hasValue(jsObject.outputPixelType)) {
            dotNetRasterColormapByRampParameters.outputPixelType = jsObject.outputPixelType;
        }
        if (hasValue(jsObject.raster)) {
            dotNetRasterColormapByRampParameters.raster = jsObject.raster;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRasterColormapByRampParameters.id = k;
                break;
            }
        }
    }

    return dotNetRasterColormapByRampParameters;
}

