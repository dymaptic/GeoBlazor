// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetStretchMultibandTitle } from './stretchMultibandTitle';

export async function buildJsStretchMultibandTitleGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsStretchMultibandTitle: any = {};

    if (hasValue(dotNetObject.bandName)) {
        jsStretchMultibandTitle.bandName = dotNetObject.bandName;
    }
    if (hasValue(dotNetObject.colorName)) {
        jsStretchMultibandTitle.colorName = dotNetObject.colorName;
    }
    
    jsObjectRefs[dotNetObject.id] = jsStretchMultibandTitle;
    arcGisObjectRefs[dotNetObject.id] = jsStretchMultibandTitle;
    
    return jsStretchMultibandTitle;
}


export async function buildDotNetStretchMultibandTitleGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetStretchMultibandTitle: any = {};
    
    if (hasValue(jsObject.bandName)) {
        dotNetStretchMultibandTitle.bandName = jsObject.bandName;
    }
    
    if (hasValue(jsObject.colorName)) {
        dotNetStretchMultibandTitle.colorName = jsObject.colorName;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetStretchMultibandTitle.id = geoBlazorId;
    }

    return dotNetStretchMultibandTitle;
}

