// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetMapViewConstraints } from './mapViewConstraints';

export async function buildJsMapViewConstraintsGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsMapViewConstraints: any = {};
    if (hasValue(dotNetObject.effectiveLODs) && dotNetObject.effectiveLODs.length > 0) {
        let { buildJsLOD } = await import('./lOD');
        jsMapViewConstraints.effectiveLODs = await Promise.all(dotNetObject.effectiveLODs.map(async i => await buildJsLOD(i))) as any;
    }
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsGeometry } = await import('./geometry');
        jsMapViewConstraints.geometry = buildJsGeometry(dotNetObject.geometry) as any;
    }
    if (hasValue(dotNetObject.lods) && dotNetObject.lods.length > 0) {
        let { buildJsLOD } = await import('./lOD');
        jsMapViewConstraints.lods = await Promise.all(dotNetObject.lods.map(async i => await buildJsLOD(i))) as any;
    }

    if (hasValue(dotNetObject.effectiveMaxScale)) {
        jsMapViewConstraints.effectiveMaxScale = dotNetObject.effectiveMaxScale;
    }
    if (hasValue(dotNetObject.effectiveMaxZoom)) {
        jsMapViewConstraints.effectiveMaxZoom = dotNetObject.effectiveMaxZoom;
    }
    if (hasValue(dotNetObject.effectiveMinScale)) {
        jsMapViewConstraints.effectiveMinScale = dotNetObject.effectiveMinScale;
    }
    if (hasValue(dotNetObject.effectiveMinZoom)) {
        jsMapViewConstraints.effectiveMinZoom = dotNetObject.effectiveMinZoom;
    }
    if (hasValue(dotNetObject.maxScale)) {
        jsMapViewConstraints.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.maxZoom)) {
        jsMapViewConstraints.maxZoom = dotNetObject.maxZoom;
    }
    if (hasValue(dotNetObject.minScale)) {
        jsMapViewConstraints.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.minZoom)) {
        jsMapViewConstraints.minZoom = dotNetObject.minZoom;
    }
    if (hasValue(dotNetObject.rotationEnabled)) {
        jsMapViewConstraints.rotationEnabled = dotNetObject.rotationEnabled;
    }
    if (hasValue(dotNetObject.snapToZoom)) {
        jsMapViewConstraints.snapToZoom = dotNetObject.snapToZoom;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsMapViewConstraints);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsMapViewConstraints;
    
    return jsMapViewConstraints;
}


export async function buildDotNetMapViewConstraintsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMapViewConstraints: any = {};
    
    if (hasValue(jsObject.effectiveLODs)) {
        let { buildDotNetLOD } = await import('./lOD');
        dotNetMapViewConstraints.effectiveLODs = await Promise.all(jsObject.effectiveLODs.map(async i => await buildDotNetLOD(i)));
    }
    
    if (hasValue(jsObject.geometry)) {
        let { buildDotNetGeometry } = await import('./geometry');
        dotNetMapViewConstraints.geometry = buildDotNetGeometry(jsObject.geometry);
    }
    
    if (hasValue(jsObject.lods)) {
        let { buildDotNetLOD } = await import('./lOD');
        dotNetMapViewConstraints.lods = await Promise.all(jsObject.lods.map(async i => await buildDotNetLOD(i)));
    }
    
    if (hasValue(jsObject.effectiveMaxScale)) {
        dotNetMapViewConstraints.effectiveMaxScale = jsObject.effectiveMaxScale;
    }
    
    if (hasValue(jsObject.effectiveMaxZoom)) {
        dotNetMapViewConstraints.effectiveMaxZoom = jsObject.effectiveMaxZoom;
    }
    
    if (hasValue(jsObject.effectiveMinScale)) {
        dotNetMapViewConstraints.effectiveMinScale = jsObject.effectiveMinScale;
    }
    
    if (hasValue(jsObject.effectiveMinZoom)) {
        dotNetMapViewConstraints.effectiveMinZoom = jsObject.effectiveMinZoom;
    }
    
    if (hasValue(jsObject.maxScale)) {
        dotNetMapViewConstraints.maxScale = jsObject.maxScale;
    }
    
    if (hasValue(jsObject.maxZoom)) {
        dotNetMapViewConstraints.maxZoom = jsObject.maxZoom;
    }
    
    if (hasValue(jsObject.minScale)) {
        dotNetMapViewConstraints.minScale = jsObject.minScale;
    }
    
    if (hasValue(jsObject.minZoom)) {
        dotNetMapViewConstraints.minZoom = jsObject.minZoom;
    }
    
    if (hasValue(jsObject.rotationEnabled)) {
        dotNetMapViewConstraints.rotationEnabled = jsObject.rotationEnabled;
    }
    
    if (hasValue(jsObject.snapToZoom)) {
        dotNetMapViewConstraints.snapToZoom = jsObject.snapToZoom;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetMapViewConstraints.id = geoBlazorId;
    }

    return dotNetMapViewConstraints;
}

