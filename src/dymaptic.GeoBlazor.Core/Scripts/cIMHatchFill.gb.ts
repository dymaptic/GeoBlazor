// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetCIMHatchFill } from './cIMHatchFill';

export async function buildJsCIMHatchFillGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCIMHatchFill: any = {}
    if (hasValue(dotNetObject.lineSymbol)) {
        let { buildJsCIMLineSymbol } = await import('./cIMLineSymbol');
        jsCIMHatchFill.lineSymbol = await buildJsCIMLineSymbol(dotNetObject.lineSymbol, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.colorLocked)) {
        jsCIMHatchFill.colorLocked = dotNetObject.colorLocked;
    }
    if (hasValue(dotNetObject.effects)) {
        jsCIMHatchFill.effects = dotNetObject.effects;
    }
    if (hasValue(dotNetObject.enable)) {
        jsCIMHatchFill.enable = dotNetObject.enable;
    }
    if (hasValue(dotNetObject.name)) {
        jsCIMHatchFill.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.offsetX)) {
        jsCIMHatchFill.offsetX = dotNetObject.offsetX;
    }
    if (hasValue(dotNetObject.offsetY)) {
        jsCIMHatchFill.offsetY = dotNetObject.offsetY;
    }
    if (hasValue(dotNetObject.overprint)) {
        jsCIMHatchFill.overprint = dotNetObject.overprint;
    }
    if (hasValue(dotNetObject.primitiveName)) {
        jsCIMHatchFill.primitiveName = dotNetObject.primitiveName;
    }
    if (hasValue(dotNetObject.rotation)) {
        jsCIMHatchFill.rotation = dotNetObject.rotation;
    }
    if (hasValue(dotNetObject.separation)) {
        jsCIMHatchFill.separation = dotNetObject.separation;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsCIMHatchFill);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCIMHatchFill;
    
    let dnInstantiatedObject = await buildDotNetCIMHatchFill(jsCIMHatchFill);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CIMHatchFill', e);
    }
    
    return jsCIMHatchFill;
}

export async function buildDotNetCIMHatchFillGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCIMHatchFill: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.lineSymbol)) {
            let { buildDotNetCIMLineSymbol } = await import('./cIMLineSymbol');
            dotNetCIMHatchFill.lineSymbol = await buildDotNetCIMLineSymbol(jsObject.lineSymbol);
        }
        if (hasValue(jsObject.colorLocked)) {
            dotNetCIMHatchFill.colorLocked = jsObject.colorLocked;
        }
        if (hasValue(jsObject.effects)) {
            dotNetCIMHatchFill.effects = jsObject.effects;
        }
        if (hasValue(jsObject.enable)) {
            dotNetCIMHatchFill.enable = jsObject.enable;
        }
        if (hasValue(jsObject.name)) {
            dotNetCIMHatchFill.name = jsObject.name;
        }
        if (hasValue(jsObject.offsetX)) {
            dotNetCIMHatchFill.offsetX = jsObject.offsetX;
        }
        if (hasValue(jsObject.offsetY)) {
            dotNetCIMHatchFill.offsetY = jsObject.offsetY;
        }
        if (hasValue(jsObject.overprint)) {
            dotNetCIMHatchFill.overprint = jsObject.overprint;
        }
        if (hasValue(jsObject.primitiveName)) {
            dotNetCIMHatchFill.primitiveName = jsObject.primitiveName;
        }
        if (hasValue(jsObject.rotation)) {
            dotNetCIMHatchFill.rotation = jsObject.rotation;
        }
        if (hasValue(jsObject.separation)) {
            dotNetCIMHatchFill.separation = jsObject.separation;
        }
        if (hasValue(jsObject.type)) {
            dotNetCIMHatchFill.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCIMHatchFill.id = k;
                break;
            }
        }
    }

    return dotNetCIMHatchFill;
}

