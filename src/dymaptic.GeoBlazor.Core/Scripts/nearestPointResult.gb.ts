// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetNearestPointResult } from './nearestPointResult';

export async function buildJsNearestPointResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsNearestPointResult: any = {};
    if (hasValue(dotNetObject.coordinate)) {
        let { buildJsPoint } = await import('./point');
        jsNearestPointResult.coordinate = buildJsPoint(dotNetObject.coordinate) as any;
    }

    if (hasValue(dotNetObject.distance)) {
        jsNearestPointResult.distance = dotNetObject.distance;
    }
    if (hasValue(dotNetObject.isEmpty)) {
        jsNearestPointResult.isEmpty = dotNetObject.isEmpty;
    }
    if (hasValue(dotNetObject.vertexIndex)) {
        jsNearestPointResult.vertexIndex = dotNetObject.vertexIndex;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsNearestPointResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsNearestPointResult;
    
    return jsNearestPointResult;
}


export async function buildDotNetNearestPointResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetNearestPointResult: any = {};
    
    if (hasValue(jsObject.coordinate)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetNearestPointResult.coordinate = buildDotNetPoint(jsObject.coordinate);
    }
    
    if (hasValue(jsObject.distance)) {
        dotNetNearestPointResult.distance = jsObject.distance;
    }
    
    if (hasValue(jsObject.isEmpty)) {
        dotNetNearestPointResult.isEmpty = jsObject.isEmpty;
    }
    
    if (hasValue(jsObject.vertexIndex)) {
        dotNetNearestPointResult.vertexIndex = jsObject.vertexIndex;
    }
    

    return dotNetNearestPointResult;
}

