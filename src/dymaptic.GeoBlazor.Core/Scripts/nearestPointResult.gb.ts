// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetNearestPointResult } from './nearestPointResult';

export async function buildJsNearestPointResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsNearestPointResult: any = {};

    if (hasValue(dotNetObject.coordinate)) {
        const { id, dotNetComponentReference, ...sanitizedCoordinate } = dotNetObject.coordinate;
        jsNearestPointResult.coordinate = sanitizedCoordinate;
    }
    if (hasValue(dotNetObject.distance)) {
        jsNearestPointResult.distance = dotNetObject.distance;
    }
    if (hasValue(dotNetObject.isEmpty)) {
        jsNearestPointResult.isEmpty = dotNetObject.isEmpty;
    }
    if (hasValue(dotNetObject.vertexIndex)) {
        jsNearestPointResult.vertexIndex = dotNetObject.vertexIndex;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsNearestPointResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsNearestPointResult;
    
    let { buildDotNetNearestPointResult } = await import('./nearestPointResult');
    let dnInstantiatedObject = await buildDotNetNearestPointResult(jsNearestPointResult);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type NearestPointResult detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for NearestPointResult', e);
    }
    
    return jsNearestPointResult;
}


export async function buildDotNetNearestPointResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetNearestPointResult: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.coordinate)) {
        dotNetNearestPointResult.coordinate = jsObject.coordinate;
    }
    if (hasValue(jsObject.distance)) {
        dotNetNearestPointResult.distance = jsObject.distance;
    }
    if (hasValue(jsObject.isEmpty)) {
        dotNetNearestPointResult.isEmpty = jsObject.isEmpty;
    }
    if (hasValue(jsObject.vertexIndex)) {
        dotNetNearestPointResult.vertexIndex = jsObject.vertexIndex;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetNearestPointResult.id = k;
                break;
            }
        }
    }

    return dotNetNearestPointResult;
}

