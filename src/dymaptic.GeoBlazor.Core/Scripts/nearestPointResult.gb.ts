// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetNearestPointResult } from './nearestPointResult';
import NearestPointResult = __esri.NearestPointResult;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsNearestPointResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsNearestPointResult: any = {}
    if (hasValue(dotNetObject.coordinate)) {
        let { buildJsPoint } = await import('./point');
        jsNearestPointResult.coordinate = buildJsPoint(dotNetObject.coordinate) as any;
    }

    if (hasValue(dotNetObject.distance)) {
        jsNearestPointResult.distance = dotNetObject.distance;
    }
    if (hasValue(dotNetObject.isEmpty)) {
        jsNearestPointResult.isEmpty = dotNetObject.isEmpty;
    }
    if (hasValue(dotNetObject.vertexIndex)) {
        jsNearestPointResult.vertexIndex = dotNetObject.vertexIndex;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsNearestPointResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsNearestPointResult;
    
    let dnInstantiatedObject = await buildDotNetNearestPointResult(jsNearestPointResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for NearestPointResult', e);
    }
    
    return jsNearestPointResult;
}

export async function buildDotNetNearestPointResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetNearestPointResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.coordinate)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetNearestPointResult.coordinate = buildDotNetPoint(jsObject.coordinate);
        }
        if (hasValue(jsObject.distance)) {
            dotNetNearestPointResult.distance = jsObject.distance;
        }
        if (hasValue(jsObject.isEmpty)) {
            dotNetNearestPointResult.isEmpty = jsObject.isEmpty;
        }
        if (hasValue(jsObject.vertexIndex)) {
            dotNetNearestPointResult.vertexIndex = jsObject.vertexIndex;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetNearestPointResult.id = k;
                break;
            }
        }
    }

    return dotNetNearestPointResult;
}

