// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCIMObjectMarker3D } from './cIMObjectMarker3D';

export async function buildJsCIMObjectMarker3DGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCIMObjectMarker3D: any = {};
    if (hasValue(dotNetObject.anchorPoint)) {
        let { buildJsExternalReferencePoint } = await import('./externalReferencePoint');
        jsCIMObjectMarker3D.anchorPoint = await buildJsExternalReferencePoint(dotNetObject.anchorPoint, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.effects)) {
        let { buildJsICIMGeometricEffectType } = await import('./iCIMGeometricEffectType');
        jsCIMObjectMarker3D.effects = dotNetObject.effects.map(i => buildJsICIMGeometricEffectType(i)) as any;
    }
    if (hasValue(dotNetObject.lODs)) {
        let { buildJsCIMObjectMarker3DLOD } = await import('./cIMObjectMarker3DLOD');
        jsCIMObjectMarker3D.LODs = await Promise.all(dotNetObject.lODs.map(async i => await buildJsCIMObjectMarker3DLOD(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.markerPlacement)) {
        let { buildJsICIMMarkerPlacementType } = await import('./iCIMMarkerPlacementType');
        jsCIMObjectMarker3D.markerPlacement = buildJsICIMMarkerPlacementType(dotNetObject.markerPlacement) as any;
    }

    if (hasValue(dotNetObject.anchorPointUnits)) {
        jsCIMObjectMarker3D.anchorPointUnits = dotNetObject.anchorPointUnits;
    }
    if (hasValue(dotNetObject.angleX)) {
        jsCIMObjectMarker3D.angleX = dotNetObject.angleX;
    }
    if (hasValue(dotNetObject.angleY)) {
        jsCIMObjectMarker3D.angleY = dotNetObject.angleY;
    }
    if (hasValue(dotNetObject.billboardMode3D)) {
        jsCIMObjectMarker3D.billboardMode3D = dotNetObject.billboardMode3D;
    }
    if (hasValue(dotNetObject.colorLocked)) {
        jsCIMObjectMarker3D.colorLocked = dotNetObject.colorLocked;
    }
    if (hasValue(dotNetObject.depth)) {
        jsCIMObjectMarker3D.depth = dotNetObject.depth;
    }
    if (hasValue(dotNetObject.dominantSizeAxis3D)) {
        jsCIMObjectMarker3D.dominantSizeAxis3D = dotNetObject.dominantSizeAxis3D;
    }
    if (hasValue(dotNetObject.enable)) {
        jsCIMObjectMarker3D.enable = dotNetObject.enable;
    }
    if (hasValue(dotNetObject.isRestricted)) {
        jsCIMObjectMarker3D.isRestricted = dotNetObject.isRestricted;
    }
    if (hasValue(dotNetObject.modelURI)) {
        jsCIMObjectMarker3D.modelURI = dotNetObject.modelURI;
    }
    if (hasValue(dotNetObject.name)) {
        jsCIMObjectMarker3D.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.offsetX)) {
        jsCIMObjectMarker3D.offsetX = dotNetObject.offsetX;
    }
    if (hasValue(dotNetObject.offsetY)) {
        jsCIMObjectMarker3D.offsetY = dotNetObject.offsetY;
    }
    if (hasValue(dotNetObject.offsetZ)) {
        jsCIMObjectMarker3D.offsetZ = dotNetObject.offsetZ;
    }
    if (hasValue(dotNetObject.overprint)) {
        jsCIMObjectMarker3D.overprint = dotNetObject.overprint;
    }
    if (hasValue(dotNetObject.primitiveName)) {
        jsCIMObjectMarker3D.primitiveName = dotNetObject.primitiveName;
    }
    if (hasValue(dotNetObject.rotateClockwise)) {
        jsCIMObjectMarker3D.rotateClockwise = dotNetObject.rotateClockwise;
    }
    if (hasValue(dotNetObject.rotation)) {
        jsCIMObjectMarker3D.rotation = dotNetObject.rotation;
    }
    if (hasValue(dotNetObject.size)) {
        jsCIMObjectMarker3D.size = dotNetObject.size;
    }
    if (hasValue(dotNetObject.thumbnail)) {
        jsCIMObjectMarker3D.thumbnail = dotNetObject.thumbnail;
    }
    if (hasValue(dotNetObject.tintColor)) {
        jsCIMObjectMarker3D.tintColor = dotNetObject.tintColor;
    }
    if (hasValue(dotNetObject.useAnchorPoint)) {
        jsCIMObjectMarker3D.useAnchorPoint = dotNetObject.useAnchorPoint;
    }
    if (hasValue(dotNetObject.width)) {
        jsCIMObjectMarker3D.width = dotNetObject.width;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCIMObjectMarker3D);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCIMObjectMarker3D;
    
    let { buildDotNetCIMObjectMarker3D } = await import('./cIMObjectMarker3D');
    let dnInstantiatedObject = await buildDotNetCIMObjectMarker3D(jsCIMObjectMarker3D);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type CIMObjectMarker3D detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CIMObjectMarker3D', e);
    }
    
    return jsCIMObjectMarker3D;
}


export async function buildDotNetCIMObjectMarker3DGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCIMObjectMarker3D: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.anchorPoint)) {
        let { buildDotNetExternalReferencePoint } = await import('./externalReferencePoint');
        dotNetCIMObjectMarker3D.anchorPoint = await buildDotNetExternalReferencePoint(jsObject.anchorPoint);
    }
    if (hasValue(jsObject.effects)) {
        let { buildDotNetICIMGeometricEffectType } = await import('./iCIMGeometricEffectType');
        dotNetCIMObjectMarker3D.effects = jsObject.effects.map(i => buildDotNetICIMGeometricEffectType(i));
    }
    if (hasValue(jsObject.LODs)) {
        let { buildDotNetCIMObjectMarker3DLOD } = await import('./cIMObjectMarker3DLOD');
        dotNetCIMObjectMarker3D.lODs = await Promise.all(jsObject.LODs.map(async i => await buildDotNetCIMObjectMarker3DLOD(i)));
    }
    if (hasValue(jsObject.markerPlacement)) {
        let { buildDotNetICIMMarkerPlacementType } = await import('./iCIMMarkerPlacementType');
        dotNetCIMObjectMarker3D.markerPlacement = buildDotNetICIMMarkerPlacementType(jsObject.markerPlacement);
    }
    if (hasValue(jsObject.anchorPointUnits)) {
        dotNetCIMObjectMarker3D.anchorPointUnits = jsObject.anchorPointUnits;
    }
    if (hasValue(jsObject.angleX)) {
        dotNetCIMObjectMarker3D.angleX = jsObject.angleX;
    }
    if (hasValue(jsObject.angleY)) {
        dotNetCIMObjectMarker3D.angleY = jsObject.angleY;
    }
    if (hasValue(jsObject.billboardMode3D)) {
        dotNetCIMObjectMarker3D.billboardMode3D = jsObject.billboardMode3D;
    }
    if (hasValue(jsObject.colorLocked)) {
        dotNetCIMObjectMarker3D.colorLocked = jsObject.colorLocked;
    }
    if (hasValue(jsObject.depth)) {
        dotNetCIMObjectMarker3D.depth = jsObject.depth;
    }
    if (hasValue(jsObject.dominantSizeAxis3D)) {
        dotNetCIMObjectMarker3D.dominantSizeAxis3D = jsObject.dominantSizeAxis3D;
    }
    if (hasValue(jsObject.enable)) {
        dotNetCIMObjectMarker3D.enable = jsObject.enable;
    }
    if (hasValue(jsObject.isRestricted)) {
        dotNetCIMObjectMarker3D.isRestricted = jsObject.isRestricted;
    }
    if (hasValue(jsObject.modelURI)) {
        dotNetCIMObjectMarker3D.modelURI = jsObject.modelURI;
    }
    if (hasValue(jsObject.name)) {
        dotNetCIMObjectMarker3D.name = jsObject.name;
    }
    if (hasValue(jsObject.offsetX)) {
        dotNetCIMObjectMarker3D.offsetX = jsObject.offsetX;
    }
    if (hasValue(jsObject.offsetY)) {
        dotNetCIMObjectMarker3D.offsetY = jsObject.offsetY;
    }
    if (hasValue(jsObject.offsetZ)) {
        dotNetCIMObjectMarker3D.offsetZ = jsObject.offsetZ;
    }
    if (hasValue(jsObject.overprint)) {
        dotNetCIMObjectMarker3D.overprint = jsObject.overprint;
    }
    if (hasValue(jsObject.primitiveName)) {
        dotNetCIMObjectMarker3D.primitiveName = jsObject.primitiveName;
    }
    if (hasValue(jsObject.rotateClockwise)) {
        dotNetCIMObjectMarker3D.rotateClockwise = jsObject.rotateClockwise;
    }
    if (hasValue(jsObject.rotation)) {
        dotNetCIMObjectMarker3D.rotation = jsObject.rotation;
    }
    if (hasValue(jsObject.size)) {
        dotNetCIMObjectMarker3D.size = jsObject.size;
    }
    if (hasValue(jsObject.thumbnail)) {
        dotNetCIMObjectMarker3D.thumbnail = jsObject.thumbnail;
    }
    if (hasValue(jsObject.tintColor)) {
        dotNetCIMObjectMarker3D.tintColor = jsObject.tintColor;
    }
    if (hasValue(jsObject.type)) {
        dotNetCIMObjectMarker3D.type = jsObject.type;
    }
    if (hasValue(jsObject.useAnchorPoint)) {
        dotNetCIMObjectMarker3D.useAnchorPoint = jsObject.useAnchorPoint;
    }
    if (hasValue(jsObject.width)) {
        dotNetCIMObjectMarker3D.width = jsObject.width;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCIMObjectMarker3D.id = geoBlazorId;
    }

    return dotNetCIMObjectMarker3D;
}

