// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageIdentifyResult from '@arcgis/core/rest/support/ImageIdentifyResult';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetImageIdentifyResult } from './imageIdentifyResult';

export async function buildJsImageIdentifyResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.catalogItems)) {
        let { buildJsFeatureSet } = await import('./featureSet');
        properties.catalogItems = buildJsFeatureSet(dotNetObject.catalogItems) as any;
    }
    if (hasValue(dotNetObject.location)) {
        let { buildJsPoint } = await import('./point');
        properties.location = buildJsPoint(dotNetObject.location) as any;
    }

    if (hasValue(dotNetObject.catalogItemVisibilities) && dotNetObject.catalogItemVisibilities.length > 0) {
        properties.catalogItemVisibilities = dotNetObject.catalogItemVisibilities;
    }
    if (hasValue(dotNetObject.name)) {
        properties.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.objectId)) {
        properties.objectId = dotNetObject.objectId;
    }
    if (hasValue(dotNetObject.properties)) {
        properties.properties = dotNetObject.properties;
    }
    if (hasValue(dotNetObject.value)) {
        properties.value = dotNetObject.value;
    }
    let jsImageIdentifyResult = new ImageIdentifyResult(properties);
    
    jsObjectRefs[dotNetObject.id] = jsImageIdentifyResult;
    arcGisObjectRefs[dotNetObject.id] = jsImageIdentifyResult;
    
    return jsImageIdentifyResult;
}


export async function buildDotNetImageIdentifyResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageIdentifyResult: any = {};
    
    if (hasValue(jsObject.catalogItems)) {
        let { buildDotNetFeatureSet } = await import('./featureSet');
        dotNetImageIdentifyResult.catalogItems = await buildDotNetFeatureSet(jsObject.catalogItems, layerId, viewId);
    }
    
    if (hasValue(jsObject.location)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetImageIdentifyResult.location = buildDotNetPoint(jsObject.location);
    }
    
    if (hasValue(jsObject.catalogItemVisibilities)) {
        dotNetImageIdentifyResult.catalogItemVisibilities = jsObject.catalogItemVisibilities;
    }
    
    if (hasValue(jsObject.name)) {
        dotNetImageIdentifyResult.name = jsObject.name;
    }
    
    if (hasValue(jsObject.objectId)) {
        dotNetImageIdentifyResult.objectId = jsObject.objectId;
    }
    
    if (hasValue(jsObject.properties)) {
        dotNetImageIdentifyResult.properties = jsObject.properties;
    }
    
    if (hasValue(jsObject.value)) {
        dotNetImageIdentifyResult.value = jsObject.value;
    }
    

    return dotNetImageIdentifyResult;
}

