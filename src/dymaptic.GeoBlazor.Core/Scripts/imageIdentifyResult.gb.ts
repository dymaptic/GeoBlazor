// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageIdentifyResult from '@arcgis/core/rest/support/ImageIdentifyResult';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetImageIdentifyResult } from './imageIdentifyResult';

export async function buildJsImageIdentifyResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.catalogItems)) {
        let { buildJsFeatureSet } = await import('./featureSet');
        properties.catalogItems = buildJsFeatureSet(dotNetObject.catalogItems) as any;
    }

    if (hasValue(dotNetObject.catalogItemVisibilities)) {
        properties.catalogItemVisibilities = dotNetObject.catalogItemVisibilities;
    }
    if (hasValue(dotNetObject.location)) {
        const { id, dotNetComponentReference, ...sanitizedLocation } = dotNetObject.location;
        properties.location = sanitizedLocation;
    }
    if (hasValue(dotNetObject.name)) {
        properties.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.objectId)) {
        properties.objectId = dotNetObject.objectId;
    }
    if (hasValue(dotNetObject.properties)) {
        properties.properties = dotNetObject.properties;
    }
    if (hasValue(dotNetObject.value)) {
        properties.value = dotNetObject.value;
    }
    let jsImageIdentifyResult = new ImageIdentifyResult(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsImageIdentifyResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageIdentifyResult;
    
    let { buildDotNetImageIdentifyResult } = await import('./imageIdentifyResult');
    let dnInstantiatedObject = await buildDotNetImageIdentifyResult(jsImageIdentifyResult, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type ImageIdentifyResult detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImageIdentifyResult', e);
    }
    
    return jsImageIdentifyResult;
}


export async function buildDotNetImageIdentifyResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageIdentifyResult: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.catalogItems)) {
        let { buildDotNetFeatureSet } = await import('./featureSet');
        dotNetImageIdentifyResult.catalogItems = buildDotNetFeatureSet(jsObject.catalogItems);
    }
    if (hasValue(jsObject.catalogItemVisibilities)) {
        dotNetImageIdentifyResult.catalogItemVisibilities = jsObject.catalogItemVisibilities;
    }
    if (hasValue(jsObject.location)) {
        dotNetImageIdentifyResult.location = jsObject.location;
    }
    if (hasValue(jsObject.name)) {
        dotNetImageIdentifyResult.name = jsObject.name;
    }
    if (hasValue(jsObject.objectId)) {
        dotNetImageIdentifyResult.objectId = jsObject.objectId;
    }
    if (hasValue(jsObject.properties)) {
        dotNetImageIdentifyResult.properties = jsObject.properties;
    }
    if (hasValue(jsObject.value)) {
        dotNetImageIdentifyResult.value = jsObject.value;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImageIdentifyResult.id = k;
                break;
            }
        }
    }

    return dotNetImageIdentifyResult;
}

