import {buildDotNetImageIdentifyResult} from './imageIdentifyResult';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import ImageIdentifyResult from '@arcgis/core/rest/support/ImageIdentifyResult';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsImageIdentifyResultGenerated(dotNetObject: any): Promise<any> {
    let jsImageIdentifyResult = new ImageIdentifyResult();
    if (hasValue(dotNetObject.catalogItems)) {
        let {buildJsFeatureSet} = await import('./featureSet');
        jsImageIdentifyResult.catalogItems = buildJsFeatureSet(dotNetObject.catalogItems) as any;
    }
    if (hasValue(dotNetObject.location)) {
        let {buildJsPoint} = await import('./point');
        jsImageIdentifyResult.location = buildJsPoint(dotNetObject.location) as any;
    }

    if (hasValue(dotNetObject.catalogItemVisibilities)) {
        jsImageIdentifyResult.catalogItemVisibilities = dotNetObject.catalogItemVisibilities;
    }
    if (hasValue(dotNetObject.name)) {
        jsImageIdentifyResult.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.objectId)) {
        jsImageIdentifyResult.objectId = dotNetObject.objectId;
    }
    if (hasValue(dotNetObject.properties)) {
        jsImageIdentifyResult.properties = dotNetObject.properties;
    }
    if (hasValue(dotNetObject.value)) {
        jsImageIdentifyResult.value = dotNetObject.value;
    }

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsImageIdentifyResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageIdentifyResult;

    let dnInstantiatedObject = await buildDotNetImageIdentifyResult(jsImageIdentifyResult);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImageIdentifyResult', e);
    }

    return jsImageIdentifyResult;
}

export async function buildDotNetImageIdentifyResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetImageIdentifyResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.catalogItems)) {
        let {buildDotNetFeatureSet} = await import('./featureSet');
        dotNetImageIdentifyResult.catalogItems = await buildDotNetFeatureSet(jsObject.catalogItems, layerId, viewId);
    }
    if (hasValue(jsObject.location)) {
        let {buildDotNetPoint} = await import('./point');
        dotNetImageIdentifyResult.location = buildDotNetPoint(jsObject.location);
    }
    if (hasValue(jsObject.catalogItemVisibilities)) {
        dotNetImageIdentifyResult.catalogItemVisibilities = jsObject.catalogItemVisibilities;
    }
    if (hasValue(jsObject.name)) {
        dotNetImageIdentifyResult.name = jsObject.name;
    }
    if (hasValue(jsObject.objectId)) {
        dotNetImageIdentifyResult.objectId = jsObject.objectId;
    }
    if (hasValue(jsObject.properties)) {
        dotNetImageIdentifyResult.properties = jsObject.properties;
    }
    if (hasValue(jsObject.value)) {
        dotNetImageIdentifyResult.value = jsObject.value;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImageIdentifyResult.id = k;
                break;
            }
        }
    }

    return dotNetImageIdentifyResult;
}

