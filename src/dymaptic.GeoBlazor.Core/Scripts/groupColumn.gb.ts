// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import GroupColumn from '@arcgis/core/widgets/FeatureTable/Grid/GroupColumn';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class GroupColumnGenerated implements IPropertyWrapper {
    public component: GroupColumn;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: GroupColumn) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async closeMenu(): Promise<void> {
        this.component.closeMenu();
    }

    async openMenu(): Promise<void> {
        this.component.openMenu();
    }

    async sort(): Promise<void> {
        this.component.sort();
    }

    // region properties
    
    async getColumns(): Promise<any> {
        if (!hasValue(this.component.columns)) {
            return null;
        }
        
        let { buildDotNetColumn } = await import('./column');
        return await Promise.all(this.component.columns.map(async i => await buildDotNetColumn(i)));
    }
    
    async getMenuConfig(): Promise<any> {
        if (!hasValue(this.component.menuConfig)) {
            return null;
        }
        
        let { buildDotNetColumnTableMenuConfig } = await import('./columnTableMenuConfig');
        return await buildDotNetColumnTableMenuConfig(this.component.menuConfig);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsGroupColumnGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.autoWidth)) {
        properties.autoWidth = dotNetObject.autoWidth;
    }
    if (hasValue(dotNetObject.direction)) {
        properties.direction = dotNetObject.direction;
    }
    if (hasValue(dotNetObject.effectiveLabel)) {
        properties.effectiveLabel = dotNetObject.effectiveLabel;
    }
    if (hasValue(dotNetObject.flexGrow)) {
        properties.flexGrow = dotNetObject.flexGrow;
    }
    if (hasValue(dotNetObject.icon)) {
        properties.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.invalid)) {
        properties.invalid = dotNetObject.invalid;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.sortable)) {
        properties.sortable = dotNetObject.sortable;
    }
    if (hasValue(dotNetObject.textAlign)) {
        properties.textAlign = dotNetObject.textAlign;
    }
    if (hasValue(dotNetObject.textWrap)) {
        properties.textWrap = dotNetObject.textWrap;
    }
    if (hasValue(dotNetObject.visibleElements)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedVisibleElements } = dotNetObject.visibleElements;
        properties.visibleElements = sanitizedVisibleElements;
    }
    if (hasValue(dotNetObject.width)) {
        properties.width = dotNetObject.width;
    }
    let jsGroupColumn = new GroupColumn(properties);

    let { default: GroupColumnWrapper } = await import('./groupColumn');
    let groupColumnWrapper = new GroupColumnWrapper(jsGroupColumn);
    groupColumnWrapper.geoBlazorId = dotNetObject.id;
    groupColumnWrapper.viewId = viewId;
    groupColumnWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(groupColumnWrapper);
    jsObjectRefs[dotNetObject.id] = groupColumnWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsGroupColumn;
    let { buildDotNetGroupColumn } = await import('./groupColumn');
    let dnInstantiatedObject = await buildDotNetGroupColumn(jsGroupColumn);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for GroupColumn', e);
    }
    
    return jsGroupColumn;
}

export async function buildDotNetGroupColumnGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGroupColumn: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.columns)) {
            let { buildDotNetColumn } = await import('./column');
            dotNetGroupColumn.columns = await Promise.all(jsObject.columns.map(async i => await buildDotNetColumn(i)));
        }
        if (hasValue(jsObject.menuConfig)) {
            let { buildDotNetColumnTableMenuConfig } = await import('./columnTableMenuConfig');
            dotNetGroupColumn.menuConfig = await buildDotNetColumnTableMenuConfig(jsObject.menuConfig);
        }
    if (hasValue(jsObject.autoWidth)) {
        dotNetGroupColumn.autoWidth = jsObject.autoWidth;
    }
    if (hasValue(jsObject.direction)) {
        dotNetGroupColumn.direction = jsObject.direction;
    }
    if (hasValue(jsObject.effectiveLabel)) {
        dotNetGroupColumn.effectiveLabel = jsObject.effectiveLabel;
    }
    if (hasValue(jsObject.fieldName)) {
        dotNetGroupColumn.fieldName = jsObject.fieldName;
    }
    if (hasValue(jsObject.flexGrow)) {
        dotNetGroupColumn.flexGrow = jsObject.flexGrow;
    }
    if (hasValue(jsObject.formatFunction)) {
        dotNetGroupColumn.formatFunction = jsObject.formatFunction;
    }
    if (hasValue(jsObject.frozen)) {
        dotNetGroupColumn.frozen = jsObject.frozen;
    }
    if (hasValue(jsObject.frozenToEnd)) {
        dotNetGroupColumn.frozenToEnd = jsObject.frozenToEnd;
    }
    if (hasValue(jsObject.icon)) {
        dotNetGroupColumn.icon = jsObject.icon;
    }
    if (hasValue(jsObject.initialSortPriority)) {
        dotNetGroupColumn.initialSortPriority = jsObject.initialSortPriority;
    }
    if (hasValue(jsObject.invalid)) {
        dotNetGroupColumn.invalid = jsObject.invalid;
    }
    if (hasValue(jsObject.label)) {
        dotNetGroupColumn.label = jsObject.label;
    }
    if (hasValue(jsObject.menu)) {
        dotNetGroupColumn.menu = jsObject.menu;
    }
    if (hasValue(jsObject.menuIsOpen)) {
        dotNetGroupColumn.menuIsOpen = jsObject.menuIsOpen;
    }
    if (hasValue(jsObject.menuIsVisible)) {
        dotNetGroupColumn.menuIsVisible = jsObject.menuIsVisible;
    }
    if (hasValue(jsObject.resizable)) {
        dotNetGroupColumn.resizable = jsObject.resizable;
    }
    if (hasValue(jsObject.sortable)) {
        dotNetGroupColumn.sortable = jsObject.sortable;
    }
    if (hasValue(jsObject.textAlign)) {
        dotNetGroupColumn.textAlign = jsObject.textAlign;
    }
    if (hasValue(jsObject.textWrap)) {
        dotNetGroupColumn.textWrap = jsObject.textWrap;
    }
    if (hasValue(jsObject.timeZone)) {
        dotNetGroupColumn.timeZone = jsObject.timeZone;
    }
    if (hasValue(jsObject.visibleElements)) {
        dotNetGroupColumn.visibleElements = jsObject.visibleElements;
    }
    if (hasValue(jsObject.width)) {
        dotNetGroupColumn.width = jsObject.width;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetGroupColumn.id = k;
                break;
            }
        }
    }

    return dotNetGroupColumn;
}

