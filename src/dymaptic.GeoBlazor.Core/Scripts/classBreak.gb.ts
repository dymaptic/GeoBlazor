// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetClassBreak } from './classBreak';

export async function buildJsClassBreakGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsClassBreak: any = {};

    if (hasValue(dotNetObject.label)) {
        jsClassBreak.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.maxValue)) {
        jsClassBreak.maxValue = dotNetObject.maxValue;
    }
    if (hasValue(dotNetObject.minValue)) {
        jsClassBreak.minValue = dotNetObject.minValue;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsClassBreak);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsClassBreak;
    
    return jsClassBreak;
}


export async function buildDotNetClassBreakGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetClassBreak: any = {};
    
    if (hasValue(jsObject.label)) {
        dotNetClassBreak.label = jsObject.label;
    }
    
    if (hasValue(jsObject.maxValue)) {
        dotNetClassBreak.maxValue = jsObject.maxValue;
    }
    
    if (hasValue(jsObject.minValue)) {
        dotNetClassBreak.minValue = jsObject.minValue;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetClassBreak.id = geoBlazorId;
    }

    return dotNetClassBreak;
}

