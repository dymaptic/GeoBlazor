// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import CreateFeaturesWorkflow from '@arcgis/core/widgets/Editor/CreateFeaturesWorkflow';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CreateFeaturesWorkflowGenerated implements IPropertyWrapper {
    public component: CreateFeaturesWorkflow;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: CreateFeaturesWorkflow) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async cancel(options: any): Promise<void> {
        await this.component.cancel(options);
    }

    async commit(): Promise<void> {
        await this.component.commit();
    }

    async next(): Promise<void> {
        await this.component.next();
    }

    async previous(options: any): Promise<void> {
        await this.component.previous(options);
    }

    async reset(): Promise<void> {
        await this.component.reset();
    }

    async start(): Promise<any> {
        return await this.component.start();
    }

    async updatePendingFeature(feature: any): Promise<void> {
        let { buildJsGraphic } = await import('./graphic');
        let jsFeature = buildJsGraphic(feature) as any;
        await this.component.updatePendingFeature(jsFeature);
    }

    // region properties
    
    async getData(): Promise<any> {
        if (!hasValue(this.component.data)) {
            return null;
        }
        
        let { buildDotNetCreateFeaturesWorkflowData } = await import('./createFeaturesWorkflowData');
        return await buildDotNetCreateFeaturesWorkflowData(this.component.data, this.layerId, this.viewId);
    }
    async getPendingFeatures(): Promise<any> {
        if (!hasValue(this.component.pendingFeatures)) {
            return null;
        }
        
        let { buildDotNetGraphic } = await import('./graphic');
        return this.component.pendingFeatures!.map(i => buildDotNetGraphic(i));
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsCreateFeaturesWorkflowGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCreateFeaturesWorkflow = new CreateFeaturesWorkflow();


    let { default: CreateFeaturesWorkflowWrapper } = await import('./createFeaturesWorkflow');
    let createFeaturesWorkflowWrapper = new CreateFeaturesWorkflowWrapper(jsCreateFeaturesWorkflow);
    createFeaturesWorkflowWrapper.geoBlazorId = dotNetObject.id;
    createFeaturesWorkflowWrapper.viewId = viewId;
    createFeaturesWorkflowWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(createFeaturesWorkflowWrapper);
    jsObjectRefs[dotNetObject.id] = createFeaturesWorkflowWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsCreateFeaturesWorkflow;
    let { buildDotNetCreateFeaturesWorkflow } = await import('./createFeaturesWorkflow');
    let dnInstantiatedObject = await buildDotNetCreateFeaturesWorkflow(jsCreateFeaturesWorkflow);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CreateFeaturesWorkflow', e);
    }
    
    return jsCreateFeaturesWorkflow;
}

export async function buildDotNetCreateFeaturesWorkflowGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCreateFeaturesWorkflow: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.data)) {
            let { buildDotNetCreateFeaturesWorkflowData } = await import('./createFeaturesWorkflowData');
            dotNetCreateFeaturesWorkflow.data = await buildDotNetCreateFeaturesWorkflowData(jsObject.data, layerId, viewId);
        }
        if (hasValue(jsObject.pendingFeatures)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetCreateFeaturesWorkflow.pendingFeatures = jsObject.pendingFeatures.map(i => buildDotNetGraphic(i, layerId, viewId));
        }
        if (hasValue(jsObject.createFeatureState)) {
            dotNetCreateFeaturesWorkflow.createFeatureState = jsObject.createFeatureState;
        }
        if (hasValue(jsObject.hasNextStep)) {
            dotNetCreateFeaturesWorkflow.hasNextStep = jsObject.hasNextStep;
        }
        if (hasValue(jsObject.hasPreviousStep)) {
            dotNetCreateFeaturesWorkflow.hasPreviousStep = jsObject.hasPreviousStep;
        }
        if (hasValue(jsObject.numPendingFeatures)) {
            dotNetCreateFeaturesWorkflow.numPendingFeatures = jsObject.numPendingFeatures;
        }
        if (hasValue(jsObject.started)) {
            dotNetCreateFeaturesWorkflow.started = jsObject.started;
        }
        if (hasValue(jsObject.stepId)) {
            dotNetCreateFeaturesWorkflow.stepId = jsObject.stepId;
        }
        if (hasValue(jsObject.type)) {
            dotNetCreateFeaturesWorkflow.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCreateFeaturesWorkflow.id = k;
                break;
            }
        }
    }

    return dotNetCreateFeaturesWorkflow;
}

