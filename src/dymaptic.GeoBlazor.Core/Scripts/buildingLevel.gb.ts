// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import BuildingLevel from '@arcgis/core/widgets/BuildingExplorer/BuildingLevel';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class BuildingLevelGenerated implements IPropertyWrapper {
    public component: BuildingLevel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: BuildingLevel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async clear(): Promise<void> {
        this.component.clear();
    }

    async getValueLabel(value: any): Promise<any> {
        return this.component.getValueLabel(value);
    }

    async next(): Promise<void> {
        this.component.next();
    }

    async previous(): Promise<void> {
        this.component.previous();
    }

    async select(value: any): Promise<void> {
        this.component.select(value);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsBuildingLevelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsBuildingLevel = new BuildingLevel();

    if (hasValue(dotNetObject.allowedValues)) {
        jsBuildingLevel.allowedValues = dotNetObject.allowedValues;
    }

    let { default: BuildingLevelWrapper } = await import('./buildingLevel');
    let buildingLevelWrapper = new BuildingLevelWrapper(jsBuildingLevel);
    buildingLevelWrapper.geoBlazorId = dotNetObject.id;
    buildingLevelWrapper.viewId = viewId;
    buildingLevelWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(buildingLevelWrapper);
    jsObjectRefs[dotNetObject.id] = buildingLevelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsBuildingLevel;
    let { buildDotNetBuildingLevel } = await import('./buildingLevel');
    let dnInstantiatedObject = await buildDotNetBuildingLevel(jsBuildingLevel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BuildingLevel', e);
    }
    
    return jsBuildingLevel;
}
export async function buildDotNetBuildingLevelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBuildingLevel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.allowedValues)) {
            dotNetBuildingLevel.allowedValues = jsObject.allowedValues;
        }
        if (hasValue(jsObject.enabled)) {
            dotNetBuildingLevel.enabled = jsObject.enabled;
        }
        if (hasValue(jsObject.hasNext)) {
            dotNetBuildingLevel.hasNext = jsObject.hasNext;
        }
        if (hasValue(jsObject.hasPrevious)) {
            dotNetBuildingLevel.hasPrevious = jsObject.hasPrevious;
        }
        if (hasValue(jsObject.max)) {
            dotNetBuildingLevel.max = jsObject.max;
        }
        if (hasValue(jsObject.min)) {
            dotNetBuildingLevel.min = jsObject.min;
        }
        if (hasValue(jsObject.value)) {
            dotNetBuildingLevel.value = jsObject.value;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetBuildingLevel.id = k;
                break;
            }
        }
    }

    return dotNetBuildingLevel;
}

