// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import MeshGeoreferencedVertexSpace from '@arcgis/core/geometry/support/MeshGeoreferencedVertexSpace';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetMeshGeoreferencedVertexSpace } from './meshGeoreferencedVertexSpace';

export async function buildJsMeshGeoreferencedVertexSpaceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.origin) && dotNetObject.origin.length > 0) {
        properties.origin = dotNetObject.origin;
    }
    let jsMeshGeoreferencedVertexSpace = new MeshGeoreferencedVertexSpace(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsMeshGeoreferencedVertexSpace);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsMeshGeoreferencedVertexSpace;
    
    return jsMeshGeoreferencedVertexSpace;
}


export async function buildDotNetMeshGeoreferencedVertexSpaceGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMeshGeoreferencedVertexSpace: any = {};
    
    if (hasValue(jsObject.origin)) {
        dotNetMeshGeoreferencedVertexSpace.origin = jsObject.origin;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetMeshGeoreferencedVertexSpace.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetMeshGeoreferencedVertexSpace.id = geoBlazorId;
    }

    return dotNetMeshGeoreferencedVertexSpace;
}

