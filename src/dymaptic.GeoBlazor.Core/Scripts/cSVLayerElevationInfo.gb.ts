// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import CSVLayerElevationInfo = __esri.CSVLayerElevationInfo;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CSVLayerElevationInfoGenerated implements IPropertyWrapper {
    public component: CSVLayerElevationInfo;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: CSVLayerElevationInfo) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getFeatureExpressionInfo(): Promise<any> {
        let { buildDotNetCSVLayerElevationInfoFeatureExpressionInfo } = await import('./cSVLayerElevationInfoFeatureExpressionInfo');
        return await buildDotNetCSVLayerElevationInfoFeatureExpressionInfo(this.component.featureExpressionInfo);
    }
    async setFeatureExpressionInfo(value: any): Promise<void> {
        let { buildJsCSVLayerElevationInfoFeatureExpressionInfo } = await import('./cSVLayerElevationInfoFeatureExpressionInfo');
        this.component.featureExpressionInfo = await  buildJsCSVLayerElevationInfoFeatureExpressionInfo(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsCSVLayerElevationInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCSVLayerElevationInfo: any = {}
    if (hasValue(dotNetObject.featureExpressionInfo)) {
        let { buildJsCSVLayerElevationInfoFeatureExpressionInfo } = await import('./cSVLayerElevationInfoFeatureExpressionInfo');
        jsCSVLayerElevationInfo.featureExpressionInfo = await buildJsCSVLayerElevationInfoFeatureExpressionInfo(dotNetObject.featureExpressionInfo, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.mode)) {
        jsCSVLayerElevationInfo.mode = dotNetObject.mode;
    }
    if (hasValue(dotNetObject.offset)) {
        jsCSVLayerElevationInfo.offset = dotNetObject.offset;
    }
    if (hasValue(dotNetObject.unit)) {
        jsCSVLayerElevationInfo.unit = dotNetObject.unit;
    }
    let { default: CSVLayerElevationInfoWrapper } = await import('./cSVLayerElevationInfo');
    let cSVLayerElevationInfoWrapper = new CSVLayerElevationInfoWrapper(jsCSVLayerElevationInfo);
    cSVLayerElevationInfoWrapper.geoBlazorId = dotNetObject.id;
    cSVLayerElevationInfoWrapper.viewId = viewId;
    cSVLayerElevationInfoWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(cSVLayerElevationInfoWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = cSVLayerElevationInfoWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsCSVLayerElevationInfo;
    
    return jsCSVLayerElevationInfo;
}

export async function buildDotNetCSVLayerElevationInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCSVLayerElevationInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.featureExpressionInfo)) {
            let { buildDotNetCSVLayerElevationInfoFeatureExpressionInfo } = await import('./cSVLayerElevationInfoFeatureExpressionInfo');
            dotNetCSVLayerElevationInfo.featureExpressionInfo = await buildDotNetCSVLayerElevationInfoFeatureExpressionInfo(jsObject.featureExpressionInfo);
        }
        dotNetCSVLayerElevationInfo.mode = jsObject.mode;
        dotNetCSVLayerElevationInfo.offset = jsObject.offset;
        dotNetCSVLayerElevationInfo.unit = jsObject.unit;

    return dotNetCSVLayerElevationInfo;
}

