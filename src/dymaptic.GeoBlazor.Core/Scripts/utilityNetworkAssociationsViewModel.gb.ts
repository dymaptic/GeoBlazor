// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import UtilityNetworkAssociationsViewModel from '@arcgis/core/widgets/UtilityNetworkAssociations/UtilityNetworkAssociationsViewModel';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class UtilityNetworkAssociationsViewModelGenerated implements IPropertyWrapper {
    public component: UtilityNetworkAssociationsViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: UtilityNetworkAssociationsViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async removeAssociations(): Promise<void> {
        this.component.removeAssociations();
    }

    async showAssociations(): Promise<void> {
        await this.component.showAssociations();
    }

    // region properties
    
    async getConnectivityAssociationsLineSymbol(): Promise<any> {
        if (!hasValue(this.component.connectivityAssociationsLineSymbol)) {
            return null;
        }
        
        let { buildDotNetSimpleLineSymbol } = await import('./simpleLineSymbol');
        return buildDotNetSimpleLineSymbol(this.component.connectivityAssociationsLineSymbol);
    }
    async setConnectivityAssociationsLineSymbol(value: any): Promise<void> {
        let { buildJsSimpleLineSymbol } = await import('./simpleLineSymbol');
        this.component.connectivityAssociationsLineSymbol =  buildJsSimpleLineSymbol(value);
    }
    async getStructuralAttachmentAssociationsLineSymbol(): Promise<any> {
        if (!hasValue(this.component.structuralAttachmentAssociationsLineSymbol)) {
            return null;
        }
        
        let { buildDotNetSimpleLineSymbol } = await import('./simpleLineSymbol');
        return buildDotNetSimpleLineSymbol(this.component.structuralAttachmentAssociationsLineSymbol);
    }
    async setStructuralAttachmentAssociationsLineSymbol(value: any): Promise<void> {
        let { buildJsSimpleLineSymbol } = await import('./simpleLineSymbol');
        this.component.structuralAttachmentAssociationsLineSymbol =  buildJsSimpleLineSymbol(value);
    }
    async getUtilityNetwork(): Promise<any> {
        if (!hasValue(this.component.utilityNetwork)) {
            return null;
        }
        
        let { buildDotNetUtilityNetwork } = await import('./utilityNetwork');
        return await buildDotNetUtilityNetwork(this.component.utilityNetwork, this.layerId, this.viewId);
    }
    async setUtilityNetwork(value: any): Promise<void> {
        let { buildJsUtilityNetwork } = await import('./utilityNetwork');
        this.component.utilityNetwork = await  buildJsUtilityNetwork(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsUtilityNetworkAssociationsViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsUtilityNetworkAssociationsViewModel = new UtilityNetworkAssociationsViewModel();
    if (hasValue(dotNetObject.connectivityAssociationsLineSymbol)) {
        let { buildJsSimpleLineSymbol } = await import('./simpleLineSymbol');
        jsUtilityNetworkAssociationsViewModel.connectivityAssociationsLineSymbol = buildJsSimpleLineSymbol(dotNetObject.connectivityAssociationsLineSymbol) as any;
    }
    if (hasValue(dotNetObject.structuralAttachmentAssociationsLineSymbol)) {
        let { buildJsSimpleLineSymbol } = await import('./simpleLineSymbol');
        jsUtilityNetworkAssociationsViewModel.structuralAttachmentAssociationsLineSymbol = buildJsSimpleLineSymbol(dotNetObject.structuralAttachmentAssociationsLineSymbol) as any;
    }
    if (hasValue(dotNetObject.utilityNetwork)) {
        let { buildJsUtilityNetwork } = await import('./utilityNetwork');
        jsUtilityNetworkAssociationsViewModel.utilityNetwork = await buildJsUtilityNetwork(dotNetObject.utilityNetwork, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.includeConnectivityAssociations)) {
        jsUtilityNetworkAssociationsViewModel.includeConnectivityAssociations = dotNetObject.includeConnectivityAssociations;
    }
    if (hasValue(dotNetObject.includeStructuralAttachmentAssociations)) {
        jsUtilityNetworkAssociationsViewModel.includeStructuralAttachmentAssociations = dotNetObject.includeStructuralAttachmentAssociations;
    }
    if (hasValue(dotNetObject.maxAllowableAssociations)) {
        jsUtilityNetworkAssociationsViewModel.maxAllowableAssociations = dotNetObject.maxAllowableAssociations;
    }
    if (hasValue(dotNetObject.showArrowsConnectivity)) {
        jsUtilityNetworkAssociationsViewModel.showArrowsConnectivity = dotNetObject.showArrowsConnectivity;
    }
    if (hasValue(dotNetObject.showArrowsStructuralAttachment)) {
        jsUtilityNetworkAssociationsViewModel.showArrowsStructuralAttachment = dotNetObject.showArrowsStructuralAttachment;
    }
    if (hasValue(dotNetObject.view)) {
        jsUtilityNetworkAssociationsViewModel.view = dotNetObject.view;
    }

    let { default: UtilityNetworkAssociationsViewModelWrapper } = await import('./utilityNetworkAssociationsViewModel');
    let utilityNetworkAssociationsViewModelWrapper = new UtilityNetworkAssociationsViewModelWrapper(jsUtilityNetworkAssociationsViewModel);
    utilityNetworkAssociationsViewModelWrapper.geoBlazorId = dotNetObject.id;
    utilityNetworkAssociationsViewModelWrapper.viewId = viewId;
    utilityNetworkAssociationsViewModelWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(utilityNetworkAssociationsViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = utilityNetworkAssociationsViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsUtilityNetworkAssociationsViewModel;
    let { buildDotNetUtilityNetworkAssociationsViewModel } = await import('./utilityNetworkAssociationsViewModel');
    let dnInstantiatedObject = await buildDotNetUtilityNetworkAssociationsViewModel(jsUtilityNetworkAssociationsViewModel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for UtilityNetworkAssociationsViewModel', e);
    }
    
    return jsUtilityNetworkAssociationsViewModel;
}

export async function buildDotNetUtilityNetworkAssociationsViewModelGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUtilityNetworkAssociationsViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.connectivityAssociationsLineSymbol)) {
            let { buildDotNetSimpleLineSymbol } = await import('./simpleLineSymbol');
            dotNetUtilityNetworkAssociationsViewModel.connectivityAssociationsLineSymbol = buildDotNetSimpleLineSymbol(jsObject.connectivityAssociationsLineSymbol);
        }
        if (hasValue(jsObject.structuralAttachmentAssociationsLineSymbol)) {
            let { buildDotNetSimpleLineSymbol } = await import('./simpleLineSymbol');
            dotNetUtilityNetworkAssociationsViewModel.structuralAttachmentAssociationsLineSymbol = buildDotNetSimpleLineSymbol(jsObject.structuralAttachmentAssociationsLineSymbol);
        }
        if (hasValue(jsObject.utilityNetwork)) {
            let { buildDotNetUtilityNetwork } = await import('./utilityNetwork');
            dotNetUtilityNetworkAssociationsViewModel.utilityNetwork = await buildDotNetUtilityNetwork(jsObject.utilityNetwork, layerId, viewId);
        }
        if (hasValue(jsObject.includeConnectivityAssociations)) {
            dotNetUtilityNetworkAssociationsViewModel.includeConnectivityAssociations = jsObject.includeConnectivityAssociations;
        }
        if (hasValue(jsObject.includeStructuralAttachmentAssociations)) {
            dotNetUtilityNetworkAssociationsViewModel.includeStructuralAttachmentAssociations = jsObject.includeStructuralAttachmentAssociations;
        }
        if (hasValue(jsObject.maxAllowableAssociations)) {
            dotNetUtilityNetworkAssociationsViewModel.maxAllowableAssociations = jsObject.maxAllowableAssociations;
        }
        if (hasValue(jsObject.showArrowsConnectivity)) {
            dotNetUtilityNetworkAssociationsViewModel.showArrowsConnectivity = jsObject.showArrowsConnectivity;
        }
        if (hasValue(jsObject.showArrowsStructuralAttachment)) {
            dotNetUtilityNetworkAssociationsViewModel.showArrowsStructuralAttachment = jsObject.showArrowsStructuralAttachment;
        }
        if (hasValue(jsObject.state)) {
            dotNetUtilityNetworkAssociationsViewModel.state = jsObject.state;
        }
        if (hasValue(jsObject.view)) {
            dotNetUtilityNetworkAssociationsViewModel.view = jsObject.view;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetUtilityNetworkAssociationsViewModel.id = k;
                break;
            }
        }
    }

    return dotNetUtilityNetworkAssociationsViewModel;
}

