// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSceneViewMediaHit } from './sceneViewMediaHit';

export async function buildJsSceneViewMediaHitGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSceneViewMediaHit: any = {};
    if (hasValue(dotNetObject.layer)) {
        let { buildJsMediaLayer } = await import('./mediaLayer');
        jsSceneViewMediaHit.layer = await buildJsMediaLayer(dotNetObject.layer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.mapPoint)) {
        let { buildJsPoint } = await import('./point');
        jsSceneViewMediaHit.mapPoint = buildJsPoint(dotNetObject.mapPoint) as any;
    }

    if (hasValue(dotNetObject.distance)) {
        jsSceneViewMediaHit.distance = dotNetObject.distance;
    }
    if (hasValue(dotNetObject.element)) {
        jsSceneViewMediaHit.element = dotNetObject.element;
    }
    if (hasValue(dotNetObject.sourcePoint)) {
        const { id, dotNetComponentReference, ...sanitizedSourcePoint } = dotNetObject.sourcePoint;
        jsSceneViewMediaHit.sourcePoint = sanitizedSourcePoint;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSceneViewMediaHit);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSceneViewMediaHit;
    
    let dnInstantiatedObject = await buildDotNetSceneViewMediaHit(jsSceneViewMediaHit);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SceneViewMediaHit', e);
    }
    
    return jsSceneViewMediaHit;
}

export async function buildDotNetSceneViewMediaHitGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSceneViewMediaHit: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.mapPoint)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetSceneViewMediaHit.mapPoint = buildDotNetPoint(jsObject.mapPoint);
    }
    if (hasValue(jsObject.distance)) {
        dotNetSceneViewMediaHit.distance = jsObject.distance;
    }
    if (hasValue(jsObject.element)) {
        dotNetSceneViewMediaHit.element = jsObject.element;
    }
    if (hasValue(jsObject.sourcePoint)) {
        dotNetSceneViewMediaHit.sourcePoint = jsObject.sourcePoint;
    }
    if (hasValue(jsObject.type)) {
        dotNetSceneViewMediaHit.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSceneViewMediaHit.id = k;
                break;
            }
        }
    }

    return dotNetSceneViewMediaHit;
}

