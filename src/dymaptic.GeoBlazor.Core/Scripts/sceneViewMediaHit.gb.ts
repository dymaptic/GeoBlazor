// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import SceneViewMediaHit = __esri.SceneViewMediaHit;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SceneViewMediaHitGenerated implements IPropertyWrapper {
    public component: SceneViewMediaHit;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: SceneViewMediaHit) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getLayer(): Promise<any> {
        if (!hasValue(this.component.layer)) {
            return null;
        }
        
        let { buildDotNetMediaLayer } = await import('./mediaLayer');
        return await buildDotNetMediaLayer(this.component.layer);
    }
    async setLayer(value: any): Promise<void> {
        let { buildJsMediaLayer } = await import('./mediaLayer');
        this.component.layer = await  buildJsMediaLayer(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsSceneViewMediaHitGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSceneViewMediaHit: any = {}
    if (hasValue(dotNetObject.element)) {
        jsSceneViewMediaHit.element = dotNetObject.iMediaElement;
    }
    if (hasValue(dotNetObject.layer)) {
        let { buildJsMediaLayer } = await import('./mediaLayer');
        jsSceneViewMediaHit.layer = await buildJsMediaLayer(dotNetObject.layer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.mapPoint)) {
        let { buildJsPoint } = await import('./point');
        jsSceneViewMediaHit.mapPoint = buildJsPoint(dotNetObject.mapPoint) as any;
    }
    if (hasValue(dotNetObject.sourcePoint)) {
        jsSceneViewMediaHit.sourcePoint = dotNetObject.sourcePoint;
    }

    if (hasValue(dotNetObject.distance)) {
        jsSceneViewMediaHit.distance = dotNetObject.distance;
    }

    let { default: SceneViewMediaHitWrapper } = await import('./sceneViewMediaHit');
    let sceneViewMediaHitWrapper = new SceneViewMediaHitWrapper(jsSceneViewMediaHit);
    sceneViewMediaHitWrapper.geoBlazorId = dotNetObject.id;
    sceneViewMediaHitWrapper.viewId = viewId;
    sceneViewMediaHitWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(sceneViewMediaHitWrapper);
    jsObjectRefs[dotNetObject.id] = sceneViewMediaHitWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsSceneViewMediaHit;
    let { buildDotNetSceneViewMediaHit } = await import('./sceneViewMediaHit');
    let dnInstantiatedObject = await buildDotNetSceneViewMediaHit(jsSceneViewMediaHit);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SceneViewMediaHit', e);
    }
    
    return jsSceneViewMediaHit;
}
export async function buildDotNetSceneViewMediaHitGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSceneViewMediaHit: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetSceneViewMediaHit.element = jsObject.element;
        if (hasValue(jsObject.mapPoint)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetSceneViewMediaHit.mapPoint = buildDotNetPoint(jsObject.mapPoint);
        }
        dotNetSceneViewMediaHit.sourcePoint = jsObject.sourcePoint;
        if (hasValue(jsObject.distance)) {
            dotNetSceneViewMediaHit.distance = jsObject.distance;
        }
        if (hasValue(jsObject.type)) {
            dotNetSceneViewMediaHit.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSceneViewMediaHit.id = k;
                break;
            }
        }
    }

    return dotNetSceneViewMediaHit;
}

