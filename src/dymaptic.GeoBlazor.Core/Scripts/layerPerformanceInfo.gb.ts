import { buildDotNetLayerPerformanceInfo } from './layerPerformanceInfo';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import LayerPerformanceInfo from '@arcgis/core/views/3d/support/LayerPerformanceInfo';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsLayerPerformanceInfoGenerated(dotNetObject: any): Promise<any> {
    let jsLayerPerformanceInfo = new LayerPerformanceInfo();
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsLayerPerformanceInfo.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.displayedNumberOfFeatures)) {
        jsLayerPerformanceInfo.displayedNumberOfFeatures = dotNetObject.displayedNumberOfFeatures;
    }
    if (hasValue(dotNetObject.maximumNumberOfFeatures)) {
        jsLayerPerformanceInfo.maximumNumberOfFeatures = dotNetObject.maximumNumberOfFeatures;
    }
    if (hasValue(dotNetObject.memory)) {
        jsLayerPerformanceInfo.memory = dotNetObject.memory;
    }
    if (hasValue(dotNetObject.totalNumberOfFeatures)) {
        jsLayerPerformanceInfo.totalNumberOfFeatures = dotNetObject.totalNumberOfFeatures;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsLayerPerformanceInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLayerPerformanceInfo;
    
    let dnInstantiatedObject = await buildDotNetLayerPerformanceInfo(jsLayerPerformanceInfo);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LayerPerformanceInfo', e);
    }
    
    return jsLayerPerformanceInfo;
}
export async function buildDotNetLayerPerformanceInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLayerPerformanceInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.displayedNumberOfFeatures)) {
            dotNetLayerPerformanceInfo.displayedNumberOfFeatures = jsObject.displayedNumberOfFeatures;
        }
        if (hasValue(jsObject.maximumNumberOfFeatures)) {
            dotNetLayerPerformanceInfo.maximumNumberOfFeatures = jsObject.maximumNumberOfFeatures;
        }
        if (hasValue(jsObject.memory)) {
            dotNetLayerPerformanceInfo.memory = jsObject.memory;
        }
        if (hasValue(jsObject.totalNumberOfFeatures)) {
            dotNetLayerPerformanceInfo.totalNumberOfFeatures = jsObject.totalNumberOfFeatures;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLayerPerformanceInfo.id = k;
                break;
            }
        }
    }

    return dotNetLayerPerformanceInfo;
}

