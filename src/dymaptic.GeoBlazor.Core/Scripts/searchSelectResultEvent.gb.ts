// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSearchSelectResultEvent } from './searchSelectResultEvent';

export async function buildJsSearchSelectResultEventGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSearchSelectResultEvent: any = {}
    if (hasValue(dotNetObject.result)) {
        let { buildJsSearchSelectResultEventResult } = await import('./searchSelectResultEventResult');
        jsSearchSelectResultEvent.result = await buildJsSearchSelectResultEventResult(dotNetObject.result, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.source)) {
        jsSearchSelectResultEvent.source = dotNetObject.source;
    }
    if (hasValue(dotNetObject.sourceIndex)) {
        jsSearchSelectResultEvent.sourceIndex = dotNetObject.sourceIndex;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsSearchSelectResultEvent);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSearchSelectResultEvent;
    
    let dnInstantiatedObject = await buildDotNetSearchSelectResultEvent(jsSearchSelectResultEvent);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SearchSelectResultEvent', e);
    }
    
    return jsSearchSelectResultEvent;
}

export async function buildDotNetSearchSelectResultEventGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchSelectResultEvent: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.result)) {
            let { buildDotNetSearchSelectResultEventResult } = await import('./searchSelectResultEventResult');
            dotNetSearchSelectResultEvent.result = await buildDotNetSearchSelectResultEventResult(jsObject.result);
        }
    if (hasValue(jsObject.source)) {
        dotNetSearchSelectResultEvent.source = jsObject.source;
    }
    if (hasValue(jsObject.sourceIndex)) {
        dotNetSearchSelectResultEvent.sourceIndex = jsObject.sourceIndex;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSearchSelectResultEvent.id = k;
                break;
            }
        }
    }

    return dotNetSearchSelectResultEvent;
}

