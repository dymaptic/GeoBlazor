// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetViewPadding } from './viewPadding';

export async function buildJsViewPaddingGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsViewPadding: any = {};

    if (hasValue(dotNetObject.bottom)) {
        jsViewPadding.bottom = dotNetObject.bottom;
    }
    if (hasValue(dotNetObject.left)) {
        jsViewPadding.left = dotNetObject.left;
    }
    if (hasValue(dotNetObject.right)) {
        jsViewPadding.right = dotNetObject.right;
    }
    if (hasValue(dotNetObject.top)) {
        jsViewPadding.top = dotNetObject.top;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsViewPadding);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsViewPadding;
    
    return jsViewPadding;
}


export async function buildDotNetViewPaddingGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetViewPadding: any = {};
    
    if (hasValue(jsObject.bottom)) {
        dotNetViewPadding.bottom = jsObject.bottom;
    }
    
    if (hasValue(jsObject.left)) {
        dotNetViewPadding.left = jsObject.left;
    }
    
    if (hasValue(jsObject.right)) {
        dotNetViewPadding.right = jsObject.right;
    }
    
    if (hasValue(jsObject.top)) {
        dotNetViewPadding.top = jsObject.top;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetViewPadding.id = geoBlazorId;
    }

    return dotNetViewPadding;
}

