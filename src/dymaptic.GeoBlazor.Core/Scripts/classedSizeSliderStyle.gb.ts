// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetClassedSizeSliderStyle } from './classedSizeSliderStyle';

export async function buildJsClassedSizeSliderStyleGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsClassedSizeSliderStyle: any = {}
    if (hasValue(dotNetObject.trackBackgroundColor)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsClassedSizeSliderStyle.trackBackgroundColor = buildJsMapColor(dotNetObject.trackBackgroundColor) as any;
    }
    if (hasValue(dotNetObject.trackFillColor)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsClassedSizeSliderStyle.trackFillColor = buildJsMapColor(dotNetObject.trackFillColor) as any;
    }

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsClassedSizeSliderStyle);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsClassedSizeSliderStyle;
    
    let dnInstantiatedObject = await buildDotNetClassedSizeSliderStyle(jsClassedSizeSliderStyle);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ClassedSizeSliderStyle', e);
    }
    
    return jsClassedSizeSliderStyle;
}

export async function buildDotNetClassedSizeSliderStyleGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetClassedSizeSliderStyle: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.trackBackgroundColor)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetClassedSizeSliderStyle.trackBackgroundColor = buildDotNetMapColor(jsObject.trackBackgroundColor);
        }
        if (hasValue(jsObject.trackFillColor)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetClassedSizeSliderStyle.trackFillColor = buildDotNetMapColor(jsObject.trackFillColor);
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetClassedSizeSliderStyle.id = k;
                break;
            }
        }
    }

    return dotNetClassedSizeSliderStyle;
}

