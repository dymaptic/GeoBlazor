// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import UtilityNetworkValidateTopologyViewModel from '@arcgis/core/widgets/UtilityNetworkValidateTopology/UtilityNetworkValidateTopologyViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class UtilityNetworkValidateTopologyViewModelGenerated implements IPropertyWrapper {
    public component: UtilityNetworkValidateTopologyViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: UtilityNetworkValidateTopologyViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async validateTopology(): Promise<void> {
        this.component.validateTopology();
    }

    // region properties
    
    async getUtilityNetwork(): Promise<any> {
        if (!hasValue(this.component.utilityNetwork)) {
            return null;
        }
        
        let { buildDotNetUtilityNetwork } = await import('./utilityNetwork');
        return await buildDotNetUtilityNetwork(this.component.utilityNetwork, this.layerId, this.viewId);
    }
    async setUtilityNetwork(value: any): Promise<void> {
        let { buildJsUtilityNetwork } = await import('./utilityNetwork');
        this.component.utilityNetwork = await  buildJsUtilityNetwork(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsUtilityNetworkValidateTopologyViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsUtilityNetworkValidateTopologyViewModel = new UtilityNetworkValidateTopologyViewModel();
    if (hasValue(dotNetObject.utilityNetwork)) {
        let { buildJsUtilityNetwork } = await import('./utilityNetwork');
        jsUtilityNetworkValidateTopologyViewModel.utilityNetwork = await buildJsUtilityNetwork(dotNetObject.utilityNetwork, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.extentToValidate)) {
        jsUtilityNetworkValidateTopologyViewModel.extentToValidate = dotNetObject.extentToValidate;
    }
    if (hasValue(dotNetObject.loadErrors)) {
        jsUtilityNetworkValidateTopologyViewModel.loadErrors = dotNetObject.loadErrors;
    }

    let { default: UtilityNetworkValidateTopologyViewModelWrapper } = await import('./utilityNetworkValidateTopologyViewModel');
    let utilityNetworkValidateTopologyViewModelWrapper = new UtilityNetworkValidateTopologyViewModelWrapper(jsUtilityNetworkValidateTopologyViewModel);
    utilityNetworkValidateTopologyViewModelWrapper.geoBlazorId = dotNetObject.id;
    utilityNetworkValidateTopologyViewModelWrapper.viewId = viewId;
    utilityNetworkValidateTopologyViewModelWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(utilityNetworkValidateTopologyViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = utilityNetworkValidateTopologyViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsUtilityNetworkValidateTopologyViewModel;
    let { buildDotNetUtilityNetworkValidateTopologyViewModel } = await import('./utilityNetworkValidateTopologyViewModel');
    let dnInstantiatedObject = await buildDotNetUtilityNetworkValidateTopologyViewModel(jsUtilityNetworkValidateTopologyViewModel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for UtilityNetworkValidateTopologyViewModel', e);
    }
    
    return jsUtilityNetworkValidateTopologyViewModel;
}

export async function buildDotNetUtilityNetworkValidateTopologyViewModelGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUtilityNetworkValidateTopologyViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.utilityNetwork)) {
            let { buildDotNetUtilityNetwork } = await import('./utilityNetwork');
            dotNetUtilityNetworkValidateTopologyViewModel.utilityNetwork = await buildDotNetUtilityNetwork(jsObject.utilityNetwork, layerId, viewId);
        }
    if (hasValue(jsObject.executionError)) {
        dotNetUtilityNetworkValidateTopologyViewModel.executionError = jsObject.executionError;
    }
    if (hasValue(jsObject.extentToValidate)) {
        dotNetUtilityNetworkValidateTopologyViewModel.extentToValidate = jsObject.extentToValidate;
    }
    if (hasValue(jsObject.loadErrors)) {
        dotNetUtilityNetworkValidateTopologyViewModel.loadErrors = jsObject.loadErrors;
    }
    if (hasValue(jsObject.state)) {
        dotNetUtilityNetworkValidateTopologyViewModel.state = jsObject.state;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetUtilityNetworkValidateTopologyViewModel.id = k;
                break;
            }
        }
    }

    return dotNetUtilityNetworkValidateTopologyViewModel;
}

