// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import LengthsParameters from '@arcgis/core/rest/support/LengthsParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetLengthsParameters } from './lengthsParameters';

export async function buildJsLengthsParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsLengthsParameters = new LengthsParameters();
    if (hasValue(dotNetObject.polylines)) {
        let { buildJsPolyline } = await import('./polyline');
        jsLengthsParameters.polylines = dotNetObject.polylines.map(i => buildJsPolyline(i)) as any;
    }

    if (hasValue(dotNetObject.calculationType)) {
        jsLengthsParameters.calculationType = dotNetObject.calculationType;
    }
    if (hasValue(dotNetObject.geodesic)) {
        jsLengthsParameters.geodesic = dotNetObject.geodesic;
    }
    if (hasValue(dotNetObject.lengthUnit)) {
        jsLengthsParameters.lengthUnit = dotNetObject.lengthUnit;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsLengthsParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLengthsParameters;
    
    let dnInstantiatedObject = await buildDotNetLengthsParameters(jsLengthsParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LengthsParameters', e);
    }
    
    return jsLengthsParameters;
}

export async function buildDotNetLengthsParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLengthsParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.polylines)) {
            let { buildDotNetPolyline } = await import('./polyline');
            dotNetLengthsParameters.polylines = jsObject.polylines.map(i => buildDotNetPolyline(i));
        }
        if (hasValue(jsObject.calculationType)) {
            dotNetLengthsParameters.calculationType = jsObject.calculationType;
        }
        if (hasValue(jsObject.geodesic)) {
            dotNetLengthsParameters.geodesic = jsObject.geodesic;
        }
        if (hasValue(jsObject.lengthUnit)) {
            dotNetLengthsParameters.lengthUnit = jsObject.lengthUnit;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLengthsParameters.id = k;
                break;
            }
        }
    }

    return dotNetLengthsParameters;
}

