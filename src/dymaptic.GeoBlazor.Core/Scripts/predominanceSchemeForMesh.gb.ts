// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetPredominanceSchemeForMesh } from './predominanceSchemeForMesh';

export async function buildJsPredominanceSchemeForMeshGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPredominanceSchemeForMesh: any = {}
    if (hasValue(dotNetObject.colors)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsPredominanceSchemeForMesh.colors = dotNetObject.colors.map(i => buildJsMapColor(i)) as any;
    }
    if (hasValue(dotNetObject.noDataColor)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsPredominanceSchemeForMesh.noDataColor = buildJsMapColor(dotNetObject.noDataColor) as any;
    }

    if (hasValue(dotNetObject.name)) {
        jsPredominanceSchemeForMesh.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.opacity)) {
        jsPredominanceSchemeForMesh.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.tags)) {
        jsPredominanceSchemeForMesh.tags = dotNetObject.tags;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsPredominanceSchemeForMesh);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPredominanceSchemeForMesh;
    
    let dnInstantiatedObject = await buildDotNetPredominanceSchemeForMesh(jsPredominanceSchemeForMesh);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PredominanceSchemeForMesh', e);
    }
    
    return jsPredominanceSchemeForMesh;
}

export async function buildDotNetPredominanceSchemeForMeshGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPredominanceSchemeForMesh: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.colors)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetPredominanceSchemeForMesh.colors = jsObject.colors.map(i => buildDotNetMapColor(i));
        }
        if (hasValue(jsObject.noDataColor)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetPredominanceSchemeForMesh.noDataColor = buildDotNetMapColor(jsObject.noDataColor);
        }
        if (hasValue(jsObject.name)) {
            dotNetPredominanceSchemeForMesh.name = jsObject.name;
        }
        if (hasValue(jsObject.opacity)) {
            dotNetPredominanceSchemeForMesh.opacity = jsObject.opacity;
        }
        if (hasValue(jsObject.tags)) {
            dotNetPredominanceSchemeForMesh.tags = jsObject.tags;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPredominanceSchemeForMesh.id = k;
                break;
            }
        }
    }

    return dotNetPredominanceSchemeForMesh;
}

