// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import PortalQueryResult from '@arcgis/core/portal/PortalQueryResult';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetPortalQueryResult } from './portalQueryResult';

export async function buildJsPortalQueryResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.nextQueryParams)) {
        let { buildJsPortalQueryParams } = await import('./portalQueryParams');
        properties.nextQueryParams = await buildJsPortalQueryParams(dotNetObject.nextQueryParams, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.queryParams)) {
        let { buildJsPortalQueryParams } = await import('./portalQueryParams');
        properties.queryParams = await buildJsPortalQueryParams(dotNetObject.queryParams, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.results)) {
        properties.results = dotNetObject.results;
    }
    if (hasValue(dotNetObject.total)) {
        properties.total = dotNetObject.total;
    }
    let jsPortalQueryResult = new PortalQueryResult(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsPortalQueryResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPortalQueryResult;
    
    let { buildDotNetPortalQueryResult } = await import('./portalQueryResult');
    let dnInstantiatedObject = await buildDotNetPortalQueryResult(jsPortalQueryResult);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type PortalQueryResult detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PortalQueryResult', e);
    }
    
    return jsPortalQueryResult;
}


export async function buildDotNetPortalQueryResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPortalQueryResult: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.nextQueryParams)) {
        let { buildDotNetPortalQueryParams } = await import('./portalQueryParams');
        dotNetPortalQueryResult.nextQueryParams = await buildDotNetPortalQueryParams(jsObject.nextQueryParams);
    }
    if (hasValue(jsObject.queryParams)) {
        let { buildDotNetPortalQueryParams } = await import('./portalQueryParams');
        dotNetPortalQueryResult.queryParams = await buildDotNetPortalQueryParams(jsObject.queryParams);
    }
    if (hasValue(jsObject.results)) {
        dotNetPortalQueryResult.results = jsObject.results;
    }
    if (hasValue(jsObject.total)) {
        dotNetPortalQueryResult.total = jsObject.total;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPortalQueryResult.id = k;
                break;
            }
        }
    }

    return dotNetPortalQueryResult;
}

