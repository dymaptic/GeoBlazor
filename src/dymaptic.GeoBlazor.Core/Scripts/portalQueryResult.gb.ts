// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetPortalQueryResult } from './portalQueryResult';
import PortalQueryResult from '@arcgis/core/portal/PortalQueryResult';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsPortalQueryResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPortalQueryResult = new PortalQueryResult();
    if (hasValue(dotNetObject.nextQueryParams)) {
        let { buildJsPortalQueryParams } = await import('./portalQueryParams');
        jsPortalQueryResult.nextQueryParams = await buildJsPortalQueryParams(dotNetObject.nextQueryParams, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.queryParams)) {
        let { buildJsPortalQueryParams } = await import('./portalQueryParams');
        jsPortalQueryResult.queryParams = await buildJsPortalQueryParams(dotNetObject.queryParams, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.results)) {
        jsPortalQueryResult.results = dotNetObject.results;
    }
    if (hasValue(dotNetObject.total)) {
        jsPortalQueryResult.total = dotNetObject.total;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsPortalQueryResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPortalQueryResult;
    
    let dnInstantiatedObject = await buildDotNetPortalQueryResult(jsPortalQueryResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PortalQueryResult', e);
    }
    
    return jsPortalQueryResult;
}

export async function buildDotNetPortalQueryResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPortalQueryResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.nextQueryParams)) {
            let { buildDotNetPortalQueryParams } = await import('./portalQueryParams');
            dotNetPortalQueryResult.nextQueryParams = await buildDotNetPortalQueryParams(jsObject.nextQueryParams);
        }
        if (hasValue(jsObject.queryParams)) {
            let { buildDotNetPortalQueryParams } = await import('./portalQueryParams');
            dotNetPortalQueryResult.queryParams = await buildDotNetPortalQueryParams(jsObject.queryParams);
        }
        if (hasValue(jsObject.results)) {
            dotNetPortalQueryResult.results = jsObject.results;
        }
        if (hasValue(jsObject.total)) {
            dotNetPortalQueryResult.total = jsObject.total;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPortalQueryResult.id = k;
                break;
            }
        }
    }

    return dotNetPortalQueryResult;
}

