// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetAssetTypeJSON } from './assetTypeJSON';

export async function buildJsAssetTypeJSONGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsAssetTypeJSON: any = {};

    if (hasValue(dotNetObject.assetTypeCode)) {
        jsAssetTypeJSON.assetTypeCode = dotNetObject.assetTypeCode;
    }
    if (hasValue(dotNetObject.assetTypeName)) {
        jsAssetTypeJSON.assetTypeName = dotNetObject.assetTypeName;
    }
    if (hasValue(dotNetObject.terminalConfigurationId)) {
        jsAssetTypeJSON.terminalConfigurationId = dotNetObject.terminalConfigurationId;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsAssetTypeJSON);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsAssetTypeJSON;
    
    return jsAssetTypeJSON;
}


export async function buildDotNetAssetTypeJSONGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAssetTypeJSON: any = {};
    
    if (hasValue(jsObject.assetTypeCode)) {
        dotNetAssetTypeJSON.assetTypeCode = jsObject.assetTypeCode;
    }
    
    if (hasValue(jsObject.assetTypeName)) {
        dotNetAssetTypeJSON.assetTypeName = jsObject.assetTypeName;
    }
    
    if (hasValue(jsObject.terminalConfigurationId)) {
        dotNetAssetTypeJSON.terminalConfigurationId = jsObject.terminalConfigurationId;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetAssetTypeJSON.id = geoBlazorId;
    }

    return dotNetAssetTypeJSON;
}

