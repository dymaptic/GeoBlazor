import {buildDotNetLineOfSightTarget} from './lineOfSightTarget';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import LineOfSightTarget from '@arcgis/core/widgets/LineOfSight/LineOfSightTarget';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsLineOfSightTargetGenerated(dotNetObject: any): Promise<any> {
    let jsLineOfSightTarget = new LineOfSightTarget();
    if (hasValue(dotNetObject.location)) {
        let {buildJsPoint} = await import('./point');
        jsLineOfSightTarget.location = buildJsPoint(dotNetObject.location) as any;
    }


    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsLineOfSightTarget);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLineOfSightTarget;

    let dnInstantiatedObject = await buildDotNetLineOfSightTarget(jsLineOfSightTarget);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LineOfSightTarget', e);
    }

    return jsLineOfSightTarget;
}

export async function buildDotNetLineOfSightTargetGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetLineOfSightTarget: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.intersectedGraphic)) {
        let {buildDotNetGraphic} = await import('./graphic');
        dotNetLineOfSightTarget.intersectedGraphic = buildDotNetGraphic(jsObject.intersectedGraphic, layerId, viewId);
    }
    if (hasValue(jsObject.intersectedLocation)) {
        let {buildDotNetPoint} = await import('./point');
        dotNetLineOfSightTarget.intersectedLocation = buildDotNetPoint(jsObject.intersectedLocation);
    }
    if (hasValue(jsObject.location)) {
        let {buildDotNetPoint} = await import('./point');
        dotNetLineOfSightTarget.location = buildDotNetPoint(jsObject.location);
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLineOfSightTarget.id = k;
                break;
            }
        }
    }

    return dotNetLineOfSightTarget;
}

