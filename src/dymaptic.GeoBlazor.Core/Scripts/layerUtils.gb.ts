// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import layerUtils = __esri.layerUtils;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class LayerUtilsGenerated implements IPropertyWrapper {
    public component: layerUtils;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: layerUtils) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async originOfLayerProperty(layer: any,
        property: any): Promise<any> {
        let { buildJsIOperationalLayer } = await import('./iOperationalLayer');
        let jsLayer = await buildJsIOperationalLayer(layer, this.layerId, this.viewId) as any;
        return this.component.originOfLayerProperty(jsLayer,
            property);
    }

    async revertLayerProperty(layer: any,
        property: any,
        origin: any): Promise<void> {
        let { buildJsIOperationalLayer } = await import('./iOperationalLayer');
        let jsLayer = await buildJsIOperationalLayer(layer, this.layerId, this.viewId) as any;
        this.component.revertLayerProperty(jsLayer,
            property,
            origin);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsLayerUtilsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jslayerUtils: any = {}


    let { default: LayerUtilsWrapper } = await import('./layerUtils');
    let layerUtilsWrapper = new LayerUtilsWrapper(jslayerUtils);
    layerUtilsWrapper.geoBlazorId = dotNetObject.id;
    layerUtilsWrapper.viewId = viewId;
    layerUtilsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(layerUtilsWrapper);
    jsObjectRefs[dotNetObject.id] = layerUtilsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jslayerUtils;
    let { buildDotNetLayerUtils } = await import('./layerUtils');
    let dnInstantiatedObject = await buildDotNetLayerUtils(jslayerUtils);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LayerUtils', e);
    }
    
    return jslayerUtils;
}
export async function buildDotNetLayerUtilsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLayerUtils: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLayerUtils.id = k;
                break;
            }
        }
    }

    return dotNetLayerUtils;
}

