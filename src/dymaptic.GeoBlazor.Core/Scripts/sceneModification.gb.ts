// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetSceneModification } from './sceneModification';
import SceneModification from '@arcgis/core/layers/support/SceneModification';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsSceneModificationGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSceneModification = new SceneModification();
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsPolygon } = await import('./polygon');
        jsSceneModification.geometry = buildJsPolygon(dotNetObject.geometry) as any;
    }

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsSceneModification);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSceneModification;
    
    let dnInstantiatedObject = await buildDotNetSceneModification(jsSceneModification);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SceneModification', e);
    }
    
    return jsSceneModification;
}

export async function buildDotNetSceneModificationGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSceneModification: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.geometry)) {
            let { buildDotNetPolygon } = await import('./polygon');
            dotNetSceneModification.geometry = buildDotNetPolygon(jsObject.geometry);
        }
        if (hasValue(jsObject.type)) {
            dotNetSceneModification.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSceneModification.id = k;
                break;
            }
        }
    }

    return dotNetSceneModification;
}

