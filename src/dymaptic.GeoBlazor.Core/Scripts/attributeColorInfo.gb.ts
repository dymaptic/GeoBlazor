// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import AttributeColorInfo from '@arcgis/core/renderers/support/AttributeColorInfo';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetAttributeColorInfo } from './attributeColorInfo';

export async function buildJsAttributeColorInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsAttributeColorInfo = new AttributeColorInfo();
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsAttributeColorInfo.color = buildJsMapColor(dotNetObject.color) as any;
    }

    if (hasValue(dotNetObject.field)) {
        jsAttributeColorInfo.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.label)) {
        jsAttributeColorInfo.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        jsAttributeColorInfo.valueExpression = dotNetObject.valueExpression;
    }
    if (hasValue(dotNetObject.valueExpressionTitle)) {
        jsAttributeColorInfo.valueExpressionTitle = dotNetObject.valueExpressionTitle;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsAttributeColorInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsAttributeColorInfo;
    
    let dnInstantiatedObject = await buildDotNetAttributeColorInfo(jsAttributeColorInfo);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for AttributeColorInfo', e);
    }
    
    return jsAttributeColorInfo;
}

export async function buildDotNetAttributeColorInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAttributeColorInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.color)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetAttributeColorInfo.color = buildDotNetMapColor(jsObject.color);
        }
    if (hasValue(jsObject.field)) {
        dotNetAttributeColorInfo.field = jsObject.field;
    }
    if (hasValue(jsObject.label)) {
        dotNetAttributeColorInfo.label = jsObject.label;
    }
    if (hasValue(jsObject.valueExpression)) {
        dotNetAttributeColorInfo.valueExpression = jsObject.valueExpression;
    }
    if (hasValue(jsObject.valueExpressionTitle)) {
        dotNetAttributeColorInfo.valueExpressionTitle = jsObject.valueExpressionTitle;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetAttributeColorInfo.id = k;
                break;
            }
        }
    }

    return dotNetAttributeColorInfo;
}

