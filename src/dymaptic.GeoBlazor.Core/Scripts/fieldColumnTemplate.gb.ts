// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import FieldColumnTemplate from '@arcgis/core/widgets/FeatureTable/support/FieldColumnTemplate';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetFieldColumnTemplate } from './fieldColumnTemplate';

export async function buildJsFieldColumnTemplateGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFieldColumnTemplate = new FieldColumnTemplate();
    if (hasValue(dotNetObject.hasFormatFunction) && dotNetObject.hasFormatFunction) {
        jsFieldColumnTemplate.formatFunction = (parameters) => {
            let func = new Function('parameters', dotNetObject.formatFunction.javaScriptFunction);
            return func(parameters);
        };
    }
    if (hasValue(dotNetObject.menuConfig)) {
        let { buildJsColumnTableMenuConfig } = await import('./columnTableMenuConfig');
        jsFieldColumnTemplate.menuConfig = await buildJsColumnTableMenuConfig(dotNetObject.menuConfig, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.autoWidth)) {
        jsFieldColumnTemplate.autoWidth = dotNetObject.autoWidth;
    }
    if (hasValue(dotNetObject.direction)) {
        jsFieldColumnTemplate.direction = dotNetObject.direction;
    }
    if (hasValue(dotNetObject.domain)) {
        jsFieldColumnTemplate.domain = dotNetObject.domain;
    }
    if (hasValue(dotNetObject.editable)) {
        jsFieldColumnTemplate.editable = dotNetObject.editable;
    }
    if (hasValue(dotNetObject.fieldName)) {
        jsFieldColumnTemplate.fieldName = dotNetObject.fieldName;
    }
    if (hasValue(dotNetObject.flexGrow)) {
        jsFieldColumnTemplate.flexGrow = dotNetObject.flexGrow;
    }
    if (hasValue(dotNetObject.icon)) {
        jsFieldColumnTemplate.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.initialSortPriority)) {
        jsFieldColumnTemplate.initialSortPriority = dotNetObject.initialSortPriority;
    }
    if (hasValue(dotNetObject.invalid)) {
        jsFieldColumnTemplate.invalid = dotNetObject.invalid;
    }
    if (hasValue(dotNetObject.label)) {
        jsFieldColumnTemplate.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.required)) {
        jsFieldColumnTemplate.required = dotNetObject.required;
    }
    if (hasValue(dotNetObject.resizable)) {
        jsFieldColumnTemplate.resizable = dotNetObject.resizable;
    }
    if (hasValue(dotNetObject.sortable)) {
        jsFieldColumnTemplate.sortable = dotNetObject.sortable;
    }
    if (hasValue(dotNetObject.textAlign)) {
        jsFieldColumnTemplate.textAlign = dotNetObject.textAlign;
    }
    if (hasValue(dotNetObject.textWrap)) {
        jsFieldColumnTemplate.textWrap = dotNetObject.textWrap;
    }
    if (hasValue(dotNetObject.width)) {
        jsFieldColumnTemplate.width = dotNetObject.width;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsFieldColumnTemplate);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFieldColumnTemplate;
    
    let dnInstantiatedObject = await buildDotNetFieldColumnTemplate(jsFieldColumnTemplate);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FieldColumnTemplate', e);
    }
    
    return jsFieldColumnTemplate;
}

export async function buildDotNetFieldColumnTemplateGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFieldColumnTemplate: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.menuConfig)) {
            let { buildDotNetColumnTableMenuConfig } = await import('./columnTableMenuConfig');
            dotNetFieldColumnTemplate.menuConfig = await buildDotNetColumnTableMenuConfig(jsObject.menuConfig);
        }
    if (hasValue(jsObject.autoWidth)) {
        dotNetFieldColumnTemplate.autoWidth = jsObject.autoWidth;
    }
    if (hasValue(jsObject.direction)) {
        dotNetFieldColumnTemplate.direction = jsObject.direction;
    }
    if (hasValue(jsObject.domain)) {
        dotNetFieldColumnTemplate.domain = jsObject.domain;
    }
    if (hasValue(jsObject.editable)) {
        dotNetFieldColumnTemplate.editable = jsObject.editable;
    }
    if (hasValue(jsObject.fieldName)) {
        dotNetFieldColumnTemplate.fieldName = jsObject.fieldName;
    }
    if (hasValue(jsObject.flexGrow)) {
        dotNetFieldColumnTemplate.flexGrow = jsObject.flexGrow;
    }
    if (hasValue(jsObject.formatFunction)) {
        dotNetFieldColumnTemplate.formatFunction = jsObject.formatFunction;
    }
    if (hasValue(jsObject.frozen)) {
        dotNetFieldColumnTemplate.frozen = jsObject.frozen;
    }
    if (hasValue(jsObject.frozenToEnd)) {
        dotNetFieldColumnTemplate.frozenToEnd = jsObject.frozenToEnd;
    }
    if (hasValue(jsObject.icon)) {
        dotNetFieldColumnTemplate.icon = jsObject.icon;
    }
    if (hasValue(jsObject.initialSortPriority)) {
        dotNetFieldColumnTemplate.initialSortPriority = jsObject.initialSortPriority;
    }
    if (hasValue(jsObject.invalid)) {
        dotNetFieldColumnTemplate.invalid = jsObject.invalid;
    }
    if (hasValue(jsObject.label)) {
        dotNetFieldColumnTemplate.label = jsObject.label;
    }
    if (hasValue(jsObject.required)) {
        dotNetFieldColumnTemplate.required = jsObject.required;
    }
    if (hasValue(jsObject.resizable)) {
        dotNetFieldColumnTemplate.resizable = jsObject.resizable;
    }
    if (hasValue(jsObject.sortable)) {
        dotNetFieldColumnTemplate.sortable = jsObject.sortable;
    }
    if (hasValue(jsObject.textAlign)) {
        dotNetFieldColumnTemplate.textAlign = jsObject.textAlign;
    }
    if (hasValue(jsObject.textWrap)) {
        dotNetFieldColumnTemplate.textWrap = jsObject.textWrap;
    }
    if (hasValue(jsObject.type)) {
        dotNetFieldColumnTemplate.type = jsObject.type;
    }
    if (hasValue(jsObject.width)) {
        dotNetFieldColumnTemplate.width = jsObject.width;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFieldColumnTemplate.id = k;
                break;
            }
        }
    }

    return dotNetFieldColumnTemplate;
}

