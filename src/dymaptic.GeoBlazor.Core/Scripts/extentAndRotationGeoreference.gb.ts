import {buildDotNetExtentAndRotationGeoreference} from './extentAndRotationGeoreference';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import ExtentAndRotationGeoreference from '@arcgis/core/layers/support/ExtentAndRotationGeoreference';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsExtentAndRotationGeoreferenceGenerated(dotNetObject: any): Promise<any> {
    let jsExtentAndRotationGeoreference = new ExtentAndRotationGeoreference();
    if (hasValue(dotNetObject.extent)) {
        let {buildJsExtent} = await import('./extent');
        jsExtentAndRotationGeoreference.extent = buildJsExtent(dotNetObject.extent) as any;
    }

    if (hasValue(dotNetObject.rotation)) {
        jsExtentAndRotationGeoreference.rotation = dotNetObject.rotation;
    }

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsExtentAndRotationGeoreference);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsExtentAndRotationGeoreference;

    let dnInstantiatedObject = await buildDotNetExtentAndRotationGeoreference(jsExtentAndRotationGeoreference);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ExtentAndRotationGeoreference', e);
    }

    return jsExtentAndRotationGeoreference;
}

export async function buildDotNetExtentAndRotationGeoreferenceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetExtentAndRotationGeoreference: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.extent)) {
        let {buildDotNetExtent} = await import('./extent');
        dotNetExtentAndRotationGeoreference.extent = buildDotNetExtent(jsObject.extent);
    }
    if (hasValue(jsObject.rotation)) {
        dotNetExtentAndRotationGeoreference.rotation = jsObject.rotation;
    }
    if (hasValue(jsObject.type)) {
        dotNetExtentAndRotationGeoreference.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetExtentAndRotationGeoreference.id = k;
                break;
            }
        }
    }

    return dotNetExtentAndRotationGeoreference;
}

