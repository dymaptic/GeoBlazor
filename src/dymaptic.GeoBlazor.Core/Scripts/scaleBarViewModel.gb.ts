// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ScaleBarViewModel from '@arcgis/core/widgets/ScaleBar/ScaleBarViewModel';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, generateSerializableJson } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ScaleBarViewModelGenerated implements IPropertyWrapper {
    public component: ScaleBarViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ScaleBarViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {

    }
    
    async getScaleBarProperties(length: any,
        measurementSystem: any): Promise<any> {
        let result = this.component.getScaleBarProperties(length,
            measurementSystem);
        
        return generateSerializableJson(result);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsScaleBarViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }

    let jsScaleBarViewModel = new ScaleBarViewModel(properties);

    let { default: ScaleBarViewModelWrapper } = await import('./scaleBarViewModel');
    let scaleBarViewModelWrapper = new ScaleBarViewModelWrapper(jsScaleBarViewModel);
    scaleBarViewModelWrapper.geoBlazorId = dotNetObject.id;
    scaleBarViewModelWrapper.viewId = viewId;
    scaleBarViewModelWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = scaleBarViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsScaleBarViewModel;
    
    return jsScaleBarViewModel;
}


export async function buildDotNetScaleBarViewModelGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetScaleBarViewModel: any = {};
    
    if (hasValue(jsObject.state)) {
        dotNetScaleBarViewModel.state = removeCircularReferences(jsObject.state);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetScaleBarViewModel.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetScaleBarViewModel.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetScaleBarViewModel.id)) {
        jsObjectRefs[dotNetScaleBarViewModel.id] ??= jsObject;
        arcGisObjectRefs[dotNetScaleBarViewModel.id] ??= jsObject;
    }

    return dotNetScaleBarViewModel;
}

