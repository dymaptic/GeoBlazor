// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ComboBoxInput from '@arcgis/core/form/elements/inputs/ComboBoxInput';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetComboBoxInput } from './comboBoxInput';

export async function buildJsComboBoxInputGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.noValueOptionLabel)) {
        properties.noValueOptionLabel = dotNetObject.noValueOptionLabel;
    }
    if (hasValue(dotNetObject.showNoValueOption)) {
        properties.showNoValueOption = dotNetObject.showNoValueOption;
    }
    let jsComboBoxInput = new ComboBoxInput(properties);
    
    jsObjectRefs[dotNetObject.id] = jsComboBoxInput;
    arcGisObjectRefs[dotNetObject.id] = jsComboBoxInput;
    
    return jsComboBoxInput;
}


export async function buildDotNetComboBoxInputGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetComboBoxInput: any = {};
    
    if (hasValue(jsObject.noValueOptionLabel)) {
        dotNetComboBoxInput.noValueOptionLabel = jsObject.noValueOptionLabel;
    }
    
    if (hasValue(jsObject.showNoValueOption)) {
        dotNetComboBoxInput.showNoValueOption = jsObject.showNoValueOption;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetComboBoxInput.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetComboBoxInput.id = geoBlazorId;
    }

    return dotNetComboBoxInput;
}

