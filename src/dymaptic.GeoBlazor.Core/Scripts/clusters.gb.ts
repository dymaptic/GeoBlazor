// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import clusters = __esri.clusters;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ClustersGenerated implements IPropertyWrapper {
    public component: clusters;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: clusters) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async getLabelSchemes(parameters: any): Promise<any> {
        let { buildJsClustersGetLabelSchemesParams } = await import('./clustersGetLabelSchemesParams');
        let jsparameters = await buildJsClustersGetLabelSchemesParams(parameters, this.layerId, this.viewId) as any;
        return await this.component.getLabelSchemes(jsparameters);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsClustersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsclusters: any = {};


    let { default: ClustersWrapper } = await import('./clusters');
    let clustersWrapper = new ClustersWrapper(jsclusters);
    clustersWrapper.geoBlazorId = dotNetObject.id;
    clustersWrapper.viewId = viewId;
    clustersWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(clustersWrapper);
    jsObjectRefs[dotNetObject.id] = clustersWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsclusters;
    let { buildDotNetClusters } = await import('./clusters');
    let dnInstantiatedObject = await buildDotNetClusters(jsclusters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Clusters', e);
    }
    
    return jsclusters;
}

export async function buildDotNetClustersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetClusters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetClusters.id = k;
                break;
            }
        }
    }

    return dotNetClusters;
}

