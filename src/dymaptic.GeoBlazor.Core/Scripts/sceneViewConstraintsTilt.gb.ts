// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetSceneViewConstraintsTilt } from './sceneViewConstraintsTilt';

export async function buildJsSceneViewConstraintsTiltGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsSceneViewConstraintsTilt: any = {};

    if (hasValue(dotNetObject.max)) {
        jsSceneViewConstraintsTilt.max = dotNetObject.max;
    }
    if (hasValue(dotNetObject.mode)) {
        jsSceneViewConstraintsTilt.mode = dotNetObject.mode;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSceneViewConstraintsTilt);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSceneViewConstraintsTilt;
    
    return jsSceneViewConstraintsTilt;
}


export async function buildDotNetSceneViewConstraintsTiltGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSceneViewConstraintsTilt: any = {};
    
    if (hasValue(jsObject.max)) {
        dotNetSceneViewConstraintsTilt.max = jsObject.max;
    }
    
    if (hasValue(jsObject.mode)) {
        dotNetSceneViewConstraintsTilt.mode = removeCircularReferences(jsObject.mode);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSceneViewConstraintsTilt.id = geoBlazorId;
    }

    return dotNetSceneViewConstraintsTilt;
}

