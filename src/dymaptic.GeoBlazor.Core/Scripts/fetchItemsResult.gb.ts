// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetFetchItemsResult } from './fetchItemsResult';

export async function buildJsFetchItemsResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFetchItemsResult: any = {};
    if (hasValue(dotNetObject.items) && dotNetObject.items.length > 0) {
        let { buildJsPortalItem } = await import('./portalItem');
        jsFetchItemsResult.items = await Promise.all(dotNetObject.items.map(async i => await buildJsPortalItem(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.nextStart)) {
        jsFetchItemsResult.nextStart = dotNetObject.nextStart;
    }
    if (hasValue(dotNetObject.total)) {
        jsFetchItemsResult.total = dotNetObject.total;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFetchItemsResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFetchItemsResult;
    
    return jsFetchItemsResult;
}


export async function buildDotNetFetchItemsResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFetchItemsResult: any = {};
    
    if (hasValue(jsObject.items)) {
        let { buildDotNetPortalItem } = await import('./portalItem');
        dotNetFetchItemsResult.items = await Promise.all(jsObject.items.map(async i => await buildDotNetPortalItem(i)));
    }
    
    if (hasValue(jsObject.nextStart)) {
        dotNetFetchItemsResult.nextStart = jsObject.nextStart;
    }
    
    if (hasValue(jsObject.total)) {
        dotNetFetchItemsResult.total = jsObject.total;
    }
    

    return dotNetFetchItemsResult;
}

