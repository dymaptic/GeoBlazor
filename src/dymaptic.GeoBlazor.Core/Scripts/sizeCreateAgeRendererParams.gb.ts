// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSizeCreateAgeRendererParams } from './sizeCreateAgeRendererParams';

export async function buildJsSizeCreateAgeRendererParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jssizeCreateAgeRendererParams: any = {}
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jssizeCreateAgeRendererParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.theme)) {
        let { buildJsTheme } = await import('./theme');
        jssizeCreateAgeRendererParams.theme = await buildJsTheme(dotNetObject.theme, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.defaultSymbolEnabled)) {
        jssizeCreateAgeRendererParams.defaultSymbolEnabled = dotNetObject.defaultSymbolEnabled;
    }
    if (hasValue(dotNetObject.endTime)) {
        jssizeCreateAgeRendererParams.endTime = dotNetObject.endTime;
    }
    if (hasValue(dotNetObject.legendOptions)) {
        jssizeCreateAgeRendererParams.legendOptions = dotNetObject.legendOptions;
    }
    if (hasValue(dotNetObject.maxValue)) {
        jssizeCreateAgeRendererParams.maxValue = dotNetObject.maxValue;
    }
    if (hasValue(dotNetObject.minValue)) {
        jssizeCreateAgeRendererParams.minValue = dotNetObject.minValue;
    }
    if (hasValue(dotNetObject.outlineOptimizationEnabled)) {
        jssizeCreateAgeRendererParams.outlineOptimizationEnabled = dotNetObject.outlineOptimizationEnabled;
    }
    if (hasValue(dotNetObject.signal)) {
        jssizeCreateAgeRendererParams.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.sizeOptimizationEnabled)) {
        jssizeCreateAgeRendererParams.sizeOptimizationEnabled = dotNetObject.sizeOptimizationEnabled;
    }
    if (hasValue(dotNetObject.sizeScheme)) {
        jssizeCreateAgeRendererParams.sizeScheme = dotNetObject.sizeScheme;
    }
    if (hasValue(dotNetObject.startTime)) {
        jssizeCreateAgeRendererParams.startTime = dotNetObject.startTime;
    }
    if (hasValue(dotNetObject.statistics)) {
        jssizeCreateAgeRendererParams.statistics = dotNetObject.statistics;
    }
    if (hasValue(dotNetObject.symbolType)) {
        jssizeCreateAgeRendererParams.symbolType = dotNetObject.symbolType;
    }
    if (hasValue(dotNetObject.unit)) {
        jssizeCreateAgeRendererParams.unit = dotNetObject.unit;
    }
    if (hasValue(dotNetObject.view)) {
        jssizeCreateAgeRendererParams.view = dotNetObject.view;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jssizeCreateAgeRendererParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jssizeCreateAgeRendererParams;
    
    let dnInstantiatedObject = await buildDotNetSizeCreateAgeRendererParams(jssizeCreateAgeRendererParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SizeCreateAgeRendererParams', e);
    }
    
    return jssizeCreateAgeRendererParams;
}

export async function buildDotNetSizeCreateAgeRendererParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSizeCreateAgeRendererParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.theme)) {
            let { buildDotNetTheme } = await import('./theme');
            dotNetSizeCreateAgeRendererParams.theme = await buildDotNetTheme(jsObject.theme);
        }
    if (hasValue(jsObject.defaultSymbolEnabled)) {
        dotNetSizeCreateAgeRendererParams.defaultSymbolEnabled = jsObject.defaultSymbolEnabled;
    }
    if (hasValue(jsObject.endTime)) {
        dotNetSizeCreateAgeRendererParams.endTime = jsObject.endTime;
    }
    if (hasValue(jsObject.legendOptions)) {
        dotNetSizeCreateAgeRendererParams.legendOptions = jsObject.legendOptions;
    }
    if (hasValue(jsObject.maxValue)) {
        dotNetSizeCreateAgeRendererParams.maxValue = jsObject.maxValue;
    }
    if (hasValue(jsObject.minValue)) {
        dotNetSizeCreateAgeRendererParams.minValue = jsObject.minValue;
    }
    if (hasValue(jsObject.outlineOptimizationEnabled)) {
        dotNetSizeCreateAgeRendererParams.outlineOptimizationEnabled = jsObject.outlineOptimizationEnabled;
    }
    if (hasValue(jsObject.signal)) {
        dotNetSizeCreateAgeRendererParams.signal = jsObject.signal;
    }
    if (hasValue(jsObject.sizeOptimizationEnabled)) {
        dotNetSizeCreateAgeRendererParams.sizeOptimizationEnabled = jsObject.sizeOptimizationEnabled;
    }
    if (hasValue(jsObject.sizeScheme)) {
        dotNetSizeCreateAgeRendererParams.sizeScheme = jsObject.sizeScheme;
    }
    if (hasValue(jsObject.startTime)) {
        dotNetSizeCreateAgeRendererParams.startTime = jsObject.startTime;
    }
    if (hasValue(jsObject.statistics)) {
        dotNetSizeCreateAgeRendererParams.statistics = jsObject.statistics;
    }
    if (hasValue(jsObject.symbolType)) {
        dotNetSizeCreateAgeRendererParams.symbolType = jsObject.symbolType;
    }
    if (hasValue(jsObject.unit)) {
        dotNetSizeCreateAgeRendererParams.unit = jsObject.unit;
    }
    if (hasValue(jsObject.view)) {
        dotNetSizeCreateAgeRendererParams.view = jsObject.view;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSizeCreateAgeRendererParams.id = k;
                break;
            }
        }
    }

    return dotNetSizeCreateAgeRendererParams;
}

