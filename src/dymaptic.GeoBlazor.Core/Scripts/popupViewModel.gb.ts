// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import PopupViewModel from '@arcgis/core/widgets/Popup/PopupViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PopupViewModelGenerated implements IPropertyWrapper {
    public component: PopupViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: PopupViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async clear(): Promise<void> {
        this.component.clear();
    }

    async fetchFeatures(screenPoint: any,
        options: any): Promise<any> {
        return await this.component.fetchFeatures(screenPoint,
            options);
    }

    async next(): Promise<any> {
        let result = this.component.next();
        let { buildDotNetFeaturesViewModel } = await import('./featuresViewModel');
        return buildDotNetFeaturesViewModel(result);
    }

    async open(options: any): Promise<void> {
                let { buildJsFeaturesViewModelOpenOptions } = await import('./featuresViewModelOpenOptions');
let jsOptions = await buildJsFeaturesViewModelOpenOptions(options, this.layerId, this.viewId) as any;
        this.component.open(jsOptions);
    }

    async previous(): Promise<any> {
        let result = this.component.previous();
        let { buildDotNetFeaturesViewModel } = await import('./featuresViewModel');
        return buildDotNetFeaturesViewModel(result);
    }

    async triggerAction(actionIndex: any): Promise<void> {
        this.component.triggerAction(actionIndex);
    }

    // region properties
    
    async getActions(): Promise<any> {
        if (!hasValue(this.component.actions)) {
            return null;
        }
        
        let { buildDotNetActionBase } = await import('./actionBase');
        return await Promise.all(this.component.actions.map(async i => await buildDotNetActionBase(i)));
    }
    
    async setActions(value: any): Promise<void> {
        let { buildJsActionBase } = await import('./actionBase');
        this.component.actions = await Promise.all(value.map(async i => await buildJsActionBase(i, this.layerId, this.viewId))) as any;
    }
    
    async getAllActions(): Promise<any> {
        if (!hasValue(this.component.allActions)) {
            return null;
        }
        
        let { buildDotNetActionBase } = await import('./actionBase');
        return await Promise.all(this.component.allActions.map(async i => await buildDotNetActionBase(i)));
    }
    
    async getDefaultActions(): Promise<any> {
        if (!hasValue(this.component.defaultActions)) {
            return null;
        }
        
        let { buildDotNetActionBase } = await import('./actionBase');
        return await Promise.all(this.component.defaultActions.map(async i => await buildDotNetActionBase(i)));
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsPopupViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.actions)) {
        let { buildJsActionBase } = await import('./actionBase');
        properties.actions = await Promise.all(dotNetObject.actions.map(async i => await buildJsActionBase(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.hasGoToOverride) && dotNetObject.hasGoToOverride) {
        properties.goToOverride = async (view,
        goToParameters) => {

            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsGoToOverride', view,
            goToParameters);
        };
    }

    if (hasValue(dotNetObject.autoCloseEnabled)) {
        properties.autoCloseEnabled = dotNetObject.autoCloseEnabled;
    }
    if (hasValue(dotNetObject.browseClusterEnabled)) {
        properties.browseClusterEnabled = dotNetObject.browseClusterEnabled;
    }
    if (hasValue(dotNetObject.content)) {
        properties.content = dotNetObject.content;
    }
    if (hasValue(dotNetObject.defaultPopupTemplateEnabled)) {
        properties.defaultPopupTemplateEnabled = dotNetObject.defaultPopupTemplateEnabled;
    }
    if (hasValue(dotNetObject.features)) {
        const { id, dotNetComponentReference, ...sanitizedFeatures } = dotNetObject.features;
        properties.features = sanitizedFeatures;
    }
    if (hasValue(dotNetObject.featuresPerPage)) {
        properties.featuresPerPage = dotNetObject.featuresPerPage;
    }
    if (hasValue(dotNetObject.featureViewModelAbilities)) {
        const { id, dotNetComponentReference, ...sanitizedFeatureViewModelAbilities } = dotNetObject.featureViewModelAbilities;
        properties.featureViewModelAbilities = sanitizedFeatureViewModelAbilities;
    }
    if (hasValue(dotNetObject.highlightEnabled)) {
        properties.highlightEnabled = dotNetObject.highlightEnabled;
    }
    if (hasValue(dotNetObject.includeDefaultActions)) {
        properties.includeDefaultActions = dotNetObject.includeDefaultActions;
    }
    if (hasValue(dotNetObject.location)) {
        const { id, dotNetComponentReference, ...sanitizedLocation } = dotNetObject.location;
        properties.location = sanitizedLocation;
    }
    if (hasValue(dotNetObject.promises)) {
        properties.promises = dotNetObject.promises;
    }
    if (hasValue(dotNetObject.selectedFeatureIndex)) {
        properties.selectedFeatureIndex = dotNetObject.selectedFeatureIndex;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        const { id, dotNetComponentReference, ...sanitizedSpatialReference } = dotNetObject.spatialReference;
        properties.spatialReference = sanitizedSpatialReference;
    }
    if (hasValue(dotNetObject.timeZone)) {
        properties.timeZone = dotNetObject.timeZone;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    let jsPopupViewModel = new PopupViewModel(properties);
    jsPopupViewModel.on('trigger-action', async (evt: any) => {
        let { buildDotNetFeaturesViewModelTriggerActionEvent } = await import('./featuresViewModelTriggerActionEvent');
        let dnEvent = await buildDotNetFeaturesViewModelTriggerActionEvent(evt);
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsTriggerAction', dnEvent);
    });
    

    let { default: PopupViewModelWrapper } = await import('./popupViewModel');
    let popupViewModelWrapper = new PopupViewModelWrapper(jsPopupViewModel);
    popupViewModelWrapper.geoBlazorId = dotNetObject.id;
    popupViewModelWrapper.viewId = viewId;
    popupViewModelWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(popupViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = popupViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsPopupViewModel;
    
    let { buildDotNetPopupViewModel } = await import('./popupViewModel');
    let dnInstantiatedObject = await buildDotNetPopupViewModel(jsPopupViewModel, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type PopupViewModel detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PopupViewModel', e);
    }
    
    return jsPopupViewModel;
}


export async function buildDotNetPopupViewModelGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPopupViewModel: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.actions)) {
        let { buildDotNetActionBase } = await import('./actionBase');
        dotNetPopupViewModel.actions = await Promise.all(jsObject.actions.map(async i => await buildDotNetActionBase(i)));
    }
    if (hasValue(jsObject.allActions)) {
        let { buildDotNetActionBase } = await import('./actionBase');
        dotNetPopupViewModel.allActions = await Promise.all(jsObject.allActions.map(async i => await buildDotNetActionBase(i)));
    }
    if (hasValue(jsObject.defaultActions)) {
        let { buildDotNetActionBase } = await import('./actionBase');
        dotNetPopupViewModel.defaultActions = await Promise.all(jsObject.defaultActions.map(async i => await buildDotNetActionBase(i)));
    }
    if (hasValue(jsObject.active)) {
        dotNetPopupViewModel.active = jsObject.active;
    }
    if (hasValue(jsObject.autoCloseEnabled)) {
        dotNetPopupViewModel.autoCloseEnabled = jsObject.autoCloseEnabled;
    }
    if (hasValue(jsObject.browseClusterEnabled)) {
        dotNetPopupViewModel.browseClusterEnabled = jsObject.browseClusterEnabled;
    }
    if (hasValue(jsObject.content)) {
        dotNetPopupViewModel.content = jsObject.content;
    }
    if (hasValue(jsObject.defaultPopupTemplateEnabled)) {
        dotNetPopupViewModel.defaultPopupTemplateEnabled = jsObject.defaultPopupTemplateEnabled;
    }
    if (hasValue(jsObject.featureCount)) {
        dotNetPopupViewModel.featureCount = jsObject.featureCount;
    }
    if (hasValue(jsObject.features)) {
        dotNetPopupViewModel.features = jsObject.features;
    }
    if (hasValue(jsObject.featuresPerPage)) {
        dotNetPopupViewModel.featuresPerPage = jsObject.featuresPerPage;
    }
    if (hasValue(jsObject.featureViewModelAbilities)) {
        dotNetPopupViewModel.featureViewModelAbilities = jsObject.featureViewModelAbilities;
    }
    if (hasValue(jsObject.featureViewModels)) {
        dotNetPopupViewModel.featureViewModels = jsObject.featureViewModels;
    }
    if (hasValue(jsObject.goToOverride)) {
        dotNetPopupViewModel.goToOverride = jsObject.goToOverride;
    }
    if (hasValue(jsObject.highlightEnabled)) {
        dotNetPopupViewModel.highlightEnabled = jsObject.highlightEnabled;
    }
    if (hasValue(jsObject.includeDefaultActions)) {
        dotNetPopupViewModel.includeDefaultActions = jsObject.includeDefaultActions;
    }
    if (hasValue(jsObject.location)) {
        dotNetPopupViewModel.location = jsObject.location;
    }
    if (hasValue(jsObject.pendingPromisesCount)) {
        dotNetPopupViewModel.pendingPromisesCount = jsObject.pendingPromisesCount;
    }
    if (hasValue(jsObject.promiseCount)) {
        dotNetPopupViewModel.promiseCount = jsObject.promiseCount;
    }
    if (hasValue(jsObject.promises)) {
        dotNetPopupViewModel.promises = jsObject.promises;
    }
    if (hasValue(jsObject.selectedClusterBoundaryFeature)) {
        dotNetPopupViewModel.selectedClusterBoundaryFeature = jsObject.selectedClusterBoundaryFeature;
    }
    if (hasValue(jsObject.selectedFeature)) {
        dotNetPopupViewModel.selectedFeature = jsObject.selectedFeature;
    }
    if (hasValue(jsObject.selectedFeatureIndex)) {
        dotNetPopupViewModel.selectedFeatureIndex = jsObject.selectedFeatureIndex;
    }
    if (hasValue(jsObject.spatialReference)) {
        dotNetPopupViewModel.spatialReference = jsObject.spatialReference;
    }
    if (hasValue(jsObject.state)) {
        dotNetPopupViewModel.state = jsObject.state;
    }
    if (hasValue(jsObject.timeZone)) {
        dotNetPopupViewModel.timeZone = jsObject.timeZone;
    }
    if (hasValue(jsObject.title)) {
        dotNetPopupViewModel.title = jsObject.title;
    }
    if (hasValue(jsObject.waitingForResult)) {
        dotNetPopupViewModel.waitingForResult = jsObject.waitingForResult;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPopupViewModel.id = k;
                break;
            }
        }
    }

    return dotNetPopupViewModel;
}

