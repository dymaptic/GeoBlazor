// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import PopupViewModel from '@arcgis/core/widgets/Popup/PopupViewModel';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, buildJsStreamReference, generateSerializableJson } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PopupViewModelGenerated implements IPropertyWrapper {
    public component: PopupViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: PopupViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.actions) && dotNetObject.actions.length > 0) {
            let { buildJsActionBase } = await import('./actionBase');
            this.component.actions = dotNetObject.actions.map(i => buildJsActionBase(i, this.viewId)) as any;
        }
        if (hasValue(dotNetObject.activeFeature)) {
            let { buildJsGraphic } = await import('./graphic');
            this.component.activeFeature = buildJsGraphic(dotNetObject.activeFeature, this.viewId) as any;
        }
        if (hasValue(dotNetObject.features) && dotNetObject.features.length > 0) {
            let { buildJsGraphic } = await import('./graphic');
            this.component.features = dotNetObject.features.map(i => buildJsGraphic(i, this.viewId)) as any;
        }
        if (hasValue(dotNetObject.featureViewModelAbilities)) {
            let { buildJsAbilities } = await import('./abilities');
            this.component.featureViewModelAbilities = await buildJsAbilities(dotNetObject.featureViewModelAbilities, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.goToOverride)) {
            let { buildJsGoToOverride } = await import('./goToOverride');
            this.component.goToOverride = buildJsGoToOverride(dotNetObject.goToOverride, this.viewId) as any;
        }
        if (hasValue(dotNetObject.location)) {
            let { buildJsPoint } = await import('./point');
            this.component.location = buildJsPoint(dotNetObject.location, this.viewId) as any;
        }
        if (hasValue(dotNetObject.promises) && dotNetObject.promises.length > 0) {
            let { buildJsGraphic } = await import('./graphic');
            this.component.promises = dotNetObject.promises.map(i => buildJsGraphic(i, this.viewId)) as any;
        }
        if (hasValue(dotNetObject.screenLocation)) {
            let { buildJsFeaturesViewModelScreenPoint } = await import('./featuresViewModelScreenPoint');
            this.component.screenLocation = await buildJsFeaturesViewModelScreenPoint(dotNetObject.screenLocation, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.spatialReference)) {
            let { buildJsSpatialReference } = await import('./spatialReference');
            this.component.spatialReference = buildJsSpatialReference(dotNetObject.spatialReference, this.viewId) as any;
        }

        if (hasValue(dotNetObject.autoCloseEnabled)) {
            this.component.autoCloseEnabled = dotNetObject.autoCloseEnabled;
        }
        if (hasValue(dotNetObject.browseClusterEnabled)) {
            this.component.browseClusterEnabled = dotNetObject.browseClusterEnabled;
        }
        if (hasValue(dotNetObject.defaultPopupTemplateEnabled)) {
            this.component.defaultPopupTemplateEnabled = dotNetObject.defaultPopupTemplateEnabled;
        }
        if (hasValue(dotNetObject.featureMenuOpen)) {
            this.component.featureMenuOpen = dotNetObject.featureMenuOpen;
        }
        if (hasValue(dotNetObject.featureMenuTitle)) {
            this.component.featureMenuTitle = dotNetObject.featureMenuTitle;
        }
        if (hasValue(dotNetObject.featurePage)) {
            this.component.featurePage = dotNetObject.featurePage;
        }
        if (hasValue(dotNetObject.featuresPerPage)) {
            this.component.featuresPerPage = dotNetObject.featuresPerPage;
        }
        if (hasValue(dotNetObject.highlightEnabled)) {
            this.component.highlightEnabled = dotNetObject.highlightEnabled;
        }
        if (hasValue(dotNetObject.includeDefaultActions)) {
            this.component.includeDefaultActions = dotNetObject.includeDefaultActions;
        }
        if (hasValue(dotNetObject.initialDisplayMode)) {
            this.component.initialDisplayMode = dotNetObject.initialDisplayMode;
        }
        if (hasValue(dotNetObject.screenLocationEnabled)) {
            this.component.screenLocationEnabled = dotNetObject.screenLocationEnabled;
        }
        if (hasValue(dotNetObject.selectedFeatureIndex)) {
            this.component.selectedFeatureIndex = dotNetObject.selectedFeatureIndex;
        }
        if (hasValue(dotNetObject.timeZone)) {
            this.component.timeZone = dotNetObject.timeZone;
        }
        if (hasValue(dotNetObject.title)) {
            this.component.title = dotNetObject.title;
        }
        if (hasValue(dotNetObject.updateLocationEnabled)) {
            this.component.updateLocationEnabled = dotNetObject.updateLocationEnabled;
        }
        if (hasValue(dotNetObject.visible)) {
            this.component.visible = dotNetObject.visible;
        }
    }
    
    async clear(): Promise<void> {
        this.component.clear();
    }

    async fetchFeatures(screenPoint: any,
        options: any): Promise<any> {
        return await this.component.fetchFeatures(screenPoint,
            options);
    }

    async next(): Promise<any> {
        let result = this.component.next();
        let { buildDotNetFeaturesViewModel } = await import('./featuresViewModel');
        return buildDotNetFeaturesViewModel(result, this.viewId);
    }

    async open(options: any): Promise<void> {
        this.component.open(options);
    }

    async previous(): Promise<any> {
        let result = this.component.previous();
        let { buildDotNetFeaturesViewModel } = await import('./featuresViewModel');
        return buildDotNetFeaturesViewModel(result, this.viewId);
    }

    async triggerAction(actionIndex: any): Promise<void> {
        this.component.triggerAction(actionIndex);
    }

    async zoomTo(parameters: any): Promise<any> {
        let result = await this.component.zoomTo(parameters);
        
        return generateSerializableJson(result);
    }

    // region properties
    
    async getActions(): Promise<any> {
        if (!hasValue(this.component.actions)) {
            return null;
        }
        
        let { buildDotNetActionBase } = await import('./actionBase');
        return await Promise.all(this.component.actions!.map(async i => await buildDotNetActionBase(i, this.viewId)));
    }
    
    async setActions(value: any): Promise<void> {
        if (!hasValue(value)) {
            this.component.actions.removeAll();
        }
        let { buildJsActionBase } = await import('./actionBase');
        this.component.actions = await Promise.all(value.map(async i => await buildJsActionBase(i, this.viewId))) as any;
    }
    
    async getActiveFeature(): Promise<any> {
        if (!hasValue(this.component.activeFeature)) {
            return null;
        }
        
        let { buildDotNetGraphic } = await import('./graphic');
        return buildDotNetGraphic(this.component.activeFeature, this.layerId, this.viewId);
    }
    
    async setActiveFeature(value: any): Promise<void> {
        let { buildJsGraphic } = await import('./graphic');
        this.component.activeFeature =  buildJsGraphic(value, this.viewId);
    }
    
    async getAllActions(): Promise<any> {
        if (!hasValue(this.component.allActions)) {
            return null;
        }
        
        let { buildDotNetActionBase } = await import('./actionBase');
        return await Promise.all(this.component.allActions!.map(async i => await buildDotNetActionBase(i, this.viewId)));
    }
    
    getContent(): any {
        if (!hasValue(this.component.content)) {
            return null;
        }
        
        return generateSerializableJson(this.component.content);
    }
    
    setContent(value: any): void {
        this.component.content = JSON.parse(value);
    }
    
    async getDefaultActions(): Promise<any> {
        if (!hasValue(this.component.defaultActions)) {
            return null;
        }
        
        let { buildDotNetActionBase } = await import('./actionBase');
        return await Promise.all(this.component.defaultActions!.map(async i => await buildDotNetActionBase(i, this.viewId)));
    }
    
    getFeatureMenuTitle(): any {
        if (!hasValue(this.component.featureMenuTitle)) {
            return null;
        }
        
        return generateSerializableJson(this.component.featureMenuTitle);
    }
    
    setFeatureMenuTitle(value: any): void {
        this.component.featureMenuTitle = JSON.parse(value);
    }
    
    async getFeatures(): Promise<any> {
        if (!hasValue(this.component.features)) {
            return null;
        }
        
        let { buildDotNetGraphic } = await import('./graphic');
        return this.component.features!.map(i => buildDotNetGraphic(i, this.layerId, this.viewId));
    }
    
    async setFeatures(value: any): Promise<void> {
        if (!hasValue(value)) {
            this.component.features = [];
        }
        let { buildJsGraphic } = await import('./graphic');
        this.component.features = value.map(i => buildJsGraphic(i, this.viewId)) as any;
    }
    
    async getFeatureViewModelAbilities(): Promise<any> {
        if (!hasValue(this.component.featureViewModelAbilities)) {
            return null;
        }
        
        let { buildDotNetAbilities } = await import('./abilities');
        return await buildDotNetAbilities(this.component.featureViewModelAbilities, this.layerId, this.viewId);
    }
    
    async setFeatureViewModelAbilities(value: any): Promise<void> {
        let { buildJsAbilities } = await import('./abilities');
        this.component.featureViewModelAbilities = await  buildJsAbilities(value, this.layerId, this.viewId);
    }
    
    async getGoToOverride(): Promise<any> {
        if (!hasValue(this.component.goToOverride)) {
            return null;
        }
        
        let { buildDotNetGoToOverride } = await import('./goToOverride');
        return await buildDotNetGoToOverride(this.component.goToOverride, this.viewId);
    }
    
    async setGoToOverride(value: any): Promise<void> {
        let { buildJsGoToOverride } = await import('./goToOverride');
        this.component.goToOverride =  buildJsGoToOverride(value, this.viewId);
    }
    
    async getLocation(): Promise<any> {
        if (!hasValue(this.component.location)) {
            return null;
        }
        
        let { buildDotNetPoint } = await import('./point');
        return buildDotNetPoint(this.component.location, this.viewId);
    }
    
    async setLocation(value: any): Promise<void> {
        let { buildJsPoint } = await import('./point');
        this.component.location =  buildJsPoint(value, this.viewId);
    }
    
    async getPromises(): Promise<any> {
        if (!hasValue(this.component.promises)) {
            return null;
        }
        
        let { buildDotNetGraphic } = await import('./graphic');
        return this.component.promises!.map(i => buildDotNetGraphic(i, this.layerId, this.viewId));
    }
    
    async setPromises(value: any): Promise<void> {
        if (!hasValue(value)) {
            this.component.promises = [];
        }
        let { buildJsGraphic } = await import('./graphic');
        this.component.promises = value.map(i => buildJsGraphic(i, this.viewId)) as any;
    }
    
    async getScreenLocation(): Promise<any> {
        if (!hasValue(this.component.screenLocation)) {
            return null;
        }
        
        let { buildDotNetFeaturesViewModelScreenPoint } = await import('./featuresViewModelScreenPoint');
        return await buildDotNetFeaturesViewModelScreenPoint(this.component.screenLocation, this.viewId);
    }
    
    async setScreenLocation(value: any): Promise<void> {
        let { buildJsFeaturesViewModelScreenPoint } = await import('./featuresViewModelScreenPoint');
        this.component.screenLocation = await  buildJsFeaturesViewModelScreenPoint(value, this.layerId, this.viewId);
    }
    
    async getSelectedClusterBoundaryFeature(): Promise<any> {
        if (!hasValue(this.component.selectedClusterBoundaryFeature)) {
            return null;
        }
        
        let { buildDotNetGraphic } = await import('./graphic');
        return buildDotNetGraphic(this.component.selectedClusterBoundaryFeature, this.layerId, this.viewId);
    }
    
    async getSelectedFeature(): Promise<any> {
        if (!hasValue(this.component.selectedFeature)) {
            return null;
        }
        
        let { buildDotNetGraphic } = await import('./graphic');
        return buildDotNetGraphic(this.component.selectedFeature, this.layerId, this.viewId);
    }
    
    async getSpatialReference(): Promise<any> {
        if (!hasValue(this.component.spatialReference)) {
            return null;
        }
        
        let { buildDotNetSpatialReference } = await import('./spatialReference');
        return buildDotNetSpatialReference(this.component.spatialReference, this.viewId);
    }
    
    async setSpatialReference(value: any): Promise<void> {
        let { buildJsSpatialReference } = await import('./spatialReference');
        this.component.spatialReference =  buildJsSpatialReference(value, this.viewId);
    }
    
    getTimeZone(): any {
        if (!hasValue(this.component.timeZone)) {
            return null;
        }
        
        return generateSerializableJson(this.component.timeZone);
    }
    
    setTimeZone(value: any): void {
        this.component.timeZone = JSON.parse(value);
    }
    
    getTitle(): any {
        if (!hasValue(this.component.title)) {
            return null;
        }
        
        return generateSerializableJson(this.component.title);
    }
    
    setTitle(value: any): void {
        this.component.title = JSON.parse(value);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsPopupViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.actions) && dotNetObject.actions.length > 0) {
        let { buildJsActionBase } = await import('./actionBase');
        properties.actions = dotNetObject.actions.map(i => buildJsActionBase(i, viewId)) as any;
    }
    if (hasValue(dotNetObject.activeFeature)) {
        let { buildJsGraphic } = await import('./graphic');
        properties.activeFeature = buildJsGraphic(dotNetObject.activeFeature, viewId) as any;
    }
    if (hasValue(dotNetObject.features) && dotNetObject.features.length > 0) {
        let { buildJsGraphic } = await import('./graphic');
        properties.features = dotNetObject.features.map(i => buildJsGraphic(i, viewId)) as any;
    }
    if (hasValue(dotNetObject.featureViewModelAbilities)) {
        let { buildJsAbilities } = await import('./abilities');
        properties.featureViewModelAbilities = await buildJsAbilities(dotNetObject.featureViewModelAbilities, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.goToOverride)) {
        let { buildJsGoToOverride } = await import('./goToOverride');
        properties.goToOverride = buildJsGoToOverride(dotNetObject.goToOverride, viewId) as any;
    }
    if (hasValue(dotNetObject.location)) {
        let { buildJsPoint } = await import('./point');
        properties.location = buildJsPoint(dotNetObject.location, viewId) as any;
    }
    if (hasValue(dotNetObject.promises) && dotNetObject.promises.length > 0) {
        let { buildJsGraphic } = await import('./graphic');
        properties.promises = dotNetObject.promises.map(i => buildJsGraphic(i, viewId)) as any;
    }
    if (hasValue(dotNetObject.screenLocation)) {
        let { buildJsFeaturesViewModelScreenPoint } = await import('./featuresViewModelScreenPoint');
        properties.screenLocation = await buildJsFeaturesViewModelScreenPoint(dotNetObject.screenLocation, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        properties.spatialReference = buildJsSpatialReference(dotNetObject.spatialReference, viewId) as any;
    }

    if (hasValue(dotNetObject.autoCloseEnabled)) {
        properties.autoCloseEnabled = dotNetObject.autoCloseEnabled;
    }
    if (hasValue(dotNetObject.browseClusterEnabled)) {
        properties.browseClusterEnabled = dotNetObject.browseClusterEnabled;
    }
    if (hasValue(dotNetObject.defaultPopupTemplateEnabled)) {
        properties.defaultPopupTemplateEnabled = dotNetObject.defaultPopupTemplateEnabled;
    }
    if (hasValue(dotNetObject.featureMenuOpen)) {
        properties.featureMenuOpen = dotNetObject.featureMenuOpen;
    }
    if (hasValue(dotNetObject.featureMenuTitle)) {
        properties.featureMenuTitle = dotNetObject.featureMenuTitle;
    }
    if (hasValue(dotNetObject.featurePage)) {
        properties.featurePage = dotNetObject.featurePage;
    }
    if (hasValue(dotNetObject.featuresPerPage)) {
        properties.featuresPerPage = dotNetObject.featuresPerPage;
    }
    if (hasValue(dotNetObject.highlightEnabled)) {
        properties.highlightEnabled = dotNetObject.highlightEnabled;
    }
    if (hasValue(dotNetObject.includeDefaultActions)) {
        properties.includeDefaultActions = dotNetObject.includeDefaultActions;
    }
    if (hasValue(dotNetObject.initialDisplayMode)) {
        properties.initialDisplayMode = dotNetObject.initialDisplayMode;
    }
    if (hasValue(dotNetObject.screenLocationEnabled)) {
        properties.screenLocationEnabled = dotNetObject.screenLocationEnabled;
    }
    if (hasValue(dotNetObject.selectedFeatureIndex)) {
        properties.selectedFeatureIndex = dotNetObject.selectedFeatureIndex;
    }
    if (hasValue(dotNetObject.timeZone)) {
        properties.timeZone = dotNetObject.timeZone;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.updateLocationEnabled)) {
        properties.updateLocationEnabled = dotNetObject.updateLocationEnabled;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    let jsPopupViewModel = new PopupViewModel(properties);
    if (hasValue(dotNetObject.hasTriggerActionListener) && dotNetObject.hasTriggerActionListener) {
        jsPopupViewModel.on('trigger-action', async (evt: any) => {
            let { buildDotNetFeaturesViewModelTriggerActionEvent } = await import('./featuresViewModelTriggerActionEvent');
            let dnEvent = await buildDotNetFeaturesViewModelTriggerActionEvent(evt, layerId, viewId);
            let streamRef = buildJsStreamReference(dnEvent ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsTriggerAction', streamRef);
        });
    }
    

    let { default: PopupViewModelWrapper } = await import('./popupViewModel');
    let popupViewModelWrapper = new PopupViewModelWrapper(jsPopupViewModel);
    popupViewModelWrapper.geoBlazorId = dotNetObject.id;
    popupViewModelWrapper.viewId = viewId;
    popupViewModelWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = popupViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsPopupViewModel;
    
    return jsPopupViewModel;
}


export async function buildDotNetPopupViewModelGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPopupViewModel: any = {};
    
    if (hasValue(jsObject.actions)) {
        let { buildDotNetActionBase } = await import('./actionBase');
        dotNetPopupViewModel.actions = await Promise.all(jsObject.actions.map(async i => await buildDotNetActionBase(i, viewId)));
    }
    
    if (hasValue(jsObject.activeFeature)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetPopupViewModel.activeFeature = buildDotNetGraphic(jsObject.activeFeature, layerId, viewId);
    }
    
    if (hasValue(jsObject.allActions)) {
        let { buildDotNetActionBase } = await import('./actionBase');
        dotNetPopupViewModel.allActions = await Promise.all(jsObject.allActions.map(async i => await buildDotNetActionBase(i, viewId)));
    }
    
    if (hasValue(jsObject.defaultActions)) {
        let { buildDotNetActionBase } = await import('./actionBase');
        dotNetPopupViewModel.defaultActions = await Promise.all(jsObject.defaultActions.map(async i => await buildDotNetActionBase(i, viewId)));
    }
    
    if (hasValue(jsObject.features)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetPopupViewModel.features = jsObject.features.map(i => buildDotNetGraphic(i, layerId, viewId));
    }
    
    if (hasValue(jsObject.featureViewModelAbilities)) {
        let { buildDotNetAbilities } = await import('./abilities');
        dotNetPopupViewModel.featureViewModelAbilities = await buildDotNetAbilities(jsObject.featureViewModelAbilities, layerId, viewId);
    }
    
    if (hasValue(jsObject.location)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetPopupViewModel.location = buildDotNetPoint(jsObject.location, viewId);
    }
    
    if (hasValue(jsObject.promises)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetPopupViewModel.promises = jsObject.promises.map(i => buildDotNetGraphic(i, layerId, viewId));
    }
    
    if (hasValue(jsObject.screenLocation)) {
        let { buildDotNetFeaturesViewModelScreenPoint } = await import('./featuresViewModelScreenPoint');
        dotNetPopupViewModel.screenLocation = await buildDotNetFeaturesViewModelScreenPoint(jsObject.screenLocation, viewId);
    }
    
    if (hasValue(jsObject.selectedClusterBoundaryFeature)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetPopupViewModel.selectedClusterBoundaryFeature = buildDotNetGraphic(jsObject.selectedClusterBoundaryFeature, layerId, viewId);
    }
    
    if (hasValue(jsObject.selectedFeature)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetPopupViewModel.selectedFeature = buildDotNetGraphic(jsObject.selectedFeature, layerId, viewId);
    }
    
    if (hasValue(jsObject.spatialReference)) {
        let { buildDotNetSpatialReference } = await import('./spatialReference');
        dotNetPopupViewModel.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference, viewId);
    }
    
    if (hasValue(jsObject.active)) {
        dotNetPopupViewModel.active = jsObject.active;
    }
    
    if (hasValue(jsObject.autoCloseEnabled)) {
        dotNetPopupViewModel.autoCloseEnabled = jsObject.autoCloseEnabled;
    }
    
    if (hasValue(jsObject.browseClusterEnabled)) {
        dotNetPopupViewModel.browseClusterEnabled = jsObject.browseClusterEnabled;
    }
    
    if (hasValue(jsObject.content)) {
        dotNetPopupViewModel.content = jsObject.content;
    }
    
    if (hasValue(jsObject.defaultPopupTemplateEnabled)) {
        dotNetPopupViewModel.defaultPopupTemplateEnabled = jsObject.defaultPopupTemplateEnabled;
    }
    
    if (hasValue(jsObject.featureCount)) {
        dotNetPopupViewModel.featureCount = jsObject.featureCount;
    }
    
    if (hasValue(jsObject.featureMenuOpen)) {
        dotNetPopupViewModel.featureMenuOpen = jsObject.featureMenuOpen;
    }
    
    if (hasValue(jsObject.featureMenuTitle)) {
        dotNetPopupViewModel.featureMenuTitle = jsObject.featureMenuTitle;
    }
    
    if (hasValue(jsObject.featurePage)) {
        dotNetPopupViewModel.featurePage = jsObject.featurePage;
    }
    
    if (hasValue(jsObject.featuresPerPage)) {
        dotNetPopupViewModel.featuresPerPage = jsObject.featuresPerPage;
    }
    
    if (hasValue(jsObject.featureViewModels)) {
        dotNetPopupViewModel.featureViewModels = removeCircularReferences(jsObject.featureViewModels);
    }
    
    if (hasValue(jsObject.highlightEnabled)) {
        dotNetPopupViewModel.highlightEnabled = jsObject.highlightEnabled;
    }
    
    if (hasValue(jsObject.includeDefaultActions)) {
        dotNetPopupViewModel.includeDefaultActions = jsObject.includeDefaultActions;
    }
    
    if (hasValue(jsObject.initialDisplayMode)) {
        dotNetPopupViewModel.initialDisplayMode = removeCircularReferences(jsObject.initialDisplayMode);
    }
    
    if (hasValue(jsObject.pendingPromisesCount)) {
        dotNetPopupViewModel.pendingPromisesCount = jsObject.pendingPromisesCount;
    }
    
    if (hasValue(jsObject.promiseCount)) {
        dotNetPopupViewModel.promiseCount = jsObject.promiseCount;
    }
    
    if (hasValue(jsObject.screenLocationEnabled)) {
        dotNetPopupViewModel.screenLocationEnabled = jsObject.screenLocationEnabled;
    }
    
    if (hasValue(jsObject.selectedFeatureIndex)) {
        dotNetPopupViewModel.selectedFeatureIndex = jsObject.selectedFeatureIndex;
    }
    
    if (hasValue(jsObject.selectedFeatureViewModel)) {
        dotNetPopupViewModel.selectedFeatureViewModel = removeCircularReferences(jsObject.selectedFeatureViewModel);
    }
    
    if (hasValue(jsObject.state)) {
        dotNetPopupViewModel.state = removeCircularReferences(jsObject.state);
    }
    
    if (hasValue(jsObject.timeZone)) {
        dotNetPopupViewModel.timeZone = jsObject.timeZone;
    }
    
    if (hasValue(jsObject.title)) {
        dotNetPopupViewModel.title = jsObject.title;
    }
    
    if (hasValue(jsObject.updateLocationEnabled)) {
        dotNetPopupViewModel.updateLocationEnabled = jsObject.updateLocationEnabled;
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetPopupViewModel.visible = jsObject.visible;
    }
    
    if (hasValue(jsObject.waitingForContents)) {
        dotNetPopupViewModel.waitingForContents = jsObject.waitingForContents;
    }
    
    if (hasValue(jsObject.waitingForResult)) {
        dotNetPopupViewModel.waitingForResult = jsObject.waitingForResult;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetPopupViewModel.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetPopupViewModel.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetPopupViewModel.id)) {
        jsObjectRefs[dotNetPopupViewModel.id] ??= jsObject;
        arcGisObjectRefs[dotNetPopupViewModel.id] ??= jsObject;
    }

    return dotNetPopupViewModel;
}

