// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetAttachmentsVisibleElements } from './attachmentsVisibleElements';

export async function buildJsAttachmentsVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsAttachmentsVisibleElements: any = {};

    if (hasValue(dotNetObject.addButton)) {
        jsAttachmentsVisibleElements.addButton = dotNetObject.addButton;
    }
    if (hasValue(dotNetObject.addSubmitButton)) {
        jsAttachmentsVisibleElements.addSubmitButton = dotNetObject.addSubmitButton;
    }
    if (hasValue(dotNetObject.cancelAddButton)) {
        jsAttachmentsVisibleElements.cancelAddButton = dotNetObject.cancelAddButton;
    }
    if (hasValue(dotNetObject.cancelUpdateButton)) {
        jsAttachmentsVisibleElements.cancelUpdateButton = dotNetObject.cancelUpdateButton;
    }
    if (hasValue(dotNetObject.deleteButton)) {
        jsAttachmentsVisibleElements.deleteButton = dotNetObject.deleteButton;
    }
    if (hasValue(dotNetObject.errorMessage)) {
        jsAttachmentsVisibleElements.errorMessage = dotNetObject.errorMessage;
    }
    if (hasValue(dotNetObject.progressBar)) {
        jsAttachmentsVisibleElements.progressBar = dotNetObject.progressBar;
    }
    if (hasValue(dotNetObject.updateButton)) {
        jsAttachmentsVisibleElements.updateButton = dotNetObject.updateButton;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsAttachmentsVisibleElements);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsAttachmentsVisibleElements;
    
    return jsAttachmentsVisibleElements;
}


export async function buildDotNetAttachmentsVisibleElementsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAttachmentsVisibleElements: any = {};
    
    if (hasValue(jsObject.addButton)) {
        dotNetAttachmentsVisibleElements.addButton = jsObject.addButton;
    }
    
    if (hasValue(jsObject.addSubmitButton)) {
        dotNetAttachmentsVisibleElements.addSubmitButton = jsObject.addSubmitButton;
    }
    
    if (hasValue(jsObject.cancelAddButton)) {
        dotNetAttachmentsVisibleElements.cancelAddButton = jsObject.cancelAddButton;
    }
    
    if (hasValue(jsObject.cancelUpdateButton)) {
        dotNetAttachmentsVisibleElements.cancelUpdateButton = jsObject.cancelUpdateButton;
    }
    
    if (hasValue(jsObject.deleteButton)) {
        dotNetAttachmentsVisibleElements.deleteButton = jsObject.deleteButton;
    }
    
    if (hasValue(jsObject.errorMessage)) {
        dotNetAttachmentsVisibleElements.errorMessage = jsObject.errorMessage;
    }
    
    if (hasValue(jsObject.progressBar)) {
        dotNetAttachmentsVisibleElements.progressBar = jsObject.progressBar;
    }
    
    if (hasValue(jsObject.updateButton)) {
        dotNetAttachmentsVisibleElements.updateButton = jsObject.updateButton;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetAttachmentsVisibleElements.id = geoBlazorId;
    }

    return dotNetAttachmentsVisibleElements;
}

