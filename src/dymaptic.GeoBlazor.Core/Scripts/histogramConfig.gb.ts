// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetHistogramConfig } from './histogramConfig';

export async function buildJsHistogramConfigGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsHistogramConfig: any = {};
    if (hasValue(dotNetObject.hasBarCreatedFunction) && dotNetObject.hasBarCreatedFunction) {
        jsHistogramConfig.barCreatedFunction = async (index,
        element) => {

            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsBarCreatedFunction', index,
            element);
        };
    }
    if (hasValue(dotNetObject.bins) && dotNetObject.bins.length > 0) {
        let { buildJsBin } = await import('./bin');
        jsHistogramConfig.bins = await Promise.all(dotNetObject.bins.map(async i => await buildJsBin(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.hasDataLineCreatedFunction) && dotNetObject.hasDataLineCreatedFunction) {
        jsHistogramConfig.dataLineCreatedFunction = async (lineElement,
        labelElement,
        index) => {

            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsDataLineCreatedFunction', lineElement,
            labelElement,
            index);
        };
    }
    if (hasValue(dotNetObject.dataLines) && dotNetObject.dataLines.length > 0) {
        let { buildJsHistogramConfigDataLines } = await import('./histogramConfigDataLines');
        jsHistogramConfig.dataLines = await Promise.all(dotNetObject.dataLines.map(async i => await buildJsHistogramConfigDataLines(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.average)) {
        jsHistogramConfig.average = dotNetObject.average;
    }
    if (hasValue(dotNetObject.standardDeviation)) {
        jsHistogramConfig.standardDeviation = dotNetObject.standardDeviation;
    }
    if (hasValue(dotNetObject.standardDeviationCount)) {
        jsHistogramConfig.standardDeviationCount = dotNetObject.standardDeviationCount;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsHistogramConfig);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsHistogramConfig;
    
    try {
        let { buildDotNetHistogramConfig } = await import('./histogramConfig');
        let dnInstantiatedObject = await buildDotNetHistogramConfig(jsHistogramConfig, layerId, viewId);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type HistogramConfig detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for HistogramConfig', e);
    }
    
    return jsHistogramConfig;
}


export async function buildDotNetHistogramConfigGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetHistogramConfig: any = {};
    
    if (hasValue(jsObject.bins)) {
        let { buildDotNetBin } = await import('./bin');
        dotNetHistogramConfig.bins = await Promise.all(jsObject.bins.map(async i => await buildDotNetBin(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.dataLines)) {
        let { buildDotNetHistogramConfigDataLines } = await import('./histogramConfigDataLines');
        dotNetHistogramConfig.dataLines = await Promise.all(jsObject.dataLines.map(async i => await buildDotNetHistogramConfigDataLines(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.average)) {
        dotNetHistogramConfig.average = jsObject.average;
    }
    
    if (hasValue(jsObject.barCreatedFunction)) {
        dotNetHistogramConfig.barCreatedFunction = jsObject.barCreatedFunction;
    }
    
    if (hasValue(jsObject.dataLineCreatedFunction)) {
        dotNetHistogramConfig.dataLineCreatedFunction = jsObject.dataLineCreatedFunction;
    }
    
    if (hasValue(jsObject.standardDeviation)) {
        dotNetHistogramConfig.standardDeviation = jsObject.standardDeviation;
    }
    
    if (hasValue(jsObject.standardDeviationCount)) {
        dotNetHistogramConfig.standardDeviationCount = jsObject.standardDeviationCount;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetHistogramConfig.id = geoBlazorId;
    }

    return dotNetHistogramConfig;
}

