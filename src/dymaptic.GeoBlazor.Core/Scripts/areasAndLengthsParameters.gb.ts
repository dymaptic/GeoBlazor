// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import AreasAndLengthsParameters from '@arcgis/core/rest/support/AreasAndLengthsParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetAreasAndLengthsParameters } from './areasAndLengthsParameters';

export async function buildJsAreasAndLengthsParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.polygons) && dotNetObject.polygons.length > 0) {
        let { buildJsPolygon } = await import('./polygon');
        properties.polygons = dotNetObject.polygons.map(i => buildJsPolygon(i)) as any;
    }

    if (hasValue(dotNetObject.areaUnit)) {
        properties.areaUnit = dotNetObject.areaUnit;
    }
    if (hasValue(dotNetObject.calculationType)) {
        properties.calculationType = dotNetObject.calculationType;
    }
    if (hasValue(dotNetObject.lengthUnit)) {
        properties.lengthUnit = dotNetObject.lengthUnit;
    }
    let jsAreasAndLengthsParameters = new AreasAndLengthsParameters(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsAreasAndLengthsParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsAreasAndLengthsParameters;
    
    return jsAreasAndLengthsParameters;
}


export async function buildDotNetAreasAndLengthsParametersGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAreasAndLengthsParameters: any = {};
    
    if (hasValue(jsObject.polygons)) {
        let { buildDotNetPolygon } = await import('./polygon');
        dotNetAreasAndLengthsParameters.polygons = jsObject.polygons.map(i => buildDotNetPolygon(i));
    }
    
    if (hasValue(jsObject.areaUnit)) {
        dotNetAreasAndLengthsParameters.areaUnit = removeCircularReferences(jsObject.areaUnit);
    }
    
    if (hasValue(jsObject.calculationType)) {
        dotNetAreasAndLengthsParameters.calculationType = removeCircularReferences(jsObject.calculationType);
    }
    
    if (hasValue(jsObject.lengthUnit)) {
        dotNetAreasAndLengthsParameters.lengthUnit = removeCircularReferences(jsObject.lengthUnit);
    }
    

    return dotNetAreasAndLengthsParameters;
}

