import { buildDotNetAreasAndLengthsParameters } from './areasAndLengthsParameters';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import AreasAndLengthsParameters from '@arcgis/core/rest/support/AreasAndLengthsParameters';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsAreasAndLengthsParametersGenerated(dotNetObject: any): Promise<any> {
    let jsAreasAndLengthsParameters = new AreasAndLengthsParameters();
    if (hasValue(dotNetObject.polygons)) {
        let { buildJsPolygon } = await import('./polygon');
        jsAreasAndLengthsParameters.polygons = dotNetObject.polygons.map(i => buildJsPolygon(i)) as any;
    }

    if (hasValue(dotNetObject.areaUnit)) {
        jsAreasAndLengthsParameters.areaUnit = dotNetObject.areaUnit;
    }
    if (hasValue(dotNetObject.calculationType)) {
        jsAreasAndLengthsParameters.calculationType = dotNetObject.calculationType;
    }
    if (hasValue(dotNetObject.lengthUnit)) {
        jsAreasAndLengthsParameters.lengthUnit = dotNetObject.lengthUnit;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsAreasAndLengthsParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsAreasAndLengthsParameters;
    
    let dnInstantiatedObject = await buildDotNetAreasAndLengthsParameters(jsAreasAndLengthsParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for AreasAndLengthsParameters', e);
    }
    
    return jsAreasAndLengthsParameters;
}
export async function buildDotNetAreasAndLengthsParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAreasAndLengthsParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.polygons)) {
            let { buildDotNetPolygon } = await import('./polygon');
            dotNetAreasAndLengthsParameters.polygons = jsObject.polygons.map(i => buildDotNetPolygon(i));
        }
        if (hasValue(jsObject.areaUnit)) {
            dotNetAreasAndLengthsParameters.areaUnit = jsObject.areaUnit;
        }
        if (hasValue(jsObject.calculationType)) {
            dotNetAreasAndLengthsParameters.calculationType = jsObject.calculationType;
        }
        if (hasValue(jsObject.lengthUnit)) {
            dotNetAreasAndLengthsParameters.lengthUnit = jsObject.lengthUnit;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetAreasAndLengthsParameters.id = k;
                break;
            }
        }
    }

    return dotNetAreasAndLengthsParameters;
}

