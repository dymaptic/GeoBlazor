// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetHistogramResult } from './histogramResult';

export async function buildJsHistogramResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsHistogramResult: any = {};
    if (hasValue(dotNetObject.bins) && dotNetObject.bins.length > 0) {
        let { buildJsBin } = await import('./bin');
        jsHistogramResult.bins = await Promise.all(dotNetObject.bins.map(async i => await buildJsBin(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.maxValue)) {
        jsHistogramResult.maxValue = dotNetObject.maxValue;
    }
    if (hasValue(dotNetObject.minValue)) {
        jsHistogramResult.minValue = dotNetObject.minValue;
    }
    if (hasValue(dotNetObject.normalizationTotal)) {
        jsHistogramResult.normalizationTotal = dotNetObject.normalizationTotal;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsHistogramResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsHistogramResult;
    
    return jsHistogramResult;
}


export async function buildDotNetHistogramResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetHistogramResult: any = {};
    
    if (hasValue(jsObject.bins)) {
        let { buildDotNetBin } = await import('./bin');
        dotNetHistogramResult.bins = await Promise.all(jsObject.bins.map(async i => await buildDotNetBin(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.maxValue)) {
        dotNetHistogramResult.maxValue = jsObject.maxValue;
    }
    
    if (hasValue(jsObject.minValue)) {
        dotNetHistogramResult.minValue = jsObject.minValue;
    }
    
    if (hasValue(jsObject.normalizationTotal)) {
        dotNetHistogramResult.normalizationTotal = jsObject.normalizationTotal;
    }
    

    return dotNetHistogramResult;
}

