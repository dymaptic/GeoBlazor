// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetTessellatedMesh } from './tessellatedMesh';

export async function buildJsTessellatedMeshGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTessellatedMesh: any = {};
    if (hasValue(dotNetObject.vertices)) {
        let { buildJsMeshVertex } = await import('./meshVertex');
        jsTessellatedMesh.vertices = await Promise.all(dotNetObject.vertices.map(async i => await buildJsMeshVertex(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.indices)) {
        jsTessellatedMesh.indices = dotNetObject.indices;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsTessellatedMesh);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTessellatedMesh;
    
    return jsTessellatedMesh;
}


export async function buildDotNetTessellatedMeshGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsTessellatedMesh } = await import('./tessellatedMesh');
        jsComponentRef = await buildJsTessellatedMesh(jsObject, layerId, viewId);
    }
    
    let dotNetTessellatedMesh: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.vertices)) {
        let { buildDotNetMeshVertex } = await import('./meshVertex');
        dotNetTessellatedMesh.vertices = await Promise.all(jsObject.vertices.map(async i => await buildDotNetMeshVertex(i, layerId, viewId)));
    }
    if (hasValue(jsObject.indices)) {
        dotNetTessellatedMesh.indices = jsObject.indices;
    }

    return dotNetTessellatedMesh;
}

