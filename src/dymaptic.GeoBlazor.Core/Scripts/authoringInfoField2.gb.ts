// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetAuthoringInfoField2 } from './authoringInfoField2';

export async function buildJsAuthoringInfoField2Generated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsAuthoringInfoField2: any = {};
    if (hasValue(dotNetObject.classBreakInfos) && dotNetObject.classBreakInfos.length > 0) {
        let { buildJsAuthoringInfoField2ClassBreakInfos } = await import('./authoringInfoField2ClassBreakInfos');
        jsAuthoringInfoField2.classBreakInfos = await Promise.all(dotNetObject.classBreakInfos.map(async i => await buildJsAuthoringInfoField2ClassBreakInfos(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.field)) {
        jsAuthoringInfoField2.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.label)) {
        jsAuthoringInfoField2.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.normalizationField)) {
        jsAuthoringInfoField2.normalizationField = dotNetObject.normalizationField;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsAuthoringInfoField2);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsAuthoringInfoField2;
    
    return jsAuthoringInfoField2;
}


export async function buildDotNetAuthoringInfoField2Generated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAuthoringInfoField2: any = {};
    
    if (hasValue(jsObject.classBreakInfos)) {
        let { buildDotNetAuthoringInfoField2ClassBreakInfos } = await import('./authoringInfoField2ClassBreakInfos');
        dotNetAuthoringInfoField2.classBreakInfos = await Promise.all(jsObject.classBreakInfos.map(async i => await buildDotNetAuthoringInfoField2ClassBreakInfos(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.field)) {
        dotNetAuthoringInfoField2.field = jsObject.field;
    }
    
    if (hasValue(jsObject.label)) {
        dotNetAuthoringInfoField2.label = jsObject.label;
    }
    
    if (hasValue(jsObject.normalizationField)) {
        dotNetAuthoringInfoField2.normalizationField = jsObject.normalizationField;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetAuthoringInfoField2.id = geoBlazorId;
    }

    return dotNetAuthoringInfoField2;
}

