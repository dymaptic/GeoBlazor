// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import BasemapToggle from '@arcgis/core/widgets/BasemapToggle';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class BasemapToggleWidgetGenerated implements IPropertyWrapper {
    public widget: BasemapToggle;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: BasemapToggle) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    
    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async own(handleOrHandles: any): Promise<void> {
        this.widget.own(handleOrHandles);
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async render(): Promise<any> {
        return this.widget.render();
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async toggle(): Promise<any> {
        return await this.widget.toggle();
    }

    async when(callback: any,
        errback: any): Promise<any> {
        return await this.widget.when(callback,
            errback);
    }

    // region properties
    
    async getActiveBasemap(): Promise<any> {
        if (!hasValue(this.widget.activeBasemap)) {
            return null;
        }
        
        let { buildDotNetBasemap } = await import('./basemap');
        return await buildDotNetBasemap(this.widget.activeBasemap);
    }
    async getNextBasemap(): Promise<any> {
        if (!hasValue(this.widget.nextBasemap)) {
            return null;
        }
        
        let { buildDotNetBasemap } = await import('./basemap');
        return await buildDotNetBasemap(this.widget.nextBasemap);
    }
    async setNextBasemap(value: any): Promise<void> {
        let { buildJsBasemap } = await import('./basemap');
        this.widget.nextBasemap = await  buildJsBasemap(value, this.layerId, this.viewId);
    }
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetBasemapToggleViewModel } = await import('./basemapToggleViewModel');
        return await buildDotNetBasemapToggleViewModel(this.widget.viewModel, this.layerId, this.viewId);
    }
    async setViewModel(value: any): Promise<void> {
        let { buildJsBasemapToggleViewModel } = await import('./basemapToggleViewModel');
        this.widget.viewModel = await  buildJsBasemapToggleViewModel(value, this.layerId, this.viewId);
    }
    async getVisibleElements(): Promise<any> {
        if (!hasValue(this.widget.visibleElements)) {
            return null;
        }
        
        let { buildDotNetBasemapToggleVisibleElements } = await import('./basemapToggleVisibleElements');
        return await buildDotNetBasemapToggleVisibleElements(this.widget.visibleElements, this.layerId, this.viewId);
    }
    async setVisibleElements(value: any): Promise<void> {
        let { buildJsBasemapToggleVisibleElements } = await import('./basemapToggleVisibleElements');
        this.widget.visibleElements = await  buildJsBasemapToggleVisibleElements(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}

export async function buildJsBasemapToggleWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsBasemapToggle = new BasemapToggle();
    if (hasValue(dotNetObject.nextBasemap)) {
        let { buildJsBasemap } = await import('./basemap');
        jsBasemapToggle.nextBasemap = await buildJsBasemap(dotNetObject.nextBasemap, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsBasemapToggleViewModel } = await import('./basemapToggleViewModel');
        jsBasemapToggle.viewModel = await buildJsBasemapToggleViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.visibleElements)) {
        let { buildJsBasemapToggleVisibleElements } = await import('./basemapToggleVisibleElements');
        jsBasemapToggle.visibleElements = await buildJsBasemapToggleVisibleElements(dotNetObject.visibleElements, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.container)) {
        jsBasemapToggle.container = dotNetObject.container;
    }
    if (hasValue(dotNetObject.icon)) {
        jsBasemapToggle.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.label)) {
        jsBasemapToggle.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.view)) {
        jsBasemapToggle.view = dotNetObject.view;
    }
    if (hasValue(dotNetObject.widgetId)) {
        jsBasemapToggle.id = dotNetObject.widgetId;
    }
    let { default: BasemapToggleWidgetWrapper } = await import('./basemapToggleWidget');
    let basemapToggleWidgetWrapper = new BasemapToggleWidgetWrapper(jsBasemapToggle);
    basemapToggleWidgetWrapper.geoBlazorId = dotNetObject.id;
    basemapToggleWidgetWrapper.viewId = viewId;
    basemapToggleWidgetWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(basemapToggleWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = basemapToggleWidgetWrapper;

    arcGisObjectRefs[dotNetObject.id] = jsBasemapToggle;
    let { buildDotNetBasemapToggleWidget } = await import('./basemapToggleWidget');
    let dnInstantiatedObject = await buildDotNetBasemapToggleWidget(jsBasemapToggle, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BasemapToggleWidget', e);
    }
    
    return jsBasemapToggle;
}

export async function buildDotNetBasemapToggleWidgetGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBasemapToggleWidget: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.activeBasemap)) {
            let { buildDotNetBasemap } = await import('./basemap');
            dotNetBasemapToggleWidget.activeBasemap = await buildDotNetBasemap(jsObject.activeBasemap);
        }
        if (hasValue(jsObject.nextBasemap)) {
            let { buildDotNetBasemap } = await import('./basemap');
            dotNetBasemapToggleWidget.nextBasemap = await buildDotNetBasemap(jsObject.nextBasemap);
        }
        if (hasValue(jsObject.viewModel)) {
            let { buildDotNetBasemapToggleViewModel } = await import('./basemapToggleViewModel');
            dotNetBasemapToggleWidget.viewModel = await buildDotNetBasemapToggleViewModel(jsObject.viewModel, layerId, viewId);
        }
        if (hasValue(jsObject.visibleElements)) {
            let { buildDotNetBasemapToggleVisibleElements } = await import('./basemapToggleVisibleElements');
            dotNetBasemapToggleWidget.visibleElements = await buildDotNetBasemapToggleVisibleElements(jsObject.visibleElements, layerId, viewId);
        }
        if (hasValue(jsObject.container)) {
            dotNetBasemapToggleWidget.container = jsObject.container;
        }
        if (hasValue(jsObject.icon)) {
            dotNetBasemapToggleWidget.icon = jsObject.icon;
        }
        if (hasValue(jsObject.label)) {
            dotNetBasemapToggleWidget.label = jsObject.label;
        }
        if (hasValue(jsObject.type)) {
            dotNetBasemapToggleWidget.type = jsObject.type;
        }
        if (hasValue(jsObject.view)) {
            dotNetBasemapToggleWidget.view = jsObject.view;
        }
        if (hasValue(jsObject.id)) {
            dotNetBasemapToggleWidget.widgetId = jsObject.id;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetBasemapToggleWidget.id = k;
                break;
            }
        }
    }

    return dotNetBasemapToggleWidget;
}

