// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';

export async function buildJsFetchResourceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsFetchResource: any = {};
    if (hasValue(dotNetObject.resource)) {
        let { buildJsPortalItemResource } = await import('./portalItemResource');
        jsFetchResource.resource = await buildJsPortalItemResource(dotNetObject.resource, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.created)) {
        jsFetchResource.created = dotNetObject.created;
    }
    if (hasValue(dotNetObject.size)) {
        jsFetchResource.size = dotNetObject.size;
    }
    
    jsObjectRefs[dotNetObject.id] = jsFetchResource;
    arcGisObjectRefs[dotNetObject.id] = jsFetchResource;
    
    return jsFetchResource;
}


export async function buildDotNetFetchResourceGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFetchResource: any = {};
    
    if (hasValue(jsObject.resource)) {
        let { buildDotNetPortalItemResource } = await import('./portalItemResource');
        dotNetFetchResource.resource = await buildDotNetPortalItemResource(jsObject.resource, layerId, viewId);
    }
    
    if (hasValue(jsObject.created)) {
        dotNetFetchResource.created = jsObject.created;
    }
    
    if (hasValue(jsObject.size)) {
        dotNetFetchResource.size = jsObject.size;
    }
    

    return dotNetFetchResource;
}

