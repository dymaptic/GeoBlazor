// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, sanitize, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetDomainProperties } from './domainProperties';
export async function buildJsDomainPropertiesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }
    
    switch (dotNetObject.type) {
        case 'any':
            if (!hasValue(dotNetObject)) {
                return null;
            }

            let jsDomainProperties: any = {};

            if (hasValue(dotNetObject.name)) {
                jsDomainProperties.name = dotNetObject.name;
            }
    
            let jsObjectRef = DotNet.createJSObjectReference(jsDomainProperties);
            jsObjectRefs[dotNetObject.id] = jsObjectRef;
            arcGisObjectRefs[dotNetObject.id] = jsDomainProperties;
    
            return jsDomainProperties;

        default: 
            return sanitize(dotNetObject);
    }
}     

export async function buildDotNetDomainPropertiesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    switch (jsObject.type) {
        case 'any': 
            let dotNetDomainProperties: any = {};
            if (hasValue(jsObject.name)) {
                dotNetDomainProperties.name = removeCircularReferences(jsObject.name);
            }
    
            if (hasValue(jsObject.type)) {
                dotNetDomainProperties.type = removeCircularReferences(jsObject.type);
            }
    

            return dotNetDomainProperties;

        default: 
            return jsObject;
    }
}     

