// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import GraphicsLayer from '@arcgis/core/layers/GraphicsLayer';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class GraphicsLayerGenerated implements IPropertyWrapper {
    public layer: GraphicsLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: GraphicsLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    async add(graphic: any): Promise<void> {
        this.layer.add(graphic);
    }

    async addMany(graphics: any): Promise<void> {
        this.layer.addMany(graphics);
    }

    async createLayerView(view: any,
        options: any): Promise<any> {
        return await this.layer.createLayerView(view,
            options);
    }

    async fetchAttributionData(): Promise<any> {
        return await this.layer.fetchAttributionData();
    }

    async remove(graphic: any): Promise<void> {
        this.layer.remove(graphic);
    }

    async removeAll(): Promise<void> {
        this.layer.removeAll();
    }

    async removeMany(graphics: any): Promise<void> {
        this.layer.removeMany(graphics);
    }

    // region properties
    
    async getVisibilityTimeExtent(): Promise<any> {
        if (!hasValue(this.layer.visibilityTimeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.visibilityTimeExtent);
    }
    
    async setVisibilityTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.visibilityTimeExtent = await  buildJsTimeExtent(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}


export async function buildJsGraphicsLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.visibilityTimeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.arcGISLayerId)) {
        properties.id = dotNetObject.arcGISLayerId;
    }
    if (hasValue(dotNetObject.blendMode)) {
        properties.blendMode = dotNetObject.blendMode;
    }
    if (hasValue(dotNetObject.effect)) {
        properties.effect = dotNetObject.effect;
    }
    if (hasValue(dotNetObject.elevationInfo)) {
        const { id, dotNetComponentReference, ...sanitizedElevationInfo } = dotNetObject.elevationInfo;
        properties.elevationInfo = sanitizedElevationInfo;
    }
    if (hasValue(dotNetObject.fullExtent)) {
        const { id, dotNetComponentReference, ...sanitizedFullExtent } = dotNetObject.fullExtent;
        properties.fullExtent = sanitizedFullExtent;
    }
    if (hasValue(dotNetObject.graphics)) {
        const { id, dotNetComponentReference, ...sanitizedGraphics } = dotNetObject.graphics;
        properties.graphics = sanitizedGraphics;
    }
    if (hasValue(dotNetObject.listMode)) {
        properties.listMode = dotNetObject.listMode;
    }
    if (hasValue(dotNetObject.maxScale)) {
        properties.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.minScale)) {
        properties.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.opacity)) {
        properties.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.persistenceEnabled)) {
        properties.persistenceEnabled = dotNetObject.persistenceEnabled;
    }
    if (hasValue(dotNetObject.screenSizePerspectiveEnabled)) {
        properties.screenSizePerspectiveEnabled = dotNetObject.screenSizePerspectiveEnabled;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    let jsGraphicsLayer = new GraphicsLayer(properties);
    jsGraphicsLayer.on('layerview-create', async (evt: any) => {
        let { buildDotNetLayerViewCreateEvent } = await import('./layerViewCreateEvent');
        let dnEvent = await buildDotNetLayerViewCreateEvent(evt);
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreate', dnEvent);
    });
    
    jsGraphicsLayer.on('layerview-create-error', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreateError', evt);
    });
    
    jsGraphicsLayer.on('layerview-destroy', async (evt: any) => {
        let { buildDotNetLayerViewDestroyEvent } = await import('./layerViewDestroyEvent');
        let dnEvent = await buildDotNetLayerViewDestroyEvent(evt);
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsDestroy', dnEvent);
    });
    

    let { default: GraphicsLayerWrapper } = await import('./graphicsLayer');
    let graphicsLayerWrapper = new GraphicsLayerWrapper(jsGraphicsLayer);
    graphicsLayerWrapper.geoBlazorId = dotNetObject.id;
    graphicsLayerWrapper.viewId = viewId;
    graphicsLayerWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(graphicsLayerWrapper);
    jsObjectRefs[dotNetObject.id] = graphicsLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsGraphicsLayer;
    
    let { buildDotNetGraphicsLayer } = await import('./graphicsLayer');
    let dnInstantiatedObject = await buildDotNetGraphicsLayer(jsGraphicsLayer);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type GraphicsLayer detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for GraphicsLayer', e);
    }
    
    return jsGraphicsLayer;
}


export async function buildDotNetGraphicsLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGraphicsLayer: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.visibilityTimeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetGraphicsLayer.visibilityTimeExtent = buildDotNetTimeExtent(jsObject.visibilityTimeExtent);
    }
    if (hasValue(jsObject.id)) {
        dotNetGraphicsLayer.arcGISLayerId = jsObject.id;
    }
    if (hasValue(jsObject.blendMode)) {
        dotNetGraphicsLayer.blendMode = jsObject.blendMode;
    }
    if (hasValue(jsObject.effect)) {
        dotNetGraphicsLayer.effect = jsObject.effect;
    }
    if (hasValue(jsObject.elevationInfo)) {
        dotNetGraphicsLayer.elevationInfo = jsObject.elevationInfo;
    }
    if (hasValue(jsObject.fullExtent)) {
        dotNetGraphicsLayer.fullExtent = jsObject.fullExtent;
    }
    if (hasValue(jsObject.listMode)) {
        dotNetGraphicsLayer.listMode = jsObject.listMode;
    }
    if (hasValue(jsObject.loaded)) {
        dotNetGraphicsLayer.loaded = jsObject.loaded;
    }
    if (hasValue(jsObject.maxScale)) {
        dotNetGraphicsLayer.maxScale = jsObject.maxScale;
    }
    if (hasValue(jsObject.minScale)) {
        dotNetGraphicsLayer.minScale = jsObject.minScale;
    }
    if (hasValue(jsObject.opacity)) {
        dotNetGraphicsLayer.opacity = jsObject.opacity;
    }
    if (hasValue(jsObject.persistenceEnabled)) {
        dotNetGraphicsLayer.persistenceEnabled = jsObject.persistenceEnabled;
    }
    if (hasValue(jsObject.screenSizePerspectiveEnabled)) {
        dotNetGraphicsLayer.screenSizePerspectiveEnabled = jsObject.screenSizePerspectiveEnabled;
    }
    if (hasValue(jsObject.title)) {
        dotNetGraphicsLayer.title = jsObject.title;
    }
    if (hasValue(jsObject.type)) {
        dotNetGraphicsLayer.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetGraphicsLayer.id = k;
                break;
            }
        }
    }

    return dotNetGraphicsLayer;
}

