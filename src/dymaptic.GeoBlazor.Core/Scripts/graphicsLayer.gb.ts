// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import GraphicsLayer from '@arcgis/core/layers/GraphicsLayer';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class GraphicsLayerGenerated implements IPropertyWrapper {
    public layer: GraphicsLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: GraphicsLayer) {
        this.layer = layer;
        // set all properties from layer
        for (let prop in layer) {
            if (layer.hasOwnProperty(prop)) {
                this[prop] = layer[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    async add(graphic: any): Promise<void> {
        let { buildJsGraphic } = await import('./graphic');
        let jsGraphic = buildJsGraphic(graphic, this.layerId, this.viewId) as any;
        this.layer.add(jsGraphic);
    }

    async addMany(graphics: any): Promise<void> {
        let { buildJsGraphic } = await import('./graphic');
        let jsGraphics = buildJsGraphic(graphics, this.layerId, this.viewId) as any;
        this.layer.addMany(jsGraphics);
    }

    async createLayerView(view: any,
        options: any): Promise<any> {
        let result = await this.layer.createLayerView(view,
            options);
        let { buildDotNetLayerView } = await import('./layerView');
        return buildDotNetLayerView(result);
    }

    async fetchAttributionData(): Promise<any> {
        return await this.layer.fetchAttributionData();
    }

    async remove(graphic: any): Promise<void> {
        let { buildJsGraphic } = await import('./graphic');
        let jsGraphic = buildJsGraphic(graphic, this.layerId, this.viewId) as any;
        this.layer.remove(jsGraphic);
    }

    async removeAll(): Promise<void> {
        this.layer.removeAll();
    }

    async removeMany(graphics: any): Promise<void> {
        let { buildJsGraphic } = await import('./graphic');
        let jsGraphics = buildJsGraphic(graphics, this.layerId, this.viewId) as any;
        this.layer.removeMany(jsGraphics);
    }

    // region properties
    
    async getElevationInfo(): Promise<any> {
        let { buildDotNetGraphicsLayerElevationInfo } = await import('./graphicsLayerElevationInfo');
        return await buildDotNetGraphicsLayerElevationInfo(this.layer.elevationInfo);
    }
    async setElevationInfo(value: any): Promise<void> {
        let { buildJsGraphicsLayerElevationInfo } = await import('./graphicsLayerElevationInfo');
        this.layer.elevationInfo = await  buildJsGraphicsLayerElevationInfo(value, this.layerId, this.viewId);
    }
    async getGraphics(): Promise<any> {
        let { buildDotNetGraphic } = await import('./graphic');
        return this.layer.graphics.map(i => buildDotNetGraphic(i, this.layerId, this.viewId));
    }
    
    async setGraphics(value: any): Promise<void> {
        let { buildJsGraphic } = await import('./graphic');
        this.layer.graphics = value.map(i => buildJsGraphic(i, this.layerId, this.viewId));
    }
    
    async getVisibilityTimeExtent(): Promise<any> {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.visibilityTimeExtent);
    }
    async setVisibilityTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.visibilityTimeExtent = await  buildJsTimeExtent(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}

export async function buildJsGraphicsLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsGraphicsLayer = new GraphicsLayer();
    if (hasValue(dotNetObject.elevationInfo)) {
        let { buildJsGraphicsLayerElevationInfo } = await import('./graphicsLayerElevationInfo');
        jsGraphicsLayer.elevationInfo = await buildJsGraphicsLayerElevationInfo(dotNetObject.elevationInfo, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.fullExtent)) {
        jsGraphicsLayer.fullExtent = dotNetObject.extent;
    }
    if (hasValue(dotNetObject.graphics)) {
        let { buildJsGraphic } = await import('./jsBuilder');
        jsGraphicsLayer.graphics = dotNetObject.graphics.map(i => buildJsGraphic(i, layerId, viewId)) as any;
    }
    if (hasValue(dotNetObject.visibilityTimeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        jsGraphicsLayer.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.arcGISLayerId)) {
        jsGraphicsLayer.id = dotNetObject.arcGISLayerId;
    }
    if (hasValue(dotNetObject.blendMode)) {
        jsGraphicsLayer.blendMode = dotNetObject.blendMode;
    }
    if (hasValue(dotNetObject.effect)) {
        jsGraphicsLayer.effect = dotNetObject.effect;
    }
    if (hasValue(dotNetObject.listMode)) {
        jsGraphicsLayer.listMode = dotNetObject.listMode;
    }
    if (hasValue(dotNetObject.maxScale)) {
        jsGraphicsLayer.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.minScale)) {
        jsGraphicsLayer.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.opacity)) {
        jsGraphicsLayer.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.persistenceEnabled)) {
        jsGraphicsLayer.persistenceEnabled = dotNetObject.persistenceEnabled;
    }
    if (hasValue(dotNetObject.screenSizePerspectiveEnabled)) {
        jsGraphicsLayer.screenSizePerspectiveEnabled = dotNetObject.screenSizePerspectiveEnabled;
    }
    if (hasValue(dotNetObject.title)) {
        jsGraphicsLayer.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.type)) {
        jsGraphicsLayer.type = dotNetObject.type;
    }
    let { default: GraphicsLayerWrapper } = await import('./graphicsLayer');
    let graphicsLayerWrapper = new GraphicsLayerWrapper(jsGraphicsLayer);
    graphicsLayerWrapper.geoBlazorId = dotNetObject.id;
    graphicsLayerWrapper.viewId = viewId;
    graphicsLayerWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(graphicsLayerWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = graphicsLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsGraphicsLayer;
    
    return jsGraphicsLayer;
}

export async function buildDotNetGraphicsLayerGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGraphicsLayer: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.elevationInfo)) {
            let { buildDotNetGraphicsLayerElevationInfo } = await import('./graphicsLayerElevationInfo');
            dotNetGraphicsLayer.elevationInfo = await buildDotNetGraphicsLayerElevationInfo(jsObject.elevationInfo);
        }
        if (hasValue(jsObject.graphics)) {
            let { buildDotNetGraphic } = await import('./dotNetBuilder');
            dotNetGraphicsLayer.graphics = jsObject.graphics.map(i => buildDotNetGraphic(i, layerId, viewId));
        }
        if (hasValue(jsObject.visibilityTimeExtent)) {
            let { buildDotNetTimeExtent } = await import('./dotNetBuilder');
            dotNetGraphicsLayer.visibilityTimeExtent = buildDotNetTimeExtent(jsObject.visibilityTimeExtent);
        }
        dotNetGraphicsLayer.arcGISLayerId = jsObject.id;
        dotNetGraphicsLayer.blendMode = jsObject.blendMode;
        dotNetGraphicsLayer.effect = jsObject.effect;
        dotNetGraphicsLayer.fullExtent = jsObject.fullExtent;
        dotNetGraphicsLayer.listMode = jsObject.listMode;
        dotNetGraphicsLayer.loaded = jsObject.loaded;
        dotNetGraphicsLayer.maxScale = jsObject.maxScale;
        dotNetGraphicsLayer.minScale = jsObject.minScale;
        dotNetGraphicsLayer.opacity = jsObject.opacity;
        dotNetGraphicsLayer.persistenceEnabled = jsObject.persistenceEnabled;
        dotNetGraphicsLayer.screenSizePerspectiveEnabled = jsObject.screenSizePerspectiveEnabled;
        dotNetGraphicsLayer.title = jsObject.title;
        dotNetGraphicsLayer.type = jsObject.type;

    return dotNetGraphicsLayer;
}

