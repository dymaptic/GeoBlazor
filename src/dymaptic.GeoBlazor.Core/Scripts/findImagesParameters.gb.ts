import {buildDotNetFindImagesParameters} from './findImagesParameters';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import FindImagesParameters from '@arcgis/core/rest/support/FindImagesParameters';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsFindImagesParametersGenerated(dotNetObject: any): Promise<any> {
    let jsFindImagesParameters = new FindImagesParameters();
    if (hasValue(dotNetObject.fromGeometry)) {
        let {buildJsPoint} = await import('./point');
        jsFindImagesParameters.fromGeometry = buildJsPoint(dotNetObject.fromGeometry) as any;
    }
    if (hasValue(dotNetObject.toGeometry)) {
        let {buildJsPoint} = await import('./point');
        jsFindImagesParameters.toGeometry = buildJsPoint(dotNetObject.toGeometry) as any;
    }

    if (hasValue(dotNetObject.maxCount)) {
        jsFindImagesParameters.maxCount = dotNetObject.maxCount;
    }
    if (hasValue(dotNetObject.objectIds)) {
        jsFindImagesParameters.objectIds = dotNetObject.objectIds;
    }
    if (hasValue(dotNetObject.where)) {
        jsFindImagesParameters.where = dotNetObject.where;
    }

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsFindImagesParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFindImagesParameters;

    let dnInstantiatedObject = await buildDotNetFindImagesParameters(jsFindImagesParameters);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FindImagesParameters', e);
    }

    return jsFindImagesParameters;
}

export async function buildDotNetFindImagesParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetFindImagesParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.fromGeometry)) {
        let {buildDotNetPoint} = await import('./point');
        dotNetFindImagesParameters.fromGeometry = buildDotNetPoint(jsObject.fromGeometry);
    }
    if (hasValue(jsObject.toGeometry)) {
        let {buildDotNetPoint} = await import('./point');
        dotNetFindImagesParameters.toGeometry = buildDotNetPoint(jsObject.toGeometry);
    }
    if (hasValue(jsObject.maxCount)) {
        dotNetFindImagesParameters.maxCount = jsObject.maxCount;
    }
    if (hasValue(jsObject.objectIds)) {
        dotNetFindImagesParameters.objectIds = jsObject.objectIds;
    }
    if (hasValue(jsObject.where)) {
        dotNetFindImagesParameters.where = jsObject.where;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFindImagesParameters.id = k;
                break;
            }
        }
    }

    return dotNetFindImagesParameters;
}

