// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import FindImagesParameters from '@arcgis/core/rest/support/FindImagesParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetFindImagesParameters } from './findImagesParameters';

export async function buildJsFindImagesParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.fromGeometry)) {
        let { buildJsPoint } = await import('./point');
        properties.fromGeometry = buildJsPoint(dotNetObject.fromGeometry) as any;
    }
    if (hasValue(dotNetObject.toGeometry)) {
        let { buildJsPoint } = await import('./point');
        properties.toGeometry = buildJsPoint(dotNetObject.toGeometry) as any;
    }

    if (hasValue(dotNetObject.maxCount)) {
        properties.maxCount = dotNetObject.maxCount;
    }
    if (hasValue(dotNetObject.objectIds)) {
        properties.objectIds = dotNetObject.objectIds;
    }
    if (hasValue(dotNetObject.where)) {
        properties.where = dotNetObject.where;
    }
    let jsFindImagesParameters = new FindImagesParameters(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFindImagesParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFindImagesParameters;
    
    return jsFindImagesParameters;
}


export async function buildDotNetFindImagesParametersGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsFindImagesParameters } = await import('./findImagesParameters');
        jsComponentRef = await buildJsFindImagesParameters(jsObject, layerId, viewId);
    }
    
    let dotNetFindImagesParameters: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.fromGeometry)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetFindImagesParameters.fromGeometry = buildDotNetPoint(jsObject.fromGeometry);
    }
    if (hasValue(jsObject.toGeometry)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetFindImagesParameters.toGeometry = buildDotNetPoint(jsObject.toGeometry);
    }
    if (hasValue(jsObject.maxCount)) {
        dotNetFindImagesParameters.maxCount = jsObject.maxCount;
    }
    if (hasValue(jsObject.objectIds)) {
        dotNetFindImagesParameters.objectIds = jsObject.objectIds;
    }
    if (hasValue(jsObject.where)) {
        dotNetFindImagesParameters.where = jsObject.where;
    }

    return dotNetFindImagesParameters;
}

