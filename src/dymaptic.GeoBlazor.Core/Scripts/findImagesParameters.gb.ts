// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import FindImagesParameters from '@arcgis/core/rest/support/FindImagesParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetFindImagesParameters } from './findImagesParameters';

export async function buildJsFindImagesParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.fromGeometry)) {
        const { id, dotNetComponentReference, ...sanitizedFromGeometry } = dotNetObject.fromGeometry;
        properties.fromGeometry = sanitizedFromGeometry;
    }
    if (hasValue(dotNetObject.maxCount)) {
        properties.maxCount = dotNetObject.maxCount;
    }
    if (hasValue(dotNetObject.objectIds)) {
        properties.objectIds = dotNetObject.objectIds;
    }
    if (hasValue(dotNetObject.toGeometry)) {
        const { id, dotNetComponentReference, ...sanitizedToGeometry } = dotNetObject.toGeometry;
        properties.toGeometry = sanitizedToGeometry;
    }
    if (hasValue(dotNetObject.where)) {
        properties.where = dotNetObject.where;
    }
    let jsFindImagesParameters = new FindImagesParameters(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFindImagesParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFindImagesParameters;
    
    let { buildDotNetFindImagesParameters } = await import('./findImagesParameters');
    let dnInstantiatedObject = await buildDotNetFindImagesParameters(jsFindImagesParameters);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type FindImagesParameters detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FindImagesParameters', e);
    }
    
    return jsFindImagesParameters;
}


export async function buildDotNetFindImagesParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFindImagesParameters: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.fromGeometry)) {
        dotNetFindImagesParameters.fromGeometry = jsObject.fromGeometry;
    }
    if (hasValue(jsObject.maxCount)) {
        dotNetFindImagesParameters.maxCount = jsObject.maxCount;
    }
    if (hasValue(jsObject.objectIds)) {
        dotNetFindImagesParameters.objectIds = jsObject.objectIds;
    }
    if (hasValue(jsObject.toGeometry)) {
        dotNetFindImagesParameters.toGeometry = jsObject.toGeometry;
    }
    if (hasValue(jsObject.where)) {
        dotNetFindImagesParameters.where = jsObject.where;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFindImagesParameters.id = k;
                break;
            }
        }
    }

    return dotNetFindImagesParameters;
}

