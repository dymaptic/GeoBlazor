import {buildDotNetSceneViewPerformanceInfo} from './sceneViewPerformanceInfo';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import SceneViewPerformanceInfo from '@arcgis/core/views/3d/support/SceneViewPerformanceInfo';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsSceneViewPerformanceInfoGenerated(dotNetObject: any): Promise<any> {
    let jsSceneViewPerformanceInfo = new SceneViewPerformanceInfo();
    if (hasValue(dotNetObject.layerPerformanceInfos)) {
        let {buildJsLayerPerformanceInfo} = await import('./layerPerformanceInfo');
        jsSceneViewPerformanceInfo.layerPerformanceInfos = await Promise.all(dotNetObject.layerPerformanceInfos.map(async i => await buildJsLayerPerformanceInfo(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.edgesMemory)) {
        jsSceneViewPerformanceInfo.edgesMemory = dotNetObject.edgesMemory;
    }
    if (hasValue(dotNetObject.quality)) {
        jsSceneViewPerformanceInfo.quality = dotNetObject.quality;
    }
    if (hasValue(dotNetObject.terrainMemory)) {
        jsSceneViewPerformanceInfo.terrainMemory = dotNetObject.terrainMemory;
    }
    if (hasValue(dotNetObject.totalMemory)) {
        jsSceneViewPerformanceInfo.totalMemory = dotNetObject.totalMemory;
    }
    if (hasValue(dotNetObject.usedMemory)) {
        jsSceneViewPerformanceInfo.usedMemory = dotNetObject.usedMemory;
    }

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsSceneViewPerformanceInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSceneViewPerformanceInfo;

    let dnInstantiatedObject = await buildDotNetSceneViewPerformanceInfo(jsSceneViewPerformanceInfo);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SceneViewPerformanceInfo', e);
    }

    return jsSceneViewPerformanceInfo;
}

export async function buildDotNetSceneViewPerformanceInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetSceneViewPerformanceInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.layerPerformanceInfos)) {
        let {buildDotNetLayerPerformanceInfo} = await import('./layerPerformanceInfo');
        dotNetSceneViewPerformanceInfo.layerPerformanceInfos = await Promise.all(jsObject.layerPerformanceInfos.map(async i => await buildDotNetLayerPerformanceInfo(i)));
    }
    if (hasValue(jsObject.edgesMemory)) {
        dotNetSceneViewPerformanceInfo.edgesMemory = jsObject.edgesMemory;
    }
    if (hasValue(jsObject.quality)) {
        dotNetSceneViewPerformanceInfo.quality = jsObject.quality;
    }
    if (hasValue(jsObject.terrainMemory)) {
        dotNetSceneViewPerformanceInfo.terrainMemory = jsObject.terrainMemory;
    }
    if (hasValue(jsObject.totalMemory)) {
        dotNetSceneViewPerformanceInfo.totalMemory = jsObject.totalMemory;
    }
    if (hasValue(jsObject.usedMemory)) {
        dotNetSceneViewPerformanceInfo.usedMemory = jsObject.usedMemory;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSceneViewPerformanceInfo.id = k;
                break;
            }
        }
    }

    return dotNetSceneViewPerformanceInfo;
}

