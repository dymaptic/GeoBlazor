// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCIMMarkerPlacementPolygonCenter } from './cIMMarkerPlacementPolygonCenter';

export async function buildJsCIMMarkerPlacementPolygonCenterGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCIMMarkerPlacementPolygonCenter: any = {};

    if (hasValue(dotNetObject.clipAtBoundary)) {
        jsCIMMarkerPlacementPolygonCenter.clipAtBoundary = dotNetObject.clipAtBoundary;
    }
    if (hasValue(dotNetObject.method)) {
        jsCIMMarkerPlacementPolygonCenter.method = dotNetObject.method;
    }
    if (hasValue(dotNetObject.offsetX)) {
        jsCIMMarkerPlacementPolygonCenter.offsetX = dotNetObject.offsetX;
    }
    if (hasValue(dotNetObject.offsetY)) {
        jsCIMMarkerPlacementPolygonCenter.offsetY = dotNetObject.offsetY;
    }
    if (hasValue(dotNetObject.placePerPart)) {
        jsCIMMarkerPlacementPolygonCenter.placePerPart = dotNetObject.placePerPart;
    }
    if (hasValue(dotNetObject.primitiveName)) {
        jsCIMMarkerPlacementPolygonCenter.primitiveName = dotNetObject.primitiveName;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCIMMarkerPlacementPolygonCenter);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCIMMarkerPlacementPolygonCenter;
    
    let { buildDotNetCIMMarkerPlacementPolygonCenter } = await import('./cIMMarkerPlacementPolygonCenter');
    let dnInstantiatedObject = await buildDotNetCIMMarkerPlacementPolygonCenter(jsCIMMarkerPlacementPolygonCenter);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type CIMMarkerPlacementPolygonCenter detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CIMMarkerPlacementPolygonCenter', e);
    }
    
    return jsCIMMarkerPlacementPolygonCenter;
}


export async function buildDotNetCIMMarkerPlacementPolygonCenterGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCIMMarkerPlacementPolygonCenter: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.clipAtBoundary)) {
        dotNetCIMMarkerPlacementPolygonCenter.clipAtBoundary = jsObject.clipAtBoundary;
    }
    if (hasValue(jsObject.method)) {
        dotNetCIMMarkerPlacementPolygonCenter.method = jsObject.method;
    }
    if (hasValue(jsObject.offsetX)) {
        dotNetCIMMarkerPlacementPolygonCenter.offsetX = jsObject.offsetX;
    }
    if (hasValue(jsObject.offsetY)) {
        dotNetCIMMarkerPlacementPolygonCenter.offsetY = jsObject.offsetY;
    }
    if (hasValue(jsObject.placePerPart)) {
        dotNetCIMMarkerPlacementPolygonCenter.placePerPart = jsObject.placePerPart;
    }
    if (hasValue(jsObject.primitiveName)) {
        dotNetCIMMarkerPlacementPolygonCenter.primitiveName = jsObject.primitiveName;
    }
    if (hasValue(jsObject.type)) {
        dotNetCIMMarkerPlacementPolygonCenter.type = jsObject.type;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCIMMarkerPlacementPolygonCenter.id = geoBlazorId;
    }

    return dotNetCIMMarkerPlacementPolygonCenter;
}

