// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ValuePickerLabel from '@arcgis/core/widgets/ValuePicker/ValuePickerLabel';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetValuePickerLabel } from './valuePickerLabel';

export async function buildJsValuePickerLabelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsValuePickerLabel: any = {};
    if (hasValue(dotNetObject.items) && dotNetObject.items.length > 0) {
        let { buildJsLabelitem } = await import('./labelitem');
        jsValuePickerLabel.items = await Promise.all(dotNetObject.items.map(async i => await buildJsLabelitem(i, layerId, viewId))) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsValuePickerLabel);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsValuePickerLabel;
    
    return jsValuePickerLabel;
}


export async function buildDotNetValuePickerLabelGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetValuePickerLabel: any = {};
    
    if (hasValue(jsObject.items)) {
        let { buildDotNetLabelitem } = await import('./labelitem');
        dotNetValuePickerLabel.items = await Promise.all(jsObject.items.map(async i => await buildDotNetLabelitem(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.type)) {
        dotNetValuePickerLabel.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetValuePickerLabel.id = geoBlazorId;
    }

    return dotNetValuePickerLabel;
}

