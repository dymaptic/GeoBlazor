// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import AreaMeasurement3DViewModelMeasurementValue = __esri.AreaMeasurement3DViewModelMeasurementValue;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class AreaMeasurement3DViewModelMeasurementValueGenerated implements IPropertyWrapper {
    public component: AreaMeasurement3DViewModelMeasurementValue;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: AreaMeasurement3DViewModelMeasurementValue) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsAreaMeasurement3DViewModelMeasurementValueGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsAreaMeasurement3DViewModelMeasurementValue: any = {}

    if (hasValue(dotNetObject.state)) {
        jsAreaMeasurement3DViewModelMeasurementValue.state = dotNetObject.state;
    }
    if (hasValue(dotNetObject.text)) {
        jsAreaMeasurement3DViewModelMeasurementValue.text = dotNetObject.text;
    }
    let { default: AreaMeasurement3DViewModelMeasurementValueWrapper } = await import('./areaMeasurement3DViewModelMeasurementValue');
    let areaMeasurement3DViewModelMeasurementValueWrapper = new AreaMeasurement3DViewModelMeasurementValueWrapper(jsAreaMeasurement3DViewModelMeasurementValue);
    areaMeasurement3DViewModelMeasurementValueWrapper.geoBlazorId = dotNetObject.id;
    areaMeasurement3DViewModelMeasurementValueWrapper.viewId = viewId;
    areaMeasurement3DViewModelMeasurementValueWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(areaMeasurement3DViewModelMeasurementValueWrapper);
    jsObjectRefs[dotNetObject.id] = areaMeasurement3DViewModelMeasurementValueWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsAreaMeasurement3DViewModelMeasurementValue;
    
    let { buildDotNetAreaMeasurement3DViewModelMeasurementValue } = await import('./areaMeasurement3DViewModelMeasurementValue');
    let dnInstantiatedObject = await buildDotNetAreaMeasurement3DViewModelMeasurementValue(jsAreaMeasurement3DViewModelMeasurementValue, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for AreaMeasurement3DViewModelMeasurementValue', e);
    }
    
    return jsAreaMeasurement3DViewModelMeasurementValue;
}

export async function buildDotNetAreaMeasurement3DViewModelMeasurementValueGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAreaMeasurement3DViewModelMeasurementValue: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.state)) {
            dotNetAreaMeasurement3DViewModelMeasurementValue.state = jsObject.state;
        }
        if (hasValue(jsObject.text)) {
            dotNetAreaMeasurement3DViewModelMeasurementValue.text = jsObject.text;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetAreaMeasurement3DViewModelMeasurementValue.id = k;
                break;
            }
        }
    }

    return dotNetAreaMeasurement3DViewModelMeasurementValue;
}

