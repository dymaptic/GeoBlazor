// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetPopupTriggerActionEvent } from './popupTriggerActionEvent';

export async function buildJsPopupTriggerActionEventGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPopupTriggerActionEvent: any = {};
    if (hasValue(dotNetObject.action)) {
        let { buildJsActionBase } = await import('./actionBase');
        jsPopupTriggerActionEvent.action = await buildJsActionBase(dotNetObject.action, layerId, viewId) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsPopupTriggerActionEvent);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPopupTriggerActionEvent;
    
    return jsPopupTriggerActionEvent;
}


export async function buildDotNetPopupTriggerActionEventGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsPopupTriggerActionEvent } = await import('./popupTriggerActionEvent');
        jsComponentRef = await buildJsPopupTriggerActionEvent(jsObject, layerId, viewId);
    }
    
    let dotNetPopupTriggerActionEvent: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.action)) {
        let { buildDotNetActionBase } = await import('./actionBase');
        dotNetPopupTriggerActionEvent.action = await buildDotNetActionBase(jsObject.action);
    }

    return dotNetPopupTriggerActionEvent;
}

