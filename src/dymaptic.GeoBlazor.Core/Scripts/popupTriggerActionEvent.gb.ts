// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetPopupTriggerActionEvent } from './popupTriggerActionEvent';

export async function buildJsPopupTriggerActionEventGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPopupTriggerActionEvent: any = {};
    if (hasValue(dotNetObject.action)) {
        let { buildJsActionBase } = await import('./actionBase');
        jsPopupTriggerActionEvent.action = await buildJsActionBase(dotNetObject.action, layerId, viewId) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsPopupTriggerActionEvent);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPopupTriggerActionEvent;
    
    let { buildDotNetPopupTriggerActionEvent } = await import('./popupTriggerActionEvent');
    let dnInstantiatedObject = await buildDotNetPopupTriggerActionEvent(jsPopupTriggerActionEvent);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type PopupTriggerActionEvent detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PopupTriggerActionEvent', e);
    }
    
    return jsPopupTriggerActionEvent;
}


export async function buildDotNetPopupTriggerActionEventGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPopupTriggerActionEvent: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.action)) {
        let { buildDotNetActionBase } = await import('./actionBase');
        dotNetPopupTriggerActionEvent.action = await buildDotNetActionBase(jsObject.action);
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPopupTriggerActionEvent.id = k;
                break;
            }
        }
    }

    return dotNetPopupTriggerActionEvent;
}

