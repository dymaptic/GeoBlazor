// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import DirectLineMeasurement3DViewModelMeasurement = __esri.DirectLineMeasurement3DViewModelMeasurement;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class DirectLineMeasurement3DViewModelMeasurementGenerated implements IPropertyWrapper {
    public component: DirectLineMeasurement3DViewModelMeasurement;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: DirectLineMeasurement3DViewModelMeasurement) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getDirectDistance(): Promise<any> {
        if (!hasValue(this.component.directDistance)) {
            return null;
        }
        
        let { buildDotNetDirectLineMeasurement3DViewModelMeasurementValue } = await import('./directLineMeasurement3DViewModelMeasurementValue');
        return await buildDotNetDirectLineMeasurement3DViewModelMeasurementValue(this.component.directDistance, this.layerId, this.viewId);
    }
    async setDirectDistance(value: any): Promise<void> {
        let { buildJsDirectLineMeasurement3DViewModelMeasurementValue } = await import('./directLineMeasurement3DViewModelMeasurementValue');
        this.component.directDistance = await  buildJsDirectLineMeasurement3DViewModelMeasurementValue(value, this.layerId, this.viewId);
    }
    async getHorizontalDistance(): Promise<any> {
        if (!hasValue(this.component.horizontalDistance)) {
            return null;
        }
        
        let { buildDotNetDirectLineMeasurement3DViewModelMeasurementValue } = await import('./directLineMeasurement3DViewModelMeasurementValue');
        return await buildDotNetDirectLineMeasurement3DViewModelMeasurementValue(this.component.horizontalDistance, this.layerId, this.viewId);
    }
    async setHorizontalDistance(value: any): Promise<void> {
        let { buildJsDirectLineMeasurement3DViewModelMeasurementValue } = await import('./directLineMeasurement3DViewModelMeasurementValue');
        this.component.horizontalDistance = await  buildJsDirectLineMeasurement3DViewModelMeasurementValue(value, this.layerId, this.viewId);
    }
    async getVerticalDistance(): Promise<any> {
        if (!hasValue(this.component.verticalDistance)) {
            return null;
        }
        
        let { buildDotNetDirectLineMeasurement3DViewModelMeasurementValue } = await import('./directLineMeasurement3DViewModelMeasurementValue');
        return await buildDotNetDirectLineMeasurement3DViewModelMeasurementValue(this.component.verticalDistance, this.layerId, this.viewId);
    }
    async setVerticalDistance(value: any): Promise<void> {
        let { buildJsDirectLineMeasurement3DViewModelMeasurementValue } = await import('./directLineMeasurement3DViewModelMeasurementValue');
        this.component.verticalDistance = await  buildJsDirectLineMeasurement3DViewModelMeasurementValue(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsDirectLineMeasurement3DViewModelMeasurementGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsDirectLineMeasurement3DViewModelMeasurement: any = {}
    if (hasValue(dotNetObject.directDistance)) {
        let { buildJsDirectLineMeasurement3DViewModelMeasurementValue } = await import('./directLineMeasurement3DViewModelMeasurementValue');
        jsDirectLineMeasurement3DViewModelMeasurement.directDistance = await buildJsDirectLineMeasurement3DViewModelMeasurementValue(dotNetObject.directDistance, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.horizontalDistance)) {
        let { buildJsDirectLineMeasurement3DViewModelMeasurementValue } = await import('./directLineMeasurement3DViewModelMeasurementValue');
        jsDirectLineMeasurement3DViewModelMeasurement.horizontalDistance = await buildJsDirectLineMeasurement3DViewModelMeasurementValue(dotNetObject.horizontalDistance, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.verticalDistance)) {
        let { buildJsDirectLineMeasurement3DViewModelMeasurementValue } = await import('./directLineMeasurement3DViewModelMeasurementValue');
        jsDirectLineMeasurement3DViewModelMeasurement.verticalDistance = await buildJsDirectLineMeasurement3DViewModelMeasurementValue(dotNetObject.verticalDistance, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.mode)) {
        jsDirectLineMeasurement3DViewModelMeasurement.mode = dotNetObject.mode;
    }
    let { default: DirectLineMeasurement3DViewModelMeasurementWrapper } = await import('./directLineMeasurement3DViewModelMeasurement');
    let directLineMeasurement3DViewModelMeasurementWrapper = new DirectLineMeasurement3DViewModelMeasurementWrapper(jsDirectLineMeasurement3DViewModelMeasurement);
    directLineMeasurement3DViewModelMeasurementWrapper.geoBlazorId = dotNetObject.id;
    directLineMeasurement3DViewModelMeasurementWrapper.viewId = viewId;
    directLineMeasurement3DViewModelMeasurementWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(directLineMeasurement3DViewModelMeasurementWrapper);
    jsObjectRefs[dotNetObject.id] = directLineMeasurement3DViewModelMeasurementWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsDirectLineMeasurement3DViewModelMeasurement;
    
    let { buildDotNetDirectLineMeasurement3DViewModelMeasurement } = await import('./directLineMeasurement3DViewModelMeasurement');
    let dnInstantiatedObject = await buildDotNetDirectLineMeasurement3DViewModelMeasurement(jsDirectLineMeasurement3DViewModelMeasurement, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DirectLineMeasurement3DViewModelMeasurement', e);
    }
    
    return jsDirectLineMeasurement3DViewModelMeasurement;
}

export async function buildDotNetDirectLineMeasurement3DViewModelMeasurementGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDirectLineMeasurement3DViewModelMeasurement: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.directDistance)) {
            let { buildDotNetDirectLineMeasurement3DViewModelMeasurementValue } = await import('./directLineMeasurement3DViewModelMeasurementValue');
            dotNetDirectLineMeasurement3DViewModelMeasurement.directDistance = await buildDotNetDirectLineMeasurement3DViewModelMeasurementValue(jsObject.directDistance, layerId, viewId);
        }
        if (hasValue(jsObject.horizontalDistance)) {
            let { buildDotNetDirectLineMeasurement3DViewModelMeasurementValue } = await import('./directLineMeasurement3DViewModelMeasurementValue');
            dotNetDirectLineMeasurement3DViewModelMeasurement.horizontalDistance = await buildDotNetDirectLineMeasurement3DViewModelMeasurementValue(jsObject.horizontalDistance, layerId, viewId);
        }
        if (hasValue(jsObject.verticalDistance)) {
            let { buildDotNetDirectLineMeasurement3DViewModelMeasurementValue } = await import('./directLineMeasurement3DViewModelMeasurementValue');
            dotNetDirectLineMeasurement3DViewModelMeasurement.verticalDistance = await buildDotNetDirectLineMeasurement3DViewModelMeasurementValue(jsObject.verticalDistance, layerId, viewId);
        }
        if (hasValue(jsObject.mode)) {
            dotNetDirectLineMeasurement3DViewModelMeasurement.mode = jsObject.mode;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetDirectLineMeasurement3DViewModelMeasurement.id = k;
                break;
            }
        }
    }

    return dotNetDirectLineMeasurement3DViewModelMeasurement;
}

