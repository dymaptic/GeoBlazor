// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetDirectLineMeasurement3DViewModelMeasurement } from './directLineMeasurement3DViewModelMeasurement';

export async function buildJsDirectLineMeasurement3DViewModelMeasurementGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsDirectLineMeasurement3DViewModelMeasurement: any = {};
    if (hasValue(dotNetObject.directDistance)) {
        let { buildJsDirectLineMeasurement3DViewModelMeasurementValue } = await import('./directLineMeasurement3DViewModelMeasurementValue');
        jsDirectLineMeasurement3DViewModelMeasurement.directDistance = await buildJsDirectLineMeasurement3DViewModelMeasurementValue(dotNetObject.directDistance, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.horizontalDistance)) {
        let { buildJsDirectLineMeasurement3DViewModelMeasurementValue } = await import('./directLineMeasurement3DViewModelMeasurementValue');
        jsDirectLineMeasurement3DViewModelMeasurement.horizontalDistance = await buildJsDirectLineMeasurement3DViewModelMeasurementValue(dotNetObject.horizontalDistance, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.verticalDistance)) {
        let { buildJsDirectLineMeasurement3DViewModelMeasurementValue } = await import('./directLineMeasurement3DViewModelMeasurementValue');
        jsDirectLineMeasurement3DViewModelMeasurement.verticalDistance = await buildJsDirectLineMeasurement3DViewModelMeasurementValue(dotNetObject.verticalDistance, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.mode)) {
        jsDirectLineMeasurement3DViewModelMeasurement.mode = dotNetObject.mode;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsDirectLineMeasurement3DViewModelMeasurement);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsDirectLineMeasurement3DViewModelMeasurement;
    
    return jsDirectLineMeasurement3DViewModelMeasurement;
}


export async function buildDotNetDirectLineMeasurement3DViewModelMeasurementGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDirectLineMeasurement3DViewModelMeasurement: any = {};
    
    if (hasValue(jsObject.directDistance)) {
        let { buildDotNetDirectLineMeasurement3DViewModelMeasurementValue } = await import('./directLineMeasurement3DViewModelMeasurementValue');
        dotNetDirectLineMeasurement3DViewModelMeasurement.directDistance = await buildDotNetDirectLineMeasurement3DViewModelMeasurementValue(jsObject.directDistance, layerId, viewId);
    }
    
    if (hasValue(jsObject.horizontalDistance)) {
        let { buildDotNetDirectLineMeasurement3DViewModelMeasurementValue } = await import('./directLineMeasurement3DViewModelMeasurementValue');
        dotNetDirectLineMeasurement3DViewModelMeasurement.horizontalDistance = await buildDotNetDirectLineMeasurement3DViewModelMeasurementValue(jsObject.horizontalDistance, layerId, viewId);
    }
    
    if (hasValue(jsObject.verticalDistance)) {
        let { buildDotNetDirectLineMeasurement3DViewModelMeasurementValue } = await import('./directLineMeasurement3DViewModelMeasurementValue');
        dotNetDirectLineMeasurement3DViewModelMeasurement.verticalDistance = await buildDotNetDirectLineMeasurement3DViewModelMeasurementValue(jsObject.verticalDistance, layerId, viewId);
    }
    
    if (hasValue(jsObject.mode)) {
        dotNetDirectLineMeasurement3DViewModelMeasurement.mode = removeCircularReferences(jsObject.mode);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetDirectLineMeasurement3DViewModelMeasurement.id = geoBlazorId;
    }

    return dotNetDirectLineMeasurement3DViewModelMeasurement;
}

