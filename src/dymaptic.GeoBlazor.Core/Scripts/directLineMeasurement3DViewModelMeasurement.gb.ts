// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetDirectLineMeasurement3DViewModelMeasurement } from './directLineMeasurement3DViewModelMeasurement';

export async function buildJsDirectLineMeasurement3DViewModelMeasurementGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsDirectLineMeasurement3DViewModelMeasurement: any = {};
    if (hasValue(dotNetObject.directDistance)) {
        let { buildJsDirectLineMeasurement3DViewModelMeasurementValue } = await import('./directLineMeasurement3DViewModelMeasurementValue');
        jsDirectLineMeasurement3DViewModelMeasurement.directDistance = await buildJsDirectLineMeasurement3DViewModelMeasurementValue(dotNetObject.directDistance, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.horizontalDistance)) {
        let { buildJsDirectLineMeasurement3DViewModelMeasurementValue } = await import('./directLineMeasurement3DViewModelMeasurementValue');
        jsDirectLineMeasurement3DViewModelMeasurement.horizontalDistance = await buildJsDirectLineMeasurement3DViewModelMeasurementValue(dotNetObject.horizontalDistance, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.verticalDistance)) {
        let { buildJsDirectLineMeasurement3DViewModelMeasurementValue } = await import('./directLineMeasurement3DViewModelMeasurementValue');
        jsDirectLineMeasurement3DViewModelMeasurement.verticalDistance = await buildJsDirectLineMeasurement3DViewModelMeasurementValue(dotNetObject.verticalDistance, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.mode)) {
        jsDirectLineMeasurement3DViewModelMeasurement.mode = dotNetObject.mode;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsDirectLineMeasurement3DViewModelMeasurement);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsDirectLineMeasurement3DViewModelMeasurement;
    
    try {
        let { buildDotNetDirectLineMeasurement3DViewModelMeasurement } = await import('./directLineMeasurement3DViewModelMeasurement');
        let dnInstantiatedObject = await buildDotNetDirectLineMeasurement3DViewModelMeasurement(jsDirectLineMeasurement3DViewModelMeasurement, layerId, viewId);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type DirectLineMeasurement3DViewModelMeasurement detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DirectLineMeasurement3DViewModelMeasurement', e);
    }
    
    return jsDirectLineMeasurement3DViewModelMeasurement;
}


export async function buildDotNetDirectLineMeasurement3DViewModelMeasurementGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDirectLineMeasurement3DViewModelMeasurement: any = {};
    
    if (hasValue(jsObject.directDistance)) {
        let { buildDotNetDirectLineMeasurement3DViewModelMeasurementValue } = await import('./directLineMeasurement3DViewModelMeasurementValue');
        dotNetDirectLineMeasurement3DViewModelMeasurement.directDistance = await buildDotNetDirectLineMeasurement3DViewModelMeasurementValue(jsObject.directDistance, layerId, viewId);
    }
    
    if (hasValue(jsObject.horizontalDistance)) {
        let { buildDotNetDirectLineMeasurement3DViewModelMeasurementValue } = await import('./directLineMeasurement3DViewModelMeasurementValue');
        dotNetDirectLineMeasurement3DViewModelMeasurement.horizontalDistance = await buildDotNetDirectLineMeasurement3DViewModelMeasurementValue(jsObject.horizontalDistance, layerId, viewId);
    }
    
    if (hasValue(jsObject.verticalDistance)) {
        let { buildDotNetDirectLineMeasurement3DViewModelMeasurementValue } = await import('./directLineMeasurement3DViewModelMeasurementValue');
        dotNetDirectLineMeasurement3DViewModelMeasurement.verticalDistance = await buildDotNetDirectLineMeasurement3DViewModelMeasurementValue(jsObject.verticalDistance, layerId, viewId);
    }
    
    if (hasValue(jsObject.mode)) {
        dotNetDirectLineMeasurement3DViewModelMeasurement.mode = jsObject.mode;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetDirectLineMeasurement3DViewModelMeasurement.id = geoBlazorId;
    }

    return dotNetDirectLineMeasurement3DViewModelMeasurement;
}

