// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetWFSFeatureType } from './wFSFeatureType';

export async function buildJsWFSFeatureTypeGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsWFSFeatureType: any = {};
    if (hasValue(dotNetObject.extent)) {
        let { buildJsExtent } = await import('./extent');
        jsWFSFeatureType.extent = buildJsExtent(dotNetObject.extent) as any;
    }

    if (hasValue(dotNetObject.defaultSpatialReference)) {
        jsWFSFeatureType.defaultSpatialReference = dotNetObject.defaultSpatialReference;
    }
    if (hasValue(dotNetObject.description)) {
        jsWFSFeatureType.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.name)) {
        jsWFSFeatureType.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.namespacePrefix)) {
        jsWFSFeatureType.namespacePrefix = dotNetObject.namespacePrefix;
    }
    if (hasValue(dotNetObject.namespaceUri)) {
        jsWFSFeatureType.namespaceUri = dotNetObject.namespaceUri;
    }
    if (hasValue(dotNetObject.supportedSpatialReferences) && dotNetObject.supportedSpatialReferences.length > 0) {
        jsWFSFeatureType.supportedSpatialReferences = dotNetObject.supportedSpatialReferences;
    }
    if (hasValue(dotNetObject.title)) {
        jsWFSFeatureType.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.typeName)) {
        jsWFSFeatureType.typeName = dotNetObject.typeName;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsWFSFeatureType);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsWFSFeatureType;
    
    return jsWFSFeatureType;
}


export async function buildDotNetWFSFeatureTypeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWFSFeatureType: any = {};
    
    if (hasValue(jsObject.extent)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetWFSFeatureType.extent = buildDotNetExtent(jsObject.extent);
    }
    
    if (hasValue(jsObject.defaultSpatialReference)) {
        dotNetWFSFeatureType.defaultSpatialReference = jsObject.defaultSpatialReference;
    }
    
    if (hasValue(jsObject.description)) {
        dotNetWFSFeatureType.description = jsObject.description;
    }
    
    if (hasValue(jsObject.name)) {
        dotNetWFSFeatureType.name = jsObject.name;
    }
    
    if (hasValue(jsObject.namespacePrefix)) {
        dotNetWFSFeatureType.namespacePrefix = jsObject.namespacePrefix;
    }
    
    if (hasValue(jsObject.namespaceUri)) {
        dotNetWFSFeatureType.namespaceUri = jsObject.namespaceUri;
    }
    
    if (hasValue(jsObject.supportedSpatialReferences)) {
        dotNetWFSFeatureType.supportedSpatialReferences = jsObject.supportedSpatialReferences;
    }
    
    if (hasValue(jsObject.title)) {
        dotNetWFSFeatureType.title = jsObject.title;
    }
    
    if (hasValue(jsObject.typeName)) {
        dotNetWFSFeatureType.typeName = jsObject.typeName;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetWFSFeatureType.id = geoBlazorId;
    }

    return dotNetWFSFeatureType;
}

