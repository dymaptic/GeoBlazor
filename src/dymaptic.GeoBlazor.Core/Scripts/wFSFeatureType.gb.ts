// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetWFSFeatureType } from './wFSFeatureType';

export async function buildJsWFSFeatureTypeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsWFSFeatureType: any = {};

    if (hasValue(dotNetObject.defaultSpatialReference)) {
        jsWFSFeatureType.defaultSpatialReference = dotNetObject.defaultSpatialReference;
    }
    if (hasValue(dotNetObject.description)) {
        jsWFSFeatureType.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.extent)) {
        const { id, dotNetComponentReference, ...sanitizedExtent } = dotNetObject.extent;
        jsWFSFeatureType.extent = sanitizedExtent;
    }
    if (hasValue(dotNetObject.name)) {
        jsWFSFeatureType.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.namespacePrefix)) {
        jsWFSFeatureType.namespacePrefix = dotNetObject.namespacePrefix;
    }
    if (hasValue(dotNetObject.namespaceUri)) {
        jsWFSFeatureType.namespaceUri = dotNetObject.namespaceUri;
    }
    if (hasValue(dotNetObject.supportedSpatialReferences)) {
        jsWFSFeatureType.supportedSpatialReferences = dotNetObject.supportedSpatialReferences;
    }
    if (hasValue(dotNetObject.title)) {
        jsWFSFeatureType.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.typeName)) {
        jsWFSFeatureType.typeName = dotNetObject.typeName;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsWFSFeatureType);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsWFSFeatureType;
    
    let { buildDotNetWFSFeatureType } = await import('./wFSFeatureType');
    let dnInstantiatedObject = await buildDotNetWFSFeatureType(jsWFSFeatureType);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type WFSFeatureType detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for WFSFeatureType', e);
    }
    
    return jsWFSFeatureType;
}


export async function buildDotNetWFSFeatureTypeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWFSFeatureType: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.defaultSpatialReference)) {
        dotNetWFSFeatureType.defaultSpatialReference = jsObject.defaultSpatialReference;
    }
    if (hasValue(jsObject.description)) {
        dotNetWFSFeatureType.description = jsObject.description;
    }
    if (hasValue(jsObject.extent)) {
        dotNetWFSFeatureType.extent = jsObject.extent;
    }
    if (hasValue(jsObject.name)) {
        dotNetWFSFeatureType.name = jsObject.name;
    }
    if (hasValue(jsObject.namespacePrefix)) {
        dotNetWFSFeatureType.namespacePrefix = jsObject.namespacePrefix;
    }
    if (hasValue(jsObject.namespaceUri)) {
        dotNetWFSFeatureType.namespaceUri = jsObject.namespaceUri;
    }
    if (hasValue(jsObject.supportedSpatialReferences)) {
        dotNetWFSFeatureType.supportedSpatialReferences = jsObject.supportedSpatialReferences;
    }
    if (hasValue(jsObject.title)) {
        dotNetWFSFeatureType.title = jsObject.title;
    }
    if (hasValue(jsObject.typeName)) {
        dotNetWFSFeatureType.typeName = jsObject.typeName;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetWFSFeatureType.id = k;
                break;
            }
        }
    }

    return dotNetWFSFeatureType;
}

