// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import HomeViewModel from '@arcgis/core/widgets/Home/HomeViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class HomeViewModelGenerated implements IPropertyWrapper {
    public component: HomeViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: HomeViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async cancelGo(): Promise<void> {
        this.component.cancelGo();
    }

    async go(): Promise<void> {
        this.component.go();
    }

    // region properties
    
    async getGoToOverride(): Promise<any> {
        if (!hasValue(this.component.goToOverride)) {
            return null;
        }
        
        let { buildDotNetGoToOverride } = await import('./goToOverride');
        return await buildDotNetGoToOverride(this.component.goToOverride);
    }
    
    async setGoToOverride(value: any): Promise<void> {
        let { buildJsGoToOverride } = await import('./goToOverride');
        this.component.goToOverride =  buildJsGoToOverride(value, this.viewId);
    }
    
    async getViewpoint(): Promise<any> {
        if (!hasValue(this.component.viewpoint)) {
            return null;
        }
        
        let { buildDotNetViewpoint } = await import('./viewpoint');
        return buildDotNetViewpoint(this.component.viewpoint);
    }
    
    async setViewpoint(value: any): Promise<void> {
        let { buildJsViewpoint } = await import('./viewpoint');
        this.component.viewpoint =  buildJsViewpoint(value);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsHomeViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.goToOverride)) {
        let { buildJsGoToOverride } = await import('./goToOverride');
        properties.goToOverride = buildJsGoToOverride(dotNetObject.goToOverride, viewId) as any;
    }
    if (hasValue(dotNetObject.viewpoint)) {
        let { buildJsViewpoint } = await import('./viewpoint');
        properties.viewpoint = buildJsViewpoint(dotNetObject.viewpoint) as any;
    }

    let jsHomeViewModel = new HomeViewModel(properties);
    jsHomeViewModel.on('go', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsGo', evt);
    });
    

    let { default: HomeViewModelWrapper } = await import('./homeViewModel');
    let homeViewModelWrapper = new HomeViewModelWrapper(jsHomeViewModel);
    homeViewModelWrapper.geoBlazorId = dotNetObject.id;
    homeViewModelWrapper.viewId = viewId;
    homeViewModelWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(homeViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = homeViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsHomeViewModel;
    
    let { buildDotNetHomeViewModel } = await import('./homeViewModel');
    let dnInstantiatedObject = await buildDotNetHomeViewModel(jsHomeViewModel);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type HomeViewModel detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for HomeViewModel', e);
    }
    
    return jsHomeViewModel;
}


export async function buildDotNetHomeViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetHomeViewModel: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.goToOverride)) {
        let { buildDotNetGoToOverride } = await import('./goToOverride');
        dotNetHomeViewModel.goToOverride = await buildDotNetGoToOverride(jsObject.goToOverride);
    }
    if (hasValue(jsObject.viewpoint)) {
        let { buildDotNetViewpoint } = await import('./viewpoint');
        dotNetHomeViewModel.viewpoint = buildDotNetViewpoint(jsObject.viewpoint);
    }
    if (hasValue(jsObject.state)) {
        dotNetHomeViewModel.state = jsObject.state;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetHomeViewModel.id = k;
                break;
            }
        }
    }

    return dotNetHomeViewModel;
}

