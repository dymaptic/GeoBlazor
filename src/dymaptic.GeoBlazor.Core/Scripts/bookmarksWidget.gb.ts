// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Bookmarks from '@arcgis/core/widgets/Bookmarks';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, buildJsStreamReference, generateSerializableJson } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class BookmarksWidgetGenerated implements IPropertyWrapper {
    public widget: Bookmarks;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: Bookmarks) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.bookmarks) && dotNetObject.bookmarks.length > 0) {
            let { buildJsBookmark } = await import('./bookmark');
            this.widget.bookmarks = await Promise.all(dotNetObject.bookmarks.map(async i => await buildJsBookmark(i))) as any;
        }
        if (hasValue(dotNetObject.defaultCreateOptions)) {
            let { buildJsBookmarkOptions } = await import('./bookmarkOptions');
            this.widget.defaultCreateOptions = await buildJsBookmarkOptions(dotNetObject.defaultCreateOptions, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.defaultEditOptions)) {
            let { buildJsBookmarkOptions } = await import('./bookmarkOptions');
            this.widget.defaultEditOptions = await buildJsBookmarkOptions(dotNetObject.defaultEditOptions, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.goToOverride)) {
            let { buildJsGoToOverride } = await import('./goToOverride');
            this.widget.goToOverride = buildJsGoToOverride(dotNetObject.goToOverride, this.viewId) as any;
        }
        if (hasValue(dotNetObject.visibleElements)) {
            let { buildJsBookmarksVisibleElements } = await import('./bookmarksVisibleElements');
            this.widget.visibleElements = await buildJsBookmarksVisibleElements(dotNetObject.visibleElements) as any;
        }

        if (hasValue(dotNetObject.disabled)) {
            this.widget.disabled = dotNetObject.disabled;
        }
        if (hasValue(dotNetObject.dragEnabled)) {
            this.widget.dragEnabled = dotNetObject.dragEnabled;
        }
        if (hasValue(dotNetObject.filterPlaceholder)) {
            this.widget.filterPlaceholder = dotNetObject.filterPlaceholder;
        }
        if (hasValue(dotNetObject.filterText)) {
            this.widget.filterText = dotNetObject.filterText;
        }
        if (hasValue(dotNetObject.headingLevel)) {
            this.widget.headingLevel = dotNetObject.headingLevel;
        }
        if (hasValue(dotNetObject.icon)) {
            this.widget.icon = dotNetObject.icon;
        }
        if (hasValue(dotNetObject.label)) {
            this.widget.label = dotNetObject.label;
        }
        if (hasValue(dotNetObject.visible)) {
            this.widget.visible = dotNetObject.visible;
        }
        if (hasValue(dotNetObject.widgetId)) {
            this.widget.id = dotNetObject.widgetId;
        }
    }
    
    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async goTo(bookmark: any): Promise<any> {
        let { buildJsBookmark } = await import('./bookmark');
        let jsBookmark = await buildJsBookmark(bookmark) as any;
        let result = await this.widget.goTo(jsBookmark);
        
        return generateSerializableJson(result);
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async render(): Promise<any> {
        let result = this.widget.render();
        
        return generateSerializableJson(result);
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async when(callback: any,
        errback: any): Promise<any> {
        let result = await this.widget.when(callback,
            errback);
        
        return generateSerializableJson(result);
    }

    // region properties
    
    async getBookmarks(): Promise<any> {
        if (!hasValue(this.widget.bookmarks)) {
            return null;
        }
        
        let { buildDotNetBookmark } = await import('./bookmark');
        return await Promise.all(this.widget.bookmarks!.map(async i => await buildDotNetBookmark(i)));
    }
    
    async setBookmarks(value: any): Promise<void> {
        if (!hasValue(value)) {
            this.widget.bookmarks = [];
        }
        let { buildJsBookmark } = await import('./bookmark');
        this.widget.bookmarks = await Promise.all(value.map(async i => await buildJsBookmark(i))) as any;
    }
    
    async getDefaultCreateOptions(): Promise<any> {
        if (!hasValue(this.widget.defaultCreateOptions)) {
            return null;
        }
        
        let { buildDotNetBookmarkOptions } = await import('./bookmarkOptions');
        return await buildDotNetBookmarkOptions(this.widget.defaultCreateOptions);
    }
    
    async setDefaultCreateOptions(value: any): Promise<void> {
        let { buildJsBookmarkOptions } = await import('./bookmarkOptions');
        this.widget.defaultCreateOptions = await  buildJsBookmarkOptions(value, this.layerId, this.viewId);
    }
    
    async getDefaultEditOptions(): Promise<any> {
        if (!hasValue(this.widget.defaultEditOptions)) {
            return null;
        }
        
        let { buildDotNetBookmarkOptions } = await import('./bookmarkOptions');
        return await buildDotNetBookmarkOptions(this.widget.defaultEditOptions);
    }
    
    async setDefaultEditOptions(value: any): Promise<void> {
        let { buildJsBookmarkOptions } = await import('./bookmarkOptions');
        this.widget.defaultEditOptions = await  buildJsBookmarkOptions(value, this.layerId, this.viewId);
    }
    
    getFilterPlaceholder(): any {
        if (!hasValue(this.widget.filterPlaceholder)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.filterPlaceholder);
    }
    
    setFilterPlaceholder(value: any): void {
        this.widget.filterPlaceholder = JSON.parse(value);
    }
    
    getFilterText(): any {
        if (!hasValue(this.widget.filterText)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.filterText);
    }
    
    setFilterText(value: any): void {
        this.widget.filterText = JSON.parse(value);
    }
    
    async getGoToOverride(): Promise<any> {
        if (!hasValue(this.widget.goToOverride)) {
            return null;
        }
        
        let { buildDotNetGoToOverride } = await import('./goToOverride');
        return await buildDotNetGoToOverride(this.widget.goToOverride);
    }
    
    async setGoToOverride(value: any): Promise<void> {
        let { buildJsGoToOverride } = await import('./goToOverride');
        this.widget.goToOverride =  buildJsGoToOverride(value, this.viewId);
    }
    
    getIcon(): any {
        if (!hasValue(this.widget.icon)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.icon);
    }
    
    setIcon(value: any): void {
        this.widget.icon = JSON.parse(value);
    }
    
    getLabel(): any {
        if (!hasValue(this.widget.label)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.label);
    }
    
    setLabel(value: any): void {
        this.widget.label = JSON.parse(value);
    }
    
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetBookmarksViewModel } = await import('./bookmarksViewModel');
        return await buildDotNetBookmarksViewModel(this.widget.viewModel);
    }
    
    async setViewModel(value: any): Promise<void> {
        let { buildJsBookmarksViewModel } = await import('./bookmarksViewModel');
        this.widget.viewModel = await  buildJsBookmarksViewModel(value, this.layerId, this.viewId);
    }
    
    async getVisibleElements(): Promise<any> {
        if (!hasValue(this.widget.visibleElements)) {
            return null;
        }
        
        let { buildDotNetBookmarksVisibleElements } = await import('./bookmarksVisibleElements');
        return await buildDotNetBookmarksVisibleElements(this.widget.visibleElements);
    }
    
    async setVisibleElements(value: any): Promise<void> {
        let { buildJsBookmarksVisibleElements } = await import('./bookmarksVisibleElements');
        this.widget.visibleElements = await  buildJsBookmarksVisibleElements(value);
    }
    
    getWidgetId(): any {
        if (!hasValue(this.widget.id)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.id);
    }
    
    setWidgetId(value: any): void {
        this.widget.id = JSON.parse(value);
    }
    
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsBookmarksWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.bookmarks) && dotNetObject.bookmarks.length > 0) {
        let { buildJsBookmark } = await import('./bookmark');
        properties.bookmarks = await Promise.all(dotNetObject.bookmarks.map(async i => await buildJsBookmark(i))) as any;
    }
    if (hasValue(dotNetObject.defaultCreateOptions)) {
        let { buildJsBookmarkOptions } = await import('./bookmarkOptions');
        properties.defaultCreateOptions = await buildJsBookmarkOptions(dotNetObject.defaultCreateOptions, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.defaultEditOptions)) {
        let { buildJsBookmarkOptions } = await import('./bookmarkOptions');
        properties.defaultEditOptions = await buildJsBookmarkOptions(dotNetObject.defaultEditOptions, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.goToOverride)) {
        let { buildJsGoToOverride } = await import('./goToOverride');
        properties.goToOverride = buildJsGoToOverride(dotNetObject.goToOverride, viewId) as any;
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsBookmarksViewModel } = await import('./bookmarksViewModel');
        properties.viewModel = await buildJsBookmarksViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.visibleElements)) {
        let { buildJsBookmarksVisibleElements } = await import('./bookmarksVisibleElements');
        properties.visibleElements = await buildJsBookmarksVisibleElements(dotNetObject.visibleElements) as any;
    }

    if (hasValue(dotNetObject.disabled)) {
        properties.disabled = dotNetObject.disabled;
    }
    if (hasValue(dotNetObject.dragEnabled)) {
        properties.dragEnabled = dotNetObject.dragEnabled;
    }
    if (hasValue(dotNetObject.filterPlaceholder)) {
        properties.filterPlaceholder = dotNetObject.filterPlaceholder;
    }
    if (hasValue(dotNetObject.filterText)) {
        properties.filterText = dotNetObject.filterText;
    }
    if (hasValue(dotNetObject.headingLevel)) {
        properties.headingLevel = dotNetObject.headingLevel;
    }
    if (hasValue(dotNetObject.icon)) {
        properties.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    if (hasValue(dotNetObject.widgetId)) {
        properties.id = dotNetObject.widgetId;
    }
    let jsBookmarks = new Bookmarks(properties);
    if (hasValue(dotNetObject.hasBookmarkEditListener) && dotNetObject.hasBookmarkEditListener) {
        jsBookmarks.on('bookmark-edit', async (evt: any) => {
            let { buildDotNetBookmarksBookmarkEditEvent } = await import('./bookmarksBookmarkEditEvent');
            let dnEvent = await buildDotNetBookmarksBookmarkEditEvent(evt, layerId, viewId);
            let streamRef = buildJsStreamReference(dnEvent ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsBookmarkEdit', streamRef);
        });
    }
    
    if (hasValue(dotNetObject.hasBookmarkSelectListener) && dotNetObject.hasBookmarkSelectListener) {
        jsBookmarks.on('bookmark-select', async (evt: any) => {
            let { buildDotNetBookmarkSelectEvent } = await import('./bookmarkSelectEvent');
            let dnEvent = await buildDotNetBookmarkSelectEvent(evt);
            let streamRef = buildJsStreamReference(dnEvent ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsBookmarkSelect', streamRef);
        });
    }
    

    let { default: BookmarksWidgetWrapper } = await import('./bookmarksWidget');
    let bookmarksWidgetWrapper = new BookmarksWidgetWrapper(jsBookmarks);
    bookmarksWidgetWrapper.geoBlazorId = dotNetObject.id;
    bookmarksWidgetWrapper.viewId = viewId;
    bookmarksWidgetWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = bookmarksWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsBookmarks;
    
    try {
        let jsObjectRef = DotNet.createJSObjectReference(bookmarksWidgetWrapper);
        let { buildDotNetBookmarksWidget } = await import('./bookmarksWidget');
        let dnInstantiatedObject = await buildDotNetBookmarksWidget(jsBookmarks);

        let dnStream = buildJsStreamReference(dnInstantiatedObject);
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, dnStream);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BookmarksWidget', e);
    }
    
    return jsBookmarks;
}


export async function buildDotNetBookmarksWidgetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBookmarksWidget: any = {};
    
    if (hasValue(jsObject.bookmarks)) {
        let { buildDotNetBookmark } = await import('./bookmark');
        dotNetBookmarksWidget.bookmarks = await Promise.all(jsObject.bookmarks.map(async i => await buildDotNetBookmark(i)));
    }
    
    if (hasValue(jsObject.defaultCreateOptions)) {
        let { buildDotNetBookmarkOptions } = await import('./bookmarkOptions');
        dotNetBookmarksWidget.defaultCreateOptions = await buildDotNetBookmarkOptions(jsObject.defaultCreateOptions);
    }
    
    if (hasValue(jsObject.defaultEditOptions)) {
        let { buildDotNetBookmarkOptions } = await import('./bookmarkOptions');
        dotNetBookmarksWidget.defaultEditOptions = await buildDotNetBookmarkOptions(jsObject.defaultEditOptions);
    }
    
    if (hasValue(jsObject.viewModel)) {
        let { buildDotNetBookmarksViewModel } = await import('./bookmarksViewModel');
        dotNetBookmarksWidget.viewModel = await buildDotNetBookmarksViewModel(jsObject.viewModel);
    }
    
    if (hasValue(jsObject.visibleElements)) {
        let { buildDotNetBookmarksVisibleElements } = await import('./bookmarksVisibleElements');
        dotNetBookmarksWidget.visibleElements = await buildDotNetBookmarksVisibleElements(jsObject.visibleElements);
    }
    
    if (hasValue(jsObject.disabled)) {
        dotNetBookmarksWidget.disabled = jsObject.disabled;
    }
    
    if (hasValue(jsObject.dragEnabled)) {
        dotNetBookmarksWidget.dragEnabled = jsObject.dragEnabled;
    }
    
    if (hasValue(jsObject.filterPlaceholder)) {
        dotNetBookmarksWidget.filterPlaceholder = jsObject.filterPlaceholder;
    }
    
    if (hasValue(jsObject.filterText)) {
        dotNetBookmarksWidget.filterText = jsObject.filterText;
    }
    
    if (hasValue(jsObject.headingLevel)) {
        dotNetBookmarksWidget.headingLevel = jsObject.headingLevel;
    }
    
    if (hasValue(jsObject.icon)) {
        dotNetBookmarksWidget.icon = jsObject.icon;
    }
    
    if (hasValue(jsObject.label)) {
        dotNetBookmarksWidget.label = jsObject.label;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetBookmarksWidget.type = removeCircularReferences(jsObject.type);
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetBookmarksWidget.visible = jsObject.visible;
    }
    
    if (hasValue(jsObject.id)) {
        dotNetBookmarksWidget.widgetId = jsObject.id;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetBookmarksWidget.id = geoBlazorId;
    }

    return dotNetBookmarksWidget;
}

