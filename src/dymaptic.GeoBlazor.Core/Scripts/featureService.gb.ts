// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import FeatureService from '@arcgis/core/rest/featureService/FeatureService';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FeatureServiceGenerated implements IPropertyWrapper {
    public component: FeatureService;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: FeatureService) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async applyEdits(edits: any,
        options: any): Promise<any> {
        let { buildJsFeatureServiceApplyEditsEdits } = await import('./featureServiceApplyEditsEdits');
        let jsEdits = await buildJsFeatureServiceApplyEditsEdits(edits, this.layerId, this.viewId) as any;
        return await this.component.applyEdits(jsEdits,
            options);
    }

    async fetchAllLayersAndTables(): Promise<any> {
        return await this.component.fetchAllLayersAndTables();
    }

    async load(): Promise<any> {
        return await this.component.load();
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsFeatureServiceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureService = new FeatureService();

    if (hasValue(dotNetObject.capabilities)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedCapabilities } = dotNetObject.capabilities;
        jsFeatureService.capabilities = sanitizedCapabilities;
    }
    if (hasValue(dotNetObject.layerInfos)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedLayerInfos } = dotNetObject.layerInfos;
        jsFeatureService.layerInfos = sanitizedLayerInfos;
    }
    if (hasValue(dotNetObject.tableInfos)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedTableInfos } = dotNetObject.tableInfos;
        jsFeatureService.tableInfos = sanitizedTableInfos;
    }
    if (hasValue(dotNetObject.url)) {
        jsFeatureService.url = dotNetObject.url;
    }
    if (hasValue(dotNetObject.userTypeExtensions)) {
        jsFeatureService.userTypeExtensions = dotNetObject.userTypeExtensions;
    }

    let { default: FeatureServiceWrapper } = await import('./featureService');
    let featureServiceWrapper = new FeatureServiceWrapper(jsFeatureService);
    featureServiceWrapper.geoBlazorId = dotNetObject.id;
    featureServiceWrapper.viewId = viewId;
    featureServiceWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(featureServiceWrapper);
    jsObjectRefs[dotNetObject.id] = featureServiceWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureService;
    let { buildDotNetFeatureService } = await import('./featureService');
    let dnInstantiatedObject = await buildDotNetFeatureService(jsFeatureService);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureService', e);
    }
    
    return jsFeatureService;
}
export async function buildDotNetFeatureServiceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureService: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.capabilities)) {
            dotNetFeatureService.capabilities = jsObject.capabilities;
        }
        if (hasValue(jsObject.effectiveCapabilities)) {
            dotNetFeatureService.effectiveCapabilities = jsObject.effectiveCapabilities;
        }
        if (hasValue(jsObject.layerInfos)) {
            dotNetFeatureService.layerInfos = jsObject.layerInfos;
        }
        if (hasValue(jsObject.loaded)) {
            dotNetFeatureService.loaded = jsObject.loaded;
        }
        if (hasValue(jsObject.loadError)) {
            dotNetFeatureService.loadError = jsObject.loadError;
        }
        if (hasValue(jsObject.loadStatus)) {
            dotNetFeatureService.loadStatus = jsObject.loadStatus;
        }
        if (hasValue(jsObject.tableInfos)) {
            dotNetFeatureService.tableInfos = jsObject.tableInfos;
        }
        if (hasValue(jsObject.url)) {
            dotNetFeatureService.url = jsObject.url;
        }
        if (hasValue(jsObject.userTypeExtensions)) {
            dotNetFeatureService.userTypeExtensions = jsObject.userTypeExtensions;
        }
        if (hasValue(jsObject.utilityNetworkUrl)) {
            dotNetFeatureService.utilityNetworkUrl = jsObject.utilityNetworkUrl;
        }
        if (hasValue(jsObject.versionManagementServiceUrl)) {
            dotNetFeatureService.versionManagementServiceUrl = jsObject.versionManagementServiceUrl;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFeatureService.id = k;
                break;
            }
        }
    }

    return dotNetFeatureService;
}

