// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetRelationshipSchemeForPolygon } from './relationshipSchemeForPolygon';

export async function buildJsRelationshipSchemeForPolygonGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsRelationshipSchemeForPolygon: any = {}
    if (hasValue(dotNetObject.colorsForClassBreaks)) {
        let { buildJsRelationshipSchemeForPolygonColorsForClassBreaks } = await import('./relationshipSchemeForPolygonColorsForClassBreaks');
        jsRelationshipSchemeForPolygon.colorsForClassBreaks = await Promise.all(dotNetObject.colorsForClassBreaks.map(async i => await buildJsRelationshipSchemeForPolygonColorsForClassBreaks(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.noDataColor)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsRelationshipSchemeForPolygon.noDataColor = buildJsMapColor(dotNetObject.noDataColor) as any;
    }
    if (hasValue(dotNetObject.outline)) {
        let { buildJsRelationshipSchemeForPolygonOutline } = await import('./relationshipSchemeForPolygonOutline');
        jsRelationshipSchemeForPolygon.outline = await buildJsRelationshipSchemeForPolygonOutline(dotNetObject.outline, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.name)) {
        jsRelationshipSchemeForPolygon.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.opacity)) {
        jsRelationshipSchemeForPolygon.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.relationshipSchemeForPolygonId)) {
        jsRelationshipSchemeForPolygon.id = dotNetObject.relationshipSchemeForPolygonId;
    }
    if (hasValue(dotNetObject.tags)) {
        jsRelationshipSchemeForPolygon.tags = dotNetObject.tags;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsRelationshipSchemeForPolygon);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRelationshipSchemeForPolygon;
    
    let dnInstantiatedObject = await buildDotNetRelationshipSchemeForPolygon(jsRelationshipSchemeForPolygon);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RelationshipSchemeForPolygon', e);
    }
    
    return jsRelationshipSchemeForPolygon;
}

export async function buildDotNetRelationshipSchemeForPolygonGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRelationshipSchemeForPolygon: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.colorsForClassBreaks)) {
            let { buildDotNetRelationshipSchemeForPolygonColorsForClassBreaks } = await import('./relationshipSchemeForPolygonColorsForClassBreaks');
            dotNetRelationshipSchemeForPolygon.colorsForClassBreaks = await Promise.all(jsObject.colorsForClassBreaks.map(async i => await buildDotNetRelationshipSchemeForPolygonColorsForClassBreaks(i)));
        }
        if (hasValue(jsObject.noDataColor)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetRelationshipSchemeForPolygon.noDataColor = buildDotNetMapColor(jsObject.noDataColor);
        }
        if (hasValue(jsObject.outline)) {
            let { buildDotNetRelationshipSchemeForPolygonOutline } = await import('./relationshipSchemeForPolygonOutline');
            dotNetRelationshipSchemeForPolygon.outline = await buildDotNetRelationshipSchemeForPolygonOutline(jsObject.outline);
        }
    if (hasValue(jsObject.name)) {
        dotNetRelationshipSchemeForPolygon.name = jsObject.name;
    }
    if (hasValue(jsObject.opacity)) {
        dotNetRelationshipSchemeForPolygon.opacity = jsObject.opacity;
    }
    if (hasValue(jsObject.id)) {
        dotNetRelationshipSchemeForPolygon.relationshipSchemeForPolygonId = jsObject.id;
    }
    if (hasValue(jsObject.tags)) {
        dotNetRelationshipSchemeForPolygon.tags = jsObject.tags;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRelationshipSchemeForPolygon.id = k;
                break;
            }
        }
    }

    return dotNetRelationshipSchemeForPolygon;
}

