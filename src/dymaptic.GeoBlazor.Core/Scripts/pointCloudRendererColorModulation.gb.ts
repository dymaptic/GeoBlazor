// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetPointCloudRendererColorModulation } from './pointCloudRendererColorModulation';

export async function buildJsPointCloudRendererColorModulationGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsPointCloudRendererColorModulation: any = {};

    if (hasValue(dotNetObject.field)) {
        jsPointCloudRendererColorModulation.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.maxValue)) {
        jsPointCloudRendererColorModulation.maxValue = dotNetObject.maxValue;
    }
    if (hasValue(dotNetObject.minValue)) {
        jsPointCloudRendererColorModulation.minValue = dotNetObject.minValue;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsPointCloudRendererColorModulation);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPointCloudRendererColorModulation;
    
    return jsPointCloudRendererColorModulation;
}


export async function buildDotNetPointCloudRendererColorModulationGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPointCloudRendererColorModulation: any = {};
    
    if (hasValue(jsObject.field)) {
        dotNetPointCloudRendererColorModulation.field = jsObject.field;
    }
    
    if (hasValue(jsObject.maxValue)) {
        dotNetPointCloudRendererColorModulation.maxValue = jsObject.maxValue;
    }
    
    if (hasValue(jsObject.minValue)) {
        dotNetPointCloudRendererColorModulation.minValue = jsObject.minValue;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetPointCloudRendererColorModulation.id = geoBlazorId;
    }

    return dotNetPointCloudRendererColorModulation;
}

