// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import Locate from '@arcgis/core/widgets/Locate';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class LocateWidgetGenerated implements IPropertyWrapper {
    public widget: Locate;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: Locate) {
        this.widget = widget;
    }

    // region methods

    unwrap() {
        return this.widget;
    }

    async cancelLocate(): Promise<void> {
        this.widget.cancelLocate();
    }

    async locate(): Promise<any> {
        return await this.widget.locate();
    }

    // region properties

    async getGraphic(): Promise<any> {
        if (!hasValue(this.widget.graphic)) {
            return null;
        }

        let {buildDotNetGraphic} = await import('./graphic');
        return buildDotNetGraphic(this.widget.graphic, this.layerId, this.viewId);
    }

    async setGraphic(value: any): Promise<void> {
        let {buildJsGraphic} = await import('./graphic');
        this.widget.graphic = buildJsGraphic(value);
    }

    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }

        let {buildDotNetLocateViewModel} = await import('./locateViewModel');
        return await buildDotNetLocateViewModel(this.widget.viewModel, this.layerId, this.viewId);
    }

    async setViewModel(value: any): Promise<void> {
        let {buildJsLocateViewModel} = await import('./locateViewModel');
        this.widget.viewModel = await buildJsLocateViewModel(value, this.layerId, this.viewId);
    }

    getProperty(prop: string): any {
        return this.widget[prop];
    }

    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}

export async function buildJsLocateWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsLocate = new Locate();
    if (hasValue(dotNetObject.graphic)) {
        let {buildJsGraphic} = await import('./graphic');
        jsLocate.graphic = buildJsGraphic(dotNetObject.graphic) as any;
    }
    if (hasValue(dotNetObject.viewModel)) {
        let {buildJsLocateViewModel} = await import('./locateViewModel');
        jsLocate.viewModel = await buildJsLocateViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.geolocationOptions)) {
        jsLocate.geolocationOptions = dotNetObject.geolocationOptions;
    }
    if (hasValue(dotNetObject.goToLocationEnabled)) {
        jsLocate.goToLocationEnabled = dotNetObject.goToLocationEnabled;
    }
    if (hasValue(dotNetObject.goToOverride)) {
        jsLocate.goToOverride = dotNetObject.goToOverride;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        jsLocate.popupEnabled = dotNetObject.popupEnabled;
    }
    if (hasValue(dotNetObject.rotationEnabled)) {
        jsLocate.rotationEnabled = dotNetObject.rotationEnabled;
    }
    if (hasValue(dotNetObject.scale)) {
        jsLocate.scale = dotNetObject.scale;
    }
    if (hasValue(dotNetObject.view)) {
        jsLocate.view = dotNetObject.view;
    }
    jsLocate.on('locate', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsLocate', evt);
    });

    jsLocate.on('locate-error', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsLocateError', evt);
    });


    let {default: LocateWidgetWrapper} = await import('./locateWidget');
    let locateWidgetWrapper = new LocateWidgetWrapper(jsLocate);
    locateWidgetWrapper.geoBlazorId = dotNetObject.id;
    locateWidgetWrapper.viewId = viewId;
    locateWidgetWrapper.layerId = layerId;

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(locateWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = locateWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsLocate;
    let {buildDotNetLocateWidget} = await import('./locateWidget');
    let dnInstantiatedObject = await buildDotNetLocateWidget(jsLocate);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LocateWidget', e);
    }

    return jsLocate;
}

export async function buildDotNetLocateWidgetGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetLocateWidget: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.graphic)) {
        let {buildDotNetGraphic} = await import('./graphic');
        dotNetLocateWidget.graphic = buildDotNetGraphic(jsObject.graphic, layerId, viewId);
    }
    if (hasValue(jsObject.viewModel)) {
        let {buildDotNetLocateViewModel} = await import('./locateViewModel');
        dotNetLocateWidget.viewModel = await buildDotNetLocateViewModel(jsObject.viewModel, layerId, viewId);
    }
    if (hasValue(jsObject.geolocationOptions)) {
        dotNetLocateWidget.geolocationOptions = jsObject.geolocationOptions;
    }
    if (hasValue(jsObject.goToLocationEnabled)) {
        dotNetLocateWidget.goToLocationEnabled = jsObject.goToLocationEnabled;
    }
    if (hasValue(jsObject.goToOverride)) {
        dotNetLocateWidget.goToOverride = jsObject.goToOverride;
    }
    if (hasValue(jsObject.popupEnabled)) {
        dotNetLocateWidget.popupEnabled = jsObject.popupEnabled;
    }
    if (hasValue(jsObject.rotationEnabled)) {
        dotNetLocateWidget.rotationEnabled = jsObject.rotationEnabled;
    }
    if (hasValue(jsObject.scale)) {
        dotNetLocateWidget.scale = jsObject.scale;
    }
    if (hasValue(jsObject.type)) {
        dotNetLocateWidget.type = jsObject.type;
    }
    if (hasValue(jsObject.view)) {
        dotNetLocateWidget.view = jsObject.view;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLocateWidget.id = k;
                break;
            }
        }
    }

    return dotNetLocateWidget;
}

