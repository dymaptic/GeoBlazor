// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Locate from '@arcgis/core/widgets/Locate';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class LocateWidgetGenerated implements IPropertyWrapper {
    public widget: Locate;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: Locate) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.goToOverride)) {
            let { buildJsGoToOverride } = await import('./goToOverride');
            this.widget.goToOverride = buildJsGoToOverride(dotNetObject.goToOverride, this.viewId) as any;
        }
        if (hasValue(dotNetObject.graphic)) {
            let { buildJsGraphic } = await import('./graphic');
            this.widget.graphic = buildJsGraphic(dotNetObject.graphic) as any;
        }
        if (hasValue(dotNetObject.viewModel)) {
            let { buildJsLocateViewModel } = await import('./locateViewModel');
            this.widget.viewModel = await buildJsLocateViewModel(dotNetObject.viewModel, this.layerId, this.viewId) as any;
        }

        if (hasValue(dotNetObject.container)) {
            this.widget.container = dotNetObject.container;
        }
        if (hasValue(dotNetObject.geolocationOptions)) {
            this.widget.geolocationOptions = dotNetObject.geolocationOptions;
        }
        if (hasValue(dotNetObject.goToLocationEnabled)) {
            this.widget.goToLocationEnabled = dotNetObject.goToLocationEnabled;
        }
        if (hasValue(dotNetObject.icon)) {
            this.widget.icon = dotNetObject.icon;
        }
        if (hasValue(dotNetObject.label)) {
            this.widget.label = dotNetObject.label;
        }
        if (hasValue(dotNetObject.popupEnabled)) {
            this.widget.popupEnabled = dotNetObject.popupEnabled;
        }
        if (hasValue(dotNetObject.rotationEnabled)) {
            this.widget.rotationEnabled = dotNetObject.rotationEnabled;
        }
        if (hasValue(dotNetObject.scale)) {
            this.widget.scale = dotNetObject.scale;
        }
        if (hasValue(dotNetObject.widgetId)) {
            this.widget.id = dotNetObject.widgetId;
        }
    }
    
    async cancelLocate(): Promise<void> {
        this.widget.cancelLocate();
    }

    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async locate(): Promise<any> {
        return await this.widget.locate();
    }

    async own(handleOrHandles: any): Promise<void> {
        let { buildJsWatchHandle } = await import('./watchHandle');
        let jsHandleOrHandles = await buildJsWatchHandle(handleOrHandles, this.layerId, this.viewId) as any;
        this.widget.own(jsHandleOrHandles);
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async render(): Promise<any> {
        return this.widget.render();
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async when(callback: any,
        errback: any): Promise<any> {
        return await this.widget.when(callback,
            errback);
    }

    // region properties
    
    async getGoToOverride(): Promise<any> {
        if (!hasValue(this.widget.goToOverride)) {
            return null;
        }
        
        let { buildDotNetGoToOverride } = await import('./goToOverride');
        return await buildDotNetGoToOverride(this.widget.goToOverride);
    }
    
    async setGoToOverride(value: any): Promise<void> {
        let { buildJsGoToOverride } = await import('./goToOverride');
        this.widget.goToOverride =  buildJsGoToOverride(value, this.viewId);
    }
    
    async getGraphic(): Promise<any> {
        if (!hasValue(this.widget.graphic)) {
            return null;
        }
        
        let { buildDotNetGraphic } = await import('./graphic');
        return buildDotNetGraphic(this.widget.graphic, this.layerId, this.viewId);
    }
    
    async setGraphic(value: any): Promise<void> {
        let { buildJsGraphic } = await import('./graphic');
        this.widget.graphic =  buildJsGraphic(value);
    }
    
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetLocateViewModel } = await import('./locateViewModel');
        return await buildDotNetLocateViewModel(this.widget.viewModel, this.layerId, this.viewId);
    }
    
    async setViewModel(value: any): Promise<void> {
        let { buildJsLocateViewModel } = await import('./locateViewModel');
        this.widget.viewModel = await  buildJsLocateViewModel(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsLocateWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.goToOverride)) {
        let { buildJsGoToOverride } = await import('./goToOverride');
        properties.goToOverride = buildJsGoToOverride(dotNetObject.goToOverride, viewId) as any;
    }
    if (hasValue(dotNetObject.graphic)) {
        let { buildJsGraphic } = await import('./graphic');
        properties.graphic = buildJsGraphic(dotNetObject.graphic) as any;
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsLocateViewModel } = await import('./locateViewModel');
        properties.viewModel = await buildJsLocateViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.container)) {
        properties.container = dotNetObject.container;
    }
    if (hasValue(dotNetObject.geolocationOptions)) {
        properties.geolocationOptions = dotNetObject.geolocationOptions;
    }
    if (hasValue(dotNetObject.goToLocationEnabled)) {
        properties.goToLocationEnabled = dotNetObject.goToLocationEnabled;
    }
    if (hasValue(dotNetObject.icon)) {
        properties.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        properties.popupEnabled = dotNetObject.popupEnabled;
    }
    if (hasValue(dotNetObject.rotationEnabled)) {
        properties.rotationEnabled = dotNetObject.rotationEnabled;
    }
    if (hasValue(dotNetObject.scale)) {
        properties.scale = dotNetObject.scale;
    }
    if (hasValue(dotNetObject.widgetId)) {
        properties.id = dotNetObject.widgetId;
    }
    let jsLocate = new Locate(properties);
    jsLocate.on('locate', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsLocate', evt);
    });
    
    jsLocate.on('locate-error', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsLocateError', evt);
    });
    

    let { default: LocateWidgetWrapper } = await import('./locateWidget');
    let locateWidgetWrapper = new LocateWidgetWrapper(jsLocate);
    locateWidgetWrapper.geoBlazorId = dotNetObject.id;
    locateWidgetWrapper.viewId = viewId;
    locateWidgetWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(locateWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = locateWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsLocate;
    
    let { buildDotNetLocateWidget } = await import('./locateWidget');
    let dnInstantiatedObject = await buildDotNetLocateWidget(jsLocate, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type LocateWidget detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LocateWidget', e);
    }
    
    return jsLocate;
}


export async function buildDotNetLocateWidgetGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLocateWidget: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.goToOverride)) {
        let { buildDotNetGoToOverride } = await import('./goToOverride');
        dotNetLocateWidget.goToOverride = await buildDotNetGoToOverride(jsObject.goToOverride);
    }
    if (hasValue(jsObject.graphic)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetLocateWidget.graphic = buildDotNetGraphic(jsObject.graphic, layerId, viewId);
    }
    if (hasValue(jsObject.viewModel)) {
        let { buildDotNetLocateViewModel } = await import('./locateViewModel');
        dotNetLocateWidget.viewModel = await buildDotNetLocateViewModel(jsObject.viewModel, layerId, viewId);
    }
    if (hasValue(jsObject.container)) {
        dotNetLocateWidget.container = jsObject.container;
    }
    if (hasValue(jsObject.geolocationOptions)) {
        dotNetLocateWidget.geolocationOptions = jsObject.geolocationOptions;
    }
    if (hasValue(jsObject.goToLocationEnabled)) {
        dotNetLocateWidget.goToLocationEnabled = jsObject.goToLocationEnabled;
    }
    if (hasValue(jsObject.icon)) {
        dotNetLocateWidget.icon = jsObject.icon;
    }
    if (hasValue(jsObject.label)) {
        dotNetLocateWidget.label = jsObject.label;
    }
    if (hasValue(jsObject.popupEnabled)) {
        dotNetLocateWidget.popupEnabled = jsObject.popupEnabled;
    }
    if (hasValue(jsObject.rotationEnabled)) {
        dotNetLocateWidget.rotationEnabled = jsObject.rotationEnabled;
    }
    if (hasValue(jsObject.scale)) {
        dotNetLocateWidget.scale = jsObject.scale;
    }
    if (hasValue(jsObject.type)) {
        dotNetLocateWidget.type = jsObject.type;
    }
    if (hasValue(jsObject.id)) {
        dotNetLocateWidget.widgetId = jsObject.id;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetLocateWidget.id = geoBlazorId;
    }

    return dotNetLocateWidget;
}

