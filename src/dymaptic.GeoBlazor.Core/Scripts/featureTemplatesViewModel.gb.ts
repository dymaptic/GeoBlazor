// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import FeatureTemplatesViewModel from '@arcgis/core/widgets/FeatureTemplates/FeatureTemplatesViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FeatureTemplatesViewModelGenerated implements IPropertyWrapper {
    public component: FeatureTemplatesViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: FeatureTemplatesViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async refresh(): Promise<void> {
        this.component.refresh();
    }

    async select(item: any): Promise<void> {
        let { buildJsTemplateItem } = await import('./templateItem');
        let jsItem = await buildJsTemplateItem(item, this.layerId, this.viewId) as any;
        this.component.select(jsItem);
    }

    // region properties
    
    async getItems(): Promise<any> {
        if (!hasValue(this.component.items)) {
            return null;
        }
        
        let { buildDotNetTemplateItem } = await import('./templateItem');
        return await Promise.all(this.component.items.map(async i => await buildDotNetTemplateItem(i)));
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsFeatureTemplatesViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureTemplatesViewModel = new FeatureTemplatesViewModel();
    if (hasValue(dotNetObject.hasFilterFunction) && dotNetObject.hasFilterFunction) {
        jsFeatureTemplatesViewModel.filterFunction = (filterName) => {
            let func = new Function('filterName', dotNetObject.filterFunction.javaScriptFunction);
            return func(filterName);
        };
    }

    if (hasValue(dotNetObject.disabled)) {
        jsFeatureTemplatesViewModel.disabled = dotNetObject.disabled;
    }
    if (hasValue(dotNetObject.groupBy)) {
        jsFeatureTemplatesViewModel.groupBy = dotNetObject.groupBy;
    }
    if (hasValue(dotNetObject.layers)) {
        jsFeatureTemplatesViewModel.layers = dotNetObject.layers;
    }
    jsFeatureTemplatesViewModel.on('select', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSelect', evt);
    });
    

    let { default: FeatureTemplatesViewModelWrapper } = await import('./featureTemplatesViewModel');
    let featureTemplatesViewModelWrapper = new FeatureTemplatesViewModelWrapper(jsFeatureTemplatesViewModel);
    featureTemplatesViewModelWrapper.geoBlazorId = dotNetObject.id;
    featureTemplatesViewModelWrapper.viewId = viewId;
    featureTemplatesViewModelWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(featureTemplatesViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = featureTemplatesViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureTemplatesViewModel;
    let { buildDotNetFeatureTemplatesViewModel } = await import('./featureTemplatesViewModel');
    let dnInstantiatedObject = await buildDotNetFeatureTemplatesViewModel(jsFeatureTemplatesViewModel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureTemplatesViewModel', e);
    }
    
    return jsFeatureTemplatesViewModel;
}

export async function buildDotNetFeatureTemplatesViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureTemplatesViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.items)) {
            let { buildDotNetTemplateItem } = await import('./templateItem');
            dotNetFeatureTemplatesViewModel.items = await Promise.all(jsObject.items.map(async i => await buildDotNetTemplateItem(i)));
        }
    if (hasValue(jsObject.disabled)) {
        dotNetFeatureTemplatesViewModel.disabled = jsObject.disabled;
    }
    if (hasValue(jsObject.filterFunction)) {
        dotNetFeatureTemplatesViewModel.filterFunction = jsObject.filterFunction;
    }
    if (hasValue(jsObject.groupBy)) {
        dotNetFeatureTemplatesViewModel.groupBy = jsObject.groupBy;
    }
    if (hasValue(jsObject.layers)) {
        dotNetFeatureTemplatesViewModel.layers = jsObject.layers;
    }
    if (hasValue(jsObject.state)) {
        dotNetFeatureTemplatesViewModel.state = jsObject.state;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFeatureTemplatesViewModel.id = k;
                break;
            }
        }
    }

    return dotNetFeatureTemplatesViewModel;
}

