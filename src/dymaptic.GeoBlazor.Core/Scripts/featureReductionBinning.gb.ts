import { buildDotNetFeatureReductionBinning } from './featureReductionBinning';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import FeatureReductionBinning from '@arcgis/core/layers/support/FeatureReductionBinning';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsFeatureReductionBinningGenerated(dotNetObject: any): Promise<any> {
    let jsFeatureReductionBinning = new FeatureReductionBinning();
    if (hasValue(dotNetObject.fields)) {
        let { buildJsAggregateField } = await import('./aggregateField');
        jsFeatureReductionBinning.fields = await Promise.all(dotNetObject.fields.map(async i => await buildJsAggregateField(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.labelingInfo)) {
        let { buildJsLabel } = await import('./label');
        jsFeatureReductionBinning.labelingInfo = await Promise.all(dotNetObject.labelingInfo.map(async i => await buildJsLabel(i))) as any;
    }
    if (hasValue(dotNetObject.popupTemplate)) {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        jsFeatureReductionBinning.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsRenderer } = await import('./renderer');
        jsFeatureReductionBinning.renderer = await buildJsRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.fixedBinLevel)) {
        jsFeatureReductionBinning.fixedBinLevel = dotNetObject.fixedBinLevel;
    }
    if (hasValue(dotNetObject.labelsVisible)) {
        jsFeatureReductionBinning.labelsVisible = dotNetObject.labelsVisible;
    }
    if (hasValue(dotNetObject.maxScale)) {
        jsFeatureReductionBinning.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        jsFeatureReductionBinning.popupEnabled = dotNetObject.popupEnabled;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureReductionBinning);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureReductionBinning;
    
    let dnInstantiatedObject = await buildDotNetFeatureReductionBinning(jsFeatureReductionBinning);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureReductionBinning', e);
    }
    
    return jsFeatureReductionBinning;
}
export async function buildDotNetFeatureReductionBinningGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureReductionBinning: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.fields)) {
            let { buildDotNetAggregateField } = await import('./aggregateField');
            dotNetFeatureReductionBinning.fields = await Promise.all(jsObject.fields.map(async i => await buildDotNetAggregateField(i)));
        }
        if (hasValue(jsObject.labelingInfo)) {
            let { buildDotNetLabel } = await import('./label');
            dotNetFeatureReductionBinning.labelingInfo = await Promise.all(jsObject.labelingInfo.map(async i => await buildDotNetLabel(i)));
        }
        if (hasValue(jsObject.popupTemplate)) {
            let { buildDotNetPopupTemplate } = await import('./popupTemplate');
            dotNetFeatureReductionBinning.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
        }
        if (hasValue(jsObject.renderer)) {
            let { buildDotNetRenderer } = await import('./renderer');
            dotNetFeatureReductionBinning.renderer = await buildDotNetRenderer(jsObject.renderer);
        }
        if (hasValue(jsObject.fixedBinLevel)) {
            dotNetFeatureReductionBinning.fixedBinLevel = jsObject.fixedBinLevel;
        }
        if (hasValue(jsObject.labelsVisible)) {
            dotNetFeatureReductionBinning.labelsVisible = jsObject.labelsVisible;
        }
        if (hasValue(jsObject.maxScale)) {
            dotNetFeatureReductionBinning.maxScale = jsObject.maxScale;
        }
        if (hasValue(jsObject.popupEnabled)) {
            dotNetFeatureReductionBinning.popupEnabled = jsObject.popupEnabled;
        }
        if (hasValue(jsObject.type)) {
            dotNetFeatureReductionBinning.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFeatureReductionBinning.id = k;
                break;
            }
        }
    }

    return dotNetFeatureReductionBinning;
}

