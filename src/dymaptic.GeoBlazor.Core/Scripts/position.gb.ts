// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';

export async function buildJsPositionGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsPosition: any = {};
    if (hasValue(dotNetObject.location)) {
        let { buildJsPoint } = await import('./point');
        jsPosition.location = buildJsPoint(dotNetObject.location) as any;
    }

    if (hasValue(dotNetObject.coordinate)) {
        jsPosition.coordinate = dotNetObject.coordinate;
    }
    
    jsObjectRefs[dotNetObject.id] = jsPosition;
    arcGisObjectRefs[dotNetObject.id] = jsPosition;
    
    return jsPosition;
}


export async function buildDotNetPositionGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPosition: any = {};
    
    if (hasValue(jsObject.location)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetPosition.location = buildDotNetPoint(jsObject.location);
    }
    
    if (hasValue(jsObject.coordinate)) {
        dotNetPosition.coordinate = jsObject.coordinate;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetPosition.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetPosition.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetPosition.id)) {
        jsObjectRefs[dotNetPosition.id] ??= jsObject;
        arcGisObjectRefs[dotNetPosition.id] ??= jsObject;
    }

    return dotNetPosition;
}

