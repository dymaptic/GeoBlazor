import { buildDotNetTrimExtendParameters } from './trimExtendParameters';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import TrimExtendParameters from '@arcgis/core/rest/support/TrimExtendParameters';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsTrimExtendParametersGenerated(dotNetObject: any): Promise<any> {
    let jsTrimExtendParameters = new TrimExtendParameters();
    if (hasValue(dotNetObject.polylines)) {
        let { buildJsPolyline } = await import('./polyline');
        jsTrimExtendParameters.polylines = dotNetObject.polylines.map(i => buildJsPolyline(i)) as any;
    }
    if (hasValue(dotNetObject.trimExtendTo)) {
        let { buildJsPolyline } = await import('./polyline');
        jsTrimExtendParameters.trimExtendTo = buildJsPolyline(dotNetObject.trimExtendTo) as any;
    }

    if (hasValue(dotNetObject.extendHow)) {
        jsTrimExtendParameters.extendHow = dotNetObject.extendHow;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsTrimExtendParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTrimExtendParameters;
    
    let dnInstantiatedObject = await buildDotNetTrimExtendParameters(jsTrimExtendParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TrimExtendParameters', e);
    }
    
    return jsTrimExtendParameters;
}
export async function buildDotNetTrimExtendParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTrimExtendParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.polylines)) {
            let { buildDotNetPolyline } = await import('./polyline');
            dotNetTrimExtendParameters.polylines = jsObject.polylines.map(i => buildDotNetPolyline(i));
        }
        if (hasValue(jsObject.trimExtendTo)) {
            let { buildDotNetPolyline } = await import('./polyline');
            dotNetTrimExtendParameters.trimExtendTo = buildDotNetPolyline(jsObject.trimExtendTo);
        }
        if (hasValue(jsObject.extendHow)) {
            dotNetTrimExtendParameters.extendHow = jsObject.extendHow;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTrimExtendParameters.id = k;
                break;
            }
        }
    }

    return dotNetTrimExtendParameters;
}

