// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetMediaHit } from './mediaHit';

export async function buildJsMediaHitGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsMediaHit: any = {};
    if (hasValue(dotNetObject.layer)) {
        let { buildJsMediaLayer } = await import('./mediaLayer');
        jsMediaHit.layer = await buildJsMediaLayer(dotNetObject.layer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.mapPoint)) {
        let { buildJsPoint } = await import('./point');
        jsMediaHit.mapPoint = buildJsPoint(dotNetObject.mapPoint) as any;
    }

    if (hasValue(dotNetObject.element)) {
        jsMediaHit.element = dotNetObject.element;
    }
    if (hasValue(dotNetObject.sourcePoint)) {
        const { id, dotNetComponentReference, ...sanitizedSourcePoint } = dotNetObject.sourcePoint;
        jsMediaHit.sourcePoint = sanitizedSourcePoint;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsMediaHit);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsMediaHit;
    
    let { buildDotNetMediaHit } = await import('./mediaHit');
    let dnInstantiatedObject = await buildDotNetMediaHit(jsMediaHit);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type MediaHit detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for MediaHit', e);
    }
    
    return jsMediaHit;
}


export async function buildDotNetMediaHitGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMediaHit: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.mapPoint)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetMediaHit.mapPoint = buildDotNetPoint(jsObject.mapPoint);
    }
    if (hasValue(jsObject.element)) {
        dotNetMediaHit.element = jsObject.element;
    }
    if (hasValue(jsObject.sourcePoint)) {
        dotNetMediaHit.sourcePoint = jsObject.sourcePoint;
    }
    if (hasValue(jsObject.type)) {
        dotNetMediaHit.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetMediaHit.id = k;
                break;
            }
        }
    }

    return dotNetMediaHit;
}

