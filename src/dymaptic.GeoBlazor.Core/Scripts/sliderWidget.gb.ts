// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Slider from '@arcgis/core/widgets/Slider';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SliderWidgetGenerated implements IPropertyWrapper {
    public widget: Slider;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: Slider) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.tickConfigs)) {
            let { buildJsTickConfig } = await import('./tickConfig');
            this.widget.tickConfigs = dotNetObject.tickConfigs.map(i => buildJsTickConfig(i)) as any;
        }
        if (hasValue(dotNetObject.viewModel)) {
            let { buildJsSliderViewModel } = await import('./sliderViewModel');
            this.widget.viewModel = await buildJsSliderViewModel(dotNetObject.viewModel, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.visibleElements)) {
            let { buildJsSliderVisibleElements } = await import('./sliderVisibleElements');
            this.widget.visibleElements = await buildJsSliderVisibleElements(dotNetObject.visibleElements, this.layerId, this.viewId) as any;
        }

        if (hasValue(dotNetObject.container)) {
            this.widget.container = dotNetObject.container;
        }
        if (hasValue(dotNetObject.disabled)) {
            this.widget.disabled = dotNetObject.disabled;
        }
        if (hasValue(dotNetObject.draggableSegmentsEnabled)) {
            this.widget.draggableSegmentsEnabled = dotNetObject.draggableSegmentsEnabled;
        }
        if (hasValue(dotNetObject.effectiveMax)) {
            this.widget.effectiveMax = dotNetObject.effectiveMax;
        }
        if (hasValue(dotNetObject.effectiveMin)) {
            this.widget.effectiveMin = dotNetObject.effectiveMin;
        }
        if (hasValue(dotNetObject.icon)) {
            this.widget.icon = dotNetObject.icon;
        }
        if (hasValue(dotNetObject.label)) {
            this.widget.label = dotNetObject.label;
        }
        if (hasValue(dotNetObject.labelInputsEnabled)) {
            this.widget.labelInputsEnabled = dotNetObject.labelInputsEnabled;
        }
        if (hasValue(dotNetObject.layout)) {
            this.widget.layout = dotNetObject.layout;
        }
        if (hasValue(dotNetObject.max)) {
            this.widget.max = dotNetObject.max;
        }
        if (hasValue(dotNetObject.min)) {
            this.widget.min = dotNetObject.min;
        }
        if (hasValue(dotNetObject.precision)) {
            this.widget.precision = dotNetObject.precision;
        }
        if (hasValue(dotNetObject.rangeLabelInputsEnabled)) {
            this.widget.rangeLabelInputsEnabled = dotNetObject.rangeLabelInputsEnabled;
        }
        if (hasValue(dotNetObject.snapOnClickEnabled)) {
            this.widget.snapOnClickEnabled = dotNetObject.snapOnClickEnabled;
        }
        if (hasValue(dotNetObject.steps)) {
            this.widget.steps = dotNetObject.steps;
        }
        if (hasValue(dotNetObject.syncedSegmentsEnabled)) {
            this.widget.syncedSegmentsEnabled = dotNetObject.syncedSegmentsEnabled;
        }
        if (hasValue(dotNetObject.thumbsConstrained)) {
            this.widget.thumbsConstrained = dotNetObject.thumbsConstrained;
        }
        if (hasValue(dotNetObject.trackElement)) {
            this.widget.trackElement = dotNetObject.trackElement;
        }
        if (hasValue(dotNetObject.values)) {
            this.widget.values = dotNetObject.values;
        }
        if (hasValue(dotNetObject.widgetId)) {
            this.widget.id = dotNetObject.widgetId;
        }
    }
    
    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async own(handleOrHandles: any): Promise<void> {
        let { buildJsWatchHandle } = await import('./watchHandle');
        let jsHandleOrHandles = await buildJsWatchHandle(handleOrHandles, this.layerId, this.viewId) as any;
        this.widget.own(jsHandleOrHandles);
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async render(): Promise<any> {
        return this.widget.render();
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async when(callback: any,
        errback: any): Promise<any> {
        return await this.widget.when(callback,
            errback);
    }

    // region properties
    
    async getTickConfigs(): Promise<any> {
        if (!hasValue(this.widget.tickConfigs)) {
            return null;
        }
        
        let { buildDotNetTickConfig } = await import('./tickConfig');
        return await Promise.all(this.widget.tickConfigs.map(async i => await buildDotNetTickConfig(i)));
    }
    
    async setTickConfigs(value: any): Promise<void> {
        let { buildJsTickConfig } = await import('./tickConfig');
        this.widget.tickConfigs = await Promise.all(value.map(async i => await buildJsTickConfig(i))) as any;
    }
    
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetSliderViewModel } = await import('./sliderViewModel');
        return await buildDotNetSliderViewModel(this.widget.viewModel);
    }
    
    async setViewModel(value: any): Promise<void> {
        let { buildJsSliderViewModel } = await import('./sliderViewModel');
        this.widget.viewModel = await  buildJsSliderViewModel(value, this.layerId, this.viewId);
    }
    
    async getVisibleElements(): Promise<any> {
        if (!hasValue(this.widget.visibleElements)) {
            return null;
        }
        
        let { buildDotNetSliderVisibleElements } = await import('./sliderVisibleElements');
        return await buildDotNetSliderVisibleElements(this.widget.visibleElements);
    }
    
    async setVisibleElements(value: any): Promise<void> {
        let { buildJsSliderVisibleElements } = await import('./sliderVisibleElements');
        this.widget.visibleElements = await  buildJsSliderVisibleElements(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsSliderWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.hasInputCreatedFunction) && dotNetObject.hasInputCreatedFunction) {
        properties.inputCreatedFunction = async (inputElement,
        type,
        thumbIndex) => {

            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsInputCreatedFunction', inputElement,
            type,
            thumbIndex);
        };
    }
    if (hasValue(dotNetObject.hasInputFormatFunction) && dotNetObject.hasInputFormatFunction) {
        properties.inputFormatFunction = async (value,
        type,
        index) => {

            let func = new Function('value',
            'type',
            'index', dotNetObject.inputFormatFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }
    if (hasValue(dotNetObject.hasInputParseFunction) && dotNetObject.hasInputParseFunction) {
        properties.inputParseFunction = async (value,
        type,
        index) => {

            let func = new Function('value',
            'type',
            'index', dotNetObject.inputParseFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }
    if (hasValue(dotNetObject.hasLabelFormatFunction) && dotNetObject.hasLabelFormatFunction) {
        properties.labelFormatFunction = async (value,
        type,
        index) => {

            let func = new Function('value',
            'type',
            'index', dotNetObject.labelFormatFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }
    if (hasValue(dotNetObject.hasThumbCreatedFunction) && dotNetObject.hasThumbCreatedFunction) {
        properties.thumbCreatedFunction = async (index,
        value,
        thumbElement,
        labelElement) => {

            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsThumbCreatedFunction', index,
            value,
            thumbElement,
            labelElement);
        };
    }
    if (hasValue(dotNetObject.tickConfigs)) {
        let { buildJsTickConfig } = await import('./tickConfig');
        properties.tickConfigs = dotNetObject.tickConfigs.map(i => buildJsTickConfig(i)) as any;
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsSliderViewModel } = await import('./sliderViewModel');
        properties.viewModel = await buildJsSliderViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.visibleElements)) {
        let { buildJsSliderVisibleElements } = await import('./sliderVisibleElements');
        properties.visibleElements = await buildJsSliderVisibleElements(dotNetObject.visibleElements, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.container)) {
        properties.container = dotNetObject.container;
    }
    if (hasValue(dotNetObject.disabled)) {
        properties.disabled = dotNetObject.disabled;
    }
    if (hasValue(dotNetObject.draggableSegmentsEnabled)) {
        properties.draggableSegmentsEnabled = dotNetObject.draggableSegmentsEnabled;
    }
    if (hasValue(dotNetObject.effectiveMax)) {
        properties.effectiveMax = dotNetObject.effectiveMax;
    }
    if (hasValue(dotNetObject.effectiveMin)) {
        properties.effectiveMin = dotNetObject.effectiveMin;
    }
    if (hasValue(dotNetObject.icon)) {
        properties.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.labelInputsEnabled)) {
        properties.labelInputsEnabled = dotNetObject.labelInputsEnabled;
    }
    if (hasValue(dotNetObject.layout)) {
        properties.layout = dotNetObject.layout;
    }
    if (hasValue(dotNetObject.max)) {
        properties.max = dotNetObject.max;
    }
    if (hasValue(dotNetObject.min)) {
        properties.min = dotNetObject.min;
    }
    if (hasValue(dotNetObject.precision)) {
        properties.precision = dotNetObject.precision;
    }
    if (hasValue(dotNetObject.rangeLabelInputsEnabled)) {
        properties.rangeLabelInputsEnabled = dotNetObject.rangeLabelInputsEnabled;
    }
    if (hasValue(dotNetObject.snapOnClickEnabled)) {
        properties.snapOnClickEnabled = dotNetObject.snapOnClickEnabled;
    }
    if (hasValue(dotNetObject.steps)) {
        properties.steps = dotNetObject.steps;
    }
    if (hasValue(dotNetObject.syncedSegmentsEnabled)) {
        properties.syncedSegmentsEnabled = dotNetObject.syncedSegmentsEnabled;
    }
    if (hasValue(dotNetObject.thumbsConstrained)) {
        properties.thumbsConstrained = dotNetObject.thumbsConstrained;
    }
    if (hasValue(dotNetObject.trackElement)) {
        properties.trackElement = dotNetObject.trackElement;
    }
    if (hasValue(dotNetObject.values)) {
        properties.values = dotNetObject.values;
    }
    if (hasValue(dotNetObject.widgetId)) {
        properties.id = dotNetObject.widgetId;
    }
    let jsSlider = new Slider(properties);
    jsSlider.on('max-change', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsMaxChange', evt);
    });
    
    jsSlider.on('max-click', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsMaxClick', evt);
    });
    
    jsSlider.on('min-change', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsMinChange', evt);
    });
    
    jsSlider.on('min-click', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsMinClick', evt);
    });
    
    jsSlider.on('segment-click', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSegmentClick', evt);
    });
    
    jsSlider.on('segment-drag', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSegmentDrag', evt);
    });
    
    jsSlider.on('thumb-change', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsThumbChange', evt);
    });
    
    jsSlider.on('thumb-click', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsThumbClick', evt);
    });
    
    jsSlider.on('thumb-drag', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsThumbDrag', evt);
    });
    
    jsSlider.on('tick-click', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsTickClick', evt);
    });
    
    jsSlider.on('track-click', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsTrackClick', evt);
    });
    

    let { default: SliderWidgetWrapper } = await import('./sliderWidget');
    let sliderWidgetWrapper = new SliderWidgetWrapper(jsSlider);
    sliderWidgetWrapper.geoBlazorId = dotNetObject.id;
    sliderWidgetWrapper.viewId = viewId;
    sliderWidgetWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(sliderWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = sliderWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsSlider;
    
    let { buildDotNetSliderWidget } = await import('./sliderWidget');
    let dnInstantiatedObject = await buildDotNetSliderWidget(jsSlider);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type SliderWidget detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SliderWidget', e);
    }
    
    return jsSlider;
}


export async function buildDotNetSliderWidgetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSliderWidget: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.tickConfigs)) {
        let { buildDotNetTickConfig } = await import('./tickConfig');
        dotNetSliderWidget.tickConfigs = await Promise.all(jsObject.tickConfigs.map(async i => await buildDotNetTickConfig(i)));
    }
    if (hasValue(jsObject.viewModel)) {
        let { buildDotNetSliderViewModel } = await import('./sliderViewModel');
        dotNetSliderWidget.viewModel = await buildDotNetSliderViewModel(jsObject.viewModel);
    }
    if (hasValue(jsObject.visibleElements)) {
        let { buildDotNetSliderVisibleElements } = await import('./sliderVisibleElements');
        dotNetSliderWidget.visibleElements = await buildDotNetSliderVisibleElements(jsObject.visibleElements);
    }
    if (hasValue(jsObject.container)) {
        dotNetSliderWidget.container = jsObject.container;
    }
    if (hasValue(jsObject.disabled)) {
        dotNetSliderWidget.disabled = jsObject.disabled;
    }
    if (hasValue(jsObject.draggableSegmentsEnabled)) {
        dotNetSliderWidget.draggableSegmentsEnabled = jsObject.draggableSegmentsEnabled;
    }
    if (hasValue(jsObject.effectiveMax)) {
        dotNetSliderWidget.effectiveMax = jsObject.effectiveMax;
    }
    if (hasValue(jsObject.effectiveMin)) {
        dotNetSliderWidget.effectiveMin = jsObject.effectiveMin;
    }
    if (hasValue(jsObject.effectiveSegmentElements)) {
        dotNetSliderWidget.effectiveSegmentElements = jsObject.effectiveSegmentElements;
    }
    if (hasValue(jsObject.icon)) {
        dotNetSliderWidget.icon = jsObject.icon;
    }
    if (hasValue(jsObject.inputCreatedFunction)) {
        dotNetSliderWidget.inputCreatedFunction = jsObject.inputCreatedFunction;
    }
    if (hasValue(jsObject.inputFormatFunction)) {
        dotNetSliderWidget.inputFormatFunction = jsObject.inputFormatFunction;
    }
    if (hasValue(jsObject.inputParseFunction)) {
        dotNetSliderWidget.inputParseFunction = jsObject.inputParseFunction;
    }
    if (hasValue(jsObject.label)) {
        dotNetSliderWidget.label = jsObject.label;
    }
    if (hasValue(jsObject.labelElements)) {
        dotNetSliderWidget.labelElements = jsObject.labelElements;
    }
    if (hasValue(jsObject.labelFormatFunction)) {
        dotNetSliderWidget.labelFormatFunction = jsObject.labelFormatFunction;
    }
    if (hasValue(jsObject.labelInputsEnabled)) {
        dotNetSliderWidget.labelInputsEnabled = jsObject.labelInputsEnabled;
    }
    if (hasValue(jsObject.labels)) {
        dotNetSliderWidget.labels = jsObject.labels;
    }
    if (hasValue(jsObject.layout)) {
        dotNetSliderWidget.layout = jsObject.layout;
    }
    if (hasValue(jsObject.max)) {
        dotNetSliderWidget.max = jsObject.max;
    }
    if (hasValue(jsObject.maxLabelElement)) {
        dotNetSliderWidget.maxLabelElement = jsObject.maxLabelElement;
    }
    if (hasValue(jsObject.min)) {
        dotNetSliderWidget.min = jsObject.min;
    }
    if (hasValue(jsObject.minLabelElement)) {
        dotNetSliderWidget.minLabelElement = jsObject.minLabelElement;
    }
    if (hasValue(jsObject.precision)) {
        dotNetSliderWidget.precision = jsObject.precision;
    }
    if (hasValue(jsObject.rangeLabelInputsEnabled)) {
        dotNetSliderWidget.rangeLabelInputsEnabled = jsObject.rangeLabelInputsEnabled;
    }
    if (hasValue(jsObject.segmentElements)) {
        dotNetSliderWidget.segmentElements = jsObject.segmentElements;
    }
    if (hasValue(jsObject.snapOnClickEnabled)) {
        dotNetSliderWidget.snapOnClickEnabled = jsObject.snapOnClickEnabled;
    }
    if (hasValue(jsObject.state)) {
        dotNetSliderWidget.state = jsObject.state;
    }
    if (hasValue(jsObject.steps)) {
        dotNetSliderWidget.steps = jsObject.steps;
    }
    if (hasValue(jsObject.syncedSegmentsEnabled)) {
        dotNetSliderWidget.syncedSegmentsEnabled = jsObject.syncedSegmentsEnabled;
    }
    if (hasValue(jsObject.thumbCreatedFunction)) {
        dotNetSliderWidget.thumbCreatedFunction = jsObject.thumbCreatedFunction;
    }
    if (hasValue(jsObject.thumbElements)) {
        dotNetSliderWidget.thumbElements = jsObject.thumbElements;
    }
    if (hasValue(jsObject.thumbsConstrained)) {
        dotNetSliderWidget.thumbsConstrained = jsObject.thumbsConstrained;
    }
    if (hasValue(jsObject.tickElements)) {
        dotNetSliderWidget.tickElements = jsObject.tickElements;
    }
    if (hasValue(jsObject.trackElement)) {
        dotNetSliderWidget.trackElement = jsObject.trackElement;
    }
    if (hasValue(jsObject.type)) {
        dotNetSliderWidget.type = jsObject.type;
    }
    if (hasValue(jsObject.values)) {
        dotNetSliderWidget.values = jsObject.values;
    }
    if (hasValue(jsObject.id)) {
        dotNetSliderWidget.widgetId = jsObject.id;
    }

    dotNetSliderWidget.id = lookupGeoBlazorId(jsObject);

    return dotNetSliderWidget;
}

