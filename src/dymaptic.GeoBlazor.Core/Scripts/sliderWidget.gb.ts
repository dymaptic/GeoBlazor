// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import Slider from '@arcgis/core/widgets/Slider';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SliderWidgetGenerated implements IPropertyWrapper {
    public widget: Slider;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: Slider) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    
    // region properties
    
    async getTickConfigs(): Promise<any> {
        if (!hasValue(this.widget.tickConfigs)) {
            return null;
        }
        
        let { buildDotNetTickConfig } = await import('./tickConfig');
        return await Promise.all(this.widget.tickConfigs.map(async i => await buildDotNetTickConfig(i)));
    }
    
    async setTickConfigs(value: any): Promise<void> {
        let { buildJsTickConfig } = await import('./tickConfig');
        this.widget.tickConfigs = await Promise.all(value.map(async i => await buildJsTickConfig(i))) as any;
    }
    
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetSliderViewModel } = await import('./sliderViewModel');
        return await buildDotNetSliderViewModel(this.widget.viewModel);
    }
    async setViewModel(value: any): Promise<void> {
        let { buildJsSliderViewModel } = await import('./sliderViewModel');
        this.widget.viewModel = await  buildJsSliderViewModel(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}

export async function buildDotNetSliderWidgetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSliderWidget: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.tickConfigs)) {
            let { buildDotNetTickConfig } = await import('./tickConfig');
            dotNetSliderWidget.tickConfigs = await Promise.all(jsObject.tickConfigs.map(async i => await buildDotNetTickConfig(i)));
        }
        if (hasValue(jsObject.viewModel)) {
            let { buildDotNetSliderViewModel } = await import('./sliderViewModel');
            dotNetSliderWidget.viewModel = await buildDotNetSliderViewModel(jsObject.viewModel);
        }
        if (hasValue(jsObject.disabled)) {
            dotNetSliderWidget.disabled = jsObject.disabled;
        }
        if (hasValue(jsObject.draggableSegmentsEnabled)) {
            dotNetSliderWidget.draggableSegmentsEnabled = jsObject.draggableSegmentsEnabled;
        }
        if (hasValue(jsObject.effectiveMax)) {
            dotNetSliderWidget.effectiveMax = jsObject.effectiveMax;
        }
        if (hasValue(jsObject.effectiveMin)) {
            dotNetSliderWidget.effectiveMin = jsObject.effectiveMin;
        }
        if (hasValue(jsObject.effectiveSegmentElements)) {
            dotNetSliderWidget.effectiveSegmentElements = jsObject.effectiveSegmentElements;
        }
        if (hasValue(jsObject.inputCreatedFunction)) {
            dotNetSliderWidget.inputCreatedFunction = jsObject.inputCreatedFunction;
        }
        if (hasValue(jsObject.inputFormatFunction)) {
            dotNetSliderWidget.inputFormatFunction = jsObject.inputFormatFunction;
        }
        if (hasValue(jsObject.inputParseFunction)) {
            dotNetSliderWidget.inputParseFunction = jsObject.inputParseFunction;
        }
        if (hasValue(jsObject.labelElements)) {
            dotNetSliderWidget.labelElements = jsObject.labelElements;
        }
        if (hasValue(jsObject.labelFormatFunction)) {
            dotNetSliderWidget.labelFormatFunction = jsObject.labelFormatFunction;
        }
        if (hasValue(jsObject.labelInputsEnabled)) {
            dotNetSliderWidget.labelInputsEnabled = jsObject.labelInputsEnabled;
        }
        if (hasValue(jsObject.labels)) {
            dotNetSliderWidget.labels = jsObject.labels;
        }
        if (hasValue(jsObject.layout)) {
            dotNetSliderWidget.layout = jsObject.layout;
        }
        if (hasValue(jsObject.max)) {
            dotNetSliderWidget.max = jsObject.max;
        }
        if (hasValue(jsObject.maxLabelElement)) {
            dotNetSliderWidget.maxLabelElement = jsObject.maxLabelElement;
        }
        if (hasValue(jsObject.min)) {
            dotNetSliderWidget.min = jsObject.min;
        }
        if (hasValue(jsObject.minLabelElement)) {
            dotNetSliderWidget.minLabelElement = jsObject.minLabelElement;
        }
        if (hasValue(jsObject.precision)) {
            dotNetSliderWidget.precision = jsObject.precision;
        }
        if (hasValue(jsObject.rangeLabelInputsEnabled)) {
            dotNetSliderWidget.rangeLabelInputsEnabled = jsObject.rangeLabelInputsEnabled;
        }
        if (hasValue(jsObject.segmentElements)) {
            dotNetSliderWidget.segmentElements = jsObject.segmentElements;
        }
        if (hasValue(jsObject.snapOnClickEnabled)) {
            dotNetSliderWidget.snapOnClickEnabled = jsObject.snapOnClickEnabled;
        }
        if (hasValue(jsObject.state)) {
            dotNetSliderWidget.state = jsObject.state;
        }
        if (hasValue(jsObject.steps)) {
            dotNetSliderWidget.steps = jsObject.steps;
        }
        if (hasValue(jsObject.syncedSegmentsEnabled)) {
            dotNetSliderWidget.syncedSegmentsEnabled = jsObject.syncedSegmentsEnabled;
        }
        if (hasValue(jsObject.thumbCreatedFunction)) {
            dotNetSliderWidget.thumbCreatedFunction = jsObject.thumbCreatedFunction;
        }
        if (hasValue(jsObject.thumbElements)) {
            dotNetSliderWidget.thumbElements = jsObject.thumbElements;
        }
        if (hasValue(jsObject.thumbsConstrained)) {
            dotNetSliderWidget.thumbsConstrained = jsObject.thumbsConstrained;
        }
        if (hasValue(jsObject.tickElements)) {
            dotNetSliderWidget.tickElements = jsObject.tickElements;
        }
        if (hasValue(jsObject.trackElement)) {
            dotNetSliderWidget.trackElement = jsObject.trackElement;
        }
        if (hasValue(jsObject.type)) {
            dotNetSliderWidget.type = jsObject.type;
        }
        if (hasValue(jsObject.values)) {
            dotNetSliderWidget.values = jsObject.values;
        }
        if (hasValue(jsObject.visibleElements)) {
            dotNetSliderWidget.visibleElements = jsObject.visibleElements;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSliderWidget.id = k;
                break;
            }
        }
    }

    return dotNetSliderWidget;
}

