import { buildDotNetRelationshipSchemes } from './relationshipSchemes';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import RelationshipSchemes = __esri.RelationshipSchemes;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsRelationshipSchemesGenerated(dotNetObject: any): Promise<any> {
    let jsRelationshipSchemes: any = {}

    if (hasValue(dotNetObject.basemapId)) {
        jsRelationshipSchemes.basemapId = dotNetObject.basemapId;
    }
    if (hasValue(dotNetObject.basemapTheme)) {
        jsRelationshipSchemes.basemapTheme = dotNetObject.basemapTheme;
    }
    if (hasValue(dotNetObject.primaryScheme)) {
        jsRelationshipSchemes.primaryScheme = dotNetObject.primaryScheme;
    }
    if (hasValue(dotNetObject.secondarySchemes)) {
        jsRelationshipSchemes.secondarySchemes = dotNetObject.secondarySchemes;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsRelationshipSchemes);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRelationshipSchemes;
    
    let dnInstantiatedObject = await buildDotNetRelationshipSchemes(jsRelationshipSchemes);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RelationshipSchemes', e);
    }
    
    return jsRelationshipSchemes;
}
export async function buildDotNetRelationshipSchemesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRelationshipSchemes: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.basemapId)) {
            dotNetRelationshipSchemes.basemapId = jsObject.basemapId;
        }
        if (hasValue(jsObject.basemapTheme)) {
            dotNetRelationshipSchemes.basemapTheme = jsObject.basemapTheme;
        }
        if (hasValue(jsObject.primaryScheme)) {
            dotNetRelationshipSchemes.primaryScheme = jsObject.primaryScheme;
        }
        if (hasValue(jsObject.secondarySchemes)) {
            dotNetRelationshipSchemes.secondarySchemes = jsObject.secondarySchemes;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRelationshipSchemes.id = k;
                break;
            }
        }
    }

    return dotNetRelationshipSchemes;
}

