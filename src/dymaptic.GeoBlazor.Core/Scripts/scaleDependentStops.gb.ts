// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetScaleDependentStops } from './scaleDependentStops';

export async function buildJsScaleDependentStopsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsScaleDependentStops: any = {};
    if (hasValue(dotNetObject.stops) && dotNetObject.stops.length > 0) {
        let { buildJsSizeStop } = await import('./sizeStop');
        jsScaleDependentStops.stops = await Promise.all(dotNetObject.stops.map(async i => await buildJsSizeStop(i))) as any;
    }

    if (hasValue(dotNetObject.target)) {
        jsScaleDependentStops.target = dotNetObject.target;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        jsScaleDependentStops.valueExpression = dotNetObject.valueExpression;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsScaleDependentStops);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsScaleDependentStops;
    
    return jsScaleDependentStops;
}


export async function buildDotNetScaleDependentStopsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetScaleDependentStops: any = {};
    
    if (hasValue(jsObject.stops)) {
        let { buildDotNetSizeStop } = await import('./sizeStop');
        dotNetScaleDependentStops.stops = await Promise.all(jsObject.stops.map(async i => await buildDotNetSizeStop(i)));
    }
    
    if (hasValue(jsObject.target)) {
        dotNetScaleDependentStops.target = jsObject.target;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetScaleDependentStops.type = jsObject.type;
    }
    
    if (hasValue(jsObject.valueExpression)) {
        dotNetScaleDependentStops.valueExpression = jsObject.valueExpression;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetScaleDependentStops.id = geoBlazorId;
    }

    return dotNetScaleDependentStops;
}

