// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetScaleDependentStops } from './scaleDependentStops';

export async function buildJsScaleDependentStopsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsScaleDependentStops: any = {};

    if (hasValue(dotNetObject.stops)) {
        const { id, dotNetComponentReference, ...sanitizedStops } = dotNetObject.stops;
        jsScaleDependentStops.stops = sanitizedStops;
    }
    if (hasValue(dotNetObject.target)) {
        jsScaleDependentStops.target = dotNetObject.target;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        jsScaleDependentStops.valueExpression = dotNetObject.valueExpression;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsScaleDependentStops);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsScaleDependentStops;
    
    let { buildDotNetScaleDependentStops } = await import('./scaleDependentStops');
    let dnInstantiatedObject = await buildDotNetScaleDependentStops(jsScaleDependentStops);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type ScaleDependentStops detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ScaleDependentStops', e);
    }
    
    return jsScaleDependentStops;
}


export async function buildDotNetScaleDependentStopsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetScaleDependentStops: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.stops)) {
        dotNetScaleDependentStops.stops = jsObject.stops;
    }
    if (hasValue(jsObject.target)) {
        dotNetScaleDependentStops.target = jsObject.target;
    }
    if (hasValue(jsObject.type)) {
        dotNetScaleDependentStops.type = jsObject.type;
    }
    if (hasValue(jsObject.valueExpression)) {
        dotNetScaleDependentStops.valueExpression = jsObject.valueExpression;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetScaleDependentStops.id = k;
                break;
            }
        }
    }

    return dotNetScaleDependentStops;
}

