// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetScaleDependentStops } from './scaleDependentStops';

export async function buildJsScaleDependentStopsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsScaleDependentStops: any = {};
    if (hasValue(dotNetObject.stops)) {
        let { buildJsSizeStop } = await import('./sizeStop');
        jsScaleDependentStops.stops = await Promise.all(dotNetObject.stops.map(async i => await buildJsSizeStop(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.target)) {
        jsScaleDependentStops.target = dotNetObject.target;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        jsScaleDependentStops.valueExpression = dotNetObject.valueExpression;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsScaleDependentStops);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsScaleDependentStops;
    
    let { buildDotNetScaleDependentStops } = await import('./scaleDependentStops');
    let dnInstantiatedObject = await buildDotNetScaleDependentStops(jsScaleDependentStops, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type ScaleDependentStops detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ScaleDependentStops', e);
    }
    
    return jsScaleDependentStops;
}


export async function buildDotNetScaleDependentStopsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsScaleDependentStops } = await import('./scaleDependentStops');
        jsComponentRef = await buildJsScaleDependentStops(jsObject, layerId, viewId);
    }
    
    let dotNetScaleDependentStops: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.stops)) {
        let { buildDotNetSizeStop } = await import('./sizeStop');
        dotNetScaleDependentStops.stops = await Promise.all(jsObject.stops.map(async i => await buildDotNetSizeStop(i, layerId, viewId)));
    }
    if (hasValue(jsObject.target)) {
        dotNetScaleDependentStops.target = jsObject.target;
    }
    if (hasValue(jsObject.type)) {
        dotNetScaleDependentStops.type = jsObject.type;
    }
    if (hasValue(jsObject.valueExpression)) {
        dotNetScaleDependentStops.valueExpression = jsObject.valueExpression;
    }


    if (hasValue(geoBlazorId)) {
        dotNetScaleDependentStops.id = geoBlazorId;
    }

    return dotNetScaleDependentStops;
}

