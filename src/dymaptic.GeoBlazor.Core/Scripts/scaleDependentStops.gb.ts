// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetScaleDependentStops } from './scaleDependentStops';

export async function buildJsScaleDependentStopsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsScaleDependentStops: any = {}

    if (hasValue(dotNetObject.stops)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedStops } = dotNetObject.stops;
        jsScaleDependentStops.stops = sanitizedStops;
    }
    if (hasValue(dotNetObject.target)) {
        jsScaleDependentStops.target = dotNetObject.target;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        jsScaleDependentStops.valueExpression = dotNetObject.valueExpression;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsScaleDependentStops);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsScaleDependentStops;
    
    let dnInstantiatedObject = await buildDotNetScaleDependentStops(jsScaleDependentStops);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ScaleDependentStops', e);
    }
    
    return jsScaleDependentStops;
}

export async function buildDotNetScaleDependentStopsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetScaleDependentStops: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.stops)) {
            dotNetScaleDependentStops.stops = jsObject.stops;
        }
        if (hasValue(jsObject.target)) {
            dotNetScaleDependentStops.target = jsObject.target;
        }
        if (hasValue(jsObject.type)) {
            dotNetScaleDependentStops.type = jsObject.type;
        }
        if (hasValue(jsObject.valueExpression)) {
            dotNetScaleDependentStops.valueExpression = jsObject.valueExpression;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetScaleDependentStops.id = k;
                break;
            }
        }
    }

    return dotNetScaleDependentStops;
}

