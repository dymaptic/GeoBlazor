// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetSlicePlane } from './slicePlane';
import SlicePlane from '@arcgis/core/analysis/SlicePlane';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsSlicePlaneGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSlicePlane = new SlicePlane();
    if (hasValue(dotNetObject.position)) {
        let { buildJsPoint } = await import('./point');
        jsSlicePlane.position = buildJsPoint(dotNetObject.position) as any;
    }

    if (hasValue(dotNetObject.heading)) {
        jsSlicePlane.heading = dotNetObject.heading;
    }
    if (hasValue(dotNetObject.height)) {
        jsSlicePlane.height = dotNetObject.height;
    }
    if (hasValue(dotNetObject.tilt)) {
        jsSlicePlane.tilt = dotNetObject.tilt;
    }
    if (hasValue(dotNetObject.width)) {
        jsSlicePlane.width = dotNetObject.width;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsSlicePlane);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSlicePlane;
    
    let dnInstantiatedObject = await buildDotNetSlicePlane(jsSlicePlane);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SlicePlane', e);
    }
    
    return jsSlicePlane;
}

export async function buildDotNetSlicePlaneGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSlicePlane: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.position)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetSlicePlane.position = buildDotNetPoint(jsObject.position);
        }
        if (hasValue(jsObject.heading)) {
            dotNetSlicePlane.heading = jsObject.heading;
        }
        if (hasValue(jsObject.height)) {
            dotNetSlicePlane.height = jsObject.height;
        }
        if (hasValue(jsObject.tilt)) {
            dotNetSlicePlane.tilt = jsObject.tilt;
        }
        if (hasValue(jsObject.type)) {
            dotNetSlicePlane.type = jsObject.type;
        }
        if (hasValue(jsObject.width)) {
            dotNetSlicePlane.width = jsObject.width;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSlicePlane.id = k;
                break;
            }
        }
    }

    return dotNetSlicePlane;
}

