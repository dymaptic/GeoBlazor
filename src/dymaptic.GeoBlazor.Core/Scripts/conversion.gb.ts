import { buildDotNetConversion } from './conversion';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import Conversion from '@arcgis/core/widgets/CoordinateConversion/support/Conversion';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsConversionGenerated(dotNetObject: any): Promise<any> {
    let jsConversion = new Conversion();
    if (hasValue(dotNetObject.format)) {
        let { buildJsFormat } = await import('./format');
        jsConversion.format = await buildJsFormat(dotNetObject.format, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.position)) {
        let { buildJsConversionPosition } = await import('./conversionPosition');
        jsConversion.position = await buildJsConversionPosition(dotNetObject.position, layerId, viewId) as any;
    }

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsConversion);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsConversion;
    
    let dnInstantiatedObject = await buildDotNetConversion(jsConversion);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Conversion', e);
    }
    
    return jsConversion;
}
export async function buildDotNetConversionGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetConversion: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.format)) {
            let { buildDotNetFormat } = await import('./format');
            dotNetConversion.format = await buildDotNetFormat(jsObject.format);
        }
        if (hasValue(jsObject.position)) {
            let { buildDotNetConversionPosition } = await import('./conversionPosition');
            dotNetConversion.position = await buildDotNetConversionPosition(jsObject.position);
        }
        if (hasValue(jsObject.displayCoordinate)) {
            dotNetConversion.displayCoordinate = jsObject.displayCoordinate;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetConversion.id = k;
                break;
            }
        }
    }

    return dotNetConversion;
}

