// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetVoxelOpacityStop } from './voxelOpacityStop';

export async function buildJsVoxelOpacityStopGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsVoxelOpacityStop: any = {};

    if (hasValue(dotNetObject.opacity)) {
        jsVoxelOpacityStop.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.position)) {
        jsVoxelOpacityStop.position = dotNetObject.position;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsVoxelOpacityStop);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsVoxelOpacityStop;
    
    return jsVoxelOpacityStop;
}


export async function buildDotNetVoxelOpacityStopGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVoxelOpacityStop: any = {};
    
    if (hasValue(jsObject.opacity)) {
        dotNetVoxelOpacityStop.opacity = jsObject.opacity;
    }
    
    if (hasValue(jsObject.position)) {
        dotNetVoxelOpacityStop.position = jsObject.position;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetVoxelOpacityStop.id = geoBlazorId;
    }

    return dotNetVoxelOpacityStop;
}

