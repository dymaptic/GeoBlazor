// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import LocalMediaElementSource from '@arcgis/core/layers/support/LocalMediaElementSource';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetLocalMediaElementSource } from './localMediaElementSource';

export async function buildJsLocalMediaElementSourceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.elements) && dotNetObject.elements.length > 0) {
        properties.elements = dotNetObject.elements;
    }
    let jsLocalMediaElementSource = new LocalMediaElementSource(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsLocalMediaElementSource);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLocalMediaElementSource;
    
    return jsLocalMediaElementSource;
}


export async function buildDotNetLocalMediaElementSourceGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLocalMediaElementSource: any = {};
    
    if (hasValue(jsObject.elements)) {
        dotNetLocalMediaElementSource.elements = removeCircularReferences(jsObject.elements);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetLocalMediaElementSource.id = geoBlazorId;
    }

    return dotNetLocalMediaElementSource;
}

