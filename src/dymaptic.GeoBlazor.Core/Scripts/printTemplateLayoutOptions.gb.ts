// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetPrintTemplateLayoutOptions } from './printTemplateLayoutOptions';

export async function buildJsPrintTemplateLayoutOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPrintTemplateLayoutOptions: any = {};
    if (hasValue(dotNetObject.legendLayers)) {
        let { buildJsILegendLayer } = await import('./iLegendLayer');
        jsPrintTemplateLayoutOptions.legendLayers = await Promise.all(dotNetObject.legendLayers.map(async i => await buildJsILegendLayer(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.authorText)) {
        jsPrintTemplateLayoutOptions.authorText = dotNetObject.authorText;
    }
    if (hasValue(dotNetObject.copyrightText)) {
        jsPrintTemplateLayoutOptions.copyrightText = dotNetObject.copyrightText;
    }
    if (hasValue(dotNetObject.customTextElements)) {
        jsPrintTemplateLayoutOptions.customTextElements = dotNetObject.customTextElements;
    }
    if (hasValue(dotNetObject.elementOverrides)) {
        jsPrintTemplateLayoutOptions.elementOverrides = dotNetObject.elementOverrides;
    }
    if (hasValue(dotNetObject.scalebarUnit)) {
        jsPrintTemplateLayoutOptions.scalebarUnit = dotNetObject.scalebarUnit;
    }
    if (hasValue(dotNetObject.titleText)) {
        jsPrintTemplateLayoutOptions.titleText = dotNetObject.titleText;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsPrintTemplateLayoutOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPrintTemplateLayoutOptions;
    
    let dnInstantiatedObject = await buildDotNetPrintTemplateLayoutOptions(jsPrintTemplateLayoutOptions);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PrintTemplateLayoutOptions', e);
    }
    
    return jsPrintTemplateLayoutOptions;
}

export async function buildDotNetPrintTemplateLayoutOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPrintTemplateLayoutOptions: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.authorText)) {
        dotNetPrintTemplateLayoutOptions.authorText = jsObject.authorText;
    }
    if (hasValue(jsObject.copyrightText)) {
        dotNetPrintTemplateLayoutOptions.copyrightText = jsObject.copyrightText;
    }
    if (hasValue(jsObject.customTextElements)) {
        dotNetPrintTemplateLayoutOptions.customTextElements = jsObject.customTextElements;
    }
    if (hasValue(jsObject.elementOverrides)) {
        dotNetPrintTemplateLayoutOptions.elementOverrides = jsObject.elementOverrides;
    }
    if (hasValue(jsObject.scalebarUnit)) {
        dotNetPrintTemplateLayoutOptions.scalebarUnit = jsObject.scalebarUnit;
    }
    if (hasValue(jsObject.titleText)) {
        dotNetPrintTemplateLayoutOptions.titleText = jsObject.titleText;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPrintTemplateLayoutOptions.id = k;
                break;
            }
        }
    }

    return dotNetPrintTemplateLayoutOptions;
}

