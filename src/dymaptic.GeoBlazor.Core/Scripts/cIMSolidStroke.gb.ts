// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCIMSolidStroke } from './cIMSolidStroke';

export async function buildJsCIMSolidStrokeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCIMSolidStroke: any = {};
    if (hasValue(dotNetObject.effects)) {
        let { buildJsICIMGeometricEffect } = await import('./iCIMGeometricEffect');
        jsCIMSolidStroke.effects = dotNetObject.effects.map(i => buildJsICIMGeometricEffect(i)) as any;
    }

    if (hasValue(dotNetObject.capStyle)) {
        jsCIMSolidStroke.capStyle = dotNetObject.capStyle;
    }
    if (hasValue(dotNetObject.closeCaps3D)) {
        jsCIMSolidStroke.closeCaps3D = dotNetObject.closeCaps3D;
    }
    if (hasValue(dotNetObject.color)) {
        jsCIMSolidStroke.color = dotNetObject.color;
    }
    if (hasValue(dotNetObject.colorLocked)) {
        jsCIMSolidStroke.colorLocked = dotNetObject.colorLocked;
    }
    if (hasValue(dotNetObject.enable)) {
        jsCIMSolidStroke.enable = dotNetObject.enable;
    }
    if (hasValue(dotNetObject.joinStyle)) {
        jsCIMSolidStroke.joinStyle = dotNetObject.joinStyle;
    }
    if (hasValue(dotNetObject.lineStyle3D)) {
        jsCIMSolidStroke.lineStyle3D = dotNetObject.lineStyle3D;
    }
    if (hasValue(dotNetObject.miterLimit)) {
        jsCIMSolidStroke.miterLimit = dotNetObject.miterLimit;
    }
    if (hasValue(dotNetObject.name)) {
        jsCIMSolidStroke.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.overprint)) {
        jsCIMSolidStroke.overprint = dotNetObject.overprint;
    }
    if (hasValue(dotNetObject.primitiveName)) {
        jsCIMSolidStroke.primitiveName = dotNetObject.primitiveName;
    }
    if (hasValue(dotNetObject.width)) {
        jsCIMSolidStroke.width = dotNetObject.width;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCIMSolidStroke);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCIMSolidStroke;
    
    let { buildDotNetCIMSolidStroke } = await import('./cIMSolidStroke');
    let dnInstantiatedObject = await buildDotNetCIMSolidStroke(jsCIMSolidStroke);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type CIMSolidStroke detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CIMSolidStroke', e);
    }
    
    return jsCIMSolidStroke;
}


export async function buildDotNetCIMSolidStrokeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCIMSolidStroke: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.effects)) {
        let { buildDotNetICIMGeometricEffect } = await import('./iCIMGeometricEffect');
        dotNetCIMSolidStroke.effects = jsObject.effects.map(i => buildDotNetICIMGeometricEffect(i));
    }
    if (hasValue(jsObject.capStyle)) {
        dotNetCIMSolidStroke.capStyle = jsObject.capStyle;
    }
    if (hasValue(jsObject.closeCaps3D)) {
        dotNetCIMSolidStroke.closeCaps3D = jsObject.closeCaps3D;
    }
    if (hasValue(jsObject.color)) {
        dotNetCIMSolidStroke.color = jsObject.color;
    }
    if (hasValue(jsObject.colorLocked)) {
        dotNetCIMSolidStroke.colorLocked = jsObject.colorLocked;
    }
    if (hasValue(jsObject.enable)) {
        dotNetCIMSolidStroke.enable = jsObject.enable;
    }
    if (hasValue(jsObject.joinStyle)) {
        dotNetCIMSolidStroke.joinStyle = jsObject.joinStyle;
    }
    if (hasValue(jsObject.lineStyle3D)) {
        dotNetCIMSolidStroke.lineStyle3D = jsObject.lineStyle3D;
    }
    if (hasValue(jsObject.miterLimit)) {
        dotNetCIMSolidStroke.miterLimit = jsObject.miterLimit;
    }
    if (hasValue(jsObject.name)) {
        dotNetCIMSolidStroke.name = jsObject.name;
    }
    if (hasValue(jsObject.overprint)) {
        dotNetCIMSolidStroke.overprint = jsObject.overprint;
    }
    if (hasValue(jsObject.primitiveName)) {
        dotNetCIMSolidStroke.primitiveName = jsObject.primitiveName;
    }
    if (hasValue(jsObject.type)) {
        dotNetCIMSolidStroke.type = jsObject.type;
    }
    if (hasValue(jsObject.width)) {
        dotNetCIMSolidStroke.width = jsObject.width;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCIMSolidStroke.id = geoBlazorId;
    }

    return dotNetCIMSolidStroke;
}

