// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetScheme } from './scheme';

export async function buildJsSchemeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsScheme: any = {}
    if (hasValue(dotNetObject.labelingInfo)) {
        let { buildJsLabel } = await import('./label');
        jsScheme.labelingInfo = await Promise.all(dotNetObject.labelingInfo.map(async i => await buildJsLabel(i))) as any;
    }

    if (hasValue(dotNetObject.fieldName)) {
        jsScheme.fieldName = dotNetObject.fieldName;
    }
    if (hasValue(dotNetObject.name)) {
        jsScheme.name = dotNetObject.name;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsScheme);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsScheme;
    
    let dnInstantiatedObject = await buildDotNetScheme(jsScheme);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Scheme', e);
    }
    
    return jsScheme;
}

export async function buildDotNetSchemeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetScheme: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.labelingInfo)) {
            let { buildDotNetLabel } = await import('./label');
            dotNetScheme.labelingInfo = await Promise.all(jsObject.labelingInfo.map(async i => await buildDotNetLabel(i)));
        }
    if (hasValue(jsObject.fieldName)) {
        dotNetScheme.fieldName = jsObject.fieldName;
    }
    if (hasValue(jsObject.name)) {
        dotNetScheme.name = jsObject.name;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetScheme.id = k;
                break;
            }
        }
    }

    return dotNetScheme;
}

