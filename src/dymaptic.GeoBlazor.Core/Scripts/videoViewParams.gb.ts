// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import VideoViewParams = __esri.VideoViewParams;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class VideoViewParamsGenerated implements IPropertyWrapper {
    public component: VideoViewParams;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: VideoViewParams) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getLayer(): Promise<any> {
        if (!hasValue(this.component.layer)) {
            return null;
        }
        
        let { buildDotNetVideoLayer } = await import('./videoLayer');
        return await buildDotNetVideoLayer(this.component.layer);
    }
    async setLayer(value: any): Promise<void> {
        let { buildJsVideoLayer } = await import('./videoLayer');
        this.component.layer = await  buildJsVideoLayer(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsVideoViewParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsVideoViewParams: any = {}
    if (hasValue(dotNetObject.layer)) {
        let { buildJsVideoLayer } = await import('./videoLayer');
        jsVideoViewParams.layer = await buildJsVideoLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.container)) {
        jsVideoViewParams.container = dotNetObject.container;
    }

    let { default: VideoViewParamsWrapper } = await import('./videoViewParams');
    let videoViewParamsWrapper = new VideoViewParamsWrapper(jsVideoViewParams);
    videoViewParamsWrapper.geoBlazorId = dotNetObject.id;
    videoViewParamsWrapper.viewId = viewId;
    videoViewParamsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(videoViewParamsWrapper);
    jsObjectRefs[dotNetObject.id] = videoViewParamsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsVideoViewParams;
    let { buildDotNetVideoViewParams } = await import('./videoViewParams');
    let dnInstantiatedObject = await buildDotNetVideoViewParams(jsVideoViewParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for VideoViewParams', e);
    }
    
    return jsVideoViewParams;
}
export async function buildDotNetVideoViewParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVideoViewParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.container)) {
            dotNetVideoViewParams.container = jsObject.container;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetVideoViewParams.id = k;
                break;
            }
        }
    }

    return dotNetVideoViewParams;
}

