// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import AttributeBinsGraphic from '@arcgis/core/AttributeBinsGraphic';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class AttributeBinsGraphicGenerated implements IPropertyWrapper {
    public component: AttributeBinsGraphic;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: AttributeBinsGraphic) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {

        if (hasValue(dotNetObject.stackedAttributes)) {
            this.component.stackedAttributes = dotNetObject.stackedAttributes;
        }
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsAttributeBinsGraphicGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.stackedAttributes)) {
        properties.stackedAttributes = dotNetObject.stackedAttributes;
    }
    let jsAttributeBinsGraphic = new AttributeBinsGraphic(properties);

    let { default: AttributeBinsGraphicWrapper } = await import('./attributeBinsGraphic');
    let attributeBinsGraphicWrapper = new AttributeBinsGraphicWrapper(jsAttributeBinsGraphic);
    attributeBinsGraphicWrapper.geoBlazorId = dotNetObject.id;
    attributeBinsGraphicWrapper.viewId = viewId;
    attributeBinsGraphicWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = attributeBinsGraphicWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsAttributeBinsGraphic;
    
    return jsAttributeBinsGraphic;
}


export async function buildDotNetAttributeBinsGraphicGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAttributeBinsGraphic: any = {};
    
    if (hasValue(jsObject.stackedAttributes)) {
        dotNetAttributeBinsGraphic.stackedAttributes = jsObject.stackedAttributes;
    }
    

    return dotNetAttributeBinsGraphic;
}

