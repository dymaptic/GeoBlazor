// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import summaryStatisticsForAge from '@arcgis/core/smartMapping/statistics/summaryStatisticsForAge';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SummaryStatisticsForAgeGenerated implements IPropertyWrapper {
    public component: summaryStatisticsForAge;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: summaryStatisticsForAge) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async summaryStatisticsForAge(parameters: any): Promise<any> {
        let { buildJsSummaryStatisticsForAgeSummaryStatisticsForAgeParams } = await import('./summaryStatisticsForAgeSummaryStatisticsForAgeParams');
        let jsparameters = await buildJsSummaryStatisticsForAgeSummaryStatisticsForAgeParams(parameters, this.layerId, this.viewId) as any;
        return await this.component.summaryStatisticsForAge(jsparameters);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsSummaryStatisticsForAgeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jssummaryStatisticsForAge = new summaryStatisticsForAge();


    let { default: SummaryStatisticsForAgeWrapper } = await import('./summaryStatisticsForAge');
    let summaryStatisticsForAgeWrapper = new SummaryStatisticsForAgeWrapper(jssummaryStatisticsForAge);
    summaryStatisticsForAgeWrapper.geoBlazorId = dotNetObject.id;
    summaryStatisticsForAgeWrapper.viewId = viewId;
    summaryStatisticsForAgeWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(summaryStatisticsForAgeWrapper);
    jsObjectRefs[dotNetObject.id] = summaryStatisticsForAgeWrapper;
    arcGisObjectRefs[dotNetObject.id] = jssummaryStatisticsForAge;
    let { buildDotNetSummaryStatisticsForAge } = await import('./summaryStatisticsForAge');
    let dnInstantiatedObject = await buildDotNetSummaryStatisticsForAge(jssummaryStatisticsForAge);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SummaryStatisticsForAge', e);
    }
    
    return jssummaryStatisticsForAge;
}

export async function buildDotNetSummaryStatisticsForAgeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSummaryStatisticsForAge: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSummaryStatisticsForAge.id = k;
                break;
            }
        }
    }

    return dotNetSummaryStatisticsForAge;
}

