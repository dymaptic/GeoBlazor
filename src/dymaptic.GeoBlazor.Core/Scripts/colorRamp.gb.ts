// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import ColorRamp from '@arcgis/core/rest/support/ColorRamp';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ColorRampGenerated implements IPropertyWrapper {
    public component: ColorRamp;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ColorRamp) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsColorRampGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let { default: ColorRamp } = await import('@arcgis/core/rest/support/ColorRamp');
    let jsColorRamp = new ColorRamp();
    let { default: ColorRampWrapper } = await import('./colorRamp');
    let colorRampWrapper = new ColorRampWrapper(jsColorRamp);
    colorRampWrapper.geoBlazorId = dotNetObject.id;
    colorRampWrapper.viewId = viewId;
    colorRampWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(colorRampWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = colorRampWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsColorRamp;
    
    return jsColorRamp;
}

export async function buildDotNetColorRampGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetColorRamp: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetColorRamp.type = jsObject.type;
    return dotNetColorRamp;
}

