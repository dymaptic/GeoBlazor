// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import QueryTableDataSource = __esri.QueryTableDataSource;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class QueryTableDataSourceGenerated implements IPropertyWrapper {
    public component: QueryTableDataSource;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: QueryTableDataSource) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getSpatialReference(): Promise<any> {
        if (!hasValue(this.component.spatialReference)) {
            return null;
        }
        
        let { buildDotNetSpatialReference } = await import('./spatialReference');
        return buildDotNetSpatialReference(this.component.spatialReference);
    }
    async setSpatialReference(value: any): Promise<void> {
        let { buildJsSpatialReference } = await import('./spatialReference');
        this.component.spatialReference =  buildJsSpatialReference(value);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsQueryTableDataSourceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsQueryTableDataSource: any = {}
    if (hasValue(dotNetObject.spatialReference)) {
        let { buildJsSpatialReference } = await import('./jsBuilder');
        jsQueryTableDataSource.spatialReference = await buildJsSpatialReference(dotNetObject.spatialReference) as any;
    }

    if (hasValue(dotNetObject.geometryType)) {
        jsQueryTableDataSource.geometryType = dotNetObject.geometryType;
    }
    if (hasValue(dotNetObject.oidFields)) {
        jsQueryTableDataSource.oidFields = dotNetObject.oidFields;
    }
    if (hasValue(dotNetObject.query)) {
        jsQueryTableDataSource.query = dotNetObject.query;
    }
    if (hasValue(dotNetObject.workspaceId)) {
        jsQueryTableDataSource.workspaceId = dotNetObject.workspaceId;
    }
    let { default: QueryTableDataSourceWrapper } = await import('./queryTableDataSource');
    let queryTableDataSourceWrapper = new QueryTableDataSourceWrapper(jsQueryTableDataSource);
    queryTableDataSourceWrapper.geoBlazorId = dotNetObject.id;
    queryTableDataSourceWrapper.viewId = viewId;
    queryTableDataSourceWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(queryTableDataSourceWrapper);
    jsObjectRefs[dotNetObject.id] = queryTableDataSourceWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsQueryTableDataSource;
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for QueryTableDataSource', e);
    }
    
    return jsQueryTableDataSource;
}

export async function buildDotNetQueryTableDataSourceGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetQueryTableDataSource: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.spatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetQueryTableDataSource.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference);
        }
        if (hasValue(jsObject.geometryType)) {
            dotNetQueryTableDataSource.geometryType = jsObject.geometryType;
        }
        if (hasValue(jsObject.oidFields)) {
            dotNetQueryTableDataSource.oidFields = jsObject.oidFields;
        }
        if (hasValue(jsObject.query)) {
            dotNetQueryTableDataSource.query = jsObject.query;
        }
        if (hasValue(jsObject.type)) {
            dotNetQueryTableDataSource.type = jsObject.type;
        }
        if (hasValue(jsObject.workspaceId)) {
            dotNetQueryTableDataSource.workspaceId = jsObject.workspaceId;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetQueryTableDataSource.id = k;
                break;
            }
        }
    }

    return dotNetQueryTableDataSource;
}

