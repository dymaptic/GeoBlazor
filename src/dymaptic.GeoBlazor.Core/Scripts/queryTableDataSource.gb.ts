// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, sanitize, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetQueryTableDataSource } from './queryTableDataSource';

export async function buildJsQueryTableDataSourceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsQueryTableDataSource: any = {};

    if (hasValue(dotNetObject.geometryType)) {
        jsQueryTableDataSource.geometryType = dotNetObject.geometryType;
    }
    if (hasValue(dotNetObject.oidFields)) {
        jsQueryTableDataSource.oidFields = dotNetObject.oidFields;
    }
    if (hasValue(dotNetObject.query)) {
        jsQueryTableDataSource.query = dotNetObject.query;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        jsQueryTableDataSource.spatialReference = sanitize(dotNetObject.spatialReference);
    }
    if (hasValue(dotNetObject.workspaceId)) {
        jsQueryTableDataSource.workspaceId = dotNetObject.workspaceId;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsQueryTableDataSource);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsQueryTableDataSource;
    
    return jsQueryTableDataSource;
}


export async function buildDotNetQueryTableDataSourceGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetQueryTableDataSource: any = {};
    
    if (hasValue(jsObject.geometryType)) {
        dotNetQueryTableDataSource.geometryType = removeCircularReferences(jsObject.geometryType);
    }
    
    if (hasValue(jsObject.oidFields)) {
        dotNetQueryTableDataSource.oidFields = jsObject.oidFields;
    }
    
    if (hasValue(jsObject.query)) {
        dotNetQueryTableDataSource.query = jsObject.query;
    }
    
    if (hasValue(jsObject.spatialReference)) {
        dotNetQueryTableDataSource.spatialReference = removeCircularReferences(jsObject.spatialReference);
    }
    
    if (hasValue(jsObject.type)) {
        dotNetQueryTableDataSource.type = jsObject.type;
    }
    
    if (hasValue(jsObject.workspaceId)) {
        dotNetQueryTableDataSource.workspaceId = jsObject.workspaceId;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetQueryTableDataSource.id = geoBlazorId;
    }

    return dotNetQueryTableDataSource;
}

