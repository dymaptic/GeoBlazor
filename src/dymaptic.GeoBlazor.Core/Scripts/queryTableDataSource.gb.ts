// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetQueryTableDataSource } from './queryTableDataSource';

export async function buildJsQueryTableDataSourceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsQueryTableDataSource: any = {};

    if (hasValue(dotNetObject.geometryType)) {
        jsQueryTableDataSource.geometryType = dotNetObject.geometryType;
    }
    if (hasValue(dotNetObject.oidFields)) {
        jsQueryTableDataSource.oidFields = dotNetObject.oidFields;
    }
    if (hasValue(dotNetObject.query)) {
        jsQueryTableDataSource.query = dotNetObject.query;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        const { id, dotNetComponentReference, ...sanitizedSpatialReference } = dotNetObject.spatialReference;
        jsQueryTableDataSource.spatialReference = sanitizedSpatialReference;
    }
    if (hasValue(dotNetObject.workspaceId)) {
        jsQueryTableDataSource.workspaceId = dotNetObject.workspaceId;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsQueryTableDataSource);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsQueryTableDataSource;
    
    let { buildDotNetQueryTableDataSource } = await import('./queryTableDataSource');
    let dnInstantiatedObject = await buildDotNetQueryTableDataSource(jsQueryTableDataSource);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type QueryTableDataSource detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for QueryTableDataSource', e);
    }
    
    return jsQueryTableDataSource;
}


export async function buildDotNetQueryTableDataSourceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetQueryTableDataSource: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.geometryType)) {
        dotNetQueryTableDataSource.geometryType = jsObject.geometryType;
    }
    if (hasValue(jsObject.oidFields)) {
        dotNetQueryTableDataSource.oidFields = jsObject.oidFields;
    }
    if (hasValue(jsObject.query)) {
        dotNetQueryTableDataSource.query = jsObject.query;
    }
    if (hasValue(jsObject.spatialReference)) {
        dotNetQueryTableDataSource.spatialReference = jsObject.spatialReference;
    }
    if (hasValue(jsObject.type)) {
        dotNetQueryTableDataSource.type = jsObject.type;
    }
    if (hasValue(jsObject.workspaceId)) {
        dotNetQueryTableDataSource.workspaceId = jsObject.workspaceId;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetQueryTableDataSource.id = k;
                break;
            }
        }
    }

    return dotNetQueryTableDataSource;
}

