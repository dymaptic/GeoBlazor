// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetSizeContinuousRendererResult } from './sizeContinuousRendererResult';
import sizeContinuousRendererResult = __esri.sizeContinuousRendererResult;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsSizeContinuousRendererResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jssizeContinuousRendererResult: any = {}
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsClassBreaksRenderer } = await import('./classBreaksRenderer');
        jssizeContinuousRendererResult.renderer = await buildJsClassBreaksRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.visualVariables)) {
        let { buildJsSizeVariable } = await import('./sizeVariable');
        jssizeContinuousRendererResult.visualVariables = await Promise.all(dotNetObject.visualVariables.map(async i => await buildJsSizeVariable(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.basemapId)) {
        jssizeContinuousRendererResult.basemapId = dotNetObject.basemapId;
    }
    if (hasValue(dotNetObject.basemapTheme)) {
        jssizeContinuousRendererResult.basemapTheme = dotNetObject.basemapTheme;
    }
    if (hasValue(dotNetObject.defaultValuesUsed)) {
        jssizeContinuousRendererResult.defaultValuesUsed = dotNetObject.defaultValuesUsed;
    }
    if (hasValue(dotNetObject.isGrid)) {
        jssizeContinuousRendererResult.isGrid = dotNetObject.isGrid;
    }
    if (hasValue(dotNetObject.sizeScheme)) {
        jssizeContinuousRendererResult.sizeScheme = dotNetObject.sizeScheme;
    }
    if (hasValue(dotNetObject.statistics)) {
        jssizeContinuousRendererResult.statistics = dotNetObject.statistics;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jssizeContinuousRendererResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jssizeContinuousRendererResult;
    
    let dnInstantiatedObject = await buildDotNetSizeContinuousRendererResult(jssizeContinuousRendererResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SizeContinuousRendererResult', e);
    }
    
    return jssizeContinuousRendererResult;
}

export async function buildDotNetSizeContinuousRendererResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSizeContinuousRendererResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.renderer)) {
            let { buildDotNetClassBreaksRenderer } = await import('./classBreaksRenderer');
            dotNetSizeContinuousRendererResult.renderer = await buildDotNetClassBreaksRenderer(jsObject.renderer);
        }
        if (hasValue(jsObject.visualVariables)) {
            let { buildDotNetSizeVariable } = await import('./sizeVariable');
            dotNetSizeContinuousRendererResult.visualVariables = await Promise.all(jsObject.visualVariables.map(async i => await buildDotNetSizeVariable(i)));
        }
        if (hasValue(jsObject.basemapId)) {
            dotNetSizeContinuousRendererResult.basemapId = jsObject.basemapId;
        }
        if (hasValue(jsObject.basemapTheme)) {
            dotNetSizeContinuousRendererResult.basemapTheme = jsObject.basemapTheme;
        }
        if (hasValue(jsObject.defaultValuesUsed)) {
            dotNetSizeContinuousRendererResult.defaultValuesUsed = jsObject.defaultValuesUsed;
        }
        if (hasValue(jsObject.isGrid)) {
            dotNetSizeContinuousRendererResult.isGrid = jsObject.isGrid;
        }
        if (hasValue(jsObject.sizeScheme)) {
            dotNetSizeContinuousRendererResult.sizeScheme = jsObject.sizeScheme;
        }
        if (hasValue(jsObject.statistics)) {
            dotNetSizeContinuousRendererResult.statistics = jsObject.statistics;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSizeContinuousRendererResult.id = k;
                break;
            }
        }
    }

    return dotNetSizeContinuousRendererResult;
}

