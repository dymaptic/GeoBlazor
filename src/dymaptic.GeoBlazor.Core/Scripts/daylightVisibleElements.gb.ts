// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetDaylightVisibleElements } from './daylightVisibleElements';

export async function buildJsDaylightVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsDaylightVisibleElements: any = {};

    if (hasValue(dotNetObject.datePicker)) {
        jsDaylightVisibleElements.datePicker = dotNetObject.datePicker;
    }
    if (hasValue(dotNetObject.header)) {
        jsDaylightVisibleElements.header = dotNetObject.header;
    }
    if (hasValue(dotNetObject.playButtons)) {
        jsDaylightVisibleElements.playButtons = dotNetObject.playButtons;
    }
    if (hasValue(dotNetObject.shadowsToggle)) {
        jsDaylightVisibleElements.shadowsToggle = dotNetObject.shadowsToggle;
    }
    if (hasValue(dotNetObject.sunLightingToggle)) {
        jsDaylightVisibleElements.sunLightingToggle = dotNetObject.sunLightingToggle;
    }
    if (hasValue(dotNetObject.timezone)) {
        jsDaylightVisibleElements.timezone = dotNetObject.timezone;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsDaylightVisibleElements);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsDaylightVisibleElements;
    
    return jsDaylightVisibleElements;
}


export async function buildDotNetDaylightVisibleElementsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDaylightVisibleElements: any = {};
    
    if (hasValue(jsObject.datePicker)) {
        dotNetDaylightVisibleElements.datePicker = jsObject.datePicker;
    }
    
    if (hasValue(jsObject.header)) {
        dotNetDaylightVisibleElements.header = jsObject.header;
    }
    
    if (hasValue(jsObject.playButtons)) {
        dotNetDaylightVisibleElements.playButtons = jsObject.playButtons;
    }
    
    if (hasValue(jsObject.shadowsToggle)) {
        dotNetDaylightVisibleElements.shadowsToggle = jsObject.shadowsToggle;
    }
    
    if (hasValue(jsObject.sunLightingToggle)) {
        dotNetDaylightVisibleElements.sunLightingToggle = jsObject.sunLightingToggle;
    }
    
    if (hasValue(jsObject.timezone)) {
        dotNetDaylightVisibleElements.timezone = jsObject.timezone;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetDaylightVisibleElements.id = geoBlazorId;
    }

    return dotNetDaylightVisibleElements;
}

