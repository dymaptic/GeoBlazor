// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetPredominanceCreateRendererParams } from './predominanceCreateRendererParams';

export async function buildJsPredominanceCreateRendererParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jspredominanceCreateRendererParams: any = {};
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jspredominanceCreateRendererParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.colorMixMode)) {
        jspredominanceCreateRendererParams.colorMixMode = dotNetObject.colorMixMode;
    }
    if (hasValue(dotNetObject.defaultSymbolEnabled)) {
        jspredominanceCreateRendererParams.defaultSymbolEnabled = dotNetObject.defaultSymbolEnabled;
    }
    if (hasValue(dotNetObject.fields)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedFields } = dotNetObject.fields;
        jspredominanceCreateRendererParams.fields = sanitizedFields;
    }
    if (hasValue(dotNetObject.forBinning)) {
        jspredominanceCreateRendererParams.forBinning = dotNetObject.forBinning;
    }
    if (hasValue(dotNetObject.includeOpacityVariable)) {
        jspredominanceCreateRendererParams.includeOpacityVariable = dotNetObject.includeOpacityVariable;
    }
    if (hasValue(dotNetObject.includeSizeVariable)) {
        jspredominanceCreateRendererParams.includeSizeVariable = dotNetObject.includeSizeVariable;
    }
    if (hasValue(dotNetObject.legendOptions)) {
        jspredominanceCreateRendererParams.legendOptions = dotNetObject.legendOptions;
    }
    if (hasValue(dotNetObject.outlineOptimizationEnabled)) {
        jspredominanceCreateRendererParams.outlineOptimizationEnabled = dotNetObject.outlineOptimizationEnabled;
    }
    if (hasValue(dotNetObject.predominanceScheme)) {
        jspredominanceCreateRendererParams.predominanceScheme = dotNetObject.predominanceScheme;
    }
    if (hasValue(dotNetObject.signal)) {
        jspredominanceCreateRendererParams.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.sizeOptimizationEnabled)) {
        jspredominanceCreateRendererParams.sizeOptimizationEnabled = dotNetObject.sizeOptimizationEnabled;
    }
    if (hasValue(dotNetObject.sortBy)) {
        jspredominanceCreateRendererParams.sortBy = dotNetObject.sortBy;
    }
    if (hasValue(dotNetObject.statistics)) {
        jspredominanceCreateRendererParams.statistics = dotNetObject.statistics;
    }
    if (hasValue(dotNetObject.symbolType)) {
        jspredominanceCreateRendererParams.symbolType = dotNetObject.symbolType;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jspredominanceCreateRendererParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jspredominanceCreateRendererParams;
    
    let dnInstantiatedObject = await buildDotNetPredominanceCreateRendererParams(jspredominanceCreateRendererParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PredominanceCreateRendererParams', e);
    }
    
    return jspredominanceCreateRendererParams;
}

export async function buildDotNetPredominanceCreateRendererParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPredominanceCreateRendererParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.colorMixMode)) {
        dotNetPredominanceCreateRendererParams.colorMixMode = jsObject.colorMixMode;
    }
    if (hasValue(jsObject.defaultSymbolEnabled)) {
        dotNetPredominanceCreateRendererParams.defaultSymbolEnabled = jsObject.defaultSymbolEnabled;
    }
    if (hasValue(jsObject.fields)) {
        dotNetPredominanceCreateRendererParams.fields = jsObject.fields;
    }
    if (hasValue(jsObject.forBinning)) {
        dotNetPredominanceCreateRendererParams.forBinning = jsObject.forBinning;
    }
    if (hasValue(jsObject.includeOpacityVariable)) {
        dotNetPredominanceCreateRendererParams.includeOpacityVariable = jsObject.includeOpacityVariable;
    }
    if (hasValue(jsObject.includeSizeVariable)) {
        dotNetPredominanceCreateRendererParams.includeSizeVariable = jsObject.includeSizeVariable;
    }
    if (hasValue(jsObject.legendOptions)) {
        dotNetPredominanceCreateRendererParams.legendOptions = jsObject.legendOptions;
    }
    if (hasValue(jsObject.outlineOptimizationEnabled)) {
        dotNetPredominanceCreateRendererParams.outlineOptimizationEnabled = jsObject.outlineOptimizationEnabled;
    }
    if (hasValue(jsObject.predominanceScheme)) {
        dotNetPredominanceCreateRendererParams.predominanceScheme = jsObject.predominanceScheme;
    }
    if (hasValue(jsObject.signal)) {
        dotNetPredominanceCreateRendererParams.signal = jsObject.signal;
    }
    if (hasValue(jsObject.sizeOptimizationEnabled)) {
        dotNetPredominanceCreateRendererParams.sizeOptimizationEnabled = jsObject.sizeOptimizationEnabled;
    }
    if (hasValue(jsObject.sortBy)) {
        dotNetPredominanceCreateRendererParams.sortBy = jsObject.sortBy;
    }
    if (hasValue(jsObject.statistics)) {
        dotNetPredominanceCreateRendererParams.statistics = jsObject.statistics;
    }
    if (hasValue(jsObject.symbolType)) {
        dotNetPredominanceCreateRendererParams.symbolType = jsObject.symbolType;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPredominanceCreateRendererParams.id = k;
                break;
            }
        }
    }

    return dotNetPredominanceCreateRendererParams;
}

