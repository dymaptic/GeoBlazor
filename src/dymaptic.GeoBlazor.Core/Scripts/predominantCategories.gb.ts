// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import predominantCategories from '@arcgis/core/smartMapping/statistics/predominantCategories';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PredominantCategoriesGenerated implements IPropertyWrapper {
    public component: predominantCategories;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: predominantCategories) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async predominantCategories(parameters: any): Promise<any> {
        let { buildJsPredominantCategoriesPredominantCategoriesParams } = await import('./predominantCategoriesPredominantCategoriesParams');
        let jsparameters = await buildJsPredominantCategoriesPredominantCategoriesParams(parameters, this.layerId, this.viewId) as any;
        return await this.component.predominantCategories(jsparameters);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsPredominantCategoriesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jspredominantCategories = new predominantCategories();


    let { default: PredominantCategoriesWrapper } = await import('./predominantCategories');
    let predominantCategoriesWrapper = new PredominantCategoriesWrapper(jspredominantCategories);
    predominantCategoriesWrapper.geoBlazorId = dotNetObject.id;
    predominantCategoriesWrapper.viewId = viewId;
    predominantCategoriesWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(predominantCategoriesWrapper);
    jsObjectRefs[dotNetObject.id] = predominantCategoriesWrapper;
    arcGisObjectRefs[dotNetObject.id] = jspredominantCategories;
    let { buildDotNetPredominantCategories } = await import('./predominantCategories');
    let dnInstantiatedObject = await buildDotNetPredominantCategories(jspredominantCategories);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PredominantCategories', e);
    }
    
    return jspredominantCategories;
}

export async function buildDotNetPredominantCategoriesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPredominantCategories: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPredominantCategories.id = k;
                break;
            }
        }
    }

    return dotNetPredominantCategories;
}

