// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetMapToImageParameters } from './mapToImageParameters';
import MapToImageParameters from '@arcgis/core/rest/support/MapToImageParameters';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsMapToImageParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsMapToImageParameters = new MapToImageParameters();
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsGeometry } = await import('./geometry');
        jsMapToImageParameters.geometry = buildJsGeometry(dotNetObject.geometry) as any;
    }

    if (hasValue(dotNetObject.rasterId)) {
        jsMapToImageParameters.rasterId = dotNetObject.rasterId;
    }
    if (hasValue(dotNetObject.visibleOnly)) {
        jsMapToImageParameters.visibleOnly = dotNetObject.visibleOnly;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsMapToImageParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsMapToImageParameters;
    
    let dnInstantiatedObject = await buildDotNetMapToImageParameters(jsMapToImageParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for MapToImageParameters', e);
    }
    
    return jsMapToImageParameters;
}

export async function buildDotNetMapToImageParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMapToImageParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.geometry)) {
            let { buildDotNetGeometry } = await import('./geometry');
            dotNetMapToImageParameters.geometry = buildDotNetGeometry(jsObject.geometry);
        }
        if (hasValue(jsObject.rasterId)) {
            dotNetMapToImageParameters.rasterId = jsObject.rasterId;
        }
        if (hasValue(jsObject.visibleOnly)) {
            dotNetMapToImageParameters.visibleOnly = jsObject.visibleOnly;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetMapToImageParameters.id = k;
                break;
            }
        }
    }

    return dotNetMapToImageParameters;
}

