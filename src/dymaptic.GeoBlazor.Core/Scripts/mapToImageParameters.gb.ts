// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import MapToImageParameters from '@arcgis/core/rest/support/MapToImageParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetMapToImageParameters } from './mapToImageParameters';

export async function buildJsMapToImageParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsGeometry } = await import('./geometry');
        properties.geometry = buildJsGeometry(dotNetObject.geometry) as any;
    }

    if (hasValue(dotNetObject.rasterId)) {
        properties.rasterId = dotNetObject.rasterId;
    }
    if (hasValue(dotNetObject.visibleOnly)) {
        properties.visibleOnly = dotNetObject.visibleOnly;
    }
    let jsMapToImageParameters = new MapToImageParameters(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsMapToImageParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsMapToImageParameters;
    
    return jsMapToImageParameters;
}


export async function buildDotNetMapToImageParametersGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsMapToImageParameters } = await import('./mapToImageParameters');
        jsComponentRef = await buildJsMapToImageParameters(jsObject, layerId, viewId);
    }
    
    let dotNetMapToImageParameters: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.geometry)) {
        let { buildDotNetGeometry } = await import('./geometry');
        dotNetMapToImageParameters.geometry = buildDotNetGeometry(jsObject.geometry);
    }
    if (hasValue(jsObject.rasterId)) {
        dotNetMapToImageParameters.rasterId = jsObject.rasterId;
    }
    if (hasValue(jsObject.visibleOnly)) {
        dotNetMapToImageParameters.visibleOnly = jsObject.visibleOnly;
    }

    return dotNetMapToImageParameters;
}

