// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageVolumeResult from '@arcgis/core/rest/support/ImageVolumeResult';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetImageVolumeResult } from './imageVolumeResult';

export async function buildJsImageVolumeResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.volumes) && dotNetObject.volumes.length > 0) {
        let { buildJsImageVolume } = await import('./imageVolume');
        properties.volumes = await Promise.all(dotNetObject.volumes.map(async i => await buildJsImageVolume(i, layerId, viewId))) as any;
    }

    let jsImageVolumeResult = new ImageVolumeResult(properties);
    
    jsObjectRefs[dotNetObject.id] = jsImageVolumeResult;
    arcGisObjectRefs[dotNetObject.id] = jsImageVolumeResult;
    
    return jsImageVolumeResult;
}


export async function buildDotNetImageVolumeResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageVolumeResult: any = {};
    
    if (hasValue(jsObject.volumes)) {
        let { buildDotNetImageVolume } = await import('./imageVolume');
        dotNetImageVolumeResult.volumes = await Promise.all(jsObject.volumes.map(async i => await buildDotNetImageVolume(i)));
    }
    

    return dotNetImageVolumeResult;
}

