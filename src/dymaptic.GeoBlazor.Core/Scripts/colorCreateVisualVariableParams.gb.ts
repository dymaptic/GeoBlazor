// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetColorCreateVisualVariableParams } from './colorCreateVisualVariableParams';

export async function buildJsColorCreateVisualVariableParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jscolorCreateVisualVariableParams: any = {};
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jscolorCreateVisualVariableParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.theme)) {
        let { buildJsTheme } = await import('./theme');
        jscolorCreateVisualVariableParams.theme = await buildJsTheme(dotNetObject.theme, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.colorScheme)) {
        jscolorCreateVisualVariableParams.colorScheme = dotNetObject.colorScheme;
    }
    if (hasValue(dotNetObject.field)) {
        jscolorCreateVisualVariableParams.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.forBinning)) {
        jscolorCreateVisualVariableParams.forBinning = dotNetObject.forBinning;
    }
    if (hasValue(dotNetObject.legendOptions)) {
        jscolorCreateVisualVariableParams.legendOptions = dotNetObject.legendOptions;
    }
    if (hasValue(dotNetObject.maxValue)) {
        jscolorCreateVisualVariableParams.maxValue = dotNetObject.maxValue;
    }
    if (hasValue(dotNetObject.minValue)) {
        jscolorCreateVisualVariableParams.minValue = dotNetObject.minValue;
    }
    if (hasValue(dotNetObject.normalizationField)) {
        jscolorCreateVisualVariableParams.normalizationField = dotNetObject.normalizationField;
    }
    if (hasValue(dotNetObject.signal)) {
        jscolorCreateVisualVariableParams.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.sqlExpression)) {
        jscolorCreateVisualVariableParams.sqlExpression = dotNetObject.sqlExpression;
    }
    if (hasValue(dotNetObject.sqlWhere)) {
        jscolorCreateVisualVariableParams.sqlWhere = dotNetObject.sqlWhere;
    }
    if (hasValue(dotNetObject.statistics)) {
        jscolorCreateVisualVariableParams.statistics = dotNetObject.statistics;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        jscolorCreateVisualVariableParams.valueExpression = dotNetObject.valueExpression;
    }
    if (hasValue(dotNetObject.valueExpressionTitle)) {
        jscolorCreateVisualVariableParams.valueExpressionTitle = dotNetObject.valueExpressionTitle;
    }
    if (hasValue(dotNetObject.worldScale)) {
        jscolorCreateVisualVariableParams.worldScale = dotNetObject.worldScale;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jscolorCreateVisualVariableParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jscolorCreateVisualVariableParams;
    
    let dnInstantiatedObject = await buildDotNetColorCreateVisualVariableParams(jscolorCreateVisualVariableParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ColorCreateVisualVariableParams', e);
    }
    
    return jscolorCreateVisualVariableParams;
}

export async function buildDotNetColorCreateVisualVariableParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetColorCreateVisualVariableParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.theme)) {
            let { buildDotNetTheme } = await import('./theme');
            dotNetColorCreateVisualVariableParams.theme = await buildDotNetTheme(jsObject.theme);
        }
    if (hasValue(jsObject.colorScheme)) {
        dotNetColorCreateVisualVariableParams.colorScheme = jsObject.colorScheme;
    }
    if (hasValue(jsObject.field)) {
        dotNetColorCreateVisualVariableParams.field = jsObject.field;
    }
    if (hasValue(jsObject.forBinning)) {
        dotNetColorCreateVisualVariableParams.forBinning = jsObject.forBinning;
    }
    if (hasValue(jsObject.legendOptions)) {
        dotNetColorCreateVisualVariableParams.legendOptions = jsObject.legendOptions;
    }
    if (hasValue(jsObject.maxValue)) {
        dotNetColorCreateVisualVariableParams.maxValue = jsObject.maxValue;
    }
    if (hasValue(jsObject.minValue)) {
        dotNetColorCreateVisualVariableParams.minValue = jsObject.minValue;
    }
    if (hasValue(jsObject.normalizationField)) {
        dotNetColorCreateVisualVariableParams.normalizationField = jsObject.normalizationField;
    }
    if (hasValue(jsObject.signal)) {
        dotNetColorCreateVisualVariableParams.signal = jsObject.signal;
    }
    if (hasValue(jsObject.sqlExpression)) {
        dotNetColorCreateVisualVariableParams.sqlExpression = jsObject.sqlExpression;
    }
    if (hasValue(jsObject.sqlWhere)) {
        dotNetColorCreateVisualVariableParams.sqlWhere = jsObject.sqlWhere;
    }
    if (hasValue(jsObject.statistics)) {
        dotNetColorCreateVisualVariableParams.statistics = jsObject.statistics;
    }
    if (hasValue(jsObject.valueExpression)) {
        dotNetColorCreateVisualVariableParams.valueExpression = jsObject.valueExpression;
    }
    if (hasValue(jsObject.valueExpressionTitle)) {
        dotNetColorCreateVisualVariableParams.valueExpressionTitle = jsObject.valueExpressionTitle;
    }
    if (hasValue(jsObject.worldScale)) {
        dotNetColorCreateVisualVariableParams.worldScale = jsObject.worldScale;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetColorCreateVisualVariableParams.id = k;
                break;
            }
        }
    }

    return dotNetColorCreateVisualVariableParams;
}

