// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import HeatmapRenderer from '@arcgis/core/renderers/HeatmapRenderer';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetHeatmapRenderer } from './heatmapRenderer';

export async function buildJsHeatmapRendererGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.authoringInfo)) {
        let { buildJsAuthoringInfo } = await import('./authoringInfo');
        properties.authoringInfo = await buildJsAuthoringInfo(dotNetObject.authoringInfo, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.colorStops)) {
        let { buildJsHeatmapColorStop } = await import('./heatmapColorStop');
        properties.colorStops = await Promise.all(dotNetObject.colorStops.map(async i => await buildJsHeatmapColorStop(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.field)) {
        properties.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.legendOptions)) {
        properties.legendOptions = dotNetObject.legendOptions;
    }
    if (hasValue(dotNetObject.maxDensity)) {
        properties.maxDensity = dotNetObject.maxDensity;
    }
    if (hasValue(dotNetObject.minDensity)) {
        properties.minDensity = dotNetObject.minDensity;
    }
    if (hasValue(dotNetObject.radius)) {
        properties.radius = dotNetObject.radius;
    }
    if (hasValue(dotNetObject.referenceScale)) {
        properties.referenceScale = dotNetObject.referenceScale;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        properties.valueExpression = dotNetObject.valueExpression;
    }
    if (hasValue(dotNetObject.valueExpressionTitle)) {
        properties.valueExpressionTitle = dotNetObject.valueExpressionTitle;
    }
    let jsHeatmapRenderer = new HeatmapRenderer(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsHeatmapRenderer);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsHeatmapRenderer;
    
    let dnInstantiatedObject = await buildDotNetHeatmapRenderer(jsHeatmapRenderer);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for HeatmapRenderer', e);
    }
    
    return jsHeatmapRenderer;
}

export async function buildDotNetHeatmapRendererGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetHeatmapRenderer: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.authoringInfo)) {
            let { buildDotNetAuthoringInfo } = await import('./authoringInfo');
            dotNetHeatmapRenderer.authoringInfo = await buildDotNetAuthoringInfo(jsObject.authoringInfo);
        }
        if (hasValue(jsObject.colorStops)) {
            let { buildDotNetHeatmapColorStop } = await import('./heatmapColorStop');
            dotNetHeatmapRenderer.colorStops = await Promise.all(jsObject.colorStops.map(async i => await buildDotNetHeatmapColorStop(i)));
        }
    if (hasValue(jsObject.field)) {
        dotNetHeatmapRenderer.field = jsObject.field;
    }
    if (hasValue(jsObject.legendOptions)) {
        dotNetHeatmapRenderer.legendOptions = jsObject.legendOptions;
    }
    if (hasValue(jsObject.maxDensity)) {
        dotNetHeatmapRenderer.maxDensity = jsObject.maxDensity;
    }
    if (hasValue(jsObject.minDensity)) {
        dotNetHeatmapRenderer.minDensity = jsObject.minDensity;
    }
    if (hasValue(jsObject.radius)) {
        dotNetHeatmapRenderer.radius = jsObject.radius;
    }
    if (hasValue(jsObject.referenceScale)) {
        dotNetHeatmapRenderer.referenceScale = jsObject.referenceScale;
    }
    if (hasValue(jsObject.type)) {
        dotNetHeatmapRenderer.type = jsObject.type;
    }
    if (hasValue(jsObject.valueExpression)) {
        dotNetHeatmapRenderer.valueExpression = jsObject.valueExpression;
    }
    if (hasValue(jsObject.valueExpressionTitle)) {
        dotNetHeatmapRenderer.valueExpressionTitle = jsObject.valueExpressionTitle;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetHeatmapRenderer.id = k;
                break;
            }
        }
    }

    return dotNetHeatmapRenderer;
}

