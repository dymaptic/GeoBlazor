// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import DistanceMeasurement2DViewModel from '@arcgis/core/widgets/DistanceMeasurement2D/DistanceMeasurement2DViewModel';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class DistanceMeasurement2DViewModelGenerated implements IPropertyWrapper {
    public component: DistanceMeasurement2DViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: DistanceMeasurement2DViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async clear(): Promise<void> {
        this.component.clear();
    }

    async start(): Promise<void> {
        this.component.start();
    }

    // region properties
    
    async getMeasurement(): Promise<any> {
        if (!hasValue(this.component.measurement)) {
            return null;
        }
        
        let { buildDotNetDistanceMeasurement2DViewModelMeasurement } = await import('./distanceMeasurement2DViewModelMeasurement');
        return await buildDotNetDistanceMeasurement2DViewModelMeasurement(this.component.measurement, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsDistanceMeasurement2DViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsDistanceMeasurement2DViewModel = new DistanceMeasurement2DViewModel();

    if (hasValue(dotNetObject.geodesicDistanceThreshold)) {
        jsDistanceMeasurement2DViewModel.geodesicDistanceThreshold = dotNetObject.geodesicDistanceThreshold;
    }
    if (hasValue(dotNetObject.unit)) {
        jsDistanceMeasurement2DViewModel.unit = dotNetObject.unit;
    }
    if (hasValue(dotNetObject.unitOptions)) {
        jsDistanceMeasurement2DViewModel.unitOptions = dotNetObject.unitOptions;
    }
    if (hasValue(dotNetObject.view)) {
        jsDistanceMeasurement2DViewModel.view = dotNetObject.view;
    }
    let { default: DistanceMeasurement2DViewModelWrapper } = await import('./distanceMeasurement2DViewModel');
    let distanceMeasurement2DViewModelWrapper = new DistanceMeasurement2DViewModelWrapper(jsDistanceMeasurement2DViewModel);
    distanceMeasurement2DViewModelWrapper.geoBlazorId = dotNetObject.id;
    distanceMeasurement2DViewModelWrapper.viewId = viewId;
    distanceMeasurement2DViewModelWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(distanceMeasurement2DViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = distanceMeasurement2DViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsDistanceMeasurement2DViewModel;
    
    let { buildDotNetDistanceMeasurement2DViewModel } = await import('./distanceMeasurement2DViewModel');
    let dnInstantiatedObject = await buildDotNetDistanceMeasurement2DViewModel(jsDistanceMeasurement2DViewModel, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DistanceMeasurement2DViewModel', e);
    }
    
    return jsDistanceMeasurement2DViewModel;
}

export async function buildDotNetDistanceMeasurement2DViewModelGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDistanceMeasurement2DViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.measurement)) {
            let { buildDotNetDistanceMeasurement2DViewModelMeasurement } = await import('./distanceMeasurement2DViewModelMeasurement');
            dotNetDistanceMeasurement2DViewModel.measurement = await buildDotNetDistanceMeasurement2DViewModelMeasurement(jsObject.measurement, layerId, viewId);
        }
        if (hasValue(jsObject.geodesicDistanceThreshold)) {
            dotNetDistanceMeasurement2DViewModel.geodesicDistanceThreshold = jsObject.geodesicDistanceThreshold;
        }
        if (hasValue(jsObject.measurementLabel)) {
            dotNetDistanceMeasurement2DViewModel.measurementLabel = jsObject.measurementLabel;
        }
        if (hasValue(jsObject.state)) {
            dotNetDistanceMeasurement2DViewModel.state = jsObject.state;
        }
        if (hasValue(jsObject.unit)) {
            dotNetDistanceMeasurement2DViewModel.unit = jsObject.unit;
        }
        if (hasValue(jsObject.unitOptions)) {
            dotNetDistanceMeasurement2DViewModel.unitOptions = jsObject.unitOptions;
        }
        if (hasValue(jsObject.view)) {
            dotNetDistanceMeasurement2DViewModel.view = jsObject.view;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetDistanceMeasurement2DViewModel.id = k;
                break;
            }
        }
    }

    return dotNetDistanceMeasurement2DViewModel;
}

