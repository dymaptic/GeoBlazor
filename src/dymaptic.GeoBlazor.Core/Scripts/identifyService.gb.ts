// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import identify = __esri.identify;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class IdentifyServiceGenerated implements IPropertyWrapper {
    public component: identify;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: identify) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async identify(url: any,
        parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsIdentifyParameters } = await import('./identifyParameters');
        let jsparameters = await buildJsIdentifyParameters(parameters, this.layerId, this.viewId) as any;
        return await this.component.identify(url,
            jsparameters,
            requestOptions);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsIdentifyServiceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsidentify: any = {}


    let { default: IdentifyServiceWrapper } = await import('./identifyService');
    let identifyServiceWrapper = new IdentifyServiceWrapper(jsidentify);
    identifyServiceWrapper.geoBlazorId = dotNetObject.id;
    identifyServiceWrapper.viewId = viewId;
    identifyServiceWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(identifyServiceWrapper);
    jsObjectRefs[dotNetObject.id] = identifyServiceWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsidentify;
    let { buildDotNetIdentifyService } = await import('./identifyService');
    let dnInstantiatedObject = await buildDotNetIdentifyService(jsidentify);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for IdentifyService', e);
    }
    
    return jsidentify;
}

export async function buildDotNetIdentifyServiceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIdentifyService: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetIdentifyService.id = k;
                break;
            }
        }
    }

    return dotNetIdentifyService;
}

