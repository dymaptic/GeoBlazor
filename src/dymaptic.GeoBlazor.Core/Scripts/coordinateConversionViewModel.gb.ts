// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import CoordinateConversionViewModel from '@arcgis/core/widgets/CoordinateConversion/CoordinateConversionViewModel';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CoordinateConversionViewModelGenerated implements IPropertyWrapper {
    public component: CoordinateConversionViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: CoordinateConversionViewModel) {
        this.component = component;
    }

    // region methods

    unwrap() {
        return this.component;
    }

    async convert(point: any,
                  format: any): Promise<any> {
        let {buildJsPoint} = await import('./point');
        let jsPoint = buildJsPoint(point) as any;
        let {buildJsFormat} = await import('./format');
        let jsFormat = await buildJsFormat(format, this.layerId, this.viewId) as any;
        return await this.component.convert(jsPoint,
            jsFormat);
    }

    async reverseConvert(coordinate: any,
                         format: any): Promise<any> {
        let {buildJsFormat} = await import('./format');
        let jsFormat = await buildJsFormat(format, this.layerId, this.viewId) as any;
        return await this.component.reverseConvert(coordinate,
            jsFormat);
    }

    async updateConversions(conversions: any,
                            location: any): Promise<any> {
        let {buildJsConversion} = await import('./conversion');
        let jsConversions = await buildJsConversion(conversions, this.layerId, this.viewId) as any;
        let {buildJsPoint} = await import('./point');
        let jsLocation = buildJsPoint(location) as any;
        return await this.component.updateConversions(jsConversions,
            jsLocation);
    }

    // region properties

    async getConversions(): Promise<any> {
        if (!hasValue(this.component.conversions)) {
            return null;
        }

        let {buildDotNetConversion} = await import('./conversion');
        return await Promise.all(this.component.conversions.map(async i => await buildDotNetConversion(i)));
    }

    async setConversions(value: any): Promise<void> {
        let {buildJsConversion} = await import('./conversion');
        this.component.conversions = await Promise.all(value.map(async i => await buildJsConversion(i, this.layerId, this.viewId))) as any;
    }

    async getCurrentLocation(): Promise<any> {
        if (!hasValue(this.component.currentLocation)) {
            return null;
        }

        let {buildDotNetPoint} = await import('./point');
        return buildDotNetPoint(this.component.currentLocation);
    }

    async setCurrentLocation(value: any): Promise<void> {
        let {buildJsPoint} = await import('./point');
        this.component.currentLocation = buildJsPoint(value);
    }

    async getFormats(): Promise<any> {
        if (!hasValue(this.component.formats)) {
            return null;
        }

        let {buildDotNetFormat} = await import('./format');
        return await Promise.all(this.component.formats.map(async i => await buildDotNetFormat(i)));
    }

    async setFormats(value: any): Promise<void> {
        let {buildJsFormat} = await import('./format');
        this.component.formats = await Promise.all(value.map(async i => await buildJsFormat(i, this.layerId, this.viewId))) as any;
    }

    async getLocationSymbol(): Promise<any> {
        if (!hasValue(this.component.locationSymbol)) {
            return null;
        }

        let {buildDotNetSymbol} = await import('./symbol');
        return buildDotNetSymbol(this.component.locationSymbol);
    }

    async setLocationSymbol(value: any): Promise<void> {
        let {buildJsSymbol} = await import('./symbol');
        this.component.locationSymbol = buildJsSymbol(value);
    }

    getProperty(prop: string): any {
        return this.component[prop];
    }

    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsCoordinateConversionViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCoordinateConversionViewModel = new CoordinateConversionViewModel();
    if (hasValue(dotNetObject.conversions)) {
        let {buildJsConversion} = await import('./conversion');
        jsCoordinateConversionViewModel.conversions = await Promise.all(dotNetObject.conversions.map(async i => await buildJsConversion(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.currentLocation)) {
        let {buildJsPoint} = await import('./point');
        jsCoordinateConversionViewModel.currentLocation = buildJsPoint(dotNetObject.currentLocation) as any;
    }
    if (hasValue(dotNetObject.formats)) {
        let {buildJsFormat} = await import('./format');
        jsCoordinateConversionViewModel.formats = await Promise.all(dotNetObject.formats.map(async i => await buildJsFormat(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.locationSymbol)) {
        let {buildJsSymbol} = await import('./symbol');
        jsCoordinateConversionViewModel.locationSymbol = buildJsSymbol(dotNetObject.locationSymbol) as any;
    }

    if (hasValue(dotNetObject.goToOverride)) {
        jsCoordinateConversionViewModel.goToOverride = dotNetObject.goToOverride;
    }
    if (hasValue(dotNetObject.mode)) {
        jsCoordinateConversionViewModel.mode = dotNetObject.mode;
    }
    if (hasValue(dotNetObject.storageEnabled)) {
        jsCoordinateConversionViewModel.storageEnabled = dotNetObject.storageEnabled;
    }
    if (hasValue(dotNetObject.storageType)) {
        jsCoordinateConversionViewModel.storageType = dotNetObject.storageType;
    }
    if (hasValue(dotNetObject.view)) {
        jsCoordinateConversionViewModel.view = dotNetObject.view;
    }

    let {default: CoordinateConversionViewModelWrapper} = await import('./coordinateConversionViewModel');
    let coordinateConversionViewModelWrapper = new CoordinateConversionViewModelWrapper(jsCoordinateConversionViewModel);
    coordinateConversionViewModelWrapper.geoBlazorId = dotNetObject.id;
    coordinateConversionViewModelWrapper.viewId = viewId;
    coordinateConversionViewModelWrapper.layerId = layerId;

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(coordinateConversionViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = coordinateConversionViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsCoordinateConversionViewModel;
    let {buildDotNetCoordinateConversionViewModel} = await import('./coordinateConversionViewModel');
    let dnInstantiatedObject = await buildDotNetCoordinateConversionViewModel(jsCoordinateConversionViewModel);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CoordinateConversionViewModel', e);
    }

    return jsCoordinateConversionViewModel;
}

export async function buildDotNetCoordinateConversionViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetCoordinateConversionViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.conversions)) {
        let {buildDotNetConversion} = await import('./conversion');
        dotNetCoordinateConversionViewModel.conversions = await Promise.all(jsObject.conversions.map(async i => await buildDotNetConversion(i)));
    }
    if (hasValue(jsObject.currentLocation)) {
        let {buildDotNetPoint} = await import('./point');
        dotNetCoordinateConversionViewModel.currentLocation = buildDotNetPoint(jsObject.currentLocation);
    }
    if (hasValue(jsObject.formats)) {
        let {buildDotNetFormat} = await import('./format');
        dotNetCoordinateConversionViewModel.formats = await Promise.all(jsObject.formats.map(async i => await buildDotNetFormat(i)));
    }
    if (hasValue(jsObject.locationSymbol)) {
        let {buildDotNetSymbol} = await import('./symbol');
        dotNetCoordinateConversionViewModel.locationSymbol = buildDotNetSymbol(jsObject.locationSymbol);
    }
    if (hasValue(jsObject.goToOverride)) {
        dotNetCoordinateConversionViewModel.goToOverride = jsObject.goToOverride;
    }
    if (hasValue(jsObject.mode)) {
        dotNetCoordinateConversionViewModel.mode = jsObject.mode;
    }
    if (hasValue(jsObject.state)) {
        dotNetCoordinateConversionViewModel.state = jsObject.state;
    }
    if (hasValue(jsObject.storageEnabled)) {
        dotNetCoordinateConversionViewModel.storageEnabled = jsObject.storageEnabled;
    }
    if (hasValue(jsObject.storageType)) {
        dotNetCoordinateConversionViewModel.storageType = jsObject.storageType;
    }
    if (hasValue(jsObject.view)) {
        dotNetCoordinateConversionViewModel.view = jsObject.view;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCoordinateConversionViewModel.id = k;
                break;
            }
        }
    }

    return dotNetCoordinateConversionViewModel;
}

