// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetDimensionSimpleStyle } from './dimensionSimpleStyle';
import DimensionSimpleStyle from '@arcgis/core/analysis/DimensionSimpleStyle';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsDimensionSimpleStyleGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsDimensionSimpleStyle = new DimensionSimpleStyle();
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsDimensionSimpleStyle.color = buildJsMapColor(dotNetObject.color) as any;
    }
    if (hasValue(dotNetObject.textBackgroundColor)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsDimensionSimpleStyle.textBackgroundColor = buildJsMapColor(dotNetObject.textBackgroundColor) as any;
    }
    if (hasValue(dotNetObject.textColor)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsDimensionSimpleStyle.textColor = buildJsMapColor(dotNetObject.textColor) as any;
    }

    if (hasValue(dotNetObject.fontSize)) {
        jsDimensionSimpleStyle.fontSize = dotNetObject.fontSize;
    }
    if (hasValue(dotNetObject.lineSize)) {
        jsDimensionSimpleStyle.lineSize = dotNetObject.lineSize;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsDimensionSimpleStyle);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsDimensionSimpleStyle;
    
    let dnInstantiatedObject = await buildDotNetDimensionSimpleStyle(jsDimensionSimpleStyle);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DimensionSimpleStyle', e);
    }
    
    return jsDimensionSimpleStyle;
}

export async function buildDotNetDimensionSimpleStyleGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDimensionSimpleStyle: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.color)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetDimensionSimpleStyle.color = buildDotNetMapColor(jsObject.color);
        }
        if (hasValue(jsObject.textBackgroundColor)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetDimensionSimpleStyle.textBackgroundColor = buildDotNetMapColor(jsObject.textBackgroundColor);
        }
        if (hasValue(jsObject.textColor)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetDimensionSimpleStyle.textColor = buildDotNetMapColor(jsObject.textColor);
        }
        if (hasValue(jsObject.fontSize)) {
            dotNetDimensionSimpleStyle.fontSize = jsObject.fontSize;
        }
        if (hasValue(jsObject.lineSize)) {
            dotNetDimensionSimpleStyle.lineSize = jsObject.lineSize;
        }
        if (hasValue(jsObject.type)) {
            dotNetDimensionSimpleStyle.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetDimensionSimpleStyle.id = k;
                break;
            }
        }
    }

    return dotNetDimensionSimpleStyle;
}

