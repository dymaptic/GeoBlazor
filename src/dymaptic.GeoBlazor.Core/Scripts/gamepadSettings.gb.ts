// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import GamepadSettings from '@arcgis/core/views/input/gamepad/GamepadSettings';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetGamepadSettings } from './gamepadSettings';

export async function buildJsGamepadSettingsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.enabledFocusMode)) {
        properties.enabledFocusMode = dotNetObject.enabledFocusMode;
    }
    let jsGamepadSettings = new GamepadSettings(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsGamepadSettings);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsGamepadSettings;
    
    return jsGamepadSettings;
}


export async function buildDotNetGamepadSettingsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsGamepadSettings } = await import('./gamepadSettings');
        jsComponentRef = await buildJsGamepadSettings(jsObject, layerId, viewId);
    }
    
    let dotNetGamepadSettings: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.devices)) {
        let { buildDotNetGamepadInputDevice } = await import('./gamepadInputDevice');
        dotNetGamepadSettings.devices = await Promise.all(jsObject.devices.map(async i => await buildDotNetGamepadInputDevice(i, layerId, viewId)));
    }
    if (hasValue(jsObject.enabledFocusMode)) {
        dotNetGamepadSettings.enabledFocusMode = jsObject.enabledFocusMode;
    }

    return dotNetGamepadSettings;
}

