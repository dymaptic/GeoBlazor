import { buildDotNetPortalQueryParams } from './portalQueryParams';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import PortalQueryParams from '@arcgis/core/portal/PortalQueryParams';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsPortalQueryParamsGenerated(dotNetObject: any): Promise<any> {
    let jsPortalQueryParams = new PortalQueryParams();
    if (hasValue(dotNetObject.extent)) {
        let { buildJsExtent } = await import('./extent');
        jsPortalQueryParams.extent = buildJsExtent(dotNetObject.extent) as any;
    }

    if (hasValue(dotNetObject.categories)) {
        jsPortalQueryParams.categories = dotNetObject.categories;
    }
    if (hasValue(dotNetObject.filter)) {
        jsPortalQueryParams.filter = dotNetObject.filter;
    }
    if (hasValue(dotNetObject.num)) {
        jsPortalQueryParams.num = dotNetObject.num;
    }
    if (hasValue(dotNetObject.query)) {
        jsPortalQueryParams.query = dotNetObject.query;
    }
    if (hasValue(dotNetObject.sortField)) {
        jsPortalQueryParams.sortField = dotNetObject.sortField;
    }
    if (hasValue(dotNetObject.sortOrder)) {
        jsPortalQueryParams.sortOrder = dotNetObject.sortOrder;
    }
    if (hasValue(dotNetObject.start)) {
        jsPortalQueryParams.start = dotNetObject.start;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsPortalQueryParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPortalQueryParams;
    
    let dnInstantiatedObject = await buildDotNetPortalQueryParams(jsPortalQueryParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PortalQueryParams', e);
    }
    
    return jsPortalQueryParams;
}
export async function buildDotNetPortalQueryParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPortalQueryParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.extent)) {
            let { buildDotNetExtent } = await import('./extent');
            dotNetPortalQueryParams.extent = buildDotNetExtent(jsObject.extent);
        }
        if (hasValue(jsObject.categories)) {
            dotNetPortalQueryParams.categories = jsObject.categories;
        }
        if (hasValue(jsObject.filter)) {
            dotNetPortalQueryParams.filter = jsObject.filter;
        }
        if (hasValue(jsObject.num)) {
            dotNetPortalQueryParams.num = jsObject.num;
        }
        if (hasValue(jsObject.query)) {
            dotNetPortalQueryParams.query = jsObject.query;
        }
        if (hasValue(jsObject.sortField)) {
            dotNetPortalQueryParams.sortField = jsObject.sortField;
        }
        if (hasValue(jsObject.sortOrder)) {
            dotNetPortalQueryParams.sortOrder = jsObject.sortOrder;
        }
        if (hasValue(jsObject.start)) {
            dotNetPortalQueryParams.start = jsObject.start;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPortalQueryParams.id = k;
                break;
            }
        }
    }

    return dotNetPortalQueryParams;
}

