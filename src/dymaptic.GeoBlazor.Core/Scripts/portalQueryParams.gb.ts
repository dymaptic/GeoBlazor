// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import PortalQueryParams from '@arcgis/core/portal/PortalQueryParams';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetPortalQueryParams } from './portalQueryParams';

export async function buildJsPortalQueryParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.extent)) {
        let { buildJsExtent } = await import('./extent');
        properties.extent = buildJsExtent(dotNetObject.extent) as any;
    }

    if (hasValue(dotNetObject.categories) && dotNetObject.categories.length > 0) {
        properties.categories = dotNetObject.categories;
    }
    if (hasValue(dotNetObject.filter)) {
        properties.filter = dotNetObject.filter;
    }
    if (hasValue(dotNetObject.num)) {
        properties.num = dotNetObject.num;
    }
    if (hasValue(dotNetObject.query)) {
        properties.query = dotNetObject.query;
    }
    if (hasValue(dotNetObject.sortField)) {
        properties.sortField = dotNetObject.sortField;
    }
    if (hasValue(dotNetObject.sortOrder)) {
        properties.sortOrder = dotNetObject.sortOrder;
    }
    if (hasValue(dotNetObject.start)) {
        properties.start = dotNetObject.start;
    }
    let jsPortalQueryParams = new PortalQueryParams(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsPortalQueryParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPortalQueryParams;
    
    return jsPortalQueryParams;
}


export async function buildDotNetPortalQueryParamsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPortalQueryParams: any = {};
    
    if (hasValue(jsObject.extent)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetPortalQueryParams.extent = buildDotNetExtent(jsObject.extent);
    }
    
    if (hasValue(jsObject.categories)) {
        dotNetPortalQueryParams.categories = jsObject.categories;
    }
    
    if (hasValue(jsObject.filter)) {
        dotNetPortalQueryParams.filter = jsObject.filter;
    }
    
    if (hasValue(jsObject.num)) {
        dotNetPortalQueryParams.num = jsObject.num;
    }
    
    if (hasValue(jsObject.query)) {
        dotNetPortalQueryParams.query = jsObject.query;
    }
    
    if (hasValue(jsObject.sortField)) {
        dotNetPortalQueryParams.sortField = jsObject.sortField;
    }
    
    if (hasValue(jsObject.sortOrder)) {
        dotNetPortalQueryParams.sortOrder = jsObject.sortOrder;
    }
    
    if (hasValue(jsObject.start)) {
        dotNetPortalQueryParams.start = jsObject.start;
    }
    

    return dotNetPortalQueryParams;
}

