// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetBuildingFieldStatistics } from './buildingFieldStatistics';

export async function buildJsBuildingFieldStatisticsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsBuildingFieldStatistics: any = {};

    if (hasValue(dotNetObject.fieldName)) {
        jsBuildingFieldStatistics.fieldName = dotNetObject.fieldName;
    }
    if (hasValue(dotNetObject.label)) {
        jsBuildingFieldStatistics.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.max)) {
        jsBuildingFieldStatistics.max = dotNetObject.max;
    }
    if (hasValue(dotNetObject.min)) {
        jsBuildingFieldStatistics.min = dotNetObject.min;
    }
    if (hasValue(dotNetObject.modelName)) {
        jsBuildingFieldStatistics.modelName = dotNetObject.modelName;
    }
    if (hasValue(dotNetObject.mostFrequentValues)) {
        jsBuildingFieldStatistics.mostFrequentValues = dotNetObject.mostFrequentValues;
    }
    if (hasValue(dotNetObject.subLayerIds)) {
        jsBuildingFieldStatistics.subLayerIds = dotNetObject.subLayerIds;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsBuildingFieldStatistics);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsBuildingFieldStatistics;
    
    let { buildDotNetBuildingFieldStatistics } = await import('./buildingFieldStatistics');
    let dnInstantiatedObject = await buildDotNetBuildingFieldStatistics(jsBuildingFieldStatistics, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type BuildingFieldStatistics detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BuildingFieldStatistics', e);
    }
    
    return jsBuildingFieldStatistics;
}


export async function buildDotNetBuildingFieldStatisticsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsBuildingFieldStatistics } = await import('./buildingFieldStatistics');
        jsComponentRef = await buildJsBuildingFieldStatistics(jsObject, layerId, viewId);
    }
    
    let dotNetBuildingFieldStatistics: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.fieldName)) {
        dotNetBuildingFieldStatistics.fieldName = jsObject.fieldName;
    }
    if (hasValue(jsObject.label)) {
        dotNetBuildingFieldStatistics.label = jsObject.label;
    }
    if (hasValue(jsObject.max)) {
        dotNetBuildingFieldStatistics.max = jsObject.max;
    }
    if (hasValue(jsObject.min)) {
        dotNetBuildingFieldStatistics.min = jsObject.min;
    }
    if (hasValue(jsObject.modelName)) {
        dotNetBuildingFieldStatistics.modelName = jsObject.modelName;
    }
    if (hasValue(jsObject.mostFrequentValues)) {
        dotNetBuildingFieldStatistics.mostFrequentValues = jsObject.mostFrequentValues;
    }
    if (hasValue(jsObject.subLayerIds)) {
        dotNetBuildingFieldStatistics.subLayerIds = jsObject.subLayerIds;
    }


    if (hasValue(geoBlazorId)) {
        dotNetBuildingFieldStatistics.id = geoBlazorId;
    }

    return dotNetBuildingFieldStatistics;
}

