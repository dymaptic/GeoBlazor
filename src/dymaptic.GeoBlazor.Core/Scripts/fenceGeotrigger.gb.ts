// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import FenceGeotrigger from '@arcgis/core/webdoc/geotriggersInfo/FenceGeotrigger';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetFenceGeotrigger } from './fenceGeotrigger';

export async function buildJsFenceGeotriggerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.fenceParameters)) {
        let { buildJsFeatureFenceParameters } = await import('./featureFenceParameters');
        properties.fenceParameters = await buildJsFeatureFenceParameters(dotNetObject.fenceParameters, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.enterExitRule)) {
        properties.enterExitRule = dotNetObject.enterExitRule;
    }
    if (hasValue(dotNetObject.feed)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedFeed } = dotNetObject.feed;
        properties.feed = sanitizedFeed;
    }
    if (hasValue(dotNetObject.feedAccuracyMode)) {
        properties.feedAccuracyMode = dotNetObject.feedAccuracyMode;
    }
    if (hasValue(dotNetObject.fenceNotificationRule)) {
        properties.fenceNotificationRule = dotNetObject.fenceNotificationRule;
    }
    if (hasValue(dotNetObject.name)) {
        properties.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.notificationOptions)) {
        properties.notificationOptions = dotNetObject.notificationOptions;
    }
    let jsFenceGeotrigger = new FenceGeotrigger(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFenceGeotrigger);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFenceGeotrigger;
    
    let dnInstantiatedObject = await buildDotNetFenceGeotrigger(jsFenceGeotrigger);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FenceGeotrigger', e);
    }
    
    return jsFenceGeotrigger;
}

export async function buildDotNetFenceGeotriggerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFenceGeotrigger: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.fenceParameters)) {
            let { buildDotNetFeatureFenceParameters } = await import('./featureFenceParameters');
            dotNetFenceGeotrigger.fenceParameters = await buildDotNetFeatureFenceParameters(jsObject.fenceParameters);
        }
    if (hasValue(jsObject.enterExitRule)) {
        dotNetFenceGeotrigger.enterExitRule = jsObject.enterExitRule;
    }
    if (hasValue(jsObject.feed)) {
        dotNetFenceGeotrigger.feed = jsObject.feed;
    }
    if (hasValue(jsObject.feedAccuracyMode)) {
        dotNetFenceGeotrigger.feedAccuracyMode = jsObject.feedAccuracyMode;
    }
    if (hasValue(jsObject.fenceNotificationRule)) {
        dotNetFenceGeotrigger.fenceNotificationRule = jsObject.fenceNotificationRule;
    }
    if (hasValue(jsObject.name)) {
        dotNetFenceGeotrigger.name = jsObject.name;
    }
    if (hasValue(jsObject.notificationOptions)) {
        dotNetFenceGeotrigger.notificationOptions = jsObject.notificationOptions;
    }
    if (hasValue(jsObject.type)) {
        dotNetFenceGeotrigger.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFenceGeotrigger.id = k;
                break;
            }
        }
    }

    return dotNetFenceGeotrigger;
}

