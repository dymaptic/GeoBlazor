// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetVectorFieldCreateRendererParams } from './vectorFieldCreateRendererParams';

export async function buildJsVectorFieldCreateRendererParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsvectorFieldCreateRendererParams: any = {};
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsvectorFieldCreateRendererParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.flowRepresentation)) {
        jsvectorFieldCreateRendererParams.flowRepresentation = dotNetObject.flowRepresentation;
    }
    if (hasValue(dotNetObject.rasterFunction)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedRasterFunction } = dotNetObject.rasterFunction;
        jsvectorFieldCreateRendererParams.rasterFunction = sanitizedRasterFunction;
    }
    if (hasValue(dotNetObject.renderingRule)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedRenderingRule } = dotNetObject.renderingRule;
        jsvectorFieldCreateRendererParams.renderingRule = sanitizedRenderingRule;
    }
    if (hasValue(dotNetObject.rotationType)) {
        jsvectorFieldCreateRendererParams.rotationType = dotNetObject.rotationType;
    }
    if (hasValue(dotNetObject.signal)) {
        jsvectorFieldCreateRendererParams.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.style)) {
        jsvectorFieldCreateRendererParams.style = dotNetObject.style;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsvectorFieldCreateRendererParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsvectorFieldCreateRendererParams;
    
    let dnInstantiatedObject = await buildDotNetVectorFieldCreateRendererParams(jsvectorFieldCreateRendererParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for VectorFieldCreateRendererParams', e);
    }
    
    return jsvectorFieldCreateRendererParams;
}

export async function buildDotNetVectorFieldCreateRendererParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVectorFieldCreateRendererParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.flowRepresentation)) {
        dotNetVectorFieldCreateRendererParams.flowRepresentation = jsObject.flowRepresentation;
    }
    if (hasValue(jsObject.rasterFunction)) {
        dotNetVectorFieldCreateRendererParams.rasterFunction = jsObject.rasterFunction;
    }
    if (hasValue(jsObject.renderingRule)) {
        dotNetVectorFieldCreateRendererParams.renderingRule = jsObject.renderingRule;
    }
    if (hasValue(jsObject.rotationType)) {
        dotNetVectorFieldCreateRendererParams.rotationType = jsObject.rotationType;
    }
    if (hasValue(jsObject.signal)) {
        dotNetVectorFieldCreateRendererParams.signal = jsObject.signal;
    }
    if (hasValue(jsObject.style)) {
        dotNetVectorFieldCreateRendererParams.style = jsObject.style;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetVectorFieldCreateRendererParams.id = k;
                break;
            }
        }
    }

    return dotNetVectorFieldCreateRendererParams;
}

