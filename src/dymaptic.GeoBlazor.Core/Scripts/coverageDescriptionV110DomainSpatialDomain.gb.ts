// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetCoverageDescriptionV110DomainSpatialDomain } from './coverageDescriptionV110DomainSpatialDomain';

export async function buildJsCoverageDescriptionV110DomainSpatialDomainGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCoverageDescriptionV110DomainSpatialDomain: any = {}
    if (hasValue(dotNetObject.envelope)) {
        let { buildJsExtent } = await import('./extent');
        jsCoverageDescriptionV110DomainSpatialDomain.envelope = buildJsExtent(dotNetObject.envelope) as any;
    }

    if (hasValue(dotNetObject.columns)) {
        jsCoverageDescriptionV110DomainSpatialDomain.columns = dotNetObject.columns;
    }
    if (hasValue(dotNetObject.gridBaseCRS)) {
        jsCoverageDescriptionV110DomainSpatialDomain.gridBaseCRS = dotNetObject.gridBaseCRS;
    }
    if (hasValue(dotNetObject.offset)) {
        jsCoverageDescriptionV110DomainSpatialDomain.offset = dotNetObject.offset;
    }
    if (hasValue(dotNetObject.origin)) {
        jsCoverageDescriptionV110DomainSpatialDomain.origin = dotNetObject.origin;
    }
    if (hasValue(dotNetObject.rows)) {
        jsCoverageDescriptionV110DomainSpatialDomain.rows = dotNetObject.rows;
    }
    if (hasValue(dotNetObject.useEPSGAxis)) {
        jsCoverageDescriptionV110DomainSpatialDomain.useEPSGAxis = dotNetObject.useEPSGAxis;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsCoverageDescriptionV110DomainSpatialDomain);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCoverageDescriptionV110DomainSpatialDomain;
    
    let dnInstantiatedObject = await buildDotNetCoverageDescriptionV110DomainSpatialDomain(jsCoverageDescriptionV110DomainSpatialDomain);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CoverageDescriptionV110DomainSpatialDomain', e);
    }
    
    return jsCoverageDescriptionV110DomainSpatialDomain;
}

export async function buildDotNetCoverageDescriptionV110DomainSpatialDomainGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCoverageDescriptionV110DomainSpatialDomain: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.envelope)) {
            let { buildDotNetExtent } = await import('./extent');
            dotNetCoverageDescriptionV110DomainSpatialDomain.envelope = buildDotNetExtent(jsObject.envelope);
        }
    if (hasValue(jsObject.columns)) {
        dotNetCoverageDescriptionV110DomainSpatialDomain.columns = jsObject.columns;
    }
    if (hasValue(jsObject.gridBaseCRS)) {
        dotNetCoverageDescriptionV110DomainSpatialDomain.gridBaseCRS = jsObject.gridBaseCRS;
    }
    if (hasValue(jsObject.offset)) {
        dotNetCoverageDescriptionV110DomainSpatialDomain.offset = jsObject.offset;
    }
    if (hasValue(jsObject.origin)) {
        dotNetCoverageDescriptionV110DomainSpatialDomain.origin = jsObject.origin;
    }
    if (hasValue(jsObject.rows)) {
        dotNetCoverageDescriptionV110DomainSpatialDomain.rows = jsObject.rows;
    }
    if (hasValue(jsObject.useEPSGAxis)) {
        dotNetCoverageDescriptionV110DomainSpatialDomain.useEPSGAxis = jsObject.useEPSGAxis;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCoverageDescriptionV110DomainSpatialDomain.id = k;
                break;
            }
        }
    }

    return dotNetCoverageDescriptionV110DomainSpatialDomain;
}

