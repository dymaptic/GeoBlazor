// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetBaseImageMeasureParameters } from './baseImageMeasureParameters';

export async function buildJsBaseImageMeasureParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsBaseImageMeasureParameters: any = {};
    if (hasValue(dotNetObject.mosaicRule)) {
        let { buildJsMosaicRule } = await import('./mosaicRule');
        jsBaseImageMeasureParameters.mosaicRule = await buildJsMosaicRule(dotNetObject.mosaicRule, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.pixelSize)) {
        jsBaseImageMeasureParameters.pixelSize = dotNetObject.pixelSize;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsBaseImageMeasureParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsBaseImageMeasureParameters;
    
    let dnInstantiatedObject = await buildDotNetBaseImageMeasureParameters(jsBaseImageMeasureParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BaseImageMeasureParameters', e);
    }
    
    return jsBaseImageMeasureParameters;
}

export async function buildDotNetBaseImageMeasureParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBaseImageMeasureParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.mosaicRule)) {
            let { buildDotNetMosaicRule } = await import('./mosaicRule');
            dotNetBaseImageMeasureParameters.mosaicRule = await buildDotNetMosaicRule(jsObject.mosaicRule);
        }
    if (hasValue(jsObject.pixelSize)) {
        dotNetBaseImageMeasureParameters.pixelSize = jsObject.pixelSize;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetBaseImageMeasureParameters.id = k;
                break;
            }
        }
    }

    return dotNetBaseImageMeasureParameters;
}

