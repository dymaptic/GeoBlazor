import { buildDotNetDensifyParameters } from './densifyParameters';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import DensifyParameters from '@arcgis/core/rest/support/DensifyParameters';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsDensifyParametersGenerated(dotNetObject: any): Promise<any> {
    let jsDensifyParameters = new DensifyParameters();
    if (hasValue(dotNetObject.geometries)) {
        let { buildJsGeometry } = await import('./geometry');
        jsDensifyParameters.geometries = dotNetObject.geometries.map(i => buildJsGeometry(i)) as any;
    }

    if (hasValue(dotNetObject.geodesic)) {
        jsDensifyParameters.geodesic = dotNetObject.geodesic;
    }
    if (hasValue(dotNetObject.lengthUnit)) {
        jsDensifyParameters.lengthUnit = dotNetObject.lengthUnit;
    }
    if (hasValue(dotNetObject.maxSegmentLength)) {
        jsDensifyParameters.maxSegmentLength = dotNetObject.maxSegmentLength;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsDensifyParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsDensifyParameters;
    
    let dnInstantiatedObject = await buildDotNetDensifyParameters(jsDensifyParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DensifyParameters', e);
    }
    
    return jsDensifyParameters;
}
export async function buildDotNetDensifyParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDensifyParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.geometries)) {
            let { buildDotNetGeometry } = await import('./geometry');
            dotNetDensifyParameters.geometries = jsObject.geometries.map(i => buildDotNetGeometry(i));
        }
        if (hasValue(jsObject.geodesic)) {
            dotNetDensifyParameters.geodesic = jsObject.geodesic;
        }
        if (hasValue(jsObject.lengthUnit)) {
            dotNetDensifyParameters.lengthUnit = jsObject.lengthUnit;
        }
        if (hasValue(jsObject.maxSegmentLength)) {
            dotNetDensifyParameters.maxSegmentLength = jsObject.maxSegmentLength;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetDensifyParameters.id = k;
                break;
            }
        }
    }

    return dotNetDensifyParameters;
}

