// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetPCTrueColorRendererResult } from './pCTrueColorRendererResult';

export async function buildJsPCTrueColorRendererResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPCTrueColorRendererResult: any = {};
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsPointCloudRGBRenderer } = await import('./pointCloudRGBRenderer');
        jsPCTrueColorRendererResult.renderer = await buildJsPointCloudRGBRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsPCTrueColorRendererResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPCTrueColorRendererResult;
    
    return jsPCTrueColorRendererResult;
}


export async function buildDotNetPCTrueColorRendererResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsPCTrueColorRendererResult } = await import('./pCTrueColorRendererResult');
        jsComponentRef = await buildJsPCTrueColorRendererResult(jsObject, layerId, viewId);
    }
    
    let dotNetPCTrueColorRendererResult: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.renderer)) {
        let { buildDotNetPointCloudRGBRenderer } = await import('./pointCloudRGBRenderer');
        dotNetPCTrueColorRendererResult.renderer = await buildDotNetPointCloudRGBRenderer(jsObject.renderer, layerId, viewId);
    }

    return dotNetPCTrueColorRendererResult;
}

