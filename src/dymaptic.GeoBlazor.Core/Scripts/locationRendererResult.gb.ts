import { buildDotNetLocationRendererResult } from './locationRendererResult';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import locationRendererResult = __esri.locationRendererResult;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsLocationRendererResultGenerated(dotNetObject: any): Promise<any> {
    let jslocationRendererResult: any = {}

    if (hasValue(dotNetObject.basemapId)) {
        jslocationRendererResult.basemapId = dotNetObject.basemapId;
    }
    if (hasValue(dotNetObject.basemapTheme)) {
        jslocationRendererResult.basemapTheme = dotNetObject.basemapTheme;
    }
    if (hasValue(dotNetObject.locationScheme)) {
        jslocationRendererResult.locationScheme = dotNetObject.locationScheme;
    }
    if (hasValue(dotNetObject.renderer)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedRenderer } = dotNetObject.renderer;
        jslocationRendererResult.renderer = sanitizedRenderer;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jslocationRendererResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jslocationRendererResult;
    
    let dnInstantiatedObject = await buildDotNetLocationRendererResult(jslocationRendererResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LocationRendererResult', e);
    }
    
    return jslocationRendererResult;
}
export async function buildDotNetLocationRendererResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLocationRendererResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.basemapId)) {
            dotNetLocationRendererResult.basemapId = jsObject.basemapId;
        }
        if (hasValue(jsObject.basemapTheme)) {
            dotNetLocationRendererResult.basemapTheme = jsObject.basemapTheme;
        }
        if (hasValue(jsObject.locationScheme)) {
            dotNetLocationRendererResult.locationScheme = jsObject.locationScheme;
        }
        if (hasValue(jsObject.renderer)) {
            dotNetLocationRendererResult.renderer = jsObject.renderer;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLocationRendererResult.id = k;
                break;
            }
        }
    }

    return dotNetLocationRendererResult;
}

