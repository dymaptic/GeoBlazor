// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import PointCloudFilter from '@arcgis/core/layers/pointCloudFilters/PointCloudFilter';
import { arcGisObjectRefs, jsObjectRefs, hasValue, sanitize, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetPointCloudFilter } from './pointCloudFilter';
export async function buildJsPointCloudFilterGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }
    
    switch (dotNetObject.type) {
        case 'PointCloudFilterType':
            if (!hasValue(dotNetObject)) {
                return null;
            }

            let properties: any = {};

            if (hasValue(dotNetObject.field)) {
                properties.field = dotNetObject.field;
            }
            let jsPointCloudFilter = new PointCloudFilter(properties);
    
            let jsObjectRef = DotNet.createJSObjectReference(jsPointCloudFilter);
            jsObjectRefs[dotNetObject.id] = jsObjectRef;
            arcGisObjectRefs[dotNetObject.id] = jsPointCloudFilter;
    
            return jsPointCloudFilter;

        default: 
            return sanitize(dotNetObject);
    }
}     

export async function buildDotNetPointCloudFilterGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    switch (jsObject.type) {
        case 'PointCloudFilterType': 
        let dotNetPointCloudFilter: any = {};
            if (hasValue(jsObject.field)) {
                dotNetPointCloudFilter.field = jsObject.field;
            }
    
            if (hasValue(jsObject.type)) {
                dotNetPointCloudFilter.type = removeCircularReferences(jsObject.type);
            }
    

            return dotNetPointCloudFilter;

        default: 
            return jsObject;
    }
}     

