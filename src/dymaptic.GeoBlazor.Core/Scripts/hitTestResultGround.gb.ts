// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetHitTestResultGround } from './hitTestResultGround';

export async function buildJsHitTestResultGroundGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsHitTestResultGround: any = {};
    if (hasValue(dotNetObject.mapPoint)) {
        let { buildJsPoint } = await import('./point');
        jsHitTestResultGround.mapPoint = buildJsPoint(dotNetObject.mapPoint) as any;
    }

    if (hasValue(dotNetObject.distance)) {
        jsHitTestResultGround.distance = dotNetObject.distance;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsHitTestResultGround);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsHitTestResultGround;
    
    let { buildDotNetHitTestResultGround } = await import('./hitTestResultGround');
    let dnInstantiatedObject = await buildDotNetHitTestResultGround(jsHitTestResultGround);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type HitTestResultGround detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for HitTestResultGround', e);
    }
    
    return jsHitTestResultGround;
}


export async function buildDotNetHitTestResultGroundGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetHitTestResultGround: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.mapPoint)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetHitTestResultGround.mapPoint = buildDotNetPoint(jsObject.mapPoint);
    }
    if (hasValue(jsObject.distance)) {
        dotNetHitTestResultGround.distance = jsObject.distance;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetHitTestResultGround.id = geoBlazorId;
    }

    return dotNetHitTestResultGround;
}

