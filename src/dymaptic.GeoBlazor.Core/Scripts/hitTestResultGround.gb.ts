// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetHitTestResultGround } from './hitTestResultGround';

export async function buildJsHitTestResultGroundGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsHitTestResultGround: any = {}
    if (hasValue(dotNetObject.mapPoint)) {
        let { buildJsPoint } = await import('./point');
        jsHitTestResultGround.mapPoint = buildJsPoint(dotNetObject.mapPoint) as any;
    }

    if (hasValue(dotNetObject.distance)) {
        jsHitTestResultGround.distance = dotNetObject.distance;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsHitTestResultGround);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsHitTestResultGround;
    
    let dnInstantiatedObject = await buildDotNetHitTestResultGround(jsHitTestResultGround);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for HitTestResultGround', e);
    }
    
    return jsHitTestResultGround;
}

export async function buildDotNetHitTestResultGroundGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetHitTestResultGround: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.mapPoint)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetHitTestResultGround.mapPoint = buildDotNetPoint(jsObject.mapPoint);
        }
        if (hasValue(jsObject.distance)) {
            dotNetHitTestResultGround.distance = jsObject.distance;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetHitTestResultGround.id = k;
                break;
            }
        }
    }

    return dotNetHitTestResultGround;
}

