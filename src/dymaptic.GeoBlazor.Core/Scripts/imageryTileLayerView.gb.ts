// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageryTileLayerView from '@arcgis/core/views/layers/ImageryTileLayerView';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, generateSerializableJson } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ImageryTileLayerViewGenerated implements IPropertyWrapper {
    public component: ImageryTileLayerView;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ImageryTileLayerView) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {

        if (hasValue(dotNetObject.visible)) {
            this.component.visible = dotNetObject.visible;
        }
    }
    
    async getSourceScale(): Promise<any> {
        return await this.component.getSourceScale();
    }

    async isFulfilled(): Promise<any> {
        return this.component.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.component.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.component.isResolved();
    }

    async when(callback: any,
        errback: any): Promise<any> {
        let result = await this.component.when(callback,
            errback);
        
        return generateSerializableJson(result);
    }

    // region properties
    
    async getLayer(): Promise<any> {
        if (!hasValue(this.component.layer)) {
            return null;
        }
        
        let { buildDotNetLayer } = await import('./layer');
        return await buildDotNetLayer(this.component.layer, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsImageryTileLayerViewGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    let jsImageryTileLayerView = new ImageryTileLayerView(properties);

    let { default: ImageryTileLayerViewWrapper } = await import('./imageryTileLayerView');

    let imageryTileLayerViewWrapper = new ImageryTileLayerViewWrapper(jsImageryTileLayerView);
    imageryTileLayerViewWrapper.geoBlazorId = dotNetObject.id;
    imageryTileLayerViewWrapper.viewId = viewId;
    imageryTileLayerViewWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = imageryTileLayerViewWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsImageryTileLayerView;
    
    return jsImageryTileLayerView;
}


export async function buildDotNetImageryTileLayerViewGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageryTileLayerView: any = {};
    
    if (hasValue(jsObject.spatialReferenceSupported)) {
        dotNetImageryTileLayerView.spatialReferenceSupported = jsObject.spatialReferenceSupported;
    }
    
    if (hasValue(jsObject.suspended)) {
        dotNetImageryTileLayerView.suspended = jsObject.suspended;
    }
    
    if (hasValue(jsObject.updating)) {
        dotNetImageryTileLayerView.updating = jsObject.updating;
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetImageryTileLayerView.visible = jsObject.visible;
    }
    
    if (hasValue(jsObject.visibleAtCurrentScale)) {
        dotNetImageryTileLayerView.visibleAtCurrentScale = jsObject.visibleAtCurrentScale;
    }
    
    if (hasValue(jsObject.visibleAtCurrentTimeExtent)) {
        dotNetImageryTileLayerView.visibleAtCurrentTimeExtent = jsObject.visibleAtCurrentTimeExtent;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetImageryTileLayerView.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        if (hasValue(dotNetRef)) {
            try {
                dotNetImageryTileLayerView.id = await dotNetRef.invokeMethodAsync('GetId');
            } catch (e) {
                console.error('Error invoking GetId for ImageryTileLayerView', e);
            }
        }
    }
    if (hasValue(dotNetImageryTileLayerView.id)) {
        jsObjectRefs[dotNetImageryTileLayerView.id] ??= jsObject;
        arcGisObjectRefs[dotNetImageryTileLayerView.id] ??= jsObject;
    }

    return dotNetImageryTileLayerView;
}

