// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetUnivariateColorSizeRampElement } from './univariateColorSizeRampElement';

export async function buildJsUnivariateColorSizeRampElementGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsUnivariateColorSizeRampElement: any = {};
    if (hasValue(dotNetObject.infos) && dotNetObject.infos.length > 0) {
        let { buildJsIUnivariateColorSizeRampElementInfos } = await import('./iUnivariateColorSizeRampElementInfos');
        jsUnivariateColorSizeRampElement.infos = await Promise.all(dotNetObject.infos.map(async i => await buildJsIUnivariateColorSizeRampElementInfos(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.title)) {
        jsUnivariateColorSizeRampElement.title = dotNetObject.title;
    }
    
    jsObjectRefs[dotNetObject.id] = jsUnivariateColorSizeRampElement;
    arcGisObjectRefs[dotNetObject.id] = jsUnivariateColorSizeRampElement;
    
    return jsUnivariateColorSizeRampElement;
}


export async function buildDotNetUnivariateColorSizeRampElementGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUnivariateColorSizeRampElement: any = {};
    
    if (hasValue(jsObject.infos)) {
        let { buildDotNetIUnivariateColorSizeRampElementInfos } = await import('./iUnivariateColorSizeRampElementInfos');
        dotNetUnivariateColorSizeRampElement.infos = await Promise.all(jsObject.infos.map(async i => await buildDotNetIUnivariateColorSizeRampElementInfos(i)));
    }
    
    if (hasValue(jsObject.title)) {
        dotNetUnivariateColorSizeRampElement.title = jsObject.title;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetUnivariateColorSizeRampElement.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetUnivariateColorSizeRampElement.id = geoBlazorId;
    }

    return dotNetUnivariateColorSizeRampElement;
}

