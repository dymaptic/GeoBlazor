// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetSizeVisualVariableResult } from './sizeVisualVariableResult';
import sizeVisualVariableResult = __esri.sizeVisualVariableResult;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsSizeVisualVariableResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jssizeVisualVariableResult: any = {}
    if (hasValue(dotNetObject.authoringInfo)) {
        let { buildJsAuthoringInfo } = await import('./authoringInfo');
        jssizeVisualVariableResult.authoringInfo = await buildJsAuthoringInfo(dotNetObject.authoringInfo) as any;
    }
    if (hasValue(dotNetObject.visualVariables)) {
        let { buildJsSizeVariable } = await import('./sizeVariable');
        jssizeVisualVariableResult.visualVariables = await Promise.all(dotNetObject.visualVariables.map(async i => await buildJsSizeVariable(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.basemapId)) {
        jssizeVisualVariableResult.basemapId = dotNetObject.basemapId;
    }
    if (hasValue(dotNetObject.basemapTheme)) {
        jssizeVisualVariableResult.basemapTheme = dotNetObject.basemapTheme;
    }
    if (hasValue(dotNetObject.defaultValuesUsed)) {
        jssizeVisualVariableResult.defaultValuesUsed = dotNetObject.defaultValuesUsed;
    }
    if (hasValue(dotNetObject.isGrid)) {
        jssizeVisualVariableResult.isGrid = dotNetObject.isGrid;
    }
    if (hasValue(dotNetObject.sizeScheme)) {
        jssizeVisualVariableResult.sizeScheme = dotNetObject.sizeScheme;
    }
    if (hasValue(dotNetObject.statistics)) {
        jssizeVisualVariableResult.statistics = dotNetObject.statistics;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jssizeVisualVariableResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jssizeVisualVariableResult;
    
    let dnInstantiatedObject = await buildDotNetSizeVisualVariableResult(jssizeVisualVariableResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SizeVisualVariableResult', e);
    }
    
    return jssizeVisualVariableResult;
}

export async function buildDotNetSizeVisualVariableResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSizeVisualVariableResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.authoringInfo)) {
            let { buildDotNetAuthoringInfo } = await import('./authoringInfo');
            dotNetSizeVisualVariableResult.authoringInfo = await buildDotNetAuthoringInfo(jsObject.authoringInfo);
        }
        if (hasValue(jsObject.visualVariables)) {
            let { buildDotNetSizeVariable } = await import('./sizeVariable');
            dotNetSizeVisualVariableResult.visualVariables = await Promise.all(jsObject.visualVariables.map(async i => await buildDotNetSizeVariable(i)));
        }
        if (hasValue(jsObject.basemapId)) {
            dotNetSizeVisualVariableResult.basemapId = jsObject.basemapId;
        }
        if (hasValue(jsObject.basemapTheme)) {
            dotNetSizeVisualVariableResult.basemapTheme = jsObject.basemapTheme;
        }
        if (hasValue(jsObject.defaultValuesUsed)) {
            dotNetSizeVisualVariableResult.defaultValuesUsed = jsObject.defaultValuesUsed;
        }
        if (hasValue(jsObject.isGrid)) {
            dotNetSizeVisualVariableResult.isGrid = jsObject.isGrid;
        }
        if (hasValue(jsObject.sizeScheme)) {
            dotNetSizeVisualVariableResult.sizeScheme = jsObject.sizeScheme;
        }
        if (hasValue(jsObject.statistics)) {
            dotNetSizeVisualVariableResult.statistics = jsObject.statistics;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSizeVisualVariableResult.id = k;
                break;
            }
        }
    }

    return dotNetSizeVisualVariableResult;
}

