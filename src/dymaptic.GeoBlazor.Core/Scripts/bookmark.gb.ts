// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Bookmark from '@arcgis/core/webmap/Bookmark';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetBookmark } from './bookmark';

export async function buildJsBookmarkGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent) as any;
    }
    if (hasValue(dotNetObject.viewpoint)) {
        let { buildJsViewpoint } = await import('./viewpoint');
        properties.viewpoint = await buildJsViewpoint(dotNetObject.viewpoint, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.name)) {
        properties.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.thumbnail)) {
        properties.thumbnail = dotNetObject.thumbnail;
    }
    let jsBookmark = new Bookmark(properties);
    
    jsObjectRefs[dotNetObject.id] = jsBookmark;
    arcGisObjectRefs[dotNetObject.id] = jsBookmark;
    
    return jsBookmark;
}


export async function buildDotNetBookmarkGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBookmark: any = {};
    
    if (hasValue(jsObject.timeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetBookmark.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
    }
    
    if (hasValue(jsObject.viewpoint)) {
        let { buildDotNetViewpoint } = await import('./viewpoint');
        dotNetBookmark.viewpoint = await buildDotNetViewpoint(jsObject.viewpoint, viewId);
    }
    
    if (hasValue(jsObject.name)) {
        dotNetBookmark.name = jsObject.name;
    }
    
    if (hasValue(jsObject.thumbnail)) {
        dotNetBookmark.thumbnail = removeCircularReferences(jsObject.thumbnail);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetBookmark.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetBookmark.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetBookmark.id)) {
        jsObjectRefs[dotNetBookmark.id] ??= jsObject;
        arcGisObjectRefs[dotNetBookmark.id] ??= jsObject;
    }

    return dotNetBookmark;
}

