// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Bookmark from '@arcgis/core/webmap/Bookmark';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetBookmark } from './bookmark';

export async function buildJsBookmarkGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.viewpoint)) {
        let { buildJsViewpoint } = await import('./viewpoint');
        properties.viewpoint = await buildJsViewpoint(dotNetObject.viewpoint, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.name)) {
        properties.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.thumbnail)) {
        properties.thumbnail = dotNetObject.thumbnail;
    }
    let jsBookmark = new Bookmark(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsBookmark);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsBookmark;
    
    let { buildDotNetBookmark } = await import('./bookmark');
    let dnInstantiatedObject = await buildDotNetBookmark(jsBookmark);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type Bookmark detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Bookmark', e);
    }
    
    return jsBookmark;
}


export async function buildDotNetBookmarkGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBookmark: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.timeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetBookmark.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
    }
    if (hasValue(jsObject.viewpoint)) {
        let { buildDotNetViewpoint } = await import('./viewpoint');
        dotNetBookmark.viewpoint = await buildDotNetViewpoint(jsObject.viewpoint);
    }
    if (hasValue(jsObject.name)) {
        dotNetBookmark.name = jsObject.name;
    }
    if (hasValue(jsObject.thumbnail)) {
        dotNetBookmark.thumbnail = jsObject.thumbnail;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetBookmark.id = k;
                break;
            }
        }
    }

    return dotNetBookmark;
}

