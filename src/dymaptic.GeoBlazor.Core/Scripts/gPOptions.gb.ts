import { buildDotNetGPOptions } from './gPOptions';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import GPOptions from '@arcgis/core/rest/geoprocessor/GPOptions';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsGPOptionsGenerated(dotNetObject: any): Promise<any> {
    let jsGPOptions = new GPOptions();
    if (hasValue(dotNetObject.outSpatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        jsGPOptions.outSpatialReference = buildJsSpatialReference(dotNetObject.outSpatialReference) as any;
    }
    if (hasValue(dotNetObject.processExtent)) {
        let { buildJsExtent } = await import('./extent');
        jsGPOptions.processExtent = buildJsExtent(dotNetObject.processExtent) as any;
    }
    if (hasValue(dotNetObject.processSpatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        jsGPOptions.processSpatialReference = buildJsSpatialReference(dotNetObject.processSpatialReference) as any;
    }

    if (hasValue(dotNetObject.returnColumnName)) {
        jsGPOptions.returnColumnName = dotNetObject.returnColumnName;
    }
    if (hasValue(dotNetObject.returnM)) {
        jsGPOptions.returnM = dotNetObject.returnM;
    }
    if (hasValue(dotNetObject.returnZ)) {
        jsGPOptions.returnZ = dotNetObject.returnZ;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsGPOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsGPOptions;
    
    let dnInstantiatedObject = await buildDotNetGPOptions(jsGPOptions);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for GPOptions', e);
    }
    
    return jsGPOptions;
}
export async function buildDotNetGPOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGPOptions: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.outSpatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetGPOptions.outSpatialReference = buildDotNetSpatialReference(jsObject.outSpatialReference);
        }
        if (hasValue(jsObject.processExtent)) {
            let { buildDotNetExtent } = await import('./extent');
            dotNetGPOptions.processExtent = buildDotNetExtent(jsObject.processExtent);
        }
        if (hasValue(jsObject.processSpatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetGPOptions.processSpatialReference = buildDotNetSpatialReference(jsObject.processSpatialReference);
        }
        if (hasValue(jsObject.returnColumnName)) {
            dotNetGPOptions.returnColumnName = jsObject.returnColumnName;
        }
        if (hasValue(jsObject.returnM)) {
            dotNetGPOptions.returnM = jsObject.returnM;
        }
        if (hasValue(jsObject.returnZ)) {
            dotNetGPOptions.returnZ = jsObject.returnZ;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetGPOptions.id = k;
                break;
            }
        }
    }

    return dotNetGPOptions;
}

