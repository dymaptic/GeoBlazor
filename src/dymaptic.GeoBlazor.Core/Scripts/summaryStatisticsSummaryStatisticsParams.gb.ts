import { buildDotNetSummaryStatisticsSummaryStatisticsParams } from './summaryStatisticsSummaryStatisticsParams';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import summaryStatisticsSummaryStatisticsParams = __esri.summaryStatisticsSummaryStatisticsParams;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsSummaryStatisticsSummaryStatisticsParamsGenerated(dotNetObject: any): Promise<any> {
    let jssummaryStatisticsSummaryStatisticsParams: any = {}
    if (hasValue(dotNetObject.features)) {
        let { buildJsGraphic } = await import('./graphic');
        jssummaryStatisticsSummaryStatisticsParams.features = dotNetObject.features.map(i => buildJsGraphic(i)) as any;
    }
    if (hasValue(dotNetObject.filter)) {
        let { buildJsFeatureFilter } = await import('./featureFilter');
        jssummaryStatisticsSummaryStatisticsParams.filter = await buildJsFeatureFilter(dotNetObject.filter, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jssummaryStatisticsSummaryStatisticsParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.field)) {
        jssummaryStatisticsSummaryStatisticsParams.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.forBinning)) {
        jssummaryStatisticsSummaryStatisticsParams.forBinning = dotNetObject.forBinning;
    }
    if (hasValue(dotNetObject.maxValue)) {
        jssummaryStatisticsSummaryStatisticsParams.maxValue = dotNetObject.maxValue;
    }
    if (hasValue(dotNetObject.minValue)) {
        jssummaryStatisticsSummaryStatisticsParams.minValue = dotNetObject.minValue;
    }
    if (hasValue(dotNetObject.normalizationField)) {
        jssummaryStatisticsSummaryStatisticsParams.normalizationField = dotNetObject.normalizationField;
    }
    if (hasValue(dotNetObject.normalizationTotal)) {
        jssummaryStatisticsSummaryStatisticsParams.normalizationTotal = dotNetObject.normalizationTotal;
    }
    if (hasValue(dotNetObject.normalizationType)) {
        jssummaryStatisticsSummaryStatisticsParams.normalizationType = dotNetObject.normalizationType;
    }
    if (hasValue(dotNetObject.signal)) {
        jssummaryStatisticsSummaryStatisticsParams.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.sqlExpression)) {
        jssummaryStatisticsSummaryStatisticsParams.sqlExpression = dotNetObject.sqlExpression;
    }
    if (hasValue(dotNetObject.sqlWhere)) {
        jssummaryStatisticsSummaryStatisticsParams.sqlWhere = dotNetObject.sqlWhere;
    }
    if (hasValue(dotNetObject.useFeaturesInView)) {
        jssummaryStatisticsSummaryStatisticsParams.useFeaturesInView = dotNetObject.useFeaturesInView;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        jssummaryStatisticsSummaryStatisticsParams.valueExpression = dotNetObject.valueExpression;
    }
    if (hasValue(dotNetObject.view)) {
        jssummaryStatisticsSummaryStatisticsParams.view = dotNetObject.view;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jssummaryStatisticsSummaryStatisticsParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jssummaryStatisticsSummaryStatisticsParams;
    
    let dnInstantiatedObject = await buildDotNetSummaryStatisticsSummaryStatisticsParams(jssummaryStatisticsSummaryStatisticsParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SummaryStatisticsSummaryStatisticsParams', e);
    }
    
    return jssummaryStatisticsSummaryStatisticsParams;
}
export async function buildDotNetSummaryStatisticsSummaryStatisticsParamsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSummaryStatisticsSummaryStatisticsParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.features)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetSummaryStatisticsSummaryStatisticsParams.features = jsObject.features.map(i => buildDotNetGraphic(i, layerId, viewId));
        }
        if (hasValue(jsObject.filter)) {
            let { buildDotNetFeatureFilter } = await import('./featureFilter');
            dotNetSummaryStatisticsSummaryStatisticsParams.filter = await buildDotNetFeatureFilter(jsObject.filter);
        }
        if (hasValue(jsObject.field)) {
            dotNetSummaryStatisticsSummaryStatisticsParams.field = jsObject.field;
        }
        if (hasValue(jsObject.forBinning)) {
            dotNetSummaryStatisticsSummaryStatisticsParams.forBinning = jsObject.forBinning;
        }
        if (hasValue(jsObject.maxValue)) {
            dotNetSummaryStatisticsSummaryStatisticsParams.maxValue = jsObject.maxValue;
        }
        if (hasValue(jsObject.minValue)) {
            dotNetSummaryStatisticsSummaryStatisticsParams.minValue = jsObject.minValue;
        }
        if (hasValue(jsObject.normalizationField)) {
            dotNetSummaryStatisticsSummaryStatisticsParams.normalizationField = jsObject.normalizationField;
        }
        if (hasValue(jsObject.normalizationTotal)) {
            dotNetSummaryStatisticsSummaryStatisticsParams.normalizationTotal = jsObject.normalizationTotal;
        }
        if (hasValue(jsObject.normalizationType)) {
            dotNetSummaryStatisticsSummaryStatisticsParams.normalizationType = jsObject.normalizationType;
        }
        if (hasValue(jsObject.signal)) {
            dotNetSummaryStatisticsSummaryStatisticsParams.signal = jsObject.signal;
        }
        if (hasValue(jsObject.sqlExpression)) {
            dotNetSummaryStatisticsSummaryStatisticsParams.sqlExpression = jsObject.sqlExpression;
        }
        if (hasValue(jsObject.sqlWhere)) {
            dotNetSummaryStatisticsSummaryStatisticsParams.sqlWhere = jsObject.sqlWhere;
        }
        if (hasValue(jsObject.useFeaturesInView)) {
            dotNetSummaryStatisticsSummaryStatisticsParams.useFeaturesInView = jsObject.useFeaturesInView;
        }
        if (hasValue(jsObject.valueExpression)) {
            dotNetSummaryStatisticsSummaryStatisticsParams.valueExpression = jsObject.valueExpression;
        }
        if (hasValue(jsObject.view)) {
            dotNetSummaryStatisticsSummaryStatisticsParams.view = jsObject.view;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSummaryStatisticsSummaryStatisticsParams.id = k;
                break;
            }
        }
    }

    return dotNetSummaryStatisticsSummaryStatisticsParams;
}

