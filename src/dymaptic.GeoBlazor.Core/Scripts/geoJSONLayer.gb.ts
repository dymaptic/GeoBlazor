// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import GeoJSONLayer from '@arcgis/core/layers/GeoJSONLayer';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, sanitize, removeCircularReferences, buildJsStreamReference } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class GeoJSONLayerGenerated implements IPropertyWrapper {
    public layer: GeoJSONLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: GeoJSONLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }


    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.effect)) {
            let { buildJsEffect } = await import('./effect');
            this.layer.effect = buildJsEffect(dotNetObject.effect) as any;
        }
        if (hasValue(dotNetObject.elevationInfo)) {
            let { buildJsGeoJSONLayerElevationInfo } = await import('./geoJSONLayerElevationInfo');
            this.layer.elevationInfo = await buildJsGeoJSONLayerElevationInfo(dotNetObject.elevationInfo) as any;
        }
        if (hasValue(dotNetObject.featureEffect)) {
            let { buildJsFeatureEffect } = await import('./featureEffect');
            this.layer.featureEffect = await buildJsFeatureEffect(dotNetObject.featureEffect, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.featureReduction)) {
            let { buildJsIFeatureReduction } = await import('./iFeatureReduction');
            this.layer.featureReduction = await buildJsIFeatureReduction(dotNetObject.featureReduction, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.fields) && dotNetObject.fields.length > 0) {
            let { buildJsField } = await import('./field');
            this.layer.fields = dotNetObject.fields.map(i => buildJsField(i)) as any;
        }
        if (hasValue(dotNetObject.fullExtent)) {
            let { buildJsExtent } = await import('./extent');
            this.layer.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;
        }
        if (hasValue(dotNetObject.labelingInfo) && dotNetObject.labelingInfo.length > 0) {
            let { buildJsLabel } = await import('./label');
            this.layer.labelingInfo = await Promise.all(dotNetObject.labelingInfo.map(async i => await buildJsLabel(i, this.layerId, this.viewId))) as any;
        }
        if (hasValue(dotNetObject.orderBy) && dotNetObject.orderBy.length > 0) {
            let { buildJsOrderedLayerOrderBy } = await import('./orderedLayerOrderBy');
            this.layer.orderBy = await Promise.all(dotNetObject.orderBy.map(async i => await buildJsOrderedLayerOrderBy(i))) as any;
        }
        if (hasValue(dotNetObject.popupTemplate)) {
            let { buildJsPopupTemplate } = await import('./popupTemplate');
            this.layer.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.portalItem)) {
            let { buildJsPortalItem } = await import('./portalItem');
            this.layer.portalItem = await buildJsPortalItem(dotNetObject.portalItem, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.renderer)) {
            let { buildJsRenderer } = await import('./renderer');
            this.layer.renderer = await buildJsRenderer(dotNetObject.renderer, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.templates) && dotNetObject.templates.length > 0) {
            let { buildJsIFeatureTemplate } = await import('./iFeatureTemplate');
            this.layer.templates = await Promise.all(dotNetObject.templates.map(async i => await buildJsIFeatureTemplate(i, this.layerId, this.viewId))) as any;
        }
        if (hasValue(dotNetObject.timeExtent)) {
            let { buildJsTimeExtent } = await import('./timeExtent');
            this.layer.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent) as any;
        }
        if (hasValue(dotNetObject.timeInfo)) {
            let { buildJsTimeInfo } = await import('./timeInfo');
            this.layer.timeInfo = await buildJsTimeInfo(dotNetObject.timeInfo) as any;
        }
        if (hasValue(dotNetObject.timeOffset)) {
            let { buildJsTimeInterval } = await import('./timeInterval');
            this.layer.timeOffset = await buildJsTimeInterval(dotNetObject.timeOffset) as any;
        }
        if (hasValue(dotNetObject.visibilityTimeExtent)) {
            let { buildJsTimeExtent } = await import('./timeExtent');
            this.layer.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent) as any;
        }

        if (hasValue(dotNetObject.arcGISLayerId)) {
            this.layer.id = dotNetObject.arcGISLayerId;
        }
        if (hasValue(dotNetObject.blendMode)) {
            this.layer.blendMode = dotNetObject.blendMode;
        }
        if (hasValue(dotNetObject.copyright)) {
            this.layer.copyright = dotNetObject.copyright;
        }
        if (hasValue(dotNetObject.customParameters)) {
            this.layer.customParameters = dotNetObject.customParameters;
        }
        if (hasValue(dotNetObject.definitionExpression)) {
            this.layer.definitionExpression = dotNetObject.definitionExpression;
        }
        if (hasValue(dotNetObject.displayField)) {
            this.layer.displayField = dotNetObject.displayField;
        }
        if (hasValue(dotNetObject.editingEnabled)) {
            this.layer.editingEnabled = dotNetObject.editingEnabled;
        }
        if (hasValue(dotNetObject.geometryType)) {
            this.layer.geometryType = dotNetObject.geometryType;
        }
        if (hasValue(dotNetObject.labelsVisible)) {
            this.layer.labelsVisible = dotNetObject.labelsVisible;
        }
        if (hasValue(dotNetObject.legendEnabled)) {
            this.layer.legendEnabled = dotNetObject.legendEnabled;
        }
        if (hasValue(dotNetObject.listMode)) {
            this.layer.listMode = dotNetObject.listMode;
        }
        if (hasValue(dotNetObject.maxScale)) {
            this.layer.maxScale = dotNetObject.maxScale;
        }
        if (hasValue(dotNetObject.minScale)) {
            this.layer.minScale = dotNetObject.minScale;
        }
        if (hasValue(dotNetObject.objectIdField)) {
            this.layer.objectIdField = dotNetObject.objectIdField;
        }
        if (hasValue(dotNetObject.opacity)) {
            this.layer.opacity = dotNetObject.opacity;
        }
        if (hasValue(dotNetObject.outFields) && dotNetObject.outFields.length > 0) {
            this.layer.outFields = dotNetObject.outFields;
        }
        if (hasValue(dotNetObject.persistenceEnabled)) {
            this.layer.persistenceEnabled = dotNetObject.persistenceEnabled;
        }
        if (hasValue(dotNetObject.popupEnabled)) {
            this.layer.popupEnabled = dotNetObject.popupEnabled;
        }
        if (hasValue(dotNetObject.refreshInterval)) {
            this.layer.refreshInterval = dotNetObject.refreshInterval;
        }
        if (hasValue(dotNetObject.screenSizePerspectiveEnabled)) {
            this.layer.screenSizePerspectiveEnabled = dotNetObject.screenSizePerspectiveEnabled;
        }
        if (hasValue(dotNetObject.spatialReference)) {
            this.layer.spatialReference = sanitize(dotNetObject.spatialReference);
        }
        if (hasValue(dotNetObject.title)) {
            this.layer.title = dotNetObject.title;
        }
        if (hasValue(dotNetObject.url)) {
            this.layer.url = dotNetObject.url;
        }
        if (hasValue(dotNetObject.useViewTime)) {
            this.layer.useViewTime = dotNetObject.useViewTime;
        }
        if (hasValue(dotNetObject.visible)) {
            this.layer.visible = dotNetObject.visible;
        }
    }
    
    async applyEdits(edits: any): Promise<any> {
        let { buildJsGeoJSONLayerApplyEditsEdits } = await import('./geoJSONLayerApplyEditsEdits');
        let jsEdits = await buildJsGeoJSONLayerApplyEditsEdits(edits, this.layerId, this.viewId) as any;
        return await this.layer.applyEdits(jsEdits);
    }

    async createLayerView(view: any,
        options: any): Promise<any> {
        return await this.layer.createLayerView(view,
            options);
    }

    async createPopupTemplate(options: any): Promise<any> {
        return this.layer.createPopupTemplate(options);
    }

    async createQuery(): Promise<any> {
        return this.layer.createQuery();
    }

    async fetchAttributionData(): Promise<any> {
        return await this.layer.fetchAttributionData();
    }

    async getField(fieldName: any): Promise<any> {
        return this.layer.getField(fieldName);
    }

    async getFieldDomain(fieldName: any,
        options: any): Promise<any> {
        let { buildJsGeoJSONLayerGetFieldDomainOptions } = await import('./geoJSONLayerGetFieldDomainOptions');
        let jsOptions = await buildJsGeoJSONLayerGetFieldDomainOptions(options, this.layerId, this.viewId) as any;
        return this.layer.getFieldDomain(fieldName,
            jsOptions);
    }

    async queryExtent(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.layer.queryExtent(jsQuery,
            options);
    }

    async queryFeatureCount(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.layer.queryFeatureCount(jsQuery,
            options);
    }

    async queryFeatures(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.layer.queryFeatures(jsQuery,
            options);
    }

    async queryObjectIds(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.layer.queryObjectIds(jsQuery,
            options);
    }

    async refresh(): Promise<void> {
        this.layer.refresh();
    }

    // region properties
    
    async getEffect(): Promise<any> {
        if (!hasValue(this.layer.effect)) {
            return null;
        }
        
        let { buildDotNetEffect } = await import('./effect');
        return buildDotNetEffect(this.layer.effect);
    }
    
    async setEffect(value: any): Promise<void> {
        let { buildJsEffect } = await import('./effect');
        this.layer.effect =  buildJsEffect(value);
    }
    
    async getElevationInfo(): Promise<any> {
        if (!hasValue(this.layer.elevationInfo)) {
            return null;
        }
        
        let { buildDotNetGeoJSONLayerElevationInfo } = await import('./geoJSONLayerElevationInfo');
        return await buildDotNetGeoJSONLayerElevationInfo(this.layer.elevationInfo);
    }
    
    async setElevationInfo(value: any): Promise<void> {
        let { buildJsGeoJSONLayerElevationInfo } = await import('./geoJSONLayerElevationInfo');
        this.layer.elevationInfo = await  buildJsGeoJSONLayerElevationInfo(value);
    }
    
    async getFeatureEffect(): Promise<any> {
        if (!hasValue(this.layer.featureEffect)) {
            return null;
        }
        
        let { buildDotNetFeatureEffect } = await import('./featureEffect');
        return await buildDotNetFeatureEffect(this.layer.featureEffect);
    }
    
    async setFeatureEffect(value: any): Promise<void> {
        let { buildJsFeatureEffect } = await import('./featureEffect');
        this.layer.featureEffect = await  buildJsFeatureEffect(value, this.layerId, this.viewId);
    }
    
    async getFields(): Promise<any> {
        if (!hasValue(this.layer.fields)) {
            return null;
        }
        
        let { buildDotNetField } = await import('./field');
        return this.layer.fields!.map(i => buildDotNetField(i));
    }
    
    async setFields(value: any): Promise<void> {
        let { buildJsField } = await import('./field');
        this.layer.fields = value.map(i => buildJsField(i)) as any;
    }
    
    async getFieldsIndex(): Promise<any> {
        if (!hasValue(this.layer.fieldsIndex)) {
            return null;
        }
        
        let { buildDotNetFieldsIndex } = await import('./fieldsIndex');
        return await buildDotNetFieldsIndex(this.layer.fieldsIndex);
    }
    
    async getFullExtent(): Promise<any> {
        if (!hasValue(this.layer.fullExtent)) {
            return null;
        }
        
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(this.layer.fullExtent);
    }
    
    async setFullExtent(value: any): Promise<void> {
        let { buildJsExtent } = await import('./extent');
        this.layer.fullExtent =  buildJsExtent(value);
    }
    
    async getLabelingInfo(): Promise<any> {
        if (!hasValue(this.layer.labelingInfo)) {
            return null;
        }
        
        let { buildDotNetLabel } = await import('./label');
        return await Promise.all(this.layer.labelingInfo.map(async i => await buildDotNetLabel(i)));
    }
    
    async setLabelingInfo(value: any): Promise<void> {
        let { buildJsLabel } = await import('./label');
        this.layer.labelingInfo = await Promise.all(value.map(async i => await buildJsLabel(i, this.layerId, this.viewId))) as any;
    }
    
    async getOrderBy(): Promise<any> {
        if (!hasValue(this.layer.orderBy)) {
            return null;
        }
        
        let { buildDotNetOrderedLayerOrderBy } = await import('./orderedLayerOrderBy');
        return await Promise.all(this.layer.orderBy.map(async i => await buildDotNetOrderedLayerOrderBy(i)));
    }
    
    async setOrderBy(value: any): Promise<void> {
        let { buildJsOrderedLayerOrderBy } = await import('./orderedLayerOrderBy');
        this.layer.orderBy = await Promise.all(value.map(async i => await buildJsOrderedLayerOrderBy(i))) as any;
    }
    
    async getPopupTemplate(): Promise<any> {
        if (!hasValue(this.layer.popupTemplate)) {
            return null;
        }
        
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        return await buildDotNetPopupTemplate(this.layer.popupTemplate);
    }
    
    async setPopupTemplate(value: any): Promise<void> {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        this.layer.popupTemplate =  buildJsPopupTemplate(value, this.layerId, this.viewId);
    }
    
    async getPortalItem(): Promise<any> {
        if (!hasValue(this.layer.portalItem)) {
            return null;
        }
        
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(this.layer.portalItem);
    }
    
    async setPortalItem(value: any): Promise<void> {
        let { buildJsPortalItem } = await import('./portalItem');
        this.layer.portalItem = await  buildJsPortalItem(value, this.layerId, this.viewId);
    }
    
    async getRenderer(): Promise<any> {
        if (!hasValue(this.layer.renderer)) {
            return null;
        }
        
        let { buildDotNetRenderer } = await import('./renderer');
        return await buildDotNetRenderer(this.layer.renderer);
    }
    
    async setRenderer(value: any): Promise<void> {
        let { buildJsRenderer } = await import('./renderer');
        this.layer.renderer = await  buildJsRenderer(value, this.layerId, this.viewId);
    }
    
    async getTimeExtent(): Promise<any> {
        if (!hasValue(this.layer.timeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.timeExtent);
    }
    
    async setTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.timeExtent = await  buildJsTimeExtent(value);
    }
    
    async getTimeInfo(): Promise<any> {
        if (!hasValue(this.layer.timeInfo)) {
            return null;
        }
        
        let { buildDotNetTimeInfo } = await import('./timeInfo');
        return await buildDotNetTimeInfo(this.layer.timeInfo);
    }
    
    async setTimeInfo(value: any): Promise<void> {
        let { buildJsTimeInfo } = await import('./timeInfo');
        this.layer.timeInfo = await  buildJsTimeInfo(value);
    }
    
    async getTimeOffset(): Promise<any> {
        if (!hasValue(this.layer.timeOffset)) {
            return null;
        }
        
        let { buildDotNetTimeInterval } = await import('./timeInterval');
        return await buildDotNetTimeInterval(this.layer.timeOffset);
    }
    
    async setTimeOffset(value: any): Promise<void> {
        let { buildJsTimeInterval } = await import('./timeInterval');
        this.layer.timeOffset = await  buildJsTimeInterval(value);
    }
    
    async getVisibilityTimeExtent(): Promise<any> {
        if (!hasValue(this.layer.visibilityTimeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.visibilityTimeExtent);
    }
    
    async setVisibilityTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.visibilityTimeExtent = await  buildJsTimeExtent(value);
    }
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}


export async function buildJsGeoJSONLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.effect)) {
        let { buildJsEffect } = await import('./effect');
        properties.effect = buildJsEffect(dotNetObject.effect) as any;
    }
    if (hasValue(dotNetObject.elevationInfo)) {
        let { buildJsGeoJSONLayerElevationInfo } = await import('./geoJSONLayerElevationInfo');
        properties.elevationInfo = await buildJsGeoJSONLayerElevationInfo(dotNetObject.elevationInfo) as any;
    }
    if (hasValue(dotNetObject.featureEffect)) {
        let { buildJsFeatureEffect } = await import('./featureEffect');
        properties.featureEffect = await buildJsFeatureEffect(dotNetObject.featureEffect, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.featureReduction)) {
        let { buildJsIFeatureReduction } = await import('./iFeatureReduction');
        properties.featureReduction = await buildJsIFeatureReduction(dotNetObject.featureReduction, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.fields) && dotNetObject.fields.length > 0) {
        let { buildJsField } = await import('./field');
        properties.fields = dotNetObject.fields.map(i => buildJsField(i)) as any;
    }
    if (hasValue(dotNetObject.fullExtent)) {
        let { buildJsExtent } = await import('./extent');
        properties.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;
    }
    if (hasValue(dotNetObject.labelingInfo) && dotNetObject.labelingInfo.length > 0) {
        let { buildJsLabel } = await import('./label');
        properties.labelingInfo = await Promise.all(dotNetObject.labelingInfo.map(async i => await buildJsLabel(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.orderBy) && dotNetObject.orderBy.length > 0) {
        let { buildJsOrderedLayerOrderBy } = await import('./orderedLayerOrderBy');
        properties.orderBy = await Promise.all(dotNetObject.orderBy.map(async i => await buildJsOrderedLayerOrderBy(i))) as any;
    }
    if (hasValue(dotNetObject.popupTemplate)) {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        properties.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.portalItem)) {
        let { buildJsPortalItem } = await import('./portalItem');
        properties.portalItem = await buildJsPortalItem(dotNetObject.portalItem, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsRenderer } = await import('./renderer');
        properties.renderer = await buildJsRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.templates) && dotNetObject.templates.length > 0) {
        let { buildJsIFeatureTemplate } = await import('./iFeatureTemplate');
        properties.templates = await Promise.all(dotNetObject.templates.map(async i => await buildJsIFeatureTemplate(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent) as any;
    }
    if (hasValue(dotNetObject.timeInfo)) {
        let { buildJsTimeInfo } = await import('./timeInfo');
        properties.timeInfo = await buildJsTimeInfo(dotNetObject.timeInfo) as any;
    }
    if (hasValue(dotNetObject.timeOffset)) {
        let { buildJsTimeInterval } = await import('./timeInterval');
        properties.timeOffset = await buildJsTimeInterval(dotNetObject.timeOffset) as any;
    }
    if (hasValue(dotNetObject.visibilityTimeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent) as any;
    }

    if (hasValue(dotNetObject.arcGISLayerId)) {
        properties.id = dotNetObject.arcGISLayerId;
    }
    if (hasValue(dotNetObject.blendMode)) {
        properties.blendMode = dotNetObject.blendMode;
    }
    if (hasValue(dotNetObject.copyright)) {
        properties.copyright = dotNetObject.copyright;
    }
    if (hasValue(dotNetObject.customParameters)) {
        properties.customParameters = dotNetObject.customParameters;
    }
    if (hasValue(dotNetObject.definitionExpression)) {
        properties.definitionExpression = dotNetObject.definitionExpression;
    }
    if (hasValue(dotNetObject.displayField)) {
        properties.displayField = dotNetObject.displayField;
    }
    if (hasValue(dotNetObject.editingEnabled)) {
        properties.editingEnabled = dotNetObject.editingEnabled;
    }
    if (hasValue(dotNetObject.geometryType)) {
        properties.geometryType = dotNetObject.geometryType;
    }
    if (hasValue(dotNetObject.labelsVisible)) {
        properties.labelsVisible = dotNetObject.labelsVisible;
    }
    if (hasValue(dotNetObject.legendEnabled)) {
        properties.legendEnabled = dotNetObject.legendEnabled;
    }
    if (hasValue(dotNetObject.listMode)) {
        properties.listMode = dotNetObject.listMode;
    }
    if (hasValue(dotNetObject.maxScale)) {
        properties.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.minScale)) {
        properties.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.objectIdField)) {
        properties.objectIdField = dotNetObject.objectIdField;
    }
    if (hasValue(dotNetObject.opacity)) {
        properties.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.outFields) && dotNetObject.outFields.length > 0) {
        properties.outFields = dotNetObject.outFields;
    }
    if (hasValue(dotNetObject.persistenceEnabled)) {
        properties.persistenceEnabled = dotNetObject.persistenceEnabled;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        properties.popupEnabled = dotNetObject.popupEnabled;
    }
    if (hasValue(dotNetObject.refreshInterval)) {
        properties.refreshInterval = dotNetObject.refreshInterval;
    }
    if (hasValue(dotNetObject.screenSizePerspectiveEnabled)) {
        properties.screenSizePerspectiveEnabled = dotNetObject.screenSizePerspectiveEnabled;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        properties.spatialReference = sanitize(dotNetObject.spatialReference);
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.url)) {
        properties.url = dotNetObject.url;
    }
    if (hasValue(dotNetObject.useViewTime)) {
        properties.useViewTime = dotNetObject.useViewTime;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    let jsGeoJSONLayer = new GeoJSONLayer(properties);
    if (hasValue(dotNetObject.hasCreateListener) && dotNetObject.hasCreateListener) {
        jsGeoJSONLayer.on('layerview-create', async (evt: any) => {
            let { buildDotNetLayerViewCreateEvent } = await import('./layerViewCreateEvent');
            let dnEvent = await buildDotNetLayerViewCreateEvent(evt, layerId, viewId);
            let streamRef = buildJsStreamReference(dnEvent ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreate', streamRef);
        });
    }
    
    if (hasValue(dotNetObject.hasCreateErrorListener) && dotNetObject.hasCreateErrorListener) {
        jsGeoJSONLayer.on('layerview-create-error', async (evt: any) => {
            let { buildDotNetLayerViewCreateErrorEvent } = await import('./layerViewCreateErrorEvent');
            let dnEvent = await buildDotNetLayerViewCreateErrorEvent(evt, layerId, viewId);
            let streamRef = buildJsStreamReference(dnEvent ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreateError', streamRef);
        });
    }
    
    if (hasValue(dotNetObject.hasDestroyListener) && dotNetObject.hasDestroyListener) {
        jsGeoJSONLayer.on('layerview-destroy', async (evt: any) => {
            let { buildDotNetLayerViewDestroyEvent } = await import('./layerViewDestroyEvent');
            let dnEvent = await buildDotNetLayerViewDestroyEvent(evt, layerId, viewId);
            let streamRef = buildJsStreamReference(dnEvent ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsDestroy', streamRef);
        });
    }
    
    if (hasValue(dotNetObject.hasEditsListener) && dotNetObject.hasEditsListener) {
        jsGeoJSONLayer.on('edits', async (evt: any) => {
            let streamRef = buildJsStreamReference(evt ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsEdits', streamRef);
        });
    }
    
    if (hasValue(dotNetObject.hasRefreshListener) && dotNetObject.hasRefreshListener) {
        jsGeoJSONLayer.on('refresh', async (evt: any) => {
            let streamRef = buildJsStreamReference(evt ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsRefresh', streamRef);
        });
    }
    

    let { default: GeoJSONLayerWrapper } = await import('./geoJSONLayer');
    let geoJSONLayerWrapper = new GeoJSONLayerWrapper(jsGeoJSONLayer);
    geoJSONLayerWrapper.geoBlazorId = dotNetObject.id;
    geoJSONLayerWrapper.viewId = viewId;
    geoJSONLayerWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(geoJSONLayerWrapper);
    jsObjectRefs[dotNetObject.id] = geoJSONLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsGeoJSONLayer;
    
    try {
        let { buildDotNetGeoJSONLayer } = await import('./geoJSONLayer');
        let dnInstantiatedObject = await buildDotNetGeoJSONLayer(jsGeoJSONLayer);

        let dnStream = buildJsStreamReference(dnInstantiatedObject);
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, dnStream);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for GeoJSONLayer', e);
    }
    
    return jsGeoJSONLayer;
}


export async function buildDotNetGeoJSONLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGeoJSONLayer: any = {};
    
    if (hasValue(jsObject.effect)) {
        let { buildDotNetEffect } = await import('./effect');
        dotNetGeoJSONLayer.effect = buildDotNetEffect(jsObject.effect);
    }
    
    if (hasValue(jsObject.elevationInfo)) {
        let { buildDotNetGeoJSONLayerElevationInfo } = await import('./geoJSONLayerElevationInfo');
        dotNetGeoJSONLayer.elevationInfo = await buildDotNetGeoJSONLayerElevationInfo(jsObject.elevationInfo);
    }
    
    if (hasValue(jsObject.featureEffect)) {
        let { buildDotNetFeatureEffect } = await import('./featureEffect');
        dotNetGeoJSONLayer.featureEffect = await buildDotNetFeatureEffect(jsObject.featureEffect);
    }
    
    if (hasValue(jsObject.featureReduction)) {
        let { buildDotNetIFeatureReduction } = await import('./iFeatureReduction');
        dotNetGeoJSONLayer.featureReduction = await buildDotNetIFeatureReduction(jsObject.featureReduction);
    }
    
    if (hasValue(jsObject.fields)) {
        let { buildDotNetField } = await import('./field');
        dotNetGeoJSONLayer.fields = jsObject.fields.map(i => buildDotNetField(i));
    }
    
    if (hasValue(jsObject.fieldsIndex)) {
        let { buildDotNetFieldsIndex } = await import('./fieldsIndex');
        dotNetGeoJSONLayer.fieldsIndex = await buildDotNetFieldsIndex(jsObject.fieldsIndex);
    }
    
    if (hasValue(jsObject.fullExtent)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetGeoJSONLayer.fullExtent = buildDotNetExtent(jsObject.fullExtent);
    }
    
    if (hasValue(jsObject.labelingInfo)) {
        let { buildDotNetLabel } = await import('./label');
        dotNetGeoJSONLayer.labelingInfo = await Promise.all(jsObject.labelingInfo.map(async i => await buildDotNetLabel(i)));
    }
    
    if (hasValue(jsObject.orderBy)) {
        let { buildDotNetOrderedLayerOrderBy } = await import('./orderedLayerOrderBy');
        dotNetGeoJSONLayer.orderBy = await Promise.all(jsObject.orderBy.map(async i => await buildDotNetOrderedLayerOrderBy(i)));
    }
    
    if (hasValue(jsObject.popupTemplate)) {
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        dotNetGeoJSONLayer.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
    }
    
    if (hasValue(jsObject.portalItem)) {
        let { buildDotNetPortalItem } = await import('./portalItem');
        dotNetGeoJSONLayer.portalItem = await buildDotNetPortalItem(jsObject.portalItem);
    }
    
    if (hasValue(jsObject.renderer)) {
        let { buildDotNetRenderer } = await import('./renderer');
        dotNetGeoJSONLayer.renderer = await buildDotNetRenderer(jsObject.renderer);
    }
    
    if (hasValue(jsObject.templates)) {
        let { buildDotNetIFeatureTemplate } = await import('./iFeatureTemplate');
        dotNetGeoJSONLayer.templates = await Promise.all(jsObject.templates.map(async i => await buildDotNetIFeatureTemplate(i)));
    }
    
    if (hasValue(jsObject.timeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetGeoJSONLayer.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
    }
    
    if (hasValue(jsObject.timeInfo)) {
        let { buildDotNetTimeInfo } = await import('./timeInfo');
        dotNetGeoJSONLayer.timeInfo = await buildDotNetTimeInfo(jsObject.timeInfo);
    }
    
    if (hasValue(jsObject.timeOffset)) {
        let { buildDotNetTimeInterval } = await import('./timeInterval');
        dotNetGeoJSONLayer.timeOffset = await buildDotNetTimeInterval(jsObject.timeOffset);
    }
    
    if (hasValue(jsObject.visibilityTimeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetGeoJSONLayer.visibilityTimeExtent = buildDotNetTimeExtent(jsObject.visibilityTimeExtent);
    }
    
    if (hasValue(jsObject.id)) {
        dotNetGeoJSONLayer.arcGISLayerId = jsObject.id;
    }
    
    if (hasValue(jsObject.blendMode)) {
        dotNetGeoJSONLayer.blendMode = removeCircularReferences(jsObject.blendMode);
    }
    
    if (hasValue(jsObject.capabilities)) {
        dotNetGeoJSONLayer.capabilities = removeCircularReferences(jsObject.capabilities);
    }
    
    if (hasValue(jsObject.copyright)) {
        dotNetGeoJSONLayer.copyright = jsObject.copyright;
    }
    
    if (hasValue(jsObject.customParameters)) {
        dotNetGeoJSONLayer.customParameters = jsObject.customParameters;
    }
    
    if (hasValue(jsObject.dateFieldsTimeZone)) {
        dotNetGeoJSONLayer.dateFieldsTimeZone = jsObject.dateFieldsTimeZone;
    }
    
    if (hasValue(jsObject.definitionExpression)) {
        dotNetGeoJSONLayer.definitionExpression = jsObject.definitionExpression;
    }
    
    if (hasValue(jsObject.displayField)) {
        dotNetGeoJSONLayer.displayField = jsObject.displayField;
    }
    
    if (hasValue(jsObject.editingEnabled)) {
        dotNetGeoJSONLayer.editingEnabled = jsObject.editingEnabled;
    }
    
    if (hasValue(jsObject.geometryType)) {
        dotNetGeoJSONLayer.geometryType = removeCircularReferences(jsObject.geometryType);
    }
    
    if (hasValue(jsObject.hasZ)) {
        dotNetGeoJSONLayer.hasZ = jsObject.hasZ;
    }
    
    if (hasValue(jsObject.isTable)) {
        dotNetGeoJSONLayer.isTable = jsObject.isTable;
    }
    
    if (hasValue(jsObject.labelsVisible)) {
        dotNetGeoJSONLayer.labelsVisible = jsObject.labelsVisible;
    }
    
    if (hasValue(jsObject.legendEnabled)) {
        dotNetGeoJSONLayer.legendEnabled = jsObject.legendEnabled;
    }
    
    if (hasValue(jsObject.listMode)) {
        dotNetGeoJSONLayer.listMode = removeCircularReferences(jsObject.listMode);
    }
    
    if (hasValue(jsObject.loaded)) {
        dotNetGeoJSONLayer.loaded = jsObject.loaded;
    }
    
    if (hasValue(jsObject.maxScale)) {
        dotNetGeoJSONLayer.maxScale = jsObject.maxScale;
    }
    
    if (hasValue(jsObject.minScale)) {
        dotNetGeoJSONLayer.minScale = jsObject.minScale;
    }
    
    if (hasValue(jsObject.objectIdField)) {
        dotNetGeoJSONLayer.objectIdField = jsObject.objectIdField;
    }
    
    if (hasValue(jsObject.opacity)) {
        dotNetGeoJSONLayer.opacity = jsObject.opacity;
    }
    
    if (hasValue(jsObject.outFields)) {
        dotNetGeoJSONLayer.outFields = jsObject.outFields;
    }
    
    if (hasValue(jsObject.persistenceEnabled)) {
        dotNetGeoJSONLayer.persistenceEnabled = jsObject.persistenceEnabled;
    }
    
    if (hasValue(jsObject.popupEnabled)) {
        dotNetGeoJSONLayer.popupEnabled = jsObject.popupEnabled;
    }
    
    if (hasValue(jsObject.refreshInterval)) {
        dotNetGeoJSONLayer.refreshInterval = jsObject.refreshInterval;
    }
    
    if (hasValue(jsObject.screenSizePerspectiveEnabled)) {
        dotNetGeoJSONLayer.screenSizePerspectiveEnabled = jsObject.screenSizePerspectiveEnabled;
    }
    
    if (hasValue(jsObject.spatialReference)) {
        dotNetGeoJSONLayer.spatialReference = removeCircularReferences(jsObject.spatialReference);
    }
    
    if (hasValue(jsObject.title)) {
        dotNetGeoJSONLayer.title = jsObject.title;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetGeoJSONLayer.type = removeCircularReferences(jsObject.type);
    }
    
    if (hasValue(jsObject.url)) {
        dotNetGeoJSONLayer.url = jsObject.url;
    }
    
    if (hasValue(jsObject.useViewTime)) {
        dotNetGeoJSONLayer.useViewTime = jsObject.useViewTime;
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetGeoJSONLayer.visible = jsObject.visible;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetGeoJSONLayer.id = geoBlazorId;
    }

    return dotNetGeoJSONLayer;
}

