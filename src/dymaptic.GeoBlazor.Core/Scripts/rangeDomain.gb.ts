// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import RangeDomain from '@arcgis/core/layers/support/RangeDomain';
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetRangeDomain } from './rangeDomain';

export async function buildJsRangeDomainGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.maxValue)) {
        properties.maxValue = dotNetObject.maxValue;
    }
    if (hasValue(dotNetObject.minValue)) {
        properties.minValue = dotNetObject.minValue;
    }
    if (hasValue(dotNetObject.name)) {
        properties.name = dotNetObject.name;
    }
    let jsRangeDomain = new RangeDomain(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsRangeDomain);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRangeDomain;
    
    return jsRangeDomain;
}


export async function buildDotNetRangeDomainGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRangeDomain: any = {};
    
    if (hasValue(jsObject.maxValue)) {
        dotNetRangeDomain.maxValue = jsObject.maxValue;
    }
    
    if (hasValue(jsObject.minValue)) {
        dotNetRangeDomain.minValue = jsObject.minValue;
    }
    
    if (hasValue(jsObject.name)) {
        dotNetRangeDomain.name = jsObject.name;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetRangeDomain.type = removeCircularReferences(jsObject.type);
    }
    

    return dotNetRangeDomain;
}

