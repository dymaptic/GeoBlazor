// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';

export async function buildJsServiceEditsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsServiceEdits: any = {};
    if (hasValue(dotNetObject.addFeatures) && dotNetObject.addFeatures.length > 0) {
        let { buildJsGraphic } = await import('./graphic');
        jsServiceEdits.addFeatures = dotNetObject.addFeatures.map(i => buildJsGraphic(i)) as any;
    }
    if (hasValue(dotNetObject.graphicCollectionDeleteFeatures) && dotNetObject.graphicCollectionDeleteFeatures.length > 0) {
        let { buildJsGraphic } = await import('./graphic');
        jsServiceEdits.deleteFeatures = dotNetObject.graphicCollectionDeleteFeatures.map(i => buildJsGraphic(i)) as any;
    }
    else if (hasValue(dotNetObject.featureIdentifierCollectionDeleteFeatures) && dotNetObject.featureIdentifierCollectionDeleteFeatures.length > 0) {
        jsServiceEdits.deleteFeatures = dotNetObject.featureIdentifierCollectionDeleteFeatures;
    }

    if (hasValue(dotNetObject.identifierFields)) {
        jsServiceEdits.identifierFields = dotNetObject.identifierFields;
    }
    if (hasValue(dotNetObject.serviceEditsId)) {
        jsServiceEdits.id = dotNetObject.serviceEditsId;
    }
    
    jsObjectRefs[dotNetObject.id] = jsServiceEdits;
    arcGisObjectRefs[dotNetObject.id] = jsServiceEdits;
    
    return jsServiceEdits;
}


export async function buildDotNetServiceEditsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetServiceEdits: any = {};
    
    if (hasValue(jsObject.addFeatures)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetServiceEdits.addFeatures = jsObject.addFeatures.map(i => buildDotNetGraphic(i, layerId, viewId));
    }
    
    if (hasValue(jsObject.deleteFeatures)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetServiceEdits.deleteFeatures = jsObject.deleteFeatures.map(i => buildDotNetGraphic(i, layerId, viewId));
    }
    
    if (hasValue(jsObject.identifierFields)) {
        dotNetServiceEdits.identifierFields = removeCircularReferences(jsObject.identifierFields);
    }
    
    if (hasValue(jsObject.id)) {
        dotNetServiceEdits.serviceEditsId = jsObject.id;
    }
    

    return dotNetServiceEdits;
}

