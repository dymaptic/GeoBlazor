import { buildDotNetVisualVariablesResultColor } from './visualVariablesResultColor';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import VisualVariablesResultColor = __esri.VisualVariablesResultColor;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsVisualVariablesResultColorGenerated(dotNetObject: any): Promise<any> {
    let jsVisualVariablesResultColor: any = {}
    if (hasValue(dotNetObject.visualVariable)) {
        let { buildJsColorVariable } = await import('./colorVariable');
        jsVisualVariablesResultColor.visualVariable = await buildJsColorVariable(dotNetObject.visualVariable, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.colorScheme)) {
        jsVisualVariablesResultColor.colorScheme = dotNetObject.colorScheme;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsVisualVariablesResultColor);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsVisualVariablesResultColor;
    
    let dnInstantiatedObject = await buildDotNetVisualVariablesResultColor(jsVisualVariablesResultColor);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for VisualVariablesResultColor', e);
    }
    
    return jsVisualVariablesResultColor;
}
export async function buildDotNetVisualVariablesResultColorGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVisualVariablesResultColor: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.visualVariable)) {
            let { buildDotNetColorVariable } = await import('./colorVariable');
            dotNetVisualVariablesResultColor.visualVariable = await buildDotNetColorVariable(jsObject.visualVariable);
        }
        if (hasValue(jsObject.colorScheme)) {
            dotNetVisualVariablesResultColor.colorScheme = jsObject.colorScheme;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetVisualVariablesResultColor.id = k;
                break;
            }
        }
    }

    return dotNetVisualVariablesResultColor;
}

