// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';

export async function buildJsLegendStyleGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsLegendStyle: any = {};

    if (hasValue(dotNetObject.layout)) {
        jsLegendStyle.layout = dotNetObject.layout;
    }
    
    jsObjectRefs[dotNetObject.id] = jsLegendStyle;
    arcGisObjectRefs[dotNetObject.id] = jsLegendStyle;
    
    return jsLegendStyle;
}


export async function buildDotNetLegendStyleGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLegendStyle: any = {};
    
    if (hasValue(jsObject.layout)) {
        dotNetLegendStyle.layout = removeCircularReferences(jsObject.layout);
    }
    
    if (hasValue(jsObject.type)) {
        dotNetLegendStyle.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetLegendStyle.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        if (hasValue(dotNetRef)) {
            try {
                dotNetLegendStyle.id = await dotNetRef.invokeMethodAsync('GetId');
            } catch (e) {
                console.error('Error invoking GetId for LegendStyle', e);
            }
        }
    }
    if (hasValue(dotNetLegendStyle.id)) {
        jsObjectRefs[dotNetLegendStyle.id] ??= jsObject;
        arcGisObjectRefs[dotNetLegendStyle.id] ??= jsObject;
    }

    return dotNetLegendStyle;
}

