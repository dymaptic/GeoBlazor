// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import LegendStyle = __esri.LegendStyle;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class LegendStyleGenerated implements IPropertyWrapper {
    public component: LegendStyle;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: LegendStyle) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsLegendStyleGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsLegendStyle: any = {}

    if (hasValue(dotNetObject.layout)) {
        jsLegendStyle.layout = dotNetObject.layout;
    }
    let { default: LegendStyleWrapper } = await import('./legendStyle');
    let legendStyleWrapper = new LegendStyleWrapper(jsLegendStyle);
    legendStyleWrapper.geoBlazorId = dotNetObject.id;
    legendStyleWrapper.viewId = viewId;
    legendStyleWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(legendStyleWrapper);
    jsObjectRefs[dotNetObject.id] = legendStyleWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsLegendStyle;
    
    let { buildDotNetLegendStyle } = await import('./legendStyle');
    let dnInstantiatedObject = await buildDotNetLegendStyle(jsLegendStyle, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LegendStyle', e);
    }
    
    return jsLegendStyle;
}

export async function buildDotNetLegendStyleGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLegendStyle: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.layout)) {
            dotNetLegendStyle.layout = jsObject.layout;
        }
        if (hasValue(jsObject.type)) {
            dotNetLegendStyle.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLegendStyle.id = k;
                break;
            }
        }
    }

    return dotNetLegendStyle;
}

