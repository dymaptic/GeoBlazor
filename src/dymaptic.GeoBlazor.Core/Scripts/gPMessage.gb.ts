// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import GPMessage from '@arcgis/core/rest/support/GPMessage';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetGPMessage } from './gPMessage';

export async function buildJsGPMessageGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.description)) {
        properties.description = dotNetObject.description;
    }
    let jsGPMessage = new GPMessage(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsGPMessage);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsGPMessage;
    
    return jsGPMessage;
}


export async function buildDotNetGPMessageGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGPMessage: any = {};
    
    if (hasValue(jsObject.description)) {
        dotNetGPMessage.description = jsObject.description;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetGPMessage.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetGPMessage.id = geoBlazorId;
    }

    return dotNetGPMessage;
}

