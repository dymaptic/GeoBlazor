// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import VersioningState from '@arcgis/core/versionManagement/VersioningState';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class VersioningStateGenerated implements IPropertyWrapper {
    public component: VersioningState;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: VersioningState) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async alterVersion(versionIdentifier: any,
        props: any): Promise<any> {
        return await this.component.alterVersion(versionIdentifier,
            props);
    }

    async changeVersion(toVersion: any): Promise<any> {
        return await this.component.changeVersion(toVersion);
    }

    async deleteVersion(versionIdentifier: any): Promise<any> {
        return await this.component.deleteVersion(versionIdentifier);
    }

    async getVersionInfoExtended(): Promise<any> {
        return await this.component.getVersionInfoExtended();
    }

    async getVersionInfos(refresh: any): Promise<any> {
        return await this.component.getVersionInfos(refresh);
    }

    async load(): Promise<any> {
        return await this.component.load();
    }

    async redo(): Promise<any> {
        return await this.component.redo();
    }

    async startEditing(): Promise<any> {
        return await this.component.startEditing();
    }

    async stopEditing(saveEdits: any): Promise<any> {
        return await this.component.stopEditing(saveEdits);
    }

    async undo(): Promise<any> {
        return await this.component.undo();
    }

    // region properties
    
    async getVersionableItems(): Promise<any> {
        if (!hasValue(this.component.versionableItems)) {
            return null;
        }
        
        let { buildDotNetVersionAdapter } = await import('./versionAdapter');
        return await Promise.all(this.component.versionableItems.map(async i => await buildDotNetVersionAdapter(i)));
    }
    
    async setVersionableItems(value: any): Promise<void> {
        let { buildJsVersionAdapter } = await import('./versionAdapter');
        this.component.versionableItems = await Promise.all(value.map(async i => await buildJsVersionAdapter(i, this.layerId, this.viewId))) as any;
    }
    
    async getVersionManagementService(): Promise<any> {
        if (!hasValue(this.component.versionManagementService)) {
            return null;
        }
        
        let { buildDotNetVersionManagementService } = await import('./versionManagementService');
        return await buildDotNetVersionManagementService(this.component.versionManagementService);
    }
    async setVersionManagementService(value: any): Promise<void> {
        let { buildJsVersionManagementService } = await import('./versionManagementService');
        this.component.versionManagementService = await  buildJsVersionManagementService(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsVersioningStateGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsVersioningState = new VersioningState();
    if (hasValue(dotNetObject.versionableItems)) {
        let { buildJsVersionAdapter } = await import('./versionAdapter');
        jsVersioningState.versionableItems = await Promise.all(dotNetObject.versionableItems.map(async i => await buildJsVersionAdapter(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.versionManagementService)) {
        let { buildJsVersionManagementService } = await import('./versionManagementService');
        jsVersioningState.versionManagementService = await buildJsVersionManagementService(dotNetObject.versionManagementService, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.currentVersion)) {
        jsVersioningState.currentVersion = dotNetObject.currentVersion;
    }
    if (hasValue(dotNetObject.currentVersionInfo)) {
        jsVersioningState.currentVersionInfo = dotNetObject.currentVersionInfo;
    }
    if (hasValue(dotNetObject.featureServiceUrl)) {
        jsVersioningState.featureServiceUrl = dotNetObject.featureServiceUrl;
    }
    if (hasValue(dotNetObject.state)) {
        jsVersioningState.state = dotNetObject.state;
    }
    if (hasValue(dotNetObject.url)) {
        jsVersioningState.url = dotNetObject.url;
    }
    if (hasValue(dotNetObject.usePersistentReadSessions)) {
        jsVersioningState.usePersistentReadSessions = dotNetObject.usePersistentReadSessions;
    }
    if (hasValue(dotNetObject.versionInfos)) {
        jsVersioningState.versionInfos = dotNetObject.versionInfos;
    }

    let { default: VersioningStateWrapper } = await import('./versioningState');
    let versioningStateWrapper = new VersioningStateWrapper(jsVersioningState);
    versioningStateWrapper.geoBlazorId = dotNetObject.id;
    versioningStateWrapper.viewId = viewId;
    versioningStateWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(versioningStateWrapper);
    jsObjectRefs[dotNetObject.id] = versioningStateWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsVersioningState;
    let { buildDotNetVersioningState } = await import('./versioningState');
    let dnInstantiatedObject = await buildDotNetVersioningState(jsVersioningState);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for VersioningState', e);
    }
    
    return jsVersioningState;
}

export async function buildDotNetVersioningStateGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVersioningState: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.versionableItems)) {
            let { buildDotNetVersionAdapter } = await import('./versionAdapter');
            dotNetVersioningState.versionableItems = await Promise.all(jsObject.versionableItems.map(async i => await buildDotNetVersionAdapter(i)));
        }
        if (hasValue(jsObject.versionManagementService)) {
            let { buildDotNetVersionManagementService } = await import('./versionManagementService');
            dotNetVersioningState.versionManagementService = await buildDotNetVersionManagementService(jsObject.versionManagementService);
        }
        if (hasValue(jsObject.currentVersion)) {
            dotNetVersioningState.currentVersion = jsObject.currentVersion;
        }
        if (hasValue(jsObject.currentVersionInfo)) {
            dotNetVersioningState.currentVersionInfo = jsObject.currentVersionInfo;
        }
        if (hasValue(jsObject.defaultVersionIdentifier)) {
            dotNetVersioningState.defaultVersionIdentifier = jsObject.defaultVersionIdentifier;
        }
        if (hasValue(jsObject.featureServiceUrl)) {
            dotNetVersioningState.featureServiceUrl = jsObject.featureServiceUrl;
        }
        if (hasValue(jsObject.isDefault)) {
            dotNetVersioningState.isDefault = jsObject.isDefault;
        }
        if (hasValue(jsObject.loaded)) {
            dotNetVersioningState.loaded = jsObject.loaded;
        }
        if (hasValue(jsObject.loadError)) {
            dotNetVersioningState.loadError = jsObject.loadError;
        }
        if (hasValue(jsObject.loadStatus)) {
            dotNetVersioningState.loadStatus = jsObject.loadStatus;
        }
        if (hasValue(jsObject.state)) {
            dotNetVersioningState.state = jsObject.state;
        }
        if (hasValue(jsObject.url)) {
            dotNetVersioningState.url = jsObject.url;
        }
        if (hasValue(jsObject.usePersistentReadSessions)) {
            dotNetVersioningState.usePersistentReadSessions = jsObject.usePersistentReadSessions;
        }
        if (hasValue(jsObject.versionInfos)) {
            dotNetVersioningState.versionInfos = jsObject.versionInfos;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetVersioningState.id = k;
                break;
            }
        }
    }

    return dotNetVersioningState;
}

