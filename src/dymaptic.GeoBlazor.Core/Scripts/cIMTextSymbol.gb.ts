// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetCIMTextSymbol } from './cIMTextSymbol';
import CIMTextSymbol = __esri.CIMTextSymbol;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsCIMTextSymbolGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCIMTextSymbol: any = {}
    if (hasValue(dotNetObject.callout)) {
        let { buildJsCIMBackgroundCallout } = await import('./cIMBackgroundCallout');
        jsCIMTextSymbol.callout = await buildJsCIMBackgroundCallout(dotNetObject.callout, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.haloSymbol)) {
        let { buildJsCIMPolygonSymbol } = await import('./cIMPolygonSymbol');
        jsCIMTextSymbol.haloSymbol = await buildJsCIMPolygonSymbol(dotNetObject.haloSymbol, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.symbol)) {
        let { buildJsCIMPolygonSymbol } = await import('./cIMPolygonSymbol');
        jsCIMTextSymbol.symbol = await buildJsCIMPolygonSymbol(dotNetObject.symbol, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.angle)) {
        jsCIMTextSymbol.angle = dotNetObject.angle;
    }
    if (hasValue(dotNetObject.angleX)) {
        jsCIMTextSymbol.angleX = dotNetObject.angleX;
    }
    if (hasValue(dotNetObject.angleY)) {
        jsCIMTextSymbol.angleY = dotNetObject.angleY;
    }
    if (hasValue(dotNetObject.billboardMode3D)) {
        jsCIMTextSymbol.billboardMode3D = dotNetObject.billboardMode3D;
    }
    if (hasValue(dotNetObject.blockProgression)) {
        jsCIMTextSymbol.blockProgression = dotNetObject.blockProgression;
    }
    if (hasValue(dotNetObject.compatibilityMode)) {
        jsCIMTextSymbol.compatibilityMode = dotNetObject.compatibilityMode;
    }
    if (hasValue(dotNetObject.countryISO)) {
        jsCIMTextSymbol.countryISO = dotNetObject.countryISO;
    }
    if (hasValue(dotNetObject.depth3D)) {
        jsCIMTextSymbol.depth3D = dotNetObject.depth3D;
    }
    if (hasValue(dotNetObject.drawGlyphsAsGeometry)) {
        jsCIMTextSymbol.drawGlyphsAsGeometry = dotNetObject.drawGlyphsAsGeometry;
    }
    if (hasValue(dotNetObject.drawSoftHyphen)) {
        jsCIMTextSymbol.drawSoftHyphen = dotNetObject.drawSoftHyphen;
    }
    if (hasValue(dotNetObject.extrapolateBaselines)) {
        jsCIMTextSymbol.extrapolateBaselines = dotNetObject.extrapolateBaselines;
    }
    if (hasValue(dotNetObject.flipAngle)) {
        jsCIMTextSymbol.flipAngle = dotNetObject.flipAngle;
    }
    if (hasValue(dotNetObject.fontEffects)) {
        jsCIMTextSymbol.fontEffects = dotNetObject.fontEffects;
    }
    if (hasValue(dotNetObject.fontEncoding)) {
        jsCIMTextSymbol.fontEncoding = dotNetObject.fontEncoding;
    }
    if (hasValue(dotNetObject.fontFamilyName)) {
        jsCIMTextSymbol.fontFamilyName = dotNetObject.fontFamilyName;
    }
    if (hasValue(dotNetObject.fontStyleName)) {
        jsCIMTextSymbol.fontStyleName = dotNetObject.fontStyleName;
    }
    if (hasValue(dotNetObject.fontType)) {
        jsCIMTextSymbol.fontType = dotNetObject.fontType;
    }
    if (hasValue(dotNetObject.glyphRotation)) {
        jsCIMTextSymbol.glyphRotation = dotNetObject.glyphRotation;
    }
    if (hasValue(dotNetObject.haloSize)) {
        jsCIMTextSymbol.haloSize = dotNetObject.haloSize;
    }
    if (hasValue(dotNetObject.height)) {
        jsCIMTextSymbol.height = dotNetObject.height;
    }
    if (hasValue(dotNetObject.hinting)) {
        jsCIMTextSymbol.hinting = dotNetObject.hinting;
    }
    if (hasValue(dotNetObject.horizontalAlignment)) {
        jsCIMTextSymbol.horizontalAlignment = dotNetObject.horizontalAlignment;
    }
    if (hasValue(dotNetObject.indentAfter)) {
        jsCIMTextSymbol.indentAfter = dotNetObject.indentAfter;
    }
    if (hasValue(dotNetObject.indentBefore)) {
        jsCIMTextSymbol.indentBefore = dotNetObject.indentBefore;
    }
    if (hasValue(dotNetObject.indentFirstLine)) {
        jsCIMTextSymbol.indentFirstLine = dotNetObject.indentFirstLine;
    }
    if (hasValue(dotNetObject.kerning)) {
        jsCIMTextSymbol.kerning = dotNetObject.kerning;
    }
    if (hasValue(dotNetObject.languageISO)) {
        jsCIMTextSymbol.languageISO = dotNetObject.languageISO;
    }
    if (hasValue(dotNetObject.letterSpacing)) {
        jsCIMTextSymbol.letterSpacing = dotNetObject.letterSpacing;
    }
    if (hasValue(dotNetObject.letterWidth)) {
        jsCIMTextSymbol.letterWidth = dotNetObject.letterWidth;
    }
    if (hasValue(dotNetObject.ligatures)) {
        jsCIMTextSymbol.ligatures = dotNetObject.ligatures;
    }
    if (hasValue(dotNetObject.lineGap)) {
        jsCIMTextSymbol.lineGap = dotNetObject.lineGap;
    }
    if (hasValue(dotNetObject.lineGapType)) {
        jsCIMTextSymbol.lineGapType = dotNetObject.lineGapType;
    }
    if (hasValue(dotNetObject.offsetX)) {
        jsCIMTextSymbol.offsetX = dotNetObject.offsetX;
    }
    if (hasValue(dotNetObject.offsetY)) {
        jsCIMTextSymbol.offsetY = dotNetObject.offsetY;
    }
    if (hasValue(dotNetObject.offsetZ)) {
        jsCIMTextSymbol.offsetZ = dotNetObject.offsetZ;
    }
    if (hasValue(dotNetObject.overprint)) {
        jsCIMTextSymbol.overprint = dotNetObject.overprint;
    }
    if (hasValue(dotNetObject.shadowColor)) {
        jsCIMTextSymbol.shadowColor = dotNetObject.shadowColor;
    }
    if (hasValue(dotNetObject.shadowOffsetX)) {
        jsCIMTextSymbol.shadowOffsetX = dotNetObject.shadowOffsetX;
    }
    if (hasValue(dotNetObject.shadowOffsetY)) {
        jsCIMTextSymbol.shadowOffsetY = dotNetObject.shadowOffsetY;
    }
    if (hasValue(dotNetObject.smallCaps)) {
        jsCIMTextSymbol.smallCaps = dotNetObject.smallCaps;
    }
    if (hasValue(dotNetObject.strikethrough)) {
        jsCIMTextSymbol.strikethrough = dotNetObject.strikethrough;
    }
    if (hasValue(dotNetObject.symbol3DProperties)) {
        jsCIMTextSymbol.symbol3DProperties = dotNetObject.symbol3DProperties;
    }
    if (hasValue(dotNetObject.textCase)) {
        jsCIMTextSymbol.textCase = dotNetObject.textCase;
    }
    if (hasValue(dotNetObject.textDirection)) {
        jsCIMTextSymbol.textDirection = dotNetObject.textDirection;
    }
    if (hasValue(dotNetObject.underline)) {
        jsCIMTextSymbol.underline = dotNetObject.underline;
    }
    if (hasValue(dotNetObject.verticalAlignment)) {
        jsCIMTextSymbol.verticalAlignment = dotNetObject.verticalAlignment;
    }
    if (hasValue(dotNetObject.verticalGlyphOrientation)) {
        jsCIMTextSymbol.verticalGlyphOrientation = dotNetObject.verticalGlyphOrientation;
    }
    if (hasValue(dotNetObject.wordSpacing)) {
        jsCIMTextSymbol.wordSpacing = dotNetObject.wordSpacing;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsCIMTextSymbol);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCIMTextSymbol;
    
    let dnInstantiatedObject = await buildDotNetCIMTextSymbol(jsCIMTextSymbol);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CIMTextSymbol', e);
    }
    
    return jsCIMTextSymbol;
}

export async function buildDotNetCIMTextSymbolGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCIMTextSymbol: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.callout)) {
            let { buildDotNetCIMBackgroundCallout } = await import('./cIMBackgroundCallout');
            dotNetCIMTextSymbol.callout = await buildDotNetCIMBackgroundCallout(jsObject.callout);
        }
        if (hasValue(jsObject.haloSymbol)) {
            let { buildDotNetCIMPolygonSymbol } = await import('./cIMPolygonSymbol');
            dotNetCIMTextSymbol.haloSymbol = await buildDotNetCIMPolygonSymbol(jsObject.haloSymbol);
        }
        if (hasValue(jsObject.symbol)) {
            let { buildDotNetCIMPolygonSymbol } = await import('./cIMPolygonSymbol');
            dotNetCIMTextSymbol.symbol = await buildDotNetCIMPolygonSymbol(jsObject.symbol);
        }
        if (hasValue(jsObject.angle)) {
            dotNetCIMTextSymbol.angle = jsObject.angle;
        }
        if (hasValue(jsObject.angleX)) {
            dotNetCIMTextSymbol.angleX = jsObject.angleX;
        }
        if (hasValue(jsObject.angleY)) {
            dotNetCIMTextSymbol.angleY = jsObject.angleY;
        }
        if (hasValue(jsObject.billboardMode3D)) {
            dotNetCIMTextSymbol.billboardMode3D = jsObject.billboardMode3D;
        }
        if (hasValue(jsObject.blockProgression)) {
            dotNetCIMTextSymbol.blockProgression = jsObject.blockProgression;
        }
        if (hasValue(jsObject.compatibilityMode)) {
            dotNetCIMTextSymbol.compatibilityMode = jsObject.compatibilityMode;
        }
        if (hasValue(jsObject.countryISO)) {
            dotNetCIMTextSymbol.countryISO = jsObject.countryISO;
        }
        if (hasValue(jsObject.depth3D)) {
            dotNetCIMTextSymbol.depth3D = jsObject.depth3D;
        }
        if (hasValue(jsObject.drawGlyphsAsGeometry)) {
            dotNetCIMTextSymbol.drawGlyphsAsGeometry = jsObject.drawGlyphsAsGeometry;
        }
        if (hasValue(jsObject.drawSoftHyphen)) {
            dotNetCIMTextSymbol.drawSoftHyphen = jsObject.drawSoftHyphen;
        }
        if (hasValue(jsObject.extrapolateBaselines)) {
            dotNetCIMTextSymbol.extrapolateBaselines = jsObject.extrapolateBaselines;
        }
        if (hasValue(jsObject.flipAngle)) {
            dotNetCIMTextSymbol.flipAngle = jsObject.flipAngle;
        }
        if (hasValue(jsObject.fontEffects)) {
            dotNetCIMTextSymbol.fontEffects = jsObject.fontEffects;
        }
        if (hasValue(jsObject.fontEncoding)) {
            dotNetCIMTextSymbol.fontEncoding = jsObject.fontEncoding;
        }
        if (hasValue(jsObject.fontFamilyName)) {
            dotNetCIMTextSymbol.fontFamilyName = jsObject.fontFamilyName;
        }
        if (hasValue(jsObject.fontStyleName)) {
            dotNetCIMTextSymbol.fontStyleName = jsObject.fontStyleName;
        }
        if (hasValue(jsObject.fontType)) {
            dotNetCIMTextSymbol.fontType = jsObject.fontType;
        }
        if (hasValue(jsObject.glyphRotation)) {
            dotNetCIMTextSymbol.glyphRotation = jsObject.glyphRotation;
        }
        if (hasValue(jsObject.haloSize)) {
            dotNetCIMTextSymbol.haloSize = jsObject.haloSize;
        }
        if (hasValue(jsObject.height)) {
            dotNetCIMTextSymbol.height = jsObject.height;
        }
        if (hasValue(jsObject.hinting)) {
            dotNetCIMTextSymbol.hinting = jsObject.hinting;
        }
        if (hasValue(jsObject.horizontalAlignment)) {
            dotNetCIMTextSymbol.horizontalAlignment = jsObject.horizontalAlignment;
        }
        if (hasValue(jsObject.indentAfter)) {
            dotNetCIMTextSymbol.indentAfter = jsObject.indentAfter;
        }
        if (hasValue(jsObject.indentBefore)) {
            dotNetCIMTextSymbol.indentBefore = jsObject.indentBefore;
        }
        if (hasValue(jsObject.indentFirstLine)) {
            dotNetCIMTextSymbol.indentFirstLine = jsObject.indentFirstLine;
        }
        if (hasValue(jsObject.kerning)) {
            dotNetCIMTextSymbol.kerning = jsObject.kerning;
        }
        if (hasValue(jsObject.languageISO)) {
            dotNetCIMTextSymbol.languageISO = jsObject.languageISO;
        }
        if (hasValue(jsObject.letterSpacing)) {
            dotNetCIMTextSymbol.letterSpacing = jsObject.letterSpacing;
        }
        if (hasValue(jsObject.letterWidth)) {
            dotNetCIMTextSymbol.letterWidth = jsObject.letterWidth;
        }
        if (hasValue(jsObject.ligatures)) {
            dotNetCIMTextSymbol.ligatures = jsObject.ligatures;
        }
        if (hasValue(jsObject.lineGap)) {
            dotNetCIMTextSymbol.lineGap = jsObject.lineGap;
        }
        if (hasValue(jsObject.lineGapType)) {
            dotNetCIMTextSymbol.lineGapType = jsObject.lineGapType;
        }
        if (hasValue(jsObject.offsetX)) {
            dotNetCIMTextSymbol.offsetX = jsObject.offsetX;
        }
        if (hasValue(jsObject.offsetY)) {
            dotNetCIMTextSymbol.offsetY = jsObject.offsetY;
        }
        if (hasValue(jsObject.offsetZ)) {
            dotNetCIMTextSymbol.offsetZ = jsObject.offsetZ;
        }
        if (hasValue(jsObject.overprint)) {
            dotNetCIMTextSymbol.overprint = jsObject.overprint;
        }
        if (hasValue(jsObject.shadowColor)) {
            dotNetCIMTextSymbol.shadowColor = jsObject.shadowColor;
        }
        if (hasValue(jsObject.shadowOffsetX)) {
            dotNetCIMTextSymbol.shadowOffsetX = jsObject.shadowOffsetX;
        }
        if (hasValue(jsObject.shadowOffsetY)) {
            dotNetCIMTextSymbol.shadowOffsetY = jsObject.shadowOffsetY;
        }
        if (hasValue(jsObject.smallCaps)) {
            dotNetCIMTextSymbol.smallCaps = jsObject.smallCaps;
        }
        if (hasValue(jsObject.strikethrough)) {
            dotNetCIMTextSymbol.strikethrough = jsObject.strikethrough;
        }
        if (hasValue(jsObject.symbol3DProperties)) {
            dotNetCIMTextSymbol.symbol3DProperties = jsObject.symbol3DProperties;
        }
        if (hasValue(jsObject.textCase)) {
            dotNetCIMTextSymbol.textCase = jsObject.textCase;
        }
        if (hasValue(jsObject.textDirection)) {
            dotNetCIMTextSymbol.textDirection = jsObject.textDirection;
        }
        if (hasValue(jsObject.type)) {
            dotNetCIMTextSymbol.type = jsObject.type;
        }
        if (hasValue(jsObject.underline)) {
            dotNetCIMTextSymbol.underline = jsObject.underline;
        }
        if (hasValue(jsObject.verticalAlignment)) {
            dotNetCIMTextSymbol.verticalAlignment = jsObject.verticalAlignment;
        }
        if (hasValue(jsObject.verticalGlyphOrientation)) {
            dotNetCIMTextSymbol.verticalGlyphOrientation = jsObject.verticalGlyphOrientation;
        }
        if (hasValue(jsObject.wordSpacing)) {
            dotNetCIMTextSymbol.wordSpacing = jsObject.wordSpacing;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCIMTextSymbol.id = k;
                break;
            }
        }
    }

    return dotNetCIMTextSymbol;
}

