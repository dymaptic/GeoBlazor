import {buildDotNetBuildingExplorerViewModel} from './buildingExplorerViewModel';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import BuildingExplorerViewModel from '@arcgis/core/widgets/BuildingExplorer/BuildingExplorerViewModel';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsBuildingExplorerViewModelGenerated(dotNetObject: any): Promise<any> {
    let jsBuildingExplorerViewModel = new BuildingExplorerViewModel();
    if (hasValue(dotNetObject.layers)) {
        let {buildJsBuildingSceneLayer} = await import('./buildingSceneLayer');
        jsBuildingExplorerViewModel.layers = await Promise.all(dotNetObject.layers.map(async i => await buildJsBuildingSceneLayer(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.view)) {
        jsBuildingExplorerViewModel.view = dotNetObject.view;
    }

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsBuildingExplorerViewModel);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsBuildingExplorerViewModel;

    let dnInstantiatedObject = await buildDotNetBuildingExplorerViewModel(jsBuildingExplorerViewModel);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BuildingExplorerViewModel', e);
    }

    return jsBuildingExplorerViewModel;
}

export async function buildDotNetBuildingExplorerViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetBuildingExplorerViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.level)) {
        let {buildDotNetBuildingLevel} = await import('./buildingLevel');
        dotNetBuildingExplorerViewModel.level = await buildDotNetBuildingLevel(jsObject.level);
    }
    if (hasValue(jsObject.phase)) {
        let {buildDotNetBuildingPhase} = await import('./buildingPhase');
        dotNetBuildingExplorerViewModel.phase = await buildDotNetBuildingPhase(jsObject.phase);
    }
    if (hasValue(jsObject.state)) {
        dotNetBuildingExplorerViewModel.state = jsObject.state;
    }
    if (hasValue(jsObject.view)) {
        dotNetBuildingExplorerViewModel.view = jsObject.view;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetBuildingExplorerViewModel.id = k;
                break;
            }
        }
    }

    return dotNetBuildingExplorerViewModel;
}

