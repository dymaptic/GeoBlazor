// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import Color = __esri.Color;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class MapColorGenerated implements IPropertyWrapper {
    public component: Color;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: Color) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }

    // region methods

    unwrap() {
        return this.component;
    }

    async setColor(color: any): Promise<any> {
        let result = this.component.setColor(color);
        let {buildDotNetMapColor} = await import('./mapColor');
        return buildDotNetMapColor(result);
    }

    async toCss(includeAlpha: any): Promise<any> {
        return this.component.toCss(includeAlpha);
    }

    async toHex(options: any): Promise<any> {
        return this.component.toHex(options);
    }

    async toRgb(): Promise<any> {
        return this.component.toRgb();
    }

    async toRgba(): Promise<any> {
        return this.component.toRgba();
    }

    // region properties

    getProperty(prop: string): any {
        return this.component[prop];
    }

    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsMapColorGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsColor = new Color();

    if (hasValue(dotNetObject.a)) {
        jsColor.a = dotNetObject.a;
    }
    if (hasValue(dotNetObject.b)) {
        jsColor.b = dotNetObject.b;
    }
    if (hasValue(dotNetObject.g)) {
        jsColor.g = dotNetObject.g;
    }
    if (hasValue(dotNetObject.r)) {
        jsColor.r = dotNetObject.r;
    }
    let {default: MapColorWrapper} = await import('./mapColor');
    let mapColorWrapper = new MapColorWrapper(jsColor);
    mapColorWrapper.geoBlazorId = dotNetObject.id;
    mapColorWrapper.viewId = viewId;
    mapColorWrapper.layerId = layerId;

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(mapColorWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = mapColorWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsColor;

    return jsColor;
}

export function buildDotNetMapColorGenerated(jsObject: any): any {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetMapColor: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    dotNetMapColor.a = jsObject.a;
    dotNetMapColor.b = jsObject.b;
    dotNetMapColor.g = jsObject.g;
    dotNetMapColor.r = jsObject.r;

    return dotNetMapColor;
}

