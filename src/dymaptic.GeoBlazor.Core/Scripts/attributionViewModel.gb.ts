// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import AttributionViewModel from '@arcgis/core/widgets/Attribution/AttributionViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetAttributionViewModel } from './attributionViewModel';

export async function buildJsAttributionViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }

    let jsAttributionViewModel = new AttributionViewModel(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsAttributionViewModel);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsAttributionViewModel;
    
    let dnInstantiatedObject = await buildDotNetAttributionViewModel(jsAttributionViewModel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for AttributionViewModel', e);
    }
    
    return jsAttributionViewModel;
}

export async function buildDotNetAttributionViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAttributionViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.items)) {
            let { buildDotNetAttributionItem } = await import('./attributionItem');
            dotNetAttributionViewModel.items = await Promise.all(jsObject.items.map(async i => await buildDotNetAttributionItem(i)));
        }
    if (hasValue(jsObject.state)) {
        dotNetAttributionViewModel.state = jsObject.state;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetAttributionViewModel.id = k;
                break;
            }
        }
    }

    return dotNetAttributionViewModel;
}

