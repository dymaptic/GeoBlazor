import { buildDotNetColorSchemeForPoint } from './colorSchemeForPoint';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import ColorSchemeForPoint = __esri.ColorSchemeForPoint;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsColorSchemeForPointGenerated(dotNetObject: any): Promise<any> {
    let jsColorSchemeForPoint: any = {}
    if (hasValue(dotNetObject.colors)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsColorSchemeForPoint.colors = dotNetObject.colors.map(i => buildJsMapColor(i)) as any;
    }
    if (hasValue(dotNetObject.colorsForClassBreaks)) {
        let { buildJsColorSchemeForPointColorsForClassBreaks } = await import('./colorSchemeForPointColorsForClassBreaks');
        jsColorSchemeForPoint.colorsForClassBreaks = await Promise.all(dotNetObject.colorsForClassBreaks.map(async i => await buildJsColorSchemeForPointColorsForClassBreaks(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.noDataColor)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsColorSchemeForPoint.noDataColor = buildJsMapColor(dotNetObject.noDataColor) as any;
    }
    if (hasValue(dotNetObject.outline)) {
        let { buildJsColorSchemeForPointOutline } = await import('./colorSchemeForPointOutline');
        jsColorSchemeForPoint.outline = await buildJsColorSchemeForPointOutline(dotNetObject.outline, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.colorSchemeForPointId)) {
        jsColorSchemeForPoint.id = dotNetObject.colorSchemeForPointId;
    }
    if (hasValue(dotNetObject.name)) {
        jsColorSchemeForPoint.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.opacity)) {
        jsColorSchemeForPoint.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.size)) {
        jsColorSchemeForPoint.size = dotNetObject.size;
    }
    if (hasValue(dotNetObject.tags)) {
        jsColorSchemeForPoint.tags = dotNetObject.tags;
    }
    if (hasValue(dotNetObject.theme)) {
        jsColorSchemeForPoint.theme = dotNetObject.theme;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsColorSchemeForPoint);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsColorSchemeForPoint;
    
    let dnInstantiatedObject = await buildDotNetColorSchemeForPoint(jsColorSchemeForPoint);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ColorSchemeForPoint', e);
    }
    
    return jsColorSchemeForPoint;
}
export async function buildDotNetColorSchemeForPointGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetColorSchemeForPoint: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.colors)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetColorSchemeForPoint.colors = jsObject.colors.map(i => buildDotNetMapColor(i));
        }
        if (hasValue(jsObject.colorsForClassBreaks)) {
            let { buildDotNetColorSchemeForPointColorsForClassBreaks } = await import('./colorSchemeForPointColorsForClassBreaks');
            dotNetColorSchemeForPoint.colorsForClassBreaks = await Promise.all(jsObject.colorsForClassBreaks.map(async i => await buildDotNetColorSchemeForPointColorsForClassBreaks(i)));
        }
        if (hasValue(jsObject.noDataColor)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetColorSchemeForPoint.noDataColor = buildDotNetMapColor(jsObject.noDataColor);
        }
        if (hasValue(jsObject.outline)) {
            let { buildDotNetColorSchemeForPointOutline } = await import('./colorSchemeForPointOutline');
            dotNetColorSchemeForPoint.outline = await buildDotNetColorSchemeForPointOutline(jsObject.outline);
        }
        if (hasValue(jsObject.id)) {
            dotNetColorSchemeForPoint.colorSchemeForPointId = jsObject.id;
        }
        if (hasValue(jsObject.name)) {
            dotNetColorSchemeForPoint.name = jsObject.name;
        }
        if (hasValue(jsObject.opacity)) {
            dotNetColorSchemeForPoint.opacity = jsObject.opacity;
        }
        if (hasValue(jsObject.size)) {
            dotNetColorSchemeForPoint.size = jsObject.size;
        }
        if (hasValue(jsObject.tags)) {
            dotNetColorSchemeForPoint.tags = jsObject.tags;
        }
        if (hasValue(jsObject.theme)) {
            dotNetColorSchemeForPoint.theme = jsObject.theme;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetColorSchemeForPoint.id = k;
                break;
            }
        }
    }

    return dotNetColorSchemeForPoint;
}

