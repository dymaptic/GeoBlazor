// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import RasterSensorInfo from '@arcgis/core/layers/support/RasterSensorInfo';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class RasterSensorInfoGenerated implements IPropertyWrapper {
    public component: RasterSensorInfo;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: RasterSensorInfo) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsRasterSensorInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsRasterSensorInfo = new RasterSensorInfo();

    if (hasValue(dotNetObject.acquisitionDate)) {
        jsRasterSensorInfo.acquisitionDate = dotNetObject.acquisitionDate;
    }
    if (hasValue(dotNetObject.cloudCover)) {
        jsRasterSensorInfo.cloudCover = dotNetObject.cloudCover;
    }
    if (hasValue(dotNetObject.productName)) {
        jsRasterSensorInfo.productName = dotNetObject.productName;
    }
    if (hasValue(dotNetObject.sensorAzimuth)) {
        jsRasterSensorInfo.sensorAzimuth = dotNetObject.sensorAzimuth;
    }
    if (hasValue(dotNetObject.sensorElevation)) {
        jsRasterSensorInfo.sensorElevation = dotNetObject.sensorElevation;
    }
    if (hasValue(dotNetObject.sensorName)) {
        jsRasterSensorInfo.sensorName = dotNetObject.sensorName;
    }
    if (hasValue(dotNetObject.sunAzimuth)) {
        jsRasterSensorInfo.sunAzimuth = dotNetObject.sunAzimuth;
    }
    if (hasValue(dotNetObject.sunElevation)) {
        jsRasterSensorInfo.sunElevation = dotNetObject.sunElevation;
    }
    let { default: RasterSensorInfoWrapper } = await import('./rasterSensorInfo');
    let rasterSensorInfoWrapper = new RasterSensorInfoWrapper(jsRasterSensorInfo);
    rasterSensorInfoWrapper.geoBlazorId = dotNetObject.id;
    rasterSensorInfoWrapper.viewId = viewId;
    rasterSensorInfoWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(rasterSensorInfoWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = rasterSensorInfoWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsRasterSensorInfo;
    
    return jsRasterSensorInfo;
}

export async function buildDotNetRasterSensorInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRasterSensorInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetRasterSensorInfo.acquisitionDate = jsObject.acquisitionDate;
        dotNetRasterSensorInfo.cloudCover = jsObject.cloudCover;
        dotNetRasterSensorInfo.productName = jsObject.productName;
        dotNetRasterSensorInfo.sensorAzimuth = jsObject.sensorAzimuth;
        dotNetRasterSensorInfo.sensorElevation = jsObject.sensorElevation;
        dotNetRasterSensorInfo.sensorName = jsObject.sensorName;
        dotNetRasterSensorInfo.sunAzimuth = jsObject.sunAzimuth;
        dotNetRasterSensorInfo.sunElevation = jsObject.sunElevation;

    return dotNetRasterSensorInfo;
}

