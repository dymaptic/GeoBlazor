// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import RasterSensorInfo from '@arcgis/core/layers/support/RasterSensorInfo';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetRasterSensorInfo } from './rasterSensorInfo';

export async function buildJsRasterSensorInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.acquisitionDate)) {
        properties.acquisitionDate = dotNetObject.acquisitionDate;
    }
    if (hasValue(dotNetObject.cloudCover)) {
        properties.cloudCover = dotNetObject.cloudCover;
    }
    if (hasValue(dotNetObject.productName)) {
        properties.productName = dotNetObject.productName;
    }
    if (hasValue(dotNetObject.sensorAzimuth)) {
        properties.sensorAzimuth = dotNetObject.sensorAzimuth;
    }
    if (hasValue(dotNetObject.sensorElevation)) {
        properties.sensorElevation = dotNetObject.sensorElevation;
    }
    if (hasValue(dotNetObject.sensorName)) {
        properties.sensorName = dotNetObject.sensorName;
    }
    if (hasValue(dotNetObject.sunAzimuth)) {
        properties.sunAzimuth = dotNetObject.sunAzimuth;
    }
    if (hasValue(dotNetObject.sunElevation)) {
        properties.sunElevation = dotNetObject.sunElevation;
    }
    let jsRasterSensorInfo = new RasterSensorInfo(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsRasterSensorInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRasterSensorInfo;
    
    let { buildDotNetRasterSensorInfo } = await import('./rasterSensorInfo');
    let dnInstantiatedObject = await buildDotNetRasterSensorInfo(jsRasterSensorInfo);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type RasterSensorInfo detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RasterSensorInfo', e);
    }
    
    return jsRasterSensorInfo;
}


export async function buildDotNetRasterSensorInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRasterSensorInfo: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.acquisitionDate)) {
        dotNetRasterSensorInfo.acquisitionDate = jsObject.acquisitionDate;
    }
    if (hasValue(jsObject.cloudCover)) {
        dotNetRasterSensorInfo.cloudCover = jsObject.cloudCover;
    }
    if (hasValue(jsObject.productName)) {
        dotNetRasterSensorInfo.productName = jsObject.productName;
    }
    if (hasValue(jsObject.sensorAzimuth)) {
        dotNetRasterSensorInfo.sensorAzimuth = jsObject.sensorAzimuth;
    }
    if (hasValue(jsObject.sensorElevation)) {
        dotNetRasterSensorInfo.sensorElevation = jsObject.sensorElevation;
    }
    if (hasValue(jsObject.sensorName)) {
        dotNetRasterSensorInfo.sensorName = jsObject.sensorName;
    }
    if (hasValue(jsObject.sunAzimuth)) {
        dotNetRasterSensorInfo.sunAzimuth = jsObject.sunAzimuth;
    }
    if (hasValue(jsObject.sunElevation)) {
        dotNetRasterSensorInfo.sunElevation = jsObject.sunElevation;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetRasterSensorInfo.id = geoBlazorId;
    }

    return dotNetRasterSensorInfo;
}

