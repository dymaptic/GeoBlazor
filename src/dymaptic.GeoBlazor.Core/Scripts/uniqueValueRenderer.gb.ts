// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import UniqueValueRenderer from '@arcgis/core/renderers/UniqueValueRenderer';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class UniqueValueRendererGenerated implements IPropertyWrapper {
    public component: UniqueValueRenderer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: UniqueValueRenderer) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.authoringInfo)) {
            let { buildJsAuthoringInfo } = await import('./authoringInfo');
            this.component.authoringInfo = await buildJsAuthoringInfo(dotNetObject.authoringInfo, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.backgroundFillSymbol)) {
            let { buildJsFillSymbol } = await import('./fillSymbol');
            this.component.backgroundFillSymbol = await buildJsFillSymbol(dotNetObject.backgroundFillSymbol) as any;
        }
        if (hasValue(dotNetObject.defaultSymbol)) {
            let { buildJsSymbol } = await import('./symbol');
            this.component.defaultSymbol = buildJsSymbol(dotNetObject.defaultSymbol) as any;
        }
        if (hasValue(dotNetObject.legendOptions)) {
            let { buildJsUniqueValueRendererLegendOptions } = await import('./uniqueValueRendererLegendOptions');
            this.component.legendOptions = await buildJsUniqueValueRendererLegendOptions(dotNetObject.legendOptions, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.uniqueValueGroups) && dotNetObject.uniqueValueGroups.length > 0) {
            let { buildJsUniqueValueGroup } = await import('./uniqueValueGroup');
            this.component.uniqueValueGroups = await Promise.all(dotNetObject.uniqueValueGroups.map(async i => await buildJsUniqueValueGroup(i, this.layerId, this.viewId))) as any;
        }
        if (hasValue(dotNetObject.uniqueValueInfos) && dotNetObject.uniqueValueInfos.length > 0) {
            let { buildJsUniqueValueInfo } = await import('./uniqueValueInfo');
            this.component.uniqueValueInfos = await Promise.all(dotNetObject.uniqueValueInfos.map(async i => await buildJsUniqueValueInfo(i, this.layerId, this.viewId))) as any;
        }
        if (hasValue(dotNetObject.visualVariables) && dotNetObject.visualVariables.length > 0) {
            let { buildJsVisualVariable } = await import('./visualVariable');
            this.component.visualVariables = await Promise.all(dotNetObject.visualVariables.map(async i => await buildJsVisualVariable(i, this.layerId, this.viewId))) as any;
        }

        if (hasValue(dotNetObject.defaultLabel)) {
            this.component.defaultLabel = dotNetObject.defaultLabel;
        }
        if (hasValue(dotNetObject.field)) {
            this.component.field = dotNetObject.field;
        }
        if (hasValue(dotNetObject.field2)) {
            this.component.field2 = dotNetObject.field2;
        }
        if (hasValue(dotNetObject.field3)) {
            this.component.field3 = dotNetObject.field3;
        }
        if (hasValue(dotNetObject.fieldDelimiter)) {
            this.component.fieldDelimiter = dotNetObject.fieldDelimiter;
        }
        if (hasValue(dotNetObject.orderByClassesEnabled)) {
            this.component.orderByClassesEnabled = dotNetObject.orderByClassesEnabled;
        }
        if (hasValue(dotNetObject.valueExpression)) {
            this.component.valueExpression = dotNetObject.valueExpression;
        }
        if (hasValue(dotNetObject.valueExpressionTitle)) {
            this.component.valueExpressionTitle = dotNetObject.valueExpressionTitle;
        }
    }
    
    async addUniqueValueInfo(valueOrInfo: any,
        symbol: any): Promise<void> {
        let jsSymbol: any; 
        try {
            // @ts-ignore GeoBlazor Pro only
            let { buildJsSymbol } = await import('./symbol');
            // @ts-ignore GeoBlazor Pro only
            jsSymbol = buildJsSymbol(symbol) as any;
        } catch (e) {
            console.error(`Pro functionality not available in GeoBlazor Core. ${e}`);
            jsSymbol = null;
        }
        this.component.addUniqueValueInfo(valueOrInfo,
            jsSymbol);
    }

    async getUniqueValueInfo(graphic: any): Promise<any> {
        let { buildJsGraphic } = await import('./graphic');
        let jsGraphic = buildJsGraphic(graphic) as any;
        return await this.component.getUniqueValueInfo(jsGraphic);
    }

    async removeUniqueValueInfo(value: any): Promise<void> {
        this.component.removeUniqueValueInfo(value);
    }

    // region properties
    
    async getAuthoringInfo(): Promise<any> {
        if (!hasValue(this.component.authoringInfo)) {
            return null;
        }
        
        let { buildDotNetAuthoringInfo } = await import('./authoringInfo');
        return await buildDotNetAuthoringInfo(this.component.authoringInfo, this.layerId, this.viewId);
    }
    
    async setAuthoringInfo(value: any): Promise<void> {
        let { buildJsAuthoringInfo } = await import('./authoringInfo');
        this.component.authoringInfo = await  buildJsAuthoringInfo(value, this.layerId, this.viewId);
    }
    
    async getBackgroundFillSymbol(): Promise<any> {
        if (!hasValue(this.component.backgroundFillSymbol)) {
            return null;
        }
        
        let { buildDotNetFillSymbol } = await import('./fillSymbol');
        return await buildDotNetFillSymbol(this.component.backgroundFillSymbol);
    }
    
    async setBackgroundFillSymbol(value: any): Promise<void> {
        let { buildJsFillSymbol } = await import('./fillSymbol');
        this.component.backgroundFillSymbol = await  buildJsFillSymbol(value);
    }
    
    async getDefaultSymbol(): Promise<any> {
        if (!hasValue(this.component.defaultSymbol)) {
            return null;
        }
        
        let { buildDotNetSymbol } = await import('./symbol');
        return buildDotNetSymbol(this.component.defaultSymbol);
    }
    
    async setDefaultSymbol(value: any): Promise<void> {
        let { buildJsSymbol } = await import('./symbol');
        this.component.defaultSymbol =  buildJsSymbol(value);
    }
    
    async getLegendOptions(): Promise<any> {
        if (!hasValue(this.component.legendOptions)) {
            return null;
        }
        
        let { buildDotNetUniqueValueRendererLegendOptions } = await import('./uniqueValueRendererLegendOptions');
        return await buildDotNetUniqueValueRendererLegendOptions(this.component.legendOptions, this.layerId, this.viewId);
    }
    
    async setLegendOptions(value: any): Promise<void> {
        let { buildJsUniqueValueRendererLegendOptions } = await import('./uniqueValueRendererLegendOptions');
        this.component.legendOptions = await  buildJsUniqueValueRendererLegendOptions(value, this.layerId, this.viewId);
    }
    
    async getUniqueValueGroups(): Promise<any> {
        if (!hasValue(this.component.uniqueValueGroups)) {
            return null;
        }
        
        let { buildDotNetUniqueValueGroup } = await import('./uniqueValueGroup');
        return await Promise.all(this.component.uniqueValueGroups.map(async i => await buildDotNetUniqueValueGroup(i, this.layerId, this.viewId)));
    }
    
    async setUniqueValueGroups(value: any): Promise<void> {
        let { buildJsUniqueValueGroup } = await import('./uniqueValueGroup');
        this.component.uniqueValueGroups = await Promise.all(value.map(async i => await buildJsUniqueValueGroup(i, this.layerId, this.viewId))) as any;
    }
    
    async getUniqueValueInfos(): Promise<any> {
        if (!hasValue(this.component.uniqueValueInfos)) {
            return null;
        }
        
        let { buildDotNetUniqueValueInfo } = await import('./uniqueValueInfo');
        return await Promise.all(this.component.uniqueValueInfos.map(async i => await buildDotNetUniqueValueInfo(i, this.layerId, this.viewId)));
    }
    
    async setUniqueValueInfos(value: any): Promise<void> {
        let { buildJsUniqueValueInfo } = await import('./uniqueValueInfo');
        this.component.uniqueValueInfos = await Promise.all(value.map(async i => await buildJsUniqueValueInfo(i, this.layerId, this.viewId))) as any;
    }
    
    async getVisualVariables(): Promise<any> {
        if (!hasValue(this.component.visualVariables)) {
            return null;
        }
        
        let { buildDotNetVisualVariable } = await import('./visualVariable');
        return await Promise.all(this.component.visualVariables.map(async i => await buildDotNetVisualVariable(i)));
    }
    
    async setVisualVariables(value: any): Promise<void> {
        let { buildJsVisualVariable } = await import('./visualVariable');
        this.component.visualVariables = await Promise.all(value.map(async i => await buildJsVisualVariable(i, this.layerId, this.viewId))) as any;
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsUniqueValueRendererGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.authoringInfo)) {
        let { buildJsAuthoringInfo } = await import('./authoringInfo');
        properties.authoringInfo = await buildJsAuthoringInfo(dotNetObject.authoringInfo, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.backgroundFillSymbol)) {
        let { buildJsFillSymbol } = await import('./fillSymbol');
        properties.backgroundFillSymbol = await buildJsFillSymbol(dotNetObject.backgroundFillSymbol) as any;
    }
    if (hasValue(dotNetObject.defaultSymbol)) {
        let { buildJsSymbol } = await import('./symbol');
        properties.defaultSymbol = buildJsSymbol(dotNetObject.defaultSymbol) as any;
    }
    if (hasValue(dotNetObject.legendOptions)) {
        let { buildJsUniqueValueRendererLegendOptions } = await import('./uniqueValueRendererLegendOptions');
        properties.legendOptions = await buildJsUniqueValueRendererLegendOptions(dotNetObject.legendOptions, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.uniqueValueGroups) && dotNetObject.uniqueValueGroups.length > 0) {
        let { buildJsUniqueValueGroup } = await import('./uniqueValueGroup');
        properties.uniqueValueGroups = await Promise.all(dotNetObject.uniqueValueGroups.map(async i => await buildJsUniqueValueGroup(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.uniqueValueInfos) && dotNetObject.uniqueValueInfos.length > 0) {
        let { buildJsUniqueValueInfo } = await import('./uniqueValueInfo');
        properties.uniqueValueInfos = await Promise.all(dotNetObject.uniqueValueInfos.map(async i => await buildJsUniqueValueInfo(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.visualVariables) && dotNetObject.visualVariables.length > 0) {
        let { buildJsVisualVariable } = await import('./visualVariable');
        properties.visualVariables = await Promise.all(dotNetObject.visualVariables.map(async i => await buildJsVisualVariable(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.defaultLabel)) {
        properties.defaultLabel = dotNetObject.defaultLabel;
    }
    if (hasValue(dotNetObject.field)) {
        properties.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.field2)) {
        properties.field2 = dotNetObject.field2;
    }
    if (hasValue(dotNetObject.field3)) {
        properties.field3 = dotNetObject.field3;
    }
    if (hasValue(dotNetObject.fieldDelimiter)) {
        properties.fieldDelimiter = dotNetObject.fieldDelimiter;
    }
    if (hasValue(dotNetObject.orderByClassesEnabled)) {
        properties.orderByClassesEnabled = dotNetObject.orderByClassesEnabled;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        properties.valueExpression = dotNetObject.valueExpression;
    }
    if (hasValue(dotNetObject.valueExpressionTitle)) {
        properties.valueExpressionTitle = dotNetObject.valueExpressionTitle;
    }
    let jsUniqueValueRenderer = new UniqueValueRenderer(properties);

    let { default: UniqueValueRendererWrapper } = await import('./uniqueValueRenderer');
    let uniqueValueRendererWrapper = new UniqueValueRendererWrapper(jsUniqueValueRenderer);
    uniqueValueRendererWrapper.geoBlazorId = dotNetObject.id;
    uniqueValueRendererWrapper.viewId = viewId;
    uniqueValueRendererWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(uniqueValueRendererWrapper);
    jsObjectRefs[dotNetObject.id] = uniqueValueRendererWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsUniqueValueRenderer;
    
    let { buildDotNetUniqueValueRenderer } = await import('./uniqueValueRenderer');
    let dnInstantiatedObject = await buildDotNetUniqueValueRenderer(jsUniqueValueRenderer, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type UniqueValueRenderer detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for UniqueValueRenderer', e);
    }
    
    return jsUniqueValueRenderer;
}


export async function buildDotNetUniqueValueRendererGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUniqueValueRenderer: any = {};
    
    if (hasValue(jsObject.authoringInfo)) {
        let { buildDotNetAuthoringInfo } = await import('./authoringInfo');
        dotNetUniqueValueRenderer.authoringInfo = await buildDotNetAuthoringInfo(jsObject.authoringInfo, layerId, viewId);
    }
    
    if (hasValue(jsObject.backgroundFillSymbol)) {
        let { buildDotNetFillSymbol } = await import('./fillSymbol');
        dotNetUniqueValueRenderer.backgroundFillSymbol = await buildDotNetFillSymbol(jsObject.backgroundFillSymbol);
    }
    
    if (hasValue(jsObject.defaultSymbol)) {
        let { buildDotNetSymbol } = await import('./symbol');
        dotNetUniqueValueRenderer.defaultSymbol = buildDotNetSymbol(jsObject.defaultSymbol);
    }
    
    if (hasValue(jsObject.legendOptions)) {
        let { buildDotNetUniqueValueRendererLegendOptions } = await import('./uniqueValueRendererLegendOptions');
        dotNetUniqueValueRenderer.legendOptions = await buildDotNetUniqueValueRendererLegendOptions(jsObject.legendOptions, layerId, viewId);
    }
    
    if (hasValue(jsObject.uniqueValueGroups)) {
        let { buildDotNetUniqueValueGroup } = await import('./uniqueValueGroup');
        dotNetUniqueValueRenderer.uniqueValueGroups = await Promise.all(jsObject.uniqueValueGroups.map(async i => await buildDotNetUniqueValueGroup(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.uniqueValueInfos)) {
        let { buildDotNetUniqueValueInfo } = await import('./uniqueValueInfo');
        dotNetUniqueValueRenderer.uniqueValueInfos = await Promise.all(jsObject.uniqueValueInfos.map(async i => await buildDotNetUniqueValueInfo(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.visualVariables)) {
        let { buildDotNetVisualVariable } = await import('./visualVariable');
        dotNetUniqueValueRenderer.visualVariables = await Promise.all(jsObject.visualVariables.map(async i => await buildDotNetVisualVariable(i)));
    }
    
    if (hasValue(jsObject.defaultLabel)) {
        dotNetUniqueValueRenderer.defaultLabel = jsObject.defaultLabel;
    }
    
    if (hasValue(jsObject.field)) {
        dotNetUniqueValueRenderer.field = jsObject.field;
    }
    
    if (hasValue(jsObject.field2)) {
        dotNetUniqueValueRenderer.field2 = jsObject.field2;
    }
    
    if (hasValue(jsObject.field3)) {
        dotNetUniqueValueRenderer.field3 = jsObject.field3;
    }
    
    if (hasValue(jsObject.fieldDelimiter)) {
        dotNetUniqueValueRenderer.fieldDelimiter = jsObject.fieldDelimiter;
    }
    
    if (hasValue(jsObject.orderByClassesEnabled)) {
        dotNetUniqueValueRenderer.orderByClassesEnabled = jsObject.orderByClassesEnabled;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetUniqueValueRenderer.type = jsObject.type;
    }
    
    if (hasValue(jsObject.valueExpression)) {
        dotNetUniqueValueRenderer.valueExpression = jsObject.valueExpression;
    }
    
    if (hasValue(jsObject.valueExpressionTitle)) {
        dotNetUniqueValueRenderer.valueExpressionTitle = jsObject.valueExpressionTitle;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetUniqueValueRenderer.id = geoBlazorId;
    }

    return dotNetUniqueValueRenderer;
}

