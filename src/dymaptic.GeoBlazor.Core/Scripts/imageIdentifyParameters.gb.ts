import {buildDotNetImageIdentifyParameters} from './imageIdentifyParameters';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import ImageIdentifyParameters from '@arcgis/core/rest/support/ImageIdentifyParameters';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsImageIdentifyParametersGenerated(dotNetObject: any): Promise<any> {
    let jsImageIdentifyParameters = new ImageIdentifyParameters();
    if (hasValue(dotNetObject.geometry)) {
        let {buildJsGeometry} = await import('./geometry');
        jsImageIdentifyParameters.geometry = buildJsGeometry(dotNetObject.geometry) as any;
    }
    if (hasValue(dotNetObject.mosaicRule)) {
        let {buildJsMosaicRule} = await import('./mosaicRule');
        jsImageIdentifyParameters.mosaicRule = await buildJsMosaicRule(dotNetObject.mosaicRule, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let {buildJsTimeExtent} = await import('./timeExtent');
        jsImageIdentifyParameters.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.maxItemCount)) {
        jsImageIdentifyParameters.maxItemCount = dotNetObject.maxItemCount;
    }
    if (hasValue(dotNetObject.pixelSize)) {
        jsImageIdentifyParameters.pixelSize = dotNetObject.pixelSize;
    }
    if (hasValue(dotNetObject.processAsMultidimensional)) {
        jsImageIdentifyParameters.processAsMultidimensional = dotNetObject.processAsMultidimensional;
    }
    if (hasValue(dotNetObject.rasterFunction)) {
        const {id, dotNetComponentReference, layerId, viewId, ...sanitizedRasterFunction} = dotNetObject.rasterFunction;
        jsImageIdentifyParameters.rasterFunction = sanitizedRasterFunction;
    }
    if (hasValue(dotNetObject.rasterFunctions)) {
        const {
            id,
            dotNetComponentReference,
            layerId,
            viewId,
            ...sanitizedRasterFunctions
        } = dotNetObject.rasterFunctions;
        jsImageIdentifyParameters.rasterFunctions = sanitizedRasterFunctions;
    }
    if (hasValue(dotNetObject.renderingRule)) {
        jsImageIdentifyParameters.renderingRule = dotNetObject.renderingRule;
    }
    if (hasValue(dotNetObject.renderingRules)) {
        const {id, dotNetComponentReference, layerId, viewId, ...sanitizedRenderingRules} = dotNetObject.renderingRules;
        jsImageIdentifyParameters.renderingRules = sanitizedRenderingRules;
    }
    if (hasValue(dotNetObject.returnCatalogItems)) {
        jsImageIdentifyParameters.returnCatalogItems = dotNetObject.returnCatalogItems;
    }
    if (hasValue(dotNetObject.returnGeometry)) {
        jsImageIdentifyParameters.returnGeometry = dotNetObject.returnGeometry;
    }
    if (hasValue(dotNetObject.returnPixelValues)) {
        jsImageIdentifyParameters.returnPixelValues = dotNetObject.returnPixelValues;
    }

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsImageIdentifyParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageIdentifyParameters;

    let dnInstantiatedObject = await buildDotNetImageIdentifyParameters(jsImageIdentifyParameters);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImageIdentifyParameters', e);
    }

    return jsImageIdentifyParameters;
}

export async function buildDotNetImageIdentifyParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetImageIdentifyParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.geometry)) {
        let {buildDotNetGeometry} = await import('./geometry');
        dotNetImageIdentifyParameters.geometry = buildDotNetGeometry(jsObject.geometry);
    }
    if (hasValue(jsObject.mosaicRule)) {
        let {buildDotNetMosaicRule} = await import('./mosaicRule');
        dotNetImageIdentifyParameters.mosaicRule = await buildDotNetMosaicRule(jsObject.mosaicRule);
    }
    if (hasValue(jsObject.timeExtent)) {
        let {buildDotNetTimeExtent} = await import('./timeExtent');
        dotNetImageIdentifyParameters.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
    }
    if (hasValue(jsObject.maxItemCount)) {
        dotNetImageIdentifyParameters.maxItemCount = jsObject.maxItemCount;
    }
    if (hasValue(jsObject.pixelSize)) {
        dotNetImageIdentifyParameters.pixelSize = jsObject.pixelSize;
    }
    if (hasValue(jsObject.processAsMultidimensional)) {
        dotNetImageIdentifyParameters.processAsMultidimensional = jsObject.processAsMultidimensional;
    }
    if (hasValue(jsObject.rasterFunction)) {
        dotNetImageIdentifyParameters.rasterFunction = jsObject.rasterFunction;
    }
    if (hasValue(jsObject.rasterFunctions)) {
        dotNetImageIdentifyParameters.rasterFunctions = jsObject.rasterFunctions;
    }
    if (hasValue(jsObject.renderingRule)) {
        dotNetImageIdentifyParameters.renderingRule = jsObject.renderingRule;
    }
    if (hasValue(jsObject.renderingRules)) {
        dotNetImageIdentifyParameters.renderingRules = jsObject.renderingRules;
    }
    if (hasValue(jsObject.returnCatalogItems)) {
        dotNetImageIdentifyParameters.returnCatalogItems = jsObject.returnCatalogItems;
    }
    if (hasValue(jsObject.returnGeometry)) {
        dotNetImageIdentifyParameters.returnGeometry = jsObject.returnGeometry;
    }
    if (hasValue(jsObject.returnPixelValues)) {
        dotNetImageIdentifyParameters.returnPixelValues = jsObject.returnPixelValues;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImageIdentifyParameters.id = k;
                break;
            }
        }
    }

    return dotNetImageIdentifyParameters;
}

