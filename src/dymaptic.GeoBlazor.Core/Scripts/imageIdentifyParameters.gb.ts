// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageIdentifyParameters from '@arcgis/core/rest/support/ImageIdentifyParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetImageIdentifyParameters } from './imageIdentifyParameters';

export async function buildJsImageIdentifyParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsGeometry } = await import('./geometry');
        properties.geometry = buildJsGeometry(dotNetObject.geometry) as any;
    }
    if (hasValue(dotNetObject.mosaicRule)) {
        let { buildJsMosaicRule } = await import('./mosaicRule');
        properties.mosaicRule = await buildJsMosaicRule(dotNetObject.mosaicRule) as any;
    }
    if (hasValue(dotNetObject.pixelSize)) {
        let { buildJsPoint } = await import('./point');
        properties.pixelSize = buildJsPoint(dotNetObject.pixelSize) as any;
    }
    if (hasValue(dotNetObject.rasterFunction)) {
        let { buildJsRasterFunction } = await import('./rasterFunction');
        properties.rasterFunction = await buildJsRasterFunction(dotNetObject.rasterFunction) as any;
    }
    if (hasValue(dotNetObject.rasterFunctions) && dotNetObject.rasterFunctions.length > 0) {
        let { buildJsRasterFunction } = await import('./rasterFunction');
        properties.rasterFunctions = await Promise.all(dotNetObject.rasterFunctions.map(async i => await buildJsRasterFunction(i))) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent) as any;
    }

    if (hasValue(dotNetObject.maxItemCount)) {
        properties.maxItemCount = dotNetObject.maxItemCount;
    }
    if (hasValue(dotNetObject.processAsMultidimensional)) {
        properties.processAsMultidimensional = dotNetObject.processAsMultidimensional;
    }
    if (hasValue(dotNetObject.returnCatalogItems)) {
        properties.returnCatalogItems = dotNetObject.returnCatalogItems;
    }
    if (hasValue(dotNetObject.returnGeometry)) {
        properties.returnGeometry = dotNetObject.returnGeometry;
    }
    if (hasValue(dotNetObject.returnPixelValues)) {
        properties.returnPixelValues = dotNetObject.returnPixelValues;
    }
    let jsImageIdentifyParameters = new ImageIdentifyParameters(properties);
    
    jsObjectRefs[dotNetObject.id] = jsImageIdentifyParameters;
    arcGisObjectRefs[dotNetObject.id] = jsImageIdentifyParameters;
    
    return jsImageIdentifyParameters;
}


export async function buildDotNetImageIdentifyParametersGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageIdentifyParameters: any = {};
    
    if (hasValue(jsObject.geometry)) {
        let { buildDotNetGeometry } = await import('./geometry');
        dotNetImageIdentifyParameters.geometry = buildDotNetGeometry(jsObject.geometry);
    }
    
    if (hasValue(jsObject.mosaicRule)) {
        let { buildDotNetMosaicRule } = await import('./mosaicRule');
        dotNetImageIdentifyParameters.mosaicRule = await buildDotNetMosaicRule(jsObject.mosaicRule);
    }
    
    if (hasValue(jsObject.pixelSize)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetImageIdentifyParameters.pixelSize = buildDotNetPoint(jsObject.pixelSize);
    }
    
    if (hasValue(jsObject.rasterFunction)) {
        let { buildDotNetRasterFunction } = await import('./rasterFunction');
        dotNetImageIdentifyParameters.rasterFunction = await buildDotNetRasterFunction(jsObject.rasterFunction);
    }
    
    if (hasValue(jsObject.rasterFunctions)) {
        let { buildDotNetRasterFunction } = await import('./rasterFunction');
        dotNetImageIdentifyParameters.rasterFunctions = await Promise.all(jsObject.rasterFunctions.map(async i => await buildDotNetRasterFunction(i)));
    }
    
    if (hasValue(jsObject.timeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetImageIdentifyParameters.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
    }
    
    if (hasValue(jsObject.maxItemCount)) {
        dotNetImageIdentifyParameters.maxItemCount = jsObject.maxItemCount;
    }
    
    if (hasValue(jsObject.processAsMultidimensional)) {
        dotNetImageIdentifyParameters.processAsMultidimensional = jsObject.processAsMultidimensional;
    }
    
    if (hasValue(jsObject.returnCatalogItems)) {
        dotNetImageIdentifyParameters.returnCatalogItems = jsObject.returnCatalogItems;
    }
    
    if (hasValue(jsObject.returnGeometry)) {
        dotNetImageIdentifyParameters.returnGeometry = jsObject.returnGeometry;
    }
    
    if (hasValue(jsObject.returnPixelValues)) {
        dotNetImageIdentifyParameters.returnPixelValues = jsObject.returnPixelValues;
    }
    

    return dotNetImageIdentifyParameters;
}

