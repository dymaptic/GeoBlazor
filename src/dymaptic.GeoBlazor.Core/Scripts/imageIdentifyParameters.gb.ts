// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageIdentifyParameters from '@arcgis/core/rest/support/ImageIdentifyParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetImageIdentifyParameters } from './imageIdentifyParameters';

export async function buildJsImageIdentifyParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsGeometry } = await import('./geometry');
        properties.geometry = buildJsGeometry(dotNetObject.geometry) as any;
    }
    if (hasValue(dotNetObject.mosaicRule)) {
        let { buildJsMosaicRule } = await import('./mosaicRule');
        properties.mosaicRule = await buildJsMosaicRule(dotNetObject.mosaicRule) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.maxItemCount)) {
        properties.maxItemCount = dotNetObject.maxItemCount;
    }
    if (hasValue(dotNetObject.pixelSize)) {
        properties.pixelSize = dotNetObject.pixelSize;
    }
    if (hasValue(dotNetObject.processAsMultidimensional)) {
        properties.processAsMultidimensional = dotNetObject.processAsMultidimensional;
    }
    if (hasValue(dotNetObject.rasterFunction)) {
        const { id, dotNetComponentReference, ...sanitizedRasterFunction } = dotNetObject.rasterFunction;
        properties.rasterFunction = sanitizedRasterFunction;
    }
    if (hasValue(dotNetObject.rasterFunctions)) {
        const { id, dotNetComponentReference, ...sanitizedRasterFunctions } = dotNetObject.rasterFunctions;
        properties.rasterFunctions = sanitizedRasterFunctions;
    }
    if (hasValue(dotNetObject.renderingRule)) {
        properties.renderingRule = dotNetObject.renderingRule;
    }
    if (hasValue(dotNetObject.renderingRules)) {
        const { id, dotNetComponentReference, ...sanitizedRenderingRules } = dotNetObject.renderingRules;
        properties.renderingRules = sanitizedRenderingRules;
    }
    if (hasValue(dotNetObject.returnCatalogItems)) {
        properties.returnCatalogItems = dotNetObject.returnCatalogItems;
    }
    if (hasValue(dotNetObject.returnGeometry)) {
        properties.returnGeometry = dotNetObject.returnGeometry;
    }
    if (hasValue(dotNetObject.returnPixelValues)) {
        properties.returnPixelValues = dotNetObject.returnPixelValues;
    }
    let jsImageIdentifyParameters = new ImageIdentifyParameters(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsImageIdentifyParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageIdentifyParameters;
    
    let { buildDotNetImageIdentifyParameters } = await import('./imageIdentifyParameters');
    let dnInstantiatedObject = await buildDotNetImageIdentifyParameters(jsImageIdentifyParameters);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type ImageIdentifyParameters detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImageIdentifyParameters', e);
    }
    
    return jsImageIdentifyParameters;
}


export async function buildDotNetImageIdentifyParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageIdentifyParameters: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.geometry)) {
        let { buildDotNetGeometry } = await import('./geometry');
        dotNetImageIdentifyParameters.geometry = buildDotNetGeometry(jsObject.geometry);
    }
    if (hasValue(jsObject.mosaicRule)) {
        let { buildDotNetMosaicRule } = await import('./mosaicRule');
        dotNetImageIdentifyParameters.mosaicRule = await buildDotNetMosaicRule(jsObject.mosaicRule);
    }
    if (hasValue(jsObject.timeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetImageIdentifyParameters.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
    }
    if (hasValue(jsObject.maxItemCount)) {
        dotNetImageIdentifyParameters.maxItemCount = jsObject.maxItemCount;
    }
    if (hasValue(jsObject.pixelSize)) {
        dotNetImageIdentifyParameters.pixelSize = jsObject.pixelSize;
    }
    if (hasValue(jsObject.processAsMultidimensional)) {
        dotNetImageIdentifyParameters.processAsMultidimensional = jsObject.processAsMultidimensional;
    }
    if (hasValue(jsObject.rasterFunction)) {
        dotNetImageIdentifyParameters.rasterFunction = jsObject.rasterFunction;
    }
    if (hasValue(jsObject.rasterFunctions)) {
        dotNetImageIdentifyParameters.rasterFunctions = jsObject.rasterFunctions;
    }
    if (hasValue(jsObject.renderingRule)) {
        dotNetImageIdentifyParameters.renderingRule = jsObject.renderingRule;
    }
    if (hasValue(jsObject.renderingRules)) {
        dotNetImageIdentifyParameters.renderingRules = jsObject.renderingRules;
    }
    if (hasValue(jsObject.returnCatalogItems)) {
        dotNetImageIdentifyParameters.returnCatalogItems = jsObject.returnCatalogItems;
    }
    if (hasValue(jsObject.returnGeometry)) {
        dotNetImageIdentifyParameters.returnGeometry = jsObject.returnGeometry;
    }
    if (hasValue(jsObject.returnPixelValues)) {
        dotNetImageIdentifyParameters.returnPixelValues = jsObject.returnPixelValues;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImageIdentifyParameters.id = k;
                break;
            }
        }
    }

    return dotNetImageIdentifyParameters;
}

