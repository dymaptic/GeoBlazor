// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetEditorWidgetVisibleElements } from './editorWidgetVisibleElements';

export async function buildJsEditorWidgetVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsEditorVisibleElements: any = {};
    if (hasValue(dotNetObject.snappingControlsElements)) {
        let { buildJsVisibleElementsSnappingControlsElements } = await import('./visibleElementsSnappingControlsElements');
        jsEditorVisibleElements.snappingControlsElements = await buildJsVisibleElementsSnappingControlsElements(dotNetObject.snappingControlsElements, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.createFeaturesSection)) {
        jsEditorVisibleElements.createFeaturesSection = dotNetObject.createFeaturesSection;
    }
    if (hasValue(dotNetObject.editFeaturesSection)) {
        jsEditorVisibleElements.editFeaturesSection = dotNetObject.editFeaturesSection;
    }
    if (hasValue(dotNetObject.labelsToggle)) {
        jsEditorVisibleElements.labelsToggle = dotNetObject.labelsToggle;
    }
    if (hasValue(dotNetObject.settingsMenu)) {
        jsEditorVisibleElements.settingsMenu = dotNetObject.settingsMenu;
    }
    if (hasValue(dotNetObject.snappingControls)) {
        jsEditorVisibleElements.snappingControls = dotNetObject.snappingControls;
    }
    if (hasValue(dotNetObject.tooltipsToggle)) {
        jsEditorVisibleElements.tooltipsToggle = dotNetObject.tooltipsToggle;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsEditorVisibleElements);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsEditorVisibleElements;
    
    try {
        let { buildDotNetEditorWidgetVisibleElements } = await import('./editorWidgetVisibleElements');
        let dnInstantiatedObject = await buildDotNetEditorWidgetVisibleElements(jsEditorVisibleElements, layerId, viewId);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type EditorWidgetVisibleElements detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for EditorWidgetVisibleElements', e);
    }
    
    return jsEditorVisibleElements;
}


export async function buildDotNetEditorWidgetVisibleElementsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetEditorWidgetVisibleElements: any = {};
    
    if (hasValue(jsObject.snappingControlsElements)) {
        let { buildDotNetVisibleElementsSnappingControlsElements } = await import('./visibleElementsSnappingControlsElements');
        dotNetEditorWidgetVisibleElements.snappingControlsElements = await buildDotNetVisibleElementsSnappingControlsElements(jsObject.snappingControlsElements, layerId, viewId);
    }
    
    if (hasValue(jsObject.createFeaturesSection)) {
        dotNetEditorWidgetVisibleElements.createFeaturesSection = jsObject.createFeaturesSection;
    }
    
    if (hasValue(jsObject.editFeaturesSection)) {
        dotNetEditorWidgetVisibleElements.editFeaturesSection = jsObject.editFeaturesSection;
    }
    
    if (hasValue(jsObject.labelsToggle)) {
        dotNetEditorWidgetVisibleElements.labelsToggle = jsObject.labelsToggle;
    }
    
    if (hasValue(jsObject.settingsMenu)) {
        dotNetEditorWidgetVisibleElements.settingsMenu = jsObject.settingsMenu;
    }
    
    if (hasValue(jsObject.snappingControls)) {
        dotNetEditorWidgetVisibleElements.snappingControls = jsObject.snappingControls;
    }
    
    if (hasValue(jsObject.tooltipsToggle)) {
        dotNetEditorWidgetVisibleElements.tooltipsToggle = jsObject.tooltipsToggle;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetEditorWidgetVisibleElements.id = geoBlazorId;
    }

    return dotNetEditorWidgetVisibleElements;
}

