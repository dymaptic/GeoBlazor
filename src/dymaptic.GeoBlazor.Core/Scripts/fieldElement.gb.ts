// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import FieldElement from '@arcgis/core/form/elements/FieldElement';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FieldElementGenerated implements IPropertyWrapper {
    public component: FieldElement;
    public readonly geoBlazorId: string = '';

    constructor(component: FieldElement) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}
export async function buildJsFieldElementGenerated(dotNetObject: any): Promise<any> {
    let { default: FieldElement } = await import('@arcgis/core/form/elements/FieldElement');
    let jsFieldElement = new FieldElement();
    if (hasValue(dotNetObject.description)) {
        jsFieldElement.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.domain)) {
        jsFieldElement.domain = dotNetObject.domain;
    }
    if (hasValue(dotNetObject.editableExpression)) {
        jsFieldElement.editableExpression = dotNetObject.editableExpression;
    }
    if (hasValue(dotNetObject.fieldName)) {
        jsFieldElement.fieldName = dotNetObject.fieldName;
    }
    if (hasValue(dotNetObject.hint)) {
        jsFieldElement.hint = dotNetObject.hint;
    }
    if (hasValue(dotNetObject.input)) {
        jsFieldElement.input = dotNetObject.input;
    }
    if (hasValue(dotNetObject.label)) {
        jsFieldElement.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.requiredExpression)) {
        jsFieldElement.requiredExpression = dotNetObject.requiredExpression;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        jsFieldElement.valueExpression = dotNetObject.valueExpression;
    }
    if (hasValue(dotNetObject.visibilityExpression)) {
        jsFieldElement.visibilityExpression = dotNetObject.visibilityExpression;
    }
    let { default: FieldElementWrapper } = await import('./fieldElement');
    let fieldElementWrapper = new FieldElementWrapper(jsFieldElement);
    jsFieldElement.id = dotNetObject.id;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(fieldElementWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = fieldElementWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsFieldElement;
    
    return jsFieldElement;
}

export async function buildDotNetFieldElementGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFieldElement: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetFieldElement.description = jsObject.description;
        dotNetFieldElement.domain = jsObject.domain;
        dotNetFieldElement.editableExpression = jsObject.editableExpression;
        dotNetFieldElement.fieldName = jsObject.fieldName;
        dotNetFieldElement.hint = jsObject.hint;
        dotNetFieldElement.input = jsObject.input;
        dotNetFieldElement.label = jsObject.label;
        dotNetFieldElement.requiredExpression = jsObject.requiredExpression;
        dotNetFieldElement.type = jsObject.type;
        dotNetFieldElement.valueExpression = jsObject.valueExpression;
        dotNetFieldElement.visibilityExpression = jsObject.visibilityExpression;
    return dotNetFieldElement;
}

