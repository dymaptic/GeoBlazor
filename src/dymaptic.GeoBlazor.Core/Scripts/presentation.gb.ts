// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Presentation from '@arcgis/core/webscene/Presentation';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetPresentation } from './presentation';

export async function buildJsPresentationGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.slides) && dotNetObject.slides.length > 0) {
        let { buildJsSlide } = await import('./slide');
        properties.slides = await Promise.all(dotNetObject.slides.map(async i => await buildJsSlide(i, layerId, viewId))) as any;
    }

    let jsPresentation = new Presentation(properties);
    
    jsObjectRefs[dotNetObject.id] = jsPresentation;
    arcGisObjectRefs[dotNetObject.id] = jsPresentation;
    
    return jsPresentation;
}


export async function buildDotNetPresentationGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPresentation: any = {};
    
    if (hasValue(jsObject.slides)) {
        let { buildDotNetSlide } = await import('./slide');
        dotNetPresentation.slides = await Promise.all(jsObject.slides.map(async i => await buildDotNetSlide(i, layerId, viewId)));
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetPresentation.id = geoBlazorId;
    }

    return dotNetPresentation;
}

