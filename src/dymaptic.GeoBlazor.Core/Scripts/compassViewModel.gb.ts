// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import CompassViewModel from '@arcgis/core/widgets/Compass/CompassViewModel';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CompassViewModelGenerated implements IPropertyWrapper {
    public component: CompassViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: CompassViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {

    }
    
    async reset(): Promise<void> {
        this.component.reset();
    }

    // region properties
    
    async getOrientation(): Promise<any> {
        if (!hasValue(this.component.orientation)) {
            return null;
        }
        
        let { buildDotNetOrientation } = await import('./orientation');
        return await buildDotNetOrientation(this.component.orientation, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsCompassViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.hasGoToOverride) && dotNetObject.hasGoToOverride) {
        properties.goToOverride = async (view,
        goToParameters) => {

            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsGoToOverride', view,
            goToParameters);
        };
    }

    let jsCompassViewModel = new CompassViewModel(properties);

    let { default: CompassViewModelWrapper } = await import('./compassViewModel');
    let compassViewModelWrapper = new CompassViewModelWrapper(jsCompassViewModel);
    compassViewModelWrapper.geoBlazorId = dotNetObject.id;
    compassViewModelWrapper.viewId = viewId;
    compassViewModelWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = compassViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsCompassViewModel;
    
    return jsCompassViewModel;
}


export async function buildDotNetCompassViewModelGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCompassViewModel: any = {};
    
    if (hasValue(jsObject.orientation)) {
        let { buildDotNetOrientation } = await import('./orientation');
        dotNetCompassViewModel.orientation = await buildDotNetOrientation(jsObject.orientation, viewId);
    }
    
    if (hasValue(jsObject.state)) {
        dotNetCompassViewModel.state = removeCircularReferences(jsObject.state);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCompassViewModel.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetCompassViewModel.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetCompassViewModel.id)) {
        jsObjectRefs[dotNetCompassViewModel.id] ??= jsObject;
        arcGisObjectRefs[dotNetCompassViewModel.id] ??= jsObject;
    }

    return dotNetCompassViewModel;
}

