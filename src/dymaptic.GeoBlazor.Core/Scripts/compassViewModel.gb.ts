// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import CompassViewModel from '@arcgis/core/widgets/Compass/CompassViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CompassViewModelGenerated implements IPropertyWrapper {
    public component: CompassViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: CompassViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async reset(): Promise<void> {
        this.component.reset();
    }

    // region properties
    
    async getGoToOverride(): Promise<any> {
        if (!hasValue(this.component.goToOverride)) {
            return null;
        }
        
        let { buildDotNetGoToOverride } = await import('./goToOverride');
        return await buildDotNetGoToOverride(this.component.goToOverride);
    }
    
    async setGoToOverride(value: any): Promise<void> {
        let { buildJsGoToOverride } = await import('./goToOverride');
        this.component.goToOverride =  buildJsGoToOverride(value, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsCompassViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.goToOverride)) {
        let { buildJsGoToOverride } = await import('./goToOverride');
        properties.goToOverride = buildJsGoToOverride(dotNetObject.goToOverride, viewId) as any;
    }

    let jsCompassViewModel = new CompassViewModel(properties);

    let { default: CompassViewModelWrapper } = await import('./compassViewModel');
    let compassViewModelWrapper = new CompassViewModelWrapper(jsCompassViewModel);
    compassViewModelWrapper.geoBlazorId = dotNetObject.id;
    compassViewModelWrapper.viewId = viewId;
    compassViewModelWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(compassViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = compassViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsCompassViewModel;
    
    let { buildDotNetCompassViewModel } = await import('./compassViewModel');
    let dnInstantiatedObject = await buildDotNetCompassViewModel(jsCompassViewModel);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type CompassViewModel detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CompassViewModel', e);
    }
    
    return jsCompassViewModel;
}


export async function buildDotNetCompassViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCompassViewModel: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.goToOverride)) {
        let { buildDotNetGoToOverride } = await import('./goToOverride');
        dotNetCompassViewModel.goToOverride = await buildDotNetGoToOverride(jsObject.goToOverride);
    }
    if (hasValue(jsObject.orientation)) {
        dotNetCompassViewModel.orientation = jsObject.orientation;
    }
    if (hasValue(jsObject.state)) {
        dotNetCompassViewModel.state = jsObject.state;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCompassViewModel.id = k;
                break;
            }
        }
    }

    return dotNetCompassViewModel;
}

