// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetBinaryNode } from './binaryNode';

export async function buildJsBinaryNodeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsBinaryNode: any = {};

    if (hasValue(dotNetObject.escape)) {
        jsBinaryNode.escape = dotNetObject.escape;
    }
    if (hasValue(dotNetObject.left)) {
        jsBinaryNode.left = dotNetObject.left;
    }
    if (hasValue(dotNetObject.operator)) {
        jsBinaryNode.operator = dotNetObject.operator;
    }
    if (hasValue(dotNetObject.right)) {
        jsBinaryNode.right = dotNetObject.right;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsBinaryNode);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsBinaryNode;
    
    let { buildDotNetBinaryNode } = await import('./binaryNode');
    let dnInstantiatedObject = await buildDotNetBinaryNode(jsBinaryNode);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type BinaryNode detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BinaryNode', e);
    }
    
    return jsBinaryNode;
}


export async function buildDotNetBinaryNodeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBinaryNode: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.escape)) {
        dotNetBinaryNode.escape = jsObject.escape;
    }
    if (hasValue(jsObject.left)) {
        dotNetBinaryNode.left = jsObject.left;
    }
    if (hasValue(jsObject.operator)) {
        dotNetBinaryNode.operator = jsObject.operator;
    }
    if (hasValue(jsObject.right)) {
        dotNetBinaryNode.right = jsObject.right;
    }
    if (hasValue(jsObject.type)) {
        dotNetBinaryNode.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetBinaryNode.id = k;
                break;
            }
        }
    }

    return dotNetBinaryNode;
}

