// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetCIMSolidFill } from './cIMSolidFill';

export async function buildJsCIMSolidFillGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCIMSolidFill: any = {};
    if (hasValue(dotNetObject.effects)) {
        let { buildJsICIMGeometricEffect } = await import('./iCIMGeometricEffect');
        jsCIMSolidFill.effects = dotNetObject.effects.map(i => buildJsICIMGeometricEffect(i)) as any;
    }

    if (hasValue(dotNetObject.color)) {
        jsCIMSolidFill.color = dotNetObject.color;
    }
    if (hasValue(dotNetObject.colorLocked)) {
        jsCIMSolidFill.colorLocked = dotNetObject.colorLocked;
    }
    if (hasValue(dotNetObject.enable)) {
        jsCIMSolidFill.enable = dotNetObject.enable;
    }
    if (hasValue(dotNetObject.name)) {
        jsCIMSolidFill.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.overprint)) {
        jsCIMSolidFill.overprint = dotNetObject.overprint;
    }
    if (hasValue(dotNetObject.primitiveName)) {
        jsCIMSolidFill.primitiveName = dotNetObject.primitiveName;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCIMSolidFill);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCIMSolidFill;
    
    let { buildDotNetCIMSolidFill } = await import('./cIMSolidFill');
    let dnInstantiatedObject = await buildDotNetCIMSolidFill(jsCIMSolidFill);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type CIMSolidFill detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CIMSolidFill', e);
    }
    
    return jsCIMSolidFill;
}


export async function buildDotNetCIMSolidFillGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCIMSolidFill: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.effects)) {
        let { buildDotNetICIMGeometricEffect } = await import('./iCIMGeometricEffect');
        dotNetCIMSolidFill.effects = jsObject.effects.map(i => buildDotNetICIMGeometricEffect(i));
    }
    if (hasValue(jsObject.color)) {
        dotNetCIMSolidFill.color = jsObject.color;
    }
    if (hasValue(jsObject.colorLocked)) {
        dotNetCIMSolidFill.colorLocked = jsObject.colorLocked;
    }
    if (hasValue(jsObject.enable)) {
        dotNetCIMSolidFill.enable = jsObject.enable;
    }
    if (hasValue(jsObject.name)) {
        dotNetCIMSolidFill.name = jsObject.name;
    }
    if (hasValue(jsObject.overprint)) {
        dotNetCIMSolidFill.overprint = jsObject.overprint;
    }
    if (hasValue(jsObject.primitiveName)) {
        dotNetCIMSolidFill.primitiveName = jsObject.primitiveName;
    }
    if (hasValue(jsObject.type)) {
        dotNetCIMSolidFill.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCIMSolidFill.id = k;
                break;
            }
        }
    }

    return dotNetCIMSolidFill;
}

