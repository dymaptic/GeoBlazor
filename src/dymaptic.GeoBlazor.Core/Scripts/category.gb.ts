// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCategory } from './category';

export async function buildJsCategoryGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsCategory: any = {};

    if (hasValue(dotNetObject.categoryId)) {
        jsCategory.categoryId = dotNetObject.categoryId;
    }
    if (hasValue(dotNetObject.label)) {
        jsCategory.label = dotNetObject.label;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCategory);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCategory;
    
    return jsCategory;
}


export async function buildDotNetCategoryGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCategory: any = {};
    
    if (hasValue(jsObject.categoryId)) {
        dotNetCategory.categoryId = jsObject.categoryId;
    }
    
    if (hasValue(jsObject.label)) {
        dotNetCategory.label = jsObject.label;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCategory.id = geoBlazorId;
    }

    return dotNetCategory;
}

