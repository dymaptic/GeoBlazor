// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import TerminalConfiguration from '@arcgis/core/networks/support/TerminalConfiguration';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class TerminalConfigurationGenerated implements IPropertyWrapper {
    public component: TerminalConfiguration;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: TerminalConfiguration) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getTerminals(): Promise<any> {
        if (!hasValue(this.component.terminals)) {
            return null;
        }
        
        let { buildDotNetTerminal } = await import('./terminal');
        return await Promise.all(this.component.terminals.map(async i => await buildDotNetTerminal(i)));
    }
    
    async setTerminals(value: any): Promise<void> {
        let { buildJsTerminal } = await import('./terminal');
        this.component.terminals = await Promise.all(value.map(async i => await buildJsTerminal(i, this.layerId, this.viewId))) as any;
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsTerminalConfigurationGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTerminalConfiguration = new TerminalConfiguration();
    if (hasValue(dotNetObject.terminals)) {
        let { buildJsTerminal } = await import('./terminal');
        jsTerminalConfiguration.terminals = await Promise.all(dotNetObject.terminals.map(async i => await buildJsTerminal(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.defaultConfiguration)) {
        jsTerminalConfiguration.defaultConfiguration = dotNetObject.defaultConfiguration;
    }
    if (hasValue(dotNetObject.name)) {
        jsTerminalConfiguration.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.terminalConfigurationId)) {
        jsTerminalConfiguration.id = dotNetObject.terminalConfigurationId;
    }
    if (hasValue(dotNetObject.traversabilityModel)) {
        jsTerminalConfiguration.traversabilityModel = dotNetObject.traversabilityModel;
    }
    let { default: TerminalConfigurationWrapper } = await import('./terminalConfiguration');
    let terminalConfigurationWrapper = new TerminalConfigurationWrapper(jsTerminalConfiguration);
    terminalConfigurationWrapper.geoBlazorId = dotNetObject.id;
    terminalConfigurationWrapper.viewId = viewId;
    terminalConfigurationWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(terminalConfigurationWrapper);
    jsObjectRefs[dotNetObject.id] = terminalConfigurationWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsTerminalConfiguration;
    
    let dnInstantiatedObject = await buildDotNetTerminalConfiguration(jsTerminalConfiguration, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TerminalConfiguration', e);
    }
    
    return jsTerminalConfiguration;
}

export async function buildDotNetTerminalConfigurationGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTerminalConfiguration: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.terminals)) {
            let { buildDotNetTerminal } = await import('./terminal');
            dotNetTerminalConfiguration.terminals = await Promise.all(jsObject.terminals.map(async i => await buildDotNetTerminal(i, layerId, viewId)));
        }
        if (hasValue(jsObject.defaultConfiguration)) {
            dotNetTerminalConfiguration.defaultConfiguration = jsObject.defaultConfiguration;
        }
        if (hasValue(jsObject.name)) {
            dotNetTerminalConfiguration.name = jsObject.name;
        }
        if (hasValue(jsObject.id)) {
            dotNetTerminalConfiguration.terminalConfigurationId = jsObject.id;
        }
        if (hasValue(jsObject.traversabilityModel)) {
            dotNetTerminalConfiguration.traversabilityModel = jsObject.traversabilityModel;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTerminalConfiguration.id = k;
                break;
            }
        }
    }

    return dotNetTerminalConfiguration;
}

