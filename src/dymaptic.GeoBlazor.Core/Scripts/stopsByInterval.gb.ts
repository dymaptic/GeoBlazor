// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetStopsByInterval } from './stopsByInterval';

export async function buildJsStopsByIntervalGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsStopsByInterval: any = {}
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        jsStopsByInterval.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.interval)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedInterval } = dotNetObject.interval;
        jsStopsByInterval.interval = sanitizedInterval;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsStopsByInterval);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsStopsByInterval;
    
    let dnInstantiatedObject = await buildDotNetStopsByInterval(jsStopsByInterval);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for StopsByInterval', e);
    }
    
    return jsStopsByInterval;
}

export async function buildDotNetStopsByIntervalGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetStopsByInterval: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.timeExtent)) {
            let { buildDotNetTimeExtent } = await import('./timeExtent');
            dotNetStopsByInterval.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
        }
    if (hasValue(jsObject.interval)) {
        dotNetStopsByInterval.interval = jsObject.interval;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetStopsByInterval.id = k;
                break;
            }
        }
    }

    return dotNetStopsByInterval;
}

