// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetKnowledgeGraphSublayerCapabilities } from './knowledgeGraphSublayerCapabilities';

export async function buildJsKnowledgeGraphSublayerCapabilitiesGenerated(dotNetObject: any): Promise<any> {
    let jsKnowledgeGraphSublayerCapabilities: any = {};
    if (hasValue(dotNetObject.query)) {
        let { buildJsKnowledgeGraphSublayerCapabilitiesQuery } = await import('./knowledgeGraphSublayerCapabilitiesQuery');
        jsKnowledgeGraphSublayerCapabilities.query = await buildJsKnowledgeGraphSublayerCapabilitiesQuery(dotNetObject.query) as any;
    }

    if (hasValue(dotNetObject.analytics)) {
        jsKnowledgeGraphSublayerCapabilities.analytics = dotNetObject.analytics;
    }
    if (hasValue(dotNetObject.attachment)) {
        jsKnowledgeGraphSublayerCapabilities.attachment = dotNetObject.attachment;
    }
    if (hasValue(dotNetObject.data)) {
        jsKnowledgeGraphSublayerCapabilities.data = dotNetObject.data;
    }
    if (hasValue(dotNetObject.editing)) {
        jsKnowledgeGraphSublayerCapabilities.editing = dotNetObject.editing;
    }
    if (hasValue(dotNetObject.metadata)) {
        jsKnowledgeGraphSublayerCapabilities.metadata = dotNetObject.metadata;
    }
    if (hasValue(dotNetObject.operations)) {
        jsKnowledgeGraphSublayerCapabilities.operations = dotNetObject.operations;
    }
    if (hasValue(dotNetObject.queryRelated)) {
        jsKnowledgeGraphSublayerCapabilities.queryRelated = dotNetObject.queryRelated;
    }
    if (hasValue(dotNetObject.queryTopFeatures)) {
        jsKnowledgeGraphSublayerCapabilities.queryTopFeatures = dotNetObject.queryTopFeatures;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsKnowledgeGraphSublayerCapabilities);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsKnowledgeGraphSublayerCapabilities;
    
    return jsKnowledgeGraphSublayerCapabilities;
}


export async function buildDotNetKnowledgeGraphSublayerCapabilitiesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetKnowledgeGraphSublayerCapabilities: any = {};
    
    if (hasValue(jsObject.query)) {
        let { buildDotNetKnowledgeGraphSublayerCapabilitiesQuery } = await import('./knowledgeGraphSublayerCapabilitiesQuery');
        dotNetKnowledgeGraphSublayerCapabilities.query = await buildDotNetKnowledgeGraphSublayerCapabilitiesQuery(jsObject.query);
    }
    
    if (hasValue(jsObject.analytics)) {
        dotNetKnowledgeGraphSublayerCapabilities.analytics = jsObject.analytics;
    }
    
    if (hasValue(jsObject.attachment)) {
        dotNetKnowledgeGraphSublayerCapabilities.attachment = jsObject.attachment;
    }
    
    if (hasValue(jsObject.data)) {
        dotNetKnowledgeGraphSublayerCapabilities.data = jsObject.data;
    }
    
    if (hasValue(jsObject.editing)) {
        dotNetKnowledgeGraphSublayerCapabilities.editing = jsObject.editing;
    }
    
    if (hasValue(jsObject.metadata)) {
        dotNetKnowledgeGraphSublayerCapabilities.metadata = jsObject.metadata;
    }
    
    if (hasValue(jsObject.operations)) {
        dotNetKnowledgeGraphSublayerCapabilities.operations = jsObject.operations;
    }
    
    if (hasValue(jsObject.queryRelated)) {
        dotNetKnowledgeGraphSublayerCapabilities.queryRelated = jsObject.queryRelated;
    }
    
    if (hasValue(jsObject.queryTopFeatures)) {
        dotNetKnowledgeGraphSublayerCapabilities.queryTopFeatures = jsObject.queryTopFeatures;
    }
    

    return dotNetKnowledgeGraphSublayerCapabilities;
}

