import { buildDotNetPlaceResult } from './placeResult';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import PlaceResult from '@arcgis/core/rest/support/PlaceResult';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsPlaceResultGenerated(dotNetObject: any): Promise<any> {
    let jsPlaceResult = new PlaceResult();
    if (hasValue(dotNetObject.location)) {
        let { buildJsPoint } = await import('./point');
        jsPlaceResult.location = buildJsPoint(dotNetObject.location) as any;
    }

    if (hasValue(dotNetObject.categories)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedCategories } = dotNetObject.categories;
        jsPlaceResult.categories = sanitizedCategories;
    }
    if (hasValue(dotNetObject.distance)) {
        jsPlaceResult.distance = dotNetObject.distance;
    }
    if (hasValue(dotNetObject.icon)) {
        jsPlaceResult.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.name)) {
        jsPlaceResult.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.placeId)) {
        jsPlaceResult.placeId = dotNetObject.placeId;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsPlaceResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPlaceResult;
    
    let dnInstantiatedObject = await buildDotNetPlaceResult(jsPlaceResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PlaceResult', e);
    }
    
    return jsPlaceResult;
}
export async function buildDotNetPlaceResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPlaceResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.location)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetPlaceResult.location = buildDotNetPoint(jsObject.location);
        }
        if (hasValue(jsObject.categories)) {
            dotNetPlaceResult.categories = jsObject.categories;
        }
        if (hasValue(jsObject.distance)) {
            dotNetPlaceResult.distance = jsObject.distance;
        }
        if (hasValue(jsObject.icon)) {
            dotNetPlaceResult.icon = jsObject.icon;
        }
        if (hasValue(jsObject.name)) {
            dotNetPlaceResult.name = jsObject.name;
        }
        if (hasValue(jsObject.placeId)) {
            dotNetPlaceResult.placeId = jsObject.placeId;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPlaceResult.id = k;
                break;
            }
        }
    }

    return dotNetPlaceResult;
}

