// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import WaterSymbol3DLayer from '@arcgis/core/symbols/WaterSymbol3DLayer';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class IWaterSymbol3DLayerGenerated implements IPropertyWrapper {
    public layer: WaterSymbol3DLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: WaterSymbol3DLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    // region properties
    
    async getColor(): Promise<any> {
        if (!hasValue(this.layer.color)) {
            return null;
        }
        
        let { buildDotNetMapColor } = await import('./mapColor');
        return buildDotNetMapColor(this.layer.color);
    }
    
    async setColor(value: any): Promise<void> {
        let { buildJsMapColor } = await import('./mapColor');
        this.layer.color =  buildJsMapColor(value);
    }
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}


export async function buildJsIWaterSymbol3DLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        properties.color = buildJsMapColor(dotNetObject.color) as any;
    }

    if (hasValue(dotNetObject.waterbodySize)) {
        properties.waterbodySize = dotNetObject.waterbodySize;
    }
    if (hasValue(dotNetObject.waveDirection)) {
        properties.waveDirection = dotNetObject.waveDirection;
    }
    if (hasValue(dotNetObject.waveStrength)) {
        properties.waveStrength = dotNetObject.waveStrength;
    }
    let jsWaterSymbol3DLayer = new WaterSymbol3DLayer(properties);

    let { default: IWaterSymbol3DLayerWrapper } = await import('./iWaterSymbol3DLayer');
    let iWaterSymbol3DLayerWrapper = new IWaterSymbol3DLayerWrapper(jsWaterSymbol3DLayer);
    iWaterSymbol3DLayerWrapper.geoBlazorId = dotNetObject.id;
    iWaterSymbol3DLayerWrapper.viewId = viewId;
    iWaterSymbol3DLayerWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(iWaterSymbol3DLayerWrapper);
    jsObjectRefs[dotNetObject.id] = iWaterSymbol3DLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsWaterSymbol3DLayer;
    let { buildDotNetIWaterSymbol3DLayer } = await import('./iWaterSymbol3DLayer');
    let dnInstantiatedObject = await buildDotNetIWaterSymbol3DLayer(jsWaterSymbol3DLayer);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for IWaterSymbol3DLayer', e);
    }
    
    return jsWaterSymbol3DLayer;
}

export async function buildDotNetIWaterSymbol3DLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIWaterSymbol3DLayer: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.color)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetIWaterSymbol3DLayer.color = buildDotNetMapColor(jsObject.color);
        }
    if (hasValue(jsObject.type)) {
        dotNetIWaterSymbol3DLayer.type = jsObject.type;
    }
    if (hasValue(jsObject.waterbodySize)) {
        dotNetIWaterSymbol3DLayer.waterbodySize = jsObject.waterbodySize;
    }
    if (hasValue(jsObject.waveDirection)) {
        dotNetIWaterSymbol3DLayer.waveDirection = jsObject.waveDirection;
    }
    if (hasValue(jsObject.waveStrength)) {
        dotNetIWaterSymbol3DLayer.waveStrength = jsObject.waveStrength;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetIWaterSymbol3DLayer.id = k;
                break;
            }
        }
    }

    return dotNetIWaterSymbol3DLayer;
}

