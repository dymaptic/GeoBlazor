// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import IdentityManagerCredentialCreateEvent = __esri.IdentityManagerCredentialCreateEvent;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class IdentityManagerCredentialCreateEventGenerated implements IPropertyWrapper {
    public component: IdentityManagerCredentialCreateEvent;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: IdentityManagerCredentialCreateEvent) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getCredential(): Promise<any> {
        if (!hasValue(this.component.credential)) {
            return null;
        }
        
        let { buildDotNetCredential } = await import('./credential');
        return await buildDotNetCredential(this.component.credential);
    }
    async setCredential(value: any): Promise<void> {
        let { buildJsCredential } = await import('./credential');
        this.component.credential = await  buildJsCredential(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsIdentityManagerCredentialCreateEventGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsIdentityManagerCredentialCreateEvent: any = {}
    if (hasValue(dotNetObject.credential)) {
        let { buildJsCredential } = await import('./credential');
        jsIdentityManagerCredentialCreateEvent.credential = await buildJsCredential(dotNetObject.credential, layerId, viewId) as any;
    }


    let { default: IdentityManagerCredentialCreateEventWrapper } = await import('./identityManagerCredentialCreateEvent');
    let identityManagerCredentialCreateEventWrapper = new IdentityManagerCredentialCreateEventWrapper(jsIdentityManagerCredentialCreateEvent);
    identityManagerCredentialCreateEventWrapper.geoBlazorId = dotNetObject.id;
    identityManagerCredentialCreateEventWrapper.viewId = viewId;
    identityManagerCredentialCreateEventWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(identityManagerCredentialCreateEventWrapper);
    jsObjectRefs[dotNetObject.id] = identityManagerCredentialCreateEventWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsIdentityManagerCredentialCreateEvent;
    let { buildDotNetIdentityManagerCredentialCreateEvent } = await import('./identityManagerCredentialCreateEvent');
    let dnInstantiatedObject = await buildDotNetIdentityManagerCredentialCreateEvent(jsIdentityManagerCredentialCreateEvent);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for IdentityManagerCredentialCreateEvent', e);
    }
    
    return jsIdentityManagerCredentialCreateEvent;
}
export async function buildDotNetIdentityManagerCredentialCreateEventGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIdentityManagerCredentialCreateEvent: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.credential)) {
            let { buildDotNetCredential } = await import('./credential');
            dotNetIdentityManagerCredentialCreateEvent.credential = await buildDotNetCredential(jsObject.credential);
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetIdentityManagerCredentialCreateEvent.id = k;
                break;
            }
        }
    }

    return dotNetIdentityManagerCredentialCreateEvent;
}

