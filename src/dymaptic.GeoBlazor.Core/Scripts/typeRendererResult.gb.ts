// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetTypeRendererResult } from './typeRendererResult';

export async function buildJsTypeRendererResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jstypeRendererResult: any = {}
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsUniqueValueRenderer } = await import('./uniqueValueRenderer');
        jstypeRendererResult.renderer = await buildJsUniqueValueRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.uniqueValueInfos)) {
        let { buildJsTypeUniqueValueInfo } = await import('./typeUniqueValueInfo');
        jstypeRendererResult.uniqueValueInfos = await Promise.all(dotNetObject.uniqueValueInfos.map(async i => await buildJsTypeUniqueValueInfo(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.basemapId)) {
        jstypeRendererResult.basemapId = dotNetObject.basemapId;
    }
    if (hasValue(dotNetObject.basemapTheme)) {
        jstypeRendererResult.basemapTheme = dotNetObject.basemapTheme;
    }
    if (hasValue(dotNetObject.excludedUniqueValueInfos)) {
        jstypeRendererResult.excludedUniqueValueInfos = dotNetObject.excludedUniqueValueInfos;
    }
    if (hasValue(dotNetObject.typeScheme)) {
        jstypeRendererResult.typeScheme = dotNetObject.typeScheme;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jstypeRendererResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jstypeRendererResult;
    
    let dnInstantiatedObject = await buildDotNetTypeRendererResult(jstypeRendererResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TypeRendererResult', e);
    }
    
    return jstypeRendererResult;
}

export async function buildDotNetTypeRendererResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTypeRendererResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.renderer)) {
            let { buildDotNetUniqueValueRenderer } = await import('./uniqueValueRenderer');
            dotNetTypeRendererResult.renderer = await buildDotNetUniqueValueRenderer(jsObject.renderer);
        }
        if (hasValue(jsObject.uniqueValueInfos)) {
            let { buildDotNetTypeUniqueValueInfo } = await import('./typeUniqueValueInfo');
            dotNetTypeRendererResult.uniqueValueInfos = await Promise.all(jsObject.uniqueValueInfos.map(async i => await buildDotNetTypeUniqueValueInfo(i)));
        }
    if (hasValue(jsObject.basemapId)) {
        dotNetTypeRendererResult.basemapId = jsObject.basemapId;
    }
    if (hasValue(jsObject.basemapTheme)) {
        dotNetTypeRendererResult.basemapTheme = jsObject.basemapTheme;
    }
    if (hasValue(jsObject.excludedUniqueValueInfos)) {
        dotNetTypeRendererResult.excludedUniqueValueInfos = jsObject.excludedUniqueValueInfos;
    }
    if (hasValue(jsObject.typeScheme)) {
        dotNetTypeRendererResult.typeScheme = jsObject.typeScheme;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTypeRendererResult.id = k;
                break;
            }
        }
    }

    return dotNetTypeRendererResult;
}

