// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetSupportingWidgetDefaults } from './supportingWidgetDefaults';

export async function buildJsSupportingWidgetDefaultsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSupportingWidgetDefaults: any = {};

    if (hasValue(dotNetObject.attachments)) {
        jsSupportingWidgetDefaults.attachments = dotNetObject.attachments;
    }
    if (hasValue(dotNetObject.featureForm)) {
        jsSupportingWidgetDefaults.featureForm = dotNetObject.featureForm;
    }
    if (hasValue(dotNetObject.featureTemplates)) {
        jsSupportingWidgetDefaults.featureTemplates = dotNetObject.featureTemplates;
    }
    if (hasValue(dotNetObject.sketch)) {
        jsSupportingWidgetDefaults.sketch = dotNetObject.sketch;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSupportingWidgetDefaults);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSupportingWidgetDefaults;
    
    let { buildDotNetSupportingWidgetDefaults } = await import('./supportingWidgetDefaults');
    let dnInstantiatedObject = await buildDotNetSupportingWidgetDefaults(jsSupportingWidgetDefaults);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type SupportingWidgetDefaults detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SupportingWidgetDefaults', e);
    }
    
    return jsSupportingWidgetDefaults;
}


export async function buildDotNetSupportingWidgetDefaultsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSupportingWidgetDefaults: any = {};
    
    if (hasValue(jsObject.attachments)) {
        dotNetSupportingWidgetDefaults.attachments = jsObject.attachments;
    }
    
    if (hasValue(jsObject.featureForm)) {
        dotNetSupportingWidgetDefaults.featureForm = jsObject.featureForm;
    }
    
    if (hasValue(jsObject.featureTemplates)) {
        dotNetSupportingWidgetDefaults.featureTemplates = jsObject.featureTemplates;
    }
    
    if (hasValue(jsObject.sketch)) {
        dotNetSupportingWidgetDefaults.sketch = jsObject.sketch;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSupportingWidgetDefaults.id = geoBlazorId;
    }

    return dotNetSupportingWidgetDefaults;
}

