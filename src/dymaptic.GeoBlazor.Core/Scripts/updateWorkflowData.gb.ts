// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import UpdateWorkflowData from '@arcgis/core/widgets/Editor/UpdateWorkflowData';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class UpdateWorkflowDataGenerated implements IPropertyWrapper {
    public component: UpdateWorkflowData;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: UpdateWorkflowData) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getViewModel(): Promise<any> {
        if (!hasValue(this.component.viewModel)) {
            return null;
        }
        
        let { buildDotNetEditorViewModel } = await import('./editorViewModel');
        return await buildDotNetEditorViewModel(this.component.viewModel);
    }
    async setViewModel(value: any): Promise<void> {
        let { buildJsEditorViewModel } = await import('./editorViewModel');
        this.component.viewModel = await  buildJsEditorViewModel(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsUpdateWorkflowDataGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsUpdateWorkflowData = new UpdateWorkflowData();
    if (hasValue(dotNetObject.candidates)) {
        let { buildJsGraphic } = await import('./graphic');
        jsUpdateWorkflowData.candidates = dotNetObject.candidates.map(i => buildJsGraphic(i)) as any;
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsEditorViewModel } = await import('./editorViewModel');
        jsUpdateWorkflowData.viewModel = await buildJsEditorViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }


    let { default: UpdateWorkflowDataWrapper } = await import('./updateWorkflowData');
    let updateWorkflowDataWrapper = new UpdateWorkflowDataWrapper(jsUpdateWorkflowData);
    updateWorkflowDataWrapper.geoBlazorId = dotNetObject.id;
    updateWorkflowDataWrapper.viewId = viewId;
    updateWorkflowDataWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(updateWorkflowDataWrapper);
    jsObjectRefs[dotNetObject.id] = updateWorkflowDataWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsUpdateWorkflowData;
    let { buildDotNetUpdateWorkflowData } = await import('./updateWorkflowData');
    let dnInstantiatedObject = await buildDotNetUpdateWorkflowData(jsUpdateWorkflowData);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for UpdateWorkflowData', e);
    }
    
    return jsUpdateWorkflowData;
}
export async function buildDotNetUpdateWorkflowDataGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUpdateWorkflowData: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.candidates)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetUpdateWorkflowData.candidates = jsObject.candidates.map(i => buildDotNetGraphic(i, layerId, viewId));
        }
        if (hasValue(jsObject.viewModel)) {
            let { buildDotNetEditorViewModel } = await import('./editorViewModel');
            dotNetUpdateWorkflowData.viewModel = await buildDotNetEditorViewModel(jsObject.viewModel);
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetUpdateWorkflowData.id = k;
                break;
            }
        }
    }

    return dotNetUpdateWorkflowData;
}

