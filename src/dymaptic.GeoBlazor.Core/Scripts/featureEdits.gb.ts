// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetFeatureEdits } from './featureEdits';

export async function buildJsFeatureEditsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureLayerBaseApplyEditsEdits: any = {};
    if (hasValue(dotNetObject.addAttachments)) {
        let { buildJsAttachmentEdit } = await import('./attachmentEdit');
        jsFeatureLayerBaseApplyEditsEdits.addAttachments = await Promise.all(dotNetObject.addAttachments.map(async i => await buildJsAttachmentEdit(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.addFeatures)) {
        let { buildJsGraphic } = await import('./graphic');
        jsFeatureLayerBaseApplyEditsEdits.addFeatures = dotNetObject.addFeatures.map(i => buildJsGraphic(i)) as any;
    }
    if (hasValue(dotNetObject.deleteFeatures)) {
        let { buildJsGraphic } = await import('./graphic');
        jsFeatureLayerBaseApplyEditsEdits.deleteFeatures = dotNetObject.deleteFeatures.map(i => buildJsGraphic(i)) as any;
    }
    if (hasValue(dotNetObject.updateAttachments)) {
        let { buildJsAttachmentEdit } = await import('./attachmentEdit');
        jsFeatureLayerBaseApplyEditsEdits.updateAttachments = await Promise.all(dotNetObject.updateAttachments.map(async i => await buildJsAttachmentEdit(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.updateFeatures)) {
        let { buildJsGraphic } = await import('./graphic');
        jsFeatureLayerBaseApplyEditsEdits.updateFeatures = dotNetObject.updateFeatures.map(i => buildJsGraphic(i)) as any;
    }

    if (hasValue(dotNetObject.deleteAttachments)) {
        jsFeatureLayerBaseApplyEditsEdits.deleteAttachments = dotNetObject.deleteAttachments;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureLayerBaseApplyEditsEdits);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureLayerBaseApplyEditsEdits;
    
    let dnInstantiatedObject = await buildDotNetFeatureEdits(jsFeatureLayerBaseApplyEditsEdits, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureEdits', e);
    }
    
    return jsFeatureLayerBaseApplyEditsEdits;
}

export async function buildDotNetFeatureEditsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureEdits: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.addAttachments)) {
        let { buildDotNetAttachmentEdit } = await import('./attachmentEdit');
        dotNetFeatureEdits.addAttachments = await Promise.all(jsObject.addAttachments.map(async i => await buildDotNetAttachmentEdit(i, layerId, viewId)));
    }
    if (hasValue(jsObject.addFeatures)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetFeatureEdits.addFeatures = jsObject.addFeatures.map(i => buildDotNetGraphic(i, layerId, viewId));
    }
    if (hasValue(jsObject.deleteFeatures)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetFeatureEdits.deleteFeatures = jsObject.deleteFeatures.map(i => buildDotNetGraphic(i, layerId, viewId));
    }
    if (hasValue(jsObject.updateAttachments)) {
        let { buildDotNetAttachmentEdit } = await import('./attachmentEdit');
        dotNetFeatureEdits.updateAttachments = await Promise.all(jsObject.updateAttachments.map(async i => await buildDotNetAttachmentEdit(i, layerId, viewId)));
    }
    if (hasValue(jsObject.updateFeatures)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetFeatureEdits.updateFeatures = jsObject.updateFeatures.map(i => buildDotNetGraphic(i, layerId, viewId));
    }
    if (hasValue(jsObject.deleteAttachments)) {
        dotNetFeatureEdits.deleteAttachments = jsObject.deleteAttachments;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFeatureEdits.id = k;
                break;
            }
        }
    }

    return dotNetFeatureEdits;
}

