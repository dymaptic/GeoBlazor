// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetFeatureEdits } from './featureEdits';

export async function buildJsFeatureEditsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsFeatureLayerApplyEditsEdits: any = {};
    if (hasValue(dotNetObject.addAttachments) && dotNetObject.addAttachments.length > 0) {
        let { buildJsAttachmentEdit } = await import('./attachmentEdit');
        jsFeatureLayerApplyEditsEdits.addAttachments = await Promise.all(dotNetObject.addAttachments.map(async i => await buildJsAttachmentEdit(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.addFeatures) && dotNetObject.addFeatures.length > 0) {
        let { buildJsGraphic } = await import('./graphic');
        jsFeatureLayerApplyEditsEdits.addFeatures = dotNetObject.addFeatures.map(i => buildJsGraphic(i, viewId)) as any;
    }
    if (hasValue(dotNetObject.deleteFeatures) && dotNetObject.deleteFeatures.length > 0) {
        let { buildJsGraphic } = await import('./graphic');
        jsFeatureLayerApplyEditsEdits.deleteFeatures = dotNetObject.deleteFeatures.map(i => buildJsGraphic(i, viewId)) as any;
    }
    if (hasValue(dotNetObject.updateAttachments) && dotNetObject.updateAttachments.length > 0) {
        let { buildJsAttachmentEdit } = await import('./attachmentEdit');
        jsFeatureLayerApplyEditsEdits.updateAttachments = await Promise.all(dotNetObject.updateAttachments.map(async i => await buildJsAttachmentEdit(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.updateFeatures) && dotNetObject.updateFeatures.length > 0) {
        let { buildJsGraphic } = await import('./graphic');
        jsFeatureLayerApplyEditsEdits.updateFeatures = dotNetObject.updateFeatures.map(i => buildJsGraphic(i, viewId)) as any;
    }

    if (hasValue(dotNetObject.deleteAttachments) && dotNetObject.deleteAttachments.length > 0) {
        jsFeatureLayerApplyEditsEdits.deleteAttachments = dotNetObject.deleteAttachments;
    }
    
    jsObjectRefs[dotNetObject.id] = jsFeatureLayerApplyEditsEdits;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureLayerApplyEditsEdits;
    
    return jsFeatureLayerApplyEditsEdits;
}


export async function buildDotNetFeatureEditsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureEdits: any = {};
    
    if (hasValue(jsObject.addAttachments)) {
        let { buildDotNetAttachmentEdit } = await import('./attachmentEdit');
        dotNetFeatureEdits.addAttachments = await Promise.all(jsObject.addAttachments.map(async i => await buildDotNetAttachmentEdit(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.addFeatures)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetFeatureEdits.addFeatures = jsObject.addFeatures.map(i => buildDotNetGraphic(i, layerId, viewId));
    }
    
    if (hasValue(jsObject.deleteFeatures)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetFeatureEdits.deleteFeatures = jsObject.deleteFeatures.map(i => buildDotNetGraphic(i, layerId, viewId));
    }
    
    if (hasValue(jsObject.updateAttachments)) {
        let { buildDotNetAttachmentEdit } = await import('./attachmentEdit');
        dotNetFeatureEdits.updateAttachments = await Promise.all(jsObject.updateAttachments.map(async i => await buildDotNetAttachmentEdit(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.updateFeatures)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetFeatureEdits.updateFeatures = jsObject.updateFeatures.map(i => buildDotNetGraphic(i, layerId, viewId));
    }
    
    if (hasValue(jsObject.deleteAttachments)) {
        dotNetFeatureEdits.deleteAttachments = jsObject.deleteAttachments;
    }
    

    return dotNetFeatureEdits;
}

