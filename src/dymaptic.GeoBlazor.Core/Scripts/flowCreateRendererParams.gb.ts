// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetFlowCreateRendererParams } from './flowCreateRendererParams';

export async function buildJsFlowCreateRendererParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsflowCreateRendererParams: any = {};
    if (hasValue(dotNetObject.flowScheme)) {
        let { buildJsFlowScheme } = await import('./flowScheme');
        jsflowCreateRendererParams.flowScheme = await buildJsFlowScheme(dotNetObject.flowScheme, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsflowCreateRendererParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.theme)) {
        let { buildJsTheme } = await import('./theme');
        jsflowCreateRendererParams.theme = await buildJsTheme(dotNetObject.theme, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.flowRepresentation)) {
        jsflowCreateRendererParams.flowRepresentation = dotNetObject.flowRepresentation;
    }
    if (hasValue(dotNetObject.includeColorVariable)) {
        jsflowCreateRendererParams.includeColorVariable = dotNetObject.includeColorVariable;
    }
    if (hasValue(dotNetObject.includeOpacityVariable)) {
        jsflowCreateRendererParams.includeOpacityVariable = dotNetObject.includeOpacityVariable;
    }
    if (hasValue(dotNetObject.includeSizeVariable)) {
        jsflowCreateRendererParams.includeSizeVariable = dotNetObject.includeSizeVariable;
    }
    if (hasValue(dotNetObject.legendOptions)) {
        jsflowCreateRendererParams.legendOptions = dotNetObject.legendOptions;
    }
    if (hasValue(dotNetObject.rasterFunction)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedRasterFunction } = dotNetObject.rasterFunction;
        jsflowCreateRendererParams.rasterFunction = sanitizedRasterFunction;
    }
    if (hasValue(dotNetObject.renderingRule)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedRenderingRule } = dotNetObject.renderingRule;
        jsflowCreateRendererParams.renderingRule = sanitizedRenderingRule;
    }
    if (hasValue(dotNetObject.signal)) {
        jsflowCreateRendererParams.signal = dotNetObject.signal;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsflowCreateRendererParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsflowCreateRendererParams;
    
    let dnInstantiatedObject = await buildDotNetFlowCreateRendererParams(jsflowCreateRendererParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FlowCreateRendererParams', e);
    }
    
    return jsflowCreateRendererParams;
}

export async function buildDotNetFlowCreateRendererParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFlowCreateRendererParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.flowScheme)) {
            let { buildDotNetFlowScheme } = await import('./flowScheme');
            dotNetFlowCreateRendererParams.flowScheme = await buildDotNetFlowScheme(jsObject.flowScheme);
        }
        if (hasValue(jsObject.theme)) {
            let { buildDotNetTheme } = await import('./theme');
            dotNetFlowCreateRendererParams.theme = await buildDotNetTheme(jsObject.theme);
        }
    if (hasValue(jsObject.flowRepresentation)) {
        dotNetFlowCreateRendererParams.flowRepresentation = jsObject.flowRepresentation;
    }
    if (hasValue(jsObject.includeColorVariable)) {
        dotNetFlowCreateRendererParams.includeColorVariable = jsObject.includeColorVariable;
    }
    if (hasValue(jsObject.includeOpacityVariable)) {
        dotNetFlowCreateRendererParams.includeOpacityVariable = jsObject.includeOpacityVariable;
    }
    if (hasValue(jsObject.includeSizeVariable)) {
        dotNetFlowCreateRendererParams.includeSizeVariable = jsObject.includeSizeVariable;
    }
    if (hasValue(jsObject.legendOptions)) {
        dotNetFlowCreateRendererParams.legendOptions = jsObject.legendOptions;
    }
    if (hasValue(jsObject.rasterFunction)) {
        dotNetFlowCreateRendererParams.rasterFunction = jsObject.rasterFunction;
    }
    if (hasValue(jsObject.renderingRule)) {
        dotNetFlowCreateRendererParams.renderingRule = jsObject.renderingRule;
    }
    if (hasValue(jsObject.signal)) {
        dotNetFlowCreateRendererParams.signal = jsObject.signal;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFlowCreateRendererParams.id = k;
                break;
            }
        }
    }

    return dotNetFlowCreateRendererParams;
}

