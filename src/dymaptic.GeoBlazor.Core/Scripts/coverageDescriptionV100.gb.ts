// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetCoverageDescriptionV100 } from './coverageDescriptionV100';

export async function buildJsCoverageDescriptionV100Generated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCoverageDescriptionV100: any = {};
    if (hasValue(dotNetObject.domainSet)) {
        let { buildJsCoverageDescriptionV100DomainSet } = await import('./coverageDescriptionV100DomainSet');
        jsCoverageDescriptionV100.domainSet = await buildJsCoverageDescriptionV100DomainSet(dotNetObject.domainSet, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.lonLatEnvelope)) {
        let { buildJsExtent } = await import('./extent');
        jsCoverageDescriptionV100.lonLatEnvelope = buildJsExtent(dotNetObject.lonLatEnvelope) as any;
    }

    if (hasValue(dotNetObject.description)) {
        jsCoverageDescriptionV100.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.label)) {
        jsCoverageDescriptionV100.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.name)) {
        jsCoverageDescriptionV100.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.rangeSet)) {
        jsCoverageDescriptionV100.rangeSet = dotNetObject.rangeSet;
    }
    if (hasValue(dotNetObject.supportedCRSs)) {
        jsCoverageDescriptionV100.supportedCRSs = dotNetObject.supportedCRSs;
    }
    if (hasValue(dotNetObject.supportedFormats)) {
        jsCoverageDescriptionV100.supportedFormats = dotNetObject.supportedFormats;
    }
    if (hasValue(dotNetObject.supportedInterpolations)) {
        jsCoverageDescriptionV100.supportedInterpolations = dotNetObject.supportedInterpolations;
    }
    if (hasValue(dotNetObject.version)) {
        jsCoverageDescriptionV100.version = dotNetObject.version;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCoverageDescriptionV100);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCoverageDescriptionV100;
    
    let { buildDotNetCoverageDescriptionV100 } = await import('./coverageDescriptionV100');
    let dnInstantiatedObject = await buildDotNetCoverageDescriptionV100(jsCoverageDescriptionV100);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type CoverageDescriptionV100 detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CoverageDescriptionV100', e);
    }
    
    return jsCoverageDescriptionV100;
}


export async function buildDotNetCoverageDescriptionV100Generated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCoverageDescriptionV100: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.domainSet)) {
        let { buildDotNetCoverageDescriptionV100DomainSet } = await import('./coverageDescriptionV100DomainSet');
        dotNetCoverageDescriptionV100.domainSet = await buildDotNetCoverageDescriptionV100DomainSet(jsObject.domainSet);
    }
    if (hasValue(jsObject.lonLatEnvelope)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetCoverageDescriptionV100.lonLatEnvelope = buildDotNetExtent(jsObject.lonLatEnvelope);
    }
    if (hasValue(jsObject.description)) {
        dotNetCoverageDescriptionV100.description = jsObject.description;
    }
    if (hasValue(jsObject.label)) {
        dotNetCoverageDescriptionV100.label = jsObject.label;
    }
    if (hasValue(jsObject.name)) {
        dotNetCoverageDescriptionV100.name = jsObject.name;
    }
    if (hasValue(jsObject.rangeSet)) {
        dotNetCoverageDescriptionV100.rangeSet = jsObject.rangeSet;
    }
    if (hasValue(jsObject.supportedCRSs)) {
        dotNetCoverageDescriptionV100.supportedCRSs = jsObject.supportedCRSs;
    }
    if (hasValue(jsObject.supportedFormats)) {
        dotNetCoverageDescriptionV100.supportedFormats = jsObject.supportedFormats;
    }
    if (hasValue(jsObject.supportedInterpolations)) {
        dotNetCoverageDescriptionV100.supportedInterpolations = jsObject.supportedInterpolations;
    }
    if (hasValue(jsObject.version)) {
        dotNetCoverageDescriptionV100.version = jsObject.version;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCoverageDescriptionV100.id = k;
                break;
            }
        }
    }

    return dotNetCoverageDescriptionV100;
}

