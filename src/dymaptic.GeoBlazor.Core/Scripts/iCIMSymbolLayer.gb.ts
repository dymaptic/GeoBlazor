// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import CIMSymbolLayer = __esri.CIMSymbolLayer;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ICIMSymbolLayerGenerated implements IPropertyWrapper {
    public layer: CIMSymbolLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: CIMSymbolLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }


    async updateComponent(dotNetObject: any): Promise<void> {

    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}


export async function buildJsICIMSymbolLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsCIMSymbolLayer: any = {};


    let { default: ICIMSymbolLayerWrapper } = await import('./iCIMSymbolLayer');
    let iCIMSymbolLayerWrapper = new ICIMSymbolLayerWrapper(jsCIMSymbolLayer);
    iCIMSymbolLayerWrapper.geoBlazorId = dotNetObject.id;
    iCIMSymbolLayerWrapper.viewId = viewId;
    iCIMSymbolLayerWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(iCIMSymbolLayerWrapper);
    jsObjectRefs[dotNetObject.id] = iCIMSymbolLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsCIMSymbolLayer;
    
    try {
        let { buildDotNetICIMSymbolLayer } = await import('./iCIMSymbolLayer');
        let dnInstantiatedObject = await buildDotNetICIMSymbolLayer(jsCIMSymbolLayer);

        let seenObjects = new WeakMap();
        let dnJson = JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type ICIMSymbolLayer detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            });
        let encoder = new TextEncoder();
        let encodedArray = encoder.encode(dnJson);
        let dnStream = DotNet.createJSStreamReference(encodedArray);
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, dnStream);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ICIMSymbolLayer', e);
    }
    
    return jsCIMSymbolLayer;
}


export async function buildDotNetICIMSymbolLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetICIMSymbolLayer: any = {};
    

    return dotNetICIMSymbolLayer;
}

