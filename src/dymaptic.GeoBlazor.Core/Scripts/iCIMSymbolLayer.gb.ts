// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import CIMSymbolLayer = __esri.CIMSymbolLayer;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ICIMSymbolLayerGenerated implements IPropertyWrapper {
    public layer: CIMSymbolLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: CIMSymbolLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }


    async updateComponent(dotNetObject: any): Promise<void> {

    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}


export async function buildJsICIMSymbolLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCIMSymbolLayer: any = {};


    let { default: ICIMSymbolLayerWrapper } = await import('./iCIMSymbolLayer');
    let iCIMSymbolLayerWrapper = new ICIMSymbolLayerWrapper(jsCIMSymbolLayer);
    iCIMSymbolLayerWrapper.geoBlazorId = dotNetObject.id;
    iCIMSymbolLayerWrapper.viewId = viewId;
    iCIMSymbolLayerWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(iCIMSymbolLayerWrapper);
    jsObjectRefs[dotNetObject.id] = iCIMSymbolLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsCIMSymbolLayer;
    
    return jsCIMSymbolLayer;
}


export async function buildDotNetICIMSymbolLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetICIMSymbolLayer: any = {};
    

    return dotNetICIMSymbolLayer;
}

