// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCapabilitiesQueryAttributeBinsSupportedNormalizationTypes } from './capabilitiesQueryAttributeBinsSupportedNormalizationTypes';

export async function buildJsCapabilitiesQueryAttributeBinsSupportedNormalizationTypesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsCapabilitiesQueryAttributeBinsSupportedNormalizationTypes: any = {};

    if (hasValue(dotNetObject.field)) {
        jsCapabilitiesQueryAttributeBinsSupportedNormalizationTypes.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.log)) {
        jsCapabilitiesQueryAttributeBinsSupportedNormalizationTypes.log = dotNetObject.log;
    }
    if (hasValue(dotNetObject.naturalLog)) {
        jsCapabilitiesQueryAttributeBinsSupportedNormalizationTypes.naturalLog = dotNetObject.naturalLog;
    }
    if (hasValue(dotNetObject.percentOfTotal)) {
        jsCapabilitiesQueryAttributeBinsSupportedNormalizationTypes.percentOfTotal = dotNetObject.percentOfTotal;
    }
    if (hasValue(dotNetObject.squareRoot)) {
        jsCapabilitiesQueryAttributeBinsSupportedNormalizationTypes.squareRoot = dotNetObject.squareRoot;
    }
    
    jsObjectRefs[dotNetObject.id] = jsCapabilitiesQueryAttributeBinsSupportedNormalizationTypes;
    arcGisObjectRefs[dotNetObject.id] = jsCapabilitiesQueryAttributeBinsSupportedNormalizationTypes;
    
    return jsCapabilitiesQueryAttributeBinsSupportedNormalizationTypes;
}


export async function buildDotNetCapabilitiesQueryAttributeBinsSupportedNormalizationTypesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCapabilitiesQueryAttributeBinsSupportedNormalizationTypes: any = {};
    
    if (hasValue(jsObject.field)) {
        dotNetCapabilitiesQueryAttributeBinsSupportedNormalizationTypes.field = jsObject.field;
    }
    
    if (hasValue(jsObject.log)) {
        dotNetCapabilitiesQueryAttributeBinsSupportedNormalizationTypes.log = jsObject.log;
    }
    
    if (hasValue(jsObject.naturalLog)) {
        dotNetCapabilitiesQueryAttributeBinsSupportedNormalizationTypes.naturalLog = jsObject.naturalLog;
    }
    
    if (hasValue(jsObject.percentOfTotal)) {
        dotNetCapabilitiesQueryAttributeBinsSupportedNormalizationTypes.percentOfTotal = jsObject.percentOfTotal;
    }
    
    if (hasValue(jsObject.squareRoot)) {
        dotNetCapabilitiesQueryAttributeBinsSupportedNormalizationTypes.squareRoot = jsObject.squareRoot;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCapabilitiesQueryAttributeBinsSupportedNormalizationTypes.id = geoBlazorId;
    }

    return dotNetCapabilitiesQueryAttributeBinsSupportedNormalizationTypes;
}

