// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetEditedFeatureResultEditedFeaturesUpdates } from './editedFeatureResultEditedFeaturesUpdates';

export async function buildJsEditedFeatureResultEditedFeaturesUpdatesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsEditedFeatureResultEditedFeaturesUpdates: any = {};
    if (hasValue(dotNetObject.current)) {
        let { buildJsGraphic } = await import('./graphic');
        jsEditedFeatureResultEditedFeaturesUpdates.current = dotNetObject.current.map(i => buildJsGraphic(i)) as any;
    }
    if (hasValue(dotNetObject.original)) {
        let { buildJsGraphic } = await import('./graphic');
        jsEditedFeatureResultEditedFeaturesUpdates.original = dotNetObject.original.map(i => buildJsGraphic(i)) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsEditedFeatureResultEditedFeaturesUpdates);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsEditedFeatureResultEditedFeaturesUpdates;
    
    return jsEditedFeatureResultEditedFeaturesUpdates;
}


export async function buildDotNetEditedFeatureResultEditedFeaturesUpdatesGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetEditedFeatureResultEditedFeaturesUpdates: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.current)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetEditedFeatureResultEditedFeaturesUpdates.current = jsObject.current.map(i => buildDotNetGraphic(i, layerId, viewId));
    }
    if (hasValue(jsObject.original)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetEditedFeatureResultEditedFeaturesUpdates.original = jsObject.original.map(i => buildDotNetGraphic(i, layerId, viewId));
    }

    return dotNetEditedFeatureResultEditedFeaturesUpdates;
}

