// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetEditedFeatureResultEditedFeaturesUpdates } from './editedFeatureResultEditedFeaturesUpdates';

export async function buildJsEditedFeatureResultEditedFeaturesUpdatesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsEditedFeatureResultEditedFeaturesUpdates: any = {};

    if (hasValue(dotNetObject.current)) {
        const { id, dotNetComponentReference, ...sanitizedCurrent } = dotNetObject.current;
        jsEditedFeatureResultEditedFeaturesUpdates.current = sanitizedCurrent;
    }
    if (hasValue(dotNetObject.original)) {
        const { id, dotNetComponentReference, ...sanitizedOriginal } = dotNetObject.original;
        jsEditedFeatureResultEditedFeaturesUpdates.original = sanitizedOriginal;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsEditedFeatureResultEditedFeaturesUpdates);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsEditedFeatureResultEditedFeaturesUpdates;
    
    let { buildDotNetEditedFeatureResultEditedFeaturesUpdates } = await import('./editedFeatureResultEditedFeaturesUpdates');
    let dnInstantiatedObject = await buildDotNetEditedFeatureResultEditedFeaturesUpdates(jsEditedFeatureResultEditedFeaturesUpdates, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type EditedFeatureResultEditedFeaturesUpdates detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for EditedFeatureResultEditedFeaturesUpdates', e);
    }
    
    return jsEditedFeatureResultEditedFeaturesUpdates;
}


export async function buildDotNetEditedFeatureResultEditedFeaturesUpdatesGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetEditedFeatureResultEditedFeaturesUpdates: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.current)) {
        dotNetEditedFeatureResultEditedFeaturesUpdates.current = jsObject.current;
    }
    if (hasValue(jsObject.original)) {
        dotNetEditedFeatureResultEditedFeaturesUpdates.original = jsObject.original;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetEditedFeatureResultEditedFeaturesUpdates.id = k;
                break;
            }
        }
    }

    return dotNetEditedFeatureResultEditedFeaturesUpdates;
}

