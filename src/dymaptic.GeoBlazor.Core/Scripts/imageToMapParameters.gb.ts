// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageToMapParameters from '@arcgis/core/rest/support/ImageToMapParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetImageToMapParameters } from './imageToMapParameters';

export async function buildJsImageToMapParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsGeometry } = await import('./geometry');
        properties.geometry = buildJsGeometry(dotNetObject.geometry) as any;
    }

    if (hasValue(dotNetObject.adjust)) {
        properties.adjust = dotNetObject.adjust;
    }
    if (hasValue(dotNetObject.depthOffset)) {
        properties.depthOffset = dotNetObject.depthOffset;
    }
    if (hasValue(dotNetObject.inSpatialReference)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedInSpatialReference } = dotNetObject.inSpatialReference;
        properties.inSpatialReference = sanitizedInSpatialReference;
    }
    if (hasValue(dotNetObject.rasterId)) {
        properties.rasterId = dotNetObject.rasterId;
    }
    let jsImageToMapParameters = new ImageToMapParameters(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsImageToMapParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageToMapParameters;
    
    return jsImageToMapParameters;
}


export async function buildDotNetImageToMapParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageToMapParameters: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.geometry)) {
        let { buildDotNetGeometry } = await import('./geometry');
        dotNetImageToMapParameters.geometry = buildDotNetGeometry(jsObject.geometry);
    }
    if (hasValue(jsObject.adjust)) {
        dotNetImageToMapParameters.adjust = jsObject.adjust;
    }
    if (hasValue(jsObject.depthOffset)) {
        dotNetImageToMapParameters.depthOffset = jsObject.depthOffset;
    }
    if (hasValue(jsObject.inSpatialReference)) {
        dotNetImageToMapParameters.inSpatialReference = jsObject.inSpatialReference;
    }
    if (hasValue(jsObject.rasterId)) {
        dotNetImageToMapParameters.rasterId = jsObject.rasterId;
    }

    return dotNetImageToMapParameters;
}

