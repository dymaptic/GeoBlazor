// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import RelationshipContent = __esri.RelationshipContent;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class RelationshipPopupContentGenerated implements IPropertyWrapper {
    public component: RelationshipContent;
    public readonly geoBlazorId: string = '';

    constructor(component: RelationshipContent) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getOrderByFields(): Promise<any> {
        let { buildDotNetRelatedRecordsInfoFieldOrder } = await import('./relatedRecordsInfoFieldOrder');
        return this.component.orderByFields.map(async i => await buildDotNetRelatedRecordsInfoFieldOrder(i));
    }
    
    async setOrderByFields(value: any): Promise<void> {
        let { buildJsRelatedRecordsInfoFieldOrder } = await import('./relatedRecordsInfoFieldOrder');
        this.component.orderByFields = value.map(async i => await buildJsRelatedRecordsInfoFieldOrder(i));
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}
export async function buildJsRelationshipPopupContentGenerated(dotNetObject: any): Promise<any> {
    let RelationshipContent = __esri.RelationshipContent;
    let jsRelationshipContent = new RelationshipContent();
    if (hasValue(dotNetObject.orderByFields)) {
        let { buildJsRelatedRecordsInfoFieldOrder } = await import('relatedRecordsInfoFieldOrder');
        jsRelationshipContent.orderByFields = dotNetObject.orderByFields.map(async i => await buildJsRelatedRecordsInfoFieldOrder(i)) as any;

    }
    if (hasValue(dotNetObject.description)) {
        jsRelationshipContent.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.displayCount)) {
        jsRelationshipContent.displayCount = dotNetObject.displayCount;
    }
    if (hasValue(dotNetObject.displayType)) {
        jsRelationshipContent.displayType = dotNetObject.displayType;
    }
    if (hasValue(dotNetObject.relationshipId)) {
        jsRelationshipContent.relationshipId = dotNetObject.relationshipId;
    }
    if (hasValue(dotNetObject.title)) {
        jsRelationshipContent.title = dotNetObject.title;
    }
    let { default: RelationshipPopupContentWrapper } = await import('./relationshipPopupContent');
    let relationshipPopupContentWrapper = new RelationshipPopupContentWrapper(jsRelationshipContent);
    jsRelationshipContent.id = dotNetObject.id;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(relationshipPopupContentWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = relationshipPopupContentWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsRelationshipContent;
    
    return jsRelationshipContent;
}

export async function buildDotNetRelationshipPopupContentGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRelationshipPopupContent: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.orderByFields)) {
            let { buildDotNetRelatedRecordsInfoFieldOrder } = await import('./relatedRecordsInfoFieldOrder');
            dotNetRelationshipPopupContent.orderByFields = jsObject.orderByFields.map(async i => await buildDotNetRelatedRecordsInfoFieldOrder(i));
        }
        dotNetRelationshipPopupContent.description = jsObject.description;
        dotNetRelationshipPopupContent.displayCount = jsObject.displayCount;
        dotNetRelationshipPopupContent.displayType = jsObject.displayType;
        dotNetRelationshipPopupContent.relationshipId = jsObject.relationshipId;
        dotNetRelationshipPopupContent.title = jsObject.title;
        dotNetRelationshipPopupContent.type = jsObject.type;
    return dotNetRelationshipPopupContent;
}

