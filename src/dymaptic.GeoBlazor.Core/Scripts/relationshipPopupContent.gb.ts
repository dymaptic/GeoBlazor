// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import RelationshipContent from '@arcgis/core/popup/content/RelationshipContent';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class RelationshipPopupContentGenerated implements IPropertyWrapper {
    public component: RelationshipContent;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: RelationshipContent) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsRelationshipPopupContentGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsRelationshipContent = new RelationshipContent();

    if (hasValue(dotNetObject.description)) {
        jsRelationshipContent.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.displayCount)) {
        jsRelationshipContent.displayCount = dotNetObject.displayCount;
    }
    if (hasValue(dotNetObject.displayType)) {
        jsRelationshipContent.displayType = dotNetObject.displayType;
    }
    if (hasValue(dotNetObject.orderByFields)) {
        jsRelationshipContent.orderByFields = dotNetObject.orderByFields;
    }
    if (hasValue(dotNetObject.relationshipId)) {
        jsRelationshipContent.relationshipId = dotNetObject.relationshipId;
    }
    if (hasValue(dotNetObject.title)) {
        jsRelationshipContent.title = dotNetObject.title;
    }
    let { default: RelationshipPopupContentWrapper } = await import('./relationshipPopupContent');
    let relationshipPopupContentWrapper = new RelationshipPopupContentWrapper(jsRelationshipContent);
    relationshipPopupContentWrapper.geoBlazorId = dotNetObject.id;
    relationshipPopupContentWrapper.viewId = viewId;
    relationshipPopupContentWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(relationshipPopupContentWrapper);
    jsObjectRefs[dotNetObject.id] = relationshipPopupContentWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsRelationshipContent;
    
    let { buildDotNetRelationshipPopupContent } = await import('./relationshipPopupContent');
    let dnInstantiatedObject = await buildDotNetRelationshipPopupContent(jsRelationshipContent);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RelationshipPopupContent', e);
    }
    
    return jsRelationshipContent;
}

export async function buildDotNetRelationshipPopupContentGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRelationshipPopupContent: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetRelationshipPopupContent.type = jsObject.type;
        if (hasValue(jsObject.description)) {
            dotNetRelationshipPopupContent.description = jsObject.description;
        }
        if (hasValue(jsObject.displayCount)) {
            dotNetRelationshipPopupContent.displayCount = jsObject.displayCount;
        }
        if (hasValue(jsObject.displayType)) {
            dotNetRelationshipPopupContent.displayType = jsObject.displayType;
        }
        if (hasValue(jsObject.orderByFields)) {
            dotNetRelationshipPopupContent.orderByFields = jsObject.orderByFields;
        }
        if (hasValue(jsObject.relationshipId)) {
            dotNetRelationshipPopupContent.relationshipId = jsObject.relationshipId;
        }
        if (hasValue(jsObject.title)) {
            dotNetRelationshipPopupContent.title = jsObject.title;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRelationshipPopupContent.id = k;
                break;
            }
        }
    }

    return dotNetRelationshipPopupContent;
}

