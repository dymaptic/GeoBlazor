// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import TableMenuItemConfig = __esri.TableMenuItemConfig;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class TableMenuItemConfigGenerated implements IPropertyWrapper {
    public component: TableMenuItemConfig;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: TableMenuItemConfig) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async clickFunction(): Promise<void> {
        this.component.clickFunction();
    }

    async hidden(): Promise<void> {
        this.component.hidden();
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsTableMenuItemConfigGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTableMenuItemConfig: any = {}

    if (hasValue(dotNetObject.disabled)) {
        jsTableMenuItemConfig.disabled = dotNetObject.disabled;
    }
    if (hasValue(dotNetObject.icon)) {
        jsTableMenuItemConfig.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.iconClass)) {
        jsTableMenuItemConfig.iconClass = dotNetObject.iconClass;
    }
    if (hasValue(dotNetObject.label)) {
        jsTableMenuItemConfig.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.selected)) {
        jsTableMenuItemConfig.selected = dotNetObject.selected;
    }

    let { default: TableMenuItemConfigWrapper } = await import('./tableMenuItemConfig');
    let tableMenuItemConfigWrapper = new TableMenuItemConfigWrapper(jsTableMenuItemConfig);
    tableMenuItemConfigWrapper.geoBlazorId = dotNetObject.id;
    tableMenuItemConfigWrapper.viewId = viewId;
    tableMenuItemConfigWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(tableMenuItemConfigWrapper);
    jsObjectRefs[dotNetObject.id] = tableMenuItemConfigWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsTableMenuItemConfig;
    let { buildDotNetTableMenuItemConfig } = await import('./tableMenuItemConfig');
    let dnInstantiatedObject = await buildDotNetTableMenuItemConfig(jsTableMenuItemConfig);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TableMenuItemConfig', e);
    }
    
    return jsTableMenuItemConfig;
}
export async function buildDotNetTableMenuItemConfigGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTableMenuItemConfig: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.disabled)) {
            dotNetTableMenuItemConfig.disabled = jsObject.disabled;
        }
        if (hasValue(jsObject.icon)) {
            dotNetTableMenuItemConfig.icon = jsObject.icon;
        }
        if (hasValue(jsObject.iconClass)) {
            dotNetTableMenuItemConfig.iconClass = jsObject.iconClass;
        }
        if (hasValue(jsObject.label)) {
            dotNetTableMenuItemConfig.label = jsObject.label;
        }
        if (hasValue(jsObject.selected)) {
            dotNetTableMenuItemConfig.selected = jsObject.selected;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTableMenuItemConfig.id = k;
                break;
            }
        }
    }

    return dotNetTableMenuItemConfig;
}

