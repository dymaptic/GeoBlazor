import { buildDotNetUnivariateColorSizeCreateVisualVariablesParams } from './univariateColorSizeCreateVisualVariablesParams';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import univariateColorSizeCreateVisualVariablesParams = __esri.univariateColorSizeCreateVisualVariablesParams;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsUnivariateColorSizeCreateVisualVariablesParamsGenerated(dotNetObject: any): Promise<any> {
    let jsunivariateColorSizeCreateVisualVariablesParams: any = {}
    if (hasValue(dotNetObject.colorOptions)) {
        let { buildJsUnivariateColorSizeCreateVisualVariablesParamsColorOptions } = await import('./univariateColorSizeCreateVisualVariablesParamsColorOptions');
        jsunivariateColorSizeCreateVisualVariablesParams.colorOptions = await buildJsUnivariateColorSizeCreateVisualVariablesParamsColorOptions(dotNetObject.colorOptions, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsunivariateColorSizeCreateVisualVariablesParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.sizeOptions)) {
        let { buildJsUnivariateColorSizeCreateVisualVariablesParamsSizeOptions } = await import('./univariateColorSizeCreateVisualVariablesParamsSizeOptions');
        jsunivariateColorSizeCreateVisualVariablesParams.sizeOptions = await buildJsUnivariateColorSizeCreateVisualVariablesParamsSizeOptions(dotNetObject.sizeOptions, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.field)) {
        jsunivariateColorSizeCreateVisualVariablesParams.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.forBinning)) {
        jsunivariateColorSizeCreateVisualVariablesParams.forBinning = dotNetObject.forBinning;
    }
    if (hasValue(dotNetObject.maxValue)) {
        jsunivariateColorSizeCreateVisualVariablesParams.maxValue = dotNetObject.maxValue;
    }
    if (hasValue(dotNetObject.minValue)) {
        jsunivariateColorSizeCreateVisualVariablesParams.minValue = dotNetObject.minValue;
    }
    if (hasValue(dotNetObject.normalizationField)) {
        jsunivariateColorSizeCreateVisualVariablesParams.normalizationField = dotNetObject.normalizationField;
    }
    if (hasValue(dotNetObject.signal)) {
        jsunivariateColorSizeCreateVisualVariablesParams.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.sqlExpression)) {
        jsunivariateColorSizeCreateVisualVariablesParams.sqlExpression = dotNetObject.sqlExpression;
    }
    if (hasValue(dotNetObject.sqlWhere)) {
        jsunivariateColorSizeCreateVisualVariablesParams.sqlWhere = dotNetObject.sqlWhere;
    }
    if (hasValue(dotNetObject.statistics)) {
        jsunivariateColorSizeCreateVisualVariablesParams.statistics = dotNetObject.statistics;
    }
    if (hasValue(dotNetObject.theme)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedTheme } = dotNetObject.theme;
        jsunivariateColorSizeCreateVisualVariablesParams.theme = sanitizedTheme;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        jsunivariateColorSizeCreateVisualVariablesParams.valueExpression = dotNetObject.valueExpression;
    }
    if (hasValue(dotNetObject.valueExpressionTitle)) {
        jsunivariateColorSizeCreateVisualVariablesParams.valueExpressionTitle = dotNetObject.valueExpressionTitle;
    }
    if (hasValue(dotNetObject.view)) {
        jsunivariateColorSizeCreateVisualVariablesParams.view = dotNetObject.view;
    }
    if (hasValue(dotNetObject.worldScale)) {
        jsunivariateColorSizeCreateVisualVariablesParams.worldScale = dotNetObject.worldScale;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsunivariateColorSizeCreateVisualVariablesParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsunivariateColorSizeCreateVisualVariablesParams;
    
    let dnInstantiatedObject = await buildDotNetUnivariateColorSizeCreateVisualVariablesParams(jsunivariateColorSizeCreateVisualVariablesParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for UnivariateColorSizeCreateVisualVariablesParams', e);
    }
    
    return jsunivariateColorSizeCreateVisualVariablesParams;
}
export async function buildDotNetUnivariateColorSizeCreateVisualVariablesParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUnivariateColorSizeCreateVisualVariablesParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.colorOptions)) {
            let { buildDotNetUnivariateColorSizeCreateVisualVariablesParamsColorOptions } = await import('./univariateColorSizeCreateVisualVariablesParamsColorOptions');
            dotNetUnivariateColorSizeCreateVisualVariablesParams.colorOptions = await buildDotNetUnivariateColorSizeCreateVisualVariablesParamsColorOptions(jsObject.colorOptions);
        }
        if (hasValue(jsObject.sizeOptions)) {
            let { buildDotNetUnivariateColorSizeCreateVisualVariablesParamsSizeOptions } = await import('./univariateColorSizeCreateVisualVariablesParamsSizeOptions');
            dotNetUnivariateColorSizeCreateVisualVariablesParams.sizeOptions = await buildDotNetUnivariateColorSizeCreateVisualVariablesParamsSizeOptions(jsObject.sizeOptions);
        }
        if (hasValue(jsObject.field)) {
            dotNetUnivariateColorSizeCreateVisualVariablesParams.field = jsObject.field;
        }
        if (hasValue(jsObject.forBinning)) {
            dotNetUnivariateColorSizeCreateVisualVariablesParams.forBinning = jsObject.forBinning;
        }
        if (hasValue(jsObject.maxValue)) {
            dotNetUnivariateColorSizeCreateVisualVariablesParams.maxValue = jsObject.maxValue;
        }
        if (hasValue(jsObject.minValue)) {
            dotNetUnivariateColorSizeCreateVisualVariablesParams.minValue = jsObject.minValue;
        }
        if (hasValue(jsObject.normalizationField)) {
            dotNetUnivariateColorSizeCreateVisualVariablesParams.normalizationField = jsObject.normalizationField;
        }
        if (hasValue(jsObject.signal)) {
            dotNetUnivariateColorSizeCreateVisualVariablesParams.signal = jsObject.signal;
        }
        if (hasValue(jsObject.sqlExpression)) {
            dotNetUnivariateColorSizeCreateVisualVariablesParams.sqlExpression = jsObject.sqlExpression;
        }
        if (hasValue(jsObject.sqlWhere)) {
            dotNetUnivariateColorSizeCreateVisualVariablesParams.sqlWhere = jsObject.sqlWhere;
        }
        if (hasValue(jsObject.statistics)) {
            dotNetUnivariateColorSizeCreateVisualVariablesParams.statistics = jsObject.statistics;
        }
        if (hasValue(jsObject.theme)) {
            dotNetUnivariateColorSizeCreateVisualVariablesParams.theme = jsObject.theme;
        }
        if (hasValue(jsObject.valueExpression)) {
            dotNetUnivariateColorSizeCreateVisualVariablesParams.valueExpression = jsObject.valueExpression;
        }
        if (hasValue(jsObject.valueExpressionTitle)) {
            dotNetUnivariateColorSizeCreateVisualVariablesParams.valueExpressionTitle = jsObject.valueExpressionTitle;
        }
        if (hasValue(jsObject.view)) {
            dotNetUnivariateColorSizeCreateVisualVariablesParams.view = jsObject.view;
        }
        if (hasValue(jsObject.worldScale)) {
            dotNetUnivariateColorSizeCreateVisualVariablesParams.worldScale = jsObject.worldScale;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetUnivariateColorSizeCreateVisualVariablesParams.id = k;
                break;
            }
        }
    }

    return dotNetUnivariateColorSizeCreateVisualVariablesParams;
}

