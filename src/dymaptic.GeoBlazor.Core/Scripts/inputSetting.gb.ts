// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetInputSetting } from './inputSetting';
import InputSetting = __esri.InputSetting;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsInputSettingGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsInputSetting: any = {}
    if (hasValue(dotNetObject.symbol)) {
        let { buildJsSymbol } = await import('./symbol');
        jsInputSetting.symbol = buildJsSymbol(dotNetObject.symbol) as any;
    }

    if (hasValue(dotNetObject.description)) {
        jsInputSetting.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.label)) {
        jsInputSetting.label = dotNetObject.label;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsInputSetting);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsInputSetting;
    
    let dnInstantiatedObject = await buildDotNetInputSetting(jsInputSetting);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for InputSetting', e);
    }
    
    return jsInputSetting;
}

export async function buildDotNetInputSettingGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetInputSetting: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.symbol)) {
            let { buildDotNetSymbol } = await import('./symbol');
            dotNetInputSetting.symbol = buildDotNetSymbol(jsObject.symbol);
        }
        if (hasValue(jsObject.description)) {
            dotNetInputSetting.description = jsObject.description;
        }
        if (hasValue(jsObject.label)) {
            dotNetInputSetting.label = jsObject.label;
        }
        if (hasValue(jsObject.type)) {
            dotNetInputSetting.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetInputSetting.id = k;
                break;
            }
        }
    }

    return dotNetInputSetting;
}

