// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetUnivariateColorSizeCreateContinuousRendererParamsSizeOptions } from './univariateColorSizeCreateContinuousRendererParamsSizeOptions';
import univariateColorSizeCreateContinuousRendererParamsSizeOptions = __esri.univariateColorSizeCreateContinuousRendererParamsSizeOptions;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsUnivariateColorSizeCreateContinuousRendererParamsSizeOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsunivariateColorSizeCreateContinuousRendererParamsSizeOptions: any = {}

    if (hasValue(dotNetObject.sizeOptimizationEnabled)) {
        jsunivariateColorSizeCreateContinuousRendererParamsSizeOptions.sizeOptimizationEnabled = dotNetObject.sizeOptimizationEnabled;
    }
    if (hasValue(dotNetObject.sizeScheme)) {
        jsunivariateColorSizeCreateContinuousRendererParamsSizeOptions.sizeScheme = dotNetObject.sizeScheme;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsunivariateColorSizeCreateContinuousRendererParamsSizeOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsunivariateColorSizeCreateContinuousRendererParamsSizeOptions;
    
    let dnInstantiatedObject = await buildDotNetUnivariateColorSizeCreateContinuousRendererParamsSizeOptions(jsunivariateColorSizeCreateContinuousRendererParamsSizeOptions);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for UnivariateColorSizeCreateContinuousRendererParamsSizeOptions', e);
    }
    
    return jsunivariateColorSizeCreateContinuousRendererParamsSizeOptions;
}

export async function buildDotNetUnivariateColorSizeCreateContinuousRendererParamsSizeOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUnivariateColorSizeCreateContinuousRendererParamsSizeOptions: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.sizeOptimizationEnabled)) {
            dotNetUnivariateColorSizeCreateContinuousRendererParamsSizeOptions.sizeOptimizationEnabled = jsObject.sizeOptimizationEnabled;
        }
        if (hasValue(jsObject.sizeScheme)) {
            dotNetUnivariateColorSizeCreateContinuousRendererParamsSizeOptions.sizeScheme = jsObject.sizeScheme;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetUnivariateColorSizeCreateContinuousRendererParamsSizeOptions.id = k;
                break;
            }
        }
    }

    return dotNetUnivariateColorSizeCreateContinuousRendererParamsSizeOptions;
}

