// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ViewState from '@arcgis/core/views/2d/ViewState';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ViewStateGenerated implements IPropertyWrapper {
    public component: ViewState;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ViewState) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async copy(state: any): Promise<any> {
                let { buildJsViewState } = await import('./viewState');
let jsState = await buildJsViewState(state, this.layerId, this.viewId) as any;
        let result = this.component.copy(jsState);
        let { buildDotNetViewState } = await import('./viewState');
        return await buildDotNetViewState(result);
    }

    async toMap(out: any,
        x: any,
        y: any): Promise<any> {
        return this.component.toMap(out,
            x,
            y);
    }

    async toScreen(out: any,
        x: any,
        y: any): Promise<any> {
        return this.component.toScreen(out,
            x,
            y);
    }

    async toScreenNoRotation(out: any,
        x: any,
        y: any): Promise<any> {
        return this.component.toScreenNoRotation(out,
            x,
            y);
    }

    // region properties
    
    async getExtent(): Promise<any> {
        if (!hasValue(this.component.extent)) {
            return null;
        }
        
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(this.component.extent);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsViewStateGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    let jsViewState = new ViewState(properties);

    let { default: ViewStateWrapper } = await import('./viewState');
    let viewStateWrapper = new ViewStateWrapper(jsViewState);
    viewStateWrapper.geoBlazorId = dotNetObject.id;
    viewStateWrapper.viewId = viewId;
    viewStateWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(viewStateWrapper);
    jsObjectRefs[dotNetObject.id] = viewStateWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsViewState;
    
    let { buildDotNetViewState } = await import('./viewState');
    let dnInstantiatedObject = await buildDotNetViewState(jsViewState);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type ViewState detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ViewState', e);
    }
    
    return jsViewState;
}


export async function buildDotNetViewStateGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetViewState: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.extent)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetViewState.extent = buildDotNetExtent(jsObject.extent);
    }
    if (hasValue(jsObject.center)) {
        dotNetViewState.center = jsObject.center;
    }
    if (hasValue(jsObject.resolution)) {
        dotNetViewState.resolution = jsObject.resolution;
    }
    if (hasValue(jsObject.rotation)) {
        dotNetViewState.rotation = jsObject.rotation;
    }
    if (hasValue(jsObject.scale)) {
        dotNetViewState.scale = jsObject.scale;
    }
    if (hasValue(jsObject.size)) {
        dotNetViewState.size = jsObject.size;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetViewState.id = k;
                break;
            }
        }
    }

    return dotNetViewState;
}

