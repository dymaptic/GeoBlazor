// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetScaleRangeSliderVisibleElements } from './scaleRangeSliderVisibleElements';

export async function buildJsScaleRangeSliderVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsScaleRangeSliderVisibleElements: any = {};

    if (hasValue(dotNetObject.preview)) {
        jsScaleRangeSliderVisibleElements.preview = dotNetObject.preview;
    }
    if (hasValue(dotNetObject.scaleMenus)) {
        jsScaleRangeSliderVisibleElements.scaleMenus = dotNetObject.scaleMenus;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsScaleRangeSliderVisibleElements);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsScaleRangeSliderVisibleElements;
    
    let { buildDotNetScaleRangeSliderVisibleElements } = await import('./scaleRangeSliderVisibleElements');
    let dnInstantiatedObject = await buildDotNetScaleRangeSliderVisibleElements(jsScaleRangeSliderVisibleElements, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type ScaleRangeSliderVisibleElements detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ScaleRangeSliderVisibleElements', e);
    }
    
    return jsScaleRangeSliderVisibleElements;
}


export async function buildDotNetScaleRangeSliderVisibleElementsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsScaleRangeSliderVisibleElements } = await import('./scaleRangeSliderVisibleElements');
        jsComponentRef = await buildJsScaleRangeSliderVisibleElements(jsObject, layerId, viewId);
    }
    
    let dotNetScaleRangeSliderVisibleElements: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.preview)) {
        dotNetScaleRangeSliderVisibleElements.preview = jsObject.preview;
    }
    if (hasValue(jsObject.scaleMenus)) {
        dotNetScaleRangeSliderVisibleElements.scaleMenus = jsObject.scaleMenus;
    }


    if (hasValue(geoBlazorId)) {
        dotNetScaleRangeSliderVisibleElements.id = geoBlazorId;
    }

    return dotNetScaleRangeSliderVisibleElements;
}

