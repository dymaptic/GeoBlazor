// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetScaleRangeSliderVisibleElements } from './scaleRangeSliderVisibleElements';

export async function buildJsScaleRangeSliderVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsScaleRangeSliderVisibleElements: any = {};

    if (hasValue(dotNetObject.preview)) {
        jsScaleRangeSliderVisibleElements.preview = dotNetObject.preview;
    }
    if (hasValue(dotNetObject.scaleMenus)) {
        jsScaleRangeSliderVisibleElements.scaleMenus = dotNetObject.scaleMenus;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsScaleRangeSliderVisibleElements);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsScaleRangeSliderVisibleElements;
    
    return jsScaleRangeSliderVisibleElements;
}


export async function buildDotNetScaleRangeSliderVisibleElementsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetScaleRangeSliderVisibleElements: any = {};
    
    if (hasValue(jsObject.preview)) {
        dotNetScaleRangeSliderVisibleElements.preview = jsObject.preview;
    }
    
    if (hasValue(jsObject.scaleMenus)) {
        dotNetScaleRangeSliderVisibleElements.scaleMenus = jsObject.scaleMenus;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetScaleRangeSliderVisibleElements.id = geoBlazorId;
    }

    return dotNetScaleRangeSliderVisibleElements;
}

