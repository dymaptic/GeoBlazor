// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetPieChartSchemes } from './pieChartSchemes';

export async function buildJsPieChartSchemesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPieChartSchemes: any = {};
    if (hasValue(dotNetObject.primaryScheme)) {
        let { buildJsPieChartScheme } = await import('./pieChartScheme');
        jsPieChartSchemes.primaryScheme = await buildJsPieChartScheme(dotNetObject.primaryScheme, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.secondarySchemes)) {
        let { buildJsPieChartScheme } = await import('./pieChartScheme');
        jsPieChartSchemes.secondarySchemes = await Promise.all(dotNetObject.secondarySchemes.map(async i => await buildJsPieChartScheme(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.basemapId)) {
        jsPieChartSchemes.basemapId = dotNetObject.basemapId;
    }
    if (hasValue(dotNetObject.basemapTheme)) {
        jsPieChartSchemes.basemapTheme = dotNetObject.basemapTheme;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsPieChartSchemes);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPieChartSchemes;
    
    let dnInstantiatedObject = await buildDotNetPieChartSchemes(jsPieChartSchemes);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PieChartSchemes', e);
    }
    
    return jsPieChartSchemes;
}

export async function buildDotNetPieChartSchemesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPieChartSchemes: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.primaryScheme)) {
            let { buildDotNetPieChartScheme } = await import('./pieChartScheme');
            dotNetPieChartSchemes.primaryScheme = await buildDotNetPieChartScheme(jsObject.primaryScheme);
        }
        if (hasValue(jsObject.secondarySchemes)) {
            let { buildDotNetPieChartScheme } = await import('./pieChartScheme');
            dotNetPieChartSchemes.secondarySchemes = await Promise.all(jsObject.secondarySchemes.map(async i => await buildDotNetPieChartScheme(i)));
        }
    if (hasValue(jsObject.basemapId)) {
        dotNetPieChartSchemes.basemapId = jsObject.basemapId;
    }
    if (hasValue(jsObject.basemapTheme)) {
        dotNetPieChartSchemes.basemapTheme = jsObject.basemapTheme;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPieChartSchemes.id = k;
                break;
            }
        }
    }

    return dotNetPieChartSchemes;
}

