// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import locator = __esri.locator;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class LocationServiceGenerated implements IPropertyWrapper {
    public component: locator;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: locator) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async addressesToLocations(url: any,
        parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsLocatorAddressesToLocationsParams } = await import('./locatorAddressesToLocationsParams');
        let jsparameters = await buildJsLocatorAddressesToLocationsParams(parameters, this.layerId, this.viewId) as any;
        return await this.component.addressesToLocations(url,
            jsparameters,
            requestOptions);
    }

    async addressToLocations(url: any,
        parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsLocatorAddressToLocationsParams } = await import('./locatorAddressToLocationsParams');
        let jsparameters = await buildJsLocatorAddressToLocationsParams(parameters, this.layerId, this.viewId) as any;
        return await this.component.addressToLocations(url,
            jsparameters,
            requestOptions);
    }

    async locationToAddress(url: any,
        parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsLocatorLocationToAddressParams } = await import('./locatorLocationToAddressParams');
        let jsparameters = await buildJsLocatorLocationToAddressParams(parameters, this.layerId, this.viewId) as any;
        return await this.component.locationToAddress(url,
            jsparameters,
            requestOptions);
    }

    async suggestLocations(url: any,
        parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsLocatorSuggestLocationsParams } = await import('./locatorSuggestLocationsParams');
        let jsparameters = await buildJsLocatorSuggestLocationsParams(parameters, this.layerId, this.viewId) as any;
        return await this.component.suggestLocations(url,
            jsparameters,
            requestOptions);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsLocationServiceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jslocator: any = {};


    let { default: LocationServiceWrapper } = await import('./locationService');
    let locationServiceWrapper = new LocationServiceWrapper(jslocator);
    locationServiceWrapper.geoBlazorId = dotNetObject.id;
    locationServiceWrapper.viewId = viewId;
    locationServiceWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(locationServiceWrapper);
    jsObjectRefs[dotNetObject.id] = locationServiceWrapper;
    arcGisObjectRefs[dotNetObject.id] = jslocator;
    let { buildDotNetLocationService } = await import('./locationService');
    let dnInstantiatedObject = await buildDotNetLocationService(jslocator);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LocationService', e);
    }
    
    return jslocator;
}

export async function buildDotNetLocationServiceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLocationService: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLocationService.id = k;
                break;
            }
        }
    }

    return dotNetLocationService;
}

