// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetColorCreateAgeRendererParams } from './colorCreateAgeRendererParams';

export async function buildJsColorCreateAgeRendererParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jscolorCreateAgeRendererParams: any = {}
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jscolorCreateAgeRendererParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.colorMixMode)) {
        jscolorCreateAgeRendererParams.colorMixMode = dotNetObject.colorMixMode;
    }
    if (hasValue(dotNetObject.colorScheme)) {
        jscolorCreateAgeRendererParams.colorScheme = dotNetObject.colorScheme;
    }
    if (hasValue(dotNetObject.defaultSymbolEnabled)) {
        jscolorCreateAgeRendererParams.defaultSymbolEnabled = dotNetObject.defaultSymbolEnabled;
    }
    if (hasValue(dotNetObject.endTime)) {
        jscolorCreateAgeRendererParams.endTime = dotNetObject.endTime;
    }
    if (hasValue(dotNetObject.legendOptions)) {
        jscolorCreateAgeRendererParams.legendOptions = dotNetObject.legendOptions;
    }
    if (hasValue(dotNetObject.maxValue)) {
        jscolorCreateAgeRendererParams.maxValue = dotNetObject.maxValue;
    }
    if (hasValue(dotNetObject.minValue)) {
        jscolorCreateAgeRendererParams.minValue = dotNetObject.minValue;
    }
    if (hasValue(dotNetObject.outlineOptimizationEnabled)) {
        jscolorCreateAgeRendererParams.outlineOptimizationEnabled = dotNetObject.outlineOptimizationEnabled;
    }
    if (hasValue(dotNetObject.signal)) {
        jscolorCreateAgeRendererParams.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.sizeOptimizationEnabled)) {
        jscolorCreateAgeRendererParams.sizeOptimizationEnabled = dotNetObject.sizeOptimizationEnabled;
    }
    if (hasValue(dotNetObject.startTime)) {
        jscolorCreateAgeRendererParams.startTime = dotNetObject.startTime;
    }
    if (hasValue(dotNetObject.statistics)) {
        jscolorCreateAgeRendererParams.statistics = dotNetObject.statistics;
    }
    if (hasValue(dotNetObject.symbolType)) {
        jscolorCreateAgeRendererParams.symbolType = dotNetObject.symbolType;
    }
    if (hasValue(dotNetObject.theme)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedTheme } = dotNetObject.theme;
        jscolorCreateAgeRendererParams.theme = sanitizedTheme;
    }
    if (hasValue(dotNetObject.unit)) {
        jscolorCreateAgeRendererParams.unit = dotNetObject.unit;
    }
    if (hasValue(dotNetObject.view)) {
        jscolorCreateAgeRendererParams.view = dotNetObject.view;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jscolorCreateAgeRendererParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jscolorCreateAgeRendererParams;
    
    let dnInstantiatedObject = await buildDotNetColorCreateAgeRendererParams(jscolorCreateAgeRendererParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ColorCreateAgeRendererParams', e);
    }
    
    return jscolorCreateAgeRendererParams;
}

export async function buildDotNetColorCreateAgeRendererParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetColorCreateAgeRendererParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.colorMixMode)) {
            dotNetColorCreateAgeRendererParams.colorMixMode = jsObject.colorMixMode;
        }
        if (hasValue(jsObject.colorScheme)) {
            dotNetColorCreateAgeRendererParams.colorScheme = jsObject.colorScheme;
        }
        if (hasValue(jsObject.defaultSymbolEnabled)) {
            dotNetColorCreateAgeRendererParams.defaultSymbolEnabled = jsObject.defaultSymbolEnabled;
        }
        if (hasValue(jsObject.endTime)) {
            dotNetColorCreateAgeRendererParams.endTime = jsObject.endTime;
        }
        if (hasValue(jsObject.legendOptions)) {
            dotNetColorCreateAgeRendererParams.legendOptions = jsObject.legendOptions;
        }
        if (hasValue(jsObject.maxValue)) {
            dotNetColorCreateAgeRendererParams.maxValue = jsObject.maxValue;
        }
        if (hasValue(jsObject.minValue)) {
            dotNetColorCreateAgeRendererParams.minValue = jsObject.minValue;
        }
        if (hasValue(jsObject.outlineOptimizationEnabled)) {
            dotNetColorCreateAgeRendererParams.outlineOptimizationEnabled = jsObject.outlineOptimizationEnabled;
        }
        if (hasValue(jsObject.signal)) {
            dotNetColorCreateAgeRendererParams.signal = jsObject.signal;
        }
        if (hasValue(jsObject.sizeOptimizationEnabled)) {
            dotNetColorCreateAgeRendererParams.sizeOptimizationEnabled = jsObject.sizeOptimizationEnabled;
        }
        if (hasValue(jsObject.startTime)) {
            dotNetColorCreateAgeRendererParams.startTime = jsObject.startTime;
        }
        if (hasValue(jsObject.statistics)) {
            dotNetColorCreateAgeRendererParams.statistics = jsObject.statistics;
        }
        if (hasValue(jsObject.symbolType)) {
            dotNetColorCreateAgeRendererParams.symbolType = jsObject.symbolType;
        }
        if (hasValue(jsObject.theme)) {
            dotNetColorCreateAgeRendererParams.theme = jsObject.theme;
        }
        if (hasValue(jsObject.unit)) {
            dotNetColorCreateAgeRendererParams.unit = jsObject.unit;
        }
        if (hasValue(jsObject.view)) {
            dotNetColorCreateAgeRendererParams.view = jsObject.view;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetColorCreateAgeRendererParams.id = k;
                break;
            }
        }
    }

    return dotNetColorCreateAgeRendererParams;
}

