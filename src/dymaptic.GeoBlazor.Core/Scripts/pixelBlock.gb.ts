// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import PixelBlock from '@arcgis/core/layers/support/PixelBlock';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PixelBlockGenerated implements IPropertyWrapper {
    public component: PixelBlock;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: PixelBlock) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async addData(planeData: any): Promise<void> {
        this.component.addData(planeData);
    }

    async getAsRGBA(): Promise<any> {
        return this.component.getAsRGBA();
    }

    async getAsRGBAFloat(): Promise<any> {
        return this.component.getAsRGBAFloat();
    }

    async getPlaneCount(): Promise<any> {
        return this.component.getPlaneCount();
    }

    // region properties
    
    async getStatistics(): Promise<any> {
        if (!hasValue(this.component.statistics)) {
            return null;
        }
        
        let { buildDotNetPixelBlockStatistics } = await import('./pixelBlockStatistics');
        return await Promise.all(this.component.statistics.map(async i => await buildDotNetPixelBlockStatistics(i)));
    }
    
    async setStatistics(value: any): Promise<void> {
        let { buildJsPixelBlockStatistics } = await import('./pixelBlockStatistics');
        this.component.statistics = await Promise.all(value.map(async i => await buildJsPixelBlockStatistics(i, this.layerId, this.viewId))) as any;
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsPixelBlockGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.statistics)) {
        let { buildJsPixelBlockStatistics } = await import('./pixelBlockStatistics');
        properties.statistics = await Promise.all(dotNetObject.statistics.map(async i => await buildJsPixelBlockStatistics(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.height)) {
        properties.height = dotNetObject.height;
    }
    if (hasValue(dotNetObject.mask)) {
        properties.mask = dotNetObject.mask;
    }
    if (hasValue(dotNetObject.maskIsAlpha)) {
        properties.maskIsAlpha = dotNetObject.maskIsAlpha;
    }
    if (hasValue(dotNetObject.pixels)) {
        properties.pixels = dotNetObject.pixels;
    }
    if (hasValue(dotNetObject.pixelType)) {
        properties.pixelType = dotNetObject.pixelType;
    }
    if (hasValue(dotNetObject.validPixelCount)) {
        properties.validPixelCount = dotNetObject.validPixelCount;
    }
    if (hasValue(dotNetObject.width)) {
        properties.width = dotNetObject.width;
    }
    let jsPixelBlock = new PixelBlock(properties);

    let { default: PixelBlockWrapper } = await import('./pixelBlock');
    let pixelBlockWrapper = new PixelBlockWrapper(jsPixelBlock);
    pixelBlockWrapper.geoBlazorId = dotNetObject.id;
    pixelBlockWrapper.viewId = viewId;
    pixelBlockWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(pixelBlockWrapper);
    jsObjectRefs[dotNetObject.id] = pixelBlockWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsPixelBlock;
    
    let { buildDotNetPixelBlock } = await import('./pixelBlock');
    let dnInstantiatedObject = await buildDotNetPixelBlock(jsPixelBlock);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type PixelBlock detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PixelBlock', e);
    }
    
    return jsPixelBlock;
}


export async function buildDotNetPixelBlockGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPixelBlock: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.statistics)) {
        let { buildDotNetPixelBlockStatistics } = await import('./pixelBlockStatistics');
        dotNetPixelBlock.statistics = await Promise.all(jsObject.statistics.map(async i => await buildDotNetPixelBlockStatistics(i)));
    }
    if (hasValue(jsObject.height)) {
        dotNetPixelBlock.height = jsObject.height;
    }
    if (hasValue(jsObject.mask)) {
        dotNetPixelBlock.mask = jsObject.mask;
    }
    if (hasValue(jsObject.maskIsAlpha)) {
        dotNetPixelBlock.maskIsAlpha = jsObject.maskIsAlpha;
    }
    if (hasValue(jsObject.pixels)) {
        dotNetPixelBlock.pixels = jsObject.pixels;
    }
    if (hasValue(jsObject.pixelType)) {
        dotNetPixelBlock.pixelType = jsObject.pixelType;
    }
    if (hasValue(jsObject.validPixelCount)) {
        dotNetPixelBlock.validPixelCount = jsObject.validPixelCount;
    }
    if (hasValue(jsObject.width)) {
        dotNetPixelBlock.width = jsObject.width;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetPixelBlock.id = geoBlazorId;
    }

    return dotNetPixelBlock;
}

