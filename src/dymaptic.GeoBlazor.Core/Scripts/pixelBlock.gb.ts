// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import PixelBlock from '@arcgis/core/layers/support/PixelBlock';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PixelBlockGenerated implements IPropertyWrapper {
    public component: PixelBlock;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: PixelBlock) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.statistics) && dotNetObject.statistics.length > 0) {
            let { buildJsPixelBlockStatistics } = await import('./pixelBlockStatistics');
            this.component.statistics = await Promise.all(dotNetObject.statistics.map(async i => await buildJsPixelBlockStatistics(i, this.viewId))) as any;
        }

        if (hasValue(dotNetObject.height)) {
            this.component.height = dotNetObject.height;
        }
        if (hasValue(dotNetObject.mask)) {
            this.component.mask = dotNetObject.mask;
        }
        if (hasValue(dotNetObject.maskIsAlpha)) {
            this.component.maskIsAlpha = dotNetObject.maskIsAlpha;
        }
        if (hasValue(dotNetObject.pixels)) {
            this.component.pixels = dotNetObject.pixels;
        }
        if (hasValue(dotNetObject.pixelType)) {
            this.component.pixelType = dotNetObject.pixelType;
        }
        if (hasValue(dotNetObject.validPixelCount)) {
            this.component.validPixelCount = dotNetObject.validPixelCount;
        }
        if (hasValue(dotNetObject.width)) {
            this.component.width = dotNetObject.width;
        }
    }
    
    async addData(planeData: any): Promise<void> {
        let { buildJsPixelBlockAddDataPlaneData } = await import('./pixelBlockAddDataPlaneData');
        let jsPlaneData = await buildJsPixelBlockAddDataPlaneData(planeData, this.layerId, this.viewId) as any;
        this.component.addData(jsPlaneData);
    }

    async getAsRGBA(): Promise<any> {
        return this.component.getAsRGBA();
    }

    async getAsRGBAFloat(): Promise<any> {
        return this.component.getAsRGBAFloat();
    }

    async getPlaneCount(): Promise<any> {
        return this.component.getPlaneCount();
    }

    // region properties
    
    async getStatistics(): Promise<any> {
        if (!hasValue(this.component.statistics)) {
            return null;
        }
        
        let { buildDotNetPixelBlockStatistics } = await import('./pixelBlockStatistics');
        return await Promise.all(this.component.statistics!.map(async i => await buildDotNetPixelBlockStatistics(i, this.viewId)));
    }
    
    async setStatistics(value: any): Promise<void> {
        if (!hasValue(value)) {
            this.component.statistics.removeAll();
        }
        let { buildJsPixelBlockStatistics } = await import('./pixelBlockStatistics');
        this.component.statistics = await Promise.all(value.map(async i => await buildJsPixelBlockStatistics(i, this.viewId))) as any;
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsPixelBlockGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.statistics) && dotNetObject.statistics.length > 0) {
        let { buildJsPixelBlockStatistics } = await import('./pixelBlockStatistics');
        properties.statistics = await Promise.all(dotNetObject.statistics.map(async i => await buildJsPixelBlockStatistics(i, viewId))) as any;
    }

    if (hasValue(dotNetObject.height)) {
        properties.height = dotNetObject.height;
    }
    if (hasValue(dotNetObject.mask)) {
        properties.mask = dotNetObject.mask;
    }
    if (hasValue(dotNetObject.maskIsAlpha)) {
        properties.maskIsAlpha = dotNetObject.maskIsAlpha;
    }
    if (hasValue(dotNetObject.pixels)) {
        properties.pixels = dotNetObject.pixels;
    }
    if (hasValue(dotNetObject.pixelType)) {
        properties.pixelType = dotNetObject.pixelType;
    }
    if (hasValue(dotNetObject.validPixelCount)) {
        properties.validPixelCount = dotNetObject.validPixelCount;
    }
    if (hasValue(dotNetObject.width)) {
        properties.width = dotNetObject.width;
    }
    let jsPixelBlock = new PixelBlock(properties);

    let { default: PixelBlockWrapper } = await import('./pixelBlock');
    let pixelBlockWrapper = new PixelBlockWrapper(jsPixelBlock);
    pixelBlockWrapper.geoBlazorId = dotNetObject.id;
    pixelBlockWrapper.viewId = viewId;
    pixelBlockWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = pixelBlockWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsPixelBlock;
    
    return jsPixelBlock;
}


export async function buildDotNetPixelBlockGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPixelBlock: any = {};
    
    if (hasValue(jsObject.statistics)) {
        let { buildDotNetPixelBlockStatistics } = await import('./pixelBlockStatistics');
        dotNetPixelBlock.statistics = await Promise.all(jsObject.statistics.map(async i => await buildDotNetPixelBlockStatistics(i, viewId)));
    }
    
    if (hasValue(jsObject.height)) {
        dotNetPixelBlock.height = jsObject.height;
    }
    
    if (hasValue(jsObject.mask)) {
        dotNetPixelBlock.mask = jsObject.mask;
    }
    
    if (hasValue(jsObject.maskIsAlpha)) {
        dotNetPixelBlock.maskIsAlpha = jsObject.maskIsAlpha;
    }
    
    if (hasValue(jsObject.pixels)) {
        dotNetPixelBlock.pixels = jsObject.pixels;
    }
    
    if (hasValue(jsObject.pixelType)) {
        dotNetPixelBlock.pixelType = removeCircularReferences(jsObject.pixelType);
    }
    
    if (hasValue(jsObject.validPixelCount)) {
        dotNetPixelBlock.validPixelCount = jsObject.validPixelCount;
    }
    
    if (hasValue(jsObject.width)) {
        dotNetPixelBlock.width = jsObject.width;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetPixelBlock.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetPixelBlock.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetPixelBlock.id)) {
        jsObjectRefs[dotNetPixelBlock.id] ??= jsObject;
        arcGisObjectRefs[dotNetPixelBlock.id] ??= jsObject;
    }

    return dotNetPixelBlock;
}

