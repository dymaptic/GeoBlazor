import { buildDotNetTraceResultExtend } from './traceResultExtend';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import TraceResultExtend = __esri.TraceResultExtend;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsTraceResultExtendGenerated(dotNetObject: any): Promise<any> {
    let jsTraceResultExtend: any = {}
    if (hasValue(dotNetObject.traceResult)) {
        let { buildJsTraceResult } = await import('./traceResult');
        jsTraceResultExtend.TraceResult = await buildJsTraceResult(dotNetObject.traceResult, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.graphicColor)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedGraphicColor } = dotNetObject.graphicColor;
        jsTraceResultExtend.graphicColor = sanitizedGraphicColor;
    }
    if (hasValue(dotNetObject.graphicEnabled)) {
        jsTraceResultExtend.graphicEnabled = dotNetObject.graphicEnabled;
    }
    if (hasValue(dotNetObject.selectionEnabled)) {
        jsTraceResultExtend.selectionEnabled = dotNetObject.selectionEnabled;
    }
    if (hasValue(dotNetObject.status)) {
        jsTraceResultExtend.status = dotNetObject.status;
    }
    if (hasValue(dotNetObject.traceItem)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedTraceItem } = dotNetObject.traceItem;
        jsTraceResultExtend.TraceItem = sanitizedTraceItem;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsTraceResultExtend);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTraceResultExtend;
    
    let dnInstantiatedObject = await buildDotNetTraceResultExtend(jsTraceResultExtend);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TraceResultExtend', e);
    }
    
    return jsTraceResultExtend;
}
export async function buildDotNetTraceResultExtendGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTraceResultExtend: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.TraceResult)) {
            let { buildDotNetTraceResult } = await import('./traceResult');
            dotNetTraceResultExtend.traceResult = await buildDotNetTraceResult(jsObject.TraceResult);
        }
        if (hasValue(jsObject.graphicColor)) {
            dotNetTraceResultExtend.graphicColor = jsObject.graphicColor;
        }
        if (hasValue(jsObject.graphicEnabled)) {
            dotNetTraceResultExtend.graphicEnabled = jsObject.graphicEnabled;
        }
        if (hasValue(jsObject.selectionEnabled)) {
            dotNetTraceResultExtend.selectionEnabled = jsObject.selectionEnabled;
        }
        if (hasValue(jsObject.status)) {
            dotNetTraceResultExtend.status = jsObject.status;
        }
        if (hasValue(jsObject.TraceItem)) {
            dotNetTraceResultExtend.traceItem = jsObject.TraceItem;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTraceResultExtend.id = k;
                break;
            }
        }
    }

    return dotNetTraceResultExtend;
}

