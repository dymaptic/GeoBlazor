// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetIVisualVariablesMixin } from './iVisualVariablesMixin';

export async function buildJsIVisualVariablesMixinGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsVisualVariablesMixin = new VisualVariablesMixin();
    if (hasValue(dotNetObject.visualVariables)) {
        let { buildJsVisualVariable } = await import('./visualVariable');
        jsVisualVariablesMixin.visualVariables = await Promise.all(dotNetObject.visualVariables.map(async i => await buildJsVisualVariable(i, layerId, viewId))) as any;
    }

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsVisualVariablesMixin);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsVisualVariablesMixin;
    
    let dnInstantiatedObject = await buildDotNetIVisualVariablesMixin(jsVisualVariablesMixin);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for IVisualVariablesMixin', e);
    }
    
    return jsVisualVariablesMixin;
}

export async function buildDotNetIVisualVariablesMixinGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIVisualVariablesMixin: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.visualVariables)) {
            let { buildDotNetVisualVariable } = await import('./visualVariable');
            dotNetIVisualVariablesMixin.visualVariables = await Promise.all(jsObject.visualVariables.map(async i => await buildDotNetVisualVariable(i)));
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetIVisualVariablesMixin.id = k;
                break;
            }
        }
    }

    return dotNetIVisualVariablesMixin;
}

