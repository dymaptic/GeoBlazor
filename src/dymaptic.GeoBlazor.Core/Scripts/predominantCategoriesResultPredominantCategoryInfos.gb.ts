// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetPredominantCategoriesResultPredominantCategoryInfos } from './predominantCategoriesResultPredominantCategoryInfos';

export async function buildJsPredominantCategoriesResultPredominantCategoryInfosGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsPredominantCategoriesResultPredominantCategoryInfos: any = {};

    if (hasValue(dotNetObject.count)) {
        jsPredominantCategoriesResultPredominantCategoryInfos.count = dotNetObject.count;
    }
    if (hasValue(dotNetObject.label)) {
        jsPredominantCategoriesResultPredominantCategoryInfos.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.value)) {
        jsPredominantCategoriesResultPredominantCategoryInfos.value = dotNetObject.value;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsPredominantCategoriesResultPredominantCategoryInfos);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPredominantCategoriesResultPredominantCategoryInfos;
    
    return jsPredominantCategoriesResultPredominantCategoryInfos;
}


export async function buildDotNetPredominantCategoriesResultPredominantCategoryInfosGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPredominantCategoriesResultPredominantCategoryInfos: any = {};
    
    if (hasValue(jsObject.count)) {
        dotNetPredominantCategoriesResultPredominantCategoryInfos.count = jsObject.count;
    }
    
    if (hasValue(jsObject.label)) {
        dotNetPredominantCategoriesResultPredominantCategoryInfos.label = jsObject.label;
    }
    
    if (hasValue(jsObject.value)) {
        dotNetPredominantCategoriesResultPredominantCategoryInfos.value = jsObject.value;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetPredominantCategoriesResultPredominantCategoryInfos.id = geoBlazorId;
    }

    return dotNetPredominantCategoriesResultPredominantCategoryInfos;
}

