// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetEditorLayerInfo } from './editorLayerInfo';

export async function buildJsEditorLayerInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsEditorLayerInfo: any = {}
    if (hasValue(dotNetObject.formTemplate)) {
        let { buildJsFormTemplate } = await import('./formTemplate');
        jsEditorLayerInfo.formTemplate = await buildJsFormTemplate(dotNetObject.formTemplate, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsEditorLayerInfo.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.addEnabled)) {
        jsEditorLayerInfo.addEnabled = dotNetObject.addEnabled;
    }
    if (hasValue(dotNetObject.attachmentsOnCreateEnabled)) {
        jsEditorLayerInfo.attachmentsOnCreateEnabled = dotNetObject.attachmentsOnCreateEnabled;
    }
    if (hasValue(dotNetObject.attachmentsOnUpdateEnabled)) {
        jsEditorLayerInfo.attachmentsOnUpdateEnabled = dotNetObject.attachmentsOnUpdateEnabled;
    }
    if (hasValue(dotNetObject.attributeUpdatesEnabled)) {
        jsEditorLayerInfo.attributeUpdatesEnabled = dotNetObject.attributeUpdatesEnabled;
    }
    if (hasValue(dotNetObject.deleteEnabled)) {
        jsEditorLayerInfo.deleteEnabled = dotNetObject.deleteEnabled;
    }
    if (hasValue(dotNetObject.enabled)) {
        jsEditorLayerInfo.enabled = dotNetObject.enabled;
    }
    if (hasValue(dotNetObject.geometryUpdatesEnabled)) {
        jsEditorLayerInfo.geometryUpdatesEnabled = dotNetObject.geometryUpdatesEnabled;
    }
    if (hasValue(dotNetObject.updateEnabled)) {
        jsEditorLayerInfo.updateEnabled = dotNetObject.updateEnabled;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsEditorLayerInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsEditorLayerInfo;
    
    let dnInstantiatedObject = await buildDotNetEditorLayerInfo(jsEditorLayerInfo);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for EditorLayerInfo', e);
    }
    
    return jsEditorLayerInfo;
}

export async function buildDotNetEditorLayerInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetEditorLayerInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.formTemplate)) {
            let { buildDotNetFormTemplate } = await import('./formTemplate');
            dotNetEditorLayerInfo.formTemplate = await buildDotNetFormTemplate(jsObject.formTemplate);
        }
        if (hasValue(jsObject.addEnabled)) {
            dotNetEditorLayerInfo.addEnabled = jsObject.addEnabled;
        }
        if (hasValue(jsObject.attachmentsOnCreateEnabled)) {
            dotNetEditorLayerInfo.attachmentsOnCreateEnabled = jsObject.attachmentsOnCreateEnabled;
        }
        if (hasValue(jsObject.attachmentsOnUpdateEnabled)) {
            dotNetEditorLayerInfo.attachmentsOnUpdateEnabled = jsObject.attachmentsOnUpdateEnabled;
        }
        if (hasValue(jsObject.attributeUpdatesEnabled)) {
            dotNetEditorLayerInfo.attributeUpdatesEnabled = jsObject.attributeUpdatesEnabled;
        }
        if (hasValue(jsObject.deleteEnabled)) {
            dotNetEditorLayerInfo.deleteEnabled = jsObject.deleteEnabled;
        }
        if (hasValue(jsObject.enabled)) {
            dotNetEditorLayerInfo.enabled = jsObject.enabled;
        }
        if (hasValue(jsObject.geometryUpdatesEnabled)) {
            dotNetEditorLayerInfo.geometryUpdatesEnabled = jsObject.geometryUpdatesEnabled;
        }
        if (hasValue(jsObject.updateEnabled)) {
            dotNetEditorLayerInfo.updateEnabled = jsObject.updateEnabled;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetEditorLayerInfo.id = k;
                break;
            }
        }
    }

    return dotNetEditorLayerInfo;
}

