// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import SnowyWeather from '@arcgis/core/views/3d/environment/SnowyWeather';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetSnowyWeather } from './snowyWeather';

export async function buildJsSnowyWeatherGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.cloudCover)) {
        properties.cloudCover = dotNetObject.cloudCover;
    }
    if (hasValue(dotNetObject.precipitation)) {
        properties.precipitation = dotNetObject.precipitation;
    }
    if (hasValue(dotNetObject.snowCover)) {
        properties.snowCover = dotNetObject.snowCover;
    }
    let jsSnowyWeather = new SnowyWeather(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSnowyWeather);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSnowyWeather;
    
    let { buildDotNetSnowyWeather } = await import('./snowyWeather');
    let dnInstantiatedObject = await buildDotNetSnowyWeather(jsSnowyWeather);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type SnowyWeather detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SnowyWeather', e);
    }
    
    return jsSnowyWeather;
}


export async function buildDotNetSnowyWeatherGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSnowyWeather: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.cloudCover)) {
        dotNetSnowyWeather.cloudCover = jsObject.cloudCover;
    }
    if (hasValue(jsObject.precipitation)) {
        dotNetSnowyWeather.precipitation = jsObject.precipitation;
    }
    if (hasValue(jsObject.snowCover)) {
        dotNetSnowyWeather.snowCover = jsObject.snowCover;
    }
    if (hasValue(jsObject.type)) {
        dotNetSnowyWeather.type = jsObject.type;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSnowyWeather.id = geoBlazorId;
    }

    return dotNetSnowyWeather;
}

