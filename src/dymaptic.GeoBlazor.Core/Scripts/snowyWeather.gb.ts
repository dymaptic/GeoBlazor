// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import SnowyWeather from '@arcgis/core/views/3d/environment/SnowyWeather';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetSnowyWeather } from './snowyWeather';

export async function buildJsSnowyWeatherGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.cloudCover)) {
        properties.cloudCover = dotNetObject.cloudCover;
    }
    if (hasValue(dotNetObject.precipitation)) {
        properties.precipitation = dotNetObject.precipitation;
    }
    if (hasValue(dotNetObject.snowCover)) {
        properties.snowCover = dotNetObject.snowCover;
    }
    let jsSnowyWeather = new SnowyWeather(properties);
    
    jsObjectRefs[dotNetObject.id] = jsSnowyWeather;
    arcGisObjectRefs[dotNetObject.id] = jsSnowyWeather;
    
    return jsSnowyWeather;
}


export async function buildDotNetSnowyWeatherGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSnowyWeather: any = {};
    
    if (hasValue(jsObject.cloudCover)) {
        dotNetSnowyWeather.cloudCover = jsObject.cloudCover;
    }
    
    if (hasValue(jsObject.precipitation)) {
        dotNetSnowyWeather.precipitation = jsObject.precipitation;
    }
    
    if (hasValue(jsObject.snowCover)) {
        dotNetSnowyWeather.snowCover = removeCircularReferences(jsObject.snowCover);
    }
    
    if (hasValue(jsObject.type)) {
        dotNetSnowyWeather.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSnowyWeather.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetSnowyWeather.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetSnowyWeather.id)) {
        jsObjectRefs[dotNetSnowyWeather.id] ??= jsObject;
        arcGisObjectRefs[dotNetSnowyWeather.id] ??= jsObject;
    }

    return dotNetSnowyWeather;
}

