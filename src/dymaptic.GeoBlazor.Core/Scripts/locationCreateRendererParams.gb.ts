// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetLocationCreateRendererParams } from './locationCreateRendererParams';
import locationCreateRendererParams = __esri.locationCreateRendererParams;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsLocationCreateRendererParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jslocationCreateRendererParams: any = {}
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jslocationCreateRendererParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.colorMixMode)) {
        jslocationCreateRendererParams.colorMixMode = dotNetObject.colorMixMode;
    }
    if (hasValue(dotNetObject.forBinning)) {
        jslocationCreateRendererParams.forBinning = dotNetObject.forBinning;
    }
    if (hasValue(dotNetObject.locationScheme)) {
        jslocationCreateRendererParams.locationScheme = dotNetObject.locationScheme;
    }
    if (hasValue(dotNetObject.outlineOptimizationEnabled)) {
        jslocationCreateRendererParams.outlineOptimizationEnabled = dotNetObject.outlineOptimizationEnabled;
    }
    if (hasValue(dotNetObject.signal)) {
        jslocationCreateRendererParams.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.sizeOptimizationEnabled)) {
        jslocationCreateRendererParams.sizeOptimizationEnabled = dotNetObject.sizeOptimizationEnabled;
    }
    if (hasValue(dotNetObject.symbolType)) {
        jslocationCreateRendererParams.symbolType = dotNetObject.symbolType;
    }
    if (hasValue(dotNetObject.view)) {
        jslocationCreateRendererParams.view = dotNetObject.view;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jslocationCreateRendererParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jslocationCreateRendererParams;
    
    let dnInstantiatedObject = await buildDotNetLocationCreateRendererParams(jslocationCreateRendererParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LocationCreateRendererParams', e);
    }
    
    return jslocationCreateRendererParams;
}

export async function buildDotNetLocationCreateRendererParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLocationCreateRendererParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.colorMixMode)) {
            dotNetLocationCreateRendererParams.colorMixMode = jsObject.colorMixMode;
        }
        if (hasValue(jsObject.forBinning)) {
            dotNetLocationCreateRendererParams.forBinning = jsObject.forBinning;
        }
        if (hasValue(jsObject.locationScheme)) {
            dotNetLocationCreateRendererParams.locationScheme = jsObject.locationScheme;
        }
        if (hasValue(jsObject.outlineOptimizationEnabled)) {
            dotNetLocationCreateRendererParams.outlineOptimizationEnabled = jsObject.outlineOptimizationEnabled;
        }
        if (hasValue(jsObject.signal)) {
            dotNetLocationCreateRendererParams.signal = jsObject.signal;
        }
        if (hasValue(jsObject.sizeOptimizationEnabled)) {
            dotNetLocationCreateRendererParams.sizeOptimizationEnabled = jsObject.sizeOptimizationEnabled;
        }
        if (hasValue(jsObject.symbolType)) {
            dotNetLocationCreateRendererParams.symbolType = jsObject.symbolType;
        }
        if (hasValue(jsObject.view)) {
            dotNetLocationCreateRendererParams.view = jsObject.view;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLocationCreateRendererParams.id = k;
                break;
            }
        }
    }

    return dotNetLocationCreateRendererParams;
}

