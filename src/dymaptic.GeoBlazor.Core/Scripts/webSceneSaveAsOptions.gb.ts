// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetWebSceneSaveAsOptions } from './webSceneSaveAsOptions';

export async function buildJsWebSceneSaveAsOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsWebSceneSaveAsOptions: any = {};
    if (hasValue(dotNetObject.folder)) {
        let { buildJsPortalFolder } = await import('./portalFolder');
        jsWebSceneSaveAsOptions.folder = await buildJsPortalFolder(dotNetObject.folder) as any;
    }

    if (hasValue(dotNetObject.ignoreUnsupported)) {
        jsWebSceneSaveAsOptions.ignoreUnsupported = dotNetObject.ignoreUnsupported;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsWebSceneSaveAsOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsWebSceneSaveAsOptions;
    
    let dnInstantiatedObject = await buildDotNetWebSceneSaveAsOptions(jsWebSceneSaveAsOptions);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for WebSceneSaveAsOptions', e);
    }
    
    return jsWebSceneSaveAsOptions;
}

export async function buildDotNetWebSceneSaveAsOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWebSceneSaveAsOptions: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.folder)) {
        let { buildDotNetPortalFolder } = await import('./portalFolder');
        dotNetWebSceneSaveAsOptions.folder = await buildDotNetPortalFolder(jsObject.folder);
    }
    if (hasValue(jsObject.ignoreUnsupported)) {
        dotNetWebSceneSaveAsOptions.ignoreUnsupported = jsObject.ignoreUnsupported;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetWebSceneSaveAsOptions.id = k;
                break;
            }
        }
    }

    return dotNetWebSceneSaveAsOptions;
}

