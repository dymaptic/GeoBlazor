// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetVoxelTransferFunctionStyle } from './voxelTransferFunctionStyle';
import VoxelTransferFunctionStyle from '@arcgis/core/layers/voxel/VoxelTransferFunctionStyle';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsVoxelTransferFunctionStyleGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsVoxelTransferFunctionStyle = new VoxelTransferFunctionStyle();
    if (hasValue(dotNetObject.colorStops)) {
        let { buildJsVoxelColorStop } = await import('./voxelColorStop');
        jsVoxelTransferFunctionStyle.colorStops = await Promise.all(dotNetObject.colorStops.map(async i => await buildJsVoxelColorStop(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.opacityStops)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedOpacityStops } = dotNetObject.opacityStops;
        jsVoxelTransferFunctionStyle.opacityStops = sanitizedOpacityStops;
    }
    if (hasValue(dotNetObject.rangeFilter)) {
        jsVoxelTransferFunctionStyle.rangeFilter = dotNetObject.rangeFilter;
    }
    if (hasValue(dotNetObject.stretchRange)) {
        jsVoxelTransferFunctionStyle.stretchRange = dotNetObject.stretchRange;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsVoxelTransferFunctionStyle);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsVoxelTransferFunctionStyle;
    
    let dnInstantiatedObject = await buildDotNetVoxelTransferFunctionStyle(jsVoxelTransferFunctionStyle);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for VoxelTransferFunctionStyle', e);
    }
    
    return jsVoxelTransferFunctionStyle;
}

export async function buildDotNetVoxelTransferFunctionStyleGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVoxelTransferFunctionStyle: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.colorStops)) {
            let { buildDotNetVoxelColorStop } = await import('./voxelColorStop');
            dotNetVoxelTransferFunctionStyle.colorStops = await Promise.all(jsObject.colorStops.map(async i => await buildDotNetVoxelColorStop(i)));
        }
        if (hasValue(jsObject.opacityStops)) {
            dotNetVoxelTransferFunctionStyle.opacityStops = jsObject.opacityStops;
        }
        if (hasValue(jsObject.rangeFilter)) {
            dotNetVoxelTransferFunctionStyle.rangeFilter = jsObject.rangeFilter;
        }
        if (hasValue(jsObject.stretchRange)) {
            dotNetVoxelTransferFunctionStyle.stretchRange = jsObject.stretchRange;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetVoxelTransferFunctionStyle.id = k;
                break;
            }
        }
    }

    return dotNetVoxelTransferFunctionStyle;
}

