// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetTypeSchemes } from './typeSchemes';

export async function buildJsTypeSchemesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTypeSchemes: any = {}

    if (hasValue(dotNetObject.basemapId)) {
        jsTypeSchemes.basemapId = dotNetObject.basemapId;
    }
    if (hasValue(dotNetObject.basemapTheme)) {
        jsTypeSchemes.basemapTheme = dotNetObject.basemapTheme;
    }
    if (hasValue(dotNetObject.primaryScheme)) {
        jsTypeSchemes.primaryScheme = dotNetObject.primaryScheme;
    }
    if (hasValue(dotNetObject.secondarySchemes)) {
        jsTypeSchemes.secondarySchemes = dotNetObject.secondarySchemes;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsTypeSchemes);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTypeSchemes;
    
    let dnInstantiatedObject = await buildDotNetTypeSchemes(jsTypeSchemes);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TypeSchemes', e);
    }
    
    return jsTypeSchemes;
}

export async function buildDotNetTypeSchemesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTypeSchemes: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.basemapId)) {
        dotNetTypeSchemes.basemapId = jsObject.basemapId;
    }
    if (hasValue(jsObject.basemapTheme)) {
        dotNetTypeSchemes.basemapTheme = jsObject.basemapTheme;
    }
    if (hasValue(jsObject.primaryScheme)) {
        dotNetTypeSchemes.primaryScheme = jsObject.primaryScheme;
    }
    if (hasValue(jsObject.secondarySchemes)) {
        dotNetTypeSchemes.secondarySchemes = jsObject.secondarySchemes;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTypeSchemes.id = k;
                break;
            }
        }
    }

    return dotNetTypeSchemes;
}

