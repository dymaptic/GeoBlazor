// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import OpacityStop from '@arcgis/core/renderers/visualVariables/support/OpacityStop';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class OpacityStopGenerated implements IPropertyWrapper {
    public component: OpacityStop;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: OpacityStop) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsOpacityStopGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsOpacityStop = new OpacityStop();

    if (hasValue(dotNetObject.label)) {
        jsOpacityStop.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.opacity)) {
        jsOpacityStop.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.value)) {
        jsOpacityStop.value = dotNetObject.value;
    }
    let { default: OpacityStopWrapper } = await import('./opacityStop');
    let opacityStopWrapper = new OpacityStopWrapper(jsOpacityStop);
    opacityStopWrapper.geoBlazorId = dotNetObject.id;
    opacityStopWrapper.viewId = viewId;
    opacityStopWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(opacityStopWrapper);
    jsObjectRefs[dotNetObject.id] = opacityStopWrapper;

    arcGisObjectRefs[dotNetObject.id] = jsOpacityStop;
    let { buildDotNetOpacityStop } = await import('./opacityStop');
    let dnInstantiatedObject = await buildDotNetOpacityStop(jsOpacityStop);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for OpacityStop', e);
    }
    
    return jsOpacityStop;
}

export async function buildDotNetOpacityStopGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetOpacityStop: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.label)) {
            dotNetOpacityStop.label = jsObject.label;
        }
        if (hasValue(jsObject.opacity)) {
            dotNetOpacityStop.opacity = jsObject.opacity;
        }
        if (hasValue(jsObject.value)) {
            dotNetOpacityStop.value = jsObject.value;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetOpacityStop.id = k;
                break;
            }
        }
    }

    return dotNetOpacityStop;
}

