// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import OpacityStop from '@arcgis/core/renderers/visualVariables/support/OpacityStop';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class OpacityStopGenerated implements IPropertyWrapper {
    public component: OpacityStop;
    public readonly geoBlazorId: string = '';

    constructor(component: OpacityStop) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}
export async function buildJsOpacityStopGenerated(dotNetObject: any): Promise<any> {
    let { default: OpacityStop } = await import('@arcgis/core/renderers/visualVariables/support/OpacityStop');
    let jsOpacityStop = new OpacityStop();
    if (hasValue(dotNetObject.label)) {
        jsOpacityStop.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.opacity)) {
        jsOpacityStop.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.value)) {
        jsOpacityStop.value = dotNetObject.value;
    }
    let { default: OpacityStopWrapper } = await import('./opacityStop');
    let opacityStopWrapper = new OpacityStopWrapper(jsOpacityStop);
    jsOpacityStop.id = dotNetObject.id;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(opacityStopWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = opacityStopWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsOpacityStop;
    
    return jsOpacityStop;
}

export async function buildDotNetOpacityStopGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetOpacityStop: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetOpacityStop.label = jsObject.label;
        dotNetOpacityStop.opacity = jsObject.opacity;
        dotNetOpacityStop.value = jsObject.value;
    return dotNetOpacityStop;
}

