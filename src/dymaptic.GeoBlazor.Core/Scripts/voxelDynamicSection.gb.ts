// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import VoxelDynamicSection from '@arcgis/core/layers/voxel/VoxelDynamicSection';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetVoxelDynamicSection } from './voxelDynamicSection';

export async function buildJsVoxelDynamicSectionGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.enabled)) {
        properties.enabled = dotNetObject.enabled;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.orientation)) {
        properties.orientation = dotNetObject.orientation;
    }
    if (hasValue(dotNetObject.point) && dotNetObject.point.length > 0) {
        properties.point = dotNetObject.point;
    }
    if (hasValue(dotNetObject.tilt)) {
        properties.tilt = dotNetObject.tilt;
    }
    let jsVoxelDynamicSection = new VoxelDynamicSection(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsVoxelDynamicSection);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsVoxelDynamicSection;
    
    return jsVoxelDynamicSection;
}


export async function buildDotNetVoxelDynamicSectionGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVoxelDynamicSection: any = {};
    
    if (hasValue(jsObject.enabled)) {
        dotNetVoxelDynamicSection.enabled = jsObject.enabled;
    }
    
    if (hasValue(jsObject.label)) {
        dotNetVoxelDynamicSection.label = jsObject.label;
    }
    
    if (hasValue(jsObject.orientation)) {
        dotNetVoxelDynamicSection.orientation = jsObject.orientation;
    }
    
    if (hasValue(jsObject.point)) {
        dotNetVoxelDynamicSection.point = jsObject.point;
    }
    
    if (hasValue(jsObject.tilt)) {
        dotNetVoxelDynamicSection.tilt = jsObject.tilt;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetVoxelDynamicSection.id = geoBlazorId;
    }

    return dotNetVoxelDynamicSection;
}

