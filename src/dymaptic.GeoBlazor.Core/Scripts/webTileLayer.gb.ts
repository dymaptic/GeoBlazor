// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import WebTileLayer from '@arcgis/core/layers/WebTileLayer';
import { hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class WebTileLayerGenerated implements IPropertyWrapper {
    public layer: WebTileLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: WebTileLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    async createLayerView(view: any,
        options: any): Promise<any> {
        return await this.layer.createLayerView(view,
            options);
    }

    async fetchAttributionData(): Promise<any> {
        return await this.layer.fetchAttributionData();
    }

    async fetchTile(level: any,
        row: any,
        col: any,
        options: any): Promise<any> {
        return await this.layer.fetchTile(level,
            row,
            col,
            options);
    }

    async getTileUrl(level: any,
        row: any,
        col: any): Promise<any> {
        return this.layer.getTileUrl(level,
            row,
            col);
    }

    async refresh(): Promise<void> {
        this.layer.refresh();
    }

    // region properties
    
    async getPortalItem(): Promise<any> {
        if (!hasValue(this.layer.portalItem)) {
            return null;
        }
        
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(this.layer.portalItem);
    }
    
    async setPortalItem(value: any): Promise<void> {
        let { buildJsPortalItem } = await import('./portalItem');
        this.layer.portalItem = await  buildJsPortalItem(value, this.layerId, this.viewId);
    }
    
    async getTileInfo(): Promise<any> {
        if (!hasValue(this.layer.tileInfo)) {
            return null;
        }
        
        let { buildDotNetTileInfo } = await import('./tileInfo');
        return await buildDotNetTileInfo(this.layer.tileInfo);
    }
    
    async setTileInfo(value: any): Promise<void> {
        let { buildJsTileInfo } = await import('./tileInfo');
        this.layer.tileInfo = await  buildJsTileInfo(value, this.layerId, this.viewId);
    }
    
    async getVisibilityTimeExtent(): Promise<any> {
        if (!hasValue(this.layer.visibilityTimeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.visibilityTimeExtent);
    }
    
    async setVisibilityTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.visibilityTimeExtent = await  buildJsTimeExtent(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}

export async function buildJsWebTileLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }
    
    switch (dotNetObject.type) {
        case 'web-tile': 
            let { buildJsWebTileLayer } = await import('./webTileLayer');
            return await buildJsWebTileLayer(dotNetObject, layerId, viewId);
        case 'open-street-map': 
            let { buildJsOpenStreetMapLayer } = await import('./openStreetMapLayer');
            return await buildJsOpenStreetMapLayer(dotNetObject, layerId, viewId);
        default: 
            let { id, dotNetComponentReference, ...sanitizedDotNetObject } = dotNetObject;
            return sanitizedDotNetObject;
    }
}     

export async function buildDotNetWebTileLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    switch (jsObject.type) {
        case 'web-tile': 
            let { buildDotNetWebTileLayer } = await import('./webTileLayer');
            return await buildDotNetWebTileLayer(jsObject);
        case 'open-street-map': 
            let { buildDotNetOpenStreetMapLayer } = await import('./openStreetMapLayer');
            return await buildDotNetOpenStreetMapLayer(jsObject);
        default: 
            return jsObject;
    }
}     

