// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import BuildingComponentSublayer from '@arcgis/core/layers/buildingSublayers/BuildingComponentSublayer';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class BuildingComponentSublayerGenerated implements IPropertyWrapper {
    public component: BuildingComponentSublayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: BuildingComponentSublayer) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async createPopupTemplate(options: any): Promise<any> {
        return this.component.createPopupTemplate(options);
    }

    async createQuery(): Promise<any> {
        return this.component.createQuery();
    }

    async getField(fieldName: any): Promise<any> {
        return this.component.getField(fieldName);
    }

    async getFieldDomain(fieldName: any,
        options: any): Promise<any> {
        let { buildJsBuildingComponentSublayerGetFieldDomainOptions } = await import('./buildingComponentSublayerGetFieldDomainOptions');
        let jsOptions = await buildJsBuildingComponentSublayerGetFieldDomainOptions(options, this.layerId, this.viewId) as any;
        return this.component.getFieldDomain(fieldName,
            jsOptions);
    }

    async getFieldUsageInfo(fieldName: any): Promise<any> {
        return this.component.getFieldUsageInfo(fieldName);
    }

    async queryExtent(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.component.queryExtent(jsQuery,
            options);
    }

    async queryFeatureCount(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.component.queryFeatureCount(jsQuery,
            options);
    }

    async queryFeatures(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.component.queryFeatures(jsQuery,
            options);
    }

    async queryObjectIds(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.component.queryObjectIds(jsQuery,
            options);
    }

    // region properties
    
    async getPopupTemplate(): Promise<any> {
        if (!hasValue(this.component.popupTemplate)) {
            return null;
        }
        
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        return await buildDotNetPopupTemplate(this.component.popupTemplate);
    }
    async setPopupTemplate(value: any): Promise<void> {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        this.component.popupTemplate =  buildJsPopupTemplate(value, this.layerId, this.viewId);
    }
    async getRenderer(): Promise<any> {
        if (!hasValue(this.component.renderer)) {
            return null;
        }
        
        let { buildDotNetRenderer } = await import('./renderer');
        return await buildDotNetRenderer(this.component.renderer);
    }
    async setRenderer(value: any): Promise<void> {
        let { buildJsRenderer } = await import('./renderer');
        this.component.renderer = await  buildJsRenderer(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsBuildingComponentSublayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsBuildingComponentSublayer = new BuildingComponentSublayer();
    if (hasValue(dotNetObject.popupTemplate)) {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        jsBuildingComponentSublayer.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsRenderer } = await import('./renderer');
        jsBuildingComponentSublayer.renderer = await buildJsRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.definitionExpression)) {
        jsBuildingComponentSublayer.definitionExpression = dotNetObject.definitionExpression;
    }
    if (hasValue(dotNetObject.listMode)) {
        jsBuildingComponentSublayer.listMode = dotNetObject.listMode;
    }
    if (hasValue(dotNetObject.opacity)) {
        jsBuildingComponentSublayer.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.outFields)) {
        jsBuildingComponentSublayer.outFields = dotNetObject.outFields;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        jsBuildingComponentSublayer.popupEnabled = dotNetObject.popupEnabled;
    }
    if (hasValue(dotNetObject.title)) {
        jsBuildingComponentSublayer.title = dotNetObject.title;
    }

    let { default: BuildingComponentSublayerWrapper } = await import('./buildingComponentSublayer');
    let buildingComponentSublayerWrapper = new BuildingComponentSublayerWrapper(jsBuildingComponentSublayer);
    buildingComponentSublayerWrapper.geoBlazorId = dotNetObject.id;
    buildingComponentSublayerWrapper.viewId = viewId;
    buildingComponentSublayerWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(buildingComponentSublayerWrapper);
    jsObjectRefs[dotNetObject.id] = buildingComponentSublayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsBuildingComponentSublayer;
    let { buildDotNetBuildingComponentSublayer } = await import('./buildingComponentSublayer');
    let dnInstantiatedObject = await buildDotNetBuildingComponentSublayer(jsBuildingComponentSublayer);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BuildingComponentSublayer', e);
    }
    
    return jsBuildingComponentSublayer;
}
export async function buildDotNetBuildingComponentSublayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBuildingComponentSublayer: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.popupTemplate)) {
            let { buildDotNetPopupTemplate } = await import('./popupTemplate');
            dotNetBuildingComponentSublayer.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
        }
        if (hasValue(jsObject.renderer)) {
            let { buildDotNetRenderer } = await import('./renderer');
            dotNetBuildingComponentSublayer.renderer = await buildDotNetRenderer(jsObject.renderer);
        }
        if (hasValue(jsObject.id)) {
            dotNetBuildingComponentSublayer.buildingSublayerId = jsObject.id;
        }
        if (hasValue(jsObject.definitionExpression)) {
            dotNetBuildingComponentSublayer.definitionExpression = jsObject.definitionExpression;
        }
        if (hasValue(jsObject.isEmpty)) {
            dotNetBuildingComponentSublayer.isEmpty = jsObject.isEmpty;
        }
        if (hasValue(jsObject.listMode)) {
            dotNetBuildingComponentSublayer.listMode = jsObject.listMode;
        }
        if (hasValue(jsObject.modelName)) {
            dotNetBuildingComponentSublayer.modelName = jsObject.modelName;
        }
        if (hasValue(jsObject.opacity)) {
            dotNetBuildingComponentSublayer.opacity = jsObject.opacity;
        }
        if (hasValue(jsObject.outFields)) {
            dotNetBuildingComponentSublayer.outFields = jsObject.outFields;
        }
        if (hasValue(jsObject.popupEnabled)) {
            dotNetBuildingComponentSublayer.popupEnabled = jsObject.popupEnabled;
        }
        if (hasValue(jsObject.title)) {
            dotNetBuildingComponentSublayer.title = jsObject.title;
        }
        if (hasValue(jsObject.type)) {
            dotNetBuildingComponentSublayer.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetBuildingComponentSublayer.id = k;
                break;
            }
        }
    }

    return dotNetBuildingComponentSublayer;
}

