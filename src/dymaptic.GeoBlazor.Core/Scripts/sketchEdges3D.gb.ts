// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import SketchEdges3D from '@arcgis/core/symbols/edges/SketchEdges3D';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetSketchEdges3D } from './sketchEdges3D';

export async function buildJsSketchEdges3DGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        properties.color = buildJsMapColor(dotNetObject.color) as any;
    }

    if (hasValue(dotNetObject.extensionLength)) {
        properties.extensionLength = dotNetObject.extensionLength;
    }
    if (hasValue(dotNetObject.size)) {
        properties.size = dotNetObject.size;
    }
    let jsSketchEdges3D = new SketchEdges3D(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSketchEdges3D);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSketchEdges3D;
    
    let { buildDotNetSketchEdges3D } = await import('./sketchEdges3D');
    let dnInstantiatedObject = await buildDotNetSketchEdges3D(jsSketchEdges3D);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type SketchEdges3D detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SketchEdges3D', e);
    }
    
    return jsSketchEdges3D;
}


export async function buildDotNetSketchEdges3DGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSketchEdges3D: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.color)) {
        let { buildDotNetMapColor } = await import('./mapColor');
        dotNetSketchEdges3D.color = buildDotNetMapColor(jsObject.color);
    }
    if (hasValue(jsObject.extensionLength)) {
        dotNetSketchEdges3D.extensionLength = jsObject.extensionLength;
    }
    if (hasValue(jsObject.size)) {
        dotNetSketchEdges3D.size = jsObject.size;
    }
    if (hasValue(jsObject.type)) {
        dotNetSketchEdges3D.type = jsObject.type;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSketchEdges3D.id = geoBlazorId;
    }

    return dotNetSketchEdges3D;
}

