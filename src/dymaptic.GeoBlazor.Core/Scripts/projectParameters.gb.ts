import {buildDotNetProjectParameters} from './projectParameters';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import ProjectParameters from '@arcgis/core/rest/support/ProjectParameters';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsProjectParametersGenerated(dotNetObject: any): Promise<any> {
    let jsProjectParameters = new ProjectParameters();
    if (hasValue(dotNetObject.geometries)) {
        let {buildJsGeometry} = await import('./geometry');
        jsProjectParameters.geometries = dotNetObject.geometries.map(i => buildJsGeometry(i)) as any;
    }
    if (hasValue(dotNetObject.outSpatialReference)) {
        let {buildJsSpatialReference} = await import('./spatialReference');
        jsProjectParameters.outSpatialReference = buildJsSpatialReference(dotNetObject.outSpatialReference) as any;
    }

    if (hasValue(dotNetObject.transformation)) {
        const {id, dotNetComponentReference, layerId, viewId, ...sanitizedTransformation} = dotNetObject.transformation;
        jsProjectParameters.transformation = sanitizedTransformation;
    }
    if (hasValue(dotNetObject.transformForward)) {
        jsProjectParameters.transformForward = dotNetObject.transformForward;
    }

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsProjectParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsProjectParameters;

    let dnInstantiatedObject = await buildDotNetProjectParameters(jsProjectParameters);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ProjectParameters', e);
    }

    return jsProjectParameters;
}

export async function buildDotNetProjectParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetProjectParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.geometries)) {
        let {buildDotNetGeometry} = await import('./geometry');
        dotNetProjectParameters.geometries = jsObject.geometries.map(i => buildDotNetGeometry(i));
    }
    if (hasValue(jsObject.outSpatialReference)) {
        let {buildDotNetSpatialReference} = await import('./spatialReference');
        dotNetProjectParameters.outSpatialReference = buildDotNetSpatialReference(jsObject.outSpatialReference);
    }
    if (hasValue(jsObject.transformation)) {
        dotNetProjectParameters.transformation = jsObject.transformation;
    }
    if (hasValue(jsObject.transformForward)) {
        dotNetProjectParameters.transformForward = jsObject.transformForward;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetProjectParameters.id = k;
                break;
            }
        }
    }

    return dotNetProjectParameters;
}

