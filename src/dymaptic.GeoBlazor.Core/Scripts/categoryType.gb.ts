// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import type = __esri.type;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CategoryTypeGenerated implements IPropertyWrapper {
    public component: type;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: type) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async createPCClassRenderer(parameters: any): Promise<any> {
        let { buildJsTypeCreatePCClassRendererParams } = await import('./typeCreatePCClassRendererParams');
        let jsparameters = await buildJsTypeCreatePCClassRendererParams(parameters, this.layerId, this.viewId) as any;
        return await this.component.createPCClassRenderer(jsparameters);
    }

    async createRenderer(parameters: any): Promise<any> {
        let { buildJsTypeCreateRendererParams } = await import('./typeCreateRendererParams');
        let jsparameters = await buildJsTypeCreateRendererParams(parameters, this.layerId, this.viewId) as any;
        return await this.component.createRenderer(jsparameters);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsCategoryTypeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jstype: any = {}


    let { default: CategoryTypeWrapper } = await import('./categoryType');
    let categoryTypeWrapper = new CategoryTypeWrapper(jstype);
    categoryTypeWrapper.geoBlazorId = dotNetObject.id;
    categoryTypeWrapper.viewId = viewId;
    categoryTypeWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(categoryTypeWrapper);
    jsObjectRefs[dotNetObject.id] = categoryTypeWrapper;
    arcGisObjectRefs[dotNetObject.id] = jstype;
    let { buildDotNetCategoryType } = await import('./categoryType');
    let dnInstantiatedObject = await buildDotNetCategoryType(jstype);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CategoryType', e);
    }
    
    return jstype;
}
export async function buildDotNetCategoryTypeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCategoryType: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCategoryType.id = k;
                break;
            }
        }
    }

    return dotNetCategoryType;
}

