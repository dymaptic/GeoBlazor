// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import devEnvironmentUtils = __esri.devEnvironmentUtils;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class DevEnvironmentUtilsGenerated implements IPropertyWrapper {
    public component: devEnvironmentUtils;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: devEnvironmentUtils) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async adjustStaticAGOUrl(url: any,
        hostname: any): Promise<any> {
        return this.component.adjustStaticAGOUrl(url,
            hostname);
    }

    async isDevEnvironment(hostname: any): Promise<any> {
        return this.component.isDevEnvironment(hostname);
    }

    async isTelemetryDevEnvironment(hostname: any): Promise<any> {
        return this.component.isTelemetryDevEnvironment(hostname);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsDevEnvironmentUtilsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsdevEnvironmentUtils: any = {}


    let { default: DevEnvironmentUtilsWrapper } = await import('./devEnvironmentUtils');
    let devEnvironmentUtilsWrapper = new DevEnvironmentUtilsWrapper(jsdevEnvironmentUtils);
    devEnvironmentUtilsWrapper.geoBlazorId = dotNetObject.id;
    devEnvironmentUtilsWrapper.viewId = viewId;
    devEnvironmentUtilsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(devEnvironmentUtilsWrapper);
    jsObjectRefs[dotNetObject.id] = devEnvironmentUtilsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsdevEnvironmentUtils;
    let { buildDotNetDevEnvironmentUtils } = await import('./devEnvironmentUtils');
    let dnInstantiatedObject = await buildDotNetDevEnvironmentUtils(jsdevEnvironmentUtils);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DevEnvironmentUtils', e);
    }
    
    return jsdevEnvironmentUtils;
}

export async function buildDotNetDevEnvironmentUtilsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDevEnvironmentUtils: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetDevEnvironmentUtils.id = k;
                break;
            }
        }
    }

    return dotNetDevEnvironmentUtils;
}

