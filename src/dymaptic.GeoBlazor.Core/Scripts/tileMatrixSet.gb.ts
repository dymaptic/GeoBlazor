// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import TileMatrixSet from '@arcgis/core/layers/support/TileMatrixSet';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetTileMatrixSet } from './tileMatrixSet';

export async function buildJsTileMatrixSetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.tileInfo)) {
        let { buildJsTileInfo } = await import('./tileInfo');
        properties.tileInfo = await buildJsTileInfo(dotNetObject.tileInfo, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.fullExtent)) {
        const { id, dotNetComponentReference, ...sanitizedFullExtent } = dotNetObject.fullExtent;
        properties.fullExtent = sanitizedFullExtent;
    }
    if (hasValue(dotNetObject.tileMatrixSetId)) {
        properties.id = dotNetObject.tileMatrixSetId;
    }
    let jsTileMatrixSet = new TileMatrixSet(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsTileMatrixSet);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTileMatrixSet;
    
    let { buildDotNetTileMatrixSet } = await import('./tileMatrixSet');
    let dnInstantiatedObject = await buildDotNetTileMatrixSet(jsTileMatrixSet);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type TileMatrixSet detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TileMatrixSet', e);
    }
    
    return jsTileMatrixSet;
}


export async function buildDotNetTileMatrixSetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTileMatrixSet: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.tileInfo)) {
        let { buildDotNetTileInfo } = await import('./tileInfo');
        dotNetTileMatrixSet.tileInfo = await buildDotNetTileInfo(jsObject.tileInfo);
    }
    if (hasValue(jsObject.fullExtent)) {
        dotNetTileMatrixSet.fullExtent = jsObject.fullExtent;
    }
    if (hasValue(jsObject.id)) {
        dotNetTileMatrixSet.tileMatrixSetId = jsObject.id;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTileMatrixSet.id = k;
                break;
            }
        }
    }

    return dotNetTileMatrixSet;
}

