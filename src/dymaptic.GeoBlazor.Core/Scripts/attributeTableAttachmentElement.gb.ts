// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import AttributeTableAttachmentElement from '@arcgis/core/tables/elements/AttributeTableAttachmentElement';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetAttributeTableAttachmentElement } from './attributeTableAttachmentElement';

export async function buildJsAttributeTableAttachmentElementGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.description)) {
        properties.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.displayType)) {
        properties.displayType = dotNetObject.displayType;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    let jsAttributeTableAttachmentElement = new AttributeTableAttachmentElement(properties);
    
    jsObjectRefs[dotNetObject.id] = jsAttributeTableAttachmentElement;
    arcGisObjectRefs[dotNetObject.id] = jsAttributeTableAttachmentElement;
    
    return jsAttributeTableAttachmentElement;
}


export async function buildDotNetAttributeTableAttachmentElementGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAttributeTableAttachmentElement: any = {};
    
    if (hasValue(jsObject.description)) {
        dotNetAttributeTableAttachmentElement.description = jsObject.description;
    }
    
    if (hasValue(jsObject.displayType)) {
        dotNetAttributeTableAttachmentElement.displayType = jsObject.displayType;
    }
    
    if (hasValue(jsObject.label)) {
        dotNetAttributeTableAttachmentElement.label = jsObject.label;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetAttributeTableAttachmentElement.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetAttributeTableAttachmentElement.id = geoBlazorId;
    }

    return dotNetAttributeTableAttachmentElement;
}

