// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import DateTimePickerInput from '@arcgis/core/form/elements/inputs/DateTimePickerInput';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetDateTimePickerInput } from './dateTimePickerInput';

export async function buildJsDateTimePickerInputGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.includeTime)) {
        properties.includeTime = dotNetObject.includeTime;
    }
    if (hasValue(dotNetObject.max)) {
        properties.max = dotNetObject.max;
    }
    if (hasValue(dotNetObject.min)) {
        properties.min = dotNetObject.min;
    }
    let jsDateTimePickerInput = new DateTimePickerInput(properties);
    
    jsObjectRefs[dotNetObject.id] = jsDateTimePickerInput;
    arcGisObjectRefs[dotNetObject.id] = jsDateTimePickerInput;
    
    return jsDateTimePickerInput;
}


export async function buildDotNetDateTimePickerInputGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDateTimePickerInput: any = {};
    
    if (hasValue(jsObject.includeTime)) {
        dotNetDateTimePickerInput.includeTime = jsObject.includeTime;
    }
    
    if (hasValue(jsObject.max)) {
        dotNetDateTimePickerInput.max = jsObject.max;
    }
    
    if (hasValue(jsObject.min)) {
        dotNetDateTimePickerInput.min = jsObject.min;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetDateTimePickerInput.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetDateTimePickerInput.id = geoBlazorId;
    }

    return dotNetDateTimePickerInput;
}

