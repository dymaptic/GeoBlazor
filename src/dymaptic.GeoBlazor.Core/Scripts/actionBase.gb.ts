// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import ActionBase from '@arcgis/core/support/actions/ActionBase';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ActionBaseGenerated implements IPropertyWrapper {
    public component: ActionBase;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ActionBase) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsActionBaseGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let { default: ActionBase } = await import('@arcgis/core/support/actions/ActionBase');
    let jsActionBase = new ActionBase();
    if (hasValue(dotNetObject.actionId)) {
        jsActionBase.id = dotNetObject.actionId;
    }
    if (hasValue(dotNetObject.active)) {
        jsActionBase.active = dotNetObject.active;
    }
    if (hasValue(dotNetObject.className)) {
        jsActionBase.className = dotNetObject.className;
    }
    if (hasValue(dotNetObject.disabled)) {
        jsActionBase.disabled = dotNetObject.disabled;
    }
    if (hasValue(dotNetObject.icon)) {
        jsActionBase.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.title)) {
        jsActionBase.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.type)) {
        jsActionBase.type = dotNetObject.type;
    }
    let { default: ActionBaseWrapper } = await import('./actionBase');
    let actionBaseWrapper = new ActionBaseWrapper(jsActionBase);
    actionBaseWrapper.geoBlazorId = dotNetObject.id;
    actionBaseWrapper.viewId = viewId;
    actionBaseWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(actionBaseWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = actionBaseWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsActionBase;
    
    return jsActionBase;
}

export async function buildDotNetActionBaseGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetActionBase: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetActionBase.actionId = jsObject.id;
        dotNetActionBase.active = jsObject.active;
        dotNetActionBase.className = jsObject.className;
        dotNetActionBase.disabled = jsObject.disabled;
        dotNetActionBase.icon = jsObject.icon;
        dotNetActionBase.title = jsObject.title;
        dotNetActionBase.type = jsObject.type;
    return dotNetActionBase;
}

