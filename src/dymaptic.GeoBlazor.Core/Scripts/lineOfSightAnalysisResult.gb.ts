import { buildDotNetLineOfSightAnalysisResult } from './lineOfSightAnalysisResult';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import LineOfSightAnalysisResult = __esri.LineOfSightAnalysisResult;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsLineOfSightAnalysisResultGenerated(dotNetObject: any): Promise<any> {
    let jsLineOfSightAnalysisResult = new LineOfSightAnalysisResult();
    if (hasValue(dotNetObject.target)) {
        let { buildJsLineOfSightAnalysisTarget } = await import('./lineOfSightAnalysisTarget');
        jsLineOfSightAnalysisResult.target = await buildJsLineOfSightAnalysisTarget(dotNetObject.target, layerId, viewId) as any;
    }

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsLineOfSightAnalysisResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLineOfSightAnalysisResult;
    
    let dnInstantiatedObject = await buildDotNetLineOfSightAnalysisResult(jsLineOfSightAnalysisResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LineOfSightAnalysisResult', e);
    }
    
    return jsLineOfSightAnalysisResult;
}
export async function buildDotNetLineOfSightAnalysisResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLineOfSightAnalysisResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.intersectedGraphic)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetLineOfSightAnalysisResult.intersectedGraphic = buildDotNetGraphic(jsObject.intersectedGraphic, layerId, viewId);
        }
        if (hasValue(jsObject.intersectedLocation)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetLineOfSightAnalysisResult.intersectedLocation = buildDotNetPoint(jsObject.intersectedLocation);
        }
        if (hasValue(jsObject.target)) {
            let { buildDotNetLineOfSightAnalysisTarget } = await import('./lineOfSightAnalysisTarget');
            dotNetLineOfSightAnalysisResult.target = await buildDotNetLineOfSightAnalysisTarget(jsObject.target);
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLineOfSightAnalysisResult.id = k;
                break;
            }
        }
    }

    return dotNetLineOfSightAnalysisResult;
}

