// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import CodedValueDomain from '@arcgis/core/layers/support/CodedValueDomain';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CodedValueDomainGenerated implements IPropertyWrapper {
    public component: CodedValueDomain;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: CodedValueDomain) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async getName(code: any): Promise<any> {
        return this.component.getName(code);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsCodedValueDomainGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.codedValues)) {
        properties.codedValues = dotNetObject.codedValues;
    }
    if (hasValue(dotNetObject.name)) {
        properties.name = dotNetObject.name;
    }
    let jsCodedValueDomain = new CodedValueDomain(properties);

    let { default: CodedValueDomainWrapper } = await import('./codedValueDomain');
    let codedValueDomainWrapper = new CodedValueDomainWrapper(jsCodedValueDomain);
    codedValueDomainWrapper.geoBlazorId = dotNetObject.id;
    codedValueDomainWrapper.viewId = viewId;
    codedValueDomainWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(codedValueDomainWrapper);
    jsObjectRefs[dotNetObject.id] = codedValueDomainWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsCodedValueDomain;
    
    let { buildDotNetCodedValueDomain } = await import('./codedValueDomain');
    let dnInstantiatedObject = await buildDotNetCodedValueDomain(jsCodedValueDomain);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type CodedValueDomain detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CodedValueDomain', e);
    }
    
    return jsCodedValueDomain;
}


export async function buildDotNetCodedValueDomainGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCodedValueDomain: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.codedValues)) {
        dotNetCodedValueDomain.codedValues = jsObject.codedValues;
    }
    if (hasValue(jsObject.name)) {
        dotNetCodedValueDomain.name = jsObject.name;
    }
    if (hasValue(jsObject.type)) {
        dotNetCodedValueDomain.type = jsObject.type;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCodedValueDomain.id = geoBlazorId;
    }

    return dotNetCodedValueDomain;
}

