// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import CodedValueDomain from '@arcgis/core/layers/support/CodedValueDomain';
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CodedValueDomainGenerated implements IPropertyWrapper {
    public component: CodedValueDomain;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: CodedValueDomain) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {

        if (hasValue(dotNetObject.codedValues) && dotNetObject.codedValues.length > 0) {
            this.component.codedValues = dotNetObject.codedValues;
        }
        if (hasValue(dotNetObject.name)) {
            this.component.name = dotNetObject.name;
        }
    }
    
    async getName(code: any): Promise<any> {
        return this.component.getName(code);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsCodedValueDomainGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.codedValues) && dotNetObject.codedValues.length > 0) {
        properties.codedValues = dotNetObject.codedValues;
    }
    if (hasValue(dotNetObject.name)) {
        properties.name = dotNetObject.name;
    }
    let jsCodedValueDomain = new CodedValueDomain(properties);

    let { default: CodedValueDomainWrapper } = await import('./codedValueDomain');
    let codedValueDomainWrapper = new CodedValueDomainWrapper(jsCodedValueDomain);
    codedValueDomainWrapper.geoBlazorId = dotNetObject.id;
    codedValueDomainWrapper.viewId = viewId;
    codedValueDomainWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(codedValueDomainWrapper);
    jsObjectRefs[dotNetObject.id] = codedValueDomainWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsCodedValueDomain;
    
    return jsCodedValueDomain;
}


export async function buildDotNetCodedValueDomainGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCodedValueDomain: any = {};
    
    if (hasValue(jsObject.codedValues)) {
        dotNetCodedValueDomain.codedValues = removeCircularReferences(jsObject.codedValues);
    }
    
    if (hasValue(jsObject.name)) {
        dotNetCodedValueDomain.name = jsObject.name;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetCodedValueDomain.type = removeCircularReferences(jsObject.type);
    }
    

    return dotNetCodedValueDomain;
}

