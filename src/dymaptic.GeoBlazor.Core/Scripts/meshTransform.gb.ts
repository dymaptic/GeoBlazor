// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import MeshTransform from '@arcgis/core/geometry/support/MeshTransform';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class MeshTransformGenerated implements IPropertyWrapper {
    public component: MeshTransform;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: MeshTransform) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsMeshTransformGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsMeshTransform = new MeshTransform();

    if (hasValue(dotNetObject.rotationAngle)) {
        jsMeshTransform.rotationAngle = dotNetObject.rotationAngle;
    }
    if (hasValue(dotNetObject.rotationAxis)) {
        jsMeshTransform.rotationAxis = dotNetObject.rotationAxis;
    }
    if (hasValue(dotNetObject.scale)) {
        jsMeshTransform.scale = dotNetObject.scale;
    }
    if (hasValue(dotNetObject.translation)) {
        jsMeshTransform.translation = dotNetObject.translation;
    }
    let { default: MeshTransformWrapper } = await import('./meshTransform');
    let meshTransformWrapper = new MeshTransformWrapper(jsMeshTransform);
    meshTransformWrapper.geoBlazorId = dotNetObject.id;
    meshTransformWrapper.viewId = viewId;
    meshTransformWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(meshTransformWrapper);
    jsObjectRefs[dotNetObject.id] = meshTransformWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsMeshTransform;
    
    let { buildDotNetMeshTransform } = await import('./meshTransform');
    let dnInstantiatedObject = await buildDotNetMeshTransform(jsMeshTransform, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for MeshTransform', e);
    }
    
    return jsMeshTransform;
}

export async function buildDotNetMeshTransformGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMeshTransform: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.rotationAngle)) {
            dotNetMeshTransform.rotationAngle = jsObject.rotationAngle;
        }
        if (hasValue(jsObject.rotationAxis)) {
            dotNetMeshTransform.rotationAxis = jsObject.rotationAxis;
        }
        if (hasValue(jsObject.scale)) {
            dotNetMeshTransform.scale = jsObject.scale;
        }
        if (hasValue(jsObject.translation)) {
            dotNetMeshTransform.translation = jsObject.translation;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetMeshTransform.id = k;
                break;
            }
        }
    }

    return dotNetMeshTransform;
}

