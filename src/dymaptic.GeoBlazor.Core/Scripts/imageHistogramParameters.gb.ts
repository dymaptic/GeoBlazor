// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageHistogramParameters from '@arcgis/core/rest/support/ImageHistogramParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetImageHistogramParameters } from './imageHistogramParameters';

export async function buildJsImageHistogramParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsImageHistogramParameters = new ImageHistogramParameters();
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsGeometry } = await import('./geometry');
        jsImageHistogramParameters.geometry = buildJsGeometry(dotNetObject.geometry) as any;
    }
    if (hasValue(dotNetObject.mosaicRule)) {
        let { buildJsMosaicRule } = await import('./mosaicRule');
        jsImageHistogramParameters.mosaicRule = await buildJsMosaicRule(dotNetObject.mosaicRule, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        jsImageHistogramParameters.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.pixelSize)) {
        jsImageHistogramParameters.pixelSize = dotNetObject.pixelSize;
    }
    if (hasValue(dotNetObject.rasterFunction)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedRasterFunction } = dotNetObject.rasterFunction;
        jsImageHistogramParameters.rasterFunction = sanitizedRasterFunction;
    }
    if (hasValue(dotNetObject.renderingRule)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedRenderingRule } = dotNetObject.renderingRule;
        jsImageHistogramParameters.renderingRule = sanitizedRenderingRule;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsImageHistogramParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageHistogramParameters;
    
    let dnInstantiatedObject = await buildDotNetImageHistogramParameters(jsImageHistogramParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImageHistogramParameters', e);
    }
    
    return jsImageHistogramParameters;
}

export async function buildDotNetImageHistogramParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageHistogramParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.geometry)) {
            let { buildDotNetGeometry } = await import('./geometry');
            dotNetImageHistogramParameters.geometry = buildDotNetGeometry(jsObject.geometry);
        }
        if (hasValue(jsObject.mosaicRule)) {
            let { buildDotNetMosaicRule } = await import('./mosaicRule');
            dotNetImageHistogramParameters.mosaicRule = await buildDotNetMosaicRule(jsObject.mosaicRule);
        }
        if (hasValue(jsObject.timeExtent)) {
            let { buildDotNetTimeExtent } = await import('./timeExtent');
            dotNetImageHistogramParameters.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
        }
        if (hasValue(jsObject.pixelSize)) {
            dotNetImageHistogramParameters.pixelSize = jsObject.pixelSize;
        }
        if (hasValue(jsObject.rasterFunction)) {
            dotNetImageHistogramParameters.rasterFunction = jsObject.rasterFunction;
        }
        if (hasValue(jsObject.renderingRule)) {
            dotNetImageHistogramParameters.renderingRule = jsObject.renderingRule;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImageHistogramParameters.id = k;
                break;
            }
        }
    }

    return dotNetImageHistogramParameters;
}

