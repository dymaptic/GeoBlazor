// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageHistogramParameters from '@arcgis/core/rest/support/ImageHistogramParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetImageHistogramParameters } from './imageHistogramParameters';

export async function buildJsImageHistogramParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsGeometry } = await import('./geometry');
        properties.geometry = buildJsGeometry(dotNetObject.geometry) as any;
    }
    if (hasValue(dotNetObject.mosaicRule)) {
        let { buildJsMosaicRule } = await import('./mosaicRule');
        properties.mosaicRule = await buildJsMosaicRule(dotNetObject.mosaicRule) as any;
    }
    if (hasValue(dotNetObject.rasterFunction)) {
        let { buildJsRasterFunction } = await import('./rasterFunction');
        properties.rasterFunction = await buildJsRasterFunction(dotNetObject.rasterFunction) as any;
    }
    if (hasValue(dotNetObject.renderingRule)) {
        let { buildJsRasterFunction } = await import('./rasterFunction');
        properties.renderingRule = await buildJsRasterFunction(dotNetObject.renderingRule) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent) as any;
    }

    if (hasValue(dotNetObject.pixelSize)) {
        properties.pixelSize = dotNetObject.pixelSize;
    }
    let jsImageHistogramParameters = new ImageHistogramParameters(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsImageHistogramParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageHistogramParameters;
    
    return jsImageHistogramParameters;
}


export async function buildDotNetImageHistogramParametersGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageHistogramParameters: any = {};
    
    if (hasValue(jsObject.geometry)) {
        let { buildDotNetGeometry } = await import('./geometry');
        dotNetImageHistogramParameters.geometry = buildDotNetGeometry(jsObject.geometry);
    }
    
    if (hasValue(jsObject.mosaicRule)) {
        let { buildDotNetMosaicRule } = await import('./mosaicRule');
        dotNetImageHistogramParameters.mosaicRule = await buildDotNetMosaicRule(jsObject.mosaicRule);
    }
    
    if (hasValue(jsObject.rasterFunction)) {
        let { buildDotNetRasterFunction } = await import('./rasterFunction');
        dotNetImageHistogramParameters.rasterFunction = await buildDotNetRasterFunction(jsObject.rasterFunction);
    }
    
    if (hasValue(jsObject.timeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetImageHistogramParameters.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
    }
    
    if (hasValue(jsObject.pixelSize)) {
        dotNetImageHistogramParameters.pixelSize = removeCircularReferences(jsObject.pixelSize);
    }
    

    return dotNetImageHistogramParameters;
}

