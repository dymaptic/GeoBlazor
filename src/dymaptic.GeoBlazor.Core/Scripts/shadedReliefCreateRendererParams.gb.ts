// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetShadedReliefCreateRendererParams } from './shadedReliefCreateRendererParams';
import shadedReliefCreateRendererParams = __esri.shadedReliefCreateRendererParams;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsShadedReliefCreateRendererParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsshadedReliefCreateRendererParams: any = {}
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsshadedReliefCreateRendererParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.colorRamp)) {
        jsshadedReliefCreateRendererParams.colorRamp = dotNetObject.colorRamp;
    }
    if (hasValue(dotNetObject.hillshadeType)) {
        jsshadedReliefCreateRendererParams.hillshadeType = dotNetObject.hillshadeType;
    }
    if (hasValue(dotNetObject.rasterFunction)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedRasterFunction } = dotNetObject.rasterFunction;
        jsshadedReliefCreateRendererParams.rasterFunction = sanitizedRasterFunction;
    }
    if (hasValue(dotNetObject.renderingRule)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedRenderingRule } = dotNetObject.renderingRule;
        jsshadedReliefCreateRendererParams.renderingRule = sanitizedRenderingRule;
    }
    if (hasValue(dotNetObject.scalingType)) {
        jsshadedReliefCreateRendererParams.scalingType = dotNetObject.scalingType;
    }
    if (hasValue(dotNetObject.signal)) {
        jsshadedReliefCreateRendererParams.signal = dotNetObject.signal;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsshadedReliefCreateRendererParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsshadedReliefCreateRendererParams;
    
    let dnInstantiatedObject = await buildDotNetShadedReliefCreateRendererParams(jsshadedReliefCreateRendererParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ShadedReliefCreateRendererParams', e);
    }
    
    return jsshadedReliefCreateRendererParams;
}

export async function buildDotNetShadedReliefCreateRendererParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetShadedReliefCreateRendererParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.colorRamp)) {
            dotNetShadedReliefCreateRendererParams.colorRamp = jsObject.colorRamp;
        }
        if (hasValue(jsObject.hillshadeType)) {
            dotNetShadedReliefCreateRendererParams.hillshadeType = jsObject.hillshadeType;
        }
        if (hasValue(jsObject.rasterFunction)) {
            dotNetShadedReliefCreateRendererParams.rasterFunction = jsObject.rasterFunction;
        }
        if (hasValue(jsObject.renderingRule)) {
            dotNetShadedReliefCreateRendererParams.renderingRule = jsObject.renderingRule;
        }
        if (hasValue(jsObject.scalingType)) {
            dotNetShadedReliefCreateRendererParams.scalingType = jsObject.scalingType;
        }
        if (hasValue(jsObject.signal)) {
            dotNetShadedReliefCreateRendererParams.signal = jsObject.signal;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetShadedReliefCreateRendererParams.id = k;
                break;
            }
        }
    }

    return dotNetShadedReliefCreateRendererParams;
}

