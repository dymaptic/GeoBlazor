// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import BasemapToggleVisibleElements = __esri.BasemapToggleVisibleElements;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class BasemapToggleVisibleElementsGenerated implements IPropertyWrapper {
    public component: BasemapToggleVisibleElements;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: BasemapToggleVisibleElements) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsBasemapToggleVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsBasemapToggleVisibleElements: any = {}

    if (hasValue(dotNetObject.title)) {
        jsBasemapToggleVisibleElements.title = dotNetObject.title;
    }
    let { default: BasemapToggleVisibleElementsWrapper } = await import('./basemapToggleVisibleElements');
    let basemapToggleVisibleElementsWrapper = new BasemapToggleVisibleElementsWrapper(jsBasemapToggleVisibleElements);
    basemapToggleVisibleElementsWrapper.geoBlazorId = dotNetObject.id;
    basemapToggleVisibleElementsWrapper.viewId = viewId;
    basemapToggleVisibleElementsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(basemapToggleVisibleElementsWrapper);
    jsObjectRefs[dotNetObject.id] = basemapToggleVisibleElementsWrapper;

    arcGisObjectRefs[dotNetObject.id] = jsBasemapToggleVisibleElements;
    let { buildDotNetBasemapToggleVisibleElements } = await import('./basemapToggleVisibleElements');
    let dnInstantiatedObject = await buildDotNetBasemapToggleVisibleElements(jsBasemapToggleVisibleElements, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BasemapToggleVisibleElements', e);
    }
    
    return jsBasemapToggleVisibleElements;
}

export async function buildDotNetBasemapToggleVisibleElementsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBasemapToggleVisibleElements: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.title)) {
            dotNetBasemapToggleVisibleElements.title = jsObject.title;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetBasemapToggleVisibleElements.id = k;
                break;
            }
        }
    }

    return dotNetBasemapToggleVisibleElements;
}

