// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import styleUtils = __esri.styleUtils;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class StyleUtilsGenerated implements IPropertyWrapper {
    public component: styleUtils;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: styleUtils) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async symbolUrlFromStyleItem(item: any,
        type: any,
        typePriorities: any): Promise<any> {
        return this.component.symbolUrlFromStyleItem(item,
            type,
            typePriorities);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsStyleUtilsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsstyleUtils: any = {};


    let { default: StyleUtilsWrapper } = await import('./styleUtils');
    let styleUtilsWrapper = new StyleUtilsWrapper(jsstyleUtils);
    styleUtilsWrapper.geoBlazorId = dotNetObject.id;
    styleUtilsWrapper.viewId = viewId;
    styleUtilsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(styleUtilsWrapper);
    jsObjectRefs[dotNetObject.id] = styleUtilsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsstyleUtils;
    let { buildDotNetStyleUtils } = await import('./styleUtils');
    let dnInstantiatedObject = await buildDotNetStyleUtils(jsstyleUtils);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for StyleUtils', e);
    }
    
    return jsstyleUtils;
}

export async function buildDotNetStyleUtilsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetStyleUtils: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetStyleUtils.id = k;
                break;
            }
        }
    }

    return dotNetStyleUtils;
}

