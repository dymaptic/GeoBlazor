import { buildDotNetSymbolUtilsRenderPieChartPreviewHTMLOptions } from './symbolUtilsRenderPieChartPreviewHTMLOptions';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import symbolUtilsRenderPieChartPreviewHTMLOptions = __esri.symbolUtilsRenderPieChartPreviewHTMLOptions;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsSymbolUtilsRenderPieChartPreviewHTMLOptionsGenerated(dotNetObject: any): Promise<any> {
    let jssymbolUtilsRenderPieChartPreviewHTMLOptions: any = {}
    if (hasValue(dotNetObject.outline)) {
        let { buildJsSimpleLineSymbol } = await import('./simpleLineSymbol');
        jssymbolUtilsRenderPieChartPreviewHTMLOptions.outline = buildJsSimpleLineSymbol(dotNetObject.outline) as any;
    }

    if (hasValue(dotNetObject.holePercentage)) {
        jssymbolUtilsRenderPieChartPreviewHTMLOptions.holePercentage = dotNetObject.holePercentage;
    }
    if (hasValue(dotNetObject.radius)) {
        jssymbolUtilsRenderPieChartPreviewHTMLOptions.radius = dotNetObject.radius;
    }
    if (hasValue(dotNetObject.values)) {
        jssymbolUtilsRenderPieChartPreviewHTMLOptions.values = dotNetObject.values;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jssymbolUtilsRenderPieChartPreviewHTMLOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jssymbolUtilsRenderPieChartPreviewHTMLOptions;
    
    let dnInstantiatedObject = await buildDotNetSymbolUtilsRenderPieChartPreviewHTMLOptions(jssymbolUtilsRenderPieChartPreviewHTMLOptions);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SymbolUtilsRenderPieChartPreviewHTMLOptions', e);
    }
    
    return jssymbolUtilsRenderPieChartPreviewHTMLOptions;
}
export async function buildDotNetSymbolUtilsRenderPieChartPreviewHTMLOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSymbolUtilsRenderPieChartPreviewHTMLOptions: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.outline)) {
            let { buildDotNetSimpleLineSymbol } = await import('./simpleLineSymbol');
            dotNetSymbolUtilsRenderPieChartPreviewHTMLOptions.outline = buildDotNetSimpleLineSymbol(jsObject.outline);
        }
        if (hasValue(jsObject.holePercentage)) {
            dotNetSymbolUtilsRenderPieChartPreviewHTMLOptions.holePercentage = jsObject.holePercentage;
        }
        if (hasValue(jsObject.radius)) {
            dotNetSymbolUtilsRenderPieChartPreviewHTMLOptions.radius = jsObject.radius;
        }
        if (hasValue(jsObject.values)) {
            dotNetSymbolUtilsRenderPieChartPreviewHTMLOptions.values = jsObject.values;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSymbolUtilsRenderPieChartPreviewHTMLOptions.id = k;
                break;
            }
        }
    }

    return dotNetSymbolUtilsRenderPieChartPreviewHTMLOptions;
}

