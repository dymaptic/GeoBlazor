import { buildDotNetImageInspectionInfo } from './imageInspectionInfo';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import ImageInspectionInfo from '@arcgis/core/rest/support/ImageInspectionInfo';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsImageInspectionInfoGenerated(dotNetObject: any): Promise<any> {
    let jsImageInspectionInfo = new ImageInspectionInfo();
    if (hasValue(dotNetObject.center)) {
        let { buildJsPoint } = await import('./point');
        jsImageInspectionInfo.center = buildJsPoint(dotNetObject.center) as any;
    }
    if (hasValue(dotNetObject.perspectiveCenter)) {
        let { buildJsPoint } = await import('./point');
        jsImageInspectionInfo.perspectiveCenter = buildJsPoint(dotNetObject.perspectiveCenter) as any;
    }

    if (hasValue(dotNetObject.acquisitionDate)) {
        jsImageInspectionInfo.acquisitionDate = dotNetObject.acquisitionDate;
    }
    if (hasValue(dotNetObject.cameraID)) {
        jsImageInspectionInfo.cameraID = dotNetObject.cameraID;
    }
    if (hasValue(dotNetObject.cols)) {
        jsImageInspectionInfo.cols = dotNetObject.cols;
    }
    if (hasValue(dotNetObject.focalLength)) {
        jsImageInspectionInfo.focalLength = dotNetObject.focalLength;
    }
    if (hasValue(dotNetObject.imageInspectionInfoId)) {
        jsImageInspectionInfo.id = dotNetObject.imageInspectionInfoId;
    }
    if (hasValue(dotNetObject.make)) {
        jsImageInspectionInfo.make = dotNetObject.make;
    }
    if (hasValue(dotNetObject.model)) {
        jsImageInspectionInfo.model = dotNetObject.model;
    }
    if (hasValue(dotNetObject.orientation)) {
        jsImageInspectionInfo.orientation = dotNetObject.orientation;
    }
    if (hasValue(dotNetObject.pixelSize)) {
        jsImageInspectionInfo.pixelSize = dotNetObject.pixelSize;
    }
    if (hasValue(dotNetObject.referenceUri)) {
        jsImageInspectionInfo.referenceUri = dotNetObject.referenceUri;
    }
    if (hasValue(dotNetObject.rows)) {
        jsImageInspectionInfo.rows = dotNetObject.rows;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsImageInspectionInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageInspectionInfo;
    
    let dnInstantiatedObject = await buildDotNetImageInspectionInfo(jsImageInspectionInfo);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImageInspectionInfo', e);
    }
    
    return jsImageInspectionInfo;
}
export async function buildDotNetImageInspectionInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageInspectionInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.center)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetImageInspectionInfo.center = buildDotNetPoint(jsObject.center);
        }
        if (hasValue(jsObject.perspectiveCenter)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetImageInspectionInfo.perspectiveCenter = buildDotNetPoint(jsObject.perspectiveCenter);
        }
        if (hasValue(jsObject.acquisitionDate)) {
            dotNetImageInspectionInfo.acquisitionDate = jsObject.acquisitionDate;
        }
        if (hasValue(jsObject.cameraID)) {
            dotNetImageInspectionInfo.cameraID = jsObject.cameraID;
        }
        if (hasValue(jsObject.cols)) {
            dotNetImageInspectionInfo.cols = jsObject.cols;
        }
        if (hasValue(jsObject.focalLength)) {
            dotNetImageInspectionInfo.focalLength = jsObject.focalLength;
        }
        if (hasValue(jsObject.id)) {
            dotNetImageInspectionInfo.imageInspectionInfoId = jsObject.id;
        }
        if (hasValue(jsObject.make)) {
            dotNetImageInspectionInfo.make = jsObject.make;
        }
        if (hasValue(jsObject.model)) {
            dotNetImageInspectionInfo.model = jsObject.model;
        }
        if (hasValue(jsObject.orientation)) {
            dotNetImageInspectionInfo.orientation = jsObject.orientation;
        }
        if (hasValue(jsObject.pixelSize)) {
            dotNetImageInspectionInfo.pixelSize = jsObject.pixelSize;
        }
        if (hasValue(jsObject.referenceUri)) {
            dotNetImageInspectionInfo.referenceUri = jsObject.referenceUri;
        }
        if (hasValue(jsObject.rows)) {
            dotNetImageInspectionInfo.rows = jsObject.rows;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImageInspectionInfo.id = k;
                break;
            }
        }
    }

    return dotNetImageInspectionInfo;
}

