// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageInspectionInfo from '@arcgis/core/rest/support/ImageInspectionInfo';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetImageInspectionInfo } from './imageInspectionInfo';

export async function buildJsImageInspectionInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.center)) {
        let { buildJsPoint } = await import('./point');
        properties.center = buildJsPoint(dotNetObject.center) as any;
    }
    if (hasValue(dotNetObject.perspectiveCenter)) {
        let { buildJsPoint } = await import('./point');
        properties.perspectiveCenter = buildJsPoint(dotNetObject.perspectiveCenter) as any;
    }

    if (hasValue(dotNetObject.acquisitionDate)) {
        properties.acquisitionDate = dotNetObject.acquisitionDate;
    }
    if (hasValue(dotNetObject.cameraID)) {
        properties.cameraID = dotNetObject.cameraID;
    }
    if (hasValue(dotNetObject.cols)) {
        properties.cols = dotNetObject.cols;
    }
    if (hasValue(dotNetObject.focalLength)) {
        properties.focalLength = dotNetObject.focalLength;
    }
    if (hasValue(dotNetObject.imageInspectionInfoId)) {
        properties.id = dotNetObject.imageInspectionInfoId;
    }
    if (hasValue(dotNetObject.make)) {
        properties.make = dotNetObject.make;
    }
    if (hasValue(dotNetObject.model)) {
        properties.model = dotNetObject.model;
    }
    if (hasValue(dotNetObject.orientation)) {
        properties.orientation = dotNetObject.orientation;
    }
    if (hasValue(dotNetObject.pixelSize)) {
        properties.pixelSize = dotNetObject.pixelSize;
    }
    if (hasValue(dotNetObject.referenceUri)) {
        properties.referenceUri = dotNetObject.referenceUri;
    }
    if (hasValue(dotNetObject.rows)) {
        properties.rows = dotNetObject.rows;
    }
    let jsImageInspectionInfo = new ImageInspectionInfo(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsImageInspectionInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageInspectionInfo;
    
    return jsImageInspectionInfo;
}


export async function buildDotNetImageInspectionInfoGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsImageInspectionInfo } = await import('./imageInspectionInfo');
        jsComponentRef = await buildJsImageInspectionInfo(jsObject, layerId, viewId);
    }
    
    let dotNetImageInspectionInfo: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.center)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetImageInspectionInfo.center = buildDotNetPoint(jsObject.center);
    }
    if (hasValue(jsObject.perspectiveCenter)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetImageInspectionInfo.perspectiveCenter = buildDotNetPoint(jsObject.perspectiveCenter);
    }
    if (hasValue(jsObject.acquisitionDate)) {
        dotNetImageInspectionInfo.acquisitionDate = jsObject.acquisitionDate;
    }
    if (hasValue(jsObject.cameraID)) {
        dotNetImageInspectionInfo.cameraID = jsObject.cameraID;
    }
    if (hasValue(jsObject.cols)) {
        dotNetImageInspectionInfo.cols = jsObject.cols;
    }
    if (hasValue(jsObject.focalLength)) {
        dotNetImageInspectionInfo.focalLength = jsObject.focalLength;
    }
    if (hasValue(jsObject.id)) {
        dotNetImageInspectionInfo.imageInspectionInfoId = jsObject.id;
    }
    if (hasValue(jsObject.make)) {
        dotNetImageInspectionInfo.make = jsObject.make;
    }
    if (hasValue(jsObject.model)) {
        dotNetImageInspectionInfo.model = jsObject.model;
    }
    if (hasValue(jsObject.orientation)) {
        dotNetImageInspectionInfo.orientation = jsObject.orientation;
    }
    if (hasValue(jsObject.pixelSize)) {
        dotNetImageInspectionInfo.pixelSize = jsObject.pixelSize;
    }
    if (hasValue(jsObject.referenceUri)) {
        dotNetImageInspectionInfo.referenceUri = jsObject.referenceUri;
    }
    if (hasValue(jsObject.rows)) {
        dotNetImageInspectionInfo.rows = jsObject.rows;
    }

    return dotNetImageInspectionInfo;
}

