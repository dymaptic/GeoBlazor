// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetMapNotesLayerCapabilitiesOperations } from './mapNotesLayerCapabilitiesOperations';

export async function buildJsMapNotesLayerCapabilitiesOperationsGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsMapNotesLayerCapabilitiesOperations: any = {};

    if (hasValue(dotNetObject.supportsMapNotesEditing)) {
        jsMapNotesLayerCapabilitiesOperations.supportsMapNotesEditing = dotNetObject.supportsMapNotesEditing;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsMapNotesLayerCapabilitiesOperations);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsMapNotesLayerCapabilitiesOperations;
    
    return jsMapNotesLayerCapabilitiesOperations;
}


export async function buildDotNetMapNotesLayerCapabilitiesOperationsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMapNotesLayerCapabilitiesOperations: any = {};
    
    if (hasValue(jsObject.supportsMapNotesEditing)) {
        dotNetMapNotesLayerCapabilitiesOperations.supportsMapNotesEditing = jsObject.supportsMapNotesEditing;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetMapNotesLayerCapabilitiesOperations.id = geoBlazorId;
    }

    return dotNetMapNotesLayerCapabilitiesOperations;
}

