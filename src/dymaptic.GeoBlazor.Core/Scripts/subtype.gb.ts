// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Subtype from '@arcgis/core/layers/support/Subtype';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSubtype } from './subtype';

export async function buildJsSubtypeGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.domains)) {
        let { buildJsDomain } = await import('./domain');
        properties.domains = buildJsDomain(dotNetObject.domains) as any;
    }

    if (hasValue(dotNetObject.code)) {
        properties.code = dotNetObject.code;
    }
    if (hasValue(dotNetObject.defaultValues)) {
        properties.defaultValues = dotNetObject.defaultValues;
    }
    if (hasValue(dotNetObject.name)) {
        properties.name = dotNetObject.name;
    }
    let jsSubtype = new Subtype(properties);
    
    jsObjectRefs[dotNetObject.id] = jsSubtype;
    arcGisObjectRefs[dotNetObject.id] = jsSubtype;
    
    return jsSubtype;
}


export async function buildDotNetSubtypeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSubtype: any = {};
    
    if (hasValue(jsObject.domains)) {
        let { buildDotNetDomain } = await import('./domain');
        dotNetSubtype.domains = buildDotNetDomain(jsObject.domains);
    }
    
    if (hasValue(jsObject.code)) {
        dotNetSubtype.code = jsObject.code;
    }
    
    if (hasValue(jsObject.defaultValues)) {
        dotNetSubtype.defaultValues = jsObject.defaultValues;
    }
    
    if (hasValue(jsObject.name)) {
        dotNetSubtype.name = jsObject.name;
    }
    

    return dotNetSubtype;
}

