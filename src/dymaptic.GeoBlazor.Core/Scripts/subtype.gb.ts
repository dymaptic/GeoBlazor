// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Subtype from '@arcgis/core/layers/support/Subtype';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSubtype } from './subtype';

export async function buildJsSubtypeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.domains)) {
        let { buildJsDomain } = await import('./domain');
        properties.domains = buildJsDomain(dotNetObject.domains) as any;
    }

    if (hasValue(dotNetObject.code)) {
        properties.code = dotNetObject.code;
    }
    if (hasValue(dotNetObject.defaultValues)) {
        properties.defaultValues = dotNetObject.defaultValues;
    }
    if (hasValue(dotNetObject.name)) {
        properties.name = dotNetObject.name;
    }
    let jsSubtype = new Subtype(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSubtype);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSubtype;
    
    let { buildDotNetSubtype } = await import('./subtype');
    let dnInstantiatedObject = await buildDotNetSubtype(jsSubtype);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type Subtype detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Subtype', e);
    }
    
    return jsSubtype;
}


export async function buildDotNetSubtypeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSubtype: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.domains)) {
        let { buildDotNetDomain } = await import('./domain');
        dotNetSubtype.domains = buildDotNetDomain(jsObject.domains);
    }
    if (hasValue(jsObject.code)) {
        dotNetSubtype.code = jsObject.code;
    }
    if (hasValue(jsObject.defaultValues)) {
        dotNetSubtype.defaultValues = jsObject.defaultValues;
    }
    if (hasValue(jsObject.name)) {
        dotNetSubtype.name = jsObject.name;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSubtype.id = k;
                break;
            }
        }
    }

    return dotNetSubtype;
}

