// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import websceneVirtualLighting from '@arcgis/core/webscene/VirtualLighting';
import { arcGisObjectRefs, jsObjectRefs, hasValue, sanitize, removeCircularReferences } from './arcGisJsInterop';
export async function buildJsWebsceneVirtualLightingGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }
    
    switch (dotNetObject.type) {
        case 'virtual':
            if (!hasValue(dotNetObject)) {
                return null;
            }

            let properties: any = {};

            if (hasValue(dotNetObject.directShadowsEnabled)) {
                properties.directShadowsEnabled = dotNetObject.directShadowsEnabled;
            }
            let jswebsceneVirtualLighting = new websceneVirtualLighting(properties);
    
            jsObjectRefs[dotNetObject.id] = jswebsceneVirtualLighting;
            arcGisObjectRefs[dotNetObject.id] = jswebsceneVirtualLighting;
    
            return jswebsceneVirtualLighting;

        case '': 
            let { buildJsVirtualLighting } = await import('./virtualLighting');
            return await buildJsVirtualLighting(dotNetObject);
        default: 
            return sanitize(dotNetObject);
    }
}     

export async function buildDotNetWebsceneVirtualLightingGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    switch (jsObject.type) {
        case 'virtual': 
            let dotNetWebsceneVirtualLighting: any = {};
            if (hasValue(jsObject.directShadowsEnabled)) {
                dotNetWebsceneVirtualLighting.directShadowsEnabled = jsObject.directShadowsEnabled;
            }
    
            if (hasValue(jsObject.type)) {
                dotNetWebsceneVirtualLighting.type = removeCircularReferences(jsObject.type);
            }
    

            return dotNetWebsceneVirtualLighting;

        case '': 
            let { buildDotNetVirtualLighting } = await import('./virtualLighting');
            return await buildDotNetVirtualLighting(jsObject);
        default: 
            return removeCircularReferences(jsObject);
    }
}     

