// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetColorCreateClassBreaksRendererParams } from './colorCreateClassBreaksRendererParams';

export async function buildJsColorCreateClassBreaksRendererParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jscolorCreateClassBreaksRendererParams: any = {}
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jscolorCreateClassBreaksRendererParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.classificationMethod)) {
        jscolorCreateClassBreaksRendererParams.classificationMethod = dotNetObject.classificationMethod;
    }
    if (hasValue(dotNetObject.colorMixMode)) {
        jscolorCreateClassBreaksRendererParams.colorMixMode = dotNetObject.colorMixMode;
    }
    if (hasValue(dotNetObject.colorScheme)) {
        jscolorCreateClassBreaksRendererParams.colorScheme = dotNetObject.colorScheme;
    }
    if (hasValue(dotNetObject.defaultSymbolEnabled)) {
        jscolorCreateClassBreaksRendererParams.defaultSymbolEnabled = dotNetObject.defaultSymbolEnabled;
    }
    if (hasValue(dotNetObject.field)) {
        jscolorCreateClassBreaksRendererParams.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.forBinning)) {
        jscolorCreateClassBreaksRendererParams.forBinning = dotNetObject.forBinning;
    }
    if (hasValue(dotNetObject.legendOptions)) {
        jscolorCreateClassBreaksRendererParams.legendOptions = dotNetObject.legendOptions;
    }
    if (hasValue(dotNetObject.maxValue)) {
        jscolorCreateClassBreaksRendererParams.maxValue = dotNetObject.maxValue;
    }
    if (hasValue(dotNetObject.minValue)) {
        jscolorCreateClassBreaksRendererParams.minValue = dotNetObject.minValue;
    }
    if (hasValue(dotNetObject.normalizationField)) {
        jscolorCreateClassBreaksRendererParams.normalizationField = dotNetObject.normalizationField;
    }
    if (hasValue(dotNetObject.normalizationTotal)) {
        jscolorCreateClassBreaksRendererParams.normalizationTotal = dotNetObject.normalizationTotal;
    }
    if (hasValue(dotNetObject.normalizationType)) {
        jscolorCreateClassBreaksRendererParams.normalizationType = dotNetObject.normalizationType;
    }
    if (hasValue(dotNetObject.numClasses)) {
        jscolorCreateClassBreaksRendererParams.numClasses = dotNetObject.numClasses;
    }
    if (hasValue(dotNetObject.outlineOptimizationEnabled)) {
        jscolorCreateClassBreaksRendererParams.outlineOptimizationEnabled = dotNetObject.outlineOptimizationEnabled;
    }
    if (hasValue(dotNetObject.signal)) {
        jscolorCreateClassBreaksRendererParams.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.sqlExpression)) {
        jscolorCreateClassBreaksRendererParams.sqlExpression = dotNetObject.sqlExpression;
    }
    if (hasValue(dotNetObject.sqlWhere)) {
        jscolorCreateClassBreaksRendererParams.sqlWhere = dotNetObject.sqlWhere;
    }
    if (hasValue(dotNetObject.standardDeviationInterval)) {
        jscolorCreateClassBreaksRendererParams.standardDeviationInterval = dotNetObject.standardDeviationInterval;
    }
    if (hasValue(dotNetObject.symbolType)) {
        jscolorCreateClassBreaksRendererParams.symbolType = dotNetObject.symbolType;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        jscolorCreateClassBreaksRendererParams.valueExpression = dotNetObject.valueExpression;
    }
    if (hasValue(dotNetObject.valueExpressionTitle)) {
        jscolorCreateClassBreaksRendererParams.valueExpressionTitle = dotNetObject.valueExpressionTitle;
    }
    if (hasValue(dotNetObject.view)) {
        jscolorCreateClassBreaksRendererParams.view = dotNetObject.view;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jscolorCreateClassBreaksRendererParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jscolorCreateClassBreaksRendererParams;
    
    let dnInstantiatedObject = await buildDotNetColorCreateClassBreaksRendererParams(jscolorCreateClassBreaksRendererParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ColorCreateClassBreaksRendererParams', e);
    }
    
    return jscolorCreateClassBreaksRendererParams;
}

export async function buildDotNetColorCreateClassBreaksRendererParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetColorCreateClassBreaksRendererParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.classificationMethod)) {
        dotNetColorCreateClassBreaksRendererParams.classificationMethod = jsObject.classificationMethod;
    }
    if (hasValue(jsObject.colorMixMode)) {
        dotNetColorCreateClassBreaksRendererParams.colorMixMode = jsObject.colorMixMode;
    }
    if (hasValue(jsObject.colorScheme)) {
        dotNetColorCreateClassBreaksRendererParams.colorScheme = jsObject.colorScheme;
    }
    if (hasValue(jsObject.defaultSymbolEnabled)) {
        dotNetColorCreateClassBreaksRendererParams.defaultSymbolEnabled = jsObject.defaultSymbolEnabled;
    }
    if (hasValue(jsObject.field)) {
        dotNetColorCreateClassBreaksRendererParams.field = jsObject.field;
    }
    if (hasValue(jsObject.forBinning)) {
        dotNetColorCreateClassBreaksRendererParams.forBinning = jsObject.forBinning;
    }
    if (hasValue(jsObject.legendOptions)) {
        dotNetColorCreateClassBreaksRendererParams.legendOptions = jsObject.legendOptions;
    }
    if (hasValue(jsObject.maxValue)) {
        dotNetColorCreateClassBreaksRendererParams.maxValue = jsObject.maxValue;
    }
    if (hasValue(jsObject.minValue)) {
        dotNetColorCreateClassBreaksRendererParams.minValue = jsObject.minValue;
    }
    if (hasValue(jsObject.normalizationField)) {
        dotNetColorCreateClassBreaksRendererParams.normalizationField = jsObject.normalizationField;
    }
    if (hasValue(jsObject.normalizationTotal)) {
        dotNetColorCreateClassBreaksRendererParams.normalizationTotal = jsObject.normalizationTotal;
    }
    if (hasValue(jsObject.normalizationType)) {
        dotNetColorCreateClassBreaksRendererParams.normalizationType = jsObject.normalizationType;
    }
    if (hasValue(jsObject.numClasses)) {
        dotNetColorCreateClassBreaksRendererParams.numClasses = jsObject.numClasses;
    }
    if (hasValue(jsObject.outlineOptimizationEnabled)) {
        dotNetColorCreateClassBreaksRendererParams.outlineOptimizationEnabled = jsObject.outlineOptimizationEnabled;
    }
    if (hasValue(jsObject.signal)) {
        dotNetColorCreateClassBreaksRendererParams.signal = jsObject.signal;
    }
    if (hasValue(jsObject.sqlExpression)) {
        dotNetColorCreateClassBreaksRendererParams.sqlExpression = jsObject.sqlExpression;
    }
    if (hasValue(jsObject.sqlWhere)) {
        dotNetColorCreateClassBreaksRendererParams.sqlWhere = jsObject.sqlWhere;
    }
    if (hasValue(jsObject.standardDeviationInterval)) {
        dotNetColorCreateClassBreaksRendererParams.standardDeviationInterval = jsObject.standardDeviationInterval;
    }
    if (hasValue(jsObject.symbolType)) {
        dotNetColorCreateClassBreaksRendererParams.symbolType = jsObject.symbolType;
    }
    if (hasValue(jsObject.valueExpression)) {
        dotNetColorCreateClassBreaksRendererParams.valueExpression = jsObject.valueExpression;
    }
    if (hasValue(jsObject.valueExpressionTitle)) {
        dotNetColorCreateClassBreaksRendererParams.valueExpressionTitle = jsObject.valueExpressionTitle;
    }
    if (hasValue(jsObject.view)) {
        dotNetColorCreateClassBreaksRendererParams.view = jsObject.view;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetColorCreateClassBreaksRendererParams.id = k;
                break;
            }
        }
    }

    return dotNetColorCreateClassBreaksRendererParams;
}

