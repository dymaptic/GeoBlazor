// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetSizeRampStop } from './sizeRampStop';

export async function buildJsSizeRampStopGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSizeRampStop: any = {};
    if (hasValue(dotNetObject.symbol)) {
        let { buildJsSymbol } = await import('./symbol');
        jsSizeRampStop.symbol = buildJsSymbol(dotNetObject.symbol) as any;
    }

    if (hasValue(dotNetObject.label)) {
        jsSizeRampStop.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.outlineSize)) {
        jsSizeRampStop.outlineSize = dotNetObject.outlineSize;
    }
    if (hasValue(dotNetObject.preview)) {
        jsSizeRampStop.preview = dotNetObject.preview;
    }
    if (hasValue(dotNetObject.size)) {
        jsSizeRampStop.size = dotNetObject.size;
    }
    if (hasValue(dotNetObject.value)) {
        jsSizeRampStop.value = dotNetObject.value;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSizeRampStop);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSizeRampStop;
    
    let { buildDotNetSizeRampStop } = await import('./sizeRampStop');
    let dnInstantiatedObject = await buildDotNetSizeRampStop(jsSizeRampStop);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type SizeRampStop detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SizeRampStop', e);
    }
    
    return jsSizeRampStop;
}


export async function buildDotNetSizeRampStopGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSizeRampStop: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.symbol)) {
        let { buildDotNetSymbol } = await import('./symbol');
        dotNetSizeRampStop.symbol = buildDotNetSymbol(jsObject.symbol);
    }
    if (hasValue(jsObject.label)) {
        dotNetSizeRampStop.label = jsObject.label;
    }
    if (hasValue(jsObject.outlineSize)) {
        dotNetSizeRampStop.outlineSize = jsObject.outlineSize;
    }
    if (hasValue(jsObject.preview)) {
        dotNetSizeRampStop.preview = jsObject.preview;
    }
    if (hasValue(jsObject.size)) {
        dotNetSizeRampStop.size = jsObject.size;
    }
    if (hasValue(jsObject.value)) {
        dotNetSizeRampStop.value = jsObject.value;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSizeRampStop.id = geoBlazorId;
    }

    return dotNetSizeRampStop;
}

