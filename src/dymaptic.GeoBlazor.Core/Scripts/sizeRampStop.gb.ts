// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, generateSerializableJson } from './arcGisJsInterop';

export async function buildJsSizeRampStopGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsSizeRampStop: any = {};
    if (hasValue(dotNetObject.symbol)) {
        let { buildJsSymbol } = await import('./symbol');
        jsSizeRampStop.symbol = buildJsSymbol(dotNetObject.symbol) as any;
    }

    if (hasValue(dotNetObject.label)) {
        jsSizeRampStop.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.outlineSize)) {
        jsSizeRampStop.outlineSize = dotNetObject.outlineSize;
    }
    if (hasValue(dotNetObject.preview)) {
        jsSizeRampStop.preview = dotNetObject.preview;
    }
    if (hasValue(dotNetObject.size)) {
        jsSizeRampStop.size = dotNetObject.size;
    }
    if (hasValue(dotNetObject.value)) {
        jsSizeRampStop.value = JSON.parse(dotNetObject.value);
    }
    
    jsObjectRefs[dotNetObject.id] = jsSizeRampStop;
    arcGisObjectRefs[dotNetObject.id] = jsSizeRampStop;
    
    return jsSizeRampStop;
}


export async function buildDotNetSizeRampStopGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSizeRampStop: any = {};
    
    if (hasValue(jsObject.symbol)) {
        let { buildDotNetSymbol } = await import('./symbol');
        dotNetSizeRampStop.symbol = buildDotNetSymbol(jsObject.symbol);
    }
    
    if (hasValue(jsObject.label)) {
        dotNetSizeRampStop.label = jsObject.label;
    }
    
    if (hasValue(jsObject.outlineSize)) {
        dotNetSizeRampStop.outlineSize = jsObject.outlineSize;
    }
    
    if (hasValue(jsObject.preview)) {
        dotNetSizeRampStop.preview = jsObject.preview;
    }
    
    if (hasValue(jsObject.size)) {
        dotNetSizeRampStop.size = jsObject.size;
    }
    
    if (hasValue(jsObject.value)) {
        dotNetSizeRampStop.value = generateSerializableJson(jsObject.value);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSizeRampStop.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        if (hasValue(dotNetRef)) {
            try {
                dotNetSizeRampStop.id = await dotNetRef.invokeMethodAsync('GetId');
            } catch (e) {
                console.error('Error invoking GetId for SizeRampStop', e);
            }
        }
    }
    if (hasValue(dotNetSizeRampStop.id)) {
        jsObjectRefs[dotNetSizeRampStop.id] ??= jsObject;
        arcGisObjectRefs[dotNetSizeRampStop.id] ??= jsObject;
    }

    return dotNetSizeRampStop;
}

