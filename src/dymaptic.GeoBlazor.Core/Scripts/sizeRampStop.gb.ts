import { buildDotNetSizeRampStop } from './sizeRampStop';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import SizeRampStop = __esri.SizeRampStop;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsSizeRampStopGenerated(dotNetObject: any): Promise<any> {
    let jsSizeRampStop: any = {}
    if (hasValue(dotNetObject.symbol)) {
        let { buildJsSymbol } = await import('./symbol');
        jsSizeRampStop.symbol = buildJsSymbol(dotNetObject.symbol) as any;
    }

    if (hasValue(dotNetObject.label)) {
        jsSizeRampStop.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.outlineSize)) {
        jsSizeRampStop.outlineSize = dotNetObject.outlineSize;
    }
    if (hasValue(dotNetObject.preview)) {
        jsSizeRampStop.preview = dotNetObject.preview;
    }
    if (hasValue(dotNetObject.size)) {
        jsSizeRampStop.size = dotNetObject.size;
    }
    if (hasValue(dotNetObject.value)) {
        jsSizeRampStop.value = dotNetObject.value;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsSizeRampStop);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSizeRampStop;
    
    let dnInstantiatedObject = await buildDotNetSizeRampStop(jsSizeRampStop);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SizeRampStop', e);
    }
    
    return jsSizeRampStop;
}
export async function buildDotNetSizeRampStopGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSizeRampStop: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.symbol)) {
            let { buildDotNetSymbol } = await import('./symbol');
            dotNetSizeRampStop.symbol = buildDotNetSymbol(jsObject.symbol);
        }
        if (hasValue(jsObject.label)) {
            dotNetSizeRampStop.label = jsObject.label;
        }
        if (hasValue(jsObject.outlineSize)) {
            dotNetSizeRampStop.outlineSize = jsObject.outlineSize;
        }
        if (hasValue(jsObject.preview)) {
            dotNetSizeRampStop.preview = jsObject.preview;
        }
        if (hasValue(jsObject.size)) {
            dotNetSizeRampStop.size = jsObject.size;
        }
        if (hasValue(jsObject.value)) {
            dotNetSizeRampStop.value = jsObject.value;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSizeRampStop.id = k;
                break;
            }
        }
    }

    return dotNetSizeRampStop;
}

