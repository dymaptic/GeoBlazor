// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { hasValue } from './arcGisJsInterop';
export async function buildJsCIMSymbolLayerBaseGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }
    
    switch (dotNetObject.type) {
        case 'string': 
            let { buildJsCIMSymbolLayerBase } = await import('./cIMSymbolLayerBase');
            return await buildJsCIMSymbolLayerBase(dotNetObject, layerId, viewId);
        case 'string': 
            let { buildJsCIMSolidStroke } = await import('./cIMSolidStroke');
            return await buildJsCIMSolidStroke(dotNetObject, layerId, viewId);
        case 'string': 
            let { buildJsCIMPictureStroke } = await import('./cIMPictureStroke');
            return await buildJsCIMPictureStroke(dotNetObject, layerId, viewId);
        case 'string': 
            let { buildJsCIMSolidFill } = await import('./cIMSolidFill');
            return await buildJsCIMSolidFill(dotNetObject, layerId, viewId);
        case 'string': 
            let { buildJsCIMPictureFill } = await import('./cIMPictureFill');
            return await buildJsCIMPictureFill(dotNetObject, layerId, viewId);
        case '': 
            let { buildJsCIMMarker } = await import('./cIMMarker');
            return await buildJsCIMMarker(dotNetObject);
        case 'string': 
            let { buildJsCIMPictureMarker } = await import('./cIMPictureMarker');
            return await buildJsCIMPictureMarker(dotNetObject, layerId, viewId);
        default: 
            let { id, dotNetComponentReference, ...sanitizedDotNetObject } = dotNetObject;
            return sanitizedDotNetObject;
    }
}     

export async function buildDotNetCIMSymbolLayerBaseGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    switch (jsObject.type) {
        case 'string': 
            let { buildDotNetCIMSymbolLayerBase } = await import('./cIMSymbolLayerBase');
            return await buildDotNetCIMSymbolLayerBase(jsObject);
        case 'string': 
            let { buildDotNetCIMSolidStroke } = await import('./cIMSolidStroke');
            return await buildDotNetCIMSolidStroke(jsObject);
        case 'string': 
            let { buildDotNetCIMPictureStroke } = await import('./cIMPictureStroke');
            return await buildDotNetCIMPictureStroke(jsObject);
        case 'string': 
            let { buildDotNetCIMSolidFill } = await import('./cIMSolidFill');
            return await buildDotNetCIMSolidFill(jsObject);
        case 'string': 
            let { buildDotNetCIMPictureFill } = await import('./cIMPictureFill');
            return await buildDotNetCIMPictureFill(jsObject);
        case '': 
            let { buildDotNetCIMMarker } = await import('./cIMMarker');
            return await buildDotNetCIMMarker(jsObject);
        case 'string': 
            let { buildDotNetCIMPictureMarker } = await import('./cIMPictureMarker');
            return await buildDotNetCIMPictureMarker(jsObject);
        default: 
            return jsObject;
    }
}     

