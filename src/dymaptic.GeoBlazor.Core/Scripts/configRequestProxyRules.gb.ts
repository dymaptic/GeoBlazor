// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetConfigRequestProxyRules } from './configRequestProxyRules';

export async function buildJsConfigRequestProxyRulesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsconfigRequestProxyRules: any = {};

    if (hasValue(dotNetObject.proxyUrl)) {
        jsconfigRequestProxyRules.proxyUrl = dotNetObject.proxyUrl;
    }
    if (hasValue(dotNetObject.urlPrefix)) {
        jsconfigRequestProxyRules.urlPrefix = dotNetObject.urlPrefix;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsconfigRequestProxyRules);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsconfigRequestProxyRules;
    
    return jsconfigRequestProxyRules;
}


export async function buildDotNetConfigRequestProxyRulesGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetConfigRequestProxyRules: any = {};
    
    if (hasValue(jsObject.proxyUrl)) {
        dotNetConfigRequestProxyRules.proxyUrl = jsObject.proxyUrl;
    }
    
    if (hasValue(jsObject.urlPrefix)) {
        dotNetConfigRequestProxyRules.urlPrefix = jsObject.urlPrefix;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetConfigRequestProxyRules.id = geoBlazorId;
    }

    return dotNetConfigRequestProxyRules;
}

