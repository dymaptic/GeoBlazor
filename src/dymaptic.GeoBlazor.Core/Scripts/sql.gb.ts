// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import sql = __esri.sql;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SqlGenerated implements IPropertyWrapper {
    public component: sql;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: sql) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async parseWhereClause(clause: any,
        fieldsIndex: any,
        timeZone: any): Promise<any> {
        let { buildJsFieldsIndex } = await import('./fieldsIndex');
        let jsFieldsIndex = await buildJsFieldsIndex(fieldsIndex, this.layerId, this.viewId) as any;
        let result = await this.component.parseWhereClause(clause,
            jsFieldsIndex,
            timeZone);
        let { buildDotNetWhereClause } = await import('./whereClause');
        return await buildDotNetWhereClause(result);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsSqlGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jssql: any = {}


    let { default: SqlWrapper } = await import('./sql');
    let sqlWrapper = new SqlWrapper(jssql);
    sqlWrapper.geoBlazorId = dotNetObject.id;
    sqlWrapper.viewId = viewId;
    sqlWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(sqlWrapper);
    jsObjectRefs[dotNetObject.id] = sqlWrapper;
    arcGisObjectRefs[dotNetObject.id] = jssql;
    let { buildDotNetSql } = await import('./sql');
    let dnInstantiatedObject = await buildDotNetSql(jssql);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Sql', e);
    }
    
    return jssql;
}

export async function buildDotNetSqlGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSql: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSql.id = k;
                break;
            }
        }
    }

    return dotNetSql;
}

