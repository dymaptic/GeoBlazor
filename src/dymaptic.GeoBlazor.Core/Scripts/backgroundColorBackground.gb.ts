// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import backgroundColorBackground from '@arcgis/core/webscene/background/ColorBackground';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetBackgroundColorBackground } from './backgroundColorBackground';

export async function buildJsBackgroundColorBackgroundGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.color)) {
        properties.color = dotNetObject.color;
    }
    let jsbackgroundColorBackground = new backgroundColorBackground(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsbackgroundColorBackground);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsbackgroundColorBackground;
    
    let { buildDotNetBackgroundColorBackground } = await import('./backgroundColorBackground');
    let dnInstantiatedObject = await buildDotNetBackgroundColorBackground(jsbackgroundColorBackground);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type BackgroundColorBackground detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BackgroundColorBackground', e);
    }
    
    return jsbackgroundColorBackground;
}


export async function buildDotNetBackgroundColorBackgroundGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBackgroundColorBackground: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.color)) {
        dotNetBackgroundColorBackground.color = jsObject.color;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetBackgroundColorBackground.id = k;
                break;
            }
        }
    }

    return dotNetBackgroundColorBackground;
}

