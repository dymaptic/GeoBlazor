// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetClassBreaksRendererResult } from './classBreaksRendererResult';

export async function buildJsClassBreaksRendererResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsClassBreaksRendererResult: any = {}
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsClassBreaksRenderer } = await import('./classBreaksRenderer');
        jsClassBreaksRendererResult.renderer = await buildJsClassBreaksRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.basemapId)) {
        jsClassBreaksRendererResult.basemapId = dotNetObject.basemapId;
    }
    if (hasValue(dotNetObject.basemapTheme)) {
        jsClassBreaksRendererResult.basemapTheme = dotNetObject.basemapTheme;
    }
    if (hasValue(dotNetObject.classBreaksResult)) {
        jsClassBreaksRendererResult.classBreaksResult = dotNetObject.classBreaksResult;
    }
    if (hasValue(dotNetObject.colorScheme)) {
        jsClassBreaksRendererResult.colorScheme = dotNetObject.colorScheme;
    }
    if (hasValue(dotNetObject.defaultValuesUsed)) {
        jsClassBreaksRendererResult.defaultValuesUsed = dotNetObject.defaultValuesUsed;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsClassBreaksRendererResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsClassBreaksRendererResult;
    
    let dnInstantiatedObject = await buildDotNetClassBreaksRendererResult(jsClassBreaksRendererResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ClassBreaksRendererResult', e);
    }
    
    return jsClassBreaksRendererResult;
}

export async function buildDotNetClassBreaksRendererResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetClassBreaksRendererResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.renderer)) {
            let { buildDotNetClassBreaksRenderer } = await import('./classBreaksRenderer');
            dotNetClassBreaksRendererResult.renderer = await buildDotNetClassBreaksRenderer(jsObject.renderer);
        }
        if (hasValue(jsObject.basemapId)) {
            dotNetClassBreaksRendererResult.basemapId = jsObject.basemapId;
        }
        if (hasValue(jsObject.basemapTheme)) {
            dotNetClassBreaksRendererResult.basemapTheme = jsObject.basemapTheme;
        }
        if (hasValue(jsObject.classBreaksResult)) {
            dotNetClassBreaksRendererResult.classBreaksResult = jsObject.classBreaksResult;
        }
        if (hasValue(jsObject.colorScheme)) {
            dotNetClassBreaksRendererResult.colorScheme = jsObject.colorScheme;
        }
        if (hasValue(jsObject.defaultValuesUsed)) {
            dotNetClassBreaksRendererResult.defaultValuesUsed = jsObject.defaultValuesUsed;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetClassBreaksRendererResult.id = k;
                break;
            }
        }
    }

    return dotNetClassBreaksRendererResult;
}

