// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetMapViewTakeScreenshotOptions } from './mapViewTakeScreenshotOptions';

export async function buildJsMapViewTakeScreenshotOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsMapViewTakeScreenshotOptions: any = {};
    if (hasValue(dotNetObject.area)) {
        let { buildJsMapViewTakeScreenshotOptionsArea } = await import('./mapViewTakeScreenshotOptionsArea');
        jsMapViewTakeScreenshotOptions.area = await buildJsMapViewTakeScreenshotOptionsArea(dotNetObject.area, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.format)) {
        let { buildJsFormat } = await import('./format');
        jsMapViewTakeScreenshotOptions.format = await buildJsFormat(dotNetObject.format, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.layers)) {
        let { buildJsLayer } = await import('./layer');
        jsMapViewTakeScreenshotOptions.layers = await Promise.all(dotNetObject.layers.map(async i => await buildJsLayer(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.height)) {
        jsMapViewTakeScreenshotOptions.height = dotNetObject.height;
    }
    if (hasValue(dotNetObject.ignoreBackground)) {
        jsMapViewTakeScreenshotOptions.ignoreBackground = dotNetObject.ignoreBackground;
    }
    if (hasValue(dotNetObject.ignorePadding)) {
        jsMapViewTakeScreenshotOptions.ignorePadding = dotNetObject.ignorePadding;
    }
    if (hasValue(dotNetObject.quality)) {
        jsMapViewTakeScreenshotOptions.quality = dotNetObject.quality;
    }
    if (hasValue(dotNetObject.width)) {
        jsMapViewTakeScreenshotOptions.width = dotNetObject.width;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsMapViewTakeScreenshotOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsMapViewTakeScreenshotOptions;
    
    return jsMapViewTakeScreenshotOptions;
}


export async function buildDotNetMapViewTakeScreenshotOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMapViewTakeScreenshotOptions: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.area)) {
        let { buildDotNetMapViewTakeScreenshotOptionsArea } = await import('./mapViewTakeScreenshotOptionsArea');
        dotNetMapViewTakeScreenshotOptions.area = await buildDotNetMapViewTakeScreenshotOptionsArea(jsObject.area);
    }
    if (hasValue(jsObject.format)) {
        let { buildDotNetFormat } = await import('./format');
        dotNetMapViewTakeScreenshotOptions.format = await buildDotNetFormat(jsObject.format);
    }
    if (hasValue(jsObject.height)) {
        dotNetMapViewTakeScreenshotOptions.height = jsObject.height;
    }
    if (hasValue(jsObject.ignoreBackground)) {
        dotNetMapViewTakeScreenshotOptions.ignoreBackground = jsObject.ignoreBackground;
    }
    if (hasValue(jsObject.ignorePadding)) {
        dotNetMapViewTakeScreenshotOptions.ignorePadding = jsObject.ignorePadding;
    }
    if (hasValue(jsObject.quality)) {
        dotNetMapViewTakeScreenshotOptions.quality = jsObject.quality;
    }
    if (hasValue(jsObject.width)) {
        dotNetMapViewTakeScreenshotOptions.width = jsObject.width;
    }

    return dotNetMapViewTakeScreenshotOptions;
}

