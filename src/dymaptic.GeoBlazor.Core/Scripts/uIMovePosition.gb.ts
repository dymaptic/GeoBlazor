// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetUIMovePosition } from './uIMovePosition';

export async function buildJsUIMovePositionGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsUIMovePosition: any = {};
    if (hasValue(dotNetObject.position)) {
        let { buildJsPosition } = await import('./position');
        jsUIMovePosition.position = await buildJsPosition(dotNetObject.position, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.index)) {
        jsUIMovePosition.index = dotNetObject.index;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsUIMovePosition);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsUIMovePosition;
    
    let { buildDotNetUIMovePosition } = await import('./uIMovePosition');
    let dnInstantiatedObject = await buildDotNetUIMovePosition(jsUIMovePosition);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type UIMovePosition detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for UIMovePosition', e);
    }
    
    return jsUIMovePosition;
}


export async function buildDotNetUIMovePositionGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUIMovePosition: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.position)) {
        let { buildDotNetPosition } = await import('./position');
        dotNetUIMovePosition.position = await buildDotNetPosition(jsObject.position);
    }
    if (hasValue(jsObject.index)) {
        dotNetUIMovePosition.index = jsObject.index;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetUIMovePosition.id = k;
                break;
            }
        }
    }

    return dotNetUIMovePosition;
}

