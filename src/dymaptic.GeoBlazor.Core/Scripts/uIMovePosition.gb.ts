// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetUIMovePosition } from './uIMovePosition';

export async function buildJsUIMovePositionGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsUIMovePosition: any = {};
    if (hasValue(dotNetObject.position)) {
        let { buildJsPosition } = await import('./position');
        jsUIMovePosition.position = await buildJsPosition(dotNetObject.position, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.index)) {
        jsUIMovePosition.index = dotNetObject.index;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsUIMovePosition);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsUIMovePosition;
    
    return jsUIMovePosition;
}


export async function buildDotNetUIMovePositionGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUIMovePosition: any = {};
    
    if (hasValue(jsObject.position)) {
        let { buildDotNetPosition } = await import('./position');
        dotNetUIMovePosition.position = await buildDotNetPosition(jsObject.position, layerId, viewId);
    }
    
    if (hasValue(jsObject.index)) {
        dotNetUIMovePosition.index = jsObject.index;
    }
    

    return dotNetUIMovePosition;
}

