// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ColorVariable from '@arcgis/core/renderers/visualVariables/ColorVariable';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetColorVariable } from './colorVariable';

export async function buildJsColorVariableGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.legendOptions)) {
        let { buildJsVisualVariableLegendOptions } = await import('./visualVariableLegendOptions');
        properties.legendOptions = await buildJsVisualVariableLegendOptions(dotNetObject.legendOptions) as any;
    }
    if (hasValue(dotNetObject.stops) && dotNetObject.stops.length > 0) {
        let { buildJsColorStop } = await import('./colorStop');
        properties.stops = await Promise.all(dotNetObject.stops.map(async i => await buildJsColorStop(i))) as any;
    }

    if (hasValue(dotNetObject.field)) {
        properties.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.normalizationField)) {
        properties.normalizationField = dotNetObject.normalizationField;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        properties.valueExpression = dotNetObject.valueExpression;
    }
    if (hasValue(dotNetObject.valueExpressionTitle)) {
        properties.valueExpressionTitle = dotNetObject.valueExpressionTitle;
    }
    let jsColorVariable = new ColorVariable(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsColorVariable);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsColorVariable;
    
    return jsColorVariable;
}


export async function buildDotNetColorVariableGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetColorVariable: any = {};
    
    if (hasValue(jsObject.legendOptions)) {
        let { buildDotNetVisualVariableLegendOptions } = await import('./visualVariableLegendOptions');
        dotNetColorVariable.legendOptions = await buildDotNetVisualVariableLegendOptions(jsObject.legendOptions);
    }
    
    if (hasValue(jsObject.stops)) {
        let { buildDotNetColorStop } = await import('./colorStop');
        dotNetColorVariable.stops = await Promise.all(jsObject.stops.map(async i => await buildDotNetColorStop(i)));
    }
    
    if (hasValue(jsObject.field)) {
        dotNetColorVariable.field = jsObject.field;
    }
    
    if (hasValue(jsObject.normalizationField)) {
        dotNetColorVariable.normalizationField = jsObject.normalizationField;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetColorVariable.type = removeCircularReferences(jsObject.type);
    }
    
    if (hasValue(jsObject.valueExpression)) {
        dotNetColorVariable.valueExpression = jsObject.valueExpression;
    }
    
    if (hasValue(jsObject.valueExpressionTitle)) {
        dotNetColorVariable.valueExpressionTitle = jsObject.valueExpressionTitle;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetColorVariable.id = geoBlazorId;
    }

    return dotNetColorVariable;
}

