// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetColorVariable } from './colorVariable';
import ColorVariable from '@arcgis/core/renderers/visualVariables/ColorVariable';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsColorVariableGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsColorVariable = new ColorVariable();

    if (hasValue(dotNetObject.field)) {
        jsColorVariable.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.legendOptions)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedLegendOptions } = dotNetObject.legendOptions;
        jsColorVariable.legendOptions = sanitizedLegendOptions;
    }
    if (hasValue(dotNetObject.normalizationField)) {
        jsColorVariable.normalizationField = dotNetObject.normalizationField;
    }
    if (hasValue(dotNetObject.stops)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedStops } = dotNetObject.stops;
        jsColorVariable.stops = sanitizedStops;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        jsColorVariable.valueExpression = dotNetObject.valueExpression;
    }
    if (hasValue(dotNetObject.valueExpressionTitle)) {
        jsColorVariable.valueExpressionTitle = dotNetObject.valueExpressionTitle;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsColorVariable);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsColorVariable;
    
    let dnInstantiatedObject = await buildDotNetColorVariable(jsColorVariable);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ColorVariable', e);
    }
    
    return jsColorVariable;
}

export async function buildDotNetColorVariableGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetColorVariable: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.field)) {
            dotNetColorVariable.field = jsObject.field;
        }
        if (hasValue(jsObject.legendOptions)) {
            dotNetColorVariable.legendOptions = jsObject.legendOptions;
        }
        if (hasValue(jsObject.normalizationField)) {
            dotNetColorVariable.normalizationField = jsObject.normalizationField;
        }
        if (hasValue(jsObject.stops)) {
            dotNetColorVariable.stops = jsObject.stops;
        }
        if (hasValue(jsObject.type)) {
            dotNetColorVariable.type = jsObject.type;
        }
        if (hasValue(jsObject.valueExpression)) {
            dotNetColorVariable.valueExpression = jsObject.valueExpression;
        }
        if (hasValue(jsObject.valueExpressionTitle)) {
            dotNetColorVariable.valueExpressionTitle = jsObject.valueExpressionTitle;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetColorVariable.id = k;
                break;
            }
        }
    }

    return dotNetColorVariable;
}

