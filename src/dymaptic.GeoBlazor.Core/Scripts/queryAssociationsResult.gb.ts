import { buildDotNetQueryAssociationsResult } from './queryAssociationsResult';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import QueryAssociationsResult from '@arcgis/core/rest/networks/support/QueryAssociationsResult';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsQueryAssociationsResultGenerated(dotNetObject: any): Promise<any> {
    let jsQueryAssociationsResult = new QueryAssociationsResult();
    if (hasValue(dotNetObject.associations)) {
        let { buildJsAssociation } = await import('./association');
        jsQueryAssociationsResult.associations = await Promise.all(dotNetObject.associations.map(async i => await buildJsAssociation(i, layerId, viewId))) as any;
    }

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsQueryAssociationsResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsQueryAssociationsResult;
    
    let dnInstantiatedObject = await buildDotNetQueryAssociationsResult(jsQueryAssociationsResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for QueryAssociationsResult', e);
    }
    
    return jsQueryAssociationsResult;
}
export async function buildDotNetQueryAssociationsResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetQueryAssociationsResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.associations)) {
            let { buildDotNetAssociation } = await import('./association');
            dotNetQueryAssociationsResult.associations = await Promise.all(jsObject.associations.map(async i => await buildDotNetAssociation(i)));
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetQueryAssociationsResult.id = k;
                break;
            }
        }
    }

    return dotNetQueryAssociationsResult;
}

