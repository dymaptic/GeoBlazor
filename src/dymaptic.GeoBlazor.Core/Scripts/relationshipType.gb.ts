// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import RelationshipType from '@arcgis/core/rest/knowledgeGraph/RelationshipType';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetRelationshipType } from './relationshipType';

export async function buildJsRelationshipTypeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.endPoints)) {
        let { buildJsRelationshipTypeEndPoints } = await import('./relationshipTypeEndPoints');
        properties.endPoints = await Promise.all(dotNetObject.endPoints.map(async i => await buildJsRelationshipTypeEndPoints(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.alias)) {
        properties.alias = dotNetObject.alias;
    }
    if (hasValue(dotNetObject.fieldIndexes)) {
        properties.fieldIndexes = dotNetObject.fieldIndexes;
    }
    if (hasValue(dotNetObject.name)) {
        properties.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.properties)) {
        properties.properties = dotNetObject.properties;
    }
    if (hasValue(dotNetObject.role)) {
        properties.role = dotNetObject.role;
    }
    let jsRelationshipType = new RelationshipType(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsRelationshipType);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRelationshipType;
    
    return jsRelationshipType;
}


export async function buildDotNetRelationshipTypeGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRelationshipType: any = {};
    
    if (hasValue(jsObject.endPoints)) {
        let { buildDotNetRelationshipTypeEndPoints } = await import('./relationshipTypeEndPoints');
        dotNetRelationshipType.endPoints = await Promise.all(jsObject.endPoints.map(async i => await buildDotNetRelationshipTypeEndPoints(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.alias)) {
        dotNetRelationshipType.alias = jsObject.alias;
    }
    
    if (hasValue(jsObject.fieldIndexes)) {
        dotNetRelationshipType.fieldIndexes = jsObject.fieldIndexes;
    }
    
    if (hasValue(jsObject.name)) {
        dotNetRelationshipType.name = jsObject.name;
    }
    
    if (hasValue(jsObject.properties)) {
        dotNetRelationshipType.properties = jsObject.properties;
    }
    
    if (hasValue(jsObject.role)) {
        dotNetRelationshipType.role = jsObject.role;
    }
    

    return dotNetRelationshipType;
}

