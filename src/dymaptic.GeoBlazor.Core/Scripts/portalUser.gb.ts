// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import PortalUser from '@arcgis/core/portal/PortalUser';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PortalUserGenerated implements IPropertyWrapper {
    public component: PortalUser;
    public readonly geoBlazorId: string = '';

    constructor(component: PortalUser) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async addItem(item: any,
        data: any,
        folder: any): Promise<any> {
        let { buildJsPortalItem } = await import('./portalItem');
        let jsItem = await buildJsPortalItem(item) as any;
        let result = await this.component.addItem(jsItem,
            data,
            folder);
        let { buildDotNetPortalItem } = await import('./portalItem');
        return buildDotNetPortalItem(result);
    }

    async deleteItem(item: any,
        permanentDelete: any): Promise<any> {
        let { buildJsPortalItem } = await import('./portalItem');
        let jsItem = await buildJsPortalItem(item) as any;
        return await this.component.deleteItem(jsItem,
            permanentDelete);
    }

    async deleteItems(items: any,
        permanentDelete: any): Promise<any> {
        let { buildJsPortalItem } = await import('./portalItem');
        let jsItems = await buildJsPortalItem(items) as any;
        return await this.component.deleteItems(jsItems,
            permanentDelete);
    }

    async fetchFolders(): Promise<any> {
        let result = await this.component.fetchFolders();
        let { buildDotNetPortalFolder } = await import('./portalFolder');
        return result.map(async i => await buildDotNetPortalFolder(i));
    }

    async fetchGroups(): Promise<any> {
        return await this.component.fetchGroups();
    }

    async fetchItems(folder: any,
        inRecycleBin: any,
        includeSubfolderItems: any,
        num: any,
        sortField: any,
        sortOrder: any,
        start: any): Promise<any> {
        let { buildJsPortalFolder } = await import('./portalFolder');
        let jsFolder = await buildJsPortalFolder(folder) as any;
        return await this.component.fetchItems(jsFolder,
            inRecycleBin,
            includeSubfolderItems,
            num,
            sortField,
            sortOrder,
            start);
    }

    async fetchTags(): Promise<any> {
        return await this.component.fetchTags();
    }

    async getThumbnailUrl(width: any): Promise<any> {
        return this.component.getThumbnailUrl(width);
    }

    async queryFavorites(queryParams: any): Promise<any> {
        return await this.component.queryFavorites(queryParams);
    }

    async restoreItem(item: any,
        folder: any): Promise<any> {
        let { buildJsPortalItem } = await import('./portalItem');
        let jsItem = await buildJsPortalItem(item) as any;
        let { buildJsPortalFolder } = await import('./portalFolder');
        let jsFolder = await buildJsPortalFolder(folder) as any;
        return await this.component.restoreItem(jsItem,
            jsFolder);
    }

    // region properties
    
    async getPortal(): Promise<any> {
        let { buildDotNetPortal } = await import('./portal');
        return await buildDotNetPortal(this.component.portal);
    }
    async setPortal(value: any): Promise<void> {
        let { buildJsPortal } = await import('./portal');
        this.component.portal = await buildJsPortal(value);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}
export async function buildJsPortalUserGenerated(dotNetObject: any): Promise<any> {
    let { default: PortalUser } = await import('@arcgis/core/portal/PortalUser');
    let jsPortalUser = new PortalUser();
    if (hasValue(dotNetObject.access)) {
        jsPortalUser.access = dotNetObject.access;
    }
    if (hasValue(dotNetObject.created)) {
        jsPortalUser.created = dotNetObject.created;
    }
    if (hasValue(dotNetObject.culture)) {
        jsPortalUser.culture = dotNetObject.culture;
    }
    if (hasValue(dotNetObject.description)) {
        jsPortalUser.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.email)) {
        jsPortalUser.email = dotNetObject.email;
    }
    if (hasValue(dotNetObject.fullName)) {
        jsPortalUser.fullName = dotNetObject.fullName;
    }
    if (hasValue(dotNetObject.modified)) {
        jsPortalUser.modified = dotNetObject.modified;
    }
    if (hasValue(dotNetObject.orgId)) {
        jsPortalUser.orgId = dotNetObject.orgId;
    }
    if (hasValue(dotNetObject.preferredView)) {
        jsPortalUser.preferredView = dotNetObject.preferredView;
    }
    if (hasValue(dotNetObject.privileges)) {
        jsPortalUser.privileges = dotNetObject.privileges;
    }
    if (hasValue(dotNetObject.region)) {
        jsPortalUser.region = dotNetObject.region;
    }
    if (hasValue(dotNetObject.role)) {
        jsPortalUser.role = dotNetObject.role;
    }
    if (hasValue(dotNetObject.roleId)) {
        jsPortalUser.roleId = dotNetObject.roleId;
    }
    if (hasValue(dotNetObject.units)) {
        jsPortalUser.units = dotNetObject.units;
    }
    if (hasValue(dotNetObject.username)) {
        jsPortalUser.username = dotNetObject.username;
    }
    let { default: PortalUserWrapper } = await import('./portalUser');
    let portalUserWrapper = new PortalUserWrapper(jsPortalUser);
    jsPortalUser.id = dotNetObject.id;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(portalUserWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = portalUserWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsPortalUser;
    
    return jsPortalUser;
}

export async function buildDotNetPortalUserGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPortalUser: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetPortalUser.access = jsObject.access;
        dotNetPortalUser.created = jsObject.created;
        dotNetPortalUser.culture = jsObject.culture;
        dotNetPortalUser.description = jsObject.description;
        dotNetPortalUser.email = jsObject.email;
        dotNetPortalUser.fullName = jsObject.fullName;
        dotNetPortalUser.modified = jsObject.modified;
        dotNetPortalUser.orgId = jsObject.orgId;
        dotNetPortalUser.preferredView = jsObject.preferredView;
        dotNetPortalUser.privileges = jsObject.privileges;
        dotNetPortalUser.region = jsObject.region;
        dotNetPortalUser.role = jsObject.role;
        dotNetPortalUser.roleId = jsObject.roleId;
        dotNetPortalUser.sourceJSON = jsObject.sourceJSON;
        dotNetPortalUser.thumbnailUrl = jsObject.thumbnailUrl;
        dotNetPortalUser.units = jsObject.units;
        dotNetPortalUser.userContentUrl = jsObject.userContentUrl;
        dotNetPortalUser.username = jsObject.username;
    return dotNetPortalUser;
}

