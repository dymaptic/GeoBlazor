// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import PortalUser from '@arcgis/core/portal/PortalUser';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, generateSerializableJson } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PortalUserGenerated implements IPropertyWrapper {
    public component: PortalUser;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: PortalUser) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {

        if (hasValue(dotNetObject.access)) {
            this.component.access = dotNetObject.access;
        }
        if (hasValue(dotNetObject.created)) {
            this.component.created = dotNetObject.created;
        }
        if (hasValue(dotNetObject.culture)) {
            this.component.culture = dotNetObject.culture;
        }
        if (hasValue(dotNetObject.description)) {
            this.component.description = dotNetObject.description;
        }
        if (hasValue(dotNetObject.email)) {
            this.component.email = dotNetObject.email;
        }
        if (hasValue(dotNetObject.fullName)) {
            this.component.fullName = dotNetObject.fullName;
        }
        if (hasValue(dotNetObject.modified)) {
            this.component.modified = dotNetObject.modified;
        }
        if (hasValue(dotNetObject.orgId)) {
            this.component.orgId = dotNetObject.orgId;
        }
        if (hasValue(dotNetObject.preferredView)) {
            this.component.preferredView = dotNetObject.preferredView;
        }
        if (hasValue(dotNetObject.privileges) && dotNetObject.privileges.length > 0) {
            this.component.privileges = dotNetObject.privileges;
        }
        if (hasValue(dotNetObject.region)) {
            this.component.region = dotNetObject.region;
        }
        if (hasValue(dotNetObject.role)) {
            this.component.role = dotNetObject.role;
        }
        if (hasValue(dotNetObject.roleId)) {
            this.component.roleId = dotNetObject.roleId;
        }
        if (hasValue(dotNetObject.units)) {
            this.component.units = dotNetObject.units;
        }
        if (hasValue(dotNetObject.username)) {
            this.component.username = dotNetObject.username;
        }
    }
    
    async addItem(parameters: any): Promise<any> {
        let { buildJsPortalUserAddItemParams } = await import('./portalUserAddItemParams');
        let jsparameters = await buildJsPortalUserAddItemParams(parameters, this.layerId, this.viewId) as any;
        let result = await this.component.addItem(jsparameters);
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(result);
    }

    async deleteItem(item: any,
        permanentDelete: any): Promise<any> {
        let { buildJsPortalItem } = await import('./portalItem');
        let jsItem = await buildJsPortalItem(item, this.layerId, this.viewId) as any;
        return await this.component.deleteItem(jsItem,
            permanentDelete);
    }

    async deleteItems(items: any,
        permanentDelete: any): Promise<any> {
        let { buildJsPortalItem } = await import('./portalItem');
        let jsItems = await Promise.all(await items.map(async i => await buildJsPortalItem(i, this.layerId, this.viewId))) as any;
        return await this.component.deleteItems(jsItems,
            permanentDelete);
    }

    async fetchFolders(): Promise<any> {
        return await this.component.fetchFolders();
    }

    async fetchGroups(): Promise<any> {
        let result = await this.component.fetchGroups();
        let { buildDotNetPortalGroup } = await import('./portalGroup');
        return await Promise.all(result.map(async i => await buildDotNetPortalGroup(i, this.layerId, this.viewId)));
    }

    async fetchItems(parameters: any): Promise<any> {
        let { buildJsPortalUserFetchItemsParams } = await import('./portalUserFetchItemsParams');
        let jsparameters = await buildJsPortalUserFetchItemsParams(parameters, this.layerId, this.viewId) as any;
        return await this.component.fetchItems(jsparameters);
    }

    async fetchTags(): Promise<any> {
        return await this.component.fetchTags();
    }

    async getThumbnailUrl(width: any): Promise<any> {
        return this.component.getThumbnailUrl(width);
    }

    async queryFavorites(queryParams: any): Promise<any> {
        let { buildJsPortalQueryParams } = await import('./portalQueryParams');
        let jsQueryParams = await buildJsPortalQueryParams(queryParams, this.layerId, this.viewId) as any;
        return await this.component.queryFavorites(jsQueryParams);
    }

    async restoreItem(item: any,
        folder: any): Promise<any> {
        let { buildJsPortalItem } = await import('./portalItem');
        let jsItem = await buildJsPortalItem(item, this.layerId, this.viewId) as any;
        let { buildJsPortalFolder } = await import('./portalFolder');
        let jsFolder = await buildJsPortalFolder(folder) as any;
        return await this.component.restoreItem(jsItem,
            jsFolder);
    }

    // region properties
    
    async getPortal(): Promise<any> {
        if (!hasValue(this.component.portal)) {
            return null;
        }
        
        let { buildDotNetPortal } = await import('./portal');
        return await buildDotNetPortal(this.component.portal);
    }
    
    async setPortal(value: any): Promise<void> {
        let { buildJsPortal } = await import('./portal');
        this.component.portal = await  buildJsPortal(value, this.layerId, this.viewId);
    }
    
    getSourceJSON(): any {
        if (!hasValue(this.component.sourceJSON)) {
            return null;
        }
        
        let json = generateSerializableJson(this.component.sourceJSON);
        return json;
    }
    
    setSourceJSON(value: any): void {
        this.component.sourceJSON = JSON.parse(value);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsPortalUserGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.access)) {
        properties.access = dotNetObject.access;
    }
    if (hasValue(dotNetObject.created)) {
        properties.created = dotNetObject.created;
    }
    if (hasValue(dotNetObject.culture)) {
        properties.culture = dotNetObject.culture;
    }
    if (hasValue(dotNetObject.description)) {
        properties.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.email)) {
        properties.email = dotNetObject.email;
    }
    if (hasValue(dotNetObject.fullName)) {
        properties.fullName = dotNetObject.fullName;
    }
    if (hasValue(dotNetObject.modified)) {
        properties.modified = dotNetObject.modified;
    }
    if (hasValue(dotNetObject.orgId)) {
        properties.orgId = dotNetObject.orgId;
    }
    if (hasValue(dotNetObject.preferredView)) {
        properties.preferredView = dotNetObject.preferredView;
    }
    if (hasValue(dotNetObject.privileges) && dotNetObject.privileges.length > 0) {
        properties.privileges = dotNetObject.privileges;
    }
    if (hasValue(dotNetObject.region)) {
        properties.region = dotNetObject.region;
    }
    if (hasValue(dotNetObject.role)) {
        properties.role = dotNetObject.role;
    }
    if (hasValue(dotNetObject.roleId)) {
        properties.roleId = dotNetObject.roleId;
    }
    if (hasValue(dotNetObject.units)) {
        properties.units = dotNetObject.units;
    }
    if (hasValue(dotNetObject.username)) {
        properties.username = dotNetObject.username;
    }
    let jsPortalUser = new PortalUser(properties);

    let { default: PortalUserWrapper } = await import('./portalUser');
    let portalUserWrapper = new PortalUserWrapper(jsPortalUser);
    portalUserWrapper.geoBlazorId = dotNetObject.id;
    portalUserWrapper.viewId = viewId;
    portalUserWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = portalUserWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsPortalUser;
    
    return jsPortalUser;
}


export async function buildDotNetPortalUserGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPortalUser: any = {};
    
    if (hasValue(jsObject.access)) {
        dotNetPortalUser.access = removeCircularReferences(jsObject.access);
    }
    
    if (hasValue(jsObject.created)) {
        dotNetPortalUser.created = jsObject.created;
    }
    
    if (hasValue(jsObject.culture)) {
        dotNetPortalUser.culture = jsObject.culture;
    }
    
    if (hasValue(jsObject.description)) {
        dotNetPortalUser.description = jsObject.description;
    }
    
    if (hasValue(jsObject.email)) {
        dotNetPortalUser.email = jsObject.email;
    }
    
    if (hasValue(jsObject.fullName)) {
        dotNetPortalUser.fullName = jsObject.fullName;
    }
    
    if (hasValue(jsObject.modified)) {
        dotNetPortalUser.modified = jsObject.modified;
    }
    
    if (hasValue(jsObject.orgId)) {
        dotNetPortalUser.orgId = jsObject.orgId;
    }
    
    if (hasValue(jsObject.preferredView)) {
        dotNetPortalUser.preferredView = jsObject.preferredView;
    }
    
    if (hasValue(jsObject.privileges)) {
        dotNetPortalUser.privileges = jsObject.privileges;
    }
    
    if (hasValue(jsObject.region)) {
        dotNetPortalUser.region = jsObject.region;
    }
    
    if (hasValue(jsObject.role)) {
        dotNetPortalUser.role = removeCircularReferences(jsObject.role);
    }
    
    if (hasValue(jsObject.roleId)) {
        dotNetPortalUser.roleId = jsObject.roleId;
    }
    
    if (hasValue(jsObject.thumbnailUrl)) {
        dotNetPortalUser.thumbnailUrl = jsObject.thumbnailUrl;
    }
    
    if (hasValue(jsObject.units)) {
        dotNetPortalUser.units = removeCircularReferences(jsObject.units);
    }
    
    if (hasValue(jsObject.userContentUrl)) {
        dotNetPortalUser.userContentUrl = jsObject.userContentUrl;
    }
    
    if (hasValue(jsObject.username)) {
        dotNetPortalUser.username = jsObject.username;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetPortalUser.id = geoBlazorId;
    }

    return dotNetPortalUser;
}

