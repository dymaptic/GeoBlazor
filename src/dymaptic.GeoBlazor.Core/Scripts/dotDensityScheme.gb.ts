// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetDotDensityScheme } from './dotDensityScheme';
import DotDensityScheme = __esri.DotDensityScheme;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsDotDensitySchemeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsDotDensityScheme: any = {}
    if (hasValue(dotNetObject.colors)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsDotDensityScheme.colors = dotNetObject.colors.map(i => buildJsMapColor(i)) as any;
    }
    if (hasValue(dotNetObject.outline)) {
        let { buildJsDotDensitySchemeOutline } = await import('./dotDensitySchemeOutline');
        jsDotDensityScheme.outline = await buildJsDotDensitySchemeOutline(dotNetObject.outline, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.name)) {
        jsDotDensityScheme.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.opacity)) {
        jsDotDensityScheme.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.tags)) {
        jsDotDensityScheme.tags = dotNetObject.tags;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsDotDensityScheme);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsDotDensityScheme;
    
    let dnInstantiatedObject = await buildDotNetDotDensityScheme(jsDotDensityScheme);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DotDensityScheme', e);
    }
    
    return jsDotDensityScheme;
}

export async function buildDotNetDotDensitySchemeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDotDensityScheme: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.colors)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetDotDensityScheme.colors = jsObject.colors.map(i => buildDotNetMapColor(i));
        }
        if (hasValue(jsObject.outline)) {
            let { buildDotNetDotDensitySchemeOutline } = await import('./dotDensitySchemeOutline');
            dotNetDotDensityScheme.outline = await buildDotNetDotDensitySchemeOutline(jsObject.outline);
        }
        if (hasValue(jsObject.name)) {
            dotNetDotDensityScheme.name = jsObject.name;
        }
        if (hasValue(jsObject.opacity)) {
            dotNetDotDensityScheme.opacity = jsObject.opacity;
        }
        if (hasValue(jsObject.tags)) {
            dotNetDotDensityScheme.tags = jsObject.tags;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetDotDensityScheme.id = k;
                break;
            }
        }
    }

    return dotNetDotDensityScheme;
}

