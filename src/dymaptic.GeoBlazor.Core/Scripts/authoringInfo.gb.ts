// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetAuthoringInfo } from './authoringInfo';
import AuthoringInfo from '@arcgis/core/renderers/support/AuthoringInfo';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsAuthoringInfoGenerated(dotNetObject: any): Promise<any> {
    let jsAuthoringInfo = new AuthoringInfo();
    if (hasValue(dotNetObject.colorRamp)) {
        let { buildJsColorRamp } = await import('./colorRamp');
        jsAuthoringInfo.colorRamp = buildJsColorRamp(dotNetObject.colorRamp) as any;
    }

    if (hasValue(dotNetObject.classificationMethod)) {
        jsAuthoringInfo.classificationMethod = dotNetObject.classificationMethod;
    }
    if (hasValue(dotNetObject.fadeRatio)) {
        jsAuthoringInfo.fadeRatio = dotNetObject.fadeRatio;
    }
    if (hasValue(dotNetObject.field1)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedField1 } = dotNetObject.field1;
        jsAuthoringInfo.field1 = sanitizedField1;
    }
    if (hasValue(dotNetObject.field2)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedField2 } = dotNetObject.field2;
        jsAuthoringInfo.field2 = sanitizedField2;
    }
    if (hasValue(dotNetObject.fields)) {
        jsAuthoringInfo.fields = dotNetObject.fields;
    }
    if (hasValue(dotNetObject.flowTheme)) {
        jsAuthoringInfo.flowTheme = dotNetObject.flowTheme;
    }
    if (hasValue(dotNetObject.focus)) {
        jsAuthoringInfo.focus = dotNetObject.focus;
    }
    if (hasValue(dotNetObject.isAutoGenerated)) {
        jsAuthoringInfo.isAutoGenerated = dotNetObject.isAutoGenerated;
    }
    if (hasValue(dotNetObject.lengthUnit)) {
        jsAuthoringInfo.lengthUnit = dotNetObject.lengthUnit;
    }
    if (hasValue(dotNetObject.maxSliderValue)) {
        jsAuthoringInfo.maxSliderValue = dotNetObject.maxSliderValue;
    }
    if (hasValue(dotNetObject.minSliderValue)) {
        jsAuthoringInfo.minSliderValue = dotNetObject.minSliderValue;
    }
    if (hasValue(dotNetObject.numClasses)) {
        jsAuthoringInfo.numClasses = dotNetObject.numClasses;
    }
    if (hasValue(dotNetObject.standardDeviationInterval)) {
        jsAuthoringInfo.standardDeviationInterval = dotNetObject.standardDeviationInterval;
    }
    if (hasValue(dotNetObject.statistics)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedStatistics } = dotNetObject.statistics;
        jsAuthoringInfo.statistics = sanitizedStatistics;
    }
    if (hasValue(dotNetObject.univariateSymbolStyle)) {
        jsAuthoringInfo.univariateSymbolStyle = dotNetObject.univariateSymbolStyle;
    }
    if (hasValue(dotNetObject.univariateTheme)) {
        jsAuthoringInfo.univariateTheme = dotNetObject.univariateTheme;
    }
    if (hasValue(dotNetObject.visualVariables)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedVisualVariables } = dotNetObject.visualVariables;
        jsAuthoringInfo.visualVariables = sanitizedVisualVariables;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsAuthoringInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsAuthoringInfo;
    
    let dnInstantiatedObject = await buildDotNetAuthoringInfo(jsAuthoringInfo);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for AuthoringInfo', e);
    }
    
    return jsAuthoringInfo;
}

export async function buildDotNetAuthoringInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAuthoringInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.colorRamp)) {
            let { buildDotNetColorRamp } = await import('./colorRamp');
            dotNetAuthoringInfo.colorRamp = buildDotNetColorRamp(jsObject.colorRamp);
        }
        if (hasValue(jsObject.classificationMethod)) {
            dotNetAuthoringInfo.classificationMethod = jsObject.classificationMethod;
        }
        if (hasValue(jsObject.fadeRatio)) {
            dotNetAuthoringInfo.fadeRatio = jsObject.fadeRatio;
        }
        if (hasValue(jsObject.field1)) {
            dotNetAuthoringInfo.field1 = jsObject.field1;
        }
        if (hasValue(jsObject.field2)) {
            dotNetAuthoringInfo.field2 = jsObject.field2;
        }
        if (hasValue(jsObject.fields)) {
            dotNetAuthoringInfo.fields = jsObject.fields;
        }
        if (hasValue(jsObject.flowTheme)) {
            dotNetAuthoringInfo.flowTheme = jsObject.flowTheme;
        }
        if (hasValue(jsObject.focus)) {
            dotNetAuthoringInfo.focus = jsObject.focus;
        }
        if (hasValue(jsObject.isAutoGenerated)) {
            dotNetAuthoringInfo.isAutoGenerated = jsObject.isAutoGenerated;
        }
        if (hasValue(jsObject.lengthUnit)) {
            dotNetAuthoringInfo.lengthUnit = jsObject.lengthUnit;
        }
        if (hasValue(jsObject.maxSliderValue)) {
            dotNetAuthoringInfo.maxSliderValue = jsObject.maxSliderValue;
        }
        if (hasValue(jsObject.minSliderValue)) {
            dotNetAuthoringInfo.minSliderValue = jsObject.minSliderValue;
        }
        if (hasValue(jsObject.numClasses)) {
            dotNetAuthoringInfo.numClasses = jsObject.numClasses;
        }
        if (hasValue(jsObject.standardDeviationInterval)) {
            dotNetAuthoringInfo.standardDeviationInterval = jsObject.standardDeviationInterval;
        }
        if (hasValue(jsObject.statistics)) {
            dotNetAuthoringInfo.statistics = jsObject.statistics;
        }
        if (hasValue(jsObject.type)) {
            dotNetAuthoringInfo.type = jsObject.type;
        }
        if (hasValue(jsObject.univariateSymbolStyle)) {
            dotNetAuthoringInfo.univariateSymbolStyle = jsObject.univariateSymbolStyle;
        }
        if (hasValue(jsObject.univariateTheme)) {
            dotNetAuthoringInfo.univariateTheme = jsObject.univariateTheme;
        }
        if (hasValue(jsObject.visualVariables)) {
            dotNetAuthoringInfo.visualVariables = jsObject.visualVariables;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetAuthoringInfo.id = k;
                break;
            }
        }
    }

    return dotNetAuthoringInfo;
}

