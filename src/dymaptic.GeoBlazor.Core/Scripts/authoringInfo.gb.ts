// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import AuthoringInfo from '@arcgis/core/renderers/support/AuthoringInfo';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetAuthoringInfo } from './authoringInfo';

export async function buildJsAuthoringInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.colorRamp)) {
        let { buildJsColorRamp } = await import('./colorRamp');
        properties.colorRamp = buildJsColorRamp(dotNetObject.colorRamp) as any;
    }
    if (hasValue(dotNetObject.field1)) {
        let { buildJsAuthoringInfoField } = await import('./authoringInfoField');
        properties.field1 = await buildJsAuthoringInfoField(dotNetObject.field1, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.field2)) {
        let { buildJsAuthoringInfoField } = await import('./authoringInfoField');
        properties.field2 = await buildJsAuthoringInfoField(dotNetObject.field2, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.statistics)) {
        let { buildJsAuthoringInfoStatistics } = await import('./authoringInfoStatistics');
        properties.statistics = await buildJsAuthoringInfoStatistics(dotNetObject.statistics, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.visualVariables)) {
        let { buildJsAuthoringInfoVisualVariable } = await import('./authoringInfoVisualVariable');
        properties.visualVariables = await Promise.all(dotNetObject.visualVariables.map(async i => await buildJsAuthoringInfoVisualVariable(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.classificationMethod)) {
        properties.classificationMethod = dotNetObject.classificationMethod;
    }
    if (hasValue(dotNetObject.fadeRatio)) {
        properties.fadeRatio = dotNetObject.fadeRatio;
    }
    if (hasValue(dotNetObject.fields)) {
        properties.fields = dotNetObject.fields;
    }
    if (hasValue(dotNetObject.flowTheme)) {
        properties.flowTheme = dotNetObject.flowTheme;
    }
    if (hasValue(dotNetObject.focus)) {
        properties.focus = dotNetObject.focus;
    }
    if (hasValue(dotNetObject.isAutoGenerated)) {
        properties.isAutoGenerated = dotNetObject.isAutoGenerated;
    }
    if (hasValue(dotNetObject.lengthUnit)) {
        properties.lengthUnit = dotNetObject.lengthUnit;
    }
    if (hasValue(dotNetObject.maxSliderValue)) {
        properties.maxSliderValue = dotNetObject.maxSliderValue;
    }
    if (hasValue(dotNetObject.minSliderValue)) {
        properties.minSliderValue = dotNetObject.minSliderValue;
    }
    if (hasValue(dotNetObject.numClasses)) {
        properties.numClasses = dotNetObject.numClasses;
    }
    if (hasValue(dotNetObject.standardDeviationInterval)) {
        properties.standardDeviationInterval = dotNetObject.standardDeviationInterval;
    }
    if (hasValue(dotNetObject.univariateSymbolStyle)) {
        properties.univariateSymbolStyle = dotNetObject.univariateSymbolStyle;
    }
    if (hasValue(dotNetObject.univariateTheme)) {
        properties.univariateTheme = dotNetObject.univariateTheme;
    }
    let jsAuthoringInfo = new AuthoringInfo(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsAuthoringInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsAuthoringInfo;
    
    let { buildDotNetAuthoringInfo } = await import('./authoringInfo');
    let dnInstantiatedObject = await buildDotNetAuthoringInfo(jsAuthoringInfo);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type AuthoringInfo detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for AuthoringInfo', e);
    }
    
    return jsAuthoringInfo;
}


export async function buildDotNetAuthoringInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAuthoringInfo: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.colorRamp)) {
        let { buildDotNetColorRamp } = await import('./colorRamp');
        dotNetAuthoringInfo.colorRamp = buildDotNetColorRamp(jsObject.colorRamp);
    }
    if (hasValue(jsObject.field1)) {
        let { buildDotNetAuthoringInfoField } = await import('./authoringInfoField');
        dotNetAuthoringInfo.field1 = await buildDotNetAuthoringInfoField(jsObject.field1);
    }
    if (hasValue(jsObject.field2)) {
        let { buildDotNetAuthoringInfoField } = await import('./authoringInfoField');
        dotNetAuthoringInfo.field2 = await buildDotNetAuthoringInfoField(jsObject.field2);
    }
    if (hasValue(jsObject.statistics)) {
        let { buildDotNetAuthoringInfoStatistics } = await import('./authoringInfoStatistics');
        dotNetAuthoringInfo.statistics = await buildDotNetAuthoringInfoStatistics(jsObject.statistics);
    }
    if (hasValue(jsObject.visualVariables)) {
        let { buildDotNetAuthoringInfoVisualVariable } = await import('./authoringInfoVisualVariable');
        dotNetAuthoringInfo.visualVariables = await Promise.all(jsObject.visualVariables.map(async i => await buildDotNetAuthoringInfoVisualVariable(i)));
    }
    if (hasValue(jsObject.classificationMethod)) {
        dotNetAuthoringInfo.classificationMethod = jsObject.classificationMethod;
    }
    if (hasValue(jsObject.fadeRatio)) {
        dotNetAuthoringInfo.fadeRatio = jsObject.fadeRatio;
    }
    if (hasValue(jsObject.fields)) {
        dotNetAuthoringInfo.fields = jsObject.fields;
    }
    if (hasValue(jsObject.flowTheme)) {
        dotNetAuthoringInfo.flowTheme = jsObject.flowTheme;
    }
    if (hasValue(jsObject.focus)) {
        dotNetAuthoringInfo.focus = jsObject.focus;
    }
    if (hasValue(jsObject.isAutoGenerated)) {
        dotNetAuthoringInfo.isAutoGenerated = jsObject.isAutoGenerated;
    }
    if (hasValue(jsObject.lengthUnit)) {
        dotNetAuthoringInfo.lengthUnit = jsObject.lengthUnit;
    }
    if (hasValue(jsObject.maxSliderValue)) {
        dotNetAuthoringInfo.maxSliderValue = jsObject.maxSliderValue;
    }
    if (hasValue(jsObject.minSliderValue)) {
        dotNetAuthoringInfo.minSliderValue = jsObject.minSliderValue;
    }
    if (hasValue(jsObject.numClasses)) {
        dotNetAuthoringInfo.numClasses = jsObject.numClasses;
    }
    if (hasValue(jsObject.standardDeviationInterval)) {
        dotNetAuthoringInfo.standardDeviationInterval = jsObject.standardDeviationInterval;
    }
    if (hasValue(jsObject.type)) {
        dotNetAuthoringInfo.type = jsObject.type;
    }
    if (hasValue(jsObject.univariateSymbolStyle)) {
        dotNetAuthoringInfo.univariateSymbolStyle = jsObject.univariateSymbolStyle;
    }
    if (hasValue(jsObject.univariateTheme)) {
        dotNetAuthoringInfo.univariateTheme = jsObject.univariateTheme;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetAuthoringInfo.id = k;
                break;
            }
        }
    }

    return dotNetAuthoringInfo;
}

