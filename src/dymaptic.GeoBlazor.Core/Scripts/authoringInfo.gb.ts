// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import AuthoringInfo from '@arcgis/core/renderers/support/AuthoringInfo';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class AuthoringInfoGenerated implements IPropertyWrapper {
    public component: AuthoringInfo;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: AuthoringInfo) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getColorRamp(layerId: string | null, viewId: string | null): Promise<any> {
        let { buildDotNetColorRamp } = await import('./colorRamp');
        return await buildDotNetColorRamp(this.component.colorRamp, layerId, viewId);
    }
    async setColorRamp(value: any, layerId: string | null, viewId: string | null): Promise<void> {
        let { buildJsColorRamp } = await import('./colorRamp');
        this.component.colorRamp = await buildJsColorRamp(value, layerId, viewId);
    }
    async getField1(layerId: string | null, viewId: string | null): Promise<any> {
        let { buildDotNetAuthoringInfoField } = await import('./authoringInfoField');
        return await buildDotNetAuthoringInfoField(this.component.field1, layerId, viewId);
    }
    async setField1(value: any, layerId: string | null, viewId: string | null): Promise<void> {
        let { buildJsAuthoringInfoField } = await import('./authoringInfoField');
        this.component.field1 = await buildJsAuthoringInfoField(value, layerId, viewId);
    }
    async getField2(layerId: string | null, viewId: string | null): Promise<any> {
        let { buildDotNetAuthoringInfoField } = await import('./authoringInfoField');
        return await buildDotNetAuthoringInfoField(this.component.field2, layerId, viewId);
    }
    async setField2(value: any, layerId: string | null, viewId: string | null): Promise<void> {
        let { buildJsAuthoringInfoField } = await import('./authoringInfoField');
        this.component.field2 = await buildJsAuthoringInfoField(value, layerId, viewId);
    }
    async getStatistics(layerId: string | null, viewId: string | null): Promise<any> {
        let { buildDotNetAuthoringInfoStatistics } = await import('./authoringInfoStatistics');
        return await buildDotNetAuthoringInfoStatistics(this.component.statistics, layerId, viewId);
    }
    async setStatistics(value: any, layerId: string | null, viewId: string | null): Promise<void> {
        let { buildJsAuthoringInfoStatistics } = await import('./authoringInfoStatistics');
        this.component.statistics = await buildJsAuthoringInfoStatistics(value, layerId, viewId);
    }
    async getVisualVariables(layerId: string | null, viewId: string | null): Promise<any> {
        let { buildDotNetAuthoringInfoVisualVariable } = await import('./authoringInfoVisualVariable');
        return this.component.visualVariables.map(async i => await buildDotNetAuthoringInfoVisualVariable(i, layerId, viewId));
    }
    
    async setVisualVariables(value: any, layerId: string | null, viewId: string | null): Promise<void> {
        let { buildJsAuthoringInfoVisualVariable } = await import('./authoringInfoVisualVariable');
        this.component.visualVariables = value.map(async i => await buildJsAuthoringInfoVisualVariable(i, layerId, viewId));
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsAuthoringInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let { default: AuthoringInfo } = await import('@arcgis/core/renderers/support/AuthoringInfo');
    let jsAuthoringInfo = new AuthoringInfo();
    if (hasValue(dotNetObject.colorRamp)) {
        let { buildJsColorRamp } = await import('./jsBuilder');
        jsAuthoringInfo.colorRamp = buildJsColorRamp(dotNetObject.colorRamp, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.field1)) {
        let { buildJsAuthoringInfoField } = await import('./authoringInfoField');
        jsAuthoringInfo.field1 = await buildJsAuthoringInfoField(dotNetObject.field1, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.field2)) {
        let { buildJsAuthoringInfoField } = await import('./authoringInfoField');
        jsAuthoringInfo.field2 = await buildJsAuthoringInfoField(dotNetObject.field2, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.statistics)) {
        let { buildJsAuthoringInfoStatistics } = await import('./authoringInfoStatistics');
        jsAuthoringInfo.statistics = await buildJsAuthoringInfoStatistics(dotNetObject.statistics, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.visualVariables)) {
        let { buildJsAuthoringInfoVisualVariable } = await import('./authoringInfoVisualVariable');
        jsAuthoringInfo.visualVariables = dotNetObject.visualVariables.map(async i => await buildJsAuthoringInfoVisualVariable(i, layerId, viewId)) as any;
    }
    if (hasValue(dotNetObject.classificationMethod)) {
        jsAuthoringInfo.classificationMethod = dotNetObject.classificationMethod;
    }
    if (hasValue(dotNetObject.fadeRatio)) {
        jsAuthoringInfo.fadeRatio = dotNetObject.fadeRatio;
    }
    if (hasValue(dotNetObject.fields)) {
        jsAuthoringInfo.fields = dotNetObject.fields;
    }
    if (hasValue(dotNetObject.flowTheme)) {
        jsAuthoringInfo.flowTheme = dotNetObject.flowTheme;
    }
    if (hasValue(dotNetObject.focus)) {
        jsAuthoringInfo.focus = dotNetObject.focus;
    }
    if (hasValue(dotNetObject.isAutoGenerated)) {
        jsAuthoringInfo.isAutoGenerated = dotNetObject.isAutoGenerated;
    }
    if (hasValue(dotNetObject.lengthUnit)) {
        jsAuthoringInfo.lengthUnit = dotNetObject.lengthUnit;
    }
    if (hasValue(dotNetObject.maxSliderValue)) {
        jsAuthoringInfo.maxSliderValue = dotNetObject.maxSliderValue;
    }
    if (hasValue(dotNetObject.minSliderValue)) {
        jsAuthoringInfo.minSliderValue = dotNetObject.minSliderValue;
    }
    if (hasValue(dotNetObject.numClasses)) {
        jsAuthoringInfo.numClasses = dotNetObject.numClasses;
    }
    if (hasValue(dotNetObject.standardDeviationInterval)) {
        jsAuthoringInfo.standardDeviationInterval = dotNetObject.standardDeviationInterval;
    }
    if (hasValue(dotNetObject.type)) {
        jsAuthoringInfo.type = dotNetObject.type;
    }
    if (hasValue(dotNetObject.univariateSymbolStyle)) {
        jsAuthoringInfo.univariateSymbolStyle = dotNetObject.univariateSymbolStyle;
    }
    if (hasValue(dotNetObject.univariateTheme)) {
        jsAuthoringInfo.univariateTheme = dotNetObject.univariateTheme;
    }
    let { default: AuthoringInfoWrapper } = await import('./authoringInfo');
    let authoringInfoWrapper = new AuthoringInfoWrapper(jsAuthoringInfo);
    authoringInfoWrapper.geoBlazorId = dotNetObject.id;
    authoringInfoWrapper.viewId = viewId;
    authoringInfoWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(authoringInfoWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = authoringInfoWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsAuthoringInfo;
    
    return jsAuthoringInfo;
}

export async function buildDotNetAuthoringInfoGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAuthoringInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.colorRamp)) {
            let { buildDotNetColorRamp } = await import('./colorRamp');
            dotNetAuthoringInfo.colorRamp = buildDotNetColorRamp(jsObject.colorRamp, layerId, viewId);
        }
        if (hasValue(jsObject.field1)) {
            let { buildDotNetAuthoringInfoField } = await import('./authoringInfoField');
            dotNetAuthoringInfo.field1 = await buildDotNetAuthoringInfoField(jsObject.field1, layerId, viewId);
        }
        if (hasValue(jsObject.field2)) {
            let { buildDotNetAuthoringInfoField } = await import('./authoringInfoField');
            dotNetAuthoringInfo.field2 = await buildDotNetAuthoringInfoField(jsObject.field2, layerId, viewId);
        }
        if (hasValue(jsObject.statistics)) {
            let { buildDotNetAuthoringInfoStatistics } = await import('./authoringInfoStatistics');
            dotNetAuthoringInfo.statistics = await buildDotNetAuthoringInfoStatistics(jsObject.statistics, layerId, viewId);
        }
        if (hasValue(jsObject.visualVariables)) {
            let { buildDotNetAuthoringInfoVisualVariable } = await import('./authoringInfoVisualVariable');
            dotNetAuthoringInfo.visualVariables = jsObject.visualVariables.map(async i => await buildDotNetAuthoringInfoVisualVariable(i, layerId, viewId));
        }
        dotNetAuthoringInfo.classificationMethod = jsObject.classificationMethod;
        dotNetAuthoringInfo.fadeRatio = jsObject.fadeRatio;
        dotNetAuthoringInfo.fields = jsObject.fields;
        dotNetAuthoringInfo.flowTheme = jsObject.flowTheme;
        dotNetAuthoringInfo.focus = jsObject.focus;
        dotNetAuthoringInfo.isAutoGenerated = jsObject.isAutoGenerated;
        dotNetAuthoringInfo.lengthUnit = jsObject.lengthUnit;
        dotNetAuthoringInfo.maxSliderValue = jsObject.maxSliderValue;
        dotNetAuthoringInfo.minSliderValue = jsObject.minSliderValue;
        dotNetAuthoringInfo.numClasses = jsObject.numClasses;
        dotNetAuthoringInfo.standardDeviationInterval = jsObject.standardDeviationInterval;
        dotNetAuthoringInfo.type = jsObject.type;
        dotNetAuthoringInfo.univariateSymbolStyle = jsObject.univariateSymbolStyle;
        dotNetAuthoringInfo.univariateTheme = jsObject.univariateTheme;
    return dotNetAuthoringInfo;
}

