// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetConfig } from './config';

export async function buildJsConfigGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsConfig: any = {};
    if (hasValue(dotNetObject.fields)) {
        let { buildJsField } = await import('./field');
        jsConfig.fields = dotNetObject.fields.map(i => buildJsField(i)) as any;
    }

    if (hasValue(dotNetObject.displayField)) {
        jsConfig.displayField = dotNetObject.displayField;
    }
    if (hasValue(dotNetObject.editFieldsInfo)) {
        jsConfig.editFieldsInfo = dotNetObject.editFieldsInfo;
    }
    if (hasValue(dotNetObject.objectIdField)) {
        jsConfig.objectIdField = dotNetObject.objectIdField;
    }
    if (hasValue(dotNetObject.title)) {
        jsConfig.title = dotNetObject.title;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsConfig);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsConfig;
    
    let { buildDotNetConfig } = await import('./config');
    let dnInstantiatedObject = await buildDotNetConfig(jsConfig);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type Config detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Config', e);
    }
    
    return jsConfig;
}


export async function buildDotNetConfigGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetConfig: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.fields)) {
        let { buildDotNetField } = await import('./field');
        dotNetConfig.fields = jsObject.fields.map(i => buildDotNetField(i));
    }
    if (hasValue(jsObject.displayField)) {
        dotNetConfig.displayField = jsObject.displayField;
    }
    if (hasValue(jsObject.editFieldsInfo)) {
        dotNetConfig.editFieldsInfo = jsObject.editFieldsInfo;
    }
    if (hasValue(jsObject.objectIdField)) {
        dotNetConfig.objectIdField = jsObject.objectIdField;
    }
    if (hasValue(jsObject.title)) {
        dotNetConfig.title = jsObject.title;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetConfig.id = geoBlazorId;
    }

    return dotNetConfig;
}

