// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import ChartMediaInfoValue from '@arcgis/core/popup/content/support/ChartMediaInfoValue';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ChartMediaInfoValueGenerated implements IPropertyWrapper {
    public component: ChartMediaInfoValue;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ChartMediaInfoValue) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getSeries(): Promise<any> {
        let { buildDotNetChartMediaInfoValueSeries } = await import('./chartMediaInfoValueSeries');
        return this.component.series.map(async i => await buildDotNetChartMediaInfoValueSeries(i));
    }
    
    async setSeries(value: any): Promise<void> {
        let { buildJsChartMediaInfoValueSeries } = await import('./chartMediaInfoValueSeries');
        this.component.series = value.map(async i => await buildJsChartMediaInfoValueSeries(i, this.layerId, this.viewId));
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsChartMediaInfoValueGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsChartMediaInfoValue = new ChartMediaInfoValue();
    if (hasValue(dotNetObject.series)) {
        let { buildJsChartMediaInfoValueSeries } = await import('./chartMediaInfoValueSeries');
        jsChartMediaInfoValue.series = dotNetObject.series.map(async i => await buildJsChartMediaInfoValueSeries(i, layerId, viewId)) as any;
    }

    if (hasValue(dotNetObject.colors)) {
        jsChartMediaInfoValue.colors = dotNetObject.colors;
    }
    if (hasValue(dotNetObject.fields)) {
        jsChartMediaInfoValue.fields = dotNetObject.fields;
    }
    if (hasValue(dotNetObject.normalizeField)) {
        jsChartMediaInfoValue.normalizeField = dotNetObject.normalizeField;
    }
    if (hasValue(dotNetObject.tooltipField)) {
        jsChartMediaInfoValue.tooltipField = dotNetObject.tooltipField;
    }
    let { default: ChartMediaInfoValueWrapper } = await import('./chartMediaInfoValue');
    let chartMediaInfoValueWrapper = new ChartMediaInfoValueWrapper(jsChartMediaInfoValue);
    chartMediaInfoValueWrapper.geoBlazorId = dotNetObject.id;
    chartMediaInfoValueWrapper.viewId = viewId;
    chartMediaInfoValueWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(chartMediaInfoValueWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = chartMediaInfoValueWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsChartMediaInfoValue;
    
    return jsChartMediaInfoValue;
}

export async function buildDotNetChartMediaInfoValueGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetChartMediaInfoValue: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.series)) {
            let { buildDotNetChartMediaInfoValueSeries } = await import('./chartMediaInfoValueSeries');
            dotNetChartMediaInfoValue.series = jsObject.series.map(async i => await buildDotNetChartMediaInfoValueSeries(i));
        }
        dotNetChartMediaInfoValue.colors = jsObject.colors;
        dotNetChartMediaInfoValue.fields = jsObject.fields;
        dotNetChartMediaInfoValue.normalizeField = jsObject.normalizeField;
        dotNetChartMediaInfoValue.tooltipField = jsObject.tooltipField;

    return dotNetChartMediaInfoValue;
}

