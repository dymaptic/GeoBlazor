// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetTemplate } from './template';

export async function buildJsTemplateGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTemplate: any = {};
    if (hasValue(dotNetObject.value)) {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        jsTemplate.value = buildJsPopupTemplate(dotNetObject.value, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.name)) {
        jsTemplate.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.title)) {
        jsTemplate.title = dotNetObject.title;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsTemplate);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTemplate;
    
    let dnInstantiatedObject = await buildDotNetTemplate(jsTemplate);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Template', e);
    }
    
    return jsTemplate;
}

export async function buildDotNetTemplateGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTemplate: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.value)) {
            let { buildDotNetPopupTemplate } = await import('./popupTemplate');
            dotNetTemplate.value = await buildDotNetPopupTemplate(jsObject.value);
        }
    if (hasValue(jsObject.name)) {
        dotNetTemplate.name = jsObject.name;
    }
    if (hasValue(jsObject.title)) {
        dotNetTemplate.title = jsObject.title;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTemplate.id = k;
                break;
            }
        }
    }

    return dotNetTemplate;
}

