// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import IdentityManager from '@arcgis/core/identity/IdentityManager';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class IdentityManagerGenerated implements IPropertyWrapper {
    public component: IdentityManager;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: IdentityManager) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.dialog)) {
            let { buildJsWidget } = await import('./widget');
            this.component.dialog = await buildJsWidget(dotNetObject.dialog, this.layerId, this.viewId) as any;
        }

        if (hasValue(dotNetObject.tokenValidity)) {
            this.component.tokenValidity = dotNetObject.tokenValidity;
        }
    }
    
    async checkAppAccess(resUrl: any,
        appId: any): Promise<any> {
        return await this.component.checkAppAccess(resUrl,
            appId);
    }

    async checkSignInStatus(resUrl: any): Promise<any> {
        let result = await this.component.checkSignInStatus(resUrl);
        let { buildDotNetCredential } = await import('./credential');
        return await buildDotNetCredential(result, this.layerId, this.viewId);
    }

    async destroyCredentials(): Promise<void> {
        this.component.destroyCredentials();
    }

    async disablePostMessageAuth(): Promise<void> {
        this.component.disablePostMessageAuth();
    }

    async enablePostMessageAuth(resUrl: any): Promise<void> {
        this.component.enablePostMessageAuth(resUrl);
    }

    async findCredential(url: any,
        userId: any): Promise<any> {
        let result = this.component.findCredential(url,
            userId);
        let { buildDotNetCredential } = await import('./credential');
        return await buildDotNetCredential(result, this.layerId, this.viewId);
    }

    async findOAuthInfo(url: any): Promise<any> {
        return this.component.findOAuthInfo(url);
    }

    async findServerInfo(url: any): Promise<any> {
        return this.component.findServerInfo(url);
    }

    async generateToken(serverInfo: any,
        userInfo: any,
        options: any): Promise<any> {
        return await this.component.generateToken(serverInfo,
            userInfo,
            options);
    }

    async getCredential(url: any,
        options: any): Promise<any> {
        let result = await this.component.getCredential(url,
            options);
        let { buildDotNetCredential } = await import('./credential');
        return await buildDotNetCredential(result, this.layerId, this.viewId);
    }

    async initialize(json: any): Promise<void> {
        this.component.initialize(json);
    }

    async isBusy(): Promise<any> {
        return this.component.isBusy();
    }

    async registerOAuthInfos(oAuthInfos: any): Promise<void> {
        this.component.registerOAuthInfos(oAuthInfos);
    }

    async registerServers(serverInfos: any): Promise<void> {
        this.component.registerServers(serverInfos);
    }

    async registerToken(properties: any): Promise<void> {
        this.component.registerToken(properties);
    }

    async setOAuthRedirectionHandler(handlerFunction: any): Promise<void> {
        this.component.setOAuthRedirectionHandler(handlerFunction);
    }

    async setOAuthResponseHash(hash: any): Promise<void> {
        this.component.setOAuthResponseHash(hash);
    }

    async setProtocolErrorHandler(handlerFunction: any): Promise<void> {
        this.component.setProtocolErrorHandler(handlerFunction);
    }

    // region properties
    
    async getDialog(): Promise<any> {
        if (!hasValue(this.component.dialog)) {
            return null;
        }
        
        let { buildDotNetWidget } = await import('./widget');
        return await buildDotNetWidget(this.component.dialog);
    }
    
    async setDialog(value: any): Promise<void> {
        let { buildJsWidget } = await import('./widget');
        this.component.dialog = await  buildJsWidget(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsIdentityManagerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsIdentityManager: any = {};
    if (hasValue(dotNetObject.dialog)) {
        let { buildJsWidget } = await import('./widget');
        jsIdentityManager.dialog = await buildJsWidget(dotNetObject.dialog, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.tokenValidity)) {
        jsIdentityManager.tokenValidity = dotNetObject.tokenValidity;
    }
    jsIdentityManager.on('credential-create', async (evt: any) => {
        let { buildDotNetIdentityManagerCredentialCreateEvent } = await import('./identityManagerCredentialCreateEvent');
        let dnEvent = await buildDotNetIdentityManagerCredentialCreateEvent(evt, layerId, viewId);
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCredentialCreate', dnEvent);
    });
    
    jsIdentityManager.on('dialog-create', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsDialogCreate', evt);
    });
    

    let { default: IdentityManagerWrapper } = await import('./identityManager');
    let identityManagerWrapper = new IdentityManagerWrapper(jsIdentityManager);
    identityManagerWrapper.geoBlazorId = dotNetObject.id;
    identityManagerWrapper.viewId = viewId;
    identityManagerWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(identityManagerWrapper);
    jsObjectRefs[dotNetObject.id] = identityManagerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsIdentityManager;
    
    try {
        let { buildDotNetIdentityManager } = await import('./identityManager');
        let dnInstantiatedObject = await buildDotNetIdentityManager(jsIdentityManager, layerId, viewId);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type IdentityManager detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for IdentityManager', e);
    }
    
    return jsIdentityManager;
}


export async function buildDotNetIdentityManagerGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIdentityManager: any = {};
    
    if (hasValue(jsObject.dialog)) {
        let { buildDotNetWidget } = await import('./widget');
        dotNetIdentityManager.dialog = await buildDotNetWidget(jsObject.dialog);
    }
    
    if (hasValue(jsObject.tokenValidity)) {
        dotNetIdentityManager.tokenValidity = jsObject.tokenValidity;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetIdentityManager.id = geoBlazorId;
    }

    return dotNetIdentityManager;
}

