// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import TableListVisibleElements = __esri.TableListVisibleElements;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class TableListVisibleElementsGenerated implements IPropertyWrapper {
    public component: TableListVisibleElements;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: TableListVisibleElements) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsTableListVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTableListVisibleElements: any = {}

    if (hasValue(dotNetObject.closeButton)) {
        jsTableListVisibleElements.closeButton = dotNetObject.closeButton;
    }
    if (hasValue(dotNetObject.collapseButton)) {
        jsTableListVisibleElements.collapseButton = dotNetObject.collapseButton;
    }
    if (hasValue(dotNetObject.errors)) {
        jsTableListVisibleElements.errors = dotNetObject.errors;
    }
    if (hasValue(dotNetObject.filter)) {
        jsTableListVisibleElements.filter = dotNetObject.filter;
    }
    if (hasValue(dotNetObject.flow)) {
        jsTableListVisibleElements.flow = dotNetObject.flow;
    }
    if (hasValue(dotNetObject.heading)) {
        jsTableListVisibleElements.heading = dotNetObject.heading;
    }
    if (hasValue(dotNetObject.statusIndicators)) {
        jsTableListVisibleElements.statusIndicators = dotNetObject.statusIndicators;
    }
    if (hasValue(dotNetObject.temporaryTableIndicators)) {
        jsTableListVisibleElements.temporaryTableIndicators = dotNetObject.temporaryTableIndicators;
    }
    let { default: TableListVisibleElementsWrapper } = await import('./tableListVisibleElements');
    let tableListVisibleElementsWrapper = new TableListVisibleElementsWrapper(jsTableListVisibleElements);
    tableListVisibleElementsWrapper.geoBlazorId = dotNetObject.id;
    tableListVisibleElementsWrapper.viewId = viewId;
    tableListVisibleElementsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(tableListVisibleElementsWrapper);
    jsObjectRefs[dotNetObject.id] = tableListVisibleElementsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsTableListVisibleElements;
    
    let dnInstantiatedObject = await buildDotNetTableListVisibleElements(jsTableListVisibleElements, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TableListVisibleElements', e);
    }
    
    return jsTableListVisibleElements;
}

export async function buildDotNetTableListVisibleElementsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTableListVisibleElements: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.closeButton)) {
            dotNetTableListVisibleElements.closeButton = jsObject.closeButton;
        }
        if (hasValue(jsObject.collapseButton)) {
            dotNetTableListVisibleElements.collapseButton = jsObject.collapseButton;
        }
        if (hasValue(jsObject.errors)) {
            dotNetTableListVisibleElements.errors = jsObject.errors;
        }
        if (hasValue(jsObject.filter)) {
            dotNetTableListVisibleElements.filter = jsObject.filter;
        }
        if (hasValue(jsObject.flow)) {
            dotNetTableListVisibleElements.flow = jsObject.flow;
        }
        if (hasValue(jsObject.heading)) {
            dotNetTableListVisibleElements.heading = jsObject.heading;
        }
        if (hasValue(jsObject.statusIndicators)) {
            dotNetTableListVisibleElements.statusIndicators = jsObject.statusIndicators;
        }
        if (hasValue(jsObject.temporaryTableIndicators)) {
            dotNetTableListVisibleElements.temporaryTableIndicators = jsObject.temporaryTableIndicators;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTableListVisibleElements.id = k;
                break;
            }
        }
    }

    return dotNetTableListVisibleElements;
}

