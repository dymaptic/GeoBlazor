// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import SunLighting from '@arcgis/core/views/3d/environment/SunLighting';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SunLightingGenerated implements IPropertyWrapper {
    public component: SunLighting;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: SunLighting) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async cloneWithWebsceneLighting(): Promise<void> {
        this.component.cloneWithWebsceneLighting();
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsSunLightingGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.cameraTrackingEnabled)) {
        properties.cameraTrackingEnabled = dotNetObject.cameraTrackingEnabled;
    }
    if (hasValue(dotNetObject.date)) {
        properties.date = dotNetObject.date;
    }
    if (hasValue(dotNetObject.directShadowsEnabled)) {
        properties.directShadowsEnabled = dotNetObject.directShadowsEnabled;
    }
    if (hasValue(dotNetObject.displayUTCOffset)) {
        properties.displayUTCOffset = dotNetObject.displayUTCOffset;
    }
    let jsSunLighting = new SunLighting(properties);

    let { default: SunLightingWrapper } = await import('./sunLighting');
    let sunLightingWrapper = new SunLightingWrapper(jsSunLighting);
    sunLightingWrapper.geoBlazorId = dotNetObject.id;
    sunLightingWrapper.viewId = viewId;
    sunLightingWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(sunLightingWrapper);
    jsObjectRefs[dotNetObject.id] = sunLightingWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsSunLighting;
    
    return jsSunLighting;
}


export async function buildDotNetSunLightingGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSunLighting: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.cameraTrackingEnabled)) {
        dotNetSunLighting.cameraTrackingEnabled = jsObject.cameraTrackingEnabled;
    }
    if (hasValue(jsObject.date)) {
        dotNetSunLighting.date = jsObject.date;
    }
    if (hasValue(jsObject.directShadowsEnabled)) {
        dotNetSunLighting.directShadowsEnabled = jsObject.directShadowsEnabled;
    }
    if (hasValue(jsObject.displayUTCOffset)) {
        dotNetSunLighting.displayUTCOffset = jsObject.displayUTCOffset;
    }
    if (hasValue(jsObject.type)) {
        dotNetSunLighting.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSunLighting.id = k;
                break;
            }
        }
    }

    return dotNetSunLighting;
}

