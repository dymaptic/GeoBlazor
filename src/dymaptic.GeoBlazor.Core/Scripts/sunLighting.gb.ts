// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import SunLighting from '@arcgis/core/views/3d/environment/SunLighting';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetSunLighting } from './sunLighting';

export async function buildJsSunLightingGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.cameraTrackingEnabled)) {
        properties.cameraTrackingEnabled = dotNetObject.cameraTrackingEnabled;
    }
    if (hasValue(dotNetObject.date)) {
        properties.date = dotNetObject.date;
    }
    if (hasValue(dotNetObject.directShadowsEnabled)) {
        properties.directShadowsEnabled = dotNetObject.directShadowsEnabled;
    }
    if (hasValue(dotNetObject.displayUTCOffset)) {
        properties.displayUTCOffset = dotNetObject.displayUTCOffset;
    }
    let jsSunLighting = new SunLighting(properties);
    
    jsObjectRefs[dotNetObject.id] = jsSunLighting;
    arcGisObjectRefs[dotNetObject.id] = jsSunLighting;
    
    return jsSunLighting;
}


export async function buildDotNetSunLightingGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSunLighting: any = {};
    
    if (hasValue(jsObject.cameraTrackingEnabled)) {
        dotNetSunLighting.cameraTrackingEnabled = jsObject.cameraTrackingEnabled;
    }
    
    if (hasValue(jsObject.date)) {
        dotNetSunLighting.date = jsObject.date;
    }
    
    if (hasValue(jsObject.directShadowsEnabled)) {
        dotNetSunLighting.directShadowsEnabled = jsObject.directShadowsEnabled;
    }
    
    if (hasValue(jsObject.displayUTCOffset)) {
        dotNetSunLighting.displayUTCOffset = jsObject.displayUTCOffset;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetSunLighting.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSunLighting.id = geoBlazorId;
    }

    return dotNetSunLighting;
}

