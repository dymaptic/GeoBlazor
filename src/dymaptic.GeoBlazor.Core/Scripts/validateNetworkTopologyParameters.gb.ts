// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ValidateNetworkTopologyParameters from '@arcgis/core/rest/networks/support/ValidateNetworkTopologyParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetValidateNetworkTopologyParameters } from './validateNetworkTopologyParameters';

export async function buildJsValidateNetworkTopologyParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.validateArea)) {
        let { buildJsExtent } = await import('./extent');
        properties.validateArea = buildJsExtent(dotNetObject.validateArea) as any;
    }

    if (hasValue(dotNetObject.gdbVersion)) {
        properties.gdbVersion = dotNetObject.gdbVersion;
    }
    if (hasValue(dotNetObject.outSpatialReference)) {
        properties.outSpatialReference = dotNetObject.outSpatialReference;
    }
    if (hasValue(dotNetObject.sessionID)) {
        properties.sessionID = dotNetObject.sessionID;
    }
    if (hasValue(dotNetObject.validationSet)) {
        properties.validationSet = dotNetObject.validationSet;
    }
    if (hasValue(dotNetObject.validationType)) {
        properties.validationType = dotNetObject.validationType;
    }
    let jsValidateNetworkTopologyParameters = new ValidateNetworkTopologyParameters(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsValidateNetworkTopologyParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsValidateNetworkTopologyParameters;
    
    let dnInstantiatedObject = await buildDotNetValidateNetworkTopologyParameters(jsValidateNetworkTopologyParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ValidateNetworkTopologyParameters', e);
    }
    
    return jsValidateNetworkTopologyParameters;
}

export async function buildDotNetValidateNetworkTopologyParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetValidateNetworkTopologyParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.validateArea)) {
            let { buildDotNetExtent } = await import('./extent');
            dotNetValidateNetworkTopologyParameters.validateArea = buildDotNetExtent(jsObject.validateArea);
        }
    if (hasValue(jsObject.gdbVersion)) {
        dotNetValidateNetworkTopologyParameters.gdbVersion = jsObject.gdbVersion;
    }
    if (hasValue(jsObject.outSpatialReference)) {
        dotNetValidateNetworkTopologyParameters.outSpatialReference = jsObject.outSpatialReference;
    }
    if (hasValue(jsObject.sessionID)) {
        dotNetValidateNetworkTopologyParameters.sessionID = jsObject.sessionID;
    }
    if (hasValue(jsObject.validationSet)) {
        dotNetValidateNetworkTopologyParameters.validationSet = jsObject.validationSet;
    }
    if (hasValue(jsObject.validationType)) {
        dotNetValidateNetworkTopologyParameters.validationType = jsObject.validationType;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetValidateNetworkTopologyParameters.id = k;
                break;
            }
        }
    }

    return dotNetValidateNetworkTopologyParameters;
}

