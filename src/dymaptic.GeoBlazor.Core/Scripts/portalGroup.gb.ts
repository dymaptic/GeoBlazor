// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import PortalGroup from '@arcgis/core/portal/PortalGroup';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PortalGroupGenerated implements IPropertyWrapper {
    public component: PortalGroup;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: PortalGroup) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async fetchCategorySchema(options: any): Promise<any> {
        return await this.component.fetchCategorySchema(options);
    }

    async fetchMembers(options: any): Promise<any> {
        return await this.component.fetchMembers(options);
    }

    async getThumbnailUrl(width: any): Promise<any> {
        return this.component.getThumbnailUrl(width);
    }

    async queryItems(queryParams: any,
        options: any): Promise<any> {
        let { buildJsPortalQueryParams } = await import('./portalQueryParams');
        let jsQueryParams = await buildJsPortalQueryParams(queryParams, this.layerId, this.viewId) as any;
        return await this.component.queryItems(jsQueryParams,
            options);
    }

    // region properties
    
    async getPortal(): Promise<any> {
        if (!hasValue(this.component.portal)) {
            return null;
        }
        
        let { buildDotNetPortal } = await import('./portal');
        return await buildDotNetPortal(this.component.portal);
    }
    
    async setPortal(value: any): Promise<void> {
        let { buildJsPortal } = await import('./portal');
        this.component.portal = await  buildJsPortal(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsPortalGroupGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.portal)) {
        let { buildJsPortal } = await import('./portal');
        properties.portal = await buildJsPortal(dotNetObject.portal, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.access)) {
        properties.access = dotNetObject.access;
    }
    if (hasValue(dotNetObject.created)) {
        properties.created = dotNetObject.created;
    }
    if (hasValue(dotNetObject.description)) {
        properties.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.isInvitationOnly)) {
        properties.isInvitationOnly = dotNetObject.isInvitationOnly;
    }
    if (hasValue(dotNetObject.modified)) {
        properties.modified = dotNetObject.modified;
    }
    if (hasValue(dotNetObject.owner)) {
        properties.owner = dotNetObject.owner;
    }
    if (hasValue(dotNetObject.portalGroupId)) {
        properties.id = dotNetObject.portalGroupId;
    }
    if (hasValue(dotNetObject.snippet)) {
        properties.snippet = dotNetObject.snippet;
    }
    if (hasValue(dotNetObject.tags)) {
        properties.tags = dotNetObject.tags;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    let jsPortalGroup = new PortalGroup(properties);

    let { default: PortalGroupWrapper } = await import('./portalGroup');
    let portalGroupWrapper = new PortalGroupWrapper(jsPortalGroup);
    portalGroupWrapper.geoBlazorId = dotNetObject.id;
    portalGroupWrapper.viewId = viewId;
    portalGroupWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(portalGroupWrapper);
    jsObjectRefs[dotNetObject.id] = portalGroupWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsPortalGroup;
    
    return jsPortalGroup;
}


export async function buildDotNetPortalGroupGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPortalGroup: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.portal)) {
        let { buildDotNetPortal } = await import('./portal');
        dotNetPortalGroup.portal = await buildDotNetPortal(jsObject.portal);
    }
    if (hasValue(jsObject.access)) {
        dotNetPortalGroup.access = jsObject.access;
    }
    if (hasValue(jsObject.created)) {
        dotNetPortalGroup.created = jsObject.created;
    }
    if (hasValue(jsObject.description)) {
        dotNetPortalGroup.description = jsObject.description;
    }
    if (hasValue(jsObject.isInvitationOnly)) {
        dotNetPortalGroup.isInvitationOnly = jsObject.isInvitationOnly;
    }
    if (hasValue(jsObject.modified)) {
        dotNetPortalGroup.modified = jsObject.modified;
    }
    if (hasValue(jsObject.owner)) {
        dotNetPortalGroup.owner = jsObject.owner;
    }
    if (hasValue(jsObject.id)) {
        dotNetPortalGroup.portalGroupId = jsObject.id;
    }
    if (hasValue(jsObject.snippet)) {
        dotNetPortalGroup.snippet = jsObject.snippet;
    }
    if (hasValue(jsObject.tags)) {
        dotNetPortalGroup.tags = jsObject.tags;
    }
    if (hasValue(jsObject.thumbnailUrl)) {
        dotNetPortalGroup.thumbnailUrl = jsObject.thumbnailUrl;
    }
    if (hasValue(jsObject.title)) {
        dotNetPortalGroup.title = jsObject.title;
    }
    if (hasValue(jsObject.url)) {
        dotNetPortalGroup.url = jsObject.url;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPortalGroup.id = k;
                break;
            }
        }
    }

    return dotNetPortalGroup;
}

