// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import VoxelVolume from '@arcgis/core/layers/voxel/VoxelVolume';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class VoxelVolumeGenerated implements IPropertyWrapper {
    public component: VoxelVolume;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: VoxelVolume) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async computeLayerSpaceLocation(posInVoxelSpace: any): Promise<any> {
        return this.component.computeLayerSpaceLocation(posInVoxelSpace);
    }

    async computeVoxelSpaceLocation(pos: any): Promise<any> {
        let { buildJsPoint } = await import('./point');
        let jsPos = buildJsPoint(pos) as any;
        return this.component.computeVoxelSpaceLocation(jsPos);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsVoxelVolumeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsVoxelVolume = new VoxelVolume();

    if (hasValue(dotNetObject.sizeInVoxels)) {
        jsVoxelVolume.sizeInVoxels = dotNetObject.sizeInVoxels;
    }
    if (hasValue(dotNetObject.volumeType)) {
        jsVoxelVolume.volumeType = dotNetObject.volumeType;
    }

    let { default: VoxelVolumeWrapper } = await import('./voxelVolume');
    let voxelVolumeWrapper = new VoxelVolumeWrapper(jsVoxelVolume);
    voxelVolumeWrapper.geoBlazorId = dotNetObject.id;
    voxelVolumeWrapper.viewId = viewId;
    voxelVolumeWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(voxelVolumeWrapper);
    jsObjectRefs[dotNetObject.id] = voxelVolumeWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsVoxelVolume;
    let { buildDotNetVoxelVolume } = await import('./voxelVolume');
    let dnInstantiatedObject = await buildDotNetVoxelVolume(jsVoxelVolume);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for VoxelVolume', e);
    }
    
    return jsVoxelVolume;
}
export async function buildDotNetVoxelVolumeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVoxelVolume: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.sizeInVoxels)) {
            dotNetVoxelVolume.sizeInVoxels = jsObject.sizeInVoxels;
        }
        if (hasValue(jsObject.volumeType)) {
            dotNetVoxelVolume.volumeType = jsObject.volumeType;
        }
        if (hasValue(jsObject.id)) {
            dotNetVoxelVolume.voxelVolumeId = jsObject.id;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetVoxelVolume.id = k;
                break;
            }
        }
    }

    return dotNetVoxelVolume;
}

