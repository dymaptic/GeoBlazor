// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetFeatureTableCellPointeroverEvent } from './featureTableCellPointeroverEvent';

export async function buildJsFeatureTableCellPointeroverEventGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureTableCellPointeroverEvent: any = {};
    if (hasValue(dotNetObject.feature)) {
        let { buildJsGraphic } = await import('./graphic');
        jsFeatureTableCellPointeroverEvent.feature = buildJsGraphic(dotNetObject.feature) as any;
    }

    if (hasValue(dotNetObject.fieldName)) {
        jsFeatureTableCellPointeroverEvent.fieldName = dotNetObject.fieldName;
    }
    if (hasValue(dotNetObject.index)) {
        jsFeatureTableCellPointeroverEvent.index = dotNetObject.index;
    }
    if (hasValue(dotNetObject.native)) {
        jsFeatureTableCellPointeroverEvent.native = dotNetObject.native;
    }
    if (hasValue(dotNetObject.objectId)) {
        jsFeatureTableCellPointeroverEvent.objectId = dotNetObject.objectId;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureTableCellPointeroverEvent);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureTableCellPointeroverEvent;
    
    let dnInstantiatedObject = await buildDotNetFeatureTableCellPointeroverEvent(jsFeatureTableCellPointeroverEvent);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureTableCellPointeroverEvent', e);
    }
    
    return jsFeatureTableCellPointeroverEvent;
}

export async function buildDotNetFeatureTableCellPointeroverEventGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureTableCellPointeroverEvent: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.feature)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetFeatureTableCellPointeroverEvent.feature = buildDotNetGraphic(jsObject.feature, layerId, viewId);
        }
    if (hasValue(jsObject.fieldName)) {
        dotNetFeatureTableCellPointeroverEvent.fieldName = jsObject.fieldName;
    }
    if (hasValue(jsObject.index)) {
        dotNetFeatureTableCellPointeroverEvent.index = jsObject.index;
    }
    if (hasValue(jsObject.native)) {
        dotNetFeatureTableCellPointeroverEvent.native = jsObject.native;
    }
    if (hasValue(jsObject.objectId)) {
        dotNetFeatureTableCellPointeroverEvent.objectId = jsObject.objectId;
    }
    if (hasValue(jsObject.type)) {
        dotNetFeatureTableCellPointeroverEvent.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFeatureTableCellPointeroverEvent.id = k;
                break;
            }
        }
    }

    return dotNetFeatureTableCellPointeroverEvent;
}

