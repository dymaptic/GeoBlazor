// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetRendererResult } from './rendererResult';

export async function buildJsRendererResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsRendererResult: any = {};
    if (hasValue(dotNetObject.dotDensityScheme)) {
        let { buildJsDotDensityScheme } = await import('./dotDensityScheme');
        jsRendererResult.dotDensityScheme = await buildJsDotDensityScheme(dotNetObject.dotDensityScheme, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsDotDensityRenderer } = await import('./dotDensityRenderer');
        jsRendererResult.renderer = await buildJsDotDensityRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.basemapId)) {
        jsRendererResult.basemapId = dotNetObject.basemapId;
    }
    if (hasValue(dotNetObject.basemapTheme)) {
        jsRendererResult.basemapTheme = dotNetObject.basemapTheme;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsRendererResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRendererResult;
    
    let dnInstantiatedObject = await buildDotNetRendererResult(jsRendererResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RendererResult', e);
    }
    
    return jsRendererResult;
}

export async function buildDotNetRendererResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRendererResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.dotDensityScheme)) {
            let { buildDotNetDotDensityScheme } = await import('./dotDensityScheme');
            dotNetRendererResult.dotDensityScheme = await buildDotNetDotDensityScheme(jsObject.dotDensityScheme);
        }
        if (hasValue(jsObject.renderer)) {
            let { buildDotNetDotDensityRenderer } = await import('./dotDensityRenderer');
            dotNetRendererResult.renderer = await buildDotNetDotDensityRenderer(jsObject.renderer);
        }
    if (hasValue(jsObject.basemapId)) {
        dotNetRendererResult.basemapId = jsObject.basemapId;
    }
    if (hasValue(jsObject.basemapTheme)) {
        dotNetRendererResult.basemapTheme = jsObject.basemapTheme;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRendererResult.id = k;
                break;
            }
        }
    }

    return dotNetRendererResult;
}

