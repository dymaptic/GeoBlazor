// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import RendererResult = __esri.RendererResult;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class RendererResultGenerated implements IPropertyWrapper {
    public component: RendererResult;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: RendererResult) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getRenderer(): Promise<any> {
        if (!hasValue(this.component.renderer)) {
            return null;
        }
        
        let { buildDotNetDotDensityRenderer } = await import('./dotDensityRenderer');
        return await buildDotNetDotDensityRenderer(this.component.renderer);
    }
    async setRenderer(value: any): Promise<void> {
        let { buildJsDotDensityRenderer } = await import('./dotDensityRenderer');
        this.component.renderer = await  buildJsDotDensityRenderer(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsRendererResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsRendererResult: any = {}
    if (hasValue(dotNetObject.dotDensityScheme)) {
        jsRendererResult.dotDensityScheme = dotNetObject.dotDensityScheme;
    }
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsDotDensityRenderer } = await import('./dotDensityRenderer');
        jsRendererResult.renderer = await buildJsDotDensityRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.basemapId)) {
        jsRendererResult.basemapId = dotNetObject.basemapId;
    }
    if (hasValue(dotNetObject.basemapTheme)) {
        jsRendererResult.basemapTheme = dotNetObject.basemapTheme;
    }

    let { default: RendererResultWrapper } = await import('./rendererResult');
    let rendererResultWrapper = new RendererResultWrapper(jsRendererResult);
    rendererResultWrapper.geoBlazorId = dotNetObject.id;
    rendererResultWrapper.viewId = viewId;
    rendererResultWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(rendererResultWrapper);
    jsObjectRefs[dotNetObject.id] = rendererResultWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsRendererResult;
    let { buildDotNetRendererResult } = await import('./rendererResult');
    let dnInstantiatedObject = await buildDotNetRendererResult(jsRendererResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RendererResult', e);
    }
    
    return jsRendererResult;
}
export async function buildDotNetRendererResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRendererResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetRendererResult.dotDensityScheme = jsObject.dotDensityScheme;
        if (hasValue(jsObject.renderer)) {
            let { buildDotNetDotDensityRenderer } = await import('./dotDensityRenderer');
            dotNetRendererResult.renderer = await buildDotNetDotDensityRenderer(jsObject.renderer);
        }
        if (hasValue(jsObject.basemapId)) {
            dotNetRendererResult.basemapId = jsObject.basemapId;
        }
        if (hasValue(jsObject.basemapTheme)) {
            dotNetRendererResult.basemapTheme = jsObject.basemapTheme;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRendererResult.id = k;
                break;
            }
        }
    }

    return dotNetRendererResult;
}

