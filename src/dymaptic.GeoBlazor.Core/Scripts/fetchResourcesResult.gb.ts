// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetFetchResourcesResult } from './fetchResourcesResult';

export async function buildJsFetchResourcesResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFetchResourcesResult: any = {};
    if (hasValue(dotNetObject.resources)) {
        let { buildJsFetchResource } = await import('./fetchResource');
        jsFetchResourcesResult.resources = await Promise.all(dotNetObject.resources.map(async i => await buildJsFetchResource(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.nextStart)) {
        jsFetchResourcesResult.nextStart = dotNetObject.nextStart;
    }
    if (hasValue(dotNetObject.total)) {
        jsFetchResourcesResult.total = dotNetObject.total;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFetchResourcesResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFetchResourcesResult;
    
    return jsFetchResourcesResult;
}


export async function buildDotNetFetchResourcesResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsFetchResourcesResult } = await import('./fetchResourcesResult');
        jsComponentRef = await buildJsFetchResourcesResult(jsObject, layerId, viewId);
    }
    
    let dotNetFetchResourcesResult: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.resources)) {
        let { buildDotNetFetchResource } = await import('./fetchResource');
        dotNetFetchResourcesResult.resources = await Promise.all(jsObject.resources.map(async i => await buildDotNetFetchResource(i, layerId, viewId)));
    }
    if (hasValue(jsObject.nextStart)) {
        dotNetFetchResourcesResult.nextStart = jsObject.nextStart;
    }
    if (hasValue(jsObject.total)) {
        dotNetFetchResourcesResult.total = jsObject.total;
    }

    return dotNetFetchResourcesResult;
}

