// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import TelemetryData from '@arcgis/core/layers/support/TelemetryData';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetTelemetryData } from './telemetryData';

export async function buildJsTelemetryDataGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTelemetryData = new TelemetryData();
    if (hasValue(dotNetObject.frameCenter)) {
        let { buildJsPoint } = await import('./point');
        jsTelemetryData.frameCenter = buildJsPoint(dotNetObject.frameCenter) as any;
    }
    if (hasValue(dotNetObject.frameOutline)) {
        let { buildJsPolygon } = await import('./polygon');
        jsTelemetryData.frameOutline = buildJsPolygon(dotNetObject.frameOutline) as any;
    }
    if (hasValue(dotNetObject.lineOfSight)) {
        let { buildJsPolyline } = await import('./polyline');
        jsTelemetryData.lineOfSight = buildJsPolyline(dotNetObject.lineOfSight) as any;
    }
    if (hasValue(dotNetObject.sensorLocation)) {
        let { buildJsPoint } = await import('./point');
        jsTelemetryData.sensorLocation = buildJsPoint(dotNetObject.sensorLocation) as any;
    }
    if (hasValue(dotNetObject.sensorTrail)) {
        let { buildJsPolyline } = await import('./polyline');
        jsTelemetryData.sensorTrail = buildJsPolyline(dotNetObject.sensorTrail) as any;
    }

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsTelemetryData);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTelemetryData;
    
    let dnInstantiatedObject = await buildDotNetTelemetryData(jsTelemetryData);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TelemetryData', e);
    }
    
    return jsTelemetryData;
}

export async function buildDotNetTelemetryDataGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTelemetryData: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.frameCenter)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetTelemetryData.frameCenter = buildDotNetPoint(jsObject.frameCenter);
        }
        if (hasValue(jsObject.frameOutline)) {
            let { buildDotNetPolygon } = await import('./polygon');
            dotNetTelemetryData.frameOutline = buildDotNetPolygon(jsObject.frameOutline);
        }
        if (hasValue(jsObject.lineOfSight)) {
            let { buildDotNetPolyline } = await import('./polyline');
            dotNetTelemetryData.lineOfSight = buildDotNetPolyline(jsObject.lineOfSight);
        }
        if (hasValue(jsObject.sensorLocation)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetTelemetryData.sensorLocation = buildDotNetPoint(jsObject.sensorLocation);
        }
        if (hasValue(jsObject.sensorTrail)) {
            let { buildDotNetPolyline } = await import('./polyline');
            dotNetTelemetryData.sensorTrail = buildDotNetPolyline(jsObject.sensorTrail);
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTelemetryData.id = k;
                break;
            }
        }
    }

    return dotNetTelemetryData;
}

