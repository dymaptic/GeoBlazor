// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import OffsetParameters from '@arcgis/core/rest/support/OffsetParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetOffsetParameters } from './offsetParameters';

export async function buildJsOffsetParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.geometries)) {
        let { buildJsGeometry } = await import('./geometry');
        properties.geometries = dotNetObject.geometries.map(i => buildJsGeometry(i)) as any;
    }

    if (hasValue(dotNetObject.bevelRatio)) {
        properties.bevelRatio = dotNetObject.bevelRatio;
    }
    if (hasValue(dotNetObject.offsetDistance)) {
        properties.offsetDistance = dotNetObject.offsetDistance;
    }
    if (hasValue(dotNetObject.offsetHow)) {
        properties.offsetHow = dotNetObject.offsetHow;
    }
    if (hasValue(dotNetObject.offsetUnit)) {
        properties.offsetUnit = dotNetObject.offsetUnit;
    }
    let jsOffsetParameters = new OffsetParameters(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsOffsetParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsOffsetParameters;
    
    let dnInstantiatedObject = await buildDotNetOffsetParameters(jsOffsetParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for OffsetParameters', e);
    }
    
    return jsOffsetParameters;
}

export async function buildDotNetOffsetParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetOffsetParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.geometries)) {
            let { buildDotNetGeometry } = await import('./geometry');
            dotNetOffsetParameters.geometries = jsObject.geometries.map(i => buildDotNetGeometry(i));
        }
    if (hasValue(jsObject.bevelRatio)) {
        dotNetOffsetParameters.bevelRatio = jsObject.bevelRatio;
    }
    if (hasValue(jsObject.offsetDistance)) {
        dotNetOffsetParameters.offsetDistance = jsObject.offsetDistance;
    }
    if (hasValue(jsObject.offsetHow)) {
        dotNetOffsetParameters.offsetHow = jsObject.offsetHow;
    }
    if (hasValue(jsObject.offsetUnit)) {
        dotNetOffsetParameters.offsetUnit = jsObject.offsetUnit;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetOffsetParameters.id = k;
                break;
            }
        }
    }

    return dotNetOffsetParameters;
}

