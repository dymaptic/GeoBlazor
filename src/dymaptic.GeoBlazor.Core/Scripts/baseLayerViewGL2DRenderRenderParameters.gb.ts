// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetBaseLayerViewGL2DRenderRenderParameters } from './baseLayerViewGL2DRenderRenderParameters';

export async function buildJsBaseLayerViewGL2DRenderRenderParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsBaseLayerViewGL2DRenderRenderParameters: any = {};
    if (hasValue(dotNetObject.state)) {
        let { buildJsViewState } = await import('./viewState');
        jsBaseLayerViewGL2DRenderRenderParameters.state = await buildJsViewState(dotNetObject.state, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.context)) {
        jsBaseLayerViewGL2DRenderRenderParameters.context = dotNetObject.context;
    }
    if (hasValue(dotNetObject.stationary)) {
        jsBaseLayerViewGL2DRenderRenderParameters.stationary = dotNetObject.stationary;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsBaseLayerViewGL2DRenderRenderParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsBaseLayerViewGL2DRenderRenderParameters;
    
    return jsBaseLayerViewGL2DRenderRenderParameters;
}


export async function buildDotNetBaseLayerViewGL2DRenderRenderParametersGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBaseLayerViewGL2DRenderRenderParameters: any = {};
    
    if (hasValue(jsObject.state)) {
        let { buildDotNetViewState } = await import('./viewState');
        dotNetBaseLayerViewGL2DRenderRenderParameters.state = await buildDotNetViewState(jsObject.state, layerId, viewId);
    }
    
    if (hasValue(jsObject.context)) {
        dotNetBaseLayerViewGL2DRenderRenderParameters.context = removeCircularReferences(jsObject.context);
    }
    
    if (hasValue(jsObject.stationary)) {
        dotNetBaseLayerViewGL2DRenderRenderParameters.stationary = jsObject.stationary;
    }
    

    return dotNetBaseLayerViewGL2DRenderRenderParameters;
}

