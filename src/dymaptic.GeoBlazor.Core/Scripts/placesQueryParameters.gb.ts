// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import PlacesQueryParameters from '@arcgis/core/rest/support/PlacesQueryParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetPlacesQueryParameters } from './placesQueryParameters';

export async function buildJsPlacesQueryParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPlacesQueryParameters = new PlacesQueryParameters();
    if (hasValue(dotNetObject.extent)) {
        let { buildJsExtent } = await import('./extent');
        jsPlacesQueryParameters.extent = buildJsExtent(dotNetObject.extent) as any;
    }
    if (hasValue(dotNetObject.point)) {
        let { buildJsPoint } = await import('./point');
        jsPlacesQueryParameters.point = buildJsPoint(dotNetObject.point) as any;
    }

    if (hasValue(dotNetObject.apiKey)) {
        jsPlacesQueryParameters.apiKey = dotNetObject.apiKey;
    }
    if (hasValue(dotNetObject.categoryIds)) {
        jsPlacesQueryParameters.categoryIds = dotNetObject.categoryIds;
    }
    if (hasValue(dotNetObject.icon)) {
        jsPlacesQueryParameters.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.offset)) {
        jsPlacesQueryParameters.offset = dotNetObject.offset;
    }
    if (hasValue(dotNetObject.pageSize)) {
        jsPlacesQueryParameters.pageSize = dotNetObject.pageSize;
    }
    if (hasValue(dotNetObject.radius)) {
        jsPlacesQueryParameters.radius = dotNetObject.radius;
    }
    if (hasValue(dotNetObject.searchText)) {
        jsPlacesQueryParameters.searchText = dotNetObject.searchText;
    }
    if (hasValue(dotNetObject.url)) {
        jsPlacesQueryParameters.url = dotNetObject.url;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsPlacesQueryParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPlacesQueryParameters;
    
    let dnInstantiatedObject = await buildDotNetPlacesQueryParameters(jsPlacesQueryParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PlacesQueryParameters', e);
    }
    
    return jsPlacesQueryParameters;
}

export async function buildDotNetPlacesQueryParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPlacesQueryParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.extent)) {
            let { buildDotNetExtent } = await import('./extent');
            dotNetPlacesQueryParameters.extent = buildDotNetExtent(jsObject.extent);
        }
        if (hasValue(jsObject.point)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetPlacesQueryParameters.point = buildDotNetPoint(jsObject.point);
        }
        if (hasValue(jsObject.apiKey)) {
            dotNetPlacesQueryParameters.apiKey = jsObject.apiKey;
        }
        if (hasValue(jsObject.categoryIds)) {
            dotNetPlacesQueryParameters.categoryIds = jsObject.categoryIds;
        }
        if (hasValue(jsObject.icon)) {
            dotNetPlacesQueryParameters.icon = jsObject.icon;
        }
        if (hasValue(jsObject.offset)) {
            dotNetPlacesQueryParameters.offset = jsObject.offset;
        }
        if (hasValue(jsObject.pageSize)) {
            dotNetPlacesQueryParameters.pageSize = jsObject.pageSize;
        }
        if (hasValue(jsObject.radius)) {
            dotNetPlacesQueryParameters.radius = jsObject.radius;
        }
        if (hasValue(jsObject.searchText)) {
            dotNetPlacesQueryParameters.searchText = jsObject.searchText;
        }
        if (hasValue(jsObject.url)) {
            dotNetPlacesQueryParameters.url = jsObject.url;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPlacesQueryParameters.id = k;
                break;
            }
        }
    }

    return dotNetPlacesQueryParameters;
}

