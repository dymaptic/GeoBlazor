// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import colorRamps = __esri.colorRamps;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ColorRampsGenerated implements IPropertyWrapper {
    public component: colorRamps;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: colorRamps) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async all(): Promise<any> {
        return this.component.all();
    }

    async byName(name: any): Promise<any> {
        return this.component.byName(name);
    }

    async createColorRamp(options: any): Promise<any> {
        let { buildJsColorRampsCreateColorRampOptions } = await import('./colorRampsCreateColorRampOptions');
        let jsOptions = await buildJsColorRampsCreateColorRampOptions(options, this.layerId, this.viewId) as any;
        return this.component.createColorRamp(jsOptions);
    }

    async getColorRampName(colorRamp: any): Promise<any> {
        let { buildJsColorRamp } = await import('./colorRamp');
        let jsColorRamp = buildJsColorRamp(colorRamp) as any;
        return this.component.getColorRampName(jsColorRamp);
    }

    async names(): Promise<any> {
        return this.component.names();
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsColorRampsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jscolorRamps: any = {}


    let { default: ColorRampsWrapper } = await import('./colorRamps');
    let colorRampsWrapper = new ColorRampsWrapper(jscolorRamps);
    colorRampsWrapper.geoBlazorId = dotNetObject.id;
    colorRampsWrapper.viewId = viewId;
    colorRampsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(colorRampsWrapper);
    jsObjectRefs[dotNetObject.id] = colorRampsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jscolorRamps;
    let { buildDotNetColorRamps } = await import('./colorRamps');
    let dnInstantiatedObject = await buildDotNetColorRamps(jscolorRamps);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ColorRamps', e);
    }
    
    return jscolorRamps;
}

export async function buildDotNetColorRampsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetColorRamps: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetColorRamps.id = k;
                break;
            }
        }
    }

    return dotNetColorRamps;
}

