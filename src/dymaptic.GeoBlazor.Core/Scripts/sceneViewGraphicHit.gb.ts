// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSceneViewGraphicHit } from './sceneViewGraphicHit';

export async function buildJsSceneViewGraphicHitGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSceneViewGraphicHit: any = {};
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsSceneViewGraphicHit.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.distance)) {
        jsSceneViewGraphicHit.distance = dotNetObject.distance;
    }
    if (hasValue(dotNetObject.graphic)) {
        const { id, dotNetComponentReference, ...sanitizedGraphic } = dotNetObject.graphic;
        jsSceneViewGraphicHit.graphic = sanitizedGraphic;
    }
    if (hasValue(dotNetObject.mapPoint)) {
        const { id, dotNetComponentReference, ...sanitizedMapPoint } = dotNetObject.mapPoint;
        jsSceneViewGraphicHit.mapPoint = sanitizedMapPoint;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSceneViewGraphicHit);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSceneViewGraphicHit;
    
    let { buildDotNetSceneViewGraphicHit } = await import('./sceneViewGraphicHit');
    let dnInstantiatedObject = await buildDotNetSceneViewGraphicHit(jsSceneViewGraphicHit, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type SceneViewGraphicHit detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SceneViewGraphicHit', e);
    }
    
    return jsSceneViewGraphicHit;
}


export async function buildDotNetSceneViewGraphicHitGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSceneViewGraphicHit: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.distance)) {
        dotNetSceneViewGraphicHit.distance = jsObject.distance;
    }
    if (hasValue(jsObject.graphic)) {
        dotNetSceneViewGraphicHit.graphic = jsObject.graphic;
    }
    if (hasValue(jsObject.mapPoint)) {
        dotNetSceneViewGraphicHit.mapPoint = jsObject.mapPoint;
    }
    if (hasValue(jsObject.type)) {
        dotNetSceneViewGraphicHit.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSceneViewGraphicHit.id = k;
                break;
            }
        }
    }

    return dotNetSceneViewGraphicHit;
}

