// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetSceneViewGraphicHit } from './sceneViewGraphicHit';
import SceneViewGraphicHit = __esri.SceneViewGraphicHit;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsSceneViewGraphicHitGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSceneViewGraphicHit: any = {}
    if (hasValue(dotNetObject.graphic)) {
        let { buildJsGraphic } = await import('./graphic');
        jsSceneViewGraphicHit.graphic = buildJsGraphic(dotNetObject.graphic) as any;
    }
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsSceneViewGraphicHit.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.mapPoint)) {
        let { buildJsPoint } = await import('./point');
        jsSceneViewGraphicHit.mapPoint = buildJsPoint(dotNetObject.mapPoint) as any;
    }

    if (hasValue(dotNetObject.distance)) {
        jsSceneViewGraphicHit.distance = dotNetObject.distance;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsSceneViewGraphicHit);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSceneViewGraphicHit;
    
    let dnInstantiatedObject = await buildDotNetSceneViewGraphicHit(jsSceneViewGraphicHit);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SceneViewGraphicHit', e);
    }
    
    return jsSceneViewGraphicHit;
}

export async function buildDotNetSceneViewGraphicHitGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSceneViewGraphicHit: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.graphic)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetSceneViewGraphicHit.graphic = buildDotNetGraphic(jsObject.graphic, layerId, viewId);
        }
        if (hasValue(jsObject.mapPoint)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetSceneViewGraphicHit.mapPoint = buildDotNetPoint(jsObject.mapPoint);
        }
        if (hasValue(jsObject.distance)) {
            dotNetSceneViewGraphicHit.distance = jsObject.distance;
        }
        if (hasValue(jsObject.type)) {
            dotNetSceneViewGraphicHit.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSceneViewGraphicHit.id = k;
                break;
            }
        }
    }

    return dotNetSceneViewGraphicHit;
}

