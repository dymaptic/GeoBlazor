// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetColorGetSchemeByNameParams } from './colorGetSchemeByNameParams';
import colorGetSchemeByNameParams = __esri.colorGetSchemeByNameParams;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsColorGetSchemeByNameParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jscolorGetSchemeByNameParams: any = {}

    if (hasValue(dotNetObject.basemap)) {
        jscolorGetSchemeByNameParams.basemap = dotNetObject.basemap;
    }
    if (hasValue(dotNetObject.basemapTheme)) {
        jscolorGetSchemeByNameParams.basemapTheme = dotNetObject.basemapTheme;
    }
    if (hasValue(dotNetObject.geometryType)) {
        jscolorGetSchemeByNameParams.geometryType = dotNetObject.geometryType;
    }
    if (hasValue(dotNetObject.name)) {
        jscolorGetSchemeByNameParams.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.theme)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedTheme } = dotNetObject.theme;
        jscolorGetSchemeByNameParams.theme = sanitizedTheme;
    }
    if (hasValue(dotNetObject.view)) {
        jscolorGetSchemeByNameParams.view = dotNetObject.view;
    }
    if (hasValue(dotNetObject.worldScale)) {
        jscolorGetSchemeByNameParams.worldScale = dotNetObject.worldScale;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jscolorGetSchemeByNameParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jscolorGetSchemeByNameParams;
    
    let dnInstantiatedObject = await buildDotNetColorGetSchemeByNameParams(jscolorGetSchemeByNameParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ColorGetSchemeByNameParams', e);
    }
    
    return jscolorGetSchemeByNameParams;
}

export async function buildDotNetColorGetSchemeByNameParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetColorGetSchemeByNameParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.basemap)) {
            dotNetColorGetSchemeByNameParams.basemap = jsObject.basemap;
        }
        if (hasValue(jsObject.basemapTheme)) {
            dotNetColorGetSchemeByNameParams.basemapTheme = jsObject.basemapTheme;
        }
        if (hasValue(jsObject.geometryType)) {
            dotNetColorGetSchemeByNameParams.geometryType = jsObject.geometryType;
        }
        if (hasValue(jsObject.name)) {
            dotNetColorGetSchemeByNameParams.name = jsObject.name;
        }
        if (hasValue(jsObject.theme)) {
            dotNetColorGetSchemeByNameParams.theme = jsObject.theme;
        }
        if (hasValue(jsObject.view)) {
            dotNetColorGetSchemeByNameParams.view = jsObject.view;
        }
        if (hasValue(jsObject.worldScale)) {
            dotNetColorGetSchemeByNameParams.worldScale = jsObject.worldScale;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetColorGetSchemeByNameParams.id = k;
                break;
            }
        }
    }

    return dotNetColorGetSchemeByNameParams;
}

