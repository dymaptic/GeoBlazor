// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetDirectionsViewModelImpedanceAttribute } from './directionsViewModelImpedanceAttribute';

export async function buildJsDirectionsViewModelImpedanceAttributeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsDirectionsViewModelImpedanceAttribute: any = {};

    if (hasValue(dotNetObject.name)) {
        jsDirectionsViewModelImpedanceAttribute.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.units)) {
        jsDirectionsViewModelImpedanceAttribute.units = dotNetObject.units;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsDirectionsViewModelImpedanceAttribute);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsDirectionsViewModelImpedanceAttribute;
    
    return jsDirectionsViewModelImpedanceAttribute;
}


export async function buildDotNetDirectionsViewModelImpedanceAttributeGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDirectionsViewModelImpedanceAttribute: any = {};
    
    if (hasValue(jsObject.name)) {
        dotNetDirectionsViewModelImpedanceAttribute.name = jsObject.name;
    }
    
    if (hasValue(jsObject.units)) {
        dotNetDirectionsViewModelImpedanceAttribute.units = jsObject.units;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetDirectionsViewModelImpedanceAttribute.id = geoBlazorId;
    }

    return dotNetDirectionsViewModelImpedanceAttribute;
}

