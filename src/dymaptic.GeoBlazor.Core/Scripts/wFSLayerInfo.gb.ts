// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';

export async function buildJsWFSLayerInfoGenerated(dotNetObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsWFSLayerInfo: any = {};
    if (hasValue(dotNetObject.extent)) {
        let { buildJsExtent } = await import('./extent');
        jsWFSLayerInfo.extent = buildJsExtent(dotNetObject.extent) as any;
    }
    if (hasValue(dotNetObject.fields) && dotNetObject.fields.length > 0) {
        let { buildJsField } = await import('./field');
        jsWFSLayerInfo.fields = dotNetObject.fields.map(i => buildJsField(i, viewId)) as any;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        jsWFSLayerInfo.spatialReference = buildJsSpatialReference(dotNetObject.spatialReference) as any;
    }
    if (hasValue(dotNetObject.wfsCapabilities)) {
        let { buildJsWFSCapabilities } = await import('./wFSCapabilities');
        jsWFSLayerInfo.wfsCapabilities = await buildJsWFSCapabilities(dotNetObject.wfsCapabilities) as any;
    }

    if (hasValue(dotNetObject.customParameters)) {
        jsWFSLayerInfo.customParameters = dotNetObject.customParameters;
    }
    if (hasValue(dotNetObject.geometryType)) {
        jsWFSLayerInfo.geometryType = dotNetObject.geometryType;
    }
    if (hasValue(dotNetObject.name)) {
        jsWFSLayerInfo.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.namespaceUri)) {
        jsWFSLayerInfo.namespaceUri = dotNetObject.namespaceUri;
    }
    if (hasValue(dotNetObject.objectIdField)) {
        jsWFSLayerInfo.objectIdField = dotNetObject.objectIdField;
    }
    if (hasValue(dotNetObject.swapXY)) {
        jsWFSLayerInfo.swapXY = dotNetObject.swapXY;
    }
    if (hasValue(dotNetObject.url)) {
        jsWFSLayerInfo.url = dotNetObject.url;
    }
    
    jsObjectRefs[dotNetObject.id] = jsWFSLayerInfo;
    arcGisObjectRefs[dotNetObject.id] = jsWFSLayerInfo;
    
    return jsWFSLayerInfo;
}


export async function buildDotNetWFSLayerInfoGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWFSLayerInfo: any = {};
    
    if (hasValue(jsObject.extent)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetWFSLayerInfo.extent = buildDotNetExtent(jsObject.extent);
    }
    
    if (hasValue(jsObject.fields)) {
        let { buildDotNetField } = await import('./field');
        dotNetWFSLayerInfo.fields = jsObject.fields.map(i => buildDotNetField(i, viewId));
    }
    
    if (hasValue(jsObject.spatialReference)) {
        let { buildDotNetSpatialReference } = await import('./spatialReference');
        dotNetWFSLayerInfo.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference);
    }
    
    if (hasValue(jsObject.customParameters)) {
        dotNetWFSLayerInfo.customParameters = removeCircularReferences(jsObject.customParameters);
    }
    
    if (hasValue(jsObject.geometryType)) {
        dotNetWFSLayerInfo.geometryType = removeCircularReferences(jsObject.geometryType);
    }
    
    if (hasValue(jsObject.name)) {
        dotNetWFSLayerInfo.name = jsObject.name;
    }
    
    if (hasValue(jsObject.namespaceUri)) {
        dotNetWFSLayerInfo.namespaceUri = jsObject.namespaceUri;
    }
    
    if (hasValue(jsObject.objectIdField)) {
        dotNetWFSLayerInfo.objectIdField = jsObject.objectIdField;
    }
    
    if (hasValue(jsObject.swapXY)) {
        dotNetWFSLayerInfo.swapXY = jsObject.swapXY;
    }
    
    if (hasValue(jsObject.url)) {
        dotNetWFSLayerInfo.url = jsObject.url;
    }
    

    return dotNetWFSLayerInfo;
}

