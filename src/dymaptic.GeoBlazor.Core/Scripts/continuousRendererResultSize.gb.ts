import { buildDotNetContinuousRendererResultSize } from './continuousRendererResultSize';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import ContinuousRendererResultSize = __esri.ContinuousRendererResultSize;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsContinuousRendererResultSizeGenerated(dotNetObject: any): Promise<any> {
    let jsContinuousRendererResultSize: any = {}
    if (hasValue(dotNetObject.visualVariables)) {
        let { buildJsSizeVariable } = await import('./sizeVariable');
        jsContinuousRendererResultSize.visualVariables = await Promise.all(dotNetObject.visualVariables.map(async i => await buildJsSizeVariable(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.sizeScheme)) {
        jsContinuousRendererResultSize.sizeScheme = dotNetObject.sizeScheme;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsContinuousRendererResultSize);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsContinuousRendererResultSize;
    
    let dnInstantiatedObject = await buildDotNetContinuousRendererResultSize(jsContinuousRendererResultSize);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ContinuousRendererResultSize', e);
    }
    
    return jsContinuousRendererResultSize;
}
export async function buildDotNetContinuousRendererResultSizeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetContinuousRendererResultSize: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.visualVariables)) {
            let { buildDotNetSizeVariable } = await import('./sizeVariable');
            dotNetContinuousRendererResultSize.visualVariables = await Promise.all(jsObject.visualVariables.map(async i => await buildDotNetSizeVariable(i)));
        }
        if (hasValue(jsObject.sizeScheme)) {
            dotNetContinuousRendererResultSize.sizeScheme = jsObject.sizeScheme;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetContinuousRendererResultSize.id = k;
                break;
            }
        }
    }

    return dotNetContinuousRendererResultSize;
}

