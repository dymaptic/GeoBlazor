// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ActionToggle from '@arcgis/core/support/actions/ActionToggle';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetActionToggle } from './actionToggle';

export async function buildJsActionToggleGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsActionToggle = new ActionToggle();

    if (hasValue(dotNetObject.actionId)) {
        jsActionToggle.id = dotNetObject.actionId;
    }
    if (hasValue(dotNetObject.icon)) {
        jsActionToggle.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.title)) {
        jsActionToggle.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.value)) {
        jsActionToggle.value = dotNetObject.value;
    }
    
        let jsObjectRef = DotNet.createJSObjectReference(jsActionToggle);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsActionToggle;
    
    let dnInstantiatedObject = await buildDotNetActionToggle(jsActionToggle);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ActionToggle', e);
    }
    
    return jsActionToggle;
}

export async function buildDotNetActionToggleGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetActionToggle: any = {
                jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.id)) {
        dotNetActionToggle.actionId = jsObject.id;
    }
    if (hasValue(jsObject.icon)) {
        dotNetActionToggle.icon = jsObject.icon;
    }
    if (hasValue(jsObject.title)) {
        dotNetActionToggle.title = jsObject.title;
    }
    if (hasValue(jsObject.type)) {
        dotNetActionToggle.type = jsObject.type;
    }
    if (hasValue(jsObject.value)) {
        dotNetActionToggle.value = jsObject.value;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetActionToggle.id = k;
                break;
            }
        }
    }

    return dotNetActionToggle;
}

