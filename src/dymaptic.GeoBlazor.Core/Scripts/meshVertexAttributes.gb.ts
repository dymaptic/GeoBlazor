// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import MeshVertexAttributes = __esri.MeshVertexAttributes;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class MeshVertexAttributesGenerated implements IPropertyWrapper {
    public component: MeshVertexAttributes;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: MeshVertexAttributes) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsMeshVertexAttributesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsMeshVertexAttributes: any = {}

    if (hasValue(dotNetObject.color)) {
        jsMeshVertexAttributes.color = dotNetObject.color;
    }
    if (hasValue(dotNetObject.normal)) {
        jsMeshVertexAttributes.normal = dotNetObject.normal;
    }
    if (hasValue(dotNetObject.position)) {
        jsMeshVertexAttributes.position = dotNetObject.position;
    }
    if (hasValue(dotNetObject.tangent)) {
        jsMeshVertexAttributes.tangent = dotNetObject.tangent;
    }
    if (hasValue(dotNetObject.uv)) {
        jsMeshVertexAttributes.uv = dotNetObject.uv;
    }
    let { default: MeshVertexAttributesWrapper } = await import('./meshVertexAttributes');
    let meshVertexAttributesWrapper = new MeshVertexAttributesWrapper(jsMeshVertexAttributes);
    meshVertexAttributesWrapper.geoBlazorId = dotNetObject.id;
    meshVertexAttributesWrapper.viewId = viewId;
    meshVertexAttributesWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(meshVertexAttributesWrapper);
    jsObjectRefs[dotNetObject.id] = meshVertexAttributesWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsMeshVertexAttributes;
    
    let { buildDotNetMeshVertexAttributes } = await import('./meshVertexAttributes');
    let dnInstantiatedObject = await buildDotNetMeshVertexAttributes(jsMeshVertexAttributes, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for MeshVertexAttributes', e);
    }
    
    return jsMeshVertexAttributes;
}

export async function buildDotNetMeshVertexAttributesGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMeshVertexAttributes: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.color)) {
            dotNetMeshVertexAttributes.color = jsObject.color;
        }
        if (hasValue(jsObject.normal)) {
            dotNetMeshVertexAttributes.normal = jsObject.normal;
        }
        if (hasValue(jsObject.position)) {
            dotNetMeshVertexAttributes.position = jsObject.position;
        }
        if (hasValue(jsObject.tangent)) {
            dotNetMeshVertexAttributes.tangent = jsObject.tangent;
        }
        if (hasValue(jsObject.uv)) {
            dotNetMeshVertexAttributes.uv = jsObject.uv;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetMeshVertexAttributes.id = k;
                break;
            }
        }
    }

    return dotNetMeshVertexAttributes;
}

