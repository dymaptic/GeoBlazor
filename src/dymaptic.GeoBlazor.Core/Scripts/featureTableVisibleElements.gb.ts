// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetFeatureTableVisibleElements } from './featureTableVisibleElements';

export async function buildJsFeatureTableVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureTableVisibleElements: any = {};
    if (hasValue(dotNetObject.columnMenuItems)) {
        let { buildJsVisibleElementsColumnMenuItems } = await import('./visibleElementsColumnMenuItems');
        jsFeatureTableVisibleElements.columnMenuItems = await buildJsVisibleElementsColumnMenuItems(dotNetObject.columnMenuItems, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.menuItems)) {
        let { buildJsVisibleElementsMenuItems } = await import('./visibleElementsMenuItems');
        jsFeatureTableVisibleElements.menuItems = await buildJsVisibleElementsMenuItems(dotNetObject.menuItems, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.columnMenus)) {
        jsFeatureTableVisibleElements.columnMenus = dotNetObject.columnMenus;
    }
    if (hasValue(dotNetObject.header)) {
        jsFeatureTableVisibleElements.header = dotNetObject.header;
    }
    if (hasValue(dotNetObject.menu)) {
        jsFeatureTableVisibleElements.menu = dotNetObject.menu;
    }
    if (hasValue(dotNetObject.progress)) {
        jsFeatureTableVisibleElements.progress = dotNetObject.progress;
    }
    if (hasValue(dotNetObject.selectionColumn)) {
        jsFeatureTableVisibleElements.selectionColumn = dotNetObject.selectionColumn;
    }
    if (hasValue(dotNetObject.tooltips)) {
        jsFeatureTableVisibleElements.tooltips = dotNetObject.tooltips;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureTableVisibleElements);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureTableVisibleElements;
    
    let { buildDotNetFeatureTableVisibleElements } = await import('./featureTableVisibleElements');
    let dnInstantiatedObject = await buildDotNetFeatureTableVisibleElements(jsFeatureTableVisibleElements);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type FeatureTableVisibleElements detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureTableVisibleElements', e);
    }
    
    return jsFeatureTableVisibleElements;
}


export async function buildDotNetFeatureTableVisibleElementsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureTableVisibleElements: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.columnMenuItems)) {
        let { buildDotNetVisibleElementsColumnMenuItems } = await import('./visibleElementsColumnMenuItems');
        dotNetFeatureTableVisibleElements.columnMenuItems = await buildDotNetVisibleElementsColumnMenuItems(jsObject.columnMenuItems);
    }
    if (hasValue(jsObject.menuItems)) {
        let { buildDotNetVisibleElementsMenuItems } = await import('./visibleElementsMenuItems');
        dotNetFeatureTableVisibleElements.menuItems = await buildDotNetVisibleElementsMenuItems(jsObject.menuItems);
    }
    if (hasValue(jsObject.columnMenus)) {
        dotNetFeatureTableVisibleElements.columnMenus = jsObject.columnMenus;
    }
    if (hasValue(jsObject.header)) {
        dotNetFeatureTableVisibleElements.header = jsObject.header;
    }
    if (hasValue(jsObject.menu)) {
        dotNetFeatureTableVisibleElements.menu = jsObject.menu;
    }
    if (hasValue(jsObject.progress)) {
        dotNetFeatureTableVisibleElements.progress = jsObject.progress;
    }
    if (hasValue(jsObject.selectionColumn)) {
        dotNetFeatureTableVisibleElements.selectionColumn = jsObject.selectionColumn;
    }
    if (hasValue(jsObject.tooltips)) {
        dotNetFeatureTableVisibleElements.tooltips = jsObject.tooltips;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetFeatureTableVisibleElements.id = geoBlazorId;
    }

    return dotNetFeatureTableVisibleElements;
}

