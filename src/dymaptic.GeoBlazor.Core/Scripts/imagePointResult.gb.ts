import { buildDotNetImagePointResult } from './imagePointResult';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import ImagePointResult from '@arcgis/core/rest/support/ImagePointResult';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsImagePointResultGenerated(dotNetObject: any): Promise<any> {
    let jsImagePointResult = new ImagePointResult();
    if (hasValue(dotNetObject.point)) {
        let { buildJsPoint } = await import('./point');
        jsImagePointResult.point = buildJsPoint(dotNetObject.point) as any;
    }

    if (hasValue(dotNetObject.name)) {
        jsImagePointResult.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.sensorName)) {
        jsImagePointResult.sensorName = dotNetObject.sensorName;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsImagePointResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImagePointResult;
    
    let dnInstantiatedObject = await buildDotNetImagePointResult(jsImagePointResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImagePointResult', e);
    }
    
    return jsImagePointResult;
}
export async function buildDotNetImagePointResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImagePointResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.point)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetImagePointResult.point = buildDotNetPoint(jsObject.point);
        }
        if (hasValue(jsObject.name)) {
            dotNetImagePointResult.name = jsObject.name;
        }
        if (hasValue(jsObject.sensorName)) {
            dotNetImagePointResult.sensorName = jsObject.sensorName;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImagePointResult.id = k;
                break;
            }
        }
    }

    return dotNetImagePointResult;
}

