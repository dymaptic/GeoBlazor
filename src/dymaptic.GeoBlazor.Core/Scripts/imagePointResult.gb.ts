// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImagePointResult from '@arcgis/core/rest/support/ImagePointResult';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetImagePointResult } from './imagePointResult';

export async function buildJsImagePointResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.name)) {
        properties.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.point)) {
        const { id, dotNetComponentReference, ...sanitizedPoint } = dotNetObject.point;
        properties.point = sanitizedPoint;
    }
    if (hasValue(dotNetObject.sensorName)) {
        properties.sensorName = dotNetObject.sensorName;
    }
    let jsImagePointResult = new ImagePointResult(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsImagePointResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImagePointResult;
    
    let { buildDotNetImagePointResult } = await import('./imagePointResult');
    let dnInstantiatedObject = await buildDotNetImagePointResult(jsImagePointResult);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type ImagePointResult detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImagePointResult', e);
    }
    
    return jsImagePointResult;
}


export async function buildDotNetImagePointResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImagePointResult: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.name)) {
        dotNetImagePointResult.name = jsObject.name;
    }
    if (hasValue(jsObject.point)) {
        dotNetImagePointResult.point = jsObject.point;
    }
    if (hasValue(jsObject.sensorName)) {
        dotNetImagePointResult.sensorName = jsObject.sensorName;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImagePointResult.id = k;
                break;
            }
        }
    }

    return dotNetImagePointResult;
}

