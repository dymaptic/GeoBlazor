// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImagePointResult from '@arcgis/core/rest/support/ImagePointResult';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetImagePointResult } from './imagePointResult';

export async function buildJsImagePointResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.point)) {
        let { buildJsPoint } = await import('./point');
        properties.point = buildJsPoint(dotNetObject.point) as any;
    }

    if (hasValue(dotNetObject.name)) {
        properties.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.sensorName)) {
        properties.sensorName = dotNetObject.sensorName;
    }
    let jsImagePointResult = new ImagePointResult(properties);
    
    jsObjectRefs[dotNetObject.id] = jsImagePointResult;
    arcGisObjectRefs[dotNetObject.id] = jsImagePointResult;
    
    return jsImagePointResult;
}


export async function buildDotNetImagePointResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImagePointResult: any = {};
    
    if (hasValue(jsObject.point)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetImagePointResult.point = buildDotNetPoint(jsObject.point);
    }
    
    if (hasValue(jsObject.name)) {
        dotNetImagePointResult.name = jsObject.name;
    }
    
    if (hasValue(jsObject.sensorName)) {
        dotNetImagePointResult.sensorName = jsObject.sensorName;
    }
    

    return dotNetImagePointResult;
}

