// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetTypeCreateRendererParams } from './typeCreateRendererParams';

export async function buildJsTypeCreateRendererParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jstypeCreateRendererParams: any = {}
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jstypeCreateRendererParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.colorMixMode)) {
        jstypeCreateRendererParams.colorMixMode = dotNetObject.colorMixMode;
    }
    if (hasValue(dotNetObject.defaultSymbolEnabled)) {
        jstypeCreateRendererParams.defaultSymbolEnabled = dotNetObject.defaultSymbolEnabled;
    }
    if (hasValue(dotNetObject.field)) {
        jstypeCreateRendererParams.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.field2)) {
        jstypeCreateRendererParams.field2 = dotNetObject.field2;
    }
    if (hasValue(dotNetObject.field3)) {
        jstypeCreateRendererParams.field3 = dotNetObject.field3;
    }
    if (hasValue(dotNetObject.forBinning)) {
        jstypeCreateRendererParams.forBinning = dotNetObject.forBinning;
    }
    if (hasValue(dotNetObject.legendOptions)) {
        jstypeCreateRendererParams.legendOptions = dotNetObject.legendOptions;
    }
    if (hasValue(dotNetObject.numTypes)) {
        jstypeCreateRendererParams.numTypes = dotNetObject.numTypes;
    }
    if (hasValue(dotNetObject.outlineOptimizationEnabled)) {
        jstypeCreateRendererParams.outlineOptimizationEnabled = dotNetObject.outlineOptimizationEnabled;
    }
    if (hasValue(dotNetObject.returnAllCodedValues)) {
        jstypeCreateRendererParams.returnAllCodedValues = dotNetObject.returnAllCodedValues;
    }
    if (hasValue(dotNetObject.signal)) {
        jstypeCreateRendererParams.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.sizeOptimizationEnabled)) {
        jstypeCreateRendererParams.sizeOptimizationEnabled = dotNetObject.sizeOptimizationEnabled;
    }
    if (hasValue(dotNetObject.sortBy)) {
        jstypeCreateRendererParams.sortBy = dotNetObject.sortBy;
    }
    if (hasValue(dotNetObject.statistics)) {
        jstypeCreateRendererParams.statistics = dotNetObject.statistics;
    }
    if (hasValue(dotNetObject.symbolType)) {
        jstypeCreateRendererParams.symbolType = dotNetObject.symbolType;
    }
    if (hasValue(dotNetObject.typeScheme)) {
        jstypeCreateRendererParams.typeScheme = dotNetObject.typeScheme;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        jstypeCreateRendererParams.valueExpression = dotNetObject.valueExpression;
    }
    if (hasValue(dotNetObject.valueExpressionTitle)) {
        jstypeCreateRendererParams.valueExpressionTitle = dotNetObject.valueExpressionTitle;
    }
    if (hasValue(dotNetObject.view)) {
        jstypeCreateRendererParams.view = dotNetObject.view;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jstypeCreateRendererParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jstypeCreateRendererParams;
    
    let dnInstantiatedObject = await buildDotNetTypeCreateRendererParams(jstypeCreateRendererParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TypeCreateRendererParams', e);
    }
    
    return jstypeCreateRendererParams;
}

export async function buildDotNetTypeCreateRendererParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTypeCreateRendererParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.colorMixMode)) {
            dotNetTypeCreateRendererParams.colorMixMode = jsObject.colorMixMode;
        }
        if (hasValue(jsObject.defaultSymbolEnabled)) {
            dotNetTypeCreateRendererParams.defaultSymbolEnabled = jsObject.defaultSymbolEnabled;
        }
        if (hasValue(jsObject.field)) {
            dotNetTypeCreateRendererParams.field = jsObject.field;
        }
        if (hasValue(jsObject.field2)) {
            dotNetTypeCreateRendererParams.field2 = jsObject.field2;
        }
        if (hasValue(jsObject.field3)) {
            dotNetTypeCreateRendererParams.field3 = jsObject.field3;
        }
        if (hasValue(jsObject.forBinning)) {
            dotNetTypeCreateRendererParams.forBinning = jsObject.forBinning;
        }
        if (hasValue(jsObject.legendOptions)) {
            dotNetTypeCreateRendererParams.legendOptions = jsObject.legendOptions;
        }
        if (hasValue(jsObject.numTypes)) {
            dotNetTypeCreateRendererParams.numTypes = jsObject.numTypes;
        }
        if (hasValue(jsObject.outlineOptimizationEnabled)) {
            dotNetTypeCreateRendererParams.outlineOptimizationEnabled = jsObject.outlineOptimizationEnabled;
        }
        if (hasValue(jsObject.returnAllCodedValues)) {
            dotNetTypeCreateRendererParams.returnAllCodedValues = jsObject.returnAllCodedValues;
        }
        if (hasValue(jsObject.signal)) {
            dotNetTypeCreateRendererParams.signal = jsObject.signal;
        }
        if (hasValue(jsObject.sizeOptimizationEnabled)) {
            dotNetTypeCreateRendererParams.sizeOptimizationEnabled = jsObject.sizeOptimizationEnabled;
        }
        if (hasValue(jsObject.sortBy)) {
            dotNetTypeCreateRendererParams.sortBy = jsObject.sortBy;
        }
        if (hasValue(jsObject.statistics)) {
            dotNetTypeCreateRendererParams.statistics = jsObject.statistics;
        }
        if (hasValue(jsObject.symbolType)) {
            dotNetTypeCreateRendererParams.symbolType = jsObject.symbolType;
        }
        if (hasValue(jsObject.typeScheme)) {
            dotNetTypeCreateRendererParams.typeScheme = jsObject.typeScheme;
        }
        if (hasValue(jsObject.valueExpression)) {
            dotNetTypeCreateRendererParams.valueExpression = jsObject.valueExpression;
        }
        if (hasValue(jsObject.valueExpressionTitle)) {
            dotNetTypeCreateRendererParams.valueExpressionTitle = jsObject.valueExpressionTitle;
        }
        if (hasValue(jsObject.view)) {
            dotNetTypeCreateRendererParams.view = jsObject.view;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTypeCreateRendererParams.id = k;
                break;
            }
        }
    }

    return dotNetTypeCreateRendererParams;
}

