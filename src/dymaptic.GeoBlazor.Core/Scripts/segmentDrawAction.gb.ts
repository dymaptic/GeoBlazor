// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import SegmentDrawAction = __esri.SegmentDrawAction;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SegmentDrawActionGenerated implements IPropertyWrapper {
    public component: SegmentDrawAction;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: SegmentDrawAction) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async canRedo(): Promise<any> {
        return this.component.canRedo();
    }

    async canUndo(): Promise<any> {
        return this.component.canUndo();
    }

    async complete(): Promise<void> {
        this.component.complete();
    }

    async getCoordsAndPointFromScreenPoint(screenPoint: any): Promise<any> {
        return this.component.getCoordsAndPointFromScreenPoint(screenPoint);
    }

    async getCoordsFromScreenPoint(screenPoint: any): Promise<any> {
        return this.component.getCoordsFromScreenPoint(screenPoint);
    }

    async redo(): Promise<void> {
        this.component.redo();
    }

    async screenToMap(screenPoint: any): Promise<any> {
        return this.component.screenToMap(screenPoint);
    }

    async undo(): Promise<void> {
        this.component.undo();
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsSegmentDrawActionGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSegmentDrawAction: any = {};

    if (hasValue(dotNetObject.hasZ)) {
        jsSegmentDrawAction.hasZ = dotNetObject.hasZ;
    }
    if (hasValue(dotNetObject.mode)) {
        jsSegmentDrawAction.mode = dotNetObject.mode;
    }
    jsSegmentDrawAction.on('cursor-update', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCursorUpdate', evt);
    });
    
    jsSegmentDrawAction.on('draw-complete', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsDrawComplete', evt);
    });
    
    jsSegmentDrawAction.on('vertex-add', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsVertexAdd', evt);
    });
    

    let { default: SegmentDrawActionWrapper } = await import('./segmentDrawAction');
    let segmentDrawActionWrapper = new SegmentDrawActionWrapper(jsSegmentDrawAction);
    segmentDrawActionWrapper.geoBlazorId = dotNetObject.id;
    segmentDrawActionWrapper.viewId = viewId;
    segmentDrawActionWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(segmentDrawActionWrapper);
    jsObjectRefs[dotNetObject.id] = segmentDrawActionWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsSegmentDrawAction;
    let { buildDotNetSegmentDrawAction } = await import('./segmentDrawAction');
    let dnInstantiatedObject = await buildDotNetSegmentDrawAction(jsSegmentDrawAction);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SegmentDrawAction', e);
    }
    
    return jsSegmentDrawAction;
}

export async function buildDotNetSegmentDrawActionGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSegmentDrawAction: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.hasZ)) {
        dotNetSegmentDrawAction.hasZ = jsObject.hasZ;
    }
    if (hasValue(jsObject.mode)) {
        dotNetSegmentDrawAction.mode = jsObject.mode;
    }
    if (hasValue(jsObject.vertices)) {
        dotNetSegmentDrawAction.vertices = jsObject.vertices;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSegmentDrawAction.id = k;
                break;
            }
        }
    }

    return dotNetSegmentDrawAction;
}

