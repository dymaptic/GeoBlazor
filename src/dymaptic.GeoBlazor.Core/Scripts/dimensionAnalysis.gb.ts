import {buildDotNetDimensionAnalysis} from './dimensionAnalysis';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import DimensionAnalysis from '@arcgis/core/analysis/DimensionAnalysis';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsDimensionAnalysisGenerated(dotNetObject: any): Promise<any> {
    let jsDimensionAnalysis = new DimensionAnalysis();
    if (hasValue(dotNetObject.dimensions)) {
        let {buildJsLengthDimension} = await import('./lengthDimension');
        jsDimensionAnalysis.dimensions = await Promise.all(dotNetObject.dimensions.map(async i => await buildJsLengthDimension(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.style)) {
        let {buildJsDimensionSimpleStyle} = await import('./dimensionSimpleStyle');
        jsDimensionAnalysis.style = await buildJsDimensionSimpleStyle(dotNetObject.style, layerId, viewId) as any;
    }


    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsDimensionAnalysis);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsDimensionAnalysis;

    let dnInstantiatedObject = await buildDotNetDimensionAnalysis(jsDimensionAnalysis);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DimensionAnalysis', e);
    }

    return jsDimensionAnalysis;
}

export async function buildDotNetDimensionAnalysisGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetDimensionAnalysis: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.dimensions)) {
        let {buildDotNetLengthDimension} = await import('./lengthDimension');
        dotNetDimensionAnalysis.dimensions = await Promise.all(jsObject.dimensions.map(async i => await buildDotNetLengthDimension(i)));
    }
    if (hasValue(jsObject.style)) {
        let {buildDotNetDimensionSimpleStyle} = await import('./dimensionSimpleStyle');
        dotNetDimensionAnalysis.style = await buildDotNetDimensionSimpleStyle(jsObject.style);
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetDimensionAnalysis.id = k;
                break;
            }
        }
    }

    return dotNetDimensionAnalysis;
}

