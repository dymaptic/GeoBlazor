// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetAuthoringInfoField } from './authoringInfoField';

export async function buildJsAuthoringInfoFieldGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsAuthoringInfoField1: any = {};
    if (hasValue(dotNetObject.classBreakInfos) && dotNetObject.classBreakInfos.length > 0) {
        let { buildJsAuthoringInfoField1ClassBreakInfos } = await import('./authoringInfoField1ClassBreakInfos');
        jsAuthoringInfoField1.classBreakInfos = await Promise.all(dotNetObject.classBreakInfos.map(async i => await buildJsAuthoringInfoField1ClassBreakInfos(i))) as any;
    }

    if (hasValue(dotNetObject.field)) {
        jsAuthoringInfoField1.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.label)) {
        jsAuthoringInfoField1.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.normalizationField)) {
        jsAuthoringInfoField1.normalizationField = dotNetObject.normalizationField;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsAuthoringInfoField1);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsAuthoringInfoField1;
    
    return jsAuthoringInfoField1;
}


export async function buildDotNetAuthoringInfoFieldGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAuthoringInfoField: any = {};
    
    if (hasValue(jsObject.classBreakInfos)) {
        let { buildDotNetAuthoringInfoField1ClassBreakInfos } = await import('./authoringInfoField1ClassBreakInfos');
        dotNetAuthoringInfoField.classBreakInfos = await Promise.all(jsObject.classBreakInfos.map(async i => await buildDotNetAuthoringInfoField1ClassBreakInfos(i)));
    }
    
    if (hasValue(jsObject.field)) {
        dotNetAuthoringInfoField.field = jsObject.field;
    }
    
    if (hasValue(jsObject.label)) {
        dotNetAuthoringInfoField.label = jsObject.label;
    }
    
    if (hasValue(jsObject.normalizationField)) {
        dotNetAuthoringInfoField.normalizationField = jsObject.normalizationField;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetAuthoringInfoField.id = geoBlazorId;
    }

    return dotNetAuthoringInfoField;
}

