// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import AuthoringInfoField1 = __esri.AuthoringInfoField1;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class AuthoringInfoFieldGenerated implements IPropertyWrapper {
    public component: AuthoringInfoField1;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: AuthoringInfoField1) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getClassBreakInfos(): Promise<any> {
        if (!hasValue(this.component.classBreakInfos)) {
            return null;
        }
        
        let { buildDotNetAuthoringInfoField1ClassBreakInfos } = await import('./authoringInfoField1ClassBreakInfos');
        return await Promise.all(this.component.classBreakInfos.map(async i => await buildDotNetAuthoringInfoField1ClassBreakInfos(i)));
    }
    
    async setClassBreakInfos(value: any): Promise<void> {
        let { buildJsAuthoringInfoField1ClassBreakInfos } = await import('./authoringInfoField1ClassBreakInfos');
        this.component.classBreakInfos = await Promise.all(value.map(async i => await buildJsAuthoringInfoField1ClassBreakInfos(i, this.layerId, this.viewId)));
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsAuthoringInfoFieldGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsAuthoringInfoField1: any = {}
    if (hasValue(dotNetObject.classBreakInfos)) {
        let { buildJsAuthoringInfoField1ClassBreakInfos } = await import('./authoringInfoField1ClassBreakInfos');
        jsAuthoringInfoField1.classBreakInfos = await Promise.all(dotNetObject.classBreakInfos.map(async i => await buildJsAuthoringInfoField1ClassBreakInfos(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.field)) {
        jsAuthoringInfoField1.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.label)) {
        jsAuthoringInfoField1.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.normalizationField)) {
        jsAuthoringInfoField1.normalizationField = dotNetObject.normalizationField;
    }
    let { default: AuthoringInfoFieldWrapper } = await import('./authoringInfoField');
    let authoringInfoFieldWrapper = new AuthoringInfoFieldWrapper(jsAuthoringInfoField1);
    authoringInfoFieldWrapper.geoBlazorId = dotNetObject.id;
    authoringInfoFieldWrapper.viewId = viewId;
    authoringInfoFieldWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(authoringInfoFieldWrapper);
    jsObjectRefs[dotNetObject.id] = authoringInfoFieldWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsAuthoringInfoField1;
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for AuthoringInfoField', e);
    }
    
    return jsAuthoringInfoField1;
}

export async function buildDotNetAuthoringInfoFieldGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAuthoringInfoField: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.classBreakInfos)) {
            let { buildDotNetAuthoringInfoField1ClassBreakInfos } = await import('./authoringInfoField1ClassBreakInfos');
            dotNetAuthoringInfoField.classBreakInfos = await Promise.all(jsObject.classBreakInfos.map(async i => await buildDotNetAuthoringInfoField1ClassBreakInfos(i)));
        }
        if (hasValue(jsObject.field)) {
            dotNetAuthoringInfoField.field = jsObject.field;
        }
        if (hasValue(jsObject.label)) {
            dotNetAuthoringInfoField.label = jsObject.label;
        }
        if (hasValue(jsObject.normalizationField)) {
            dotNetAuthoringInfoField.normalizationField = jsObject.normalizationField;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetAuthoringInfoField.id = k;
                break;
            }
        }
    }

    return dotNetAuthoringInfoField;
}

