// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import AuthoringInfoField1 = __esri.AuthoringInfoField1;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class AuthoringInfoFieldGenerated implements IPropertyWrapper {
    public component: AuthoringInfoField1;
    public readonly geoBlazorId: string = '';

    constructor(component: AuthoringInfoField1) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getClassBreakInfos(): Promise<any> {
        let { buildDotNetAuthoringInfoField1ClassBreakInfos } = await import('./authoringInfoField1ClassBreakInfos');
        return this.component.classBreakInfos.map(async i => await buildDotNetAuthoringInfoField1ClassBreakInfos(i));
    }
    
    async setClassBreakInfos(value: any): Promise<void> {
        let { buildJsAuthoringInfoField1ClassBreakInfos } = await import('./authoringInfoField1ClassBreakInfos');
        this.component.classBreakInfos = value.map(async i => await buildJsAuthoringInfoField1ClassBreakInfos(i));
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}
export async function buildJsAuthoringInfoFieldGenerated(dotNetObject: any): Promise<any> {
    let jsAuthoringInfoField1 = {
    if (hasValue(dotNetObject.classBreakInfos)) {
        let { buildJsAuthoringInfoField1ClassBreakInfos } = await import('authoringInfoField1ClassBreakInfos');
        jsAuthoringInfoField1.classBreakInfos = dotNetObject.classBreakInfos.map(async i => await buildJsAuthoringInfoField1ClassBreakInfos(i)) as any;

    }
        field: dotNetObject.field,
        label: dotNetObject.label,
        normalizationField: dotNetObject.normalizationField,
    }
    let { default: AuthoringInfoFieldWrapper } = await import('./authoringInfoField');
    let authoringInfoFieldWrapper = new AuthoringInfoFieldWrapper(jsAuthoringInfoField1);
    jsAuthoringInfoField1.id = dotNetObject.id;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(authoringInfoFieldWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = authoringInfoFieldWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsAuthoringInfoField1;
    
    return jsAuthoringInfoField1;
}

export async function buildDotNetAuthoringInfoFieldGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAuthoringInfoField: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.classBreakInfos)) {
            let { buildDotNetAuthoringInfoField1ClassBreakInfos } = await import('./authoringInfoField1ClassBreakInfos');
            dotNetAuthoringInfoField.classBreakInfos = jsObject.classBreakInfos.map(async i => await buildDotNetAuthoringInfoField1ClassBreakInfos(i));
        }
        dotNetAuthoringInfoField.field = jsObject.field;
        dotNetAuthoringInfoField.label = jsObject.label;
        dotNetAuthoringInfoField.normalizationField = jsObject.normalizationField;
    return dotNetAuthoringInfoField;
}

