// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetAuthoringInfoStatistics } from './authoringInfoStatistics';

export async function buildJsAuthoringInfoStatisticsGenerated(dotNetObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsAuthoringInfoStatistics: any = {};

    if (hasValue(dotNetObject.max)) {
        jsAuthoringInfoStatistics.max = dotNetObject.max;
    }
    if (hasValue(dotNetObject.min)) {
        jsAuthoringInfoStatistics.min = dotNetObject.min;
    }
    
    jsObjectRefs[dotNetObject.id] = jsAuthoringInfoStatistics;
    arcGisObjectRefs[dotNetObject.id] = jsAuthoringInfoStatistics;
    
    return jsAuthoringInfoStatistics;
}


export async function buildDotNetAuthoringInfoStatisticsGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAuthoringInfoStatistics: any = {};
    
    if (hasValue(jsObject.max)) {
        dotNetAuthoringInfoStatistics.max = jsObject.max;
    }
    
    if (hasValue(jsObject.min)) {
        dotNetAuthoringInfoStatistics.min = jsObject.min;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetAuthoringInfoStatistics.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetAuthoringInfoStatistics.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetAuthoringInfoStatistics.id)) {
        jsObjectRefs[dotNetAuthoringInfoStatistics.id] ??= jsObject;
        arcGisObjectRefs[dotNetAuthoringInfoStatistics.id] ??= jsObject;
    }

    return dotNetAuthoringInfoStatistics;
}

