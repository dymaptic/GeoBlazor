// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetGeoJSONLayerGetFieldDomainOptions } from './geoJSONLayerGetFieldDomainOptions';

export async function buildJsGeoJSONLayerGetFieldDomainOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsGeoJSONLayerGetFieldDomainOptions: any = {};
    if (hasValue(dotNetObject.feature)) {
        let { buildJsGraphic } = await import('./graphic');
        jsGeoJSONLayerGetFieldDomainOptions.feature = buildJsGraphic(dotNetObject.feature) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsGeoJSONLayerGetFieldDomainOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsGeoJSONLayerGetFieldDomainOptions;
    
    return jsGeoJSONLayerGetFieldDomainOptions;
}


export async function buildDotNetGeoJSONLayerGetFieldDomainOptionsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsGeoJSONLayerGetFieldDomainOptions } = await import('./geoJSONLayerGetFieldDomainOptions');
        jsComponentRef = await buildJsGeoJSONLayerGetFieldDomainOptions(jsObject, layerId, viewId);
    }
    
    let dotNetGeoJSONLayerGetFieldDomainOptions: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.feature)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetGeoJSONLayerGetFieldDomainOptions.feature = buildDotNetGraphic(jsObject.feature, layerId, viewId);
    }

    return dotNetGeoJSONLayerGetFieldDomainOptions;
}

