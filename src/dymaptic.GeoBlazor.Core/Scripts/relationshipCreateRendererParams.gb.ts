// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetRelationshipCreateRendererParams } from './relationshipCreateRendererParams';

export async function buildJsRelationshipCreateRendererParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsrelationshipCreateRendererParams: any = {};
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsrelationshipCreateRendererParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.classificationMethod)) {
        jsrelationshipCreateRendererParams.classificationMethod = dotNetObject.classificationMethod;
    }
    if (hasValue(dotNetObject.colorMixMode)) {
        jsrelationshipCreateRendererParams.colorMixMode = dotNetObject.colorMixMode;
    }
    if (hasValue(dotNetObject.defaultSymbolEnabled)) {
        jsrelationshipCreateRendererParams.defaultSymbolEnabled = dotNetObject.defaultSymbolEnabled;
    }
    if (hasValue(dotNetObject.field1)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedField1 } = dotNetObject.field1;
        jsrelationshipCreateRendererParams.field1 = sanitizedField1;
    }
    if (hasValue(dotNetObject.field2)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedField2 } = dotNetObject.field2;
        jsrelationshipCreateRendererParams.field2 = sanitizedField2;
    }
    if (hasValue(dotNetObject.focus)) {
        jsrelationshipCreateRendererParams.focus = dotNetObject.focus;
    }
    if (hasValue(dotNetObject.forBinning)) {
        jsrelationshipCreateRendererParams.forBinning = dotNetObject.forBinning;
    }
    if (hasValue(dotNetObject.legendOptions)) {
        jsrelationshipCreateRendererParams.legendOptions = dotNetObject.legendOptions;
    }
    if (hasValue(dotNetObject.numClasses)) {
        jsrelationshipCreateRendererParams.numClasses = dotNetObject.numClasses;
    }
    if (hasValue(dotNetObject.outlineOptimizationEnabled)) {
        jsrelationshipCreateRendererParams.outlineOptimizationEnabled = dotNetObject.outlineOptimizationEnabled;
    }
    if (hasValue(dotNetObject.relationshipScheme)) {
        jsrelationshipCreateRendererParams.relationshipScheme = dotNetObject.relationshipScheme;
    }
    if (hasValue(dotNetObject.signal)) {
        jsrelationshipCreateRendererParams.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.sizeOptimizationEnabled)) {
        jsrelationshipCreateRendererParams.sizeOptimizationEnabled = dotNetObject.sizeOptimizationEnabled;
    }
    if (hasValue(dotNetObject.symbolType)) {
        jsrelationshipCreateRendererParams.symbolType = dotNetObject.symbolType;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsrelationshipCreateRendererParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsrelationshipCreateRendererParams;
    
    let dnInstantiatedObject = await buildDotNetRelationshipCreateRendererParams(jsrelationshipCreateRendererParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RelationshipCreateRendererParams', e);
    }
    
    return jsrelationshipCreateRendererParams;
}

export async function buildDotNetRelationshipCreateRendererParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRelationshipCreateRendererParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.classificationMethod)) {
        dotNetRelationshipCreateRendererParams.classificationMethod = jsObject.classificationMethod;
    }
    if (hasValue(jsObject.colorMixMode)) {
        dotNetRelationshipCreateRendererParams.colorMixMode = jsObject.colorMixMode;
    }
    if (hasValue(jsObject.defaultSymbolEnabled)) {
        dotNetRelationshipCreateRendererParams.defaultSymbolEnabled = jsObject.defaultSymbolEnabled;
    }
    if (hasValue(jsObject.field1)) {
        dotNetRelationshipCreateRendererParams.field1 = jsObject.field1;
    }
    if (hasValue(jsObject.field2)) {
        dotNetRelationshipCreateRendererParams.field2 = jsObject.field2;
    }
    if (hasValue(jsObject.focus)) {
        dotNetRelationshipCreateRendererParams.focus = jsObject.focus;
    }
    if (hasValue(jsObject.forBinning)) {
        dotNetRelationshipCreateRendererParams.forBinning = jsObject.forBinning;
    }
    if (hasValue(jsObject.legendOptions)) {
        dotNetRelationshipCreateRendererParams.legendOptions = jsObject.legendOptions;
    }
    if (hasValue(jsObject.numClasses)) {
        dotNetRelationshipCreateRendererParams.numClasses = jsObject.numClasses;
    }
    if (hasValue(jsObject.outlineOptimizationEnabled)) {
        dotNetRelationshipCreateRendererParams.outlineOptimizationEnabled = jsObject.outlineOptimizationEnabled;
    }
    if (hasValue(jsObject.relationshipScheme)) {
        dotNetRelationshipCreateRendererParams.relationshipScheme = jsObject.relationshipScheme;
    }
    if (hasValue(jsObject.signal)) {
        dotNetRelationshipCreateRendererParams.signal = jsObject.signal;
    }
    if (hasValue(jsObject.sizeOptimizationEnabled)) {
        dotNetRelationshipCreateRendererParams.sizeOptimizationEnabled = jsObject.sizeOptimizationEnabled;
    }
    if (hasValue(jsObject.symbolType)) {
        dotNetRelationshipCreateRendererParams.symbolType = jsObject.symbolType;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRelationshipCreateRendererParams.id = k;
                break;
            }
        }
    }

    return dotNetRelationshipCreateRendererParams;
}

