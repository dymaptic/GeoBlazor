// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import CornersGeoreference from '@arcgis/core/layers/support/CornersGeoreference';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetCornersGeoreference } from './cornersGeoreference';

export async function buildJsCornersGeoreferenceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.bottomLeft)) {
        let { buildJsPoint } = await import('./point');
        properties.bottomLeft = buildJsPoint(dotNetObject.bottomLeft) as any;
    }
    if (hasValue(dotNetObject.bottomRight)) {
        let { buildJsPoint } = await import('./point');
        properties.bottomRight = buildJsPoint(dotNetObject.bottomRight) as any;
    }
    if (hasValue(dotNetObject.topLeft)) {
        let { buildJsPoint } = await import('./point');
        properties.topLeft = buildJsPoint(dotNetObject.topLeft) as any;
    }
    if (hasValue(dotNetObject.topRight)) {
        let { buildJsPoint } = await import('./point');
        properties.topRight = buildJsPoint(dotNetObject.topRight) as any;
    }

    let jsCornersGeoreference = new CornersGeoreference(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCornersGeoreference);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCornersGeoreference;
    
    let dnInstantiatedObject = await buildDotNetCornersGeoreference(jsCornersGeoreference);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CornersGeoreference', e);
    }
    
    return jsCornersGeoreference;
}

export async function buildDotNetCornersGeoreferenceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCornersGeoreference: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.bottomLeft)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetCornersGeoreference.bottomLeft = buildDotNetPoint(jsObject.bottomLeft);
        }
        if (hasValue(jsObject.bottomRight)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetCornersGeoreference.bottomRight = buildDotNetPoint(jsObject.bottomRight);
        }
        if (hasValue(jsObject.topLeft)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetCornersGeoreference.topLeft = buildDotNetPoint(jsObject.topLeft);
        }
        if (hasValue(jsObject.topRight)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetCornersGeoreference.topRight = buildDotNetPoint(jsObject.topRight);
        }
    if (hasValue(jsObject.type)) {
        dotNetCornersGeoreference.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCornersGeoreference.id = k;
                break;
            }
        }
    }

    return dotNetCornersGeoreference;
}

