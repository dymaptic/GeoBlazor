// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import BasemapLayerList from '@arcgis/core/widgets/BasemapLayerList';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, buildJsStreamReference, generateSerializableJson } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class BasemapLayerListWidgetGenerated implements IPropertyWrapper {
    public widget: BasemapLayerList;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: BasemapLayerList) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.selectedItems) && dotNetObject.selectedItems.length > 0) {
            let { buildJsListItem } = await import('./listItem');
            this.widget.selectedItems = await Promise.all(dotNetObject.selectedItems.map(async i => await buildJsListItem(i, this.layerId, this.viewId))) as any;
        }
        if (hasValue(dotNetObject.visibleElements)) {
            let { buildJsBasemapLayerListWidgetVisibleElements } = await import('./basemapLayerListWidgetVisibleElements');
            this.widget.visibleElements = await buildJsBasemapLayerListWidgetVisibleElements(dotNetObject.visibleElements, this.layerId, this.viewId) as any;
        }

        if (hasValue(dotNetObject.baseFilterText)) {
            this.widget.baseFilterText = dotNetObject.baseFilterText;
        }
        if (hasValue(dotNetObject.basemapTitle)) {
            this.widget.basemapTitle = dotNetObject.basemapTitle;
        }
        if (hasValue(dotNetObject.catalogOptions)) {
            this.widget.catalogOptions = dotNetObject.catalogOptions;
        }
        if (hasValue(dotNetObject.collapsed)) {
            this.widget.collapsed = dotNetObject.collapsed;
        }
        if (hasValue(dotNetObject.dragEnabled)) {
            this.widget.dragEnabled = dotNetObject.dragEnabled;
        }
        if (hasValue(dotNetObject.editingTitle)) {
            this.widget.editingTitle = dotNetObject.editingTitle;
        }
        if (hasValue(dotNetObject.filterPlaceholder)) {
            this.widget.filterPlaceholder = dotNetObject.filterPlaceholder;
        }
        if (hasValue(dotNetObject.headingLevel)) {
            this.widget.headingLevel = dotNetObject.headingLevel;
        }
        if (hasValue(dotNetObject.icon)) {
            this.widget.icon = dotNetObject.icon;
        }
        if (hasValue(dotNetObject.label)) {
            this.widget.label = dotNetObject.label;
        }
        if (hasValue(dotNetObject.minFilterItems)) {
            this.widget.minFilterItems = dotNetObject.minFilterItems;
        }
        if (hasValue(dotNetObject.referenceFilterText)) {
            this.widget.referenceFilterText = dotNetObject.referenceFilterText;
        }
        if (hasValue(dotNetObject.selectionMode)) {
            this.widget.selectionMode = dotNetObject.selectionMode;
        }
        if (hasValue(dotNetObject.visibilityAppearance)) {
            this.widget.visibilityAppearance = dotNetObject.visibilityAppearance;
        }
        if (hasValue(dotNetObject.visible)) {
            this.widget.visible = dotNetObject.visible;
        }
        if (hasValue(dotNetObject.widgetId)) {
            this.widget.id = dotNetObject.widgetId;
        }
    }
    
    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async render(): Promise<any> {
        let result = this.widget.render();
        
        return generateSerializableJson(result);
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async triggerAction(action: any,
        item: any): Promise<void> {
        let { buildJsActionBase } = await import('./actionBase');
        let jsAction = buildJsActionBase(action, this.viewId) as any;
        let { buildJsListItem } = await import('./listItem');
        let jsItem = await buildJsListItem(item, this.layerId, this.viewId) as any;
        this.widget.triggerAction(jsAction,
            jsItem);
    }

    async when(callback: any,
        errback: any): Promise<any> {
        let result = await this.widget.when(callback,
            errback);
        
        return generateSerializableJson(result);
    }

    // region properties
    
    getBaseFilterText(): any {
        if (!hasValue(this.widget.baseFilterText)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.baseFilterText);
    }
    
    setBaseFilterText(value: any): void {
        this.widget.baseFilterText = JSON.parse(value);
    }
    
    async getBaseItems(): Promise<any> {
        if (!hasValue(this.widget.baseItems)) {
            return null;
        }
        
        let { buildDotNetListItem } = await import('./listItem');
        return await Promise.all(this.widget.baseItems!.map(async i => await buildDotNetListItem(i, this.viewId)));
    }
    
    getBasemapTitle(): any {
        if (!hasValue(this.widget.basemapTitle)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.basemapTitle);
    }
    
    setBasemapTitle(value: any): void {
        this.widget.basemapTitle = JSON.parse(value);
    }
    
    getFilterPlaceholder(): any {
        if (!hasValue(this.widget.filterPlaceholder)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.filterPlaceholder);
    }
    
    setFilterPlaceholder(value: any): void {
        this.widget.filterPlaceholder = JSON.parse(value);
    }
    
    getIcon(): any {
        if (!hasValue(this.widget.icon)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.icon);
    }
    
    setIcon(value: any): void {
        this.widget.icon = JSON.parse(value);
    }
    
    getLabel(): any {
        if (!hasValue(this.widget.label)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.label);
    }
    
    setLabel(value: any): void {
        this.widget.label = JSON.parse(value);
    }
    
    getReferenceFilterText(): any {
        if (!hasValue(this.widget.referenceFilterText)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.referenceFilterText);
    }
    
    setReferenceFilterText(value: any): void {
        this.widget.referenceFilterText = JSON.parse(value);
    }
    
    async getReferenceItems(): Promise<any> {
        if (!hasValue(this.widget.referenceItems)) {
            return null;
        }
        
        let { buildDotNetListItem } = await import('./listItem');
        return await Promise.all(this.widget.referenceItems!.map(async i => await buildDotNetListItem(i, this.viewId)));
    }
    
    async getSelectedItems(): Promise<any> {
        if (!hasValue(this.widget.selectedItems)) {
            return null;
        }
        
        let { buildDotNetListItem } = await import('./listItem');
        return await Promise.all(this.widget.selectedItems!.map(async i => await buildDotNetListItem(i, this.viewId)));
    }
    
    async setSelectedItems(value: any): Promise<void> {
        if (!hasValue(value)) {
            this.widget.selectedItems.removeAll();
        }
        let { buildJsListItem } = await import('./listItem');
        this.widget.selectedItems = await Promise.all(value.map(async i => await buildJsListItem(i, this.layerId, this.viewId))) as any;
    }
    
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetBasemapLayerListViewModel } = await import('./basemapLayerListViewModel');
        return await buildDotNetBasemapLayerListViewModel(this.widget.viewModel, this.viewId);
    }
    
    async setViewModel(value: any): Promise<void> {
        let { buildJsBasemapLayerListViewModel } = await import('./basemapLayerListViewModel');
        this.widget.viewModel = await  buildJsBasemapLayerListViewModel(value, this.layerId, this.viewId);
    }
    
    async getVisibleElements(): Promise<any> {
        if (!hasValue(this.widget.visibleElements)) {
            return null;
        }
        
        let { buildDotNetBasemapLayerListWidgetVisibleElements } = await import('./basemapLayerListWidgetVisibleElements');
        return await buildDotNetBasemapLayerListWidgetVisibleElements(this.widget.visibleElements, this.viewId);
    }
    
    async setVisibleElements(value: any): Promise<void> {
        let { buildJsBasemapLayerListWidgetVisibleElements } = await import('./basemapLayerListWidgetVisibleElements');
        this.widget.visibleElements = await  buildJsBasemapLayerListWidgetVisibleElements(value, this.layerId, this.viewId);
    }
    
    getWidgetId(): any {
        if (!hasValue(this.widget.id)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.id);
    }
    
    setWidgetId(value: any): void {
        this.widget.id = JSON.parse(value);
    }
    
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsBasemapLayerListWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.hasBaseFilterPredicate) && dotNetObject.hasBaseFilterPredicate) {
        properties.baseFilterPredicate = async (item) => {
            let { buildDotNetListItem } = await import('./listItem');
            let dnItem = await buildDotNetListItem(item, viewId);

            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsBaseFilterPredicate', dnItem);
        };
    }
    if (hasValue(dotNetObject.hasBaseListItemCreatedFunction) && dotNetObject.hasBaseListItemCreatedFunction) {
        properties.baseListItemCreatedFunction = async (event) => {

            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsBaseListItemCreatedFunction', event);
        };
    }
    if (hasValue(dotNetObject.hasReferenceFilterPredicate) && dotNetObject.hasReferenceFilterPredicate) {
        properties.referenceFilterPredicate = async (item) => {
            let { buildDotNetListItem } = await import('./listItem');
            let dnItem = await buildDotNetListItem(item, viewId);

            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsReferenceFilterPredicate', dnItem);
        };
    }
    if (hasValue(dotNetObject.hasReferenceListItemCreatedFunction) && dotNetObject.hasReferenceListItemCreatedFunction) {
        properties.referenceListItemCreatedFunction = async (event) => {

            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsReferenceListItemCreatedFunction', event);
        };
    }
    if (hasValue(dotNetObject.selectedItems) && dotNetObject.selectedItems.length > 0) {
        let { buildJsListItem } = await import('./listItem');
        properties.selectedItems = await Promise.all(dotNetObject.selectedItems.map(async i => await buildJsListItem(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsBasemapLayerListViewModel } = await import('./basemapLayerListViewModel');
        properties.viewModel = await buildJsBasemapLayerListViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.visibleElements)) {
        let { buildJsBasemapLayerListWidgetVisibleElements } = await import('./basemapLayerListWidgetVisibleElements');
        properties.visibleElements = await buildJsBasemapLayerListWidgetVisibleElements(dotNetObject.visibleElements, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.baseFilterText)) {
        properties.baseFilterText = dotNetObject.baseFilterText;
    }
    if (hasValue(dotNetObject.basemapTitle)) {
        properties.basemapTitle = dotNetObject.basemapTitle;
    }
    if (hasValue(dotNetObject.catalogOptions)) {
        properties.catalogOptions = dotNetObject.catalogOptions;
    }
    if (hasValue(dotNetObject.collapsed)) {
        properties.collapsed = dotNetObject.collapsed;
    }
    if (hasValue(dotNetObject.dragEnabled)) {
        properties.dragEnabled = dotNetObject.dragEnabled;
    }
    if (hasValue(dotNetObject.editingTitle)) {
        properties.editingTitle = dotNetObject.editingTitle;
    }
    if (hasValue(dotNetObject.filterPlaceholder)) {
        properties.filterPlaceholder = dotNetObject.filterPlaceholder;
    }
    if (hasValue(dotNetObject.headingLevel)) {
        properties.headingLevel = dotNetObject.headingLevel;
    }
    if (hasValue(dotNetObject.icon)) {
        properties.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.minFilterItems)) {
        properties.minFilterItems = dotNetObject.minFilterItems;
    }
    if (hasValue(dotNetObject.referenceFilterText)) {
        properties.referenceFilterText = dotNetObject.referenceFilterText;
    }
    if (hasValue(dotNetObject.selectionMode)) {
        properties.selectionMode = dotNetObject.selectionMode;
    }
    if (hasValue(dotNetObject.visibilityAppearance)) {
        properties.visibilityAppearance = dotNetObject.visibilityAppearance;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    if (hasValue(dotNetObject.widgetId)) {
        properties.id = dotNetObject.widgetId;
    }
    let jsBasemapLayerList = new BasemapLayerList(properties);
    if (hasValue(dotNetObject.hasTriggerActionListener) && dotNetObject.hasTriggerActionListener) {
        jsBasemapLayerList.on('trigger-action', async (evt: any) => {
            let { buildDotNetBasemapLayerListTriggerActionEvent } = await import('./basemapLayerListTriggerActionEvent');
            let dnEvent = await buildDotNetBasemapLayerListTriggerActionEvent(evt, layerId, viewId);
            let streamRef = buildJsStreamReference(dnEvent ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsTriggerAction', streamRef);
        });
    }
    

    let { default: BasemapLayerListWidgetWrapper } = await import('./basemapLayerListWidget');
    let basemapLayerListWidgetWrapper = new BasemapLayerListWidgetWrapper(jsBasemapLayerList);
    basemapLayerListWidgetWrapper.geoBlazorId = dotNetObject.id;
    basemapLayerListWidgetWrapper.viewId = viewId;
    basemapLayerListWidgetWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = basemapLayerListWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsBasemapLayerList;
    
    try {
        let jsObjectRef = DotNet.createJSObjectReference(basemapLayerListWidgetWrapper);
        let { buildDotNetBasemapLayerListWidget } = await import('./basemapLayerListWidget');
        let dnInstantiatedObject = await buildDotNetBasemapLayerListWidget(jsBasemapLayerList, layerId, viewId);

        let dnStream = buildJsStreamReference(dnInstantiatedObject);
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, dnStream);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BasemapLayerListWidget', e);
    }
    
    return jsBasemapLayerList;
}


export async function buildDotNetBasemapLayerListWidgetGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBasemapLayerListWidget: any = {};
    
    if (hasValue(jsObject.baseItems)) {
        let { buildDotNetListItem } = await import('./listItem');
        dotNetBasemapLayerListWidget.baseItems = await Promise.all(jsObject.baseItems.map(async i => await buildDotNetListItem(i, viewId)));
    }
    
    if (hasValue(jsObject.referenceItems)) {
        let { buildDotNetListItem } = await import('./listItem');
        dotNetBasemapLayerListWidget.referenceItems = await Promise.all(jsObject.referenceItems.map(async i => await buildDotNetListItem(i, viewId)));
    }
    
    if (hasValue(jsObject.selectedItems)) {
        let { buildDotNetListItem } = await import('./listItem');
        dotNetBasemapLayerListWidget.selectedItems = await Promise.all(jsObject.selectedItems.map(async i => await buildDotNetListItem(i, viewId)));
    }
    
    if (hasValue(jsObject.viewModel)) {
        let { buildDotNetBasemapLayerListViewModel } = await import('./basemapLayerListViewModel');
        dotNetBasemapLayerListWidget.viewModel = await buildDotNetBasemapLayerListViewModel(jsObject.viewModel, viewId);
    }
    
    if (hasValue(jsObject.visibleElements)) {
        let { buildDotNetBasemapLayerListWidgetVisibleElements } = await import('./basemapLayerListWidgetVisibleElements');
        dotNetBasemapLayerListWidget.visibleElements = await buildDotNetBasemapLayerListWidgetVisibleElements(jsObject.visibleElements, viewId);
    }
    
    if (hasValue(jsObject.baseFilterText)) {
        dotNetBasemapLayerListWidget.baseFilterText = jsObject.baseFilterText;
    }
    
    if (hasValue(jsObject.basemapTitle)) {
        dotNetBasemapLayerListWidget.basemapTitle = jsObject.basemapTitle;
    }
    
    if (hasValue(jsObject.catalogLayerList)) {
        dotNetBasemapLayerListWidget.catalogLayerList = removeCircularReferences(jsObject.catalogLayerList);
    }
    
    if (hasValue(jsObject.catalogOptions)) {
        dotNetBasemapLayerListWidget.catalogOptions = removeCircularReferences(jsObject.catalogOptions);
    }
    
    if (hasValue(jsObject.collapsed)) {
        dotNetBasemapLayerListWidget.collapsed = jsObject.collapsed;
    }
    
    if (hasValue(jsObject.dragEnabled)) {
        dotNetBasemapLayerListWidget.dragEnabled = jsObject.dragEnabled;
    }
    
    if (hasValue(jsObject.editingTitle)) {
        dotNetBasemapLayerListWidget.editingTitle = jsObject.editingTitle;
    }
    
    if (hasValue(jsObject.filterPlaceholder)) {
        dotNetBasemapLayerListWidget.filterPlaceholder = jsObject.filterPlaceholder;
    }
    
    if (hasValue(jsObject.headingLevel)) {
        dotNetBasemapLayerListWidget.headingLevel = jsObject.headingLevel;
    }
    
    if (hasValue(jsObject.icon)) {
        dotNetBasemapLayerListWidget.icon = jsObject.icon;
    }
    
    if (hasValue(jsObject.label)) {
        dotNetBasemapLayerListWidget.label = jsObject.label;
    }
    
    if (hasValue(jsObject.minFilterItems)) {
        dotNetBasemapLayerListWidget.minFilterItems = jsObject.minFilterItems;
    }
    
    if (hasValue(jsObject.referenceFilterText)) {
        dotNetBasemapLayerListWidget.referenceFilterText = jsObject.referenceFilterText;
    }
    
    if (hasValue(jsObject.selectionMode)) {
        dotNetBasemapLayerListWidget.selectionMode = removeCircularReferences(jsObject.selectionMode);
    }
    
    if (hasValue(jsObject.type)) {
        dotNetBasemapLayerListWidget.type = removeCircularReferences(jsObject.type);
    }
    
    if (hasValue(jsObject.visibilityAppearance)) {
        dotNetBasemapLayerListWidget.visibilityAppearance = removeCircularReferences(jsObject.visibilityAppearance);
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetBasemapLayerListWidget.visible = jsObject.visible;
    }
    
    if (hasValue(jsObject.id)) {
        dotNetBasemapLayerListWidget.widgetId = jsObject.id;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetBasemapLayerListWidget.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetBasemapLayerListWidget.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetBasemapLayerListWidget.id)) {
        jsObjectRefs[dotNetBasemapLayerListWidget.id] ??= jsObject;
        arcGisObjectRefs[dotNetBasemapLayerListWidget.id] ??= jsObject;
    }

    return dotNetBasemapLayerListWidget;
}

