// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import BasemapLayerList from '@arcgis/core/widgets/BasemapLayerList';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class BasemapLayerListWidgetGenerated implements IPropertyWrapper {
    public widget: BasemapLayerList;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: BasemapLayerList) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    
    async triggerAction(action: any,
        item: any): Promise<void> {
        let { buildJsListItem } = await import('./listItem');
        let jsItem = await buildJsListItem(item, this.layerId, this.viewId) as any;
        this.widget.triggerAction(action,
            jsItem);
    }

    // region properties
    
    async getBaseItems(): Promise<any> {
        if (!hasValue(this.widget.baseItems)) {
            return null;
        }
        
        let { buildDotNetListItem } = await import('./listItem');
        return await Promise.all(this.widget.baseItems.map(async i => await buildDotNetListItem(i)));
    }
    
    async getReferenceItems(): Promise<any> {
        if (!hasValue(this.widget.referenceItems)) {
            return null;
        }
        
        let { buildDotNetListItem } = await import('./listItem');
        return await Promise.all(this.widget.referenceItems.map(async i => await buildDotNetListItem(i)));
    }
    
    async getSelectedItems(): Promise<any> {
        if (!hasValue(this.widget.selectedItems)) {
            return null;
        }
        
        let { buildDotNetListItem } = await import('./listItem');
        return await Promise.all(this.widget.selectedItems.map(async i => await buildDotNetListItem(i)));
    }
    
    async setSelectedItems(value: any): Promise<void> {
        let { buildJsListItem } = await import('./listItem');
        this.widget.selectedItems = await Promise.all(value.map(async i => await buildJsListItem(i, this.layerId, this.viewId))) as any;
    }
    
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetBasemapLayerListViewModel } = await import('./basemapLayerListViewModel');
        return await buildDotNetBasemapLayerListViewModel(this.widget.viewModel);
    }
    async setViewModel(value: any): Promise<void> {
        let { buildJsBasemapLayerListViewModel } = await import('./basemapLayerListViewModel');
        this.widget.viewModel = await  buildJsBasemapLayerListViewModel(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsBasemapLayerListWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsBasemapLayerList = new BasemapLayerList();
    if (hasValue(dotNetObject.hasBaseListItemCreatedFunction) && dotNetObject.hasBaseListItemCreatedFunction) {
        jsBasemapLayerList.baseListItemCreatedFunction = (event) => {
            dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsBaseListItemCreatedFunction', event);
        };
    }
    if (hasValue(dotNetObject.hasReferenceListItemCreatedFunction) && dotNetObject.hasReferenceListItemCreatedFunction) {
        jsBasemapLayerList.referenceListItemCreatedFunction = (event) => {
            dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsReferenceListItemCreatedFunction', event);
        };
    }
    if (hasValue(dotNetObject.selectedItems)) {
        let { buildJsListItem } = await import('./listItem');
        jsBasemapLayerList.selectedItems = await Promise.all(dotNetObject.selectedItems.map(async i => await buildJsListItem(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsBasemapLayerListViewModel } = await import('./basemapLayerListViewModel');
        jsBasemapLayerList.viewModel = await buildJsBasemapLayerListViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.baseFilterText)) {
        jsBasemapLayerList.baseFilterText = dotNetObject.baseFilterText;
    }
    if (hasValue(dotNetObject.basemapTitle)) {
        jsBasemapLayerList.basemapTitle = dotNetObject.basemapTitle;
    }
    if (hasValue(dotNetObject.catalogOptions)) {
        jsBasemapLayerList.catalogOptions = dotNetObject.catalogOptions;
    }
    if (hasValue(dotNetObject.collapsed)) {
        jsBasemapLayerList.collapsed = dotNetObject.collapsed;
    }
    if (hasValue(dotNetObject.dragEnabled)) {
        jsBasemapLayerList.dragEnabled = dotNetObject.dragEnabled;
    }
    if (hasValue(dotNetObject.editingEnabled)) {
        jsBasemapLayerList.editingEnabled = dotNetObject.editingEnabled;
    }
    if (hasValue(dotNetObject.editingTitle)) {
        jsBasemapLayerList.editingTitle = dotNetObject.editingTitle;
    }
    if (hasValue(dotNetObject.filterPlaceholder)) {
        jsBasemapLayerList.filterPlaceholder = dotNetObject.filterPlaceholder;
    }
    if (hasValue(dotNetObject.headingLevel)) {
        jsBasemapLayerList.headingLevel = dotNetObject.headingLevel;
    }
    if (hasValue(dotNetObject.minFilterItems)) {
        jsBasemapLayerList.minFilterItems = dotNetObject.minFilterItems;
    }
    if (hasValue(dotNetObject.multipleSelectionEnabled)) {
        jsBasemapLayerList.multipleSelectionEnabled = dotNetObject.multipleSelectionEnabled;
    }
    if (hasValue(dotNetObject.referenceFilterText)) {
        jsBasemapLayerList.referenceFilterText = dotNetObject.referenceFilterText;
    }
    if (hasValue(dotNetObject.selectionMode)) {
        jsBasemapLayerList.selectionMode = dotNetObject.selectionMode;
    }
    if (hasValue(dotNetObject.visibilityAppearance)) {
        jsBasemapLayerList.visibilityAppearance = dotNetObject.visibilityAppearance;
    }
    if (hasValue(dotNetObject.visibleElements)) {
        jsBasemapLayerList.visibleElements = dotNetObject.visibleElements;
    }
    jsBasemapLayerList.on('trigger-action', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsTriggerAction', evt);
    });
    

    let { default: BasemapLayerListWidgetWrapper } = await import('./basemapLayerListWidget');
    let basemapLayerListWidgetWrapper = new BasemapLayerListWidgetWrapper(jsBasemapLayerList);
    basemapLayerListWidgetWrapper.geoBlazorId = dotNetObject.id;
    basemapLayerListWidgetWrapper.viewId = viewId;
    basemapLayerListWidgetWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(basemapLayerListWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = basemapLayerListWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsBasemapLayerList;
    let { buildDotNetBasemapLayerListWidget } = await import('./basemapLayerListWidget');
    let dnInstantiatedObject = await buildDotNetBasemapLayerListWidget(jsBasemapLayerList);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BasemapLayerListWidget', e);
    }
    
    return jsBasemapLayerList;
}

export async function buildDotNetBasemapLayerListWidgetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBasemapLayerListWidget: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.baseItems)) {
            let { buildDotNetListItem } = await import('./listItem');
            dotNetBasemapLayerListWidget.baseItems = await Promise.all(jsObject.baseItems.map(async i => await buildDotNetListItem(i)));
        }
        if (hasValue(jsObject.referenceItems)) {
            let { buildDotNetListItem } = await import('./listItem');
            dotNetBasemapLayerListWidget.referenceItems = await Promise.all(jsObject.referenceItems.map(async i => await buildDotNetListItem(i)));
        }
        if (hasValue(jsObject.selectedItems)) {
            let { buildDotNetListItem } = await import('./listItem');
            dotNetBasemapLayerListWidget.selectedItems = await Promise.all(jsObject.selectedItems.map(async i => await buildDotNetListItem(i)));
        }
        if (hasValue(jsObject.viewModel)) {
            let { buildDotNetBasemapLayerListViewModel } = await import('./basemapLayerListViewModel');
            dotNetBasemapLayerListWidget.viewModel = await buildDotNetBasemapLayerListViewModel(jsObject.viewModel);
        }
    if (hasValue(jsObject.baseFilterText)) {
        dotNetBasemapLayerListWidget.baseFilterText = jsObject.baseFilterText;
    }
    if (hasValue(jsObject.baseListItemCreatedFunction)) {
        dotNetBasemapLayerListWidget.baseListItemCreatedFunction = jsObject.baseListItemCreatedFunction;
    }
    if (hasValue(jsObject.basemapTitle)) {
        dotNetBasemapLayerListWidget.basemapTitle = jsObject.basemapTitle;
    }
    if (hasValue(jsObject.catalogLayerList)) {
        dotNetBasemapLayerListWidget.catalogLayerList = jsObject.catalogLayerList;
    }
    if (hasValue(jsObject.catalogOptions)) {
        dotNetBasemapLayerListWidget.catalogOptions = jsObject.catalogOptions;
    }
    if (hasValue(jsObject.collapsed)) {
        dotNetBasemapLayerListWidget.collapsed = jsObject.collapsed;
    }
    if (hasValue(jsObject.dragEnabled)) {
        dotNetBasemapLayerListWidget.dragEnabled = jsObject.dragEnabled;
    }
    if (hasValue(jsObject.editingEnabled)) {
        dotNetBasemapLayerListWidget.editingEnabled = jsObject.editingEnabled;
    }
    if (hasValue(jsObject.editingTitle)) {
        dotNetBasemapLayerListWidget.editingTitle = jsObject.editingTitle;
    }
    if (hasValue(jsObject.filterPlaceholder)) {
        dotNetBasemapLayerListWidget.filterPlaceholder = jsObject.filterPlaceholder;
    }
    if (hasValue(jsObject.headingLevel)) {
        dotNetBasemapLayerListWidget.headingLevel = jsObject.headingLevel;
    }
    if (hasValue(jsObject.minFilterItems)) {
        dotNetBasemapLayerListWidget.minFilterItems = jsObject.minFilterItems;
    }
    if (hasValue(jsObject.multipleSelectionEnabled)) {
        dotNetBasemapLayerListWidget.multipleSelectionEnabled = jsObject.multipleSelectionEnabled;
    }
    if (hasValue(jsObject.referenceFilterText)) {
        dotNetBasemapLayerListWidget.referenceFilterText = jsObject.referenceFilterText;
    }
    if (hasValue(jsObject.referenceListItemCreatedFunction)) {
        dotNetBasemapLayerListWidget.referenceListItemCreatedFunction = jsObject.referenceListItemCreatedFunction;
    }
    if (hasValue(jsObject.selectionMode)) {
        dotNetBasemapLayerListWidget.selectionMode = jsObject.selectionMode;
    }
    if (hasValue(jsObject.type)) {
        dotNetBasemapLayerListWidget.type = jsObject.type;
    }
    if (hasValue(jsObject.visibilityAppearance)) {
        dotNetBasemapLayerListWidget.visibilityAppearance = jsObject.visibilityAppearance;
    }
    if (hasValue(jsObject.visibleElements)) {
        dotNetBasemapLayerListWidget.visibleElements = jsObject.visibleElements;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetBasemapLayerListWidget.id = k;
                break;
            }
        }
    }

    return dotNetBasemapLayerListWidget;
}

