// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetAreaMeasurementAnalysisResult } from './areaMeasurementAnalysisResult';

export async function buildJsAreaMeasurementAnalysisResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsAreaMeasurementAnalysisResult: any = {};
    if (hasValue(dotNetObject.area)) {
        let { buildJsArea } = await import('./area');
        jsAreaMeasurementAnalysisResult.area = await buildJsArea(dotNetObject.area, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.pathLength)) {
        let { buildJsLength } = await import('./length');
        jsAreaMeasurementAnalysisResult.pathLength = await buildJsLength(dotNetObject.pathLength, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.mode)) {
        jsAreaMeasurementAnalysisResult.mode = dotNetObject.mode;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsAreaMeasurementAnalysisResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsAreaMeasurementAnalysisResult;
    
    return jsAreaMeasurementAnalysisResult;
}


export async function buildDotNetAreaMeasurementAnalysisResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAreaMeasurementAnalysisResult: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.area)) {
        let { buildDotNetArea } = await import('./area');
        dotNetAreaMeasurementAnalysisResult.area = await buildDotNetArea(jsObject.area);
    }
    if (hasValue(jsObject.pathLength)) {
        let { buildDotNetLength } = await import('./length');
        dotNetAreaMeasurementAnalysisResult.pathLength = await buildDotNetLength(jsObject.pathLength);
    }
    if (hasValue(jsObject.mode)) {
        dotNetAreaMeasurementAnalysisResult.mode = jsObject.mode;
    }

    return dotNetAreaMeasurementAnalysisResult;
}

