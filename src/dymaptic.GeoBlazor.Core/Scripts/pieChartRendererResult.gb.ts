// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetPieChartRendererResult } from './pieChartRendererResult';

export async function buildJsPieChartRendererResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jspieChartRendererResult: any = {};
    if (hasValue(dotNetObject.pieChartScheme)) {
        let { buildJsPieChartScheme } = await import('./pieChartScheme');
        jspieChartRendererResult.pieChartScheme = await buildJsPieChartScheme(dotNetObject.pieChartScheme, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsPieChartRenderer } = await import('./pieChartRenderer');
        jspieChartRendererResult.renderer = await buildJsPieChartRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.size)) {
        let { buildJsSizeVisualVariableResult } = await import('./sizeVisualVariableResult');
        jspieChartRendererResult.size = await buildJsSizeVisualVariableResult(dotNetObject.size, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.basemapId)) {
        jspieChartRendererResult.basemapId = dotNetObject.basemapId;
    }
    if (hasValue(dotNetObject.basemapTheme)) {
        jspieChartRendererResult.basemapTheme = dotNetObject.basemapTheme;
    }
    if (hasValue(dotNetObject.statistics)) {
        jspieChartRendererResult.statistics = dotNetObject.statistics;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jspieChartRendererResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jspieChartRendererResult;
    
    let dnInstantiatedObject = await buildDotNetPieChartRendererResult(jspieChartRendererResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PieChartRendererResult', e);
    }
    
    return jspieChartRendererResult;
}

export async function buildDotNetPieChartRendererResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPieChartRendererResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.pieChartScheme)) {
            let { buildDotNetPieChartScheme } = await import('./pieChartScheme');
            dotNetPieChartRendererResult.pieChartScheme = await buildDotNetPieChartScheme(jsObject.pieChartScheme);
        }
        if (hasValue(jsObject.renderer)) {
            let { buildDotNetPieChartRenderer } = await import('./pieChartRenderer');
            dotNetPieChartRendererResult.renderer = await buildDotNetPieChartRenderer(jsObject.renderer);
        }
        if (hasValue(jsObject.size)) {
            let { buildDotNetSizeVisualVariableResult } = await import('./sizeVisualVariableResult');
            dotNetPieChartRendererResult.size = await buildDotNetSizeVisualVariableResult(jsObject.size);
        }
    if (hasValue(jsObject.basemapId)) {
        dotNetPieChartRendererResult.basemapId = jsObject.basemapId;
    }
    if (hasValue(jsObject.basemapTheme)) {
        dotNetPieChartRendererResult.basemapTheme = jsObject.basemapTheme;
    }
    if (hasValue(jsObject.statistics)) {
        dotNetPieChartRendererResult.statistics = jsObject.statistics;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPieChartRendererResult.id = k;
                break;
            }
        }
    }

    return dotNetPieChartRendererResult;
}

