// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import PieChartMediaInfo from '@arcgis/core/popup/content/PieChartMediaInfo';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PieChartMediaInfoGenerated implements IPropertyWrapper {
    public component: PieChartMediaInfo;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: PieChartMediaInfo) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getValue(): Promise<any> {
        if (!hasValue(this.component.value)) {
            return null;
        }
        
        let { buildDotNetChartMediaInfoValue } = await import('./chartMediaInfoValue');
        return await buildDotNetChartMediaInfoValue(this.component.value);
    }
    async setValue(value: any): Promise<void> {
        let { buildJsChartMediaInfoValue } = await import('./chartMediaInfoValue');
        this.component.value = await  buildJsChartMediaInfoValue(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsPieChartMediaInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPieChartMediaInfo = new PieChartMediaInfo();
    if (hasValue(dotNetObject.value)) {
        let { buildJsChartMediaInfoValue } = await import('./jsBuilder');
        jsPieChartMediaInfo.value = await buildJsChartMediaInfoValue(dotNetObject.value, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.altText)) {
        jsPieChartMediaInfo.altText = dotNetObject.altText;
    }
    if (hasValue(dotNetObject.caption)) {
        jsPieChartMediaInfo.caption = dotNetObject.caption;
    }
    if (hasValue(dotNetObject.title)) {
        jsPieChartMediaInfo.title = dotNetObject.title;
    }
    let { default: PieChartMediaInfoWrapper } = await import('./pieChartMediaInfo');
    let pieChartMediaInfoWrapper = new PieChartMediaInfoWrapper(jsPieChartMediaInfo);
    pieChartMediaInfoWrapper.geoBlazorId = dotNetObject.id;
    pieChartMediaInfoWrapper.viewId = viewId;
    pieChartMediaInfoWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(pieChartMediaInfoWrapper);
    jsObjectRefs[dotNetObject.id] = pieChartMediaInfoWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsPieChartMediaInfo;
    
    let { buildDotNetPieChartMediaInfo } = await import('./pieChartMediaInfo');
    let dnInstantiatedObject = await buildDotNetPieChartMediaInfo(jsPieChartMediaInfo);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PieChartMediaInfo', e);
    }
    
    return jsPieChartMediaInfo;
}

export async function buildDotNetPieChartMediaInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPieChartMediaInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.value)) {
            let { buildDotNetChartMediaInfoValue } = await import('./chartMediaInfoValue');
            dotNetPieChartMediaInfo.value = await buildDotNetChartMediaInfoValue(jsObject.value);
        }
        if (hasValue(jsObject.altText)) {
            dotNetPieChartMediaInfo.altText = jsObject.altText;
        }
        if (hasValue(jsObject.caption)) {
            dotNetPieChartMediaInfo.caption = jsObject.caption;
        }
        if (hasValue(jsObject.title)) {
            dotNetPieChartMediaInfo.title = jsObject.title;
        }
        if (hasValue(jsObject.type)) {
            dotNetPieChartMediaInfo.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPieChartMediaInfo.id = k;
                break;
            }
        }
    }

    return dotNetPieChartMediaInfo;
}

