// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import PieChartMediaInfo from '@arcgis/core/popup/content/PieChartMediaInfo';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PieChartMediaInfoGenerated implements IPropertyWrapper {
    public component: PieChartMediaInfo;
    public readonly geoBlazorId: string = '';

    constructor(component: PieChartMediaInfo) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getValue(): Promise<any> {
        let { buildDotNetChartMediaInfoValue } = await import('./chartMediaInfoValue');
        return await buildDotNetChartMediaInfoValue(this.component.value);
    }
    async setValue(value: any): Promise<void> {
        let { buildJsChartMediaInfoValue } = await import('./chartMediaInfoValue');
        this.component.value = await buildJsChartMediaInfoValue(value);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}
export async function buildJsPieChartMediaInfoGenerated(dotNetObject: any): Promise<any> {
    let { default: PieChartMediaInfo } = await import('@arcgis/core/popup/content/PieChartMediaInfo');
    let jsPieChartMediaInfo = new PieChartMediaInfo();
    if (hasValue(dotNetObject.value)) {
        let { buildJsChartMediaInfoValue } = await import('chartMediaInfoValue');
        jsPieChartMediaInfo.value = buildJsChartMediaInfoValue(dotNetObject.value) as any;

    }
    if (hasValue(dotNetObject.altText)) {
        jsPieChartMediaInfo.altText = dotNetObject.altText;
    }
    if (hasValue(dotNetObject.caption)) {
        jsPieChartMediaInfo.caption = dotNetObject.caption;
    }
    if (hasValue(dotNetObject.title)) {
        jsPieChartMediaInfo.title = dotNetObject.title;
    }
    let { default: PieChartMediaInfoWrapper } = await import('./pieChartMediaInfo');
    let pieChartMediaInfoWrapper = new PieChartMediaInfoWrapper(jsPieChartMediaInfo);
    jsPieChartMediaInfo.id = dotNetObject.id;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(pieChartMediaInfoWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = pieChartMediaInfoWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsPieChartMediaInfo;
    
    return jsPieChartMediaInfo;
}

export async function buildDotNetPieChartMediaInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPieChartMediaInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.value)) {
            let { buildDotNetChartMediaInfoValue } = await import('./chartMediaInfoValue');
            dotNetPieChartMediaInfo.value = await buildDotNetChartMediaInfoValue(jsObject.value);
        }
        dotNetPieChartMediaInfo.altText = jsObject.altText;
        dotNetPieChartMediaInfo.caption = jsObject.caption;
        dotNetPieChartMediaInfo.title = jsObject.title;
        dotNetPieChartMediaInfo.type = jsObject.type;
    return dotNetPieChartMediaInfo;
}

