// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetCIMPictureFill } from './cIMPictureFill';

export async function buildJsCIMPictureFillGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCIMPictureFill: any = {};
    if (hasValue(dotNetObject.colorSubstitutions)) {
        let { buildJsCIMColorSubstitution } = await import('./cIMColorSubstitution');
        jsCIMPictureFill.colorSubstitutions = await Promise.all(dotNetObject.colorSubstitutions.map(async i => await buildJsCIMColorSubstitution(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.effects)) {
        let { buildJsICIMGeometricEffect } = await import('./iCIMGeometricEffect');
        jsCIMPictureFill.effects = dotNetObject.effects.map(i => buildJsICIMGeometricEffect(i)) as any;
    }

    if (hasValue(dotNetObject.colorLocked)) {
        jsCIMPictureFill.colorLocked = dotNetObject.colorLocked;
    }
    if (hasValue(dotNetObject.enable)) {
        jsCIMPictureFill.enable = dotNetObject.enable;
    }
    if (hasValue(dotNetObject.height)) {
        jsCIMPictureFill.height = dotNetObject.height;
    }
    if (hasValue(dotNetObject.name)) {
        jsCIMPictureFill.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.offsetX)) {
        jsCIMPictureFill.offsetX = dotNetObject.offsetX;
    }
    if (hasValue(dotNetObject.offsetY)) {
        jsCIMPictureFill.offsetY = dotNetObject.offsetY;
    }
    if (hasValue(dotNetObject.overprint)) {
        jsCIMPictureFill.overprint = dotNetObject.overprint;
    }
    if (hasValue(dotNetObject.primitiveName)) {
        jsCIMPictureFill.primitiveName = dotNetObject.primitiveName;
    }
    if (hasValue(dotNetObject.rotation)) {
        jsCIMPictureFill.rotation = dotNetObject.rotation;
    }
    if (hasValue(dotNetObject.scaleX)) {
        jsCIMPictureFill.scaleX = dotNetObject.scaleX;
    }
    if (hasValue(dotNetObject.textureFilter)) {
        jsCIMPictureFill.textureFilter = dotNetObject.textureFilter;
    }
    if (hasValue(dotNetObject.tintColor)) {
        jsCIMPictureFill.tintColor = dotNetObject.tintColor;
    }
    if (hasValue(dotNetObject.url)) {
        jsCIMPictureFill.url = dotNetObject.url;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCIMPictureFill);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCIMPictureFill;
    
    let { buildDotNetCIMPictureFill } = await import('./cIMPictureFill');
    let dnInstantiatedObject = await buildDotNetCIMPictureFill(jsCIMPictureFill);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type CIMPictureFill detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CIMPictureFill', e);
    }
    
    return jsCIMPictureFill;
}


export async function buildDotNetCIMPictureFillGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCIMPictureFill: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.colorSubstitutions)) {
        let { buildDotNetCIMColorSubstitution } = await import('./cIMColorSubstitution');
        dotNetCIMPictureFill.colorSubstitutions = await Promise.all(jsObject.colorSubstitutions.map(async i => await buildDotNetCIMColorSubstitution(i)));
    }
    if (hasValue(jsObject.effects)) {
        let { buildDotNetICIMGeometricEffect } = await import('./iCIMGeometricEffect');
        dotNetCIMPictureFill.effects = jsObject.effects.map(i => buildDotNetICIMGeometricEffect(i));
    }
    if (hasValue(jsObject.colorLocked)) {
        dotNetCIMPictureFill.colorLocked = jsObject.colorLocked;
    }
    if (hasValue(jsObject.enable)) {
        dotNetCIMPictureFill.enable = jsObject.enable;
    }
    if (hasValue(jsObject.height)) {
        dotNetCIMPictureFill.height = jsObject.height;
    }
    if (hasValue(jsObject.name)) {
        dotNetCIMPictureFill.name = jsObject.name;
    }
    if (hasValue(jsObject.offsetX)) {
        dotNetCIMPictureFill.offsetX = jsObject.offsetX;
    }
    if (hasValue(jsObject.offsetY)) {
        dotNetCIMPictureFill.offsetY = jsObject.offsetY;
    }
    if (hasValue(jsObject.overprint)) {
        dotNetCIMPictureFill.overprint = jsObject.overprint;
    }
    if (hasValue(jsObject.primitiveName)) {
        dotNetCIMPictureFill.primitiveName = jsObject.primitiveName;
    }
    if (hasValue(jsObject.rotation)) {
        dotNetCIMPictureFill.rotation = jsObject.rotation;
    }
    if (hasValue(jsObject.scaleX)) {
        dotNetCIMPictureFill.scaleX = jsObject.scaleX;
    }
    if (hasValue(jsObject.textureFilter)) {
        dotNetCIMPictureFill.textureFilter = jsObject.textureFilter;
    }
    if (hasValue(jsObject.tintColor)) {
        dotNetCIMPictureFill.tintColor = jsObject.tintColor;
    }
    if (hasValue(jsObject.type)) {
        dotNetCIMPictureFill.type = jsObject.type;
    }
    if (hasValue(jsObject.url)) {
        dotNetCIMPictureFill.url = jsObject.url;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCIMPictureFill.id = k;
                break;
            }
        }
    }

    return dotNetCIMPictureFill;
}

