// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import AttributeBinsFeatureSet from '@arcgis/core/rest/support/AttributeBinsFeatureSet';
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetAttributeBinsFeatureSet } from './attributeBinsFeatureSet';

export async function buildJsAttributeBinsFeatureSetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.features) && dotNetObject.features.length > 0) {
        let { buildJsAttributeBinsGraphic } = await import('./attributeBinsGraphic');
        properties.features = await Promise.all(dotNetObject.features.map(async i => await buildJsAttributeBinsGraphic(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.fields) && dotNetObject.fields.length > 0) {
        let { buildJsField } = await import('./field');
        properties.fields = dotNetObject.fields.map(i => buildJsField(i)) as any;
    }
    if (hasValue(dotNetObject.queryGeometry)) {
        let { buildJsGeometry } = await import('./geometry');
        properties.queryGeometry = buildJsGeometry(dotNetObject.queryGeometry) as any;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        properties.spatialReference = buildJsSpatialReference(dotNetObject.spatialReference) as any;
    }

    if (hasValue(dotNetObject.displayFieldName)) {
        properties.displayFieldName = dotNetObject.displayFieldName;
    }
    if (hasValue(dotNetObject.exceededTransferLimit)) {
        properties.exceededTransferLimit = dotNetObject.exceededTransferLimit;
    }
    if (hasValue(dotNetObject.geometryType)) {
        properties.geometryType = dotNetObject.geometryType;
    }
    let jsAttributeBinsFeatureSet = new AttributeBinsFeatureSet(properties);
    
    jsObjectRefs[dotNetObject.id] = jsAttributeBinsFeatureSet;
    arcGisObjectRefs[dotNetObject.id] = jsAttributeBinsFeatureSet;
    
    return jsAttributeBinsFeatureSet;
}


export async function buildDotNetAttributeBinsFeatureSetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAttributeBinsFeatureSet: any = {};
    
    if (hasValue(jsObject.features)) {
        let { buildDotNetAttributeBinsGraphic } = await import('./attributeBinsGraphic');
        dotNetAttributeBinsFeatureSet.features = await Promise.all(jsObject.features.map(async i => await buildDotNetAttributeBinsGraphic(i)));
    }
    
    if (hasValue(jsObject.fields)) {
        let { buildDotNetField } = await import('./field');
        dotNetAttributeBinsFeatureSet.fields = jsObject.fields.map(i => buildDotNetField(i));
    }
    
    if (hasValue(jsObject.queryGeometry)) {
        let { buildDotNetGeometry } = await import('./geometry');
        dotNetAttributeBinsFeatureSet.queryGeometry = buildDotNetGeometry(jsObject.queryGeometry);
    }
    
    if (hasValue(jsObject.spatialReference)) {
        let { buildDotNetSpatialReference } = await import('./spatialReference');
        dotNetAttributeBinsFeatureSet.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference);
    }
    
    if (hasValue(jsObject.displayFieldName)) {
        dotNetAttributeBinsFeatureSet.displayFieldName = jsObject.displayFieldName;
    }
    
    if (hasValue(jsObject.exceededTransferLimit)) {
        dotNetAttributeBinsFeatureSet.exceededTransferLimit = jsObject.exceededTransferLimit;
    }
    
    if (hasValue(jsObject.geometryType)) {
        dotNetAttributeBinsFeatureSet.geometryType = removeCircularReferences(jsObject.geometryType);
    }
    

    return dotNetAttributeBinsFeatureSet;
}

