// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import VisualVariableLegendOptions = __esri.VisualVariableLegendOptions;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class VisualVariableLegendOptionsGenerated implements IPropertyWrapper {
    public component: VisualVariableLegendOptions;
    public readonly geoBlazorId: string = '';

    constructor(component: VisualVariableLegendOptions) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}
export async function buildJsVisualVariableLegendOptionsGenerated(dotNetObject: any): Promise<any> {
    let jsVisualVariableLegendOptions = {
        showLegend: dotNetObject.showLegend,
        title: dotNetObject.title,
    }
    let { default: VisualVariableLegendOptionsWrapper } = await import('./visualVariableLegendOptions');
    let visualVariableLegendOptionsWrapper = new VisualVariableLegendOptionsWrapper(jsVisualVariableLegendOptions);
    jsVisualVariableLegendOptions.id = dotNetObject.id;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(visualVariableLegendOptionsWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = visualVariableLegendOptionsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsVisualVariableLegendOptions;
    
    return jsVisualVariableLegendOptions;
}

export async function buildDotNetVisualVariableLegendOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVisualVariableLegendOptions: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetVisualVariableLegendOptions.showLegend = jsObject.showLegend;
        dotNetVisualVariableLegendOptions.title = jsObject.title;
    return dotNetVisualVariableLegendOptions;
}

