// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import VisualVariableLegendOptions = __esri.VisualVariableLegendOptions;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class VisualVariableLegendOptionsGenerated implements IPropertyWrapper {
    public component: VisualVariableLegendOptions;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: VisualVariableLegendOptions) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsVisualVariableLegendOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsVisualVariableLegendOptions: any = {}

    if (hasValue(dotNetObject.showLegend)) {
        jsVisualVariableLegendOptions.showLegend = dotNetObject.showLegend;
    }
    if (hasValue(dotNetObject.title)) {
        jsVisualVariableLegendOptions.title = dotNetObject.title;
    }
    let { default: VisualVariableLegendOptionsWrapper } = await import('./visualVariableLegendOptions');
    let visualVariableLegendOptionsWrapper = new VisualVariableLegendOptionsWrapper(jsVisualVariableLegendOptions);
    visualVariableLegendOptionsWrapper.geoBlazorId = dotNetObject.id;
    visualVariableLegendOptionsWrapper.viewId = viewId;
    visualVariableLegendOptionsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(visualVariableLegendOptionsWrapper);
    jsObjectRefs[dotNetObject.id] = visualVariableLegendOptionsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsVisualVariableLegendOptions;
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for VisualVariableLegendOptions', e);
    }
    
    return jsVisualVariableLegendOptions;
}

export async function buildDotNetVisualVariableLegendOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVisualVariableLegendOptions: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.showLegend)) {
            dotNetVisualVariableLegendOptions.showLegend = jsObject.showLegend;
        }
        if (hasValue(jsObject.title)) {
            dotNetVisualVariableLegendOptions.title = jsObject.title;
        }

    return dotNetVisualVariableLegendOptions;
}

