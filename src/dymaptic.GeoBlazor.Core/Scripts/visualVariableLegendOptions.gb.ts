// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetVisualVariableLegendOptions } from './visualVariableLegendOptions';

export async function buildJsVisualVariableLegendOptionsGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsVisualVariableLegendOptions: any = {};

    if (hasValue(dotNetObject.showLegend)) {
        jsVisualVariableLegendOptions.showLegend = dotNetObject.showLegend;
    }
    if (hasValue(dotNetObject.title)) {
        jsVisualVariableLegendOptions.title = dotNetObject.title;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsVisualVariableLegendOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsVisualVariableLegendOptions;
    
    return jsVisualVariableLegendOptions;
}


export async function buildDotNetVisualVariableLegendOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVisualVariableLegendOptions: any = {};
    
    if (hasValue(jsObject.showLegend)) {
        dotNetVisualVariableLegendOptions.showLegend = jsObject.showLegend;
    }
    
    if (hasValue(jsObject.title)) {
        dotNetVisualVariableLegendOptions.title = jsObject.title;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetVisualVariableLegendOptions.id = geoBlazorId;
    }

    return dotNetVisualVariableLegendOptions;
}

