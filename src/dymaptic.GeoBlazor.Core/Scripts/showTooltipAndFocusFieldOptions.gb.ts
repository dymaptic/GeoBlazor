// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ShowTooltipAndFocusFieldOptions = __esri.ShowTooltipAndFocusFieldOptions;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ShowTooltipAndFocusFieldOptionsGenerated implements IPropertyWrapper {
    public component: ShowTooltipAndFocusFieldOptions;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ShowTooltipAndFocusFieldOptions) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async onClose(): Promise<void> {
        this.component.onClose();
    }

    async onOpen(): Promise<void> {
        this.component.onOpen();
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsShowTooltipAndFocusFieldOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsShowTooltipAndFocusFieldOptions: any = {}

    if (hasValue(dotNetObject.hideOnBlur)) {
        jsShowTooltipAndFocusFieldOptions.hideOnBlur = dotNetObject.hideOnBlur;
    }
    if (hasValue(dotNetObject.position)) {
        jsShowTooltipAndFocusFieldOptions.position = dotNetObject.position;
    }
    if (hasValue(dotNetObject.signal)) {
        jsShowTooltipAndFocusFieldOptions.signal = dotNetObject.signal;
    }

    let { default: ShowTooltipAndFocusFieldOptionsWrapper } = await import('./showTooltipAndFocusFieldOptions');
    let showTooltipAndFocusFieldOptionsWrapper = new ShowTooltipAndFocusFieldOptionsWrapper(jsShowTooltipAndFocusFieldOptions);
    showTooltipAndFocusFieldOptionsWrapper.geoBlazorId = dotNetObject.id;
    showTooltipAndFocusFieldOptionsWrapper.viewId = viewId;
    showTooltipAndFocusFieldOptionsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(showTooltipAndFocusFieldOptionsWrapper);
    jsObjectRefs[dotNetObject.id] = showTooltipAndFocusFieldOptionsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsShowTooltipAndFocusFieldOptions;
    let { buildDotNetShowTooltipAndFocusFieldOptions } = await import('./showTooltipAndFocusFieldOptions');
    let dnInstantiatedObject = await buildDotNetShowTooltipAndFocusFieldOptions(jsShowTooltipAndFocusFieldOptions);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ShowTooltipAndFocusFieldOptions', e);
    }
    
    return jsShowTooltipAndFocusFieldOptions;
}

export async function buildDotNetShowTooltipAndFocusFieldOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetShowTooltipAndFocusFieldOptions: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.hideOnBlur)) {
            dotNetShowTooltipAndFocusFieldOptions.hideOnBlur = jsObject.hideOnBlur;
        }
        if (hasValue(jsObject.position)) {
            dotNetShowTooltipAndFocusFieldOptions.position = jsObject.position;
        }
        if (hasValue(jsObject.signal)) {
            dotNetShowTooltipAndFocusFieldOptions.signal = jsObject.signal;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetShowTooltipAndFocusFieldOptions.id = k;
                break;
            }
        }
    }

    return dotNetShowTooltipAndFocusFieldOptions;
}

