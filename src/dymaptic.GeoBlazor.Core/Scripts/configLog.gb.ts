// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetConfigLog } from './configLog';

export async function buildJsConfigLogGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsconfigLog: any = {};
    if (hasValue(dotNetObject.hasInterceptors) && dotNetObject.hasInterceptors) {
        jsconfigLog.interceptors = async (level,
        module) => {

            let func = new Function('level',
            'module', dotNetObject.interceptors.javaScriptFunction);
            return func(level,
            module);
        };
    }

    if (hasValue(dotNetObject.level)) {
        jsconfigLog.level = dotNetObject.level;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsconfigLog);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsconfigLog;
    
    return jsconfigLog;
}


export async function buildDotNetConfigLogGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetConfigLog: any = {};
    
    if (hasValue(jsObject.level)) {
        dotNetConfigLog.level = removeCircularReferences(jsObject.level);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetConfigLog.id = geoBlazorId;
    }

    return dotNetConfigLog;
}

