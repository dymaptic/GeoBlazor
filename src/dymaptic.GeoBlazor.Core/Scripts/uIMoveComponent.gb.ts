// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetUIMoveComponent } from './uIMoveComponent';
import UIMoveComponent = __esri.UIMoveComponent;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsUIMoveComponentGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsUIMoveComponent: any = {}
    if (hasValue(dotNetObject.position)) {
        let { buildJsPosition } = await import('./position');
        jsUIMoveComponent.position = await buildJsPosition(dotNetObject.position, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.component)) {
        jsUIMoveComponent.component = dotNetObject.component;
    }
    if (hasValue(dotNetObject.index)) {
        jsUIMoveComponent.index = dotNetObject.index;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsUIMoveComponent);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsUIMoveComponent;
    
    let dnInstantiatedObject = await buildDotNetUIMoveComponent(jsUIMoveComponent);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for UIMoveComponent', e);
    }
    
    return jsUIMoveComponent;
}

export async function buildDotNetUIMoveComponentGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUIMoveComponent: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.position)) {
            let { buildDotNetPosition } = await import('./position');
            dotNetUIMoveComponent.position = await buildDotNetPosition(jsObject.position);
        }
        if (hasValue(jsObject.component)) {
            dotNetUIMoveComponent.component = jsObject.component;
        }
        if (hasValue(jsObject.index)) {
            dotNetUIMoveComponent.index = jsObject.index;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetUIMoveComponent.id = k;
                break;
            }
        }
    }

    return dotNetUIMoveComponent;
}

