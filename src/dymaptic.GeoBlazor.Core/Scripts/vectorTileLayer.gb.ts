// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import VectorTileLayer from '@arcgis/core/layers/VectorTileLayer';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class VectorTileLayerGenerated implements IPropertyWrapper {
    public layer: VectorTileLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: VectorTileLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    async createLayerView(view: any,
        options: any): Promise<any> {
        let result = await this.layer.createLayerView(view,
            options);
        let { buildDotNetLayerView } = await import('./layerView');
        return await buildDotNetLayerView(result);
    }

    async deleteStyleLayer(layerId: any): Promise<void> {
        this.layer.deleteStyleLayer(layerId);
    }

    async fetchAttributionData(): Promise<any> {
        return await this.layer.fetchAttributionData();
    }

    async getLayoutProperties(layerId: any): Promise<any> {
        return this.layer.getLayoutProperties(layerId);
    }

    async getPaintProperties(layerId: any): Promise<any> {
        return this.layer.getPaintProperties(layerId);
    }

    async getStyleLayer(layerId: any): Promise<any> {
        return this.layer.getStyleLayer(layerId);
    }

    async getStyleLayerId(index: any): Promise<any> {
        return this.layer.getStyleLayerId(index);
    }

    async getStyleLayerIndex(layerId: any): Promise<any> {
        return this.layer.getStyleLayerIndex(layerId);
    }

    async getStyleLayerVisibility(layerId: any): Promise<any> {
        return this.layer.getStyleLayerVisibility(layerId);
    }

    async loadStyle(style: any,
        options: any): Promise<any> {
        return await this.layer.loadStyle(style,
            options);
    }

    async setLayoutProperties(layerId: any,
        layout: any): Promise<void> {
        this.layer.setLayoutProperties(layerId,
            layout);
    }

    async setPaintProperties(layerId: any,
        painter: any): Promise<void> {
        this.layer.setPaintProperties(layerId,
            painter);
    }

    async setSpriteSource(spriteSourceInfo: any): Promise<any> {
        return await this.layer.setSpriteSource(spriteSourceInfo);
    }

    async setStyleLayer(layer: any,
        index: any): Promise<void> {
        this.layer.setStyleLayer(layer,
            index);
    }

    async setStyleLayerVisibility(layerId: any,
        visibility: any): Promise<void> {
        this.layer.setStyleLayerVisibility(layerId,
            visibility);
    }

    // region properties
    
    async getFullExtent(): Promise<any> {
        if (!hasValue(this.layer.fullExtent)) {
            return null;
        }
        
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(this.layer.fullExtent);
    }
    async setFullExtent(value: any): Promise<void> {
        let { buildJsExtent } = await import('./extent');
        this.layer.fullExtent =  buildJsExtent(value);
    }
    async getInitialExtent(): Promise<any> {
        if (!hasValue(this.layer.initialExtent)) {
            return null;
        }
        
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(this.layer.initialExtent);
    }
    async setInitialExtent(value: any): Promise<void> {
        let { buildJsExtent } = await import('./extent');
        this.layer.initialExtent =  buildJsExtent(value);
    }
    async getPortalItem(): Promise<any> {
        if (!hasValue(this.layer.portalItem)) {
            return null;
        }
        
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(this.layer.portalItem);
    }
    async setPortalItem(value: any): Promise<void> {
        let { buildJsPortalItem } = await import('./portalItem');
        this.layer.portalItem = await  buildJsPortalItem(value, this.layerId, this.viewId);
    }
    async getSpatialReference(): Promise<any> {
        if (!hasValue(this.layer.spatialReference)) {
            return null;
        }
        
        let { buildDotNetSpatialReference } = await import('./spatialReference');
        return buildDotNetSpatialReference(this.layer.spatialReference);
    }
    async setSpatialReference(value: any): Promise<void> {
        let { buildJsSpatialReference } = await import('./spatialReference');
        this.layer.spatialReference = await  buildJsSpatialReference(value, this.layerId, this.viewId);
    }
    async getTileInfo(): Promise<any> {
        if (!hasValue(this.layer.tileInfo)) {
            return null;
        }
        
        let { buildDotNetTileInfo } = await import('./tileInfo');
        return await buildDotNetTileInfo(this.layer.tileInfo);
    }
    async setTileInfo(value: any): Promise<void> {
        let { buildJsTileInfo } = await import('./tileInfo');
        this.layer.tileInfo = await  buildJsTileInfo(value, this.layerId, this.viewId);
    }
    async getVisibilityTimeExtent(): Promise<any> {
        if (!hasValue(this.layer.visibilityTimeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.visibilityTimeExtent);
    }
    async setVisibilityTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.visibilityTimeExtent = await  buildJsTimeExtent(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}

export async function buildJsVectorTileLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsVectorTileLayer = new VectorTileLayer();
    if (hasValue(dotNetObject.fullExtent)) {
        let { buildJsExtent } = await import('./extent');
        jsVectorTileLayer.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;
    }
    if (hasValue(dotNetObject.initialExtent)) {
        let { buildJsExtent } = await import('./extent');
        jsVectorTileLayer.initialExtent = buildJsExtent(dotNetObject.initialExtent) as any;
    }
    if (hasValue(dotNetObject.portalItem)) {
        let { buildJsPortalItem } = await import('./portalItem');
        jsVectorTileLayer.portalItem = await buildJsPortalItem(dotNetObject.portalItem, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        jsVectorTileLayer.spatialReference = await buildJsSpatialReference(dotNetObject.spatialReference, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.tileInfo)) {
        let { buildJsTileInfo } = await import('./tileInfo');
        jsVectorTileLayer.tileInfo = await buildJsTileInfo(dotNetObject.tileInfo, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.visibilityTimeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        jsVectorTileLayer.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.apiKey)) {
        jsVectorTileLayer.apiKey = dotNetObject.apiKey;
    }
    if (hasValue(dotNetObject.arcGISLayerId)) {
        jsVectorTileLayer.id = dotNetObject.arcGISLayerId;
    }
    if (hasValue(dotNetObject.blendMode)) {
        jsVectorTileLayer.blendMode = dotNetObject.blendMode;
    }
    if (hasValue(dotNetObject.customParameters)) {
        jsVectorTileLayer.customParameters = dotNetObject.customParameters;
    }
    if (hasValue(dotNetObject.effect)) {
        jsVectorTileLayer.effect = dotNetObject.effect;
    }
    if (hasValue(dotNetObject.listMode)) {
        jsVectorTileLayer.listMode = dotNetObject.listMode;
    }
    if (hasValue(dotNetObject.maxScale)) {
        jsVectorTileLayer.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.minScale)) {
        jsVectorTileLayer.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.opacity)) {
        jsVectorTileLayer.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.persistenceEnabled)) {
        jsVectorTileLayer.persistenceEnabled = dotNetObject.persistenceEnabled;
    }
    if (hasValue(dotNetObject.style)) {
        jsVectorTileLayer.style = dotNetObject.style;
    }
    if (hasValue(dotNetObject.title)) {
        jsVectorTileLayer.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.url)) {
        jsVectorTileLayer.url = dotNetObject.url;
    }
    let { default: VectorTileLayerWrapper } = await import('./vectorTileLayer');
    let vectorTileLayerWrapper = new VectorTileLayerWrapper(jsVectorTileLayer);
    vectorTileLayerWrapper.geoBlazorId = dotNetObject.id;
    vectorTileLayerWrapper.viewId = viewId;
    vectorTileLayerWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(vectorTileLayerWrapper);
    jsObjectRefs[dotNetObject.id] = vectorTileLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsVectorTileLayer;
    
    let { buildDotNetVectorTileLayer } = await import('./vectorTileLayer');
    let dnInstantiatedObject = await buildDotNetVectorTileLayer(jsVectorTileLayer);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for VectorTileLayer', e);
    }
    
    return jsVectorTileLayer;
}

export async function buildDotNetVectorTileLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVectorTileLayer: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.fullExtent)) {
            let { buildDotNetExtent } = await import('./extent');
            dotNetVectorTileLayer.fullExtent = buildDotNetExtent(jsObject.fullExtent);
        }
        if (hasValue(jsObject.initialExtent)) {
            let { buildDotNetExtent } = await import('./extent');
            dotNetVectorTileLayer.initialExtent = buildDotNetExtent(jsObject.initialExtent);
        }
        if (hasValue(jsObject.portalItem)) {
            let { buildDotNetPortalItem } = await import('./portalItem');
            dotNetVectorTileLayer.portalItem = await buildDotNetPortalItem(jsObject.portalItem);
        }
        if (hasValue(jsObject.spatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetVectorTileLayer.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference);
        }
        if (hasValue(jsObject.tileInfo)) {
            let { buildDotNetTileInfo } = await import('./tileInfo');
            dotNetVectorTileLayer.tileInfo = await buildDotNetTileInfo(jsObject.tileInfo);
        }
        if (hasValue(jsObject.visibilityTimeExtent)) {
            let { buildDotNetTimeExtent } = await import('./timeExtent');
            dotNetVectorTileLayer.visibilityTimeExtent = buildDotNetTimeExtent(jsObject.visibilityTimeExtent);
        }
        if (hasValue(jsObject.apiKey)) {
            dotNetVectorTileLayer.apiKey = jsObject.apiKey;
        }
        if (hasValue(jsObject.id)) {
            dotNetVectorTileLayer.arcGISLayerId = jsObject.id;
        }
        if (hasValue(jsObject.attributionDataUrl)) {
            dotNetVectorTileLayer.attributionDataUrl = jsObject.attributionDataUrl;
        }
        if (hasValue(jsObject.blendMode)) {
            dotNetVectorTileLayer.blendMode = jsObject.blendMode;
        }
        if (hasValue(jsObject.capabilities)) {
            dotNetVectorTileLayer.capabilities = jsObject.capabilities;
        }
        if (hasValue(jsObject.currentStyleInfo)) {
            dotNetVectorTileLayer.currentStyleInfo = jsObject.currentStyleInfo;
        }
        if (hasValue(jsObject.customParameters)) {
            dotNetVectorTileLayer.customParameters = jsObject.customParameters;
        }
        if (hasValue(jsObject.effect)) {
            dotNetVectorTileLayer.effect = jsObject.effect;
        }
        if (hasValue(jsObject.listMode)) {
            dotNetVectorTileLayer.listMode = jsObject.listMode;
        }
        if (hasValue(jsObject.loaded)) {
            dotNetVectorTileLayer.loaded = jsObject.loaded;
        }
        if (hasValue(jsObject.maxScale)) {
            dotNetVectorTileLayer.maxScale = jsObject.maxScale;
        }
        if (hasValue(jsObject.minScale)) {
            dotNetVectorTileLayer.minScale = jsObject.minScale;
        }
        if (hasValue(jsObject.opacity)) {
            dotNetVectorTileLayer.opacity = jsObject.opacity;
        }
        if (hasValue(jsObject.persistenceEnabled)) {
            dotNetVectorTileLayer.persistenceEnabled = jsObject.persistenceEnabled;
        }
        if (hasValue(jsObject.style)) {
            dotNetVectorTileLayer.style = jsObject.style;
        }
        if (hasValue(jsObject.title)) {
            dotNetVectorTileLayer.title = jsObject.title;
        }
        if (hasValue(jsObject.type)) {
            dotNetVectorTileLayer.type = jsObject.type;
        }
        if (hasValue(jsObject.url)) {
            dotNetVectorTileLayer.url = jsObject.url;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetVectorTileLayer.id = k;
                break;
            }
        }
    }

    return dotNetVectorTileLayer;
}

