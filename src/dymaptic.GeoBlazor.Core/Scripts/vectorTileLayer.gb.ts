// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import VectorTileLayer from '@arcgis/core/layers/VectorTileLayer';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, buildJsStreamReference, generateSerializableJson } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class VectorTileLayerGenerated implements IPropertyWrapper {
    public layer: VectorTileLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: VectorTileLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.effect)) {
            let { buildJsEffect } = await import('./effect');
            this.layer.effect = buildJsEffect(dotNetObject.effect) as any;
        }
        if (hasValue(dotNetObject.portalItem)) {
            let { buildJsPortalItem } = await import('./portalItem');
            this.layer.portalItem = await buildJsPortalItem(dotNetObject.portalItem, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.visibilityTimeExtent)) {
            let { buildJsTimeExtent } = await import('./timeExtent');
            this.layer.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent) as any;
        }

        if (hasValue(dotNetObject.apiKey)) {
            this.layer.apiKey = dotNetObject.apiKey;
        }
        if (hasValue(dotNetObject.arcGISLayerId)) {
            this.layer.id = dotNetObject.arcGISLayerId;
        }
        if (hasValue(dotNetObject.blendMode)) {
            this.layer.blendMode = dotNetObject.blendMode;
        }
        if (hasValue(dotNetObject.customParameters)) {
            this.layer.customParameters = dotNetObject.customParameters;
        }
        if (hasValue(dotNetObject.listMode)) {
            this.layer.listMode = dotNetObject.listMode;
        }
        if (hasValue(dotNetObject.maxScale)) {
            this.layer.maxScale = dotNetObject.maxScale;
        }
        if (hasValue(dotNetObject.minScale)) {
            this.layer.minScale = dotNetObject.minScale;
        }
        if (hasValue(dotNetObject.opacity)) {
            this.layer.opacity = dotNetObject.opacity;
        }
        if (hasValue(dotNetObject.persistenceEnabled)) {
            this.layer.persistenceEnabled = dotNetObject.persistenceEnabled;
        }
        if (hasValue(dotNetObject.refreshInterval)) {
            this.layer.refreshInterval = dotNetObject.refreshInterval;
        }
        if (hasValue(dotNetObject.style)) {
            this.layer.style = dotNetObject.style;
        }
        if (hasValue(dotNetObject.title)) {
            this.layer.title = dotNetObject.title;
        }
        if (hasValue(dotNetObject.url)) {
            this.layer.url = dotNetObject.url;
        }
        if (hasValue(dotNetObject.visible)) {
            this.layer.visible = dotNetObject.visible;
        }
    }
    
    async cancelLoad(): Promise<void> {
        this.layer.cancelLoad();
    }

    async createLayerView(view: any,
        options: any): Promise<any> {
        return await this.layer.createLayerView(view,
            options);
    }

    async deleteStyleLayer(layerId: any): Promise<void> {
        this.layer.deleteStyleLayer(layerId);
    }

    async fetchAttributionData(): Promise<any> {
        let result = await this.layer.fetchAttributionData();
        
        return generateSerializableJson(result);
    }

    async getLayoutProperties(layerId: any): Promise<any> {
        let result = this.layer.getLayoutProperties(layerId);
        
        return generateSerializableJson(result);
    }

    async getPaintProperties(layerId: any): Promise<any> {
        let result = this.layer.getPaintProperties(layerId);
        
        return generateSerializableJson(result);
    }

    async getStyleLayer(layerId: any): Promise<any> {
        let result = this.layer.getStyleLayer(layerId);
        
        return generateSerializableJson(result);
    }

    async getStyleLayerId(index: any): Promise<any> {
        return this.layer.getStyleLayerId(index);
    }

    async getStyleLayerIndex(layerId: any): Promise<any> {
        return this.layer.getStyleLayerIndex(layerId);
    }

    async getStyleLayerVisibility(layerId: any): Promise<any> {
        return this.layer.getStyleLayerVisibility(layerId);
    }

    async isFulfilled(): Promise<any> {
        return this.layer.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.layer.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.layer.isResolved();
    }

    async load(options: any): Promise<any> {
        let result = await this.layer.load(options);
        
        return generateSerializableJson(result);
    }

    async loadStyle(style: any,
        options: any): Promise<any> {
        let result = await this.layer.loadStyle(style,
            options);
        
        return generateSerializableJson(result);
    }

    async refresh(): Promise<void> {
        this.layer.refresh();
    }

    async setLayoutProperties(layerId: any,
        layout: any): Promise<void> {
        this.layer.setLayoutProperties(layerId,
            layout);
    }

    async setPaintProperties(layerId: any,
        painter: any): Promise<void> {
        this.layer.setPaintProperties(layerId,
            painter);
    }

    async setSpriteSource(spriteSourceInfo: any): Promise<any> {
        return await this.layer.setSpriteSource(spriteSourceInfo);
    }

    async setStyleLayer(layer: any,
        index: any): Promise<void> {
        this.layer.setStyleLayer(layer,
            index);
    }

    async setStyleLayerVisibility(layerId: any,
        visibility: any): Promise<void> {
        this.layer.setStyleLayerVisibility(layerId,
            visibility);
    }

    async when(callback: any,
        errback: any): Promise<any> {
        let result = await this.layer.when(callback,
            errback);
        
        return generateSerializableJson(result);
    }

    // region properties
    
    getApiKey(): any {
        if (!hasValue(this.layer.apiKey)) {
            return null;
        }
        
        return generateSerializableJson(this.layer.apiKey);
    }
    
    setApiKey(value: any): void {
        this.layer.apiKey = JSON.parse(value);
    }
    
    getArcGISLayerId(): any {
        if (!hasValue(this.layer.id)) {
            return null;
        }
        
        return generateSerializableJson(this.layer.id);
    }
    
    setArcGISLayerId(value: any): void {
        this.layer.id = JSON.parse(value);
    }
    
    getAttributionDataUrl(): any {
        if (!hasValue(this.layer.attributionDataUrl)) {
            return null;
        }
        
        return generateSerializableJson(this.layer.attributionDataUrl);
    }
    
    async getCurrentStyleInfo(): Promise<any> {
        if (!hasValue(this.layer.currentStyleInfo)) {
            return null;
        }
        
        let { buildDotNetVectorTileLayerCurrentStyleInfo } = await import('./vectorTileLayerCurrentStyleInfo');
        return await buildDotNetVectorTileLayerCurrentStyleInfo(this.layer.currentStyleInfo);
    }
    
    async getEffect(): Promise<any> {
        if (!hasValue(this.layer.effect)) {
            return null;
        }
        
        let { buildDotNetEffect } = await import('./effect');
        return buildDotNetEffect(this.layer.effect);
    }
    
    async setEffect(value: any): Promise<void> {
        let { buildJsEffect } = await import('./effect');
        this.layer.effect =  buildJsEffect(value);
    }
    
    async getFullExtent(): Promise<any> {
        if (!hasValue(this.layer.fullExtent)) {
            return null;
        }
        
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(this.layer.fullExtent);
    }
    
    async setFullExtent(value: any): Promise<void> {
        let { buildJsExtent } = await import('./extent');
        this.layer.fullExtent =  buildJsExtent(value);
    }
    
    async getInitialExtent(): Promise<any> {
        if (!hasValue(this.layer.initialExtent)) {
            return null;
        }
        
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(this.layer.initialExtent);
    }
    
    async getPortalItem(): Promise<any> {
        if (!hasValue(this.layer.portalItem)) {
            return null;
        }
        
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(this.layer.portalItem, this.viewId);
    }
    
    async setPortalItem(value: any): Promise<void> {
        let { buildJsPortalItem } = await import('./portalItem');
        this.layer.portalItem = await  buildJsPortalItem(value, this.layerId, this.viewId);
    }
    
    async getSpatialReference(): Promise<any> {
        if (!hasValue(this.layer.spatialReference)) {
            return null;
        }
        
        let { buildDotNetSpatialReference } = await import('./spatialReference');
        return buildDotNetSpatialReference(this.layer.spatialReference);
    }
    
    getStyle(): any {
        if (!hasValue(this.layer.style)) {
            return null;
        }
        
        return generateSerializableJson(this.layer.style);
    }
    
    setStyle(value: any): void {
        this.layer.style = JSON.parse(value);
    }
    
    async getTileInfo(): Promise<any> {
        if (!hasValue(this.layer.tileInfo)) {
            return null;
        }
        
        let { buildDotNetTileInfo } = await import('./tileInfo');
        return await buildDotNetTileInfo(this.layer.tileInfo, this.viewId);
    }
    
    getTitle(): any {
        if (!hasValue(this.layer.title)) {
            return null;
        }
        
        return generateSerializableJson(this.layer.title);
    }
    
    setTitle(value: any): void {
        this.layer.title = JSON.parse(value);
    }
    
    getUrl(): any {
        if (!hasValue(this.layer.url)) {
            return null;
        }
        
        return generateSerializableJson(this.layer.url);
    }
    
    setUrl(value: any): void {
        this.layer.url = JSON.parse(value);
    }
    
    async getVisibilityTimeExtent(): Promise<any> {
        if (!hasValue(this.layer.visibilityTimeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.visibilityTimeExtent);
    }
    
    async setVisibilityTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.visibilityTimeExtent = await  buildJsTimeExtent(value);
    }
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}


export async function buildJsVectorTileLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.effect)) {
        let { buildJsEffect } = await import('./effect');
        properties.effect = buildJsEffect(dotNetObject.effect) as any;
    }
    if (hasValue(dotNetObject.fullExtent)) {
        let { buildJsExtent } = await import('./extent');
        properties.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;
    }
    if (hasValue(dotNetObject.portalItem)) {
        let { buildJsPortalItem } = await import('./portalItem');
        properties.portalItem = await buildJsPortalItem(dotNetObject.portalItem, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.visibilityTimeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent) as any;
    }

    if (hasValue(dotNetObject.apiKey)) {
        properties.apiKey = dotNetObject.apiKey;
    }
    if (hasValue(dotNetObject.arcGISLayerId)) {
        properties.id = dotNetObject.arcGISLayerId;
    }
    if (hasValue(dotNetObject.blendMode)) {
        properties.blendMode = dotNetObject.blendMode;
    }
    if (hasValue(dotNetObject.customParameters)) {
        properties.customParameters = dotNetObject.customParameters;
    }
    if (hasValue(dotNetObject.listMode)) {
        properties.listMode = dotNetObject.listMode;
    }
    if (hasValue(dotNetObject.maxScale)) {
        properties.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.minScale)) {
        properties.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.opacity)) {
        properties.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.persistenceEnabled)) {
        properties.persistenceEnabled = dotNetObject.persistenceEnabled;
    }
    if (hasValue(dotNetObject.refreshInterval)) {
        properties.refreshInterval = dotNetObject.refreshInterval;
    }
    if (hasValue(dotNetObject.style)) {
        properties.style = JSON.parse(dotNetObject.style);
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.url)) {
        properties.url = dotNetObject.url;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    let jsVectorTileLayer = new VectorTileLayer(properties);
    if (hasValue(dotNetObject.hasCreateListener) && dotNetObject.hasCreateListener) {
        jsVectorTileLayer.on('layerview-create', async (evt: any) => {
                let { buildDotNetLayerViewCreateEvent } = await import('./layerViewCreateEvent');
                let dnEvent = await buildDotNetLayerViewCreateEvent(evt, layerId, viewId);
                let streamRef = buildJsStreamReference(dnEvent ?? {});
                await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreate', streamRef);
            });
    }
    
    if (hasValue(dotNetObject.hasCreateErrorListener) && dotNetObject.hasCreateErrorListener) {
        jsVectorTileLayer.on('layerview-create-error', async (evt: any) => {
                let { buildDotNetLayerViewCreateErrorEvent } = await import('./layerViewCreateErrorEvent');
                let dnEvent = await buildDotNetLayerViewCreateErrorEvent(evt, layerId, viewId);
                let streamRef = buildJsStreamReference(dnEvent ?? {});
                await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreateError', streamRef);
            });
    }
    
    if (hasValue(dotNetObject.hasDestroyListener) && dotNetObject.hasDestroyListener) {
        jsVectorTileLayer.on('layerview-destroy', async (evt: any) => {
                let { buildDotNetLayerViewDestroyEvent } = await import('./layerViewDestroyEvent');
                let dnEvent = await buildDotNetLayerViewDestroyEvent(evt, layerId, viewId);
                let streamRef = buildJsStreamReference(dnEvent ?? {});
                await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsDestroy', streamRef);
            });
    }
    
    if (hasValue(dotNetObject.hasRefreshListener) && dotNetObject.hasRefreshListener) {
        jsVectorTileLayer.on('refresh', async (evt: any) => {
                let streamRef = buildJsStreamReference(evt ?? {});
                await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsRefresh', streamRef);
            });
    }
    

    let { default: VectorTileLayerWrapper } = await import('./vectorTileLayer');

    let vectorTileLayerWrapper = new VectorTileLayerWrapper(jsVectorTileLayer);
    vectorTileLayerWrapper.geoBlazorId = dotNetObject.id;
    vectorTileLayerWrapper.viewId = viewId;
    vectorTileLayerWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = vectorTileLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsVectorTileLayer;
    
    // serialize data and send back to .NET to populate properties
    // we call requestAnimationFrame to pull this out of the synchronous render flow
    requestAnimationFrame(async () => {
        try {
            let jsObjectRef = DotNet.createJSObjectReference(vectorTileLayerWrapper);
            let { buildDotNetVectorTileLayer } = await import('./vectorTileLayer');
            let dnInstantiatedObject = await buildDotNetVectorTileLayer(jsVectorTileLayer, viewId);

            let dnStream = buildJsStreamReference(dnInstantiatedObject);
            await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
                jsObjectRef, dnStream);
        } catch (e) {
            console.error('Error invoking OnJsComponentCreated for VectorTileLayer', e);
        }
    });
    
    return jsVectorTileLayer;
}


export async function buildDotNetVectorTileLayerGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVectorTileLayer: any = {};
    
    if (hasValue(jsObject.currentStyleInfo)) {
        let { buildDotNetVectorTileLayerCurrentStyleInfo } = await import('./vectorTileLayerCurrentStyleInfo');
        dotNetVectorTileLayer.currentStyleInfo = await buildDotNetVectorTileLayerCurrentStyleInfo(jsObject.currentStyleInfo);
    }
    
    if (hasValue(jsObject.effect)) {
        let { buildDotNetEffect } = await import('./effect');
        dotNetVectorTileLayer.effect = buildDotNetEffect(jsObject.effect);
    }
    
    if (hasValue(jsObject.fullExtent)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetVectorTileLayer.fullExtent = buildDotNetExtent(jsObject.fullExtent);
    }
    
    if (hasValue(jsObject.initialExtent)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetVectorTileLayer.initialExtent = buildDotNetExtent(jsObject.initialExtent);
    }
    
    if (hasValue(jsObject.portalItem)) {
        let { buildDotNetPortalItem } = await import('./portalItem');
        dotNetVectorTileLayer.portalItem = await buildDotNetPortalItem(jsObject.portalItem, viewId);
    }
    
    if (hasValue(jsObject.spatialReference)) {
        let { buildDotNetSpatialReference } = await import('./spatialReference');
        dotNetVectorTileLayer.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference);
    }
    
    if (hasValue(jsObject.tileInfo)) {
        let { buildDotNetTileInfo } = await import('./tileInfo');
        dotNetVectorTileLayer.tileInfo = await buildDotNetTileInfo(jsObject.tileInfo, viewId);
    }
    
    if (hasValue(jsObject.visibilityTimeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetVectorTileLayer.visibilityTimeExtent = buildDotNetTimeExtent(jsObject.visibilityTimeExtent);
    }
    
    if (hasValue(jsObject.apiKey)) {
        dotNetVectorTileLayer.apiKey = jsObject.apiKey;
    }
    
    if (hasValue(jsObject.id)) {
        dotNetVectorTileLayer.arcGISLayerId = jsObject.id;
    }
    
    if (hasValue(jsObject.attributionDataUrl)) {
        dotNetVectorTileLayer.attributionDataUrl = jsObject.attributionDataUrl;
    }
    
    if (hasValue(jsObject.blendMode)) {
        dotNetVectorTileLayer.blendMode = removeCircularReferences(jsObject.blendMode);
    }
    
    if (hasValue(jsObject.capabilities)) {
        dotNetVectorTileLayer.capabilities = removeCircularReferences(jsObject.capabilities);
    }
    
    if (hasValue(jsObject.customParameters)) {
        dotNetVectorTileLayer.customParameters = removeCircularReferences(jsObject.customParameters);
    }
    
    if (hasValue(jsObject.listMode)) {
        dotNetVectorTileLayer.listMode = removeCircularReferences(jsObject.listMode);
    }
    
    if (hasValue(jsObject.loaded)) {
        dotNetVectorTileLayer.loaded = jsObject.loaded;
    }
    
    if (hasValue(jsObject.maxScale)) {
        dotNetVectorTileLayer.maxScale = jsObject.maxScale;
    }
    
    if (hasValue(jsObject.minScale)) {
        dotNetVectorTileLayer.minScale = jsObject.minScale;
    }
    
    if (hasValue(jsObject.opacity)) {
        dotNetVectorTileLayer.opacity = jsObject.opacity;
    }
    
    if (hasValue(jsObject.persistenceEnabled)) {
        dotNetVectorTileLayer.persistenceEnabled = jsObject.persistenceEnabled;
    }
    
    if (hasValue(jsObject.refreshInterval)) {
        dotNetVectorTileLayer.refreshInterval = jsObject.refreshInterval;
    }
    
    if (hasValue(jsObject.style)) {
        dotNetVectorTileLayer.style = generateSerializableJson(jsObject.style);
    }
    
    if (hasValue(jsObject.title)) {
        dotNetVectorTileLayer.title = jsObject.title;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetVectorTileLayer.type = removeCircularReferences(jsObject.type);
    }
    
    if (hasValue(jsObject.url)) {
        dotNetVectorTileLayer.url = jsObject.url;
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetVectorTileLayer.visible = jsObject.visible;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetVectorTileLayer.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        if (hasValue(dotNetRef)) {
            try {
                dotNetVectorTileLayer.id = await dotNetRef.invokeMethodAsync('GetId');
            } catch (e) {
                console.error('Error invoking GetId for VectorTileLayer', e);
            }
        }
    }
    if (hasValue(dotNetVectorTileLayer.id)) {
        jsObjectRefs[dotNetVectorTileLayer.id] ??= jsObject;
        arcGisObjectRefs[dotNetVectorTileLayer.id] ??= jsObject;
    }

    return dotNetVectorTileLayer;
}

