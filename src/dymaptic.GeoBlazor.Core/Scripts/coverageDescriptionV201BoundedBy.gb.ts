// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetCoverageDescriptionV201BoundedBy } from './coverageDescriptionV201BoundedBy';

export async function buildJsCoverageDescriptionV201BoundedByGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsCoverageDescriptionV201BoundedBy: any = {};
    if (hasValue(dotNetObject.envelope)) {
        let { buildJsExtent } = await import('./extent');
        jsCoverageDescriptionV201BoundedBy.envelope = buildJsExtent(dotNetObject.envelope) as any;
    }

    if (hasValue(dotNetObject.axisLabels) && dotNetObject.axisLabels.length > 0) {
        jsCoverageDescriptionV201BoundedBy.axisLabels = dotNetObject.axisLabels;
    }
    if (hasValue(dotNetObject.beginPosition)) {
        jsCoverageDescriptionV201BoundedBy.beginPosition = dotNetObject.beginPosition;
    }
    if (hasValue(dotNetObject.endPosition)) {
        jsCoverageDescriptionV201BoundedBy.endPosition = dotNetObject.endPosition;
    }
    if (hasValue(dotNetObject.envelopeAllDims)) {
        jsCoverageDescriptionV201BoundedBy.envelopeAllDims = dotNetObject.envelopeAllDims;
    }
    if (hasValue(dotNetObject.isEastFirst)) {
        jsCoverageDescriptionV201BoundedBy.isEastFirst = dotNetObject.isEastFirst;
    }
    if (hasValue(dotNetObject.uomLabels) && dotNetObject.uomLabels.length > 0) {
        jsCoverageDescriptionV201BoundedBy.uomLabels = dotNetObject.uomLabels;
    }
    
    jsObjectRefs[dotNetObject.id] = jsCoverageDescriptionV201BoundedBy;
    arcGisObjectRefs[dotNetObject.id] = jsCoverageDescriptionV201BoundedBy;
    
    return jsCoverageDescriptionV201BoundedBy;
}


export async function buildDotNetCoverageDescriptionV201BoundedByGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCoverageDescriptionV201BoundedBy: any = {};
    
    if (hasValue(jsObject.envelope)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetCoverageDescriptionV201BoundedBy.envelope = buildDotNetExtent(jsObject.envelope);
    }
    
    if (hasValue(jsObject.axisLabels)) {
        dotNetCoverageDescriptionV201BoundedBy.axisLabels = jsObject.axisLabels;
    }
    
    if (hasValue(jsObject.beginPosition)) {
        dotNetCoverageDescriptionV201BoundedBy.beginPosition = jsObject.beginPosition;
    }
    
    if (hasValue(jsObject.endPosition)) {
        dotNetCoverageDescriptionV201BoundedBy.endPosition = jsObject.endPosition;
    }
    
    if (hasValue(jsObject.envelopeAllDims)) {
        dotNetCoverageDescriptionV201BoundedBy.envelopeAllDims = removeCircularReferences(jsObject.envelopeAllDims);
    }
    
    if (hasValue(jsObject.isEastFirst)) {
        dotNetCoverageDescriptionV201BoundedBy.isEastFirst = jsObject.isEastFirst;
    }
    
    if (hasValue(jsObject.uomLabels)) {
        dotNetCoverageDescriptionV201BoundedBy.uomLabels = jsObject.uomLabels;
    }
    

    return dotNetCoverageDescriptionV201BoundedBy;
}

