// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import CoverageDescriptionV201BoundedBy = __esri.CoverageDescriptionV201BoundedBy;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CoverageDescriptionV201BoundedByGenerated implements IPropertyWrapper {
    public component: CoverageDescriptionV201BoundedBy;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: CoverageDescriptionV201BoundedBy) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getEnvelope(): Promise<any> {
        if (!hasValue(this.component.envelope)) {
            return null;
        }
        
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(this.component.envelope);
    }
    async setEnvelope(value: any): Promise<void> {
        let { buildJsExtent } = await import('./extent');
        this.component.envelope =  buildJsExtent(value);
    }
    async getEnvelopeAllDims(): Promise<any> {
        if (!hasValue(this.component.envelopeAllDims)) {
            return null;
        }
        
        let { buildDotNetCoverageDescriptionV201BoundedByEnvelopeAllDims } = await import('./coverageDescriptionV201BoundedByEnvelopeAllDims');
        return await buildDotNetCoverageDescriptionV201BoundedByEnvelopeAllDims(this.component.envelopeAllDims, this.layerId, this.viewId);
    }
    async setEnvelopeAllDims(value: any): Promise<void> {
        let { buildJsCoverageDescriptionV201BoundedByEnvelopeAllDims } = await import('./coverageDescriptionV201BoundedByEnvelopeAllDims');
        this.component.envelopeAllDims = await  buildJsCoverageDescriptionV201BoundedByEnvelopeAllDims(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsCoverageDescriptionV201BoundedByGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCoverageDescriptionV201BoundedBy: any = {}
    if (hasValue(dotNetObject.envelope)) {
        let { buildJsExtent } = await import('./extent');
        jsCoverageDescriptionV201BoundedBy.envelope = buildJsExtent(dotNetObject.envelope) as any;
    }
    if (hasValue(dotNetObject.envelopeAllDims)) {
        let { buildJsCoverageDescriptionV201BoundedByEnvelopeAllDims } = await import('./coverageDescriptionV201BoundedByEnvelopeAllDims');
        jsCoverageDescriptionV201BoundedBy.envelopeAllDims = await buildJsCoverageDescriptionV201BoundedByEnvelopeAllDims(dotNetObject.envelopeAllDims, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.axisLabels)) {
        jsCoverageDescriptionV201BoundedBy.axisLabels = dotNetObject.axisLabels;
    }
    if (hasValue(dotNetObject.beginPosition)) {
        jsCoverageDescriptionV201BoundedBy.beginPosition = dotNetObject.beginPosition;
    }
    if (hasValue(dotNetObject.endPosition)) {
        jsCoverageDescriptionV201BoundedBy.endPosition = dotNetObject.endPosition;
    }
    if (hasValue(dotNetObject.isEastFirst)) {
        jsCoverageDescriptionV201BoundedBy.isEastFirst = dotNetObject.isEastFirst;
    }
    if (hasValue(dotNetObject.uomLabels)) {
        jsCoverageDescriptionV201BoundedBy.uomLabels = dotNetObject.uomLabels;
    }
    let { default: CoverageDescriptionV201BoundedByWrapper } = await import('./coverageDescriptionV201BoundedBy');
    let coverageDescriptionV201BoundedByWrapper = new CoverageDescriptionV201BoundedByWrapper(jsCoverageDescriptionV201BoundedBy);
    coverageDescriptionV201BoundedByWrapper.geoBlazorId = dotNetObject.id;
    coverageDescriptionV201BoundedByWrapper.viewId = viewId;
    coverageDescriptionV201BoundedByWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(coverageDescriptionV201BoundedByWrapper);
    jsObjectRefs[dotNetObject.id] = coverageDescriptionV201BoundedByWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsCoverageDescriptionV201BoundedBy;
    
    let dnInstantiatedObject = await buildDotNetCoverageDescriptionV201BoundedBy(jsCoverageDescriptionV201BoundedBy, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CoverageDescriptionV201BoundedBy', e);
    }
    
    return jsCoverageDescriptionV201BoundedBy;
}

export async function buildDotNetCoverageDescriptionV201BoundedByGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCoverageDescriptionV201BoundedBy: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.envelope)) {
            let { buildDotNetExtent } = await import('./extent');
            dotNetCoverageDescriptionV201BoundedBy.envelope = buildDotNetExtent(jsObject.envelope);
        }
        if (hasValue(jsObject.envelopeAllDims)) {
            let { buildDotNetCoverageDescriptionV201BoundedByEnvelopeAllDims } = await import('./coverageDescriptionV201BoundedByEnvelopeAllDims');
            dotNetCoverageDescriptionV201BoundedBy.envelopeAllDims = await buildDotNetCoverageDescriptionV201BoundedByEnvelopeAllDims(jsObject.envelopeAllDims, layerId, viewId);
        }
        if (hasValue(jsObject.axisLabels)) {
            dotNetCoverageDescriptionV201BoundedBy.axisLabels = jsObject.axisLabels;
        }
        if (hasValue(jsObject.beginPosition)) {
            dotNetCoverageDescriptionV201BoundedBy.beginPosition = jsObject.beginPosition;
        }
        if (hasValue(jsObject.endPosition)) {
            dotNetCoverageDescriptionV201BoundedBy.endPosition = jsObject.endPosition;
        }
        if (hasValue(jsObject.isEastFirst)) {
            dotNetCoverageDescriptionV201BoundedBy.isEastFirst = jsObject.isEastFirst;
        }
        if (hasValue(jsObject.uomLabels)) {
            dotNetCoverageDescriptionV201BoundedBy.uomLabels = jsObject.uomLabels;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCoverageDescriptionV201BoundedBy.id = k;
                break;
            }
        }
    }

    return dotNetCoverageDescriptionV201BoundedBy;
}

