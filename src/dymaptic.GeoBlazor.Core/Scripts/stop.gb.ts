// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Stop from '@arcgis/core/rest/support/Stop';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class StopGenerated implements IPropertyWrapper {
    public component: Stop;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: Stop) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async toGraphic(): Promise<any> {
        return this.component.toGraphic();
    }

    // region properties
    
    async getGeometry(): Promise<any> {
        if (!hasValue(this.component.geometry)) {
            return null;
        }
        
        let { buildDotNetPoint } = await import('./point');
        return buildDotNetPoint(this.component.geometry);
    }
    async setGeometry(value: any): Promise<void> {
        let { buildJsPoint } = await import('./point');
        this.component.geometry =  buildJsPoint(value);
    }
    async getPopupTemplate(): Promise<any> {
        if (!hasValue(this.component.popupTemplate)) {
            return null;
        }
        
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        return await buildDotNetPopupTemplate(this.component.popupTemplate);
    }
    async setPopupTemplate(value: any): Promise<void> {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        this.component.popupTemplate =  buildJsPopupTemplate(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsStopGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsPoint } = await import('./point');
        properties.geometry = buildJsPoint(dotNetObject.geometry) as any;
    }
    if (hasValue(dotNetObject.popupTemplate)) {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        properties.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.arriveTime)) {
        properties.arriveTime = dotNetObject.arriveTime;
    }
    if (hasValue(dotNetObject.arriveTimeOffset)) {
        properties.arriveTimeOffset = dotNetObject.arriveTimeOffset;
    }
    if (hasValue(dotNetObject.curbApproach)) {
        properties.curbApproach = dotNetObject.curbApproach;
    }
    if (hasValue(dotNetObject.departTime)) {
        properties.departTime = dotNetObject.departTime;
    }
    if (hasValue(dotNetObject.departTimeOffset)) {
        properties.departTimeOffset = dotNetObject.departTimeOffset;
    }
    if (hasValue(dotNetObject.locationType)) {
        properties.locationType = dotNetObject.locationType;
    }
    if (hasValue(dotNetObject.name)) {
        properties.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.sequence)) {
        properties.sequence = dotNetObject.sequence;
    }
    if (hasValue(dotNetObject.status)) {
        properties.status = dotNetObject.status;
    }
    if (hasValue(dotNetObject.timeWindowEnd)) {
        properties.timeWindowEnd = dotNetObject.timeWindowEnd;
    }
    if (hasValue(dotNetObject.timeWindowStart)) {
        properties.timeWindowStart = dotNetObject.timeWindowStart;
    }
    let jsStop = new Stop(properties);

    let { default: StopWrapper } = await import('./stop');
    let stopWrapper = new StopWrapper(jsStop);
    stopWrapper.geoBlazorId = dotNetObject.id;
    stopWrapper.viewId = viewId;
    stopWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(stopWrapper);
    jsObjectRefs[dotNetObject.id] = stopWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsStop;
    let { buildDotNetStop } = await import('./stop');
    let dnInstantiatedObject = await buildDotNetStop(jsStop);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Stop', e);
    }
    
    return jsStop;
}

export async function buildDotNetStopGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetStop: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.geometry)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetStop.geometry = buildDotNetPoint(jsObject.geometry);
        }
        if (hasValue(jsObject.popupTemplate)) {
            let { buildDotNetPopupTemplate } = await import('./popupTemplate');
            dotNetStop.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
        }
    if (hasValue(jsObject.arriveTime)) {
        dotNetStop.arriveTime = jsObject.arriveTime;
    }
    if (hasValue(jsObject.arriveTimeOffset)) {
        dotNetStop.arriveTimeOffset = jsObject.arriveTimeOffset;
    }
    if (hasValue(jsObject.curbApproach)) {
        dotNetStop.curbApproach = jsObject.curbApproach;
    }
    if (hasValue(jsObject.departTime)) {
        dotNetStop.departTime = jsObject.departTime;
    }
    if (hasValue(jsObject.departTimeOffset)) {
        dotNetStop.departTimeOffset = jsObject.departTimeOffset;
    }
    if (hasValue(jsObject.locationType)) {
        dotNetStop.locationType = jsObject.locationType;
    }
    if (hasValue(jsObject.name)) {
        dotNetStop.name = jsObject.name;
    }
    if (hasValue(jsObject.sequence)) {
        dotNetStop.sequence = jsObject.sequence;
    }
    if (hasValue(jsObject.status)) {
        dotNetStop.status = jsObject.status;
    }
    if (hasValue(jsObject.timeWindowEnd)) {
        dotNetStop.timeWindowEnd = jsObject.timeWindowEnd;
    }
    if (hasValue(jsObject.timeWindowStart)) {
        dotNetStop.timeWindowStart = jsObject.timeWindowStart;
    }
    if (hasValue(jsObject.type)) {
        dotNetStop.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetStop.id = k;
                break;
            }
        }
    }

    return dotNetStop;
}

