// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetServiceContents } from './serviceContents';

export async function buildJsServiceContentsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsServiceContents: any = {};
    if (hasValue(dotNetObject.layers)) {
        let { buildJsServiceContentsLayers } = await import('./serviceContentsLayers');
        jsServiceContents.layers = await Promise.all(dotNetObject.layers.map(async i => await buildJsServiceContentsLayers(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.tables)) {
        let { buildJsServiceContentsTables } = await import('./serviceContentsTables');
        jsServiceContents.tables = await Promise.all(dotNetObject.tables.map(async i => await buildJsServiceContentsTables(i, layerId, viewId))) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsServiceContents);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsServiceContents;
    
    let dnInstantiatedObject = await buildDotNetServiceContents(jsServiceContents);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ServiceContents', e);
    }
    
    return jsServiceContents;
}

export async function buildDotNetServiceContentsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetServiceContents: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.layers)) {
            let { buildDotNetServiceContentsLayers } = await import('./serviceContentsLayers');
            dotNetServiceContents.layers = await Promise.all(jsObject.layers.map(async i => await buildDotNetServiceContentsLayers(i)));
        }
        if (hasValue(jsObject.tables)) {
            let { buildDotNetServiceContentsTables } = await import('./serviceContentsTables');
            dotNetServiceContents.tables = await Promise.all(jsObject.tables.map(async i => await buildDotNetServiceContentsTables(i)));
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetServiceContents.id = k;
                break;
            }
        }
    }

    return dotNetServiceContents;
}

