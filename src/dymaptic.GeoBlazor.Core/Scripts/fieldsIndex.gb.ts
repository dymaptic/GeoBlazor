// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import FieldsIndex from '@arcgis/core/layers/support/FieldsIndex';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FieldsIndexGenerated implements IPropertyWrapper {
    public component: FieldsIndex;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: FieldsIndex) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async get(fieldName: any): Promise<any> {
        return this.component.get(fieldName);
    }

    async getTimeZone(fieldOrFieldName: any): Promise<any> {
        return this.component.getTimeZone(fieldOrFieldName);
    }

    async has(fieldName: any): Promise<any> {
        return this.component.has(fieldName);
    }

    async isDateField(fieldName: any): Promise<any> {
        return this.component.isDateField(fieldName);
    }

    // region properties
    
    async getDateFields(): Promise<any> {
        if (!hasValue(this.component.dateFields)) {
            return null;
        }
        
        let { buildDotNetField } = await import('./field');
        return this.component.dateFields!.map(i => buildDotNetField(i));
    }
    
    async setDateFields(value: any): Promise<void> {
        let { buildJsField } = await import('./field');
        this.component.dateFields = value.map(i => buildJsField(i)) as any;
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsFieldsIndexGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.dateFields)) {
        let { buildJsField } = await import('./field');
        properties.dateFields = dotNetObject.dateFields.map(i => buildJsField(i)) as any;
    }

    let jsFieldsIndex = new FieldsIndex(properties);

    let { default: FieldsIndexWrapper } = await import('./fieldsIndex');
    let fieldsIndexWrapper = new FieldsIndexWrapper(jsFieldsIndex);
    fieldsIndexWrapper.geoBlazorId = dotNetObject.id;
    fieldsIndexWrapper.viewId = viewId;
    fieldsIndexWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(fieldsIndexWrapper);
    jsObjectRefs[dotNetObject.id] = fieldsIndexWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsFieldsIndex;
    
    let { buildDotNetFieldsIndex } = await import('./fieldsIndex');
    let dnInstantiatedObject = await buildDotNetFieldsIndex(jsFieldsIndex);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type FieldsIndex detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FieldsIndex', e);
    }
    
    return jsFieldsIndex;
}


export async function buildDotNetFieldsIndexGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFieldsIndex: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.dateFields)) {
        let { buildDotNetField } = await import('./field');
        dotNetFieldsIndex.dateFields = jsObject.dateFields.map(i => buildDotNetField(i));
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFieldsIndex.id = k;
                break;
            }
        }
    }

    return dotNetFieldsIndex;
}

