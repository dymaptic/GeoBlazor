// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetArcGISImageServiceCapabilities } from './arcGISImageServiceCapabilities';

export async function buildJsArcGISImageServiceCapabilitiesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsArcGISImageServiceCapabilities: any = {};
    if (hasValue(dotNetObject.mensuration)) {
        let { buildJsArcGISImageServiceCapabilitiesMensuration } = await import('./arcGISImageServiceCapabilitiesMensuration');
        jsArcGISImageServiceCapabilities.mensuration = await buildJsArcGISImageServiceCapabilitiesMensuration(dotNetObject.mensuration, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.operations)) {
        let { buildJsArcGISImageServiceCapabilitiesOperations } = await import('./arcGISImageServiceCapabilitiesOperations');
        jsArcGISImageServiceCapabilities.operations = await buildJsArcGISImageServiceCapabilitiesOperations(dotNetObject.operations, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.query)) {
        jsArcGISImageServiceCapabilities.query = dotNetObject.query;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsArcGISImageServiceCapabilities);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsArcGISImageServiceCapabilities;
    
    let { buildDotNetArcGISImageServiceCapabilities } = await import('./arcGISImageServiceCapabilities');
    let dnInstantiatedObject = await buildDotNetArcGISImageServiceCapabilities(jsArcGISImageServiceCapabilities);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type ArcGISImageServiceCapabilities detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ArcGISImageServiceCapabilities', e);
    }
    
    return jsArcGISImageServiceCapabilities;
}


export async function buildDotNetArcGISImageServiceCapabilitiesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetArcGISImageServiceCapabilities: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.mensuration)) {
        let { buildDotNetArcGISImageServiceCapabilitiesMensuration } = await import('./arcGISImageServiceCapabilitiesMensuration');
        dotNetArcGISImageServiceCapabilities.mensuration = await buildDotNetArcGISImageServiceCapabilitiesMensuration(jsObject.mensuration);
    }
    if (hasValue(jsObject.operations)) {
        let { buildDotNetArcGISImageServiceCapabilitiesOperations } = await import('./arcGISImageServiceCapabilitiesOperations');
        dotNetArcGISImageServiceCapabilities.operations = await buildDotNetArcGISImageServiceCapabilitiesOperations(jsObject.operations);
    }
    if (hasValue(jsObject.query)) {
        dotNetArcGISImageServiceCapabilities.query = jsObject.query;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetArcGISImageServiceCapabilities.id = geoBlazorId;
    }

    return dotNetArcGISImageServiceCapabilities;
}

