// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetArcGISImageServiceCapabilities } from './arcGISImageServiceCapabilities';

export async function buildJsArcGISImageServiceCapabilitiesGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsArcGISImageServiceCapabilities: any = {};
    if (hasValue(dotNetObject.mensuration)) {
        let { buildJsArcGISImageServiceCapabilitiesMensuration } = await import('./arcGISImageServiceCapabilitiesMensuration');
        jsArcGISImageServiceCapabilities.mensuration = await buildJsArcGISImageServiceCapabilitiesMensuration(dotNetObject.mensuration) as any;
    }
    if (hasValue(dotNetObject.operations)) {
        let { buildJsArcGISImageServiceCapabilitiesOperations } = await import('./arcGISImageServiceCapabilitiesOperations');
        jsArcGISImageServiceCapabilities.operations = await buildJsArcGISImageServiceCapabilitiesOperations(dotNetObject.operations) as any;
    }

    if (hasValue(dotNetObject.query)) {
        jsArcGISImageServiceCapabilities.query = dotNetObject.query;
    }
    
    jsObjectRefs[dotNetObject.id] = jsArcGISImageServiceCapabilities;
    arcGisObjectRefs[dotNetObject.id] = jsArcGISImageServiceCapabilities;
    
    return jsArcGISImageServiceCapabilities;
}


export async function buildDotNetArcGISImageServiceCapabilitiesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetArcGISImageServiceCapabilities: any = {};
    
    if (hasValue(jsObject.mensuration)) {
        let { buildDotNetArcGISImageServiceCapabilitiesMensuration } = await import('./arcGISImageServiceCapabilitiesMensuration');
        dotNetArcGISImageServiceCapabilities.mensuration = await buildDotNetArcGISImageServiceCapabilitiesMensuration(jsObject.mensuration);
    }
    
    if (hasValue(jsObject.operations)) {
        let { buildDotNetArcGISImageServiceCapabilitiesOperations } = await import('./arcGISImageServiceCapabilitiesOperations');
        dotNetArcGISImageServiceCapabilities.operations = await buildDotNetArcGISImageServiceCapabilitiesOperations(jsObject.operations);
    }
    
    if (hasValue(jsObject.query)) {
        dotNetArcGISImageServiceCapabilities.query = removeCircularReferences(jsObject.query);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetArcGISImageServiceCapabilities.id = geoBlazorId;
    }

    return dotNetArcGISImageServiceCapabilities;
}

