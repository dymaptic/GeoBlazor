// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import VisualVariablesResultSize = __esri.VisualVariablesResultSize;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class VisualVariablesResultSizeGenerated implements IPropertyWrapper {
    public component: VisualVariablesResultSize;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: VisualVariablesResultSize) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getVisualVariables(): Promise<any> {
        if (!hasValue(this.component.visualVariables)) {
            return null;
        }
        
        let { buildDotNetSizeVariable } = await import('./sizeVariable');
        return await Promise.all(this.component.visualVariables.map(async i => await buildDotNetSizeVariable(i)));
    }
    
    async setVisualVariables(value: any): Promise<void> {
        let { buildJsSizeVariable } = await import('./sizeVariable');
        this.component.visualVariables = await Promise.all(value.map(async i => await buildJsSizeVariable(i, this.layerId, this.viewId))) as any;
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsVisualVariablesResultSizeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsVisualVariablesResultSize: any = {}
    if (hasValue(dotNetObject.sizeScheme)) {
        jsVisualVariablesResultSize.sizeScheme = dotNetObject.iSizeScheme;
    }
    if (hasValue(dotNetObject.visualVariables)) {
        let { buildJsSizeVariable } = await import('./sizeVariable');
        jsVisualVariablesResultSize.visualVariables = await Promise.all(dotNetObject.visualVariables.map(async i => await buildJsSizeVariable(i, layerId, viewId))) as any;
    }


    let { default: VisualVariablesResultSizeWrapper } = await import('./visualVariablesResultSize');
    let visualVariablesResultSizeWrapper = new VisualVariablesResultSizeWrapper(jsVisualVariablesResultSize);
    visualVariablesResultSizeWrapper.geoBlazorId = dotNetObject.id;
    visualVariablesResultSizeWrapper.viewId = viewId;
    visualVariablesResultSizeWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(visualVariablesResultSizeWrapper);
    jsObjectRefs[dotNetObject.id] = visualVariablesResultSizeWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsVisualVariablesResultSize;
    let { buildDotNetVisualVariablesResultSize } = await import('./visualVariablesResultSize');
    let dnInstantiatedObject = await buildDotNetVisualVariablesResultSize(jsVisualVariablesResultSize);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for VisualVariablesResultSize', e);
    }
    
    return jsVisualVariablesResultSize;
}
export async function buildDotNetVisualVariablesResultSizeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVisualVariablesResultSize: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetVisualVariablesResultSize.sizeScheme = jsObject.sizeScheme;
        if (hasValue(jsObject.visualVariables)) {
            let { buildDotNetSizeVariable } = await import('./sizeVariable');
            dotNetVisualVariablesResultSize.visualVariables = await Promise.all(jsObject.visualVariables.map(async i => await buildDotNetSizeVariable(i)));
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetVisualVariablesResultSize.id = k;
                break;
            }
        }
    }

    return dotNetVisualVariablesResultSize;
}

