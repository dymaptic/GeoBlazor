import { buildDotNetLineOfSightAnalysisTarget } from './lineOfSightAnalysisTarget';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import LineOfSightAnalysisTarget from '@arcgis/core/analysis/LineOfSightAnalysisTarget';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsLineOfSightAnalysisTargetGenerated(dotNetObject: any): Promise<any> {
    let jsLineOfSightAnalysisTarget = new LineOfSightAnalysisTarget();
    if (hasValue(dotNetObject.feature)) {
        let { buildJsFeatureReference } = await import('./featureReference');
        jsLineOfSightAnalysisTarget.feature = await buildJsFeatureReference(dotNetObject.feature, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.position)) {
        let { buildJsPoint } = await import('./point');
        jsLineOfSightAnalysisTarget.position = buildJsPoint(dotNetObject.position) as any;
    }

    if (hasValue(dotNetObject.elevationInfo)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedElevationInfo } = dotNetObject.elevationInfo;
        jsLineOfSightAnalysisTarget.elevationInfo = sanitizedElevationInfo;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsLineOfSightAnalysisTarget);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLineOfSightAnalysisTarget;
    
    let dnInstantiatedObject = await buildDotNetLineOfSightAnalysisTarget(jsLineOfSightAnalysisTarget);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LineOfSightAnalysisTarget', e);
    }
    
    return jsLineOfSightAnalysisTarget;
}
export async function buildDotNetLineOfSightAnalysisTargetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLineOfSightAnalysisTarget: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.feature)) {
            let { buildDotNetFeatureReference } = await import('./featureReference');
            dotNetLineOfSightAnalysisTarget.feature = await buildDotNetFeatureReference(jsObject.feature);
        }
        if (hasValue(jsObject.position)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetLineOfSightAnalysisTarget.position = buildDotNetPoint(jsObject.position);
        }
        if (hasValue(jsObject.elevationInfo)) {
            dotNetLineOfSightAnalysisTarget.elevationInfo = jsObject.elevationInfo;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLineOfSightAnalysisTarget.id = k;
                break;
            }
        }
    }

    return dotNetLineOfSightAnalysisTarget;
}

