// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import gamepadGamepadSettings from '@arcgis/core/views/navigation/gamepad/GamepadSettings';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetGamepadGamepadSettings } from './gamepadGamepadSettings';

export async function buildJsGamepadGamepadSettingsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.device)) {
        let { buildJsGamepadInputDevice } = await import('./gamepadInputDevice');
        properties.device = await buildJsGamepadInputDevice(dotNetObject.device, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.enabled)) {
        properties.enabled = dotNetObject.enabled;
    }
    if (hasValue(dotNetObject.mode)) {
        properties.mode = dotNetObject.mode;
    }
    if (hasValue(dotNetObject.tiltDirection)) {
        properties.tiltDirection = dotNetObject.tiltDirection;
    }
    let jsgamepadGamepadSettings = new gamepadGamepadSettings(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsgamepadGamepadSettings);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsgamepadGamepadSettings;
    
    return jsgamepadGamepadSettings;
}


export async function buildDotNetGamepadGamepadSettingsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGamepadGamepadSettings: any = {};
    
    if (hasValue(jsObject.device)) {
        let { buildDotNetGamepadInputDevice } = await import('./gamepadInputDevice');
        dotNetGamepadGamepadSettings.device = await buildDotNetGamepadInputDevice(jsObject.device, layerId, viewId);
    }
    
    if (hasValue(jsObject.enabled)) {
        dotNetGamepadGamepadSettings.enabled = jsObject.enabled;
    }
    
    if (hasValue(jsObject.mode)) {
        dotNetGamepadGamepadSettings.mode = removeCircularReferences(jsObject.mode);
    }
    
    if (hasValue(jsObject.tiltDirection)) {
        dotNetGamepadGamepadSettings.tiltDirection = removeCircularReferences(jsObject.tiltDirection);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetGamepadGamepadSettings.id = geoBlazorId;
    }

    return dotNetGamepadGamepadSettings;
}

