// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCoverageDescriptionV110 } from './coverageDescriptionV110';

export async function buildJsCoverageDescriptionV110Generated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCoverageDescriptionV110: any = {};
    if (hasValue(dotNetObject.domain)) {
        let { buildJsCoverageDescriptionV110Domain } = await import('./coverageDescriptionV110Domain');
        jsCoverageDescriptionV110.domain = await buildJsCoverageDescriptionV110Domain(dotNetObject.domain, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.abstract)) {
        jsCoverageDescriptionV110.abstract = dotNetObject.abstract;
    }
    if (hasValue(dotNetObject.identifier)) {
        jsCoverageDescriptionV110.identifier = dotNetObject.identifier;
    }
    if (hasValue(dotNetObject.metadata)) {
        jsCoverageDescriptionV110.metadata = dotNetObject.metadata;
    }
    if (hasValue(dotNetObject.range)) {
        jsCoverageDescriptionV110.range = dotNetObject.range;
    }
    if (hasValue(dotNetObject.resolution)) {
        jsCoverageDescriptionV110.resolution = dotNetObject.resolution;
    }
    if (hasValue(dotNetObject.supportedCRSs)) {
        jsCoverageDescriptionV110.supportedCRSs = dotNetObject.supportedCRSs;
    }
    if (hasValue(dotNetObject.supportedFormats)) {
        jsCoverageDescriptionV110.supportedFormats = dotNetObject.supportedFormats;
    }
    if (hasValue(dotNetObject.title)) {
        jsCoverageDescriptionV110.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.version)) {
        jsCoverageDescriptionV110.version = dotNetObject.version;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCoverageDescriptionV110);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCoverageDescriptionV110;
    
    return jsCoverageDescriptionV110;
}


export async function buildDotNetCoverageDescriptionV110Generated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsCoverageDescriptionV110 } = await import('./coverageDescriptionV110');
        jsComponentRef = await buildJsCoverageDescriptionV110(jsObject, layerId, viewId);
    }
    
    let dotNetCoverageDescriptionV110: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.domain)) {
        let { buildDotNetCoverageDescriptionV110Domain } = await import('./coverageDescriptionV110Domain');
        dotNetCoverageDescriptionV110.domain = await buildDotNetCoverageDescriptionV110Domain(jsObject.domain, layerId, viewId);
    }
    if (hasValue(jsObject.abstract)) {
        dotNetCoverageDescriptionV110.abstract = jsObject.abstract;
    }
    if (hasValue(jsObject.identifier)) {
        dotNetCoverageDescriptionV110.identifier = jsObject.identifier;
    }
    if (hasValue(jsObject.metadata)) {
        dotNetCoverageDescriptionV110.metadata = jsObject.metadata;
    }
    if (hasValue(jsObject.range)) {
        dotNetCoverageDescriptionV110.range = jsObject.range;
    }
    if (hasValue(jsObject.resolution)) {
        dotNetCoverageDescriptionV110.resolution = jsObject.resolution;
    }
    if (hasValue(jsObject.supportedCRSs)) {
        dotNetCoverageDescriptionV110.supportedCRSs = jsObject.supportedCRSs;
    }
    if (hasValue(jsObject.supportedFormats)) {
        dotNetCoverageDescriptionV110.supportedFormats = jsObject.supportedFormats;
    }
    if (hasValue(jsObject.title)) {
        dotNetCoverageDescriptionV110.title = jsObject.title;
    }
    if (hasValue(jsObject.version)) {
        dotNetCoverageDescriptionV110.version = jsObject.version;
    }

    return dotNetCoverageDescriptionV110;
}

