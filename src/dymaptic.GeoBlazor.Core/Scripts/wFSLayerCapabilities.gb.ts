// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetWFSLayerCapabilities } from './wFSLayerCapabilities';

export async function buildJsWFSLayerCapabilitiesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsWFSLayerCapabilities: any = {};
    if (hasValue(dotNetObject.attachment)) {
        let { buildJsWFSLayerCapabilitiesAttachment } = await import('./wFSLayerCapabilitiesAttachment');
        jsWFSLayerCapabilities.attachment = await buildJsWFSLayerCapabilitiesAttachment(dotNetObject.attachment, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.data)) {
        jsWFSLayerCapabilities.data = dotNetObject.data;
    }
    if (hasValue(dotNetObject.editing)) {
        jsWFSLayerCapabilities.editing = dotNetObject.editing;
    }
    if (hasValue(dotNetObject.operations)) {
        jsWFSLayerCapabilities.operations = dotNetObject.operations;
    }
    if (hasValue(dotNetObject.query)) {
        jsWFSLayerCapabilities.query = dotNetObject.query;
    }
    if (hasValue(dotNetObject.queryRelated)) {
        jsWFSLayerCapabilities.queryRelated = dotNetObject.queryRelated;
    }
    
    jsObjectRefs[dotNetObject.id] = jsWFSLayerCapabilities;
    arcGisObjectRefs[dotNetObject.id] = jsWFSLayerCapabilities;
    
    return jsWFSLayerCapabilities;
}


export async function buildDotNetWFSLayerCapabilitiesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWFSLayerCapabilities: any = {};
    
    if (hasValue(jsObject.attachment)) {
        let { buildDotNetWFSLayerCapabilitiesAttachment } = await import('./wFSLayerCapabilitiesAttachment');
        dotNetWFSLayerCapabilities.attachment = await buildDotNetWFSLayerCapabilitiesAttachment(jsObject.attachment);
    }
    
    if (hasValue(jsObject.data)) {
        dotNetWFSLayerCapabilities.data = removeCircularReferences(jsObject.data);
    }
    
    if (hasValue(jsObject.editing)) {
        dotNetWFSLayerCapabilities.editing = removeCircularReferences(jsObject.editing);
    }
    
    if (hasValue(jsObject.operations)) {
        dotNetWFSLayerCapabilities.operations = removeCircularReferences(jsObject.operations);
    }
    
    if (hasValue(jsObject.query)) {
        dotNetWFSLayerCapabilities.query = removeCircularReferences(jsObject.query);
    }
    
    if (hasValue(jsObject.queryRelated)) {
        dotNetWFSLayerCapabilities.queryRelated = removeCircularReferences(jsObject.queryRelated);
    }
    

    return dotNetWFSLayerCapabilities;
}

