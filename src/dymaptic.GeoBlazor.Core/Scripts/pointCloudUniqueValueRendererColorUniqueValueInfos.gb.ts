import { buildDotNetPointCloudUniqueValueRendererColorUniqueValueInfos } from './pointCloudUniqueValueRendererColorUniqueValueInfos';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import PointCloudUniqueValueRendererColorUniqueValueInfos = __esri.PointCloudUniqueValueRendererColorUniqueValueInfos;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsPointCloudUniqueValueRendererColorUniqueValueInfosGenerated(dotNetObject: any): Promise<any> {
    let jsPointCloudUniqueValueRendererColorUniqueValueInfos: any = {}
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsPointCloudUniqueValueRendererColorUniqueValueInfos.color = buildJsMapColor(dotNetObject.color) as any;
    }

    if (hasValue(dotNetObject.label)) {
        jsPointCloudUniqueValueRendererColorUniqueValueInfos.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.values)) {
        jsPointCloudUniqueValueRendererColorUniqueValueInfos.values = dotNetObject.values;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsPointCloudUniqueValueRendererColorUniqueValueInfos);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPointCloudUniqueValueRendererColorUniqueValueInfos;
    
    let dnInstantiatedObject = await buildDotNetPointCloudUniqueValueRendererColorUniqueValueInfos(jsPointCloudUniqueValueRendererColorUniqueValueInfos);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PointCloudUniqueValueRendererColorUniqueValueInfos', e);
    }
    
    return jsPointCloudUniqueValueRendererColorUniqueValueInfos;
}
export async function buildDotNetPointCloudUniqueValueRendererColorUniqueValueInfosGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPointCloudUniqueValueRendererColorUniqueValueInfos: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.color)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetPointCloudUniqueValueRendererColorUniqueValueInfos.color = buildDotNetMapColor(jsObject.color);
        }
        if (hasValue(jsObject.label)) {
            dotNetPointCloudUniqueValueRendererColorUniqueValueInfos.label = jsObject.label;
        }
        if (hasValue(jsObject.values)) {
            dotNetPointCloudUniqueValueRendererColorUniqueValueInfos.values = jsObject.values;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPointCloudUniqueValueRendererColorUniqueValueInfos.id = k;
                break;
            }
        }
    }

    return dotNetPointCloudUniqueValueRendererColorUniqueValueInfos;
}

