// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import RenderContext = __esri.RenderContext;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class RenderContextGenerated implements IPropertyWrapper {
    public component: RenderContext;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: RenderContext) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async bindRenderTarget(): Promise<void> {
        this.component.bindRenderTarget();
    }

    async resetWebGLState(): Promise<void> {
        this.component.resetWebGLState();
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsRenderContextGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsRenderContext: any = {}

    if (hasValue(dotNetObject.camera)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedCamera } = dotNetObject.camera;
        jsRenderContext.camera = sanitizedCamera;
    }
    if (hasValue(dotNetObject.gl)) {
        jsRenderContext.gl = dotNetObject.gl;
    }
    if (hasValue(dotNetObject.sunLight)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedSunLight } = dotNetObject.sunLight;
        jsRenderContext.sunLight = sanitizedSunLight;
    }

    let { default: RenderContextWrapper } = await import('./renderContext');
    let renderContextWrapper = new RenderContextWrapper(jsRenderContext);
    renderContextWrapper.geoBlazorId = dotNetObject.id;
    renderContextWrapper.viewId = viewId;
    renderContextWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(renderContextWrapper);
    jsObjectRefs[dotNetObject.id] = renderContextWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsRenderContext;
    let { buildDotNetRenderContext } = await import('./renderContext');
    let dnInstantiatedObject = await buildDotNetRenderContext(jsRenderContext);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RenderContext', e);
    }
    
    return jsRenderContext;
}
export async function buildDotNetRenderContextGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRenderContext: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.camera)) {
            dotNetRenderContext.camera = jsObject.camera;
        }
        if (hasValue(jsObject.gl)) {
            dotNetRenderContext.gl = jsObject.gl;
        }
        if (hasValue(jsObject.sunLight)) {
            dotNetRenderContext.sunLight = jsObject.sunLight;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRenderContext.id = k;
                break;
            }
        }
    }

    return dotNetRenderContext;
}

