// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import PortalLayer = __esri.PortalLayer;
import { hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class IPortalLayerGenerated implements IPropertyWrapper {
    public layer: PortalLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: PortalLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    // region properties
    
    async getPortalItem(): Promise<any> {
        if (!hasValue(this.layer.portalItem)) {
            return null;
        }
        
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(this.layer.portalItem);
    }
    
    async setPortalItem(value: any): Promise<void> {
        let { buildJsPortalItem } = await import('./portalItem');
        this.layer.portalItem = await  buildJsPortalItem(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}

export function buildJsIPortalLayerGenerated(dotNetObject: any): any {
    let { id, dotNetComponentReference, ...sanitizedDotNetObject } = dotNetObject;
    return sanitizedDotNetObject;
}

export function buildDotNetIPortalLayerGenerated(jsObject: any): any {
    return jsObject;
}

