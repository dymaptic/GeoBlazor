// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import SizeStop from '@arcgis/core/renderers/visualVariables/support/SizeStop';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SizeStopGenerated implements IPropertyWrapper {
    public component: SizeStop;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: SizeStop) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsSizeStopGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSizeStop = new SizeStop();

    if (hasValue(dotNetObject.label)) {
        jsSizeStop.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.size)) {
        jsSizeStop.size = dotNetObject.size;
    }
    if (hasValue(dotNetObject.value)) {
        jsSizeStop.value = dotNetObject.value;
    }
    let { default: SizeStopWrapper } = await import('./sizeStop');
    let sizeStopWrapper = new SizeStopWrapper(jsSizeStop);
    sizeStopWrapper.geoBlazorId = dotNetObject.id;
    sizeStopWrapper.viewId = viewId;
    sizeStopWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(sizeStopWrapper);
    jsObjectRefs[dotNetObject.id] = sizeStopWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsSizeStop;
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SizeStop', e);
    }
    
    return jsSizeStop;
}

export async function buildDotNetSizeStopGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSizeStop: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.label)) {
            dotNetSizeStop.label = jsObject.label;
        }
        if (hasValue(jsObject.size)) {
            dotNetSizeStop.size = jsObject.size;
        }
        if (hasValue(jsObject.value)) {
            dotNetSizeStop.value = jsObject.value;
        }

    return dotNetSizeStop;
}

