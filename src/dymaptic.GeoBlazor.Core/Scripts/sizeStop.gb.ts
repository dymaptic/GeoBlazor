// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import SizeStop from '@arcgis/core/renderers/visualVariables/support/SizeStop';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetSizeStop } from './sizeStop';

export async function buildJsSizeStopGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.size)) {
        properties.size = dotNetObject.size;
    }
    if (hasValue(dotNetObject.value)) {
        properties.value = dotNetObject.value;
    }
    let jsSizeStop = new SizeStop(properties);
    
    jsObjectRefs[dotNetObject.id] = jsSizeStop;
    arcGisObjectRefs[dotNetObject.id] = jsSizeStop;
    
    return jsSizeStop;
}


export async function buildDotNetSizeStopGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSizeStop: any = {};
    
    if (hasValue(jsObject.label)) {
        dotNetSizeStop.label = jsObject.label;
    }
    
    if (hasValue(jsObject.size)) {
        dotNetSizeStop.size = removeCircularReferences(jsObject.size);
    }
    
    if (hasValue(jsObject.value)) {
        dotNetSizeStop.value = jsObject.value;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSizeStop.id = geoBlazorId;
    }

    return dotNetSizeStop;
}

