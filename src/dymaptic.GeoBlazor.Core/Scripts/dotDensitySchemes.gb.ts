// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetDotDensitySchemes } from './dotDensitySchemes';
import DotDensitySchemes = __esri.DotDensitySchemes;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsDotDensitySchemesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsDotDensitySchemes: any = {}
    if (hasValue(dotNetObject.primaryScheme)) {
        let { buildJsDotDensityScheme } = await import('./dotDensityScheme');
        jsDotDensitySchemes.primaryScheme = await buildJsDotDensityScheme(dotNetObject.primaryScheme, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.secondarySchemes)) {
        let { buildJsDotDensityScheme } = await import('./dotDensityScheme');
        jsDotDensitySchemes.secondarySchemes = await Promise.all(dotNetObject.secondarySchemes.map(async i => await buildJsDotDensityScheme(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.basemapId)) {
        jsDotDensitySchemes.basemapId = dotNetObject.basemapId;
    }
    if (hasValue(dotNetObject.basemapTheme)) {
        jsDotDensitySchemes.basemapTheme = dotNetObject.basemapTheme;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsDotDensitySchemes);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsDotDensitySchemes;
    
    let dnInstantiatedObject = await buildDotNetDotDensitySchemes(jsDotDensitySchemes);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DotDensitySchemes', e);
    }
    
    return jsDotDensitySchemes;
}

export async function buildDotNetDotDensitySchemesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDotDensitySchemes: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.primaryScheme)) {
            let { buildDotNetDotDensityScheme } = await import('./dotDensityScheme');
            dotNetDotDensitySchemes.primaryScheme = await buildDotNetDotDensityScheme(jsObject.primaryScheme);
        }
        if (hasValue(jsObject.secondarySchemes)) {
            let { buildDotNetDotDensityScheme } = await import('./dotDensityScheme');
            dotNetDotDensitySchemes.secondarySchemes = await Promise.all(jsObject.secondarySchemes.map(async i => await buildDotNetDotDensityScheme(i)));
        }
        if (hasValue(jsObject.basemapId)) {
            dotNetDotDensitySchemes.basemapId = jsObject.basemapId;
        }
        if (hasValue(jsObject.basemapTheme)) {
            dotNetDotDensitySchemes.basemapTheme = jsObject.basemapTheme;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetDotDensitySchemes.id = k;
                break;
            }
        }
    }

    return dotNetDotDensitySchemes;
}

