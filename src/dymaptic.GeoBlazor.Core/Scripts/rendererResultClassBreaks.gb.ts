// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetRendererResultClassBreaks } from './rendererResultClassBreaks';

export async function buildJsRendererResultClassBreaksGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsRendererResultClassBreaks: any = {};
    if (hasValue(dotNetObject.field1)) {
        let { buildJsClassBreaksResult } = await import('./classBreaksResult');
        jsRendererResultClassBreaks.field1 = await buildJsClassBreaksResult(dotNetObject.field1, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.field2)) {
        let { buildJsClassBreaksResult } = await import('./classBreaksResult');
        jsRendererResultClassBreaks.field2 = await buildJsClassBreaksResult(dotNetObject.field2, layerId, viewId) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsRendererResultClassBreaks);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRendererResultClassBreaks;
    
    return jsRendererResultClassBreaks;
}


export async function buildDotNetRendererResultClassBreaksGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRendererResultClassBreaks: any = {};
    
    if (hasValue(jsObject.field1)) {
        let { buildDotNetClassBreaksResult } = await import('./classBreaksResult');
        dotNetRendererResultClassBreaks.field1 = await buildDotNetClassBreaksResult(jsObject.field1, layerId, viewId);
    }
    
    if (hasValue(jsObject.field2)) {
        let { buildDotNetClassBreaksResult } = await import('./classBreaksResult');
        dotNetRendererResultClassBreaks.field2 = await buildDotNetClassBreaksResult(jsObject.field2, layerId, viewId);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetRendererResultClassBreaks.id = geoBlazorId;
    }

    return dotNetRendererResultClassBreaks;
}

