// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import UniqueValueGroup from '@arcgis/core/renderers/support/UniqueValueGroup';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetUniqueValueGroup } from './uniqueValueGroup';

export async function buildJsUniqueValueGroupGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsUniqueValueGroup = new UniqueValueGroup();
    if (hasValue(dotNetObject.classes)) {
        let { buildJsUniqueValueClass } = await import('./uniqueValueClass');
        jsUniqueValueGroup.classes = await Promise.all(dotNetObject.classes.map(async i => await buildJsUniqueValueClass(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.heading)) {
        jsUniqueValueGroup.heading = dotNetObject.heading;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsUniqueValueGroup);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsUniqueValueGroup;
    
    let dnInstantiatedObject = await buildDotNetUniqueValueGroup(jsUniqueValueGroup);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for UniqueValueGroup', e);
    }
    
    return jsUniqueValueGroup;
}

export async function buildDotNetUniqueValueGroupGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUniqueValueGroup: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.classes)) {
            let { buildDotNetUniqueValueClass } = await import('./uniqueValueClass');
            dotNetUniqueValueGroup.classes = await Promise.all(jsObject.classes.map(async i => await buildDotNetUniqueValueClass(i)));
        }
    if (hasValue(jsObject.heading)) {
        dotNetUniqueValueGroup.heading = jsObject.heading;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetUniqueValueGroup.id = k;
                break;
            }
        }
    }

    return dotNetUniqueValueGroup;
}

