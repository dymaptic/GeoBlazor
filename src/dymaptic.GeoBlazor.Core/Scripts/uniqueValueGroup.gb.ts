// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import UniqueValueGroup from '@arcgis/core/renderers/support/UniqueValueGroup';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetUniqueValueGroup } from './uniqueValueGroup';

export async function buildJsUniqueValueGroupGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.classes)) {
        let { buildJsUniqueValueClass } = await import('./uniqueValueClass');
        properties.classes = await Promise.all(dotNetObject.classes.map(async i => await buildJsUniqueValueClass(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.heading)) {
        properties.heading = dotNetObject.heading;
    }
    let jsUniqueValueGroup = new UniqueValueGroup(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsUniqueValueGroup);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsUniqueValueGroup;
    
    let { buildDotNetUniqueValueGroup } = await import('./uniqueValueGroup');
    let dnInstantiatedObject = await buildDotNetUniqueValueGroup(jsUniqueValueGroup);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type UniqueValueGroup detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for UniqueValueGroup', e);
    }
    
    return jsUniqueValueGroup;
}


export async function buildDotNetUniqueValueGroupGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUniqueValueGroup: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.classes)) {
        let { buildDotNetUniqueValueClass } = await import('./uniqueValueClass');
        dotNetUniqueValueGroup.classes = await Promise.all(jsObject.classes.map(async i => await buildDotNetUniqueValueClass(i)));
    }
    if (hasValue(jsObject.heading)) {
        dotNetUniqueValueGroup.heading = jsObject.heading;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetUniqueValueGroup.id = geoBlazorId;
    }

    return dotNetUniqueValueGroup;
}

