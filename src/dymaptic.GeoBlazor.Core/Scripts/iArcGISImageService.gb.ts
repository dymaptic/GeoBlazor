// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetIArcGISImageService } from './iArcGISImageService';

export async function buildJsIArcGISImageServiceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsArcGISImageService: any = {};
    if (hasValue(dotNetObject.fields)) {
        let { buildJsField } = await import('./field');
        jsArcGISImageService.fields = dotNetObject.fields.map(i => buildJsField(i)) as any;
    }
    if (hasValue(dotNetObject.mosaicRule)) {
        let { buildJsMosaicRule } = await import('./mosaicRule');
        jsArcGISImageService.mosaicRule = await buildJsMosaicRule(dotNetObject.mosaicRule) as any;
    }
    if (hasValue(dotNetObject.multidimensionalSubset)) {
        let { buildJsMultidimensionalSubset } = await import('./multidimensionalSubset');
        jsArcGISImageService.multidimensionalSubset = await buildJsMultidimensionalSubset(dotNetObject.multidimensionalSubset) as any;
    }
    if (hasValue(dotNetObject.hasPixelFilter) && dotNetObject.hasPixelFilter) {
        jsArcGISImageService.pixelFilter = async (pixelData) => {
            let { buildDotNetPixelData } = await import('./pixelData');
            let dnPixelData = await buildDotNetPixelData(pixelData);

            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsPixelFilter', dnPixelData);
        };
    }

    if (hasValue(dotNetObject.bandIds)) {
        jsArcGISImageService.bandIds = dotNetObject.bandIds;
    }
    if (hasValue(dotNetObject.capabilities)) {
        const { id, dotNetComponentReference, ...sanitizedCapabilities } = dotNetObject.capabilities;
        jsArcGISImageService.capabilities = sanitizedCapabilities;
    }
    if (hasValue(dotNetObject.compressionQuality)) {
        jsArcGISImageService.compressionQuality = dotNetObject.compressionQuality;
    }
    if (hasValue(dotNetObject.compressionTolerance)) {
        jsArcGISImageService.compressionTolerance = dotNetObject.compressionTolerance;
    }
    if (hasValue(dotNetObject.copyright)) {
        jsArcGISImageService.copyright = dotNetObject.copyright;
    }
    if (hasValue(dotNetObject.definitionExpression)) {
        jsArcGISImageService.definitionExpression = dotNetObject.definitionExpression;
    }
    if (hasValue(dotNetObject.format)) {
        jsArcGISImageService.format = dotNetObject.format;
    }
    if (hasValue(dotNetObject.imageMaxHeight)) {
        jsArcGISImageService.imageMaxHeight = dotNetObject.imageMaxHeight;
    }
    if (hasValue(dotNetObject.imageMaxWidth)) {
        jsArcGISImageService.imageMaxWidth = dotNetObject.imageMaxWidth;
    }
    if (hasValue(dotNetObject.interpolation)) {
        jsArcGISImageService.interpolation = dotNetObject.interpolation;
    }
    if (hasValue(dotNetObject.noData)) {
        jsArcGISImageService.noData = dotNetObject.noData;
    }
    if (hasValue(dotNetObject.noDataInterpretation)) {
        jsArcGISImageService.noDataInterpretation = dotNetObject.noDataInterpretation;
    }
    if (hasValue(dotNetObject.objectIdField)) {
        jsArcGISImageService.objectIdField = dotNetObject.objectIdField;
    }
    if (hasValue(dotNetObject.pixelType)) {
        jsArcGISImageService.pixelType = dotNetObject.pixelType;
    }
    if (hasValue(dotNetObject.rasterFunction)) {
        const { id, dotNetComponentReference, ...sanitizedRasterFunction } = dotNetObject.rasterFunction;
        jsArcGISImageService.rasterFunction = sanitizedRasterFunction;
    }
    if (hasValue(dotNetObject.renderer)) {
        jsArcGISImageService.renderer = dotNetObject.renderer;
    }
    if (hasValue(dotNetObject.renderingRule)) {
        const { id, dotNetComponentReference, ...sanitizedRenderingRule } = dotNetObject.renderingRule;
        jsArcGISImageService.renderingRule = sanitizedRenderingRule;
    }
    if (hasValue(dotNetObject.sourceJSON)) {
        jsArcGISImageService.sourceJSON = dotNetObject.sourceJSON;
    }
    if (hasValue(dotNetObject.url)) {
        jsArcGISImageService.url = dotNetObject.url;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsArcGISImageService);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsArcGISImageService;
    
    let { buildDotNetIArcGISImageService } = await import('./iArcGISImageService');
    let dnInstantiatedObject = await buildDotNetIArcGISImageService(jsArcGISImageService, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type IArcGISImageService detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for IArcGISImageService', e);
    }
    
    return jsArcGISImageService;
}


export async function buildDotNetIArcGISImageServiceGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIArcGISImageService: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.defaultMosaicRule)) {
        let { buildDotNetMosaicRule } = await import('./mosaicRule');
        dotNetIArcGISImageService.defaultMosaicRule = await buildDotNetMosaicRule(jsObject.defaultMosaicRule);
    }
    if (hasValue(jsObject.fields)) {
        let { buildDotNetField } = await import('./field');
        dotNetIArcGISImageService.fields = jsObject.fields.map(i => buildDotNetField(i));
    }
    if (hasValue(jsObject.fieldsIndex)) {
        let { buildDotNetFieldsIndex } = await import('./fieldsIndex');
        dotNetIArcGISImageService.fieldsIndex = await buildDotNetFieldsIndex(jsObject.fieldsIndex);
    }
    if (hasValue(jsObject.mosaicRule)) {
        let { buildDotNetMosaicRule } = await import('./mosaicRule');
        dotNetIArcGISImageService.mosaicRule = await buildDotNetMosaicRule(jsObject.mosaicRule);
    }
    if (hasValue(jsObject.multidimensionalSubset)) {
        let { buildDotNetMultidimensionalSubset } = await import('./multidimensionalSubset');
        dotNetIArcGISImageService.multidimensionalSubset = await buildDotNetMultidimensionalSubset(jsObject.multidimensionalSubset);
    }
    if (hasValue(jsObject.rasterFields)) {
        let { buildDotNetField } = await import('./field');
        dotNetIArcGISImageService.rasterFields = jsObject.rasterFields.map(i => buildDotNetField(i));
    }
    if (hasValue(jsObject.serviceRasterInfo)) {
        let { buildDotNetRasterInfo } = await import('./rasterInfo');
        dotNetIArcGISImageService.serviceRasterInfo = await buildDotNetRasterInfo(jsObject.serviceRasterInfo);
    }
    if (hasValue(jsObject.bandIds)) {
        dotNetIArcGISImageService.bandIds = jsObject.bandIds;
    }
    if (hasValue(jsObject.capabilities)) {
        dotNetIArcGISImageService.capabilities = jsObject.capabilities;
    }
    if (hasValue(jsObject.compressionQuality)) {
        dotNetIArcGISImageService.compressionQuality = jsObject.compressionQuality;
    }
    if (hasValue(jsObject.compressionTolerance)) {
        dotNetIArcGISImageService.compressionTolerance = jsObject.compressionTolerance;
    }
    if (hasValue(jsObject.copyright)) {
        dotNetIArcGISImageService.copyright = jsObject.copyright;
    }
    if (hasValue(jsObject.definitionExpression)) {
        dotNetIArcGISImageService.definitionExpression = jsObject.definitionExpression;
    }
    if (hasValue(jsObject.format)) {
        dotNetIArcGISImageService.format = jsObject.format;
    }
    if (hasValue(jsObject.hasMultidimensions)) {
        dotNetIArcGISImageService.hasMultidimensions = jsObject.hasMultidimensions;
    }
    if (hasValue(jsObject.imageMaxHeight)) {
        dotNetIArcGISImageService.imageMaxHeight = jsObject.imageMaxHeight;
    }
    if (hasValue(jsObject.imageMaxWidth)) {
        dotNetIArcGISImageService.imageMaxWidth = jsObject.imageMaxWidth;
    }
    if (hasValue(jsObject.interpolation)) {
        dotNetIArcGISImageService.interpolation = jsObject.interpolation;
    }
    if (hasValue(jsObject.multidimensionalInfo)) {
        dotNetIArcGISImageService.multidimensionalInfo = jsObject.multidimensionalInfo;
    }
    if (hasValue(jsObject.noData)) {
        dotNetIArcGISImageService.noData = jsObject.noData;
    }
    if (hasValue(jsObject.noDataInterpretation)) {
        dotNetIArcGISImageService.noDataInterpretation = jsObject.noDataInterpretation;
    }
    if (hasValue(jsObject.objectIdField)) {
        dotNetIArcGISImageService.objectIdField = jsObject.objectIdField;
    }
    if (hasValue(jsObject.pixelFilter)) {
        dotNetIArcGISImageService.pixelFilter = jsObject.pixelFilter;
    }
    if (hasValue(jsObject.pixelType)) {
        dotNetIArcGISImageService.pixelType = jsObject.pixelType;
    }
    if (hasValue(jsObject.rasterFunction)) {
        dotNetIArcGISImageService.rasterFunction = jsObject.rasterFunction;
    }
    if (hasValue(jsObject.rasterFunctionInfos)) {
        dotNetIArcGISImageService.rasterFunctionInfos = jsObject.rasterFunctionInfos;
    }
    if (hasValue(jsObject.renderer)) {
        dotNetIArcGISImageService.renderer = jsObject.renderer;
    }
    if (hasValue(jsObject.renderingRule)) {
        dotNetIArcGISImageService.renderingRule = jsObject.renderingRule;
    }
    if (hasValue(jsObject.sourceType)) {
        dotNetIArcGISImageService.sourceType = jsObject.sourceType;
    }
    if (hasValue(jsObject.spatialReference)) {
        dotNetIArcGISImageService.spatialReference = jsObject.spatialReference;
    }
    if (hasValue(jsObject.url)) {
        dotNetIArcGISImageService.url = jsObject.url;
    }
    if (hasValue(jsObject.version)) {
        dotNetIArcGISImageService.version = jsObject.version;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetIArcGISImageService.id = k;
                break;
            }
        }
    }

    return dotNetIArcGISImageService;
}

