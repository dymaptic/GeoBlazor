// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import supportExpressionInfo from '@arcgis/core/layers/support/ExpressionInfo';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetSupportExpressionInfo } from './supportExpressionInfo';

export async function buildJsSupportExpressionInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.expression)) {
        properties.expression = dotNetObject.expression;
    }
    if (hasValue(dotNetObject.returnType)) {
        properties.returnType = dotNetObject.returnType;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    let jssupportExpressionInfo = new supportExpressionInfo(properties);
    
    jsObjectRefs[dotNetObject.id] = jssupportExpressionInfo;
    arcGisObjectRefs[dotNetObject.id] = jssupportExpressionInfo;
    
    return jssupportExpressionInfo;
}


export async function buildDotNetSupportExpressionInfoGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSupportExpressionInfo: any = {};
    
    if (hasValue(jsObject.expression)) {
        dotNetSupportExpressionInfo.expression = jsObject.expression;
    }
    
    if (hasValue(jsObject.returnType)) {
        dotNetSupportExpressionInfo.returnType = removeCircularReferences(jsObject.returnType);
    }
    
    if (hasValue(jsObject.title)) {
        dotNetSupportExpressionInfo.title = jsObject.title;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSupportExpressionInfo.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetSupportExpressionInfo.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetSupportExpressionInfo.id)) {
        jsObjectRefs[dotNetSupportExpressionInfo.id] ??= jsObject;
        arcGisObjectRefs[dotNetSupportExpressionInfo.id] ??= jsObject;
    }

    return dotNetSupportExpressionInfo;
}

