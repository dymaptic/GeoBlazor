// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetAgeRendererResult } from './ageRendererResult';

export async function buildJsAgeRendererResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsAgeRendererResult: any = {};
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsClassBreaksRenderer } = await import('./classBreaksRenderer');
        jsAgeRendererResult.renderer = await buildJsClassBreaksRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.visualVariable)) {
        let { buildJsColorVariable } = await import('./colorVariable');
        jsAgeRendererResult.visualVariable = await buildJsColorVariable(dotNetObject.visualVariable) as any;
    }

    if (hasValue(dotNetObject.basemapId)) {
        jsAgeRendererResult.basemapId = dotNetObject.basemapId;
    }
    if (hasValue(dotNetObject.basemapTheme)) {
        jsAgeRendererResult.basemapTheme = dotNetObject.basemapTheme;
    }
    if (hasValue(dotNetObject.colorScheme)) {
        jsAgeRendererResult.colorScheme = dotNetObject.colorScheme;
    }
    if (hasValue(dotNetObject.defaultValuesUsed)) {
        jsAgeRendererResult.defaultValuesUsed = dotNetObject.defaultValuesUsed;
    }
    if (hasValue(dotNetObject.statistics)) {
        jsAgeRendererResult.statistics = dotNetObject.statistics;
    }
    if (hasValue(dotNetObject.unit)) {
        jsAgeRendererResult.unit = dotNetObject.unit;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsAgeRendererResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsAgeRendererResult;
    
    let dnInstantiatedObject = await buildDotNetAgeRendererResult(jsAgeRendererResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for AgeRendererResult', e);
    }
    
    return jsAgeRendererResult;
}

export async function buildDotNetAgeRendererResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAgeRendererResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.renderer)) {
            let { buildDotNetClassBreaksRenderer } = await import('./classBreaksRenderer');
            dotNetAgeRendererResult.renderer = await buildDotNetClassBreaksRenderer(jsObject.renderer);
        }
        if (hasValue(jsObject.visualVariable)) {
            let { buildDotNetColorVariable } = await import('./colorVariable');
            dotNetAgeRendererResult.visualVariable = await buildDotNetColorVariable(jsObject.visualVariable);
        }
    if (hasValue(jsObject.basemapId)) {
        dotNetAgeRendererResult.basemapId = jsObject.basemapId;
    }
    if (hasValue(jsObject.basemapTheme)) {
        dotNetAgeRendererResult.basemapTheme = jsObject.basemapTheme;
    }
    if (hasValue(jsObject.colorScheme)) {
        dotNetAgeRendererResult.colorScheme = jsObject.colorScheme;
    }
    if (hasValue(jsObject.defaultValuesUsed)) {
        dotNetAgeRendererResult.defaultValuesUsed = jsObject.defaultValuesUsed;
    }
    if (hasValue(jsObject.statistics)) {
        dotNetAgeRendererResult.statistics = jsObject.statistics;
    }
    if (hasValue(jsObject.unit)) {
        dotNetAgeRendererResult.unit = jsObject.unit;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetAgeRendererResult.id = k;
                break;
            }
        }
    }

    return dotNetAgeRendererResult;
}

