// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSceneLayerApplyEditsEdits } from './sceneLayerApplyEditsEdits';

export async function buildJsSceneLayerApplyEditsEditsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSceneLayerApplyEditsEdits: any = {}
    if (hasValue(dotNetObject.addFeatures)) {
        let { buildJsGraphic } = await import('./graphic');
        jsSceneLayerApplyEditsEdits.addFeatures = dotNetObject.addFeatures.map(i => buildJsGraphic(i)) as any;
    }
    if (hasValue(dotNetObject.graphicCollectionDeleteFeatures)) {
        let { buildJsGraphic } = await import('./graphic');
        jsSceneLayerApplyEditsEdits.deleteFeatures = dotNetObject.graphicCollectionDeleteFeatures.map(i => buildJsGraphic(i)) as any;
    }
    else if (hasValue(dotNetObject.graphicCollectionDeleteFeatures)) {
        let { buildJsGraphic } = await import('./graphic');
        jsSceneLayerApplyEditsEdits.deleteFeatures = dotNetObject.graphicCollectionDeleteFeatures.map(i => buildJsGraphic(i)) as any;
    }
    else if (hasValue(dotNetObject.featureIdentifierCollectionDeleteFeatures)) {
        jsSceneLayerApplyEditsEdits.deleteFeatures = dotNetObject.graphic;
    }
    if (hasValue(dotNetObject.updateFeatures)) {
        let { buildJsGraphic } = await import('./graphic');
        jsSceneLayerApplyEditsEdits.updateFeatures = dotNetObject.updateFeatures.map(i => buildJsGraphic(i)) as any;
    }

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsSceneLayerApplyEditsEdits);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSceneLayerApplyEditsEdits;
    
    let dnInstantiatedObject = await buildDotNetSceneLayerApplyEditsEdits(jsSceneLayerApplyEditsEdits);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SceneLayerApplyEditsEdits', e);
    }
    
    return jsSceneLayerApplyEditsEdits;
}

export async function buildDotNetSceneLayerApplyEditsEditsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSceneLayerApplyEditsEdits: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.addFeatures)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetSceneLayerApplyEditsEdits.addFeatures = jsObject.addFeatures.map(i => buildDotNetGraphic(i, layerId, viewId));
        }
        if (hasValue(jsObject.deleteFeatures)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetSceneLayerApplyEditsEdits.deleteFeatures = jsObject.deleteFeatures.map(i => buildDotNetGraphic(i, layerId, viewId));
        }
        if (hasValue(jsObject.updateFeatures)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetSceneLayerApplyEditsEdits.updateFeatures = jsObject.updateFeatures.map(i => buildDotNetGraphic(i, layerId, viewId));
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSceneLayerApplyEditsEdits.id = k;
                break;
            }
        }
    }

    return dotNetSceneLayerApplyEditsEdits;
}

