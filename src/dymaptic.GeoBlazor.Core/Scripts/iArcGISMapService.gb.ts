// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetIArcGISMapService } from './iArcGISMapService';

export async function buildJsIArcGISMapServiceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsArcGISMapService = new ArcGISMapService();
    if (hasValue(dotNetObject.fullExtent)) {
        let { buildJsExtent } = await import('./extent');
        jsArcGISMapService.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;
    }

    if (hasValue(dotNetObject.copyright)) {
        jsArcGISMapService.copyright = dotNetObject.copyright;
    }
    if (hasValue(dotNetObject.legendEnabled)) {
        jsArcGISMapService.legendEnabled = dotNetObject.legendEnabled;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsArcGISMapService);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsArcGISMapService;
    
    let dnInstantiatedObject = await buildDotNetIArcGISMapService(jsArcGISMapService);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for IArcGISMapService', e);
    }
    
    return jsArcGISMapService;
}

export async function buildDotNetIArcGISMapServiceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIArcGISMapService: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.fullExtent)) {
            let { buildDotNetExtent } = await import('./extent');
            dotNetIArcGISMapService.fullExtent = buildDotNetExtent(jsObject.fullExtent);
        }
        if (hasValue(jsObject.spatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetIArcGISMapService.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference);
        }
        if (hasValue(jsObject.capabilities)) {
            dotNetIArcGISMapService.capabilities = jsObject.capabilities;
        }
        if (hasValue(jsObject.copyright)) {
            dotNetIArcGISMapService.copyright = jsObject.copyright;
        }
        if (hasValue(jsObject.legendEnabled)) {
            dotNetIArcGISMapService.legendEnabled = jsObject.legendEnabled;
        }
        if (hasValue(jsObject.version)) {
            dotNetIArcGISMapService.version = jsObject.version;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetIArcGISMapService.id = k;
                break;
            }
        }
    }

    return dotNetIArcGISMapService;
}

