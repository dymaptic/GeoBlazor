// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetServiceAreaParametersAttributeParameterValue } from './serviceAreaParametersAttributeParameterValue';

export async function buildJsServiceAreaParametersAttributeParameterValueGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsServiceAreaParametersAttributeParameterValue: any = {};

    if (hasValue(dotNetObject.attributeName)) {
        jsServiceAreaParametersAttributeParameterValue.attributeName = dotNetObject.attributeName;
    }
    if (hasValue(dotNetObject.parameterName)) {
        jsServiceAreaParametersAttributeParameterValue.parameterName = dotNetObject.parameterName;
    }
    if (hasValue(dotNetObject.value)) {
        jsServiceAreaParametersAttributeParameterValue.value = dotNetObject.value;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsServiceAreaParametersAttributeParameterValue);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsServiceAreaParametersAttributeParameterValue;
    
    return jsServiceAreaParametersAttributeParameterValue;
}


export async function buildDotNetServiceAreaParametersAttributeParameterValueGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetServiceAreaParametersAttributeParameterValue: any = {};
    
    if (hasValue(jsObject.attributeName)) {
        dotNetServiceAreaParametersAttributeParameterValue.attributeName = jsObject.attributeName;
    }
    
    if (hasValue(jsObject.parameterName)) {
        dotNetServiceAreaParametersAttributeParameterValue.parameterName = jsObject.parameterName;
    }
    
    if (hasValue(jsObject.value)) {
        dotNetServiceAreaParametersAttributeParameterValue.value = jsObject.value;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetServiceAreaParametersAttributeParameterValue.id = geoBlazorId;
    }

    return dotNetServiceAreaParametersAttributeParameterValue;
}

