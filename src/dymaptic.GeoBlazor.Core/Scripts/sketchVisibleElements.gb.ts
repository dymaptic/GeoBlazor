// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetSketchVisibleElements } from './sketchVisibleElements';

export async function buildJsSketchVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSketchVisibleElements: any = {};
    if (hasValue(dotNetObject.createTools)) {
        let { buildJsVisibleElementsCreateTools } = await import('./visibleElementsCreateTools');
        jsSketchVisibleElements.createTools = await buildJsVisibleElementsCreateTools(dotNetObject.createTools, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.selectionTools)) {
        let { buildJsVisibleElementsSelectionTools } = await import('./visibleElementsSelectionTools');
        jsSketchVisibleElements.selectionTools = await buildJsVisibleElementsSelectionTools(dotNetObject.selectionTools, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.snappingControlsElements)) {
        let { buildJsSketchVisibleElementsSnappingControlsElements } = await import('./sketchVisibleElementsSnappingControlsElements');
        jsSketchVisibleElements.snappingControlsElements = await buildJsSketchVisibleElementsSnappingControlsElements(dotNetObject.snappingControlsElements, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.duplicateButton)) {
        jsSketchVisibleElements.duplicateButton = dotNetObject.duplicateButton;
    }
    if (hasValue(dotNetObject.labelsToggle)) {
        jsSketchVisibleElements.labelsToggle = dotNetObject.labelsToggle;
    }
    if (hasValue(dotNetObject.settingsMenu)) {
        jsSketchVisibleElements.settingsMenu = dotNetObject.settingsMenu;
    }
    if (hasValue(dotNetObject.snappingControls)) {
        jsSketchVisibleElements.snappingControls = dotNetObject.snappingControls;
    }
    if (hasValue(dotNetObject.tooltipsToggle)) {
        jsSketchVisibleElements.tooltipsToggle = dotNetObject.tooltipsToggle;
    }
    if (hasValue(dotNetObject.undoRedoMenu)) {
        jsSketchVisibleElements.undoRedoMenu = dotNetObject.undoRedoMenu;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSketchVisibleElements);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSketchVisibleElements;
    
    try {
        let { buildDotNetSketchVisibleElements } = await import('./sketchVisibleElements');
        let dnInstantiatedObject = await buildDotNetSketchVisibleElements(jsSketchVisibleElements, layerId, viewId);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type SketchVisibleElements detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SketchVisibleElements', e);
    }
    
    return jsSketchVisibleElements;
}


export async function buildDotNetSketchVisibleElementsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSketchVisibleElements: any = {};
    
    if (hasValue(jsObject.createTools)) {
        let { buildDotNetVisibleElementsCreateTools } = await import('./visibleElementsCreateTools');
        dotNetSketchVisibleElements.createTools = await buildDotNetVisibleElementsCreateTools(jsObject.createTools, layerId, viewId);
    }
    
    if (hasValue(jsObject.selectionTools)) {
        let { buildDotNetVisibleElementsSelectionTools } = await import('./visibleElementsSelectionTools');
        dotNetSketchVisibleElements.selectionTools = await buildDotNetVisibleElementsSelectionTools(jsObject.selectionTools, layerId, viewId);
    }
    
    if (hasValue(jsObject.snappingControlsElements)) {
        let { buildDotNetSketchVisibleElementsSnappingControlsElements } = await import('./sketchVisibleElementsSnappingControlsElements');
        dotNetSketchVisibleElements.snappingControlsElements = await buildDotNetSketchVisibleElementsSnappingControlsElements(jsObject.snappingControlsElements, layerId, viewId);
    }
    
    if (hasValue(jsObject.duplicateButton)) {
        dotNetSketchVisibleElements.duplicateButton = jsObject.duplicateButton;
    }
    
    if (hasValue(jsObject.labelsToggle)) {
        dotNetSketchVisibleElements.labelsToggle = jsObject.labelsToggle;
    }
    
    if (hasValue(jsObject.settingsMenu)) {
        dotNetSketchVisibleElements.settingsMenu = jsObject.settingsMenu;
    }
    
    if (hasValue(jsObject.snappingControls)) {
        dotNetSketchVisibleElements.snappingControls = jsObject.snappingControls;
    }
    
    if (hasValue(jsObject.tooltipsToggle)) {
        dotNetSketchVisibleElements.tooltipsToggle = jsObject.tooltipsToggle;
    }
    
    if (hasValue(jsObject.undoRedoMenu)) {
        dotNetSketchVisibleElements.undoRedoMenu = jsObject.undoRedoMenu;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSketchVisibleElements.id = geoBlazorId;
    }

    return dotNetSketchVisibleElements;
}

