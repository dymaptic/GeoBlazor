// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetBasemapLayerListVisibleElements } from './basemapLayerListVisibleElements';

export async function buildJsBasemapLayerListVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsBasemapLayerListVisibleElements: any = {};

    if (hasValue(dotNetObject.baseLayers)) {
        jsBasemapLayerListVisibleElements.baseLayers = dotNetObject.baseLayers;
    }
    if (hasValue(dotNetObject.closeButton)) {
        jsBasemapLayerListVisibleElements.closeButton = dotNetObject.closeButton;
    }
    if (hasValue(dotNetObject.collapseButton)) {
        jsBasemapLayerListVisibleElements.collapseButton = dotNetObject.collapseButton;
    }
    if (hasValue(dotNetObject.editTitleButton)) {
        jsBasemapLayerListVisibleElements.editTitleButton = dotNetObject.editTitleButton;
    }
    if (hasValue(dotNetObject.errors)) {
        jsBasemapLayerListVisibleElements.errors = dotNetObject.errors;
    }
    if (hasValue(dotNetObject.filter)) {
        jsBasemapLayerListVisibleElements.filter = dotNetObject.filter;
    }
    if (hasValue(dotNetObject.flow)) {
        jsBasemapLayerListVisibleElements.flow = dotNetObject.flow;
    }
    if (hasValue(dotNetObject.heading)) {
        jsBasemapLayerListVisibleElements.heading = dotNetObject.heading;
    }
    if (hasValue(dotNetObject.referenceLayers)) {
        jsBasemapLayerListVisibleElements.referenceLayers = dotNetObject.referenceLayers;
    }
    if (hasValue(dotNetObject.statusIndicators)) {
        jsBasemapLayerListVisibleElements.statusIndicators = dotNetObject.statusIndicators;
    }
    if (hasValue(dotNetObject.temporaryLayerIndicators)) {
        jsBasemapLayerListVisibleElements.temporaryLayerIndicators = dotNetObject.temporaryLayerIndicators;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsBasemapLayerListVisibleElements);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsBasemapLayerListVisibleElements;
    
    let { buildDotNetBasemapLayerListVisibleElements } = await import('./basemapLayerListVisibleElements');
    let dnInstantiatedObject = await buildDotNetBasemapLayerListVisibleElements(jsBasemapLayerListVisibleElements);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type BasemapLayerListVisibleElements detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BasemapLayerListVisibleElements', e);
    }
    
    return jsBasemapLayerListVisibleElements;
}


export async function buildDotNetBasemapLayerListVisibleElementsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBasemapLayerListVisibleElements: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.baseLayers)) {
        dotNetBasemapLayerListVisibleElements.baseLayers = jsObject.baseLayers;
    }
    if (hasValue(jsObject.closeButton)) {
        dotNetBasemapLayerListVisibleElements.closeButton = jsObject.closeButton;
    }
    if (hasValue(jsObject.collapseButton)) {
        dotNetBasemapLayerListVisibleElements.collapseButton = jsObject.collapseButton;
    }
    if (hasValue(jsObject.editTitleButton)) {
        dotNetBasemapLayerListVisibleElements.editTitleButton = jsObject.editTitleButton;
    }
    if (hasValue(jsObject.errors)) {
        dotNetBasemapLayerListVisibleElements.errors = jsObject.errors;
    }
    if (hasValue(jsObject.filter)) {
        dotNetBasemapLayerListVisibleElements.filter = jsObject.filter;
    }
    if (hasValue(jsObject.flow)) {
        dotNetBasemapLayerListVisibleElements.flow = jsObject.flow;
    }
    if (hasValue(jsObject.heading)) {
        dotNetBasemapLayerListVisibleElements.heading = jsObject.heading;
    }
    if (hasValue(jsObject.referenceLayers)) {
        dotNetBasemapLayerListVisibleElements.referenceLayers = jsObject.referenceLayers;
    }
    if (hasValue(jsObject.statusIndicators)) {
        dotNetBasemapLayerListVisibleElements.statusIndicators = jsObject.statusIndicators;
    }
    if (hasValue(jsObject.temporaryLayerIndicators)) {
        dotNetBasemapLayerListVisibleElements.temporaryLayerIndicators = jsObject.temporaryLayerIndicators;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetBasemapLayerListVisibleElements.id = geoBlazorId;
    }

    return dotNetBasemapLayerListVisibleElements;
}

