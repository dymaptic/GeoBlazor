// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import SynthesizeAssociationGeometriesParameters from '@arcgis/core/rest/networks/support/SynthesizeAssociationGeometriesParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSynthesizeAssociationGeometriesParameters } from './synthesizeAssociationGeometriesParameters';

export async function buildJsSynthesizeAssociationGeometriesParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.extent)) {
        let { buildJsExtent } = await import('./extent');
        properties.extent = buildJsExtent(dotNetObject.extent) as any;
    }

    if (hasValue(dotNetObject.gdbVersion)) {
        properties.gdbVersion = dotNetObject.gdbVersion;
    }
    if (hasValue(dotNetObject.maxGeometryCount)) {
        properties.maxGeometryCount = dotNetObject.maxGeometryCount;
    }
    if (hasValue(dotNetObject.moment)) {
        properties.moment = dotNetObject.moment;
    }
    if (hasValue(dotNetObject.outSpatialReference)) {
        properties.outSpatialReference = dotNetObject.outSpatialReference;
    }
    if (hasValue(dotNetObject.returnAttachmentAssociations)) {
        properties.returnAttachmentAssociations = dotNetObject.returnAttachmentAssociations;
    }
    if (hasValue(dotNetObject.returnConnectivityAssociations)) {
        properties.returnConnectivityAssociations = dotNetObject.returnConnectivityAssociations;
    }
    if (hasValue(dotNetObject.returnContainmentAssociations)) {
        properties.returnContainmentAssociations = dotNetObject.returnContainmentAssociations;
    }
    let jsSynthesizeAssociationGeometriesParameters = new SynthesizeAssociationGeometriesParameters(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSynthesizeAssociationGeometriesParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSynthesizeAssociationGeometriesParameters;
    
    let dnInstantiatedObject = await buildDotNetSynthesizeAssociationGeometriesParameters(jsSynthesizeAssociationGeometriesParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SynthesizeAssociationGeometriesParameters', e);
    }
    
    return jsSynthesizeAssociationGeometriesParameters;
}

export async function buildDotNetSynthesizeAssociationGeometriesParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSynthesizeAssociationGeometriesParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.extent)) {
            let { buildDotNetExtent } = await import('./extent');
            dotNetSynthesizeAssociationGeometriesParameters.extent = buildDotNetExtent(jsObject.extent);
        }
    if (hasValue(jsObject.gdbVersion)) {
        dotNetSynthesizeAssociationGeometriesParameters.gdbVersion = jsObject.gdbVersion;
    }
    if (hasValue(jsObject.maxGeometryCount)) {
        dotNetSynthesizeAssociationGeometriesParameters.maxGeometryCount = jsObject.maxGeometryCount;
    }
    if (hasValue(jsObject.moment)) {
        dotNetSynthesizeAssociationGeometriesParameters.moment = jsObject.moment;
    }
    if (hasValue(jsObject.outSpatialReference)) {
        dotNetSynthesizeAssociationGeometriesParameters.outSpatialReference = jsObject.outSpatialReference;
    }
    if (hasValue(jsObject.returnAttachmentAssociations)) {
        dotNetSynthesizeAssociationGeometriesParameters.returnAttachmentAssociations = jsObject.returnAttachmentAssociations;
    }
    if (hasValue(jsObject.returnConnectivityAssociations)) {
        dotNetSynthesizeAssociationGeometriesParameters.returnConnectivityAssociations = jsObject.returnConnectivityAssociations;
    }
    if (hasValue(jsObject.returnContainmentAssociations)) {
        dotNetSynthesizeAssociationGeometriesParameters.returnContainmentAssociations = jsObject.returnContainmentAssociations;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSynthesizeAssociationGeometriesParameters.id = k;
                break;
            }
        }
    }

    return dotNetSynthesizeAssociationGeometriesParameters;
}

