// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import TextElement from '@arcgis/core/form/elements/TextElement';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetTextElement } from './textElement';

export async function buildJsTextElementGenerated(dotNetObject: any): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.description)) {
        properties.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.text)) {
        properties.text = dotNetObject.text;
    }
    if (hasValue(dotNetObject.textFormat)) {
        properties.textFormat = dotNetObject.textFormat;
    }
    if (hasValue(dotNetObject.visibilityExpression)) {
        properties.visibilityExpression = dotNetObject.visibilityExpression;
    }
    let jsTextElement = new TextElement(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsTextElement);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTextElement;
    
    try {
        let { buildDotNetTextElement } = await import('./textElement');
        let dnInstantiatedObject = await buildDotNetTextElement(jsTextElement);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type TextElement detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TextElement', e);
    }
    
    return jsTextElement;
}


export async function buildDotNetTextElementGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTextElement: any = {};
    
    if (hasValue(jsObject.description)) {
        dotNetTextElement.description = jsObject.description;
    }
    
    if (hasValue(jsObject.label)) {
        dotNetTextElement.label = jsObject.label;
    }
    
    if (hasValue(jsObject.text)) {
        dotNetTextElement.text = jsObject.text;
    }
    
    if (hasValue(jsObject.textFormat)) {
        dotNetTextElement.textFormat = jsObject.textFormat;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetTextElement.type = jsObject.type;
    }
    
    if (hasValue(jsObject.visibilityExpression)) {
        dotNetTextElement.visibilityExpression = jsObject.visibilityExpression;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetTextElement.id = geoBlazorId;
    }

    return dotNetTextElement;
}

