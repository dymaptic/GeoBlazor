// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import TextElement from '@arcgis/core/form/elements/TextElement';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetTextElement } from './textElement';

export async function buildJsTextElementGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.description)) {
        properties.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.text)) {
        properties.text = dotNetObject.text;
    }
    if (hasValue(dotNetObject.textFormat)) {
        properties.textFormat = dotNetObject.textFormat;
    }
    if (hasValue(dotNetObject.visibilityExpression)) {
        properties.visibilityExpression = dotNetObject.visibilityExpression;
    }
    let jsTextElement = new TextElement(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsTextElement);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTextElement;
    
    return jsTextElement;
}


export async function buildDotNetTextElementGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTextElement: any = {};
    
    if (hasValue(jsObject.description)) {
        dotNetTextElement.description = jsObject.description;
    }
    
    if (hasValue(jsObject.label)) {
        dotNetTextElement.label = jsObject.label;
    }
    
    if (hasValue(jsObject.text)) {
        dotNetTextElement.text = jsObject.text;
    }
    
    if (hasValue(jsObject.textFormat)) {
        dotNetTextElement.textFormat = removeCircularReferences(jsObject.textFormat);
    }
    
    if (hasValue(jsObject.type)) {
        dotNetTextElement.type = removeCircularReferences(jsObject.type);
    }
    
    if (hasValue(jsObject.visibilityExpression)) {
        dotNetTextElement.visibilityExpression = jsObject.visibilityExpression;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetTextElement.id = geoBlazorId;
    }

    return dotNetTextElement;
}

