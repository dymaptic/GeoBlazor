// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetUnivariateColorSizeCreateVisualVariablesParamsColorOptions } from './univariateColorSizeCreateVisualVariablesParamsColorOptions';
import univariateColorSizeCreateVisualVariablesParamsColorOptions = __esri.univariateColorSizeCreateVisualVariablesParamsColorOptions;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsUnivariateColorSizeCreateVisualVariablesParamsColorOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsunivariateColorSizeCreateVisualVariablesParamsColorOptions: any = {}

    if (hasValue(dotNetObject.colorScheme)) {
        jsunivariateColorSizeCreateVisualVariablesParamsColorOptions.colorScheme = dotNetObject.colorScheme;
    }
    if (hasValue(dotNetObject.isContinuous)) {
        jsunivariateColorSizeCreateVisualVariablesParamsColorOptions.isContinuous = dotNetObject.isContinuous;
    }
    if (hasValue(dotNetObject.legendOptions)) {
        jsunivariateColorSizeCreateVisualVariablesParamsColorOptions.legendOptions = dotNetObject.legendOptions;
    }
    if (hasValue(dotNetObject.theme)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedTheme } = dotNetObject.theme;
        jsunivariateColorSizeCreateVisualVariablesParamsColorOptions.theme = sanitizedTheme;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsunivariateColorSizeCreateVisualVariablesParamsColorOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsunivariateColorSizeCreateVisualVariablesParamsColorOptions;
    
    let dnInstantiatedObject = await buildDotNetUnivariateColorSizeCreateVisualVariablesParamsColorOptions(jsunivariateColorSizeCreateVisualVariablesParamsColorOptions);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for UnivariateColorSizeCreateVisualVariablesParamsColorOptions', e);
    }
    
    return jsunivariateColorSizeCreateVisualVariablesParamsColorOptions;
}

export async function buildDotNetUnivariateColorSizeCreateVisualVariablesParamsColorOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUnivariateColorSizeCreateVisualVariablesParamsColorOptions: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.colorScheme)) {
            dotNetUnivariateColorSizeCreateVisualVariablesParamsColorOptions.colorScheme = jsObject.colorScheme;
        }
        if (hasValue(jsObject.isContinuous)) {
            dotNetUnivariateColorSizeCreateVisualVariablesParamsColorOptions.isContinuous = jsObject.isContinuous;
        }
        if (hasValue(jsObject.legendOptions)) {
            dotNetUnivariateColorSizeCreateVisualVariablesParamsColorOptions.legendOptions = jsObject.legendOptions;
        }
        if (hasValue(jsObject.theme)) {
            dotNetUnivariateColorSizeCreateVisualVariablesParamsColorOptions.theme = jsObject.theme;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetUnivariateColorSizeCreateVisualVariablesParamsColorOptions.id = k;
                break;
            }
        }
    }

    return dotNetUnivariateColorSizeCreateVisualVariablesParamsColorOptions;
}

