// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetValuePickerSliderVisibleElements } from './valuePickerSliderVisibleElements';

export async function buildJsValuePickerSliderVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsValuePickerSliderVisibleElements: any = {};

    if (hasValue(dotNetObject.thumbTooltip)) {
        jsValuePickerSliderVisibleElements.thumbTooltip = dotNetObject.thumbTooltip;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsValuePickerSliderVisibleElements);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsValuePickerSliderVisibleElements;
    
    return jsValuePickerSliderVisibleElements;
}


export async function buildDotNetValuePickerSliderVisibleElementsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetValuePickerSliderVisibleElements: any = {};
    
    if (hasValue(jsObject.thumbTooltip)) {
        dotNetValuePickerSliderVisibleElements.thumbTooltip = jsObject.thumbTooltip;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetValuePickerSliderVisibleElements.id = geoBlazorId;
    }

    return dotNetValuePickerSliderVisibleElements;
}

