// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import dotDensity = __esri.dotDensity;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class DotDensityGenerated implements IPropertyWrapper {
    public component: dotDensity;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: dotDensity) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async createRenderer(parameters: any): Promise<any> {
        let { buildJsDotDensityCreateRendererParams } = await import('./dotDensityCreateRendererParams');
        let jsparameters = await buildJsDotDensityCreateRendererParams(parameters, this.layerId, this.viewId) as any;
        return await this.component.createRenderer(jsparameters);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsDotDensityGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsdotDensity: any = {};


    let { default: DotDensityWrapper } = await import('./dotDensity');
    let dotDensityWrapper = new DotDensityWrapper(jsdotDensity);
    dotDensityWrapper.geoBlazorId = dotNetObject.id;
    dotDensityWrapper.viewId = viewId;
    dotDensityWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(dotDensityWrapper);
    jsObjectRefs[dotNetObject.id] = dotDensityWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsdotDensity;
    let { buildDotNetDotDensity } = await import('./dotDensity');
    let dnInstantiatedObject = await buildDotNetDotDensity(jsdotDensity);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DotDensity', e);
    }
    
    return jsdotDensity;
}

export async function buildDotNetDotDensityGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDotDensity: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetDotDensity.id = k;
                break;
            }
        }
    }

    return dotNetDotDensity;
}

