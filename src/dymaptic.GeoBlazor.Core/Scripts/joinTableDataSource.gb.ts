// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetJoinTableDataSource } from './joinTableDataSource';

export async function buildJsJoinTableDataSourceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsJoinTableDataSource: any = {};

    if (hasValue(dotNetObject.joinType)) {
        jsJoinTableDataSource.joinType = dotNetObject.joinType;
    }
    if (hasValue(dotNetObject.leftTableKey)) {
        jsJoinTableDataSource.leftTableKey = dotNetObject.leftTableKey;
    }
    if (hasValue(dotNetObject.leftTableSource)) {
        jsJoinTableDataSource.leftTableSource = dotNetObject.leftTableSource;
    }
    if (hasValue(dotNetObject.rightTableKey)) {
        jsJoinTableDataSource.rightTableKey = dotNetObject.rightTableKey;
    }
    if (hasValue(dotNetObject.rightTableSource)) {
        jsJoinTableDataSource.rightTableSource = dotNetObject.rightTableSource;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsJoinTableDataSource);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsJoinTableDataSource;
    
    let { buildDotNetJoinTableDataSource } = await import('./joinTableDataSource');
    let dnInstantiatedObject = await buildDotNetJoinTableDataSource(jsJoinTableDataSource);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type JoinTableDataSource detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for JoinTableDataSource', e);
    }
    
    return jsJoinTableDataSource;
}


export async function buildDotNetJoinTableDataSourceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetJoinTableDataSource: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.joinType)) {
        dotNetJoinTableDataSource.joinType = jsObject.joinType;
    }
    if (hasValue(jsObject.leftTableKey)) {
        dotNetJoinTableDataSource.leftTableKey = jsObject.leftTableKey;
    }
    if (hasValue(jsObject.leftTableSource)) {
        dotNetJoinTableDataSource.leftTableSource = jsObject.leftTableSource;
    }
    if (hasValue(jsObject.rightTableKey)) {
        dotNetJoinTableDataSource.rightTableKey = jsObject.rightTableKey;
    }
    if (hasValue(jsObject.rightTableSource)) {
        dotNetJoinTableDataSource.rightTableSource = jsObject.rightTableSource;
    }
    if (hasValue(jsObject.type)) {
        dotNetJoinTableDataSource.type = jsObject.type;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetJoinTableDataSource.id = geoBlazorId;
    }

    return dotNetJoinTableDataSource;
}

