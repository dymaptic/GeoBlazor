// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import JoinTableDataSource = __esri.JoinTableDataSource;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class JoinTableDataSourceGenerated implements IPropertyWrapper {
    public component: JoinTableDataSource;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: JoinTableDataSource) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsJoinTableDataSourceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsJoinTableDataSource: any = {}

    if (hasValue(dotNetObject.joinType)) {
        jsJoinTableDataSource.joinType = dotNetObject.joinType;
    }
    if (hasValue(dotNetObject.leftTableKey)) {
        jsJoinTableDataSource.leftTableKey = dotNetObject.leftTableKey;
    }
    if (hasValue(dotNetObject.leftTableSource)) {
        jsJoinTableDataSource.leftTableSource = dotNetObject.leftTableSource;
    }
    if (hasValue(dotNetObject.rightTableKey)) {
        jsJoinTableDataSource.rightTableKey = dotNetObject.rightTableKey;
    }
    if (hasValue(dotNetObject.rightTableSource)) {
        jsJoinTableDataSource.rightTableSource = dotNetObject.rightTableSource;
    }
    let { default: JoinTableDataSourceWrapper } = await import('./joinTableDataSource');
    let joinTableDataSourceWrapper = new JoinTableDataSourceWrapper(jsJoinTableDataSource);
    joinTableDataSourceWrapper.geoBlazorId = dotNetObject.id;
    joinTableDataSourceWrapper.viewId = viewId;
    joinTableDataSourceWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(joinTableDataSourceWrapper);
    jsObjectRefs[dotNetObject.id] = joinTableDataSourceWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsJoinTableDataSource;
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for JoinTableDataSource', e);
    }
    
    return jsJoinTableDataSource;
}

export async function buildDotNetJoinTableDataSourceGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetJoinTableDataSource: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.joinType)) {
            dotNetJoinTableDataSource.joinType = jsObject.joinType;
        }
        if (hasValue(jsObject.leftTableKey)) {
            dotNetJoinTableDataSource.leftTableKey = jsObject.leftTableKey;
        }
        if (hasValue(jsObject.leftTableSource)) {
            dotNetJoinTableDataSource.leftTableSource = jsObject.leftTableSource;
        }
        if (hasValue(jsObject.rightTableKey)) {
            dotNetJoinTableDataSource.rightTableKey = jsObject.rightTableKey;
        }
        if (hasValue(jsObject.rightTableSource)) {
            dotNetJoinTableDataSource.rightTableSource = jsObject.rightTableSource;
        }
        if (hasValue(jsObject.type)) {
            dotNetJoinTableDataSource.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetJoinTableDataSource.id = k;
                break;
            }
        }
    }

    return dotNetJoinTableDataSource;
}

