// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import FindResult from '@arcgis/core/rest/support/FindResult';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetFindResult } from './findResult';

export async function buildJsFindResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.feature)) {
        let { buildJsGraphic } = await import('./graphic');
        properties.feature = buildJsGraphic(dotNetObject.feature) as any;
    }

    if (hasValue(dotNetObject.displayFieldName)) {
        properties.displayFieldName = dotNetObject.displayFieldName;
    }
    if (hasValue(dotNetObject.foundFieldName)) {
        properties.foundFieldName = dotNetObject.foundFieldName;
    }
    if (hasValue(dotNetObject.layerId)) {
        properties.layerId = dotNetObject.layerId;
    }
    if (hasValue(dotNetObject.layerName)) {
        properties.layerName = dotNetObject.layerName;
    }
    if (hasValue(dotNetObject.value)) {
        properties.value = dotNetObject.value;
    }
    let jsFindResult = new FindResult(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFindResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFindResult;
    
    let dnInstantiatedObject = await buildDotNetFindResult(jsFindResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FindResult', e);
    }
    
    return jsFindResult;
}

export async function buildDotNetFindResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFindResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.feature)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetFindResult.feature = buildDotNetGraphic(jsObject.feature, layerId, viewId);
        }
    if (hasValue(jsObject.displayFieldName)) {
        dotNetFindResult.displayFieldName = jsObject.displayFieldName;
    }
    if (hasValue(jsObject.foundFieldName)) {
        dotNetFindResult.foundFieldName = jsObject.foundFieldName;
    }
    if (hasValue(jsObject.layerId)) {
        dotNetFindResult.layerId = jsObject.layerId;
    }
    if (hasValue(jsObject.layerName)) {
        dotNetFindResult.layerName = jsObject.layerName;
    }
    if (hasValue(jsObject.value)) {
        dotNetFindResult.value = jsObject.value;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFindResult.id = k;
                break;
            }
        }
    }

    return dotNetFindResult;
}

