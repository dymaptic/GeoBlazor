// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import TableListListItemPanel from '@arcgis/core/widgets/TableList/ListItemPanel';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class TableListItemPanelWidgetGenerated implements IPropertyWrapper {
    public widget: TableListListItemPanel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: TableListListItemPanel) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    
    // region properties
    
    async getListItem(): Promise<any> {
        if (!hasValue(this.widget.listItem)) {
            return null;
        }
        
        let { buildDotNetTableListListItem } = await import('./tableListListItem');
        return await buildDotNetTableListListItem(this.widget.listItem);
    }
    async setListItem(value: any): Promise<void> {
        let { buildJsTableListListItem } = await import('./tableListListItem');
        this.widget.listItem = await  buildJsTableListListItem(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsTableListItemPanelWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTableListListItemPanel = new TableListListItemPanel();
    if (hasValue(dotNetObject.listItem)) {
        let { buildJsTableListListItem } = await import('./tableListListItem');
        jsTableListListItemPanel.listItem = await buildJsTableListListItem(dotNetObject.listItem, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.className)) {
        jsTableListListItemPanel.className = dotNetObject.className;
    }
    if (hasValue(dotNetObject.content)) {
        jsTableListListItemPanel.content = dotNetObject.content;
    }
    if (hasValue(dotNetObject.disabled)) {
        jsTableListListItemPanel.disabled = dotNetObject.disabled;
    }
    if (hasValue(dotNetObject.flowEnabled)) {
        jsTableListListItemPanel.flowEnabled = dotNetObject.flowEnabled;
    }
    if (hasValue(dotNetObject.image)) {
        jsTableListListItemPanel.image = dotNetObject.image;
    }
    if (hasValue(dotNetObject.open)) {
        jsTableListListItemPanel.open = dotNetObject.open;
    }
    if (hasValue(dotNetObject.title)) {
        jsTableListListItemPanel.title = dotNetObject.title;
    }

    let { default: TableListItemPanelWidgetWrapper } = await import('./tableListItemPanelWidget');
    let tableListItemPanelWidgetWrapper = new TableListItemPanelWidgetWrapper(jsTableListListItemPanel);
    tableListItemPanelWidgetWrapper.geoBlazorId = dotNetObject.id;
    tableListItemPanelWidgetWrapper.viewId = viewId;
    tableListItemPanelWidgetWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(tableListItemPanelWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = tableListItemPanelWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsTableListListItemPanel;
    let { buildDotNetTableListItemPanelWidget } = await import('./tableListItemPanelWidget');
    let dnInstantiatedObject = await buildDotNetTableListItemPanelWidget(jsTableListListItemPanel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TableListItemPanelWidget', e);
    }
    
    return jsTableListListItemPanel;
}

export async function buildDotNetTableListItemPanelWidgetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTableListItemPanelWidget: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.listItem)) {
            let { buildDotNetTableListListItem } = await import('./tableListListItem');
            dotNetTableListItemPanelWidget.listItem = await buildDotNetTableListListItem(jsObject.listItem);
        }
        if (hasValue(jsObject.className)) {
            dotNetTableListItemPanelWidget.className = jsObject.className;
        }
        if (hasValue(jsObject.content)) {
            dotNetTableListItemPanelWidget.content = jsObject.content;
        }
        if (hasValue(jsObject.disabled)) {
            dotNetTableListItemPanelWidget.disabled = jsObject.disabled;
        }
        if (hasValue(jsObject.flowEnabled)) {
            dotNetTableListItemPanelWidget.flowEnabled = jsObject.flowEnabled;
        }
        if (hasValue(jsObject.image)) {
            dotNetTableListItemPanelWidget.image = jsObject.image;
        }
        if (hasValue(jsObject.open)) {
            dotNetTableListItemPanelWidget.open = jsObject.open;
        }
        if (hasValue(jsObject.title)) {
            dotNetTableListItemPanelWidget.title = jsObject.title;
        }
        if (hasValue(jsObject.type)) {
            dotNetTableListItemPanelWidget.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTableListItemPanelWidget.id = k;
                break;
            }
        }
    }

    return dotNetTableListItemPanelWidget;
}

