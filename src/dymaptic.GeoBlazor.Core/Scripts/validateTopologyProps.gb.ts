import { buildDotNetValidateTopologyProps } from './validateTopologyProps';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import ValidateTopologyProps = __esri.ValidateTopologyProps;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsValidateTopologyPropsGenerated(dotNetObject: any): Promise<any> {
    let jsValidateTopologyProps: any = {}
    if (hasValue(dotNetObject.validateArea)) {
        let { buildJsExtent } = await import('./extent');
        jsValidateTopologyProps.validateArea = buildJsExtent(dotNetObject.validateArea) as any;
    }

    if (hasValue(dotNetObject.gdbVersion)) {
        jsValidateTopologyProps.gdbVersion = dotNetObject.gdbVersion;
    }
    if (hasValue(dotNetObject.sessionID)) {
        jsValidateTopologyProps.sessionID = dotNetObject.sessionID;
    }
    if (hasValue(dotNetObject.validationSet)) {
        jsValidateTopologyProps.validationSet = dotNetObject.validationSet;
    }
    if (hasValue(dotNetObject.validationType)) {
        jsValidateTopologyProps.validationType = dotNetObject.validationType;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsValidateTopologyProps);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsValidateTopologyProps;
    
    let dnInstantiatedObject = await buildDotNetValidateTopologyProps(jsValidateTopologyProps);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ValidateTopologyProps', e);
    }
    
    return jsValidateTopologyProps;
}
export async function buildDotNetValidateTopologyPropsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetValidateTopologyProps: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.validateArea)) {
            let { buildDotNetExtent } = await import('./extent');
            dotNetValidateTopologyProps.validateArea = buildDotNetExtent(jsObject.validateArea);
        }
        if (hasValue(jsObject.gdbVersion)) {
            dotNetValidateTopologyProps.gdbVersion = jsObject.gdbVersion;
        }
        if (hasValue(jsObject.sessionID)) {
            dotNetValidateTopologyProps.sessionID = jsObject.sessionID;
        }
        if (hasValue(jsObject.validationSet)) {
            dotNetValidateTopologyProps.validationSet = jsObject.validationSet;
        }
        if (hasValue(jsObject.validationType)) {
            dotNetValidateTopologyProps.validationType = jsObject.validationType;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetValidateTopologyProps.id = k;
                break;
            }
        }
    }

    return dotNetValidateTopologyProps;
}

