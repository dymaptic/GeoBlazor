// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import LocatorSearchSource from '@arcgis/core/widgets/Search/LocatorSearchSource';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetLocatorSearchSource } from './locatorSearchSource';

export async function buildJsLocatorSearchSourceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.filter)) {
        let { buildJsSearchSourceFilter } = await import('./searchSourceFilter');
        properties.filter = await buildJsSearchSourceFilter(dotNetObject.filter, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.hasGetResultsHandler) && dotNetObject.hasGetResultsHandler) {
        properties.getResults = async (parameters) => {

            let result = await dotNetObject.invokeMethodAsync('OnJsGetResultsHandler', parameters);
            let { buildJsSearchResult } = await import('./searchResult');
            return await Promise.all(result.map(async i => await buildJsSearchResult(i)));
        };
    }
    if (hasValue(dotNetObject.hasGetSuggestionsHandler) && dotNetObject.hasGetSuggestionsHandler) {
        properties.getSuggestions = async (parameters) => {

            return await dotNetObject.invokeMethodAsync('OnJsGetSuggestionsHandler', parameters);
        };
    }
    if (hasValue(dotNetObject.popupTemplate)) {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        properties.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.resultSymbol)) {
        let { buildJsSymbol } = await import('./symbol');
        properties.resultSymbol = buildJsSymbol(dotNetObject.resultSymbol) as any;
    }

    if (hasValue(dotNetObject.apiKey)) {
        properties.apiKey = dotNetObject.apiKey;
    }
    if (hasValue(dotNetObject.autoNavigate)) {
        properties.autoNavigate = dotNetObject.autoNavigate;
    }
    if (hasValue(dotNetObject.categories)) {
        properties.categories = dotNetObject.categories;
    }
    if (hasValue(dotNetObject.countryCode)) {
        properties.countryCode = dotNetObject.countryCode;
    }
    if (hasValue(dotNetObject.defaultZoomScale)) {
        properties.defaultZoomScale = dotNetObject.defaultZoomScale;
    }
    if (hasValue(dotNetObject.localSearchDisabled)) {
        properties.localSearchDisabled = dotNetObject.localSearchDisabled;
    }
    if (hasValue(dotNetObject.locationType)) {
        properties.locationType = dotNetObject.locationType;
    }
    if (hasValue(dotNetObject.maxResults)) {
        properties.maxResults = dotNetObject.maxResults;
    }
    if (hasValue(dotNetObject.maxSuggestions)) {
        properties.maxSuggestions = dotNetObject.maxSuggestions;
    }
    if (hasValue(dotNetObject.minSuggestCharacters)) {
        properties.minSuggestCharacters = dotNetObject.minSuggestCharacters;
    }
    if (hasValue(dotNetObject.name)) {
        properties.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.outFields)) {
        properties.outFields = dotNetObject.outFields;
    }
    if (hasValue(dotNetObject.placeholder)) {
        properties.placeholder = dotNetObject.placeholder;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        properties.popupEnabled = dotNetObject.popupEnabled;
    }
    if (hasValue(dotNetObject.prefix)) {
        properties.prefix = dotNetObject.prefix;
    }
    if (hasValue(dotNetObject.resultGraphicEnabled)) {
        properties.resultGraphicEnabled = dotNetObject.resultGraphicEnabled;
    }
    if (hasValue(dotNetObject.searchTemplate)) {
        properties.searchTemplate = dotNetObject.searchTemplate;
    }
    if (hasValue(dotNetObject.singleLineFieldName)) {
        properties.singleLineFieldName = dotNetObject.singleLineFieldName;
    }
    if (hasValue(dotNetObject.suffix)) {
        properties.suffix = dotNetObject.suffix;
    }
    if (hasValue(dotNetObject.suggestionsEnabled)) {
        properties.suggestionsEnabled = dotNetObject.suggestionsEnabled;
    }
    if (hasValue(dotNetObject.url)) {
        properties.url = dotNetObject.url;
    }
    if (hasValue(dotNetObject.withinViewEnabled)) {
        properties.withinViewEnabled = dotNetObject.withinViewEnabled;
    }
    if (hasValue(dotNetObject.zoomScale)) {
        properties.zoomScale = dotNetObject.zoomScale;
    }
    let jsLocatorSearchSource = new LocatorSearchSource(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsLocatorSearchSource);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLocatorSearchSource;
    
    let dnInstantiatedObject = await buildDotNetLocatorSearchSource(jsLocatorSearchSource);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LocatorSearchSource', e);
    }
    
    return jsLocatorSearchSource;
}

export async function buildDotNetLocatorSearchSourceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLocatorSearchSource: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.filter)) {
            let { buildDotNetSearchSourceFilter } = await import('./searchSourceFilter');
            dotNetLocatorSearchSource.filter = await buildDotNetSearchSourceFilter(jsObject.filter);
        }
        if (hasValue(jsObject.popupTemplate)) {
            let { buildDotNetPopupTemplate } = await import('./popupTemplate');
            dotNetLocatorSearchSource.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
        }
        if (hasValue(jsObject.resultSymbol)) {
            let { buildDotNetSymbol } = await import('./symbol');
            dotNetLocatorSearchSource.resultSymbol = buildDotNetSymbol(jsObject.resultSymbol);
        }
    if (hasValue(jsObject.apiKey)) {
        dotNetLocatorSearchSource.apiKey = jsObject.apiKey;
    }
    if (hasValue(jsObject.autoNavigate)) {
        dotNetLocatorSearchSource.autoNavigate = jsObject.autoNavigate;
    }
    if (hasValue(jsObject.categories)) {
        dotNetLocatorSearchSource.categories = jsObject.categories;
    }
    if (hasValue(jsObject.countryCode)) {
        dotNetLocatorSearchSource.countryCode = jsObject.countryCode;
    }
    if (hasValue(jsObject.defaultZoomScale)) {
        dotNetLocatorSearchSource.defaultZoomScale = jsObject.defaultZoomScale;
    }
    if (hasValue(jsObject.getResults)) {
        dotNetLocatorSearchSource.getResultsHandler = jsObject.getResults;
    }
    if (hasValue(jsObject.getSuggestions)) {
        dotNetLocatorSearchSource.getSuggestionsHandler = jsObject.getSuggestions;
    }
    if (hasValue(jsObject.localSearchDisabled)) {
        dotNetLocatorSearchSource.localSearchDisabled = jsObject.localSearchDisabled;
    }
    if (hasValue(jsObject.locationType)) {
        dotNetLocatorSearchSource.locationType = jsObject.locationType;
    }
    if (hasValue(jsObject.maxResults)) {
        dotNetLocatorSearchSource.maxResults = jsObject.maxResults;
    }
    if (hasValue(jsObject.maxSuggestions)) {
        dotNetLocatorSearchSource.maxSuggestions = jsObject.maxSuggestions;
    }
    if (hasValue(jsObject.minSuggestCharacters)) {
        dotNetLocatorSearchSource.minSuggestCharacters = jsObject.minSuggestCharacters;
    }
    if (hasValue(jsObject.name)) {
        dotNetLocatorSearchSource.name = jsObject.name;
    }
    if (hasValue(jsObject.outFields)) {
        dotNetLocatorSearchSource.outFields = jsObject.outFields;
    }
    if (hasValue(jsObject.placeholder)) {
        dotNetLocatorSearchSource.placeholder = jsObject.placeholder;
    }
    if (hasValue(jsObject.popupEnabled)) {
        dotNetLocatorSearchSource.popupEnabled = jsObject.popupEnabled;
    }
    if (hasValue(jsObject.prefix)) {
        dotNetLocatorSearchSource.prefix = jsObject.prefix;
    }
    if (hasValue(jsObject.resultGraphicEnabled)) {
        dotNetLocatorSearchSource.resultGraphicEnabled = jsObject.resultGraphicEnabled;
    }
    if (hasValue(jsObject.searchTemplate)) {
        dotNetLocatorSearchSource.searchTemplate = jsObject.searchTemplate;
    }
    if (hasValue(jsObject.singleLineFieldName)) {
        dotNetLocatorSearchSource.singleLineFieldName = jsObject.singleLineFieldName;
    }
    if (hasValue(jsObject.suffix)) {
        dotNetLocatorSearchSource.suffix = jsObject.suffix;
    }
    if (hasValue(jsObject.suggestionsEnabled)) {
        dotNetLocatorSearchSource.suggestionsEnabled = jsObject.suggestionsEnabled;
    }
    if (hasValue(jsObject.url)) {
        dotNetLocatorSearchSource.url = jsObject.url;
    }
    if (hasValue(jsObject.withinViewEnabled)) {
        dotNetLocatorSearchSource.withinViewEnabled = jsObject.withinViewEnabled;
    }
    if (hasValue(jsObject.zoomScale)) {
        dotNetLocatorSearchSource.zoomScale = jsObject.zoomScale;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLocatorSearchSource.id = k;
                break;
            }
        }
    }

    return dotNetLocatorSearchSource;
}

