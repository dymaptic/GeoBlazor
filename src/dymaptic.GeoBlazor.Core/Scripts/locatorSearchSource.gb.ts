// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import LocatorSearchSource from '@arcgis/core/widgets/Search/LocatorSearchSource';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class LocatorSearchSourceGenerated implements IPropertyWrapper {
    public component: LocatorSearchSource;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: LocatorSearchSource) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getPopupTemplate(): Promise<any> {
        if (!hasValue(this.component.popupTemplate)) {
            return null;
        }
        
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        return await buildDotNetPopupTemplate(this.component.popupTemplate);
    }
    async setPopupTemplate(value: any): Promise<void> {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        this.component.popupTemplate = await  buildJsPopupTemplate(value, this.layerId, this.viewId);
    }
    async getResultSymbol(): Promise<any> {
        if (!hasValue(this.component.resultSymbol)) {
            return null;
        }
        
        let { buildDotNetSymbol } = await import('./symbol');
        return await buildDotNetSymbol(this.component.resultSymbol);
    }
    async setResultSymbol(value: any): Promise<void> {
        let { buildJsSymbol } = await import('./symbol');
        this.component.resultSymbol = await  buildJsSymbol(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsLocatorSearchSourceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsLocatorSearchSource = new LocatorSearchSource();
    if (hasValue(dotNetObject.popupTemplate)) {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        jsLocatorSearchSource.popupTemplate = await buildJsPopupTemplate(dotNetObject.popupTemplate, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.resultSymbol)) {
        let { buildJsSymbol } = await import('./symbol');
        jsLocatorSearchSource.resultSymbol = await buildJsSymbol(dotNetObject.resultSymbol, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.apiKey)) {
        jsLocatorSearchSource.apiKey = dotNetObject.apiKey;
    }
    if (hasValue(dotNetObject.autoNavigate)) {
        jsLocatorSearchSource.autoNavigate = dotNetObject.autoNavigate;
    }
    if (hasValue(dotNetObject.categories)) {
        jsLocatorSearchSource.categories = dotNetObject.categories;
    }
    if (hasValue(dotNetObject.countryCode)) {
        jsLocatorSearchSource.countryCode = dotNetObject.countryCode;
    }
    if (hasValue(dotNetObject.defaultZoomScale)) {
        jsLocatorSearchSource.defaultZoomScale = dotNetObject.defaultZoomScale;
    }
    if (hasValue(dotNetObject.filter)) {
        jsLocatorSearchSource.filter = dotNetObject.filter;
    }
    if (hasValue(dotNetObject.getResults)) {
        jsLocatorSearchSource.getResults = dotNetObject.getResults;
    }
    if (hasValue(dotNetObject.getSuggestions)) {
        jsLocatorSearchSource.getSuggestions = dotNetObject.getSuggestions;
    }
    if (hasValue(dotNetObject.localSearchDisabled)) {
        jsLocatorSearchSource.localSearchDisabled = dotNetObject.localSearchDisabled;
    }
    if (hasValue(dotNetObject.locationType)) {
        jsLocatorSearchSource.locationType = dotNetObject.locationType;
    }
    if (hasValue(dotNetObject.maxResults)) {
        jsLocatorSearchSource.maxResults = dotNetObject.maxResults;
    }
    if (hasValue(dotNetObject.maxSuggestions)) {
        jsLocatorSearchSource.maxSuggestions = dotNetObject.maxSuggestions;
    }
    if (hasValue(dotNetObject.minSuggestCharacters)) {
        jsLocatorSearchSource.minSuggestCharacters = dotNetObject.minSuggestCharacters;
    }
    if (hasValue(dotNetObject.name)) {
        jsLocatorSearchSource.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.outFields)) {
        jsLocatorSearchSource.outFields = dotNetObject.outFields;
    }
    if (hasValue(dotNetObject.placeholder)) {
        jsLocatorSearchSource.placeholder = dotNetObject.placeholder;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        jsLocatorSearchSource.popupEnabled = dotNetObject.popupEnabled;
    }
    if (hasValue(dotNetObject.prefix)) {
        jsLocatorSearchSource.prefix = dotNetObject.prefix;
    }
    if (hasValue(dotNetObject.resultGraphicEnabled)) {
        jsLocatorSearchSource.resultGraphicEnabled = dotNetObject.resultGraphicEnabled;
    }
    if (hasValue(dotNetObject.searchTemplate)) {
        jsLocatorSearchSource.searchTemplate = dotNetObject.searchTemplate;
    }
    if (hasValue(dotNetObject.singleLineFieldName)) {
        jsLocatorSearchSource.singleLineFieldName = dotNetObject.singleLineFieldName;
    }
    if (hasValue(dotNetObject.suffix)) {
        jsLocatorSearchSource.suffix = dotNetObject.suffix;
    }
    if (hasValue(dotNetObject.suggestionsEnabled)) {
        jsLocatorSearchSource.suggestionsEnabled = dotNetObject.suggestionsEnabled;
    }
    if (hasValue(dotNetObject.url)) {
        jsLocatorSearchSource.url = dotNetObject.url;
    }
    if (hasValue(dotNetObject.withinViewEnabled)) {
        jsLocatorSearchSource.withinViewEnabled = dotNetObject.withinViewEnabled;
    }
    if (hasValue(dotNetObject.zoomScale)) {
        jsLocatorSearchSource.zoomScale = dotNetObject.zoomScale;
    }
    let { default: LocatorSearchSourceWrapper } = await import('./locatorSearchSource');
    let locatorSearchSourceWrapper = new LocatorSearchSourceWrapper(jsLocatorSearchSource);
    locatorSearchSourceWrapper.geoBlazorId = dotNetObject.id;
    locatorSearchSourceWrapper.viewId = viewId;
    locatorSearchSourceWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(locatorSearchSourceWrapper);
    jsObjectRefs[dotNetObject.id] = locatorSearchSourceWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsLocatorSearchSource;
    
    let { buildDotNetLocatorSearchSource } = await import('./locatorSearchSource');
    let dnInstantiatedObject = await buildDotNetLocatorSearchSource(jsLocatorSearchSource, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LocatorSearchSource', e);
    }
    
    return jsLocatorSearchSource;
}

export async function buildDotNetLocatorSearchSourceGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLocatorSearchSource: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.popupTemplate)) {
            let { buildDotNetPopupTemplate } = await import('./popupTemplate');
            dotNetLocatorSearchSource.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
        }
        if (hasValue(jsObject.resultSymbol)) {
            let { buildDotNetSymbol } = await import('./symbol');
            dotNetLocatorSearchSource.resultSymbol = await buildDotNetSymbol(jsObject.resultSymbol);
        }
        if (hasValue(jsObject.apiKey)) {
            dotNetLocatorSearchSource.apiKey = jsObject.apiKey;
        }
        if (hasValue(jsObject.autoNavigate)) {
            dotNetLocatorSearchSource.autoNavigate = jsObject.autoNavigate;
        }
        if (hasValue(jsObject.categories)) {
            dotNetLocatorSearchSource.categories = jsObject.categories;
        }
        if (hasValue(jsObject.countryCode)) {
            dotNetLocatorSearchSource.countryCode = jsObject.countryCode;
        }
        if (hasValue(jsObject.defaultZoomScale)) {
            dotNetLocatorSearchSource.defaultZoomScale = jsObject.defaultZoomScale;
        }
        if (hasValue(jsObject.filter)) {
            dotNetLocatorSearchSource.filter = jsObject.filter;
        }
        if (hasValue(jsObject.getResults)) {
            dotNetLocatorSearchSource.getResults = jsObject.getResults;
        }
        if (hasValue(jsObject.getSuggestions)) {
            dotNetLocatorSearchSource.getSuggestions = jsObject.getSuggestions;
        }
        if (hasValue(jsObject.localSearchDisabled)) {
            dotNetLocatorSearchSource.localSearchDisabled = jsObject.localSearchDisabled;
        }
        if (hasValue(jsObject.locationType)) {
            dotNetLocatorSearchSource.locationType = jsObject.locationType;
        }
        if (hasValue(jsObject.maxResults)) {
            dotNetLocatorSearchSource.maxResults = jsObject.maxResults;
        }
        if (hasValue(jsObject.maxSuggestions)) {
            dotNetLocatorSearchSource.maxSuggestions = jsObject.maxSuggestions;
        }
        if (hasValue(jsObject.minSuggestCharacters)) {
            dotNetLocatorSearchSource.minSuggestCharacters = jsObject.minSuggestCharacters;
        }
        if (hasValue(jsObject.name)) {
            dotNetLocatorSearchSource.name = jsObject.name;
        }
        if (hasValue(jsObject.outFields)) {
            dotNetLocatorSearchSource.outFields = jsObject.outFields;
        }
        if (hasValue(jsObject.placeholder)) {
            dotNetLocatorSearchSource.placeholder = jsObject.placeholder;
        }
        if (hasValue(jsObject.popupEnabled)) {
            dotNetLocatorSearchSource.popupEnabled = jsObject.popupEnabled;
        }
        if (hasValue(jsObject.prefix)) {
            dotNetLocatorSearchSource.prefix = jsObject.prefix;
        }
        if (hasValue(jsObject.resultGraphicEnabled)) {
            dotNetLocatorSearchSource.resultGraphicEnabled = jsObject.resultGraphicEnabled;
        }
        if (hasValue(jsObject.searchTemplate)) {
            dotNetLocatorSearchSource.searchTemplate = jsObject.searchTemplate;
        }
        if (hasValue(jsObject.singleLineFieldName)) {
            dotNetLocatorSearchSource.singleLineFieldName = jsObject.singleLineFieldName;
        }
        if (hasValue(jsObject.suffix)) {
            dotNetLocatorSearchSource.suffix = jsObject.suffix;
        }
        if (hasValue(jsObject.suggestionsEnabled)) {
            dotNetLocatorSearchSource.suggestionsEnabled = jsObject.suggestionsEnabled;
        }
        if (hasValue(jsObject.url)) {
            dotNetLocatorSearchSource.url = jsObject.url;
        }
        if (hasValue(jsObject.withinViewEnabled)) {
            dotNetLocatorSearchSource.withinViewEnabled = jsObject.withinViewEnabled;
        }
        if (hasValue(jsObject.zoomScale)) {
            dotNetLocatorSearchSource.zoomScale = jsObject.zoomScale;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLocatorSearchSource.id = k;
                break;
            }
        }
    }

    return dotNetLocatorSearchSource;
}

