// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import GamepadInputDevice from '@arcgis/core/views/input/gamepad/GamepadInputDevice';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetGamepadInputDevice } from './gamepadInputDevice';

export async function buildJsGamepadInputDeviceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    let jsGamepadInputDevice = new GamepadInputDevice(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsGamepadInputDevice);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsGamepadInputDevice;
    
    let { buildDotNetGamepadInputDevice } = await import('./gamepadInputDevice');
    let dnInstantiatedObject = await buildDotNetGamepadInputDevice(jsGamepadInputDevice, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type GamepadInputDevice detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for GamepadInputDevice', e);
    }
    
    return jsGamepadInputDevice;
}


export async function buildDotNetGamepadInputDeviceGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsGamepadInputDevice } = await import('./gamepadInputDevice');
        jsComponentRef = await buildJsGamepadInputDevice(jsObject, layerId, viewId);
    }
    
    let dotNetGamepadInputDevice: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.native)) {
        dotNetGamepadInputDevice.native = jsObject.native;
    }


    if (hasValue(geoBlazorId)) {
        dotNetGamepadInputDevice.id = geoBlazorId;
    }

    return dotNetGamepadInputDevice;
}

