// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import GamepadInputDevice from '@arcgis/core/views/input/gamepad/GamepadInputDevice';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetGamepadInputDevice } from './gamepadInputDevice';

export async function buildJsGamepadInputDeviceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    let jsGamepadInputDevice = new GamepadInputDevice(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsGamepadInputDevice);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsGamepadInputDevice;
    
    return jsGamepadInputDevice;
}


export async function buildDotNetGamepadInputDeviceGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGamepadInputDevice: any = {};
    
    if (hasValue(jsObject.native)) {
        dotNetGamepadInputDevice.native = removeCircularReferences(jsObject.native);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetGamepadInputDevice.id = geoBlazorId;
    }

    return dotNetGamepadInputDevice;
}

