// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCapabilitiesAttachment } from './capabilitiesAttachment';

export async function buildJsCapabilitiesAttachmentGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCapabilitiesAttachment: any = {};

    if (hasValue(dotNetObject.supportsCacheHint)) {
        jsCapabilitiesAttachment.supportsCacheHint = dotNetObject.supportsCacheHint;
    }
    if (hasValue(dotNetObject.supportsContentType)) {
        jsCapabilitiesAttachment.supportsContentType = dotNetObject.supportsContentType;
    }
    if (hasValue(dotNetObject.supportsExifInfo)) {
        jsCapabilitiesAttachment.supportsExifInfo = dotNetObject.supportsExifInfo;
    }
    if (hasValue(dotNetObject.supportsKeywords)) {
        jsCapabilitiesAttachment.supportsKeywords = dotNetObject.supportsKeywords;
    }
    if (hasValue(dotNetObject.supportsName)) {
        jsCapabilitiesAttachment.supportsName = dotNetObject.supportsName;
    }
    if (hasValue(dotNetObject.supportsResize)) {
        jsCapabilitiesAttachment.supportsResize = dotNetObject.supportsResize;
    }
    if (hasValue(dotNetObject.supportsSize)) {
        jsCapabilitiesAttachment.supportsSize = dotNetObject.supportsSize;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCapabilitiesAttachment);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCapabilitiesAttachment;
    
    let { buildDotNetCapabilitiesAttachment } = await import('./capabilitiesAttachment');
    let dnInstantiatedObject = await buildDotNetCapabilitiesAttachment(jsCapabilitiesAttachment, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type CapabilitiesAttachment detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CapabilitiesAttachment', e);
    }
    
    return jsCapabilitiesAttachment;
}


export async function buildDotNetCapabilitiesAttachmentGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCapabilitiesAttachment: any = {};
    
    if (hasValue(jsObject.supportsCacheHint)) {
        dotNetCapabilitiesAttachment.supportsCacheHint = jsObject.supportsCacheHint;
    }
    
    if (hasValue(jsObject.supportsContentType)) {
        dotNetCapabilitiesAttachment.supportsContentType = jsObject.supportsContentType;
    }
    
    if (hasValue(jsObject.supportsExifInfo)) {
        dotNetCapabilitiesAttachment.supportsExifInfo = jsObject.supportsExifInfo;
    }
    
    if (hasValue(jsObject.supportsKeywords)) {
        dotNetCapabilitiesAttachment.supportsKeywords = jsObject.supportsKeywords;
    }
    
    if (hasValue(jsObject.supportsName)) {
        dotNetCapabilitiesAttachment.supportsName = jsObject.supportsName;
    }
    
    if (hasValue(jsObject.supportsResize)) {
        dotNetCapabilitiesAttachment.supportsResize = jsObject.supportsResize;
    }
    
    if (hasValue(jsObject.supportsSize)) {
        dotNetCapabilitiesAttachment.supportsSize = jsObject.supportsSize;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCapabilitiesAttachment.id = geoBlazorId;
    }

    return dotNetCapabilitiesAttachment;
}

