// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetFeatureFenceParameters } from './featureFenceParameters';
import FeatureFenceParameters from '@arcgis/core/webdoc/geotriggersInfo/FeatureFenceParameters';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsFeatureFenceParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureFenceParameters = new FeatureFenceParameters();
    if (hasValue(dotNetObject.filter)) {
        let { buildJsGeotriggersInfoFeatureFilter } = await import('./geotriggersInfoFeatureFilter');
        jsFeatureFenceParameters.filter = await buildJsGeotriggersInfoFeatureFilter(dotNetObject.filter, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.bufferDistance)) {
        jsFeatureFenceParameters.bufferDistance = dotNetObject.bufferDistance;
    }
    if (hasValue(dotNetObject.fenceSource)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedFenceSource } = dotNetObject.fenceSource;
        jsFeatureFenceParameters.fenceSource = sanitizedFenceSource;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureFenceParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureFenceParameters;
    
    let dnInstantiatedObject = await buildDotNetFeatureFenceParameters(jsFeatureFenceParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureFenceParameters', e);
    }
    
    return jsFeatureFenceParameters;
}

export async function buildDotNetFeatureFenceParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureFenceParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.filter)) {
            let { buildDotNetGeotriggersInfoFeatureFilter } = await import('./geotriggersInfoFeatureFilter');
            dotNetFeatureFenceParameters.filter = await buildDotNetGeotriggersInfoFeatureFilter(jsObject.filter);
        }
        if (hasValue(jsObject.bufferDistance)) {
            dotNetFeatureFenceParameters.bufferDistance = jsObject.bufferDistance;
        }
        if (hasValue(jsObject.fenceSource)) {
            dotNetFeatureFenceParameters.fenceSource = jsObject.fenceSource;
        }
        if (hasValue(jsObject.type)) {
            dotNetFeatureFenceParameters.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFeatureFenceParameters.id = k;
                break;
            }
        }
    }

    return dotNetFeatureFenceParameters;
}

