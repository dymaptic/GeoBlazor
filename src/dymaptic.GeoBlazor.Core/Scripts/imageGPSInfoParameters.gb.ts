// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageGPSInfoParameters from '@arcgis/core/rest/support/ImageGPSInfoParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetImageGPSInfoParameters } from './imageGPSInfoParameters';

export async function buildJsImageGPSInfoParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsImageGPSInfoParameters = new ImageGPSInfoParameters();
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsGeometry } = await import('./geometry');
        jsImageGPSInfoParameters.geometry = buildJsGeometry(dotNetObject.geometry) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        jsImageGPSInfoParameters.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.objectIds)) {
        jsImageGPSInfoParameters.objectIds = dotNetObject.objectIds;
    }
    if (hasValue(dotNetObject.spatialRelationship)) {
        jsImageGPSInfoParameters.spatialRelationship = dotNetObject.spatialRelationship;
    }
    if (hasValue(dotNetObject.where)) {
        jsImageGPSInfoParameters.where = dotNetObject.where;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsImageGPSInfoParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageGPSInfoParameters;
    
    let dnInstantiatedObject = await buildDotNetImageGPSInfoParameters(jsImageGPSInfoParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImageGPSInfoParameters', e);
    }
    
    return jsImageGPSInfoParameters;
}

export async function buildDotNetImageGPSInfoParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageGPSInfoParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.geometry)) {
            let { buildDotNetGeometry } = await import('./geometry');
            dotNetImageGPSInfoParameters.geometry = buildDotNetGeometry(jsObject.geometry);
        }
        if (hasValue(jsObject.timeExtent)) {
            let { buildDotNetTimeExtent } = await import('./timeExtent');
            dotNetImageGPSInfoParameters.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
        }
    if (hasValue(jsObject.objectIds)) {
        dotNetImageGPSInfoParameters.objectIds = jsObject.objectIds;
    }
    if (hasValue(jsObject.spatialRelationship)) {
        dotNetImageGPSInfoParameters.spatialRelationship = jsObject.spatialRelationship;
    }
    if (hasValue(jsObject.where)) {
        dotNetImageGPSInfoParameters.where = jsObject.where;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImageGPSInfoParameters.id = k;
                break;
            }
        }
    }

    return dotNetImageGPSInfoParameters;
}

