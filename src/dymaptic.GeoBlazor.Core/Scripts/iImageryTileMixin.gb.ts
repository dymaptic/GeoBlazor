// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetIImageryTileMixin } from './iImageryTileMixin';

export async function buildJsIImageryTileMixinGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsImageryTileMixin: any = {};
    if (hasValue(dotNetObject.multidimensionalSubset)) {
        let { buildJsMultidimensionalSubset } = await import('./multidimensionalSubset');
        jsImageryTileMixin.multidimensionalSubset = await buildJsMultidimensionalSubset(dotNetObject.multidimensionalSubset, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.popupTemplate)) {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        jsImageryTileMixin.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        jsImageryTileMixin.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.timeInfo)) {
        let { buildJsTimeInfo } = await import('./timeInfo');
        jsImageryTileMixin.timeInfo = await buildJsTimeInfo(dotNetObject.timeInfo, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.bandIds)) {
        jsImageryTileMixin.bandIds = dotNetObject.bandIds;
    }
    if (hasValue(dotNetObject.copyright)) {
        jsImageryTileMixin.copyright = dotNetObject.copyright;
    }
    if (hasValue(dotNetObject.legendEnabled)) {
        jsImageryTileMixin.legendEnabled = dotNetObject.legendEnabled;
    }
    if (hasValue(dotNetObject.multidimensionalDefinition)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedMultidimensionalDefinition } = dotNetObject.multidimensionalDefinition;
        jsImageryTileMixin.multidimensionalDefinition = sanitizedMultidimensionalDefinition;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        jsImageryTileMixin.popupEnabled = dotNetObject.popupEnabled;
    }
    if (hasValue(dotNetObject.renderer)) {
        jsImageryTileMixin.renderer = dotNetObject.renderer;
    }
    if (hasValue(dotNetObject.timeOffset)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedTimeOffset } = dotNetObject.timeOffset;
        jsImageryTileMixin.timeOffset = sanitizedTimeOffset;
    }
    if (hasValue(dotNetObject.useViewTime)) {
        jsImageryTileMixin.useViewTime = dotNetObject.useViewTime;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsImageryTileMixin);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageryTileMixin;
    
    let dnInstantiatedObject = await buildDotNetIImageryTileMixin(jsImageryTileMixin);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for IImageryTileMixin', e);
    }
    
    return jsImageryTileMixin;
}

export async function buildDotNetIImageryTileMixinGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIImageryTileMixin: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.multidimensionalSubset)) {
            let { buildDotNetMultidimensionalSubset } = await import('./multidimensionalSubset');
            dotNetIImageryTileMixin.multidimensionalSubset = await buildDotNetMultidimensionalSubset(jsObject.multidimensionalSubset);
        }
        if (hasValue(jsObject.popupTemplate)) {
            let { buildDotNetPopupTemplate } = await import('./popupTemplate');
            dotNetIImageryTileMixin.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
        }
        if (hasValue(jsObject.rasterInfo)) {
            let { buildDotNetRasterInfo } = await import('./rasterInfo');
            dotNetIImageryTileMixin.rasterInfo = await buildDotNetRasterInfo(jsObject.rasterInfo);
        }
        if (hasValue(jsObject.serviceRasterInfo)) {
            let { buildDotNetRasterInfo } = await import('./rasterInfo');
            dotNetIImageryTileMixin.serviceRasterInfo = await buildDotNetRasterInfo(jsObject.serviceRasterInfo);
        }
        if (hasValue(jsObject.timeExtent)) {
            let { buildDotNetTimeExtent } = await import('./timeExtent');
            dotNetIImageryTileMixin.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
        }
        if (hasValue(jsObject.timeInfo)) {
            let { buildDotNetTimeInfo } = await import('./timeInfo');
            dotNetIImageryTileMixin.timeInfo = await buildDotNetTimeInfo(jsObject.timeInfo);
        }
    if (hasValue(jsObject.bandIds)) {
        dotNetIImageryTileMixin.bandIds = jsObject.bandIds;
    }
    if (hasValue(jsObject.copyright)) {
        dotNetIImageryTileMixin.copyright = jsObject.copyright;
    }
    if (hasValue(jsObject.legendEnabled)) {
        dotNetIImageryTileMixin.legendEnabled = jsObject.legendEnabled;
    }
    if (hasValue(jsObject.multidimensionalDefinition)) {
        dotNetIImageryTileMixin.multidimensionalDefinition = jsObject.multidimensionalDefinition;
    }
    if (hasValue(jsObject.popupEnabled)) {
        dotNetIImageryTileMixin.popupEnabled = jsObject.popupEnabled;
    }
    if (hasValue(jsObject.renderer)) {
        dotNetIImageryTileMixin.renderer = jsObject.renderer;
    }
    if (hasValue(jsObject.timeOffset)) {
        dotNetIImageryTileMixin.timeOffset = jsObject.timeOffset;
    }
    if (hasValue(jsObject.useViewTime)) {
        dotNetIImageryTileMixin.useViewTime = jsObject.useViewTime;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetIImageryTileMixin.id = k;
                break;
            }
        }
    }

    return dotNetIImageryTileMixin;
}

