// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSearchViewModelSelectResultEvent } from './searchViewModelSelectResultEvent';

export async function buildJsSearchViewModelSelectResultEventGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSearchViewModelSelectResultEvent: any = {};
    if (hasValue(dotNetObject.result)) {
        let { buildJsSearchViewModelSelectResultEventResult } = await import('./searchViewModelSelectResultEventResult');
        jsSearchViewModelSelectResultEvent.result = await buildJsSearchViewModelSelectResultEventResult(dotNetObject.result, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.source)) {
        let { buildJsSearchSource } = await import('./searchSource');
        jsSearchViewModelSelectResultEvent.source = await buildJsSearchSource(dotNetObject.source, viewId) as any;
    }

    if (hasValue(dotNetObject.sourceIndex)) {
        jsSearchViewModelSelectResultEvent.sourceIndex = dotNetObject.sourceIndex;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSearchViewModelSelectResultEvent);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSearchViewModelSelectResultEvent;
    
    return jsSearchViewModelSelectResultEvent;
}


export async function buildDotNetSearchViewModelSelectResultEventGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchViewModelSelectResultEvent: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.result)) {
        let { buildDotNetSearchViewModelSelectResultEventResult } = await import('./searchViewModelSelectResultEventResult');
        dotNetSearchViewModelSelectResultEvent.result = await buildDotNetSearchViewModelSelectResultEventResult(jsObject.result, layerId, viewId);
    }
    if (hasValue(jsObject.source)) {
        let { buildDotNetSearchSource } = await import('./searchSource');
        dotNetSearchViewModelSelectResultEvent.source = await buildDotNetSearchSource(jsObject.source);
    }
    if (hasValue(jsObject.sourceIndex)) {
        dotNetSearchViewModelSelectResultEvent.sourceIndex = jsObject.sourceIndex;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSearchViewModelSelectResultEvent.id = k;
                break;
            }
        }
    }

    return dotNetSearchViewModelSelectResultEvent;
}

