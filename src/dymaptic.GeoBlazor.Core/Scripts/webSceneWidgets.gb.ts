// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetWebSceneWidgets } from './webSceneWidgets';

export async function buildJsWebSceneWidgetsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsWebSceneWidgets: any = {};
    if (hasValue(dotNetObject.timeSlider)) {
        let { buildJsWebDocTimeSlider } = await import('./webDocTimeSlider');
        jsWebSceneWidgets.timeSlider = await buildJsWebDocTimeSlider(dotNetObject.timeSlider, layerId, viewId) as any;
    }

    
    jsObjectRefs[dotNetObject.id] = jsWebSceneWidgets;
    arcGisObjectRefs[dotNetObject.id] = jsWebSceneWidgets;
    
    return jsWebSceneWidgets;
}


export async function buildDotNetWebSceneWidgetsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWebSceneWidgets: any = {};
    
    if (hasValue(jsObject.timeSlider)) {
        let { buildDotNetWebDocTimeSlider } = await import('./webDocTimeSlider');
        dotNetWebSceneWidgets.timeSlider = await buildDotNetWebDocTimeSlider(jsObject.timeSlider);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetWebSceneWidgets.id = geoBlazorId;
    }

    return dotNetWebSceneWidgets;
}

