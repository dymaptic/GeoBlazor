// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetTypeSchemeForPoint } from './typeSchemeForPoint';
import TypeSchemeForPoint = __esri.TypeSchemeForPoint;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsTypeSchemeForPointGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTypeSchemeForPoint: any = {}
    if (hasValue(dotNetObject.colors)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsTypeSchemeForPoint.colors = dotNetObject.colors.map(i => buildJsMapColor(i)) as any;
    }
    if (hasValue(dotNetObject.noDataColor)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsTypeSchemeForPoint.noDataColor = buildJsMapColor(dotNetObject.noDataColor) as any;
    }
    if (hasValue(dotNetObject.outline)) {
        let { buildJsTypeSchemeForPointOutline } = await import('./typeSchemeForPointOutline');
        jsTypeSchemeForPoint.outline = await buildJsTypeSchemeForPointOutline(dotNetObject.outline, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.name)) {
        jsTypeSchemeForPoint.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.opacity)) {
        jsTypeSchemeForPoint.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.size)) {
        jsTypeSchemeForPoint.size = dotNetObject.size;
    }
    if (hasValue(dotNetObject.tags)) {
        jsTypeSchemeForPoint.tags = dotNetObject.tags;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsTypeSchemeForPoint);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTypeSchemeForPoint;
    
    let dnInstantiatedObject = await buildDotNetTypeSchemeForPoint(jsTypeSchemeForPoint);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TypeSchemeForPoint', e);
    }
    
    return jsTypeSchemeForPoint;
}

export async function buildDotNetTypeSchemeForPointGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTypeSchemeForPoint: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.colors)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetTypeSchemeForPoint.colors = jsObject.colors.map(i => buildDotNetMapColor(i));
        }
        if (hasValue(jsObject.noDataColor)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetTypeSchemeForPoint.noDataColor = buildDotNetMapColor(jsObject.noDataColor);
        }
        if (hasValue(jsObject.outline)) {
            let { buildDotNetTypeSchemeForPointOutline } = await import('./typeSchemeForPointOutline');
            dotNetTypeSchemeForPoint.outline = await buildDotNetTypeSchemeForPointOutline(jsObject.outline);
        }
        if (hasValue(jsObject.name)) {
            dotNetTypeSchemeForPoint.name = jsObject.name;
        }
        if (hasValue(jsObject.opacity)) {
            dotNetTypeSchemeForPoint.opacity = jsObject.opacity;
        }
        if (hasValue(jsObject.size)) {
            dotNetTypeSchemeForPoint.size = jsObject.size;
        }
        if (hasValue(jsObject.tags)) {
            dotNetTypeSchemeForPoint.tags = jsObject.tags;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTypeSchemeForPoint.id = k;
                break;
            }
        }
    }

    return dotNetTypeSchemeForPoint;
}

