// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSearchResponse } from './searchResponse';

export async function buildJsSearchResponseGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSearchResponse: any = {};
    if (hasValue(dotNetObject.results)) {
        let { buildJsSearchResponseResults } = await import('./searchResponseResults');
        jsSearchResponse.results = await Promise.all(dotNetObject.results.map(async i => await buildJsSearchResponseResults(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.activeSourceIndex)) {
        jsSearchResponse.activeSourceIndex = dotNetObject.activeSourceIndex;
    }
    if (hasValue(dotNetObject.errors)) {
        jsSearchResponse.errors = dotNetObject.errors;
    }
    if (hasValue(dotNetObject.numResults)) {
        jsSearchResponse.numResults = dotNetObject.numResults;
    }
    if (hasValue(dotNetObject.searchTerm)) {
        jsSearchResponse.searchTerm = dotNetObject.searchTerm;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSearchResponse);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSearchResponse;
    
    let dnInstantiatedObject = await buildDotNetSearchResponse(jsSearchResponse);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SearchResponse', e);
    }
    
    return jsSearchResponse;
}

export async function buildDotNetSearchResponseGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchResponse: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.results)) {
        let { buildDotNetSearchResponseResults } = await import('./searchResponseResults');
        dotNetSearchResponse.results = await Promise.all(jsObject.results.map(async i => await buildDotNetSearchResponseResults(i)));
    }
    if (hasValue(jsObject.activeSourceIndex)) {
        dotNetSearchResponse.activeSourceIndex = jsObject.activeSourceIndex;
    }
    if (hasValue(jsObject.errors)) {
        dotNetSearchResponse.errors = jsObject.errors;
    }
    if (hasValue(jsObject.numResults)) {
        dotNetSearchResponse.numResults = jsObject.numResults;
    }
    if (hasValue(jsObject.searchTerm)) {
        dotNetSearchResponse.searchTerm = jsObject.searchTerm;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSearchResponse.id = k;
                break;
            }
        }
    }

    return dotNetSearchResponse;
}

