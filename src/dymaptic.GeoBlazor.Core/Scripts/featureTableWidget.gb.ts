// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import FeatureTable from '@arcgis/core/widgets/FeatureTable';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FeatureTableWidgetGenerated implements IPropertyWrapper {
    public widget: FeatureTable;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: FeatureTable) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    
    async clearSelectionFilter(): Promise<void> {
        this.widget.clearSelectionFilter();
    }

    async deleteSelection(showWarningPrompt: any): Promise<void> {
        await this.widget.deleteSelection(showWarningPrompt);
    }

    async filterBySelection(): Promise<void> {
        this.widget.filterBySelection();
    }

    async findColumn(fieldName: any): Promise<any> {
        return this.widget.findColumn(fieldName);
    }

    async hideColumn(fieldName: any): Promise<void> {
        this.widget.hideColumn(fieldName);
    }

    async refresh(): Promise<void> {
        await this.widget.refresh();
    }

    async refreshCellContent(): Promise<void> {
        this.widget.refreshCellContent();
    }

    async scrollToIndex(index: any): Promise<void> {
        this.widget.scrollToIndex(index);
    }

    async showAllColumns(): Promise<void> {
        this.widget.showAllColumns();
    }

    async showColumn(fieldName: any): Promise<void> {
        this.widget.showColumn(fieldName);
    }

    async sortColumn(path: any,
        direction: any): Promise<void> {
        this.widget.sortColumn(path,
            direction);
    }

    async toggleColumn(fieldName: any): Promise<void> {
        this.widget.toggleColumn(fieldName);
    }

    async zoomToSelection(): Promise<void> {
        this.widget.zoomToSelection();
    }

    // region properties
    
    async getFilterGeometry(): Promise<any> {
        if (!hasValue(this.widget.filterGeometry)) {
            return null;
        }
        
        let { buildDotNetGeometry } = await import('./geometry');
        return buildDotNetGeometry(this.widget.filterGeometry);
    }
    async setFilterGeometry(value: any): Promise<void> {
        let { buildJsGeometry } = await import('./geometry');
        this.widget.filterGeometry =  buildJsGeometry(value);
    }
    async getLayer(): Promise<any> {
        if (!hasValue(this.widget.layer)) {
            return null;
        }
        
        let { buildDotNetLayer } = await import('./layer');
        return await buildDotNetLayer(this.widget.layer);
    }
    async setLayer(value: any): Promise<void> {
        let { buildJsLayer } = await import('./layer');
        this.widget.layer = await  buildJsLayer(value, this.layerId, this.viewId);
    }
    async getLayerView(): Promise<any> {
        if (!hasValue(this.widget.layerView)) {
            return null;
        }
        
        let { buildDotNetLayerView } = await import('./layerView');
        return await buildDotNetLayerView(this.widget.layerView);
    }
    async getMenuConfig(): Promise<any> {
        if (!hasValue(this.widget.menuConfig)) {
            return null;
        }
        
        let { buildDotNetTableMenuConfig } = await import('./tableMenuConfig');
        return await buildDotNetTableMenuConfig(this.widget.menuConfig);
    }
    async setMenuConfig(value: any): Promise<void> {
        let { buildJsTableMenuConfig } = await import('./tableMenuConfig');
        this.widget.menuConfig = await  buildJsTableMenuConfig(value, this.layerId, this.viewId);
    }
    async getTimeExtent(): Promise<any> {
        if (!hasValue(this.widget.timeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.widget.timeExtent);
    }
    async setTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.widget.timeExtent = await  buildJsTimeExtent(value, this.layerId, this.viewId);
    }
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetFeatureTableViewModel } = await import('./featureTableViewModel');
        return await buildDotNetFeatureTableViewModel(this.widget.viewModel);
    }
    async setViewModel(value: any): Promise<void> {
        let { buildJsFeatureTableViewModel } = await import('./featureTableViewModel');
        this.widget.viewModel = await  buildJsFeatureTableViewModel(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}

export async function buildJsFeatureTableWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureTable = new FeatureTable();
    if (hasValue(dotNetObject.filterGeometry)) {
        let { buildJsGeometry } = await import('./geometry');
        jsFeatureTable.filterGeometry = buildJsGeometry(dotNetObject.filterGeometry) as any;
    }
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsFeatureTable.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.menuConfig)) {
        let { buildJsTableMenuConfig } = await import('./tableMenuConfig');
        jsFeatureTable.menuConfig = await buildJsTableMenuConfig(dotNetObject.menuConfig, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        jsFeatureTable.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsFeatureTableViewModel } = await import('./featureTableViewModel');
        jsFeatureTable.viewModel = await buildJsFeatureTableViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.actionColumnConfig)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedActionColumnConfig } = dotNetObject.actionColumnConfig;
        jsFeatureTable.actionColumnConfig = sanitizedActionColumnConfig;
    }
    if (hasValue(dotNetObject.attachmentsEnabled)) {
        jsFeatureTable.attachmentsEnabled = dotNetObject.attachmentsEnabled;
    }
    if (hasValue(dotNetObject.autoRefreshEnabled)) {
        jsFeatureTable.autoRefreshEnabled = dotNetObject.autoRefreshEnabled;
    }
    if (hasValue(dotNetObject.columnReorderingEnabled)) {
        jsFeatureTable.columnReorderingEnabled = dotNetObject.columnReorderingEnabled;
    }
    if (hasValue(dotNetObject.description)) {
        jsFeatureTable.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.disabled)) {
        jsFeatureTable.disabled = dotNetObject.disabled;
    }
    if (hasValue(dotNetObject.editingEnabled)) {
        jsFeatureTable.editingEnabled = dotNetObject.editingEnabled;
    }
    if (hasValue(dotNetObject.filterBySelectionEnabled)) {
        jsFeatureTable.filterBySelectionEnabled = dotNetObject.filterBySelectionEnabled;
    }
    if (hasValue(dotNetObject.hiddenFields)) {
        jsFeatureTable.hiddenFields = dotNetObject.hiddenFields;
    }
    if (hasValue(dotNetObject.highlightEnabled)) {
        jsFeatureTable.highlightEnabled = dotNetObject.highlightEnabled;
    }
    if (hasValue(dotNetObject.highlightIds)) {
        jsFeatureTable.highlightIds = dotNetObject.highlightIds;
    }
    if (hasValue(dotNetObject.multipleSelectionEnabled)) {
        jsFeatureTable.multipleSelectionEnabled = dotNetObject.multipleSelectionEnabled;
    }
    if (hasValue(dotNetObject.multiSortEnabled)) {
        jsFeatureTable.multiSortEnabled = dotNetObject.multiSortEnabled;
    }
    if (hasValue(dotNetObject.objectIds)) {
        jsFeatureTable.objectIds = dotNetObject.objectIds;
    }
    if (hasValue(dotNetObject.pageSize)) {
        jsFeatureTable.pageSize = dotNetObject.pageSize;
    }
    if (hasValue(dotNetObject.relatedRecordsEnabled)) {
        jsFeatureTable.relatedRecordsEnabled = dotNetObject.relatedRecordsEnabled;
    }
    if (hasValue(dotNetObject.returnGeometryEnabled)) {
        jsFeatureTable.returnGeometryEnabled = dotNetObject.returnGeometryEnabled;
    }
    if (hasValue(dotNetObject.returnMEnabled)) {
        jsFeatureTable.returnMEnabled = dotNetObject.returnMEnabled;
    }
    if (hasValue(dotNetObject.returnZEnabled)) {
        jsFeatureTable.returnZEnabled = dotNetObject.returnZEnabled;
    }
    if (hasValue(dotNetObject.rowHighlightIds)) {
        jsFeatureTable.rowHighlightIds = dotNetObject.rowHighlightIds;
    }
    if (hasValue(dotNetObject.tableTemplate)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedTableTemplate } = dotNetObject.tableTemplate;
        jsFeatureTable.tableTemplate = sanitizedTableTemplate;
    }
    if (hasValue(dotNetObject.timeZone)) {
        jsFeatureTable.timeZone = dotNetObject.timeZone;
    }
    if (hasValue(dotNetObject.title)) {
        jsFeatureTable.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.view)) {
        jsFeatureTable.view = dotNetObject.view;
    }
    if (hasValue(dotNetObject.visibleElements)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedVisibleElements } = dotNetObject.visibleElements;
        jsFeatureTable.visibleElements = sanitizedVisibleElements;
    }
    jsFeatureTable.on('cell-click', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCellClick', evt);
    });
    
    jsFeatureTable.on('cell-keydown', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCellKeydown', evt);
    });
    
    jsFeatureTable.on('cell-pointerout', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCellPointerout', evt);
    });
    
    jsFeatureTable.on('cell-pointerover', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCellPointerover', evt);
    });
    

    let { default: FeatureTableWidgetWrapper } = await import('./featureTableWidget');
    let featureTableWidgetWrapper = new FeatureTableWidgetWrapper(jsFeatureTable);
    featureTableWidgetWrapper.geoBlazorId = dotNetObject.id;
    featureTableWidgetWrapper.viewId = viewId;
    featureTableWidgetWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(featureTableWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = featureTableWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureTable;
    let { buildDotNetFeatureTableWidget } = await import('./featureTableWidget');
    let dnInstantiatedObject = await buildDotNetFeatureTableWidget(jsFeatureTable);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureTableWidget', e);
    }
    
    return jsFeatureTable;
}
export async function buildDotNetFeatureTableWidgetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureTableWidget: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.filterGeometry)) {
            let { buildDotNetGeometry } = await import('./geometry');
            dotNetFeatureTableWidget.filterGeometry = buildDotNetGeometry(jsObject.filterGeometry);
        }
        if (hasValue(jsObject.layerView)) {
            let { buildDotNetLayerView } = await import('./layerView');
            dotNetFeatureTableWidget.layerView = await buildDotNetLayerView(jsObject.layerView);
        }
        if (hasValue(jsObject.menuConfig)) {
            let { buildDotNetTableMenuConfig } = await import('./tableMenuConfig');
            dotNetFeatureTableWidget.menuConfig = await buildDotNetTableMenuConfig(jsObject.menuConfig);
        }
        if (hasValue(jsObject.timeExtent)) {
            let { buildDotNetTimeExtent } = await import('./timeExtent');
            dotNetFeatureTableWidget.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
        }
        if (hasValue(jsObject.viewModel)) {
            let { buildDotNetFeatureTableViewModel } = await import('./featureTableViewModel');
            dotNetFeatureTableWidget.viewModel = await buildDotNetFeatureTableViewModel(jsObject.viewModel);
        }
        if (hasValue(jsObject.actionColumnConfig)) {
            dotNetFeatureTableWidget.actionColumnConfig = jsObject.actionColumnConfig;
        }
        if (hasValue(jsObject.activeFilters)) {
            dotNetFeatureTableWidget.activeFilters = jsObject.activeFilters;
        }
        if (hasValue(jsObject.activeSortOrders)) {
            dotNetFeatureTableWidget.activeSortOrders = jsObject.activeSortOrders;
        }
        if (hasValue(jsObject.attachmentsEnabled)) {
            dotNetFeatureTableWidget.attachmentsEnabled = jsObject.attachmentsEnabled;
        }
        if (hasValue(jsObject.autoRefreshEnabled)) {
            dotNetFeatureTableWidget.autoRefreshEnabled = jsObject.autoRefreshEnabled;
        }
        if (hasValue(jsObject.columnReorderingEnabled)) {
            dotNetFeatureTableWidget.columnReorderingEnabled = jsObject.columnReorderingEnabled;
        }
        if (hasValue(jsObject.columns)) {
            dotNetFeatureTableWidget.columns = jsObject.columns;
        }
        if (hasValue(jsObject.description)) {
            dotNetFeatureTableWidget.description = jsObject.description;
        }
        if (hasValue(jsObject.disabled)) {
            dotNetFeatureTableWidget.disabled = jsObject.disabled;
        }
        if (hasValue(jsObject.editingEnabled)) {
            dotNetFeatureTableWidget.editingEnabled = jsObject.editingEnabled;
        }
        if (hasValue(jsObject.filterBySelectionEnabled)) {
            dotNetFeatureTableWidget.filterBySelectionEnabled = jsObject.filterBySelectionEnabled;
        }
        if (hasValue(jsObject.hiddenFields)) {
            dotNetFeatureTableWidget.hiddenFields = jsObject.hiddenFields;
        }
        if (hasValue(jsObject.highlightEnabled)) {
            dotNetFeatureTableWidget.highlightEnabled = jsObject.highlightEnabled;
        }
        if (hasValue(jsObject.highlightIds)) {
            dotNetFeatureTableWidget.highlightIds = jsObject.highlightIds;
        }
        if (hasValue(jsObject.layers)) {
            dotNetFeatureTableWidget.layers = jsObject.layers;
        }
        if (hasValue(jsObject.multipleSelectionEnabled)) {
            dotNetFeatureTableWidget.multipleSelectionEnabled = jsObject.multipleSelectionEnabled;
        }
        if (hasValue(jsObject.multiSortEnabled)) {
            dotNetFeatureTableWidget.multiSortEnabled = jsObject.multiSortEnabled;
        }
        if (hasValue(jsObject.objectIds)) {
            dotNetFeatureTableWidget.objectIds = jsObject.objectIds;
        }
        if (hasValue(jsObject.pageSize)) {
            dotNetFeatureTableWidget.pageSize = jsObject.pageSize;
        }
        if (hasValue(jsObject.relatedRecordsEnabled)) {
            dotNetFeatureTableWidget.relatedRecordsEnabled = jsObject.relatedRecordsEnabled;
        }
        if (hasValue(jsObject.returnGeometryEnabled)) {
            dotNetFeatureTableWidget.returnGeometryEnabled = jsObject.returnGeometryEnabled;
        }
        if (hasValue(jsObject.returnMEnabled)) {
            dotNetFeatureTableWidget.returnMEnabled = jsObject.returnMEnabled;
        }
        if (hasValue(jsObject.returnZEnabled)) {
            dotNetFeatureTableWidget.returnZEnabled = jsObject.returnZEnabled;
        }
        if (hasValue(jsObject.rowHighlightIds)) {
            dotNetFeatureTableWidget.rowHighlightIds = jsObject.rowHighlightIds;
        }
        if (hasValue(jsObject.size)) {
            dotNetFeatureTableWidget.size = jsObject.size;
        }
        if (hasValue(jsObject.state)) {
            dotNetFeatureTableWidget.state = jsObject.state;
        }
        if (hasValue(jsObject.tableTemplate)) {
            dotNetFeatureTableWidget.tableTemplate = jsObject.tableTemplate;
        }
        if (hasValue(jsObject.timeZone)) {
            dotNetFeatureTableWidget.timeZone = jsObject.timeZone;
        }
        if (hasValue(jsObject.title)) {
            dotNetFeatureTableWidget.title = jsObject.title;
        }
        if (hasValue(jsObject.type)) {
            dotNetFeatureTableWidget.type = jsObject.type;
        }
        if (hasValue(jsObject.view)) {
            dotNetFeatureTableWidget.view = jsObject.view;
        }
        if (hasValue(jsObject.visibleElements)) {
            dotNetFeatureTableWidget.visibleElements = jsObject.visibleElements;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFeatureTableWidget.id = k;
                break;
            }
        }
    }

    return dotNetFeatureTableWidget;
}

