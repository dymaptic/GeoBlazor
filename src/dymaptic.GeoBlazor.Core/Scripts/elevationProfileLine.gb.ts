// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ElevationProfileLine from '@arcgis/core/widgets/ElevationProfile/ElevationProfileLine';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetElevationProfileLine } from './elevationProfileLine';

export async function buildJsElevationProfileLineGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsElevationProfileLine = new ElevationProfileLine();
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsElevationProfileLine.color = buildJsMapColor(dotNetObject.color) as any;
    }

    if (hasValue(dotNetObject.elevationProfileLineId)) {
        jsElevationProfileLine.id = dotNetObject.elevationProfileLineId;
    }
    if (hasValue(dotNetObject.title)) {
        jsElevationProfileLine.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.viewVisualizationEnabled)) {
        jsElevationProfileLine.viewVisualizationEnabled = dotNetObject.viewVisualizationEnabled;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsElevationProfileLine);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsElevationProfileLine;
    
    let dnInstantiatedObject = await buildDotNetElevationProfileLine(jsElevationProfileLine);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ElevationProfileLine', e);
    }
    
    return jsElevationProfileLine;
}

export async function buildDotNetElevationProfileLineGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetElevationProfileLine: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.color)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetElevationProfileLine.color = buildDotNetMapColor(jsObject.color);
        }
        if (hasValue(jsObject.hoveredPoint)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetElevationProfileLine.hoveredPoint = buildDotNetPoint(jsObject.hoveredPoint);
        }
        if (hasValue(jsObject.id)) {
            dotNetElevationProfileLine.elevationProfileLineId = jsObject.id;
        }
        if (hasValue(jsObject.progress)) {
            dotNetElevationProfileLine.progress = jsObject.progress;
        }
        if (hasValue(jsObject.samples)) {
            dotNetElevationProfileLine.samples = jsObject.samples;
        }
        if (hasValue(jsObject.statistics)) {
            dotNetElevationProfileLine.statistics = jsObject.statistics;
        }
        if (hasValue(jsObject.title)) {
            dotNetElevationProfileLine.title = jsObject.title;
        }
        if (hasValue(jsObject.type)) {
            dotNetElevationProfileLine.type = jsObject.type;
        }
        if (hasValue(jsObject.viewVisualizationEnabled)) {
            dotNetElevationProfileLine.viewVisualizationEnabled = jsObject.viewVisualizationEnabled;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetElevationProfileLine.id = k;
                break;
            }
        }
    }

    return dotNetElevationProfileLine;
}

