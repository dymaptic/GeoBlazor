// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetArcGISImageServiceCapabilitiesMensuration } from './arcGISImageServiceCapabilitiesMensuration';

export async function buildJsArcGISImageServiceCapabilitiesMensurationGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsArcGISImageServiceCapabilitiesMensuration: any = {};

    if (hasValue(dotNetObject.supports3D)) {
        jsArcGISImageServiceCapabilitiesMensuration.supports3D = dotNetObject.supports3D;
    }
    if (hasValue(dotNetObject.supportsAreaAndPerimeter)) {
        jsArcGISImageServiceCapabilitiesMensuration.supportsAreaAndPerimeter = dotNetObject.supportsAreaAndPerimeter;
    }
    if (hasValue(dotNetObject.supportsDistanceAndAngle)) {
        jsArcGISImageServiceCapabilitiesMensuration.supportsDistanceAndAngle = dotNetObject.supportsDistanceAndAngle;
    }
    if (hasValue(dotNetObject.supportsHeightFromBaseAndTop)) {
        jsArcGISImageServiceCapabilitiesMensuration.supportsHeightFromBaseAndTop = dotNetObject.supportsHeightFromBaseAndTop;
    }
    if (hasValue(dotNetObject.supportsHeightFromBaseAndTopShadow)) {
        jsArcGISImageServiceCapabilitiesMensuration.supportsHeightFromBaseAndTopShadow = dotNetObject.supportsHeightFromBaseAndTopShadow;
    }
    if (hasValue(dotNetObject.supportsHeightFromTopAndTopShadow)) {
        jsArcGISImageServiceCapabilitiesMensuration.supportsHeightFromTopAndTopShadow = dotNetObject.supportsHeightFromTopAndTopShadow;
    }
    if (hasValue(dotNetObject.supportsPointOrCentroid)) {
        jsArcGISImageServiceCapabilitiesMensuration.supportsPointOrCentroid = dotNetObject.supportsPointOrCentroid;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsArcGISImageServiceCapabilitiesMensuration);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsArcGISImageServiceCapabilitiesMensuration;
    
    let { buildDotNetArcGISImageServiceCapabilitiesMensuration } = await import('./arcGISImageServiceCapabilitiesMensuration');
    let dnInstantiatedObject = await buildDotNetArcGISImageServiceCapabilitiesMensuration(jsArcGISImageServiceCapabilitiesMensuration);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type ArcGISImageServiceCapabilitiesMensuration detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ArcGISImageServiceCapabilitiesMensuration', e);
    }
    
    return jsArcGISImageServiceCapabilitiesMensuration;
}


export async function buildDotNetArcGISImageServiceCapabilitiesMensurationGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetArcGISImageServiceCapabilitiesMensuration: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.supports3D)) {
        dotNetArcGISImageServiceCapabilitiesMensuration.supports3D = jsObject.supports3D;
    }
    if (hasValue(jsObject.supportsAreaAndPerimeter)) {
        dotNetArcGISImageServiceCapabilitiesMensuration.supportsAreaAndPerimeter = jsObject.supportsAreaAndPerimeter;
    }
    if (hasValue(jsObject.supportsDistanceAndAngle)) {
        dotNetArcGISImageServiceCapabilitiesMensuration.supportsDistanceAndAngle = jsObject.supportsDistanceAndAngle;
    }
    if (hasValue(jsObject.supportsHeightFromBaseAndTop)) {
        dotNetArcGISImageServiceCapabilitiesMensuration.supportsHeightFromBaseAndTop = jsObject.supportsHeightFromBaseAndTop;
    }
    if (hasValue(jsObject.supportsHeightFromBaseAndTopShadow)) {
        dotNetArcGISImageServiceCapabilitiesMensuration.supportsHeightFromBaseAndTopShadow = jsObject.supportsHeightFromBaseAndTopShadow;
    }
    if (hasValue(jsObject.supportsHeightFromTopAndTopShadow)) {
        dotNetArcGISImageServiceCapabilitiesMensuration.supportsHeightFromTopAndTopShadow = jsObject.supportsHeightFromTopAndTopShadow;
    }
    if (hasValue(jsObject.supportsPointOrCentroid)) {
        dotNetArcGISImageServiceCapabilitiesMensuration.supportsPointOrCentroid = jsObject.supportsPointOrCentroid;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetArcGISImageServiceCapabilitiesMensuration.id = geoBlazorId;
    }

    return dotNetArcGISImageServiceCapabilitiesMensuration;
}

