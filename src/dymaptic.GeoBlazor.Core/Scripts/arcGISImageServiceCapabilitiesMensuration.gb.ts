// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetArcGISImageServiceCapabilitiesMensuration } from './arcGISImageServiceCapabilitiesMensuration';

export async function buildJsArcGISImageServiceCapabilitiesMensurationGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsArcGISImageServiceCapabilitiesMensuration: any = {};

    if (hasValue(dotNetObject.supports3D)) {
        jsArcGISImageServiceCapabilitiesMensuration.supports3D = dotNetObject.supports3D;
    }
    if (hasValue(dotNetObject.supportsAreaAndPerimeter)) {
        jsArcGISImageServiceCapabilitiesMensuration.supportsAreaAndPerimeter = dotNetObject.supportsAreaAndPerimeter;
    }
    if (hasValue(dotNetObject.supportsDistanceAndAngle)) {
        jsArcGISImageServiceCapabilitiesMensuration.supportsDistanceAndAngle = dotNetObject.supportsDistanceAndAngle;
    }
    if (hasValue(dotNetObject.supportsHeightFromBaseAndTop)) {
        jsArcGISImageServiceCapabilitiesMensuration.supportsHeightFromBaseAndTop = dotNetObject.supportsHeightFromBaseAndTop;
    }
    if (hasValue(dotNetObject.supportsHeightFromBaseAndTopShadow)) {
        jsArcGISImageServiceCapabilitiesMensuration.supportsHeightFromBaseAndTopShadow = dotNetObject.supportsHeightFromBaseAndTopShadow;
    }
    if (hasValue(dotNetObject.supportsHeightFromTopAndTopShadow)) {
        jsArcGISImageServiceCapabilitiesMensuration.supportsHeightFromTopAndTopShadow = dotNetObject.supportsHeightFromTopAndTopShadow;
    }
    if (hasValue(dotNetObject.supportsPointOrCentroid)) {
        jsArcGISImageServiceCapabilitiesMensuration.supportsPointOrCentroid = dotNetObject.supportsPointOrCentroid;
    }
    
    jsObjectRefs[dotNetObject.id] = jsArcGISImageServiceCapabilitiesMensuration;
    arcGisObjectRefs[dotNetObject.id] = jsArcGISImageServiceCapabilitiesMensuration;
    
    return jsArcGISImageServiceCapabilitiesMensuration;
}


export async function buildDotNetArcGISImageServiceCapabilitiesMensurationGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetArcGISImageServiceCapabilitiesMensuration: any = {};
    
    if (hasValue(jsObject.supports3D)) {
        dotNetArcGISImageServiceCapabilitiesMensuration.supports3D = jsObject.supports3D;
    }
    
    if (hasValue(jsObject.supportsAreaAndPerimeter)) {
        dotNetArcGISImageServiceCapabilitiesMensuration.supportsAreaAndPerimeter = jsObject.supportsAreaAndPerimeter;
    }
    
    if (hasValue(jsObject.supportsDistanceAndAngle)) {
        dotNetArcGISImageServiceCapabilitiesMensuration.supportsDistanceAndAngle = jsObject.supportsDistanceAndAngle;
    }
    
    if (hasValue(jsObject.supportsHeightFromBaseAndTop)) {
        dotNetArcGISImageServiceCapabilitiesMensuration.supportsHeightFromBaseAndTop = jsObject.supportsHeightFromBaseAndTop;
    }
    
    if (hasValue(jsObject.supportsHeightFromBaseAndTopShadow)) {
        dotNetArcGISImageServiceCapabilitiesMensuration.supportsHeightFromBaseAndTopShadow = jsObject.supportsHeightFromBaseAndTopShadow;
    }
    
    if (hasValue(jsObject.supportsHeightFromTopAndTopShadow)) {
        dotNetArcGISImageServiceCapabilitiesMensuration.supportsHeightFromTopAndTopShadow = jsObject.supportsHeightFromTopAndTopShadow;
    }
    
    if (hasValue(jsObject.supportsPointOrCentroid)) {
        dotNetArcGISImageServiceCapabilitiesMensuration.supportsPointOrCentroid = jsObject.supportsPointOrCentroid;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetArcGISImageServiceCapabilitiesMensuration.id = geoBlazorId;
    }

    return dotNetArcGISImageServiceCapabilitiesMensuration;
}

