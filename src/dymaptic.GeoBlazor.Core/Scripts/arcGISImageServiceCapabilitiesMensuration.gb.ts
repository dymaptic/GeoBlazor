// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import ArcGISImageServiceCapabilitiesMensuration = __esri.ArcGISImageServiceCapabilitiesMensuration;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ArcGISImageServiceCapabilitiesMensurationGenerated implements IPropertyWrapper {
    public component: ArcGISImageServiceCapabilitiesMensuration;
    public readonly geoBlazorId: string = '';

    constructor(component: ArcGISImageServiceCapabilitiesMensuration) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}
export async function buildJsArcGISImageServiceCapabilitiesMensurationGenerated(dotNetObject: any): Promise<any> {
    let jsArcGISImageServiceCapabilitiesMensuration = {
        supports3D: dotNetObject.supports3D,
        supportsAreaAndPerimeter: dotNetObject.supportsAreaAndPerimeter,
        supportsDistanceAndAngle: dotNetObject.supportsDistanceAndAngle,
        supportsHeightFromBaseAndTop: dotNetObject.supportsHeightFromBaseAndTop,
        supportsHeightFromBaseAndTopShadow: dotNetObject.supportsHeightFromBaseAndTopShadow,
        supportsHeightFromTopAndTopShadow: dotNetObject.supportsHeightFromTopAndTopShadow,
        supportsPointOrCentroid: dotNetObject.supportsPointOrCentroid,
    }
    let { default: ArcGISImageServiceCapabilitiesMensurationWrapper } = await import('./arcGISImageServiceCapabilitiesMensuration');
    let arcGISImageServiceCapabilitiesMensurationWrapper = new ArcGISImageServiceCapabilitiesMensurationWrapper(jsArcGISImageServiceCapabilitiesMensuration);
    jsArcGISImageServiceCapabilitiesMensuration.id = dotNetObject.id;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(arcGISImageServiceCapabilitiesMensurationWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = arcGISImageServiceCapabilitiesMensurationWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsArcGISImageServiceCapabilitiesMensuration;
    
    return jsArcGISImageServiceCapabilitiesMensuration;
}

export async function buildDotNetArcGISImageServiceCapabilitiesMensurationGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetArcGISImageServiceCapabilitiesMensuration: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetArcGISImageServiceCapabilitiesMensuration.supports3D = jsObject.supports3D;
        dotNetArcGISImageServiceCapabilitiesMensuration.supportsAreaAndPerimeter = jsObject.supportsAreaAndPerimeter;
        dotNetArcGISImageServiceCapabilitiesMensuration.supportsDistanceAndAngle = jsObject.supportsDistanceAndAngle;
        dotNetArcGISImageServiceCapabilitiesMensuration.supportsHeightFromBaseAndTop = jsObject.supportsHeightFromBaseAndTop;
        dotNetArcGISImageServiceCapabilitiesMensuration.supportsHeightFromBaseAndTopShadow = jsObject.supportsHeightFromBaseAndTopShadow;
        dotNetArcGISImageServiceCapabilitiesMensuration.supportsHeightFromTopAndTopShadow = jsObject.supportsHeightFromTopAndTopShadow;
        dotNetArcGISImageServiceCapabilitiesMensuration.supportsPointOrCentroid = jsObject.supportsPointOrCentroid;
    return dotNetArcGISImageServiceCapabilitiesMensuration;
}

