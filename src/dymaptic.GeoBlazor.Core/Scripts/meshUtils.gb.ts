// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import meshUtils = __esri.meshUtils;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class MeshUtilsGenerated implements IPropertyWrapper {
    public component: meshUtils;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: meshUtils) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async convertVertexSpace(mesh: any,
        targetVertexSpace: any,
        options: any): Promise<any> {
        let { buildJsMesh } = await import('./mesh');
        let jsMesh = buildJsMesh(mesh) as any;
        return await this.component.convertVertexSpace(jsMesh,
            targetVertexSpace,
            options);
    }

    async createElevationSampler(mesh: any,
        options: any): Promise<any> {
        let { buildJsMesh } = await import('./mesh');
        let jsMesh = buildJsMesh(mesh) as any;
        let result = await this.component.createElevationSampler(jsMesh,
            options);
        let { buildDotNetElevationSampler } = await import('./elevationSampler');
        return await buildDotNetElevationSampler(result);
    }

    async createFromElevation(source: any,
        extent: any,
        options: any): Promise<any> {
        let { buildJsExtent } = await import('./extent');
        let jsExtent = buildJsExtent(extent) as any;
        return await this.component.createFromElevation(source,
            jsExtent,
            options);
    }

    async georeference(vertexAttributes: any,
        location: any,
        options: any): Promise<any> {
        let { buildJsPoint } = await import('./point');
        let jsLocation = buildJsPoint(location) as any;
        return this.component.georeference(vertexAttributes,
            jsLocation,
            options);
    }

    async merge(geometries: any): Promise<any> {
        let { buildJsMesh } = await import('./mesh');
        let jsGeometries = buildJsMesh(geometries) as any;
        return this.component.merge(jsGeometries);
    }

    async ungeoreference(vertexAttributes: any,
        location: any,
        options: any): Promise<any> {
        let { buildJsPoint } = await import('./point');
        let jsLocation = buildJsPoint(location) as any;
        return this.component.ungeoreference(vertexAttributes,
            jsLocation,
            options);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsMeshUtilsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsmeshUtils: any = {}


    let { default: MeshUtilsWrapper } = await import('./meshUtils');
    let meshUtilsWrapper = new MeshUtilsWrapper(jsmeshUtils);
    meshUtilsWrapper.geoBlazorId = dotNetObject.id;
    meshUtilsWrapper.viewId = viewId;
    meshUtilsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(meshUtilsWrapper);
    jsObjectRefs[dotNetObject.id] = meshUtilsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsmeshUtils;
    let { buildDotNetMeshUtils } = await import('./meshUtils');
    let dnInstantiatedObject = await buildDotNetMeshUtils(jsmeshUtils);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for MeshUtils', e);
    }
    
    return jsmeshUtils;
}
export async function buildDotNetMeshUtilsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMeshUtils: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetMeshUtils.id = k;
                break;
            }
        }
    }

    return dotNetMeshUtils;
}

