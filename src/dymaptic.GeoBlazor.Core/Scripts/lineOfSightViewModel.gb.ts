// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import LineOfSightViewModel from '@arcgis/core/widgets/LineOfSight/LineOfSightViewModel';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class LineOfSightViewModelGenerated implements IPropertyWrapper {
    public component: LineOfSightViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: LineOfSightViewModel) {
        this.component = component;
    }

    // region methods

    unwrap() {
        return this.component;
    }

    async clear(): Promise<void> {
        this.component.clear();
    }

    async continue(): Promise<void> {
        this.component.continue();
    }

    async start(): Promise<void> {
        this.component.start();
    }

    async stop(): Promise<void> {
        this.component.stop();
    }

    // region properties

    async getAnalysis(): Promise<any> {
        if (!hasValue(this.component.analysis)) {
            return null;
        }

        let {buildDotNetLineOfSightAnalysis} = await import('./lineOfSightAnalysis');
        return await buildDotNetLineOfSightAnalysis(this.component.analysis);
    }

    async getObserver(): Promise<any> {
        if (!hasValue(this.component.observer)) {
            return null;
        }

        let {buildDotNetPoint} = await import('./point');
        return buildDotNetPoint(this.component.observer);
    }

    async setObserver(value: any): Promise<void> {
        let {buildJsPoint} = await import('./point');
        this.component.observer = buildJsPoint(value);
    }

    async getTargets(): Promise<any> {
        if (!hasValue(this.component.targets)) {
            return null;
        }

        let {buildDotNetLineOfSightTarget} = await import('./lineOfSightTarget');
        return await Promise.all(this.component.targets.map(async i => await buildDotNetLineOfSightTarget(i)));
    }

    async setTargets(value: any): Promise<void> {
        let {buildJsLineOfSightTarget} = await import('./lineOfSightTarget');
        this.component.targets = await Promise.all(value.map(async i => await buildJsLineOfSightTarget(i, this.layerId, this.viewId))) as any;
    }

    getProperty(prop: string): any {
        return this.component[prop];
    }

    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsLineOfSightViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsLineOfSightViewModel = new LineOfSightViewModel();
    if (hasValue(dotNetObject.observer)) {
        let {buildJsPoint} = await import('./point');
        jsLineOfSightViewModel.observer = buildJsPoint(dotNetObject.observer) as any;
    }
    if (hasValue(dotNetObject.targets)) {
        let {buildJsLineOfSightTarget} = await import('./lineOfSightTarget');
        jsLineOfSightViewModel.targets = await Promise.all(dotNetObject.targets.map(async i => await buildJsLineOfSightTarget(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.view)) {
        jsLineOfSightViewModel.view = dotNetObject.view;
    }

    let {default: LineOfSightViewModelWrapper} = await import('./lineOfSightViewModel');
    let lineOfSightViewModelWrapper = new LineOfSightViewModelWrapper(jsLineOfSightViewModel);
    lineOfSightViewModelWrapper.geoBlazorId = dotNetObject.id;
    lineOfSightViewModelWrapper.viewId = viewId;
    lineOfSightViewModelWrapper.layerId = layerId;

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(lineOfSightViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = lineOfSightViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsLineOfSightViewModel;
    let {buildDotNetLineOfSightViewModel} = await import('./lineOfSightViewModel');
    let dnInstantiatedObject = await buildDotNetLineOfSightViewModel(jsLineOfSightViewModel);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LineOfSightViewModel', e);
    }

    return jsLineOfSightViewModel;
}

export async function buildDotNetLineOfSightViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetLineOfSightViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.analysis)) {
        let {buildDotNetLineOfSightAnalysis} = await import('./lineOfSightAnalysis');
        dotNetLineOfSightViewModel.analysis = await buildDotNetLineOfSightAnalysis(jsObject.analysis);
    }
    if (hasValue(jsObject.observer)) {
        let {buildDotNetPoint} = await import('./point');
        dotNetLineOfSightViewModel.observer = buildDotNetPoint(jsObject.observer);
    }
    if (hasValue(jsObject.targets)) {
        let {buildDotNetLineOfSightTarget} = await import('./lineOfSightTarget');
        dotNetLineOfSightViewModel.targets = await Promise.all(jsObject.targets.map(async i => await buildDotNetLineOfSightTarget(i)));
    }
    if (hasValue(jsObject.state)) {
        dotNetLineOfSightViewModel.state = jsObject.state;
    }
    if (hasValue(jsObject.view)) {
        dotNetLineOfSightViewModel.view = jsObject.view;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLineOfSightViewModel.id = k;
                break;
            }
        }
    }

    return dotNetLineOfSightViewModel;
}

