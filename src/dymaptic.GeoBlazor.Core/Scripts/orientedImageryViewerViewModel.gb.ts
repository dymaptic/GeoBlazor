import {buildDotNetOrientedImageryViewerViewModel} from './orientedImageryViewerViewModel';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import OrientedImageryViewerViewModel from '@arcgis/core/widgets/OrientedImageryViewer/OrientedImageryViewerViewModel';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsOrientedImageryViewerViewModelGenerated(dotNetObject: any): Promise<any> {
    let jsOrientedImageryViewerViewModel = new OrientedImageryViewerViewModel();
    if (hasValue(dotNetObject.layer)) {
        let {buildJsOrientedImageryLayer} = await import('./orientedImageryLayer');
        jsOrientedImageryViewerViewModel.layer = await buildJsOrientedImageryLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.brightness)) {
        jsOrientedImageryViewerViewModel.brightness = dotNetObject.brightness;
    }
    if (hasValue(dotNetObject.contrast)) {
        jsOrientedImageryViewerViewModel.contrast = dotNetObject.contrast;
    }
    if (hasValue(dotNetObject.currentCoverageVisible)) {
        jsOrientedImageryViewerViewModel.currentCoverageVisible = dotNetObject.currentCoverageVisible;
    }
    if (hasValue(dotNetObject.disabled)) {
        jsOrientedImageryViewerViewModel.disabled = dotNetObject.disabled;
    }
    if (hasValue(dotNetObject.imageGalleryEnabled)) {
        jsOrientedImageryViewerViewModel.imageGalleryEnabled = dotNetObject.imageGalleryEnabled;
    }
    if (hasValue(dotNetObject.imageLoaded)) {
        jsOrientedImageryViewerViewModel.imageLoaded = dotNetObject.imageLoaded;
    }
    if (hasValue(dotNetObject.isAdditionalCoverageVisible)) {
        jsOrientedImageryViewerViewModel.isAdditionalCoverageVisible = dotNetObject.isAdditionalCoverageVisible;
    }
    if (hasValue(dotNetObject.isAdditionalPointSourcesVisible)) {
        jsOrientedImageryViewerViewModel.isAdditionalPointSourcesVisible = dotNetObject.isAdditionalPointSourcesVisible;
    }
    if (hasValue(dotNetObject.mapImageConversionToolState)) {
        jsOrientedImageryViewerViewModel.mapImageConversionToolState = dotNetObject.mapImageConversionToolState;
    }
    if (hasValue(dotNetObject.sharpness)) {
        jsOrientedImageryViewerViewModel.sharpness = dotNetObject.sharpness;
    }

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsOrientedImageryViewerViewModel);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsOrientedImageryViewerViewModel;

    let dnInstantiatedObject = await buildDotNetOrientedImageryViewerViewModel(jsOrientedImageryViewerViewModel);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for OrientedImageryViewerViewModel', e);
    }

    return jsOrientedImageryViewerViewModel;
}

export async function buildDotNetOrientedImageryViewerViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetOrientedImageryViewerViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.brightness)) {
        dotNetOrientedImageryViewerViewModel.brightness = jsObject.brightness;
    }
    if (hasValue(jsObject.contrast)) {
        dotNetOrientedImageryViewerViewModel.contrast = jsObject.contrast;
    }
    if (hasValue(jsObject.currentCoverageVisible)) {
        dotNetOrientedImageryViewerViewModel.currentCoverageVisible = jsObject.currentCoverageVisible;
    }
    if (hasValue(jsObject.disabled)) {
        dotNetOrientedImageryViewerViewModel.disabled = jsObject.disabled;
    }
    if (hasValue(jsObject.imageGalleryEnabled)) {
        dotNetOrientedImageryViewerViewModel.imageGalleryEnabled = jsObject.imageGalleryEnabled;
    }
    if (hasValue(jsObject.imageLoaded)) {
        dotNetOrientedImageryViewerViewModel.imageLoaded = jsObject.imageLoaded;
    }
    if (hasValue(jsObject.isAdditionalCoverageVisible)) {
        dotNetOrientedImageryViewerViewModel.isAdditionalCoverageVisible = jsObject.isAdditionalCoverageVisible;
    }
    if (hasValue(jsObject.isAdditionalPointSourcesVisible)) {
        dotNetOrientedImageryViewerViewModel.isAdditionalPointSourcesVisible = jsObject.isAdditionalPointSourcesVisible;
    }
    if (hasValue(jsObject.mapImageConversionToolState)) {
        dotNetOrientedImageryViewerViewModel.mapImageConversionToolState = jsObject.mapImageConversionToolState;
    }
    if (hasValue(jsObject.sharpness)) {
        dotNetOrientedImageryViewerViewModel.sharpness = jsObject.sharpness;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetOrientedImageryViewerViewModel.id = k;
                break;
            }
        }
    }

    return dotNetOrientedImageryViewerViewModel;
}

