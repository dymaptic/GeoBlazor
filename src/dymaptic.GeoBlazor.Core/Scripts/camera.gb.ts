import { buildDotNetCamera } from './camera';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import Camera from '@arcgis/core/Camera';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsCameraGenerated(dotNetObject: any): Promise<any> {
    let jsCamera = new Camera();
    if (hasValue(dotNetObject.position)) {
        let { buildJsPoint } = await import('./point');
        jsCamera.position = buildJsPoint(dotNetObject.position) as any;
    }

    if (hasValue(dotNetObject.fov)) {
        jsCamera.fov = dotNetObject.fov;
    }
    if (hasValue(dotNetObject.heading)) {
        jsCamera.heading = dotNetObject.heading;
    }
    if (hasValue(dotNetObject.layout)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedLayout } = dotNetObject.layout;
        jsCamera.layout = sanitizedLayout;
    }
    if (hasValue(dotNetObject.tilt)) {
        jsCamera.tilt = dotNetObject.tilt;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsCamera);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCamera;
    
    let dnInstantiatedObject = await buildDotNetCamera(jsCamera);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Camera', e);
    }
    
    return jsCamera;
}
export async function buildDotNetCameraGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCamera: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.position)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetCamera.position = buildDotNetPoint(jsObject.position);
        }
        if (hasValue(jsObject.fov)) {
            dotNetCamera.fov = jsObject.fov;
        }
        if (hasValue(jsObject.heading)) {
            dotNetCamera.heading = jsObject.heading;
        }
        if (hasValue(jsObject.layout)) {
            dotNetCamera.layout = jsObject.layout;
        }
        if (hasValue(jsObject.tilt)) {
            dotNetCamera.tilt = jsObject.tilt;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCamera.id = k;
                break;
            }
        }
    }

    return dotNetCamera;
}

