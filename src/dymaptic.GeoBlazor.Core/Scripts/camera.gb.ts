// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Camera from '@arcgis/core/Camera';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCamera } from './camera';

export async function buildJsCameraGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.layout)) {
        let { buildJsCameraLayout } = await import('./cameraLayout');
        properties.layout = await buildJsCameraLayout(dotNetObject.layout, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.position)) {
        let { buildJsPoint } = await import('./point');
        properties.position = buildJsPoint(dotNetObject.position) as any;
    }

    if (hasValue(dotNetObject.fov)) {
        properties.fov = dotNetObject.fov;
    }
    if (hasValue(dotNetObject.heading)) {
        properties.heading = dotNetObject.heading;
    }
    if (hasValue(dotNetObject.tilt)) {
        properties.tilt = dotNetObject.tilt;
    }
    let jsCamera = new Camera(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCamera);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCamera;
    
    let { buildDotNetCamera } = await import('./camera');
    let dnInstantiatedObject = await buildDotNetCamera(jsCamera);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type Camera detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Camera', e);
    }
    
    return jsCamera;
}


export async function buildDotNetCameraGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCamera: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.layout)) {
        let { buildDotNetCameraLayout } = await import('./cameraLayout');
        dotNetCamera.layout = await buildDotNetCameraLayout(jsObject.layout);
    }
    if (hasValue(jsObject.position)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetCamera.position = buildDotNetPoint(jsObject.position);
    }
    if (hasValue(jsObject.fov)) {
        dotNetCamera.fov = jsObject.fov;
    }
    if (hasValue(jsObject.heading)) {
        dotNetCamera.heading = jsObject.heading;
    }
    if (hasValue(jsObject.tilt)) {
        dotNetCamera.tilt = jsObject.tilt;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCamera.id = geoBlazorId;
    }

    return dotNetCamera;
}

