// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Camera from '@arcgis/core/Camera';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCamera } from './camera';

export async function buildJsCameraGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.layout)) {
        let { buildJsCameraLayout } = await import('./cameraLayout');
        properties.layout = await buildJsCameraLayout(dotNetObject.layout, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.position)) {
        let { buildJsPoint } = await import('./point');
        properties.position = buildJsPoint(dotNetObject.position, viewId) as any;
    }

    if (hasValue(dotNetObject.fov)) {
        properties.fov = dotNetObject.fov;
    }
    if (hasValue(dotNetObject.heading)) {
        properties.heading = dotNetObject.heading;
    }
    if (hasValue(dotNetObject.tilt)) {
        properties.tilt = dotNetObject.tilt;
    }
    let jsCamera = new Camera(properties);
    
    jsObjectRefs[dotNetObject.id] = jsCamera;
    arcGisObjectRefs[dotNetObject.id] = jsCamera;
    
    return jsCamera;
}


export async function buildDotNetCameraGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCamera: any = {};
    
    if (hasValue(jsObject.layout)) {
        let { buildDotNetCameraLayout } = await import('./cameraLayout');
        dotNetCamera.layout = await buildDotNetCameraLayout(jsObject.layout, layerId, viewId);
    }
    
    if (hasValue(jsObject.position)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetCamera.position = buildDotNetPoint(jsObject.position, viewId);
    }
    
    if (hasValue(jsObject.fov)) {
        dotNetCamera.fov = jsObject.fov;
    }
    
    if (hasValue(jsObject.heading)) {
        dotNetCamera.heading = jsObject.heading;
    }
    
    if (hasValue(jsObject.tilt)) {
        dotNetCamera.tilt = jsObject.tilt;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCamera.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetCamera.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetCamera.id)) {
        jsObjectRefs[dotNetCamera.id] ??= jsObject;
        arcGisObjectRefs[dotNetCamera.id] ??= jsObject;
    }

    return dotNetCamera;
}

