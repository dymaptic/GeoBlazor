// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Measurement from '@arcgis/core/widgets/Measurement';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, buildJsStreamReference, generateSerializableJson } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class MeasurementWidgetGenerated implements IPropertyWrapper {
    public widget: Measurement;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: Measurement) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {

        if (hasValue(dotNetObject.activeTool)) {
            this.widget.activeTool = dotNetObject.activeTool;
        }
        if (hasValue(dotNetObject.areaUnit)) {
            this.widget.areaUnit = dotNetObject.areaUnit;
        }
        if (hasValue(dotNetObject.icon)) {
            this.widget.icon = dotNetObject.icon;
        }
        if (hasValue(dotNetObject.label)) {
            this.widget.label = dotNetObject.label;
        }
        if (hasValue(dotNetObject.linearUnit)) {
            this.widget.linearUnit = dotNetObject.linearUnit;
        }
        if (hasValue(dotNetObject.visible)) {
            this.widget.visible = dotNetObject.visible;
        }
        if (hasValue(dotNetObject.widgetId)) {
            this.widget.id = dotNetObject.widgetId;
        }
    }
    
    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async clear(): Promise<void> {
        this.widget.clear();
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async render(): Promise<any> {
        let result = this.widget.render();
        
        return generateSerializableJson(result);
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async startMeasurement(): Promise<void> {
        this.widget.startMeasurement();
    }

    async when(callback: any,
        errback: any): Promise<any> {
        let result = await this.widget.when(callback,
            errback);
        
        return generateSerializableJson(result);
    }

    // region properties
    
    getIcon(): any {
        if (!hasValue(this.widget.icon)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.icon);
    }
    
    setIcon(value: any): void {
        this.widget.icon = JSON.parse(value);
    }
    
    getLabel(): any {
        if (!hasValue(this.widget.label)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.label);
    }
    
    setLabel(value: any): void {
        this.widget.label = JSON.parse(value);
    }
    
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetMeasurementViewModel } = await import('./measurementViewModel');
        return await buildDotNetMeasurementViewModel(this.widget.viewModel, this.viewId);
    }
    
    async setViewModel(value: any): Promise<void> {
        let { buildJsMeasurementViewModel } = await import('./measurementViewModel');
        this.widget.viewModel = await  buildJsMeasurementViewModel(value, this.layerId, this.viewId);
    }
    
    getWidgetId(): any {
        if (!hasValue(this.widget.id)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.id);
    }
    
    setWidgetId(value: any): void {
        this.widget.id = JSON.parse(value);
    }
    
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsMeasurementWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsMeasurementViewModel } = await import('./measurementViewModel');
        properties.viewModel = await buildJsMeasurementViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.activeTool)) {
        properties.activeTool = dotNetObject.activeTool;
    }
    if (hasValue(dotNetObject.areaUnit)) {
        properties.areaUnit = dotNetObject.areaUnit;
    }
    if (hasValue(dotNetObject.icon)) {
        properties.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.linearUnit)) {
        properties.linearUnit = dotNetObject.linearUnit;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    if (hasValue(dotNetObject.widgetId)) {
        properties.id = dotNetObject.widgetId;
    }
    let jsMeasurement = new Measurement(properties);

    let { default: MeasurementWidgetWrapper } = await import('./measurementWidget');
    let measurementWidgetWrapper = new MeasurementWidgetWrapper(jsMeasurement);
    measurementWidgetWrapper.geoBlazorId = dotNetObject.id;
    measurementWidgetWrapper.viewId = viewId;
    measurementWidgetWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = measurementWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsMeasurement;
    
    try {
        let jsObjectRef = DotNet.createJSObjectReference(measurementWidgetWrapper);
        let { buildDotNetMeasurementWidget } = await import('./measurementWidget');
        let dnInstantiatedObject = await buildDotNetMeasurementWidget(jsMeasurement, viewId);

        let dnStream = buildJsStreamReference(dnInstantiatedObject);
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, dnStream);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for MeasurementWidget', e);
    }
    
    return jsMeasurement;
}


export async function buildDotNetMeasurementWidgetGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMeasurementWidget: any = {};
    
    if (hasValue(jsObject.viewModel)) {
        let { buildDotNetMeasurementViewModel } = await import('./measurementViewModel');
        dotNetMeasurementWidget.viewModel = await buildDotNetMeasurementViewModel(jsObject.viewModel, viewId);
    }
    
    if (hasValue(jsObject.activeTool)) {
        dotNetMeasurementWidget.activeTool = removeCircularReferences(jsObject.activeTool);
    }
    
    if (hasValue(jsObject.activeWidget)) {
        dotNetMeasurementWidget.activeWidget = removeCircularReferences(jsObject.activeWidget);
    }
    
    if (hasValue(jsObject.areaUnit)) {
        dotNetMeasurementWidget.areaUnit = removeCircularReferences(jsObject.areaUnit);
    }
    
    if (hasValue(jsObject.icon)) {
        dotNetMeasurementWidget.icon = jsObject.icon;
    }
    
    if (hasValue(jsObject.label)) {
        dotNetMeasurementWidget.label = jsObject.label;
    }
    
    if (hasValue(jsObject.linearUnit)) {
        dotNetMeasurementWidget.linearUnit = removeCircularReferences(jsObject.linearUnit);
    }
    
    if (hasValue(jsObject.type)) {
        dotNetMeasurementWidget.type = removeCircularReferences(jsObject.type);
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetMeasurementWidget.visible = jsObject.visible;
    }
    
    if (hasValue(jsObject.id)) {
        dotNetMeasurementWidget.widgetId = jsObject.id;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetMeasurementWidget.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        if (hasValue(dotNetRef)) {
            try {
                dotNetMeasurementWidget.id = await dotNetRef.invokeMethodAsync('GetId');
            } catch (e) {
                console.error('Error invoking GetId for MeasurementWidget', e);
            }
        }
    }
    if (hasValue(dotNetMeasurementWidget.id)) {
        jsObjectRefs[dotNetMeasurementWidget.id] ??= jsObject;
        arcGisObjectRefs[dotNetMeasurementWidget.id] ??= jsObject;
    }

    return dotNetMeasurementWidget;
}

