// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Measurement from '@arcgis/core/widgets/Measurement';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class MeasurementWidgetGenerated implements IPropertyWrapper {
    public widget: Measurement;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: Measurement) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    
    async clear(): Promise<void> {
        this.widget.clear();
    }

    async startMeasurement(): Promise<void> {
        this.widget.startMeasurement();
    }

    // region properties
    
    async getActiveWidget(): Promise<any> {
        if (!hasValue(this.widget.activeWidget)) {
            return null;
        }
        
        let { buildDotNetIMeasurementWidgetActiveWidget } = await import('./iMeasurementWidgetActiveWidget');
        return await buildDotNetIMeasurementWidgetActiveWidget(this.widget.activeWidget);
    }
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetMeasurementViewModel } = await import('./measurementViewModel');
        return await buildDotNetMeasurementViewModel(this.widget.viewModel);
    }
    async setViewModel(value: any): Promise<void> {
        let { buildJsMeasurementViewModel } = await import('./measurementViewModel');
        this.widget.viewModel = await  buildJsMeasurementViewModel(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsMeasurementWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsMeasurement = new Measurement();
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsMeasurementViewModel } = await import('./measurementViewModel');
        jsMeasurement.viewModel = await buildJsMeasurementViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.activeTool)) {
        jsMeasurement.activeTool = dotNetObject.activeTool;
    }
    if (hasValue(dotNetObject.areaUnit)) {
        jsMeasurement.areaUnit = dotNetObject.areaUnit;
    }
    if (hasValue(dotNetObject.linearUnit)) {
        jsMeasurement.linearUnit = dotNetObject.linearUnit;
    }

    let { default: MeasurementWidgetWrapper } = await import('./measurementWidget');
    let measurementWidgetWrapper = new MeasurementWidgetWrapper(jsMeasurement);
    measurementWidgetWrapper.geoBlazorId = dotNetObject.id;
    measurementWidgetWrapper.viewId = viewId;
    measurementWidgetWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(measurementWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = measurementWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsMeasurement;
    let { buildDotNetMeasurementWidget } = await import('./measurementWidget');
    let dnInstantiatedObject = await buildDotNetMeasurementWidget(jsMeasurement);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for MeasurementWidget', e);
    }
    
    return jsMeasurement;
}

export async function buildDotNetMeasurementWidgetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMeasurementWidget: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.activeWidget)) {
            let { buildDotNetIMeasurementWidgetActiveWidget } = await import('./iMeasurementWidgetActiveWidget');
            dotNetMeasurementWidget.activeWidget = await buildDotNetIMeasurementWidgetActiveWidget(jsObject.activeWidget);
        }
        if (hasValue(jsObject.viewModel)) {
            let { buildDotNetMeasurementViewModel } = await import('./measurementViewModel');
            dotNetMeasurementWidget.viewModel = await buildDotNetMeasurementViewModel(jsObject.viewModel);
        }
    if (hasValue(jsObject.activeTool)) {
        dotNetMeasurementWidget.activeTool = jsObject.activeTool;
    }
    if (hasValue(jsObject.areaUnit)) {
        dotNetMeasurementWidget.areaUnit = jsObject.areaUnit;
    }
    if (hasValue(jsObject.linearUnit)) {
        dotNetMeasurementWidget.linearUnit = jsObject.linearUnit;
    }
    if (hasValue(jsObject.type)) {
        dotNetMeasurementWidget.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetMeasurementWidget.id = k;
                break;
            }
        }
    }

    return dotNetMeasurementWidget;
}

