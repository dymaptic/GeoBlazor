// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import symbologyFlow = __esri.symbologyFlow;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SymbologyFlowGenerated implements IPropertyWrapper {
    public component: symbologyFlow;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: symbologyFlow) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async cloneScheme(scheme: any): Promise<any> {
        let { buildJsFlowScheme } = await import('./flowScheme');
        let jsScheme = await buildJsFlowScheme(scheme, this.layerId, this.viewId) as any;
        return this.component.cloneScheme(jsScheme);
    }

    async getSchemeByName(parameters: any): Promise<any> {
        let { buildJsFlowGetSchemeByNameParams } = await import('./flowGetSchemeByNameParams');
        let jsparameters = await buildJsFlowGetSchemeByNameParams(parameters, this.layerId, this.viewId) as any;
        return this.component.getSchemeByName(jsparameters);
    }

    async getSchemes(parameters: any): Promise<any> {
        let { buildJsFlowGetSchemesParams } = await import('./flowGetSchemesParams');
        let jsparameters = await buildJsFlowGetSchemesParams(parameters, this.layerId, this.viewId) as any;
        return this.component.getSchemes(jsparameters);
    }

    async getSchemesByTag(parameters: any): Promise<any> {
        let { buildJsFlowGetSchemesByTagParams } = await import('./flowGetSchemesByTagParams');
        let jsparameters = await buildJsFlowGetSchemesByTagParams(parameters, this.layerId, this.viewId) as any;
        return this.component.getSchemesByTag(jsparameters);
    }

    async getThemes(basemap: any): Promise<any> {
        return this.component.getThemes(basemap);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsSymbologyFlowGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jssymbologyFlow: any = {}


    let { default: SymbologyFlowWrapper } = await import('./symbologyFlow');
    let symbologyFlowWrapper = new SymbologyFlowWrapper(jssymbologyFlow);
    symbologyFlowWrapper.geoBlazorId = dotNetObject.id;
    symbologyFlowWrapper.viewId = viewId;
    symbologyFlowWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(symbologyFlowWrapper);
    jsObjectRefs[dotNetObject.id] = symbologyFlowWrapper;
    arcGisObjectRefs[dotNetObject.id] = jssymbologyFlow;
    let { buildDotNetSymbologyFlow } = await import('./symbologyFlow');
    let dnInstantiatedObject = await buildDotNetSymbologyFlow(jssymbologyFlow);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SymbologyFlow', e);
    }
    
    return jssymbologyFlow;
}
export async function buildDotNetSymbologyFlowGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSymbologyFlow: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSymbologyFlow.id = k;
                break;
            }
        }
    }

    return dotNetSymbologyFlow;
}

