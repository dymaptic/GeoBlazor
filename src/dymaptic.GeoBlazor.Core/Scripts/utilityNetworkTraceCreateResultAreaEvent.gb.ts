import { buildDotNetUtilityNetworkTraceCreateResultAreaEvent } from './utilityNetworkTraceCreateResultAreaEvent';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import UtilityNetworkTraceCreateResultAreaEvent = __esri.UtilityNetworkTraceCreateResultAreaEvent;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsUtilityNetworkTraceCreateResultAreaEventGenerated(dotNetObject: any): Promise<any> {
    let jsUtilityNetworkTraceCreateResultAreaEvent: any = {}
    if (hasValue(dotNetObject.graphic)) {
        let { buildJsGraphic } = await import('./graphic');
        jsUtilityNetworkTraceCreateResultAreaEvent.graphic = buildJsGraphic(dotNetObject.graphic) as any;
    }

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsUtilityNetworkTraceCreateResultAreaEvent);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsUtilityNetworkTraceCreateResultAreaEvent;
    
    let dnInstantiatedObject = await buildDotNetUtilityNetworkTraceCreateResultAreaEvent(jsUtilityNetworkTraceCreateResultAreaEvent);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for UtilityNetworkTraceCreateResultAreaEvent', e);
    }
    
    return jsUtilityNetworkTraceCreateResultAreaEvent;
}
export async function buildDotNetUtilityNetworkTraceCreateResultAreaEventGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUtilityNetworkTraceCreateResultAreaEvent: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.graphic)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetUtilityNetworkTraceCreateResultAreaEvent.graphic = buildDotNetGraphic(jsObject.graphic, layerId, viewId);
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetUtilityNetworkTraceCreateResultAreaEvent.id = k;
                break;
            }
        }
    }

    return dotNetUtilityNetworkTraceCreateResultAreaEvent;
}

