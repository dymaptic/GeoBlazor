// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import size = __esri.size;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SizeGenerated implements IPropertyWrapper {
    public component: size;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: size) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async createAgeRenderer(parameters: any): Promise<any> {
        let { buildJsSizeCreateAgeRendererParams } = await import('./sizeCreateAgeRendererParams');
        let jsparameters = await buildJsSizeCreateAgeRendererParams(parameters, this.layerId, this.viewId) as any;
        return await this.component.createAgeRenderer(jsparameters);
    }

    async createClassBreaksRenderer(parameters: any): Promise<any> {
        let { buildJsSizeCreateClassBreaksRendererParams } = await import('./sizeCreateClassBreaksRendererParams');
        let jsparameters = await buildJsSizeCreateClassBreaksRendererParams(parameters, this.layerId, this.viewId) as any;
        return await this.component.createClassBreaksRenderer(jsparameters);
    }

    async createContinuousRenderer(parameters: any): Promise<any> {
        let { buildJsSizeCreateContinuousRendererParams } = await import('./sizeCreateContinuousRendererParams');
        let jsparameters = await buildJsSizeCreateContinuousRendererParams(parameters, this.layerId, this.viewId) as any;
        return await this.component.createContinuousRenderer(jsparameters);
    }

    async createVisualVariables(parameters: any): Promise<any> {
        let { buildJsSizeCreateVisualVariablesParams } = await import('./sizeCreateVisualVariablesParams');
        let jsparameters = await buildJsSizeCreateVisualVariablesParams(parameters, this.layerId, this.viewId) as any;
        return await this.component.createVisualVariables(jsparameters);
    }

    async updateRendererWithReferenceSize(parameters: any): Promise<any> {
        let { buildJsSizeUpdateRendererWithReferenceSizeParams } = await import('./sizeUpdateRendererWithReferenceSizeParams');
        let jsparameters = await buildJsSizeUpdateRendererWithReferenceSizeParams(parameters, this.layerId, this.viewId) as any;
        return await this.component.updateRendererWithReferenceSize(jsparameters);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsSizeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jssize: any = {}


    let { default: SizeWrapper } = await import('./size');
    let sizeWrapper = new SizeWrapper(jssize);
    sizeWrapper.geoBlazorId = dotNetObject.id;
    sizeWrapper.viewId = viewId;
    sizeWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(sizeWrapper);
    jsObjectRefs[dotNetObject.id] = sizeWrapper;
    arcGisObjectRefs[dotNetObject.id] = jssize;
    let { buildDotNetSize } = await import('./size');
    let dnInstantiatedObject = await buildDotNetSize(jssize);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Size', e);
    }
    
    return jssize;
}
export async function buildDotNetSizeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSize: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSize.id = k;
                break;
            }
        }
    }

    return dotNetSize;
}

