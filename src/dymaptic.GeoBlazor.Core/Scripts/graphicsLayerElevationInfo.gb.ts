// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';

export async function buildJsGraphicsLayerElevationInfoGenerated(dotNetObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsGraphicsLayerElevationInfo: any = {};
    if (hasValue(dotNetObject.featureExpressionInfo)) {
        let { buildJsGraphicsLayerElevationInfoFeatureExpressionInfo } = await import('./graphicsLayerElevationInfoFeatureExpressionInfo');
        jsGraphicsLayerElevationInfo.featureExpressionInfo = await buildJsGraphicsLayerElevationInfoFeatureExpressionInfo(dotNetObject.featureExpressionInfo, viewId) as any;
    }

    if (hasValue(dotNetObject.mode)) {
        jsGraphicsLayerElevationInfo.mode = dotNetObject.mode;
    }
    if (hasValue(dotNetObject.offset)) {
        jsGraphicsLayerElevationInfo.offset = dotNetObject.offset;
    }
    if (hasValue(dotNetObject.unit)) {
        jsGraphicsLayerElevationInfo.unit = dotNetObject.unit;
    }
    
    jsObjectRefs[dotNetObject.id] = jsGraphicsLayerElevationInfo;
    arcGisObjectRefs[dotNetObject.id] = jsGraphicsLayerElevationInfo;
    
    return jsGraphicsLayerElevationInfo;
}


export async function buildDotNetGraphicsLayerElevationInfoGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGraphicsLayerElevationInfo: any = {};
    
    if (hasValue(jsObject.featureExpressionInfo)) {
        let { buildDotNetGraphicsLayerElevationInfoFeatureExpressionInfo } = await import('./graphicsLayerElevationInfoFeatureExpressionInfo');
        dotNetGraphicsLayerElevationInfo.featureExpressionInfo = await buildDotNetGraphicsLayerElevationInfoFeatureExpressionInfo(jsObject.featureExpressionInfo, viewId);
    }
    
    if (hasValue(jsObject.mode)) {
        dotNetGraphicsLayerElevationInfo.mode = removeCircularReferences(jsObject.mode);
    }
    
    if (hasValue(jsObject.offset)) {
        dotNetGraphicsLayerElevationInfo.offset = jsObject.offset;
    }
    
    if (hasValue(jsObject.unit)) {
        dotNetGraphicsLayerElevationInfo.unit = removeCircularReferences(jsObject.unit);
    }
    

    return dotNetGraphicsLayerElevationInfo;
}

