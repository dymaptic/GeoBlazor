// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetGraphicsLayerElevationInfo } from './graphicsLayerElevationInfo';

export async function buildJsGraphicsLayerElevationInfoGenerated(dotNetObject: any): Promise<any> {
    let jsGraphicsLayerElevationInfo: any = {};
    if (hasValue(dotNetObject.featureExpressionInfo)) {
        let { buildJsGraphicsLayerElevationInfoFeatureExpressionInfo } = await import('./graphicsLayerElevationInfoFeatureExpressionInfo');
        jsGraphicsLayerElevationInfo.featureExpressionInfo = await buildJsGraphicsLayerElevationInfoFeatureExpressionInfo(dotNetObject.featureExpressionInfo) as any;
    }

    if (hasValue(dotNetObject.mode)) {
        jsGraphicsLayerElevationInfo.mode = dotNetObject.mode;
    }
    if (hasValue(dotNetObject.offset)) {
        jsGraphicsLayerElevationInfo.offset = dotNetObject.offset;
    }
    if (hasValue(dotNetObject.unit)) {
        jsGraphicsLayerElevationInfo.unit = dotNetObject.unit;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsGraphicsLayerElevationInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsGraphicsLayerElevationInfo;
    
    try {
        let { buildDotNetGraphicsLayerElevationInfo } = await import('./graphicsLayerElevationInfo');
        let dnInstantiatedObject = await buildDotNetGraphicsLayerElevationInfo(jsGraphicsLayerElevationInfo);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type GraphicsLayerElevationInfo detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for GraphicsLayerElevationInfo', e);
    }
    
    return jsGraphicsLayerElevationInfo;
}


export async function buildDotNetGraphicsLayerElevationInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGraphicsLayerElevationInfo: any = {};
    
    if (hasValue(jsObject.featureExpressionInfo)) {
        let { buildDotNetGraphicsLayerElevationInfoFeatureExpressionInfo } = await import('./graphicsLayerElevationInfoFeatureExpressionInfo');
        dotNetGraphicsLayerElevationInfo.featureExpressionInfo = await buildDotNetGraphicsLayerElevationInfoFeatureExpressionInfo(jsObject.featureExpressionInfo);
    }
    
    if (hasValue(jsObject.mode)) {
        dotNetGraphicsLayerElevationInfo.mode = removeCircularReferences(jsObject.mode);
    }
    
    if (hasValue(jsObject.offset)) {
        dotNetGraphicsLayerElevationInfo.offset = jsObject.offset;
    }
    
    if (hasValue(jsObject.unit)) {
        dotNetGraphicsLayerElevationInfo.unit = removeCircularReferences(jsObject.unit);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetGraphicsLayerElevationInfo.id = geoBlazorId;
    }

    return dotNetGraphicsLayerElevationInfo;
}

