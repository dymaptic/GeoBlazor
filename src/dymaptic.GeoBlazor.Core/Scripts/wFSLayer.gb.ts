// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import WFSLayer from '@arcgis/core/layers/WFSLayer';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class WFSLayerGenerated implements IPropertyWrapper {
    public layer: WFSLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: WFSLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    async createLayerView(view: any,
        options: any): Promise<any> {
        return await this.layer.createLayerView(view,
            options);
    }

    async createPopupTemplate(options: any): Promise<any> {
        return this.layer.createPopupTemplate(options);
    }

    async createQuery(): Promise<any> {
        return this.layer.createQuery();
    }

    async fetchAttributionData(): Promise<any> {
        return await this.layer.fetchAttributionData();
    }

    async getField(fieldName: any): Promise<any> {
        return this.layer.getField(fieldName);
    }

    async getFieldDomain(fieldName: any,
        options: any): Promise<any> {
                let { buildJsWFSLayerGetFieldDomainOptions } = await import('./wFSLayerGetFieldDomainOptions');
let jsOptions = await buildJsWFSLayerGetFieldDomainOptions(options, this.layerId, this.viewId) as any;
        return this.layer.getFieldDomain(fieldName,
            jsOptions);
    }

    async queryExtent(query: any,
        options: any): Promise<any> {
                let { buildJsQuery } = await import('./query');
let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.layer.queryExtent(jsQuery,
            options);
    }

    async queryFeatureCount(query: any,
        options: any): Promise<any> {
                let { buildJsQuery } = await import('./query');
let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.layer.queryFeatureCount(jsQuery,
            options);
    }

    async queryFeatures(query: any,
        options: any): Promise<any> {
                let { buildJsQuery } = await import('./query');
let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.layer.queryFeatures(jsQuery,
            options);
    }

    async queryObjectIds(query: any,
        options: any): Promise<any> {
                let { buildJsQuery } = await import('./query');
let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.layer.queryObjectIds(jsQuery,
            options);
    }

    async refresh(): Promise<void> {
        this.layer.refresh();
    }

    // region properties
    
    async getFeatureEffect(): Promise<any> {
        if (!hasValue(this.layer.featureEffect)) {
            return null;
        }
        
        let { buildDotNetFeatureEffect } = await import('./featureEffect');
        return await buildDotNetFeatureEffect(this.layer.featureEffect);
    }
    
    async setFeatureEffect(value: any): Promise<void> {
        let { buildJsFeatureEffect } = await import('./featureEffect');
        this.layer.featureEffect = await  buildJsFeatureEffect(value, this.layerId, this.viewId);
    }
    
    async getFields(): Promise<any> {
        if (!hasValue(this.layer.fields)) {
            return null;
        }
        
        let { buildDotNetField } = await import('./field');
        return this.layer.fields!.map(i => buildDotNetField(i));
    }
    
    async setFields(value: any): Promise<void> {
        let { buildJsField } = await import('./field');
        this.layer.fields = value.map(i => buildJsField(i)) as any;
    }
    
    async getFieldsIndex(): Promise<any> {
        if (!hasValue(this.layer.fieldsIndex)) {
            return null;
        }
        
        let { buildDotNetFieldsIndex } = await import('./fieldsIndex');
        return await buildDotNetFieldsIndex(this.layer.fieldsIndex);
    }
    
    async getLabelingInfo(): Promise<any> {
        if (!hasValue(this.layer.labelingInfo)) {
            return null;
        }
        
        let { buildDotNetLabel } = await import('./label');
        return await Promise.all(this.layer.labelingInfo.map(async i => await buildDotNetLabel(i)));
    }
    
    async setLabelingInfo(value: any): Promise<void> {
        let { buildJsLabel } = await import('./label');
        this.layer.labelingInfo = await Promise.all(value.map(async i => await buildJsLabel(i))) as any;
    }
    
    async getPortalItem(): Promise<any> {
        if (!hasValue(this.layer.portalItem)) {
            return null;
        }
        
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(this.layer.portalItem);
    }
    
    async setPortalItem(value: any): Promise<void> {
        let { buildJsPortalItem } = await import('./portalItem');
        this.layer.portalItem = await  buildJsPortalItem(value, this.layerId, this.viewId);
    }
    
    async getRenderer(): Promise<any> {
        if (!hasValue(this.layer.renderer)) {
            return null;
        }
        
        let { buildDotNetRenderer } = await import('./renderer');
        return await buildDotNetRenderer(this.layer.renderer);
    }
    
    async setRenderer(value: any): Promise<void> {
        let { buildJsRenderer } = await import('./renderer');
        this.layer.renderer = await  buildJsRenderer(value, this.layerId, this.viewId);
    }
    
    async getVisibilityTimeExtent(): Promise<any> {
        if (!hasValue(this.layer.visibilityTimeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.visibilityTimeExtent);
    }
    
    async setVisibilityTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.visibilityTimeExtent = await  buildJsTimeExtent(value, this.layerId, this.viewId);
    }
    
    async getWfsCapabilities(): Promise<any> {
        if (!hasValue(this.layer.wfsCapabilities)) {
            return null;
        }
        
        let { buildDotNetWFSCapabilities } = await import('./wFSCapabilities');
        return await buildDotNetWFSCapabilities(this.layer.wfsCapabilities);
    }
    
    async setWfsCapabilities(value: any): Promise<void> {
        let { buildJsWFSCapabilities } = await import('./wFSCapabilities');
        this.layer.wfsCapabilities = await  buildJsWFSCapabilities(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}


export async function buildJsWFSLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.featureEffect)) {
        let { buildJsFeatureEffect } = await import('./featureEffect');
        properties.featureEffect = await buildJsFeatureEffect(dotNetObject.featureEffect, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.fields)) {
        let { buildJsField } = await import('./field');
        properties.fields = dotNetObject.fields.map(i => buildJsField(i)) as any;
    }
    if (hasValue(dotNetObject.labelingInfo)) {
        let { buildJsLabel } = await import('./label');
        properties.labelingInfo = await Promise.all(dotNetObject.labelingInfo.map(async i => await buildJsLabel(i))) as any;
    }
    if (hasValue(dotNetObject.portalItem)) {
        let { buildJsPortalItem } = await import('./portalItem');
        properties.portalItem = await buildJsPortalItem(dotNetObject.portalItem, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsRenderer } = await import('./renderer');
        properties.renderer = await buildJsRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.visibilityTimeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.wfsCapabilities)) {
        let { buildJsWFSCapabilities } = await import('./wFSCapabilities');
        properties.wfsCapabilities = await buildJsWFSCapabilities(dotNetObject.wfsCapabilities, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.arcGISLayerId)) {
        properties.id = dotNetObject.arcGISLayerId;
    }
    if (hasValue(dotNetObject.blendMode)) {
        properties.blendMode = dotNetObject.blendMode;
    }
    if (hasValue(dotNetObject.copyright)) {
        properties.copyright = dotNetObject.copyright;
    }
    if (hasValue(dotNetObject.customParameters)) {
        properties.customParameters = dotNetObject.customParameters;
    }
    if (hasValue(dotNetObject.definitionExpression)) {
        properties.definitionExpression = dotNetObject.definitionExpression;
    }
    if (hasValue(dotNetObject.displayField)) {
        properties.displayField = dotNetObject.displayField;
    }
    if (hasValue(dotNetObject.effect)) {
        properties.effect = dotNetObject.effect;
    }
    if (hasValue(dotNetObject.elevationInfo)) {
        const { id, dotNetComponentReference, ...sanitizedElevationInfo } = dotNetObject.elevationInfo;
        properties.elevationInfo = sanitizedElevationInfo;
    }
    if (hasValue(dotNetObject.featureReduction)) {
        properties.featureReduction = dotNetObject.featureReduction;
    }
    if (hasValue(dotNetObject.fullExtent)) {
        const { id, dotNetComponentReference, ...sanitizedFullExtent } = dotNetObject.fullExtent;
        properties.fullExtent = sanitizedFullExtent;
    }
    if (hasValue(dotNetObject.geometryType)) {
        properties.geometryType = dotNetObject.geometryType;
    }
    if (hasValue(dotNetObject.labelsVisible)) {
        properties.labelsVisible = dotNetObject.labelsVisible;
    }
    if (hasValue(dotNetObject.legendEnabled)) {
        properties.legendEnabled = dotNetObject.legendEnabled;
    }
    if (hasValue(dotNetObject.listMode)) {
        properties.listMode = dotNetObject.listMode;
    }
    if (hasValue(dotNetObject.maxPageCount)) {
        properties.maxPageCount = dotNetObject.maxPageCount;
    }
    if (hasValue(dotNetObject.maxRecordCount)) {
        properties.maxRecordCount = dotNetObject.maxRecordCount;
    }
    if (hasValue(dotNetObject.maxScale)) {
        properties.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.minScale)) {
        properties.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.name)) {
        properties.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.namespaceUri)) {
        properties.namespaceUri = dotNetObject.namespaceUri;
    }
    if (hasValue(dotNetObject.objectIdField)) {
        properties.objectIdField = dotNetObject.objectIdField;
    }
    if (hasValue(dotNetObject.opacity)) {
        properties.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.orderBy)) {
        const { id, dotNetComponentReference, ...sanitizedOrderBy } = dotNetObject.orderBy;
        properties.orderBy = sanitizedOrderBy;
    }
    if (hasValue(dotNetObject.outFields)) {
        properties.outFields = dotNetObject.outFields;
    }
    if (hasValue(dotNetObject.persistenceEnabled)) {
        properties.persistenceEnabled = dotNetObject.persistenceEnabled;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        properties.popupEnabled = dotNetObject.popupEnabled;
    }
    if (hasValue(dotNetObject.popupTemplate)) {
        const { id, dotNetComponentReference, ...sanitizedPopupTemplate } = dotNetObject.popupTemplate;
        properties.popupTemplate = sanitizedPopupTemplate;
    }
    if (hasValue(dotNetObject.refreshInterval)) {
        properties.refreshInterval = dotNetObject.refreshInterval;
    }
    if (hasValue(dotNetObject.screenSizePerspectiveEnabled)) {
        properties.screenSizePerspectiveEnabled = dotNetObject.screenSizePerspectiveEnabled;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        const { id, dotNetComponentReference, ...sanitizedSpatialReference } = dotNetObject.spatialReference;
        properties.spatialReference = sanitizedSpatialReference;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.url)) {
        properties.url = dotNetObject.url;
    }
    let jsWFSLayer = new WFSLayer(properties);
    jsWFSLayer.on('layerview-create', async (evt: any) => {
        let { buildDotNetLayerViewCreateEvent } = await import('./layerViewCreateEvent');
        let dnEvent = await buildDotNetLayerViewCreateEvent(evt);
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreate', dnEvent);
    });
    
    jsWFSLayer.on('layerview-create-error', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreateError', evt);
    });
    
    jsWFSLayer.on('layerview-destroy', async (evt: any) => {
        let { buildDotNetLayerViewDestroyEvent } = await import('./layerViewDestroyEvent');
        let dnEvent = await buildDotNetLayerViewDestroyEvent(evt);
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsDestroy', dnEvent);
    });
    
    jsWFSLayer.on('refresh', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsRefresh', evt);
    });
    

    let { default: WFSLayerWrapper } = await import('./wFSLayer');
    let wFSLayerWrapper = new WFSLayerWrapper(jsWFSLayer);
    wFSLayerWrapper.geoBlazorId = dotNetObject.id;
    wFSLayerWrapper.viewId = viewId;
    wFSLayerWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(wFSLayerWrapper);
    jsObjectRefs[dotNetObject.id] = wFSLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsWFSLayer;
    
    let { buildDotNetWFSLayer } = await import('./wFSLayer');
    let dnInstantiatedObject = await buildDotNetWFSLayer(jsWFSLayer);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type WFSLayer detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for WFSLayer', e);
    }
    
    return jsWFSLayer;
}


export async function buildDotNetWFSLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWFSLayer: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.featureEffect)) {
        let { buildDotNetFeatureEffect } = await import('./featureEffect');
        dotNetWFSLayer.featureEffect = await buildDotNetFeatureEffect(jsObject.featureEffect);
    }
    if (hasValue(jsObject.fields)) {
        let { buildDotNetField } = await import('./field');
        dotNetWFSLayer.fields = jsObject.fields.map(i => buildDotNetField(i));
    }
    if (hasValue(jsObject.fieldsIndex)) {
        let { buildDotNetFieldsIndex } = await import('./fieldsIndex');
        dotNetWFSLayer.fieldsIndex = await buildDotNetFieldsIndex(jsObject.fieldsIndex);
    }
    if (hasValue(jsObject.labelingInfo)) {
        let { buildDotNetLabel } = await import('./label');
        dotNetWFSLayer.labelingInfo = await Promise.all(jsObject.labelingInfo.map(async i => await buildDotNetLabel(i)));
    }
    if (hasValue(jsObject.portalItem)) {
        let { buildDotNetPortalItem } = await import('./portalItem');
        dotNetWFSLayer.portalItem = await buildDotNetPortalItem(jsObject.portalItem);
    }
    if (hasValue(jsObject.renderer)) {
        let { buildDotNetRenderer } = await import('./renderer');
        dotNetWFSLayer.renderer = await buildDotNetRenderer(jsObject.renderer);
    }
    if (hasValue(jsObject.visibilityTimeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetWFSLayer.visibilityTimeExtent = buildDotNetTimeExtent(jsObject.visibilityTimeExtent);
    }
    if (hasValue(jsObject.wfsCapabilities)) {
        let { buildDotNetWFSCapabilities } = await import('./wFSCapabilities');
        dotNetWFSLayer.wfsCapabilities = await buildDotNetWFSCapabilities(jsObject.wfsCapabilities);
    }
    if (hasValue(jsObject.id)) {
        dotNetWFSLayer.arcGISLayerId = jsObject.id;
    }
    if (hasValue(jsObject.blendMode)) {
        dotNetWFSLayer.blendMode = jsObject.blendMode;
    }
    if (hasValue(jsObject.capabilities)) {
        dotNetWFSLayer.capabilities = jsObject.capabilities;
    }
    if (hasValue(jsObject.copyright)) {
        dotNetWFSLayer.copyright = jsObject.copyright;
    }
    if (hasValue(jsObject.customParameters)) {
        dotNetWFSLayer.customParameters = jsObject.customParameters;
    }
    if (hasValue(jsObject.dateFieldsTimeZone)) {
        dotNetWFSLayer.dateFieldsTimeZone = jsObject.dateFieldsTimeZone;
    }
    if (hasValue(jsObject.definitionExpression)) {
        dotNetWFSLayer.definitionExpression = jsObject.definitionExpression;
    }
    if (hasValue(jsObject.displayField)) {
        dotNetWFSLayer.displayField = jsObject.displayField;
    }
    if (hasValue(jsObject.effect)) {
        dotNetWFSLayer.effect = jsObject.effect;
    }
    if (hasValue(jsObject.elevationInfo)) {
        dotNetWFSLayer.elevationInfo = jsObject.elevationInfo;
    }
    if (hasValue(jsObject.featureReduction)) {
        dotNetWFSLayer.featureReduction = jsObject.featureReduction;
    }
    if (hasValue(jsObject.fullExtent)) {
        dotNetWFSLayer.fullExtent = jsObject.fullExtent;
    }
    if (hasValue(jsObject.geometryType)) {
        dotNetWFSLayer.geometryType = jsObject.geometryType;
    }
    if (hasValue(jsObject.labelsVisible)) {
        dotNetWFSLayer.labelsVisible = jsObject.labelsVisible;
    }
    if (hasValue(jsObject.legendEnabled)) {
        dotNetWFSLayer.legendEnabled = jsObject.legendEnabled;
    }
    if (hasValue(jsObject.listMode)) {
        dotNetWFSLayer.listMode = jsObject.listMode;
    }
    if (hasValue(jsObject.loaded)) {
        dotNetWFSLayer.loaded = jsObject.loaded;
    }
    if (hasValue(jsObject.maxPageCount)) {
        dotNetWFSLayer.maxPageCount = jsObject.maxPageCount;
    }
    if (hasValue(jsObject.maxRecordCount)) {
        dotNetWFSLayer.maxRecordCount = jsObject.maxRecordCount;
    }
    if (hasValue(jsObject.maxScale)) {
        dotNetWFSLayer.maxScale = jsObject.maxScale;
    }
    if (hasValue(jsObject.minScale)) {
        dotNetWFSLayer.minScale = jsObject.minScale;
    }
    if (hasValue(jsObject.name)) {
        dotNetWFSLayer.name = jsObject.name;
    }
    if (hasValue(jsObject.namespaceUri)) {
        dotNetWFSLayer.namespaceUri = jsObject.namespaceUri;
    }
    if (hasValue(jsObject.objectIdField)) {
        dotNetWFSLayer.objectIdField = jsObject.objectIdField;
    }
    if (hasValue(jsObject.opacity)) {
        dotNetWFSLayer.opacity = jsObject.opacity;
    }
    if (hasValue(jsObject.orderBy)) {
        dotNetWFSLayer.orderBy = jsObject.orderBy;
    }
    if (hasValue(jsObject.outFields)) {
        dotNetWFSLayer.outFields = jsObject.outFields;
    }
    if (hasValue(jsObject.persistenceEnabled)) {
        dotNetWFSLayer.persistenceEnabled = jsObject.persistenceEnabled;
    }
    if (hasValue(jsObject.popupEnabled)) {
        dotNetWFSLayer.popupEnabled = jsObject.popupEnabled;
    }
    if (hasValue(jsObject.popupTemplate)) {
        dotNetWFSLayer.popupTemplate = jsObject.popupTemplate;
    }
    if (hasValue(jsObject.refreshInterval)) {
        dotNetWFSLayer.refreshInterval = jsObject.refreshInterval;
    }
    if (hasValue(jsObject.screenSizePerspectiveEnabled)) {
        dotNetWFSLayer.screenSizePerspectiveEnabled = jsObject.screenSizePerspectiveEnabled;
    }
    if (hasValue(jsObject.spatialReference)) {
        dotNetWFSLayer.spatialReference = jsObject.spatialReference;
    }
    if (hasValue(jsObject.title)) {
        dotNetWFSLayer.title = jsObject.title;
    }
    if (hasValue(jsObject.type)) {
        dotNetWFSLayer.type = jsObject.type;
    }
    if (hasValue(jsObject.url)) {
        dotNetWFSLayer.url = jsObject.url;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetWFSLayer.id = k;
                break;
            }
        }
    }

    return dotNetWFSLayer;
}

