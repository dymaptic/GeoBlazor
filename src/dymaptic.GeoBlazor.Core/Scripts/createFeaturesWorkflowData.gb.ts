// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetCreateFeaturesWorkflowData } from './createFeaturesWorkflowData';

export async function buildJsCreateFeaturesWorkflowDataGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCreateFeaturesWorkflowData: any = {}
    if (hasValue(dotNetObject.creationInfo)) {
        let { buildJsCreationInfo } = await import('./creationInfo');
        jsCreateFeaturesWorkflowData.creationInfo = await buildJsCreationInfo(dotNetObject.creationInfo, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.pendingFeatures)) {
        let { buildJsGraphic } = await import('./graphic');
        jsCreateFeaturesWorkflowData.pendingFeatures = dotNetObject.pendingFeatures.map(i => buildJsGraphic(i)) as any;
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsEditorViewModel } = await import('./editorViewModel');
        jsCreateFeaturesWorkflowData.viewModel = await buildJsEditorViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsCreateFeaturesWorkflowData);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCreateFeaturesWorkflowData;
    
    let dnInstantiatedObject = await buildDotNetCreateFeaturesWorkflowData(jsCreateFeaturesWorkflowData);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CreateFeaturesWorkflowData', e);
    }
    
    return jsCreateFeaturesWorkflowData;
}

export async function buildDotNetCreateFeaturesWorkflowDataGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCreateFeaturesWorkflowData: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.creationInfo)) {
            let { buildDotNetCreationInfo } = await import('./creationInfo');
            dotNetCreateFeaturesWorkflowData.creationInfo = await buildDotNetCreationInfo(jsObject.creationInfo);
        }
        if (hasValue(jsObject.pendingFeatures)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetCreateFeaturesWorkflowData.pendingFeatures = jsObject.pendingFeatures.map(i => buildDotNetGraphic(i, layerId, viewId));
        }
        if (hasValue(jsObject.viewModel)) {
            let { buildDotNetEditorViewModel } = await import('./editorViewModel');
            dotNetCreateFeaturesWorkflowData.viewModel = await buildDotNetEditorViewModel(jsObject.viewModel);
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCreateFeaturesWorkflowData.id = k;
                break;
            }
        }
    }

    return dotNetCreateFeaturesWorkflowData;
}

