// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import RouteInfo from '@arcgis/core/rest/support/RouteInfo';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class RouteInfoGenerated implements IPropertyWrapper {
    public component: RouteInfo;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: RouteInfo) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async toGraphic(): Promise<any> {
        return this.component.toGraphic();
    }

    // region properties
    
    async getGeometry(): Promise<any> {
        if (!hasValue(this.component.geometry)) {
            return null;
        }
        
        let { buildDotNetPolyline } = await import('./polyline');
        return buildDotNetPolyline(this.component.geometry);
    }
    async setGeometry(value: any): Promise<void> {
        let { buildJsPolyline } = await import('./polyline');
        this.component.geometry =  buildJsPolyline(value);
    }
    async getPopupTemplate(): Promise<any> {
        if (!hasValue(this.component.popupTemplate)) {
            return null;
        }
        
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        return await buildDotNetPopupTemplate(this.component.popupTemplate);
    }
    async setPopupTemplate(value: any): Promise<void> {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        this.component.popupTemplate =  buildJsPopupTemplate(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsRouteInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsPolyline } = await import('./polyline');
        properties.geometry = buildJsPolyline(dotNetObject.geometry) as any;
    }
    if (hasValue(dotNetObject.popupTemplate)) {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        properties.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.endTime)) {
        properties.endTime = dotNetObject.endTime;
    }
    if (hasValue(dotNetObject.endTimeOffset)) {
        properties.endTimeOffset = dotNetObject.endTimeOffset;
    }
    if (hasValue(dotNetObject.name)) {
        properties.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.startTime)) {
        properties.startTime = dotNetObject.startTime;
    }
    if (hasValue(dotNetObject.startTimeOffset)) {
        properties.startTimeOffset = dotNetObject.startTimeOffset;
    }
    if (hasValue(dotNetObject.totalDistance)) {
        properties.totalDistance = dotNetObject.totalDistance;
    }
    if (hasValue(dotNetObject.totalDuration)) {
        properties.totalDuration = dotNetObject.totalDuration;
    }
    let jsRouteInfo = new RouteInfo(properties);

    let { default: RouteInfoWrapper } = await import('./routeInfo');
    let routeInfoWrapper = new RouteInfoWrapper(jsRouteInfo);
    routeInfoWrapper.geoBlazorId = dotNetObject.id;
    routeInfoWrapper.viewId = viewId;
    routeInfoWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(routeInfoWrapper);
    jsObjectRefs[dotNetObject.id] = routeInfoWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsRouteInfo;
    let { buildDotNetRouteInfo } = await import('./routeInfo');
    let dnInstantiatedObject = await buildDotNetRouteInfo(jsRouteInfo);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RouteInfo', e);
    }
    
    return jsRouteInfo;
}

export async function buildDotNetRouteInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRouteInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.geometry)) {
            let { buildDotNetPolyline } = await import('./polyline');
            dotNetRouteInfo.geometry = buildDotNetPolyline(jsObject.geometry);
        }
        if (hasValue(jsObject.popupTemplate)) {
            let { buildDotNetPopupTemplate } = await import('./popupTemplate');
            dotNetRouteInfo.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
        }
    if (hasValue(jsObject.endTime)) {
        dotNetRouteInfo.endTime = jsObject.endTime;
    }
    if (hasValue(jsObject.endTimeOffset)) {
        dotNetRouteInfo.endTimeOffset = jsObject.endTimeOffset;
    }
    if (hasValue(jsObject.name)) {
        dotNetRouteInfo.name = jsObject.name;
    }
    if (hasValue(jsObject.startTime)) {
        dotNetRouteInfo.startTime = jsObject.startTime;
    }
    if (hasValue(jsObject.startTimeOffset)) {
        dotNetRouteInfo.startTimeOffset = jsObject.startTimeOffset;
    }
    if (hasValue(jsObject.totalDistance)) {
        dotNetRouteInfo.totalDistance = jsObject.totalDistance;
    }
    if (hasValue(jsObject.totalDuration)) {
        dotNetRouteInfo.totalDuration = jsObject.totalDuration;
    }
    if (hasValue(jsObject.type)) {
        dotNetRouteInfo.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRouteInfo.id = k;
                break;
            }
        }
    }

    return dotNetRouteInfo;
}

