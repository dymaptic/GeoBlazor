// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import AttachmentsCapabilitiesOperations = __esri.AttachmentsCapabilitiesOperations;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class AttachmentsCapabilitiesOperationsGenerated implements IPropertyWrapper {
    public component: AttachmentsCapabilitiesOperations;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: AttachmentsCapabilitiesOperations) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsAttachmentsCapabilitiesOperationsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsAttachmentsCapabilitiesOperations: any = {}

    if (hasValue(dotNetObject.add)) {
        jsAttachmentsCapabilitiesOperations.add = dotNetObject.add;
    }
    if (hasValue(dotNetObject.delete)) {
        jsAttachmentsCapabilitiesOperations.delete = dotNetObject.delete;
    }
    if (hasValue(dotNetObject.update)) {
        jsAttachmentsCapabilitiesOperations.update = dotNetObject.update;
    }
    let { default: AttachmentsCapabilitiesOperationsWrapper } = await import('./attachmentsCapabilitiesOperations');
    let attachmentsCapabilitiesOperationsWrapper = new AttachmentsCapabilitiesOperationsWrapper(jsAttachmentsCapabilitiesOperations);
    attachmentsCapabilitiesOperationsWrapper.geoBlazorId = dotNetObject.id;
    attachmentsCapabilitiesOperationsWrapper.viewId = viewId;
    attachmentsCapabilitiesOperationsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(attachmentsCapabilitiesOperationsWrapper);
    jsObjectRefs[dotNetObject.id] = attachmentsCapabilitiesOperationsWrapper;

    arcGisObjectRefs[dotNetObject.id] = jsAttachmentsCapabilitiesOperations;
    let { buildDotNetAttachmentsCapabilitiesOperations } = await import('./attachmentsCapabilitiesOperations');
    let dnInstantiatedObject = await buildDotNetAttachmentsCapabilitiesOperations(jsAttachmentsCapabilitiesOperations);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for AttachmentsCapabilitiesOperations', e);
    }
    
    return jsAttachmentsCapabilitiesOperations;
}

export async function buildDotNetAttachmentsCapabilitiesOperationsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAttachmentsCapabilitiesOperations: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.add)) {
            dotNetAttachmentsCapabilitiesOperations.add = jsObject.add;
        }
        if (hasValue(jsObject.delete)) {
            dotNetAttachmentsCapabilitiesOperations.delete = jsObject.delete;
        }
        if (hasValue(jsObject.update)) {
            dotNetAttachmentsCapabilitiesOperations.update = jsObject.update;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetAttachmentsCapabilitiesOperations.id = k;
                break;
            }
        }
    }

    return dotNetAttachmentsCapabilitiesOperations;
}

