// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetAttachmentsCapabilitiesOperations } from './attachmentsCapabilitiesOperations';

export async function buildJsAttachmentsCapabilitiesOperationsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsAttachmentsCapabilitiesOperations: any = {};

    if (hasValue(dotNetObject.add)) {
        jsAttachmentsCapabilitiesOperations.add = dotNetObject.add;
    }
    if (hasValue(dotNetObject.delete)) {
        jsAttachmentsCapabilitiesOperations.delete = dotNetObject.delete;
    }
    if (hasValue(dotNetObject.update)) {
        jsAttachmentsCapabilitiesOperations.update = dotNetObject.update;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsAttachmentsCapabilitiesOperations);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsAttachmentsCapabilitiesOperations;
    
    let { buildDotNetAttachmentsCapabilitiesOperations } = await import('./attachmentsCapabilitiesOperations');
    let dnInstantiatedObject = await buildDotNetAttachmentsCapabilitiesOperations(jsAttachmentsCapabilitiesOperations, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type AttachmentsCapabilitiesOperations detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for AttachmentsCapabilitiesOperations', e);
    }
    
    return jsAttachmentsCapabilitiesOperations;
}


export async function buildDotNetAttachmentsCapabilitiesOperationsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsAttachmentsCapabilitiesOperations } = await import('./attachmentsCapabilitiesOperations');
        jsComponentRef = await buildJsAttachmentsCapabilitiesOperations(jsObject, layerId, viewId);
    }
    
    let dotNetAttachmentsCapabilitiesOperations: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.add)) {
        dotNetAttachmentsCapabilitiesOperations.add = jsObject.add;
    }
    if (hasValue(jsObject.delete)) {
        dotNetAttachmentsCapabilitiesOperations.delete = jsObject.delete;
    }
    if (hasValue(jsObject.update)) {
        dotNetAttachmentsCapabilitiesOperations.update = jsObject.update;
    }


    if (hasValue(geoBlazorId)) {
        dotNetAttachmentsCapabilitiesOperations.id = geoBlazorId;
    }

    return dotNetAttachmentsCapabilitiesOperations;
}

