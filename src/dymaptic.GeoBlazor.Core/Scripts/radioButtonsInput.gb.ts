// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import RadioButtonsInput from '@arcgis/core/form/elements/inputs/RadioButtonsInput';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetRadioButtonsInput } from './radioButtonsInput';

export async function buildJsRadioButtonsInputGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.noValueOptionLabel)) {
        properties.noValueOptionLabel = dotNetObject.noValueOptionLabel;
    }
    if (hasValue(dotNetObject.showNoValueOption)) {
        properties.showNoValueOption = dotNetObject.showNoValueOption;
    }
    let jsRadioButtonsInput = new RadioButtonsInput(properties);
    
    jsObjectRefs[dotNetObject.id] = jsRadioButtonsInput;
    arcGisObjectRefs[dotNetObject.id] = jsRadioButtonsInput;
    
    return jsRadioButtonsInput;
}


export async function buildDotNetRadioButtonsInputGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRadioButtonsInput: any = {};
    
    if (hasValue(jsObject.noValueOptionLabel)) {
        dotNetRadioButtonsInput.noValueOptionLabel = jsObject.noValueOptionLabel;
    }
    
    if (hasValue(jsObject.showNoValueOption)) {
        dotNetRadioButtonsInput.showNoValueOption = jsObject.showNoValueOption;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetRadioButtonsInput.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetRadioButtonsInput.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetRadioButtonsInput.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetRadioButtonsInput.id)) {
        jsObjectRefs[dotNetRadioButtonsInput.id] ??= jsObject;
        arcGisObjectRefs[dotNetRadioButtonsInput.id] ??= jsObject;
    }

    return dotNetRadioButtonsInput;
}

