// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import RadioButtonsInput from '@arcgis/core/form/elements/inputs/RadioButtonsInput';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetRadioButtonsInput } from './radioButtonsInput';

export async function buildJsRadioButtonsInputGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.noValueOptionLabel)) {
        properties.noValueOptionLabel = dotNetObject.noValueOptionLabel;
    }
    if (hasValue(dotNetObject.showNoValueOption)) {
        properties.showNoValueOption = dotNetObject.showNoValueOption;
    }
    let jsRadioButtonsInput = new RadioButtonsInput(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsRadioButtonsInput);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRadioButtonsInput;
    
    try {
        let { buildDotNetRadioButtonsInput } = await import('./radioButtonsInput');
        let dnInstantiatedObject = await buildDotNetRadioButtonsInput(jsRadioButtonsInput, layerId, viewId);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type RadioButtonsInput detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RadioButtonsInput', e);
    }
    
    return jsRadioButtonsInput;
}


export async function buildDotNetRadioButtonsInputGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRadioButtonsInput: any = {};
    
    if (hasValue(jsObject.noValueOptionLabel)) {
        dotNetRadioButtonsInput.noValueOptionLabel = jsObject.noValueOptionLabel;
    }
    
    if (hasValue(jsObject.showNoValueOption)) {
        dotNetRadioButtonsInput.showNoValueOption = jsObject.showNoValueOption;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetRadioButtonsInput.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetRadioButtonsInput.id = geoBlazorId;
    }

    return dotNetRadioButtonsInput;
}

