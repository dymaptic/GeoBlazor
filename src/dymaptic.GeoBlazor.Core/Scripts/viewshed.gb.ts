// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Viewshed from '@arcgis/core/analysis/Viewshed';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetViewshed } from './viewshed';

export async function buildJsViewshedGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsViewshed = new Viewshed();
    if (hasValue(dotNetObject.observer)) {
        let { buildJsPoint } = await import('./point');
        jsViewshed.observer = buildJsPoint(dotNetObject.observer) as any;
    }

    if (hasValue(dotNetObject.farDistance)) {
        jsViewshed.farDistance = dotNetObject.farDistance;
    }
    if (hasValue(dotNetObject.heading)) {
        jsViewshed.heading = dotNetObject.heading;
    }
    if (hasValue(dotNetObject.horizontalFieldOfView)) {
        jsViewshed.horizontalFieldOfView = dotNetObject.horizontalFieldOfView;
    }
    if (hasValue(dotNetObject.tilt)) {
        jsViewshed.tilt = dotNetObject.tilt;
    }
    if (hasValue(dotNetObject.verticalFieldOfView)) {
        jsViewshed.verticalFieldOfView = dotNetObject.verticalFieldOfView;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsViewshed);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsViewshed;
    
    let dnInstantiatedObject = await buildDotNetViewshed(jsViewshed);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Viewshed', e);
    }
    
    return jsViewshed;
}

export async function buildDotNetViewshedGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetViewshed: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.observer)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetViewshed.observer = buildDotNetPoint(jsObject.observer);
        }
    if (hasValue(jsObject.farDistance)) {
        dotNetViewshed.farDistance = jsObject.farDistance;
    }
    if (hasValue(jsObject.heading)) {
        dotNetViewshed.heading = jsObject.heading;
    }
    if (hasValue(jsObject.horizontalFieldOfView)) {
        dotNetViewshed.horizontalFieldOfView = jsObject.horizontalFieldOfView;
    }
    if (hasValue(jsObject.tilt)) {
        dotNetViewshed.tilt = jsObject.tilt;
    }
    if (hasValue(jsObject.verticalFieldOfView)) {
        dotNetViewshed.verticalFieldOfView = jsObject.verticalFieldOfView;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetViewshed.id = k;
                break;
            }
        }
    }

    return dotNetViewshed;
}

