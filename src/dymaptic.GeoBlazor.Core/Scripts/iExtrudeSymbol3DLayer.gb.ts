// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ExtrudeSymbol3DLayer from '@arcgis/core/symbols/ExtrudeSymbol3DLayer';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class IExtrudeSymbol3DLayerGenerated implements IPropertyWrapper {
    public layer: ExtrudeSymbol3DLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: ExtrudeSymbol3DLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    // region properties
    
    async getEdges(): Promise<any> {
        if (!hasValue(this.layer.edges)) {
            return null;
        }
        
        let { buildDotNetEdges3D } = await import('./edges3D');
        return buildDotNetEdges3D(this.layer.edges);
    }
    
    async setEdges(value: any): Promise<void> {
        let { buildJsEdges3D } = await import('./edges3D');
        this.layer.edges =  buildJsEdges3D(value);
    }
    
    async getMaterial(): Promise<any> {
        if (!hasValue(this.layer.material)) {
            return null;
        }
        
        let { buildDotNetExtrudeSymbol3DLayerMaterial } = await import('./extrudeSymbol3DLayerMaterial');
        return await buildDotNetExtrudeSymbol3DLayerMaterial(this.layer.material);
    }
    
    async setMaterial(value: any): Promise<void> {
        let { buildJsExtrudeSymbol3DLayerMaterial } = await import('./extrudeSymbol3DLayerMaterial');
        this.layer.material = await  buildJsExtrudeSymbol3DLayerMaterial(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}


export async function buildJsIExtrudeSymbol3DLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.edges)) {
        let { buildJsEdges3D } = await import('./edges3D');
        properties.edges = buildJsEdges3D(dotNetObject.edges) as any;
    }
    if (hasValue(dotNetObject.material)) {
        let { buildJsExtrudeSymbol3DLayerMaterial } = await import('./extrudeSymbol3DLayerMaterial');
        properties.material = await buildJsExtrudeSymbol3DLayerMaterial(dotNetObject.material, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.castShadows)) {
        properties.castShadows = dotNetObject.castShadows;
    }
    if (hasValue(dotNetObject.size)) {
        properties.size = dotNetObject.size;
    }
    let jsExtrudeSymbol3DLayer = new ExtrudeSymbol3DLayer(properties);

    let { default: IExtrudeSymbol3DLayerWrapper } = await import('./iExtrudeSymbol3DLayer');
    let iExtrudeSymbol3DLayerWrapper = new IExtrudeSymbol3DLayerWrapper(jsExtrudeSymbol3DLayer);
    iExtrudeSymbol3DLayerWrapper.geoBlazorId = dotNetObject.id;
    iExtrudeSymbol3DLayerWrapper.viewId = viewId;
    iExtrudeSymbol3DLayerWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(iExtrudeSymbol3DLayerWrapper);
    jsObjectRefs[dotNetObject.id] = iExtrudeSymbol3DLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsExtrudeSymbol3DLayer;
    let { buildDotNetIExtrudeSymbol3DLayer } = await import('./iExtrudeSymbol3DLayer');
    let dnInstantiatedObject = await buildDotNetIExtrudeSymbol3DLayer(jsExtrudeSymbol3DLayer);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for IExtrudeSymbol3DLayer', e);
    }
    
    return jsExtrudeSymbol3DLayer;
}

export async function buildDotNetIExtrudeSymbol3DLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIExtrudeSymbol3DLayer: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.edges)) {
        let { buildDotNetEdges3D } = await import('./edges3D');
        dotNetIExtrudeSymbol3DLayer.edges = buildDotNetEdges3D(jsObject.edges);
    }
    if (hasValue(jsObject.material)) {
        let { buildDotNetExtrudeSymbol3DLayerMaterial } = await import('./extrudeSymbol3DLayerMaterial');
        dotNetIExtrudeSymbol3DLayer.material = await buildDotNetExtrudeSymbol3DLayerMaterial(jsObject.material);
    }
    if (hasValue(jsObject.castShadows)) {
        dotNetIExtrudeSymbol3DLayer.castShadows = jsObject.castShadows;
    }
    if (hasValue(jsObject.size)) {
        dotNetIExtrudeSymbol3DLayer.size = jsObject.size;
    }
    if (hasValue(jsObject.type)) {
        dotNetIExtrudeSymbol3DLayer.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetIExtrudeSymbol3DLayer.id = k;
                break;
            }
        }
    }

    return dotNetIExtrudeSymbol3DLayer;
}

