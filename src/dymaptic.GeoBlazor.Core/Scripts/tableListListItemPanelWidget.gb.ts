// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import TableListListItemPanel from '@arcgis/core/widgets/TableList/ListItemPanel';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class TableListListItemPanelWidgetGenerated implements IPropertyWrapper {
    public widget: TableListListItemPanel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: TableListListItemPanel) {
        this.widget = widget;
    }

    // region methods

    unwrap() {
        return this.widget;
    }

    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async own(handleOrHandles: any): Promise<void> {
        this.widget.own(handleOrHandles);
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async render(): Promise<any> {
        return this.widget.render();
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async when(callback: any,
               errback: any): Promise<any> {
        return await this.widget.when(callback,
            errback);
    }

    // region properties

    getProperty(prop: string): any {
        return this.widget[prop];
    }

    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}

export async function buildJsTableListListItemPanelWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTableListListItemPanel = new TableListListItemPanel();

    if (hasValue(dotNetObject.className)) {
        jsTableListListItemPanel.className = dotNetObject.className;
    }
    if (hasValue(dotNetObject.container)) {
        jsTableListListItemPanel.container = dotNetObject.container;
    }
    if (hasValue(dotNetObject.content)) {
        jsTableListListItemPanel.content = dotNetObject.content;
    }
    if (hasValue(dotNetObject.disabled)) {
        jsTableListListItemPanel.disabled = dotNetObject.disabled;
    }
    if (hasValue(dotNetObject.flowEnabled)) {
        jsTableListListItemPanel.flowEnabled = dotNetObject.flowEnabled;
    }
    if (hasValue(dotNetObject.icon)) {
        jsTableListListItemPanel.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.image)) {
        jsTableListListItemPanel.image = dotNetObject.image;
    }
    if (hasValue(dotNetObject.label)) {
        jsTableListListItemPanel.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.listItem)) {
        jsTableListListItemPanel.listItem = dotNetObject.listItem;
    }
    if (hasValue(dotNetObject.open)) {
        jsTableListListItemPanel.open = dotNetObject.open;
    }
    if (hasValue(dotNetObject.title)) {
        jsTableListListItemPanel.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.widgetId)) {
        jsTableListListItemPanel.id = dotNetObject.widgetId;
    }
    let {default: TableListListItemPanelWidgetWrapper} = await import('./tableListListItemPanelWidget');
    let tableListListItemPanelWidgetWrapper = new TableListListItemPanelWidgetWrapper(jsTableListListItemPanel);
    tableListListItemPanelWidgetWrapper.geoBlazorId = dotNetObject.id;
    tableListListItemPanelWidgetWrapper.viewId = viewId;
    tableListListItemPanelWidgetWrapper.layerId = layerId;

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(tableListListItemPanelWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = tableListListItemPanelWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsTableListListItemPanel;

    let dnInstantiatedObject = await buildDotNetTableListListItemPanelWidget(jsTableListListItemPanel, layerId, viewId);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TableListListItemPanelWidget', e);
    }

    return jsTableListListItemPanel;
}

export async function buildDotNetTableListListItemPanelWidgetGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetTableListListItemPanelWidget: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.className)) {
        dotNetTableListListItemPanelWidget.className = jsObject.className;
    }
    if (hasValue(jsObject.container)) {
        dotNetTableListListItemPanelWidget.container = jsObject.container;
    }
    if (hasValue(jsObject.content)) {
        dotNetTableListListItemPanelWidget.content = jsObject.content;
    }
    if (hasValue(jsObject.disabled)) {
        dotNetTableListListItemPanelWidget.disabled = jsObject.disabled;
    }
    if (hasValue(jsObject.flowEnabled)) {
        dotNetTableListListItemPanelWidget.flowEnabled = jsObject.flowEnabled;
    }
    if (hasValue(jsObject.icon)) {
        dotNetTableListListItemPanelWidget.icon = jsObject.icon;
    }
    if (hasValue(jsObject.image)) {
        dotNetTableListListItemPanelWidget.image = jsObject.image;
    }
    if (hasValue(jsObject.label)) {
        dotNetTableListListItemPanelWidget.label = jsObject.label;
    }
    if (hasValue(jsObject.listItem)) {
        dotNetTableListListItemPanelWidget.listItem = jsObject.listItem;
    }
    if (hasValue(jsObject.open)) {
        dotNetTableListListItemPanelWidget.open = jsObject.open;
    }
    if (hasValue(jsObject.title)) {
        dotNetTableListListItemPanelWidget.title = jsObject.title;
    }
    if (hasValue(jsObject.type)) {
        dotNetTableListListItemPanelWidget.type = jsObject.type;
    }
    if (hasValue(jsObject.id)) {
        dotNetTableListListItemPanelWidget.widgetId = jsObject.id;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTableListListItemPanelWidget.id = k;
                break;
            }
        }
    }

    return dotNetTableListListItemPanelWidget;
}

