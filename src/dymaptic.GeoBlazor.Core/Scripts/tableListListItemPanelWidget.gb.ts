// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import TableListListItemPanel from '@arcgis/core/widgets/TableList/ListItemPanel';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetTableListListItemPanelWidget } from './tableListListItemPanelWidget';

export async function buildJsTableListListItemPanelWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.listItem)) {
        let { buildJsTableListListItem } = await import('./tableListListItem');
        properties.listItem = await buildJsTableListListItem(dotNetObject.listItem, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.className)) {
        properties.className = dotNetObject.className;
    }
    if (hasValue(dotNetObject.container)) {
        properties.container = dotNetObject.container;
    }
    if (hasValue(dotNetObject.content)) {
        properties.content = dotNetObject.content;
    }
    if (hasValue(dotNetObject.disabled)) {
        properties.disabled = dotNetObject.disabled;
    }
    if (hasValue(dotNetObject.flowEnabled)) {
        properties.flowEnabled = dotNetObject.flowEnabled;
    }
    if (hasValue(dotNetObject.icon)) {
        properties.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.image)) {
        properties.image = dotNetObject.image;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.open)) {
        properties.open = dotNetObject.open;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.widgetId)) {
        properties.id = dotNetObject.widgetId;
    }
    let jsTableListListItemPanel = new TableListListItemPanel(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsTableListListItemPanel);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTableListListItemPanel;
    
    let dnInstantiatedObject = await buildDotNetTableListListItemPanelWidget(jsTableListListItemPanel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TableListListItemPanelWidget', e);
    }
    
    return jsTableListListItemPanel;
}

export async function buildDotNetTableListListItemPanelWidgetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTableListListItemPanelWidget: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.listItem)) {
            let { buildDotNetTableListListItem } = await import('./tableListListItem');
            dotNetTableListListItemPanelWidget.listItem = await buildDotNetTableListListItem(jsObject.listItem);
        }
    if (hasValue(jsObject.className)) {
        dotNetTableListListItemPanelWidget.className = jsObject.className;
    }
    if (hasValue(jsObject.container)) {
        dotNetTableListListItemPanelWidget.container = jsObject.container;
    }
    if (hasValue(jsObject.content)) {
        dotNetTableListListItemPanelWidget.content = jsObject.content;
    }
    if (hasValue(jsObject.disabled)) {
        dotNetTableListListItemPanelWidget.disabled = jsObject.disabled;
    }
    if (hasValue(jsObject.flowEnabled)) {
        dotNetTableListListItemPanelWidget.flowEnabled = jsObject.flowEnabled;
    }
    if (hasValue(jsObject.icon)) {
        dotNetTableListListItemPanelWidget.icon = jsObject.icon;
    }
    if (hasValue(jsObject.image)) {
        dotNetTableListListItemPanelWidget.image = jsObject.image;
    }
    if (hasValue(jsObject.label)) {
        dotNetTableListListItemPanelWidget.label = jsObject.label;
    }
    if (hasValue(jsObject.open)) {
        dotNetTableListListItemPanelWidget.open = jsObject.open;
    }
    if (hasValue(jsObject.title)) {
        dotNetTableListListItemPanelWidget.title = jsObject.title;
    }
    if (hasValue(jsObject.type)) {
        dotNetTableListListItemPanelWidget.type = jsObject.type;
    }
    if (hasValue(jsObject.id)) {
        dotNetTableListListItemPanelWidget.widgetId = jsObject.id;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTableListListItemPanelWidget.id = k;
                break;
            }
        }
    }

    return dotNetTableListListItemPanelWidget;
}

