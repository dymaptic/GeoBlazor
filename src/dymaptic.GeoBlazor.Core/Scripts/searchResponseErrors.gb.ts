// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import {
    arcGisObjectRefs,
    jsObjectRefs,
    hasValue,
    removeCircularReferences,
    generateSerializableJson
} from './arcGisJsInterop';
import { buildDotNetSearchResponseErrors } from './searchResponseErrors';

export async function buildJsSearchResponseErrorsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsSearchResponseErrors: any = {};

    if (hasValue(dotNetObject.error)) {
        jsSearchResponseErrors.error = dotNetObject.error;
    }
    if (hasValue(dotNetObject.source)) {
        jsSearchResponseErrors.source = JSON.parse(dotNetObject.source);
    }
    if (hasValue(dotNetObject.sourceIndex)) {
        jsSearchResponseErrors.sourceIndex = dotNetObject.sourceIndex;
    }
    
    jsObjectRefs[dotNetObject.id] = jsSearchResponseErrors;
    arcGisObjectRefs[dotNetObject.id] = jsSearchResponseErrors;
    
    return jsSearchResponseErrors;
}


export async function buildDotNetSearchResponseErrorsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchResponseErrors: any = {};
    
    if (hasValue(jsObject.error)) {
        dotNetSearchResponseErrors.error = removeCircularReferences(jsObject.error);
    }
    
    if (hasValue(jsObject.source)) {
        dotNetSearchResponseErrors.source = generateSerializableJson(jsObject.source);
    }
    
    if (hasValue(jsObject.sourceIndex)) {
        dotNetSearchResponseErrors.sourceIndex = jsObject.sourceIndex;
    }
    

    return dotNetSearchResponseErrors;
}

