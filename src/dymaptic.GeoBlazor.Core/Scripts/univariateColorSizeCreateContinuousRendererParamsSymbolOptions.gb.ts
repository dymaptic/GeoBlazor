import { buildDotNetUnivariateColorSizeCreateContinuousRendererParamsSymbolOptions } from './univariateColorSizeCreateContinuousRendererParamsSymbolOptions';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import univariateColorSizeCreateContinuousRendererParamsSymbolOptions = __esri.univariateColorSizeCreateContinuousRendererParamsSymbolOptions;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsUnivariateColorSizeCreateContinuousRendererParamsSymbolOptionsGenerated(dotNetObject: any): Promise<any> {
    let jsunivariateColorSizeCreateContinuousRendererParamsSymbolOptions: any = {}
    if (hasValue(dotNetObject.symbols)) {
        let { buildJsUnivariateColorSizeCreateContinuousRendererParamsSymbolOptionsSymbols } = await import('./univariateColorSizeCreateContinuousRendererParamsSymbolOptionsSymbols');
        jsunivariateColorSizeCreateContinuousRendererParamsSymbolOptions.symbols = await buildJsUnivariateColorSizeCreateContinuousRendererParamsSymbolOptionsSymbols(dotNetObject.symbols, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.symbolStyle)) {
        jsunivariateColorSizeCreateContinuousRendererParamsSymbolOptions.symbolStyle = dotNetObject.symbolStyle;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsunivariateColorSizeCreateContinuousRendererParamsSymbolOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsunivariateColorSizeCreateContinuousRendererParamsSymbolOptions;
    
    let dnInstantiatedObject = await buildDotNetUnivariateColorSizeCreateContinuousRendererParamsSymbolOptions(jsunivariateColorSizeCreateContinuousRendererParamsSymbolOptions);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for UnivariateColorSizeCreateContinuousRendererParamsSymbolOptions', e);
    }
    
    return jsunivariateColorSizeCreateContinuousRendererParamsSymbolOptions;
}
export async function buildDotNetUnivariateColorSizeCreateContinuousRendererParamsSymbolOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUnivariateColorSizeCreateContinuousRendererParamsSymbolOptions: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.symbols)) {
            let { buildDotNetUnivariateColorSizeCreateContinuousRendererParamsSymbolOptionsSymbols } = await import('./univariateColorSizeCreateContinuousRendererParamsSymbolOptionsSymbols');
            dotNetUnivariateColorSizeCreateContinuousRendererParamsSymbolOptions.symbols = await buildDotNetUnivariateColorSizeCreateContinuousRendererParamsSymbolOptionsSymbols(jsObject.symbols);
        }
        if (hasValue(jsObject.symbolStyle)) {
            dotNetUnivariateColorSizeCreateContinuousRendererParamsSymbolOptions.symbolStyle = jsObject.symbolStyle;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetUnivariateColorSizeCreateContinuousRendererParamsSymbolOptions.id = k;
                break;
            }
        }
    }

    return dotNetUnivariateColorSizeCreateContinuousRendererParamsSymbolOptions;
}

