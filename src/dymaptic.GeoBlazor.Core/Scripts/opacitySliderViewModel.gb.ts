// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import OpacitySliderViewModel from '@arcgis/core/widgets/smartMapping/OpacitySlider/OpacitySliderViewModel';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class OpacitySliderViewModelGenerated implements IPropertyWrapper {
    public component: OpacitySliderViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: OpacitySliderViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async defaultInputFormatFunction(value: any): Promise<any> {
        return this.component.defaultInputFormatFunction(value);
    }

    async defaultInputParseFunction(value: any): Promise<any> {
        return this.component.defaultInputParseFunction(value);
    }

    async defaultLabelFormatFunction(value: any): Promise<any> {
        return this.component.defaultLabelFormatFunction(value);
    }

    async getBounds(): Promise<any> {
        return this.component.getBounds();
    }

    async getBoundsForValueAtIndex(index: any): Promise<any> {
        return this.component.getBoundsForValueAtIndex(index);
    }

    async getLabelForValue(value: any,
        type: any,
        index: any): Promise<any> {
        return this.component.getLabelForValue(value,
            type,
            index);
    }

    async getStopInfo(): Promise<any> {
        return this.component.getStopInfo();
    }

    async getUnzoomedMax(): Promise<void> {
        this.component.getUnzoomedMax();
    }

    async getUnzoomedMin(): Promise<void> {
        this.component.getUnzoomedMin();
    }

    async setValue(index: any,
        value: any): Promise<void> {
        this.component.setValue(index,
            value);
    }

    async toPrecision(value: any): Promise<any> {
        return this.component.toPrecision(value);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsOpacitySliderViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsOpacitySliderViewModel = new OpacitySliderViewModel();
    if (hasValue(dotNetObject.inputFormatFunction)) {
        jsOpacitySliderViewModel.inputFormatFunction = dotNetObject.sliderLabelFormatter;
    }
    if (hasValue(dotNetObject.inputParseFunction)) {
        jsOpacitySliderViewModel.inputParseFunction = dotNetObject.inputParser;
    }
    if (hasValue(dotNetObject.labelFormatFunction)) {
        jsOpacitySliderViewModel.labelFormatFunction = dotNetObject.sliderLabelFormatter;
    }

    if (hasValue(dotNetObject.effectiveMax)) {
        jsOpacitySliderViewModel.effectiveMax = dotNetObject.effectiveMax;
    }
    if (hasValue(dotNetObject.effectiveMin)) {
        jsOpacitySliderViewModel.effectiveMin = dotNetObject.effectiveMin;
    }
    if (hasValue(dotNetObject.max)) {
        jsOpacitySliderViewModel.max = dotNetObject.max;
    }
    if (hasValue(dotNetObject.min)) {
        jsOpacitySliderViewModel.min = dotNetObject.min;
    }
    if (hasValue(dotNetObject.precision)) {
        jsOpacitySliderViewModel.precision = dotNetObject.precision;
    }
    if (hasValue(dotNetObject.stops)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedStops } = dotNetObject.stops;
        jsOpacitySliderViewModel.stops = sanitizedStops;
    }
    if (hasValue(dotNetObject.thumbsConstrained)) {
        jsOpacitySliderViewModel.thumbsConstrained = dotNetObject.thumbsConstrained;
    }
    if (hasValue(dotNetObject.values)) {
        jsOpacitySliderViewModel.values = dotNetObject.values;
    }
    if (hasValue(dotNetObject.zoomingEnabled)) {
        jsOpacitySliderViewModel.zoomingEnabled = dotNetObject.zoomingEnabled;
    }
    if (hasValue(dotNetObject.zoomOptions)) {
        jsOpacitySliderViewModel.zoomOptions = dotNetObject.zoomOptions;
    }

    let { default: OpacitySliderViewModelWrapper } = await import('./opacitySliderViewModel');
    let opacitySliderViewModelWrapper = new OpacitySliderViewModelWrapper(jsOpacitySliderViewModel);
    opacitySliderViewModelWrapper.geoBlazorId = dotNetObject.id;
    opacitySliderViewModelWrapper.viewId = viewId;
    opacitySliderViewModelWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(opacitySliderViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = opacitySliderViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsOpacitySliderViewModel;
    let { buildDotNetOpacitySliderViewModel } = await import('./opacitySliderViewModel');
    let dnInstantiatedObject = await buildDotNetOpacitySliderViewModel(jsOpacitySliderViewModel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for OpacitySliderViewModel', e);
    }
    
    return jsOpacitySliderViewModel;
}
export async function buildDotNetOpacitySliderViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetOpacitySliderViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.effectiveMax)) {
            dotNetOpacitySliderViewModel.effectiveMax = jsObject.effectiveMax;
        }
        if (hasValue(jsObject.effectiveMin)) {
            dotNetOpacitySliderViewModel.effectiveMin = jsObject.effectiveMin;
        }
        if (hasValue(jsObject.inputFormatFunction)) {
            dotNetOpacitySliderViewModel.inputFormatFunction = jsObject.inputFormatFunction;
        }
        if (hasValue(jsObject.inputParseFunction)) {
            dotNetOpacitySliderViewModel.inputParseFunction = jsObject.inputParseFunction;
        }
        if (hasValue(jsObject.labelFormatFunction)) {
            dotNetOpacitySliderViewModel.labelFormatFunction = jsObject.labelFormatFunction;
        }
        if (hasValue(jsObject.labels)) {
            dotNetOpacitySliderViewModel.labels = jsObject.labels;
        }
        if (hasValue(jsObject.max)) {
            dotNetOpacitySliderViewModel.max = jsObject.max;
        }
        if (hasValue(jsObject.min)) {
            dotNetOpacitySliderViewModel.min = jsObject.min;
        }
        if (hasValue(jsObject.precision)) {
            dotNetOpacitySliderViewModel.precision = jsObject.precision;
        }
        if (hasValue(jsObject.state)) {
            dotNetOpacitySliderViewModel.state = jsObject.state;
        }
        if (hasValue(jsObject.stops)) {
            dotNetOpacitySliderViewModel.stops = jsObject.stops;
        }
        if (hasValue(jsObject.thumbsConstrained)) {
            dotNetOpacitySliderViewModel.thumbsConstrained = jsObject.thumbsConstrained;
        }
        if (hasValue(jsObject.values)) {
            dotNetOpacitySliderViewModel.values = jsObject.values;
        }
        if (hasValue(jsObject.zoomingEnabled)) {
            dotNetOpacitySliderViewModel.zoomingEnabled = jsObject.zoomingEnabled;
        }
        if (hasValue(jsObject.zoomOptions)) {
            dotNetOpacitySliderViewModel.zoomOptions = jsObject.zoomOptions;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetOpacitySliderViewModel.id = k;
                break;
            }
        }
    }

    return dotNetOpacitySliderViewModel;
}

