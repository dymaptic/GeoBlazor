// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageSampleResult from '@arcgis/core/rest/support/ImageSampleResult';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetImageSampleResult } from './imageSampleResult';

export async function buildJsImageSampleResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.samples)) {
        let { buildJsImageSample } = await import('./imageSample');
        properties.samples = await Promise.all(dotNetObject.samples.map(async i => await buildJsImageSample(i, layerId, viewId))) as any;
    }

    let jsImageSampleResult = new ImageSampleResult(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsImageSampleResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageSampleResult;
    
    return jsImageSampleResult;
}


export async function buildDotNetImageSampleResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageSampleResult: any = {};
    
    if (hasValue(jsObject.samples)) {
        let { buildDotNetImageSample } = await import('./imageSample');
        dotNetImageSampleResult.samples = await Promise.all(jsObject.samples.map(async i => await buildDotNetImageSample(i, layerId, viewId)));
    }
    

    return dotNetImageSampleResult;
}

