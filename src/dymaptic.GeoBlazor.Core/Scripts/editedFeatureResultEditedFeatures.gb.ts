// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, sanitize } from './arcGisJsInterop';
import { buildDotNetEditedFeatureResultEditedFeatures } from './editedFeatureResultEditedFeatures';

export async function buildJsEditedFeatureResultEditedFeaturesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsEditedFeatureResultEditedFeatures: any = {};
    if (hasValue(dotNetObject.adds)) {
        let { buildJsGraphic } = await import('./graphic');
        jsEditedFeatureResultEditedFeatures.adds = dotNetObject.adds.map(i => buildJsGraphic(i)) as any;
    }
    if (hasValue(dotNetObject.deletes)) {
        let { buildJsGraphic } = await import('./graphic');
        jsEditedFeatureResultEditedFeatures.deletes = dotNetObject.deletes.map(i => buildJsGraphic(i)) as any;
    }
    if (hasValue(dotNetObject.updates)) {
        let { buildJsEditedFeatureResultEditedFeaturesUpdates } = await import('./editedFeatureResultEditedFeaturesUpdates');
        jsEditedFeatureResultEditedFeatures.updates = await Promise.all(dotNetObject.updates.map(async i => await buildJsEditedFeatureResultEditedFeaturesUpdates(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.spatialReference)) {
        jsEditedFeatureResultEditedFeatures.spatialReference = sanitize(dotNetObject.spatialReference);
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsEditedFeatureResultEditedFeatures);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsEditedFeatureResultEditedFeatures;
    
    return jsEditedFeatureResultEditedFeatures;
}


export async function buildDotNetEditedFeatureResultEditedFeaturesGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetEditedFeatureResultEditedFeatures: any = {};
    
    if (hasValue(jsObject.adds)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetEditedFeatureResultEditedFeatures.adds = jsObject.adds.map(i => buildDotNetGraphic(i, layerId, viewId));
    }
    
    if (hasValue(jsObject.deletes)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetEditedFeatureResultEditedFeatures.deletes = jsObject.deletes.map(i => buildDotNetGraphic(i, layerId, viewId));
    }
    
    if (hasValue(jsObject.updates)) {
        let { buildDotNetEditedFeatureResultEditedFeaturesUpdates } = await import('./editedFeatureResultEditedFeaturesUpdates');
        dotNetEditedFeatureResultEditedFeatures.updates = await Promise.all(jsObject.updates.map(async i => await buildDotNetEditedFeatureResultEditedFeaturesUpdates(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.spatialReference)) {
        dotNetEditedFeatureResultEditedFeatures.spatialReference = jsObject.spatialReference;
    }
    

    return dotNetEditedFeatureResultEditedFeatures;
}

