// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetEditedFeatureResultEditedFeatures } from './editedFeatureResultEditedFeatures';

export async function buildJsEditedFeatureResultEditedFeaturesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsEditedFeatureResultEditedFeatures: any = {};
    if (hasValue(dotNetObject.updates)) {
        let { buildJsEditedFeatureResultEditedFeaturesUpdates } = await import('./editedFeatureResultEditedFeaturesUpdates');
        jsEditedFeatureResultEditedFeatures.updates = await Promise.all(dotNetObject.updates.map(async i => await buildJsEditedFeatureResultEditedFeaturesUpdates(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.adds)) {
        const { id, dotNetComponentReference, ...sanitizedAdds } = dotNetObject.adds;
        jsEditedFeatureResultEditedFeatures.adds = sanitizedAdds;
    }
    if (hasValue(dotNetObject.deletes)) {
        const { id, dotNetComponentReference, ...sanitizedDeletes } = dotNetObject.deletes;
        jsEditedFeatureResultEditedFeatures.deletes = sanitizedDeletes;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        const { id, dotNetComponentReference, ...sanitizedSpatialReference } = dotNetObject.spatialReference;
        jsEditedFeatureResultEditedFeatures.spatialReference = sanitizedSpatialReference;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsEditedFeatureResultEditedFeatures);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsEditedFeatureResultEditedFeatures;
    
    let { buildDotNetEditedFeatureResultEditedFeatures } = await import('./editedFeatureResultEditedFeatures');
    let dnInstantiatedObject = await buildDotNetEditedFeatureResultEditedFeatures(jsEditedFeatureResultEditedFeatures, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type EditedFeatureResultEditedFeatures detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for EditedFeatureResultEditedFeatures', e);
    }
    
    return jsEditedFeatureResultEditedFeatures;
}


export async function buildDotNetEditedFeatureResultEditedFeaturesGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetEditedFeatureResultEditedFeatures: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.updates)) {
        let { buildDotNetEditedFeatureResultEditedFeaturesUpdates } = await import('./editedFeatureResultEditedFeaturesUpdates');
        dotNetEditedFeatureResultEditedFeatures.updates = await Promise.all(jsObject.updates.map(async i => await buildDotNetEditedFeatureResultEditedFeaturesUpdates(i, layerId, viewId)));
    }
    if (hasValue(jsObject.adds)) {
        dotNetEditedFeatureResultEditedFeatures.adds = jsObject.adds;
    }
    if (hasValue(jsObject.deletes)) {
        dotNetEditedFeatureResultEditedFeatures.deletes = jsObject.deletes;
    }
    if (hasValue(jsObject.spatialReference)) {
        dotNetEditedFeatureResultEditedFeatures.spatialReference = jsObject.spatialReference;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetEditedFeatureResultEditedFeatures.id = k;
                break;
            }
        }
    }

    return dotNetEditedFeatureResultEditedFeatures;
}

