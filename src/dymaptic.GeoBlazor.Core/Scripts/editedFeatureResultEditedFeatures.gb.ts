import { buildDotNetEditedFeatureResultEditedFeatures } from './editedFeatureResultEditedFeatures';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import EditedFeatureResultEditedFeatures = __esri.EditedFeatureResultEditedFeatures;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsEditedFeatureResultEditedFeaturesGenerated(dotNetObject: any): Promise<any> {
    let jsEditedFeatureResultEditedFeatures: any = {}
    if (hasValue(dotNetObject.adds)) {
        let { buildJsGraphic } = await import('./graphic');
        jsEditedFeatureResultEditedFeatures.adds = dotNetObject.adds.map(i => buildJsGraphic(i)) as any;
    }
    if (hasValue(dotNetObject.deletes)) {
        let { buildJsGraphic } = await import('./graphic');
        jsEditedFeatureResultEditedFeatures.deletes = dotNetObject.deletes.map(i => buildJsGraphic(i)) as any;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        jsEditedFeatureResultEditedFeatures.spatialReference = buildJsSpatialReference(dotNetObject.spatialReference) as any;
    }
    if (hasValue(dotNetObject.updates)) {
        let { buildJsEditedFeatureResultEditedFeaturesUpdates } = await import('./editedFeatureResultEditedFeaturesUpdates');
        jsEditedFeatureResultEditedFeatures.updates = await Promise.all(dotNetObject.updates.map(async i => await buildJsEditedFeatureResultEditedFeaturesUpdates(i, layerId, viewId))) as any;
    }

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsEditedFeatureResultEditedFeatures);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsEditedFeatureResultEditedFeatures;
    
    let dnInstantiatedObject = await buildDotNetEditedFeatureResultEditedFeatures(jsEditedFeatureResultEditedFeatures);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for EditedFeatureResultEditedFeatures', e);
    }
    
    return jsEditedFeatureResultEditedFeatures;
}
export async function buildDotNetEditedFeatureResultEditedFeaturesGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetEditedFeatureResultEditedFeatures: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.adds)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetEditedFeatureResultEditedFeatures.adds = jsObject.adds.map(i => buildDotNetGraphic(i, layerId, viewId));
        }
        if (hasValue(jsObject.deletes)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetEditedFeatureResultEditedFeatures.deletes = jsObject.deletes.map(i => buildDotNetGraphic(i, layerId, viewId));
        }
        if (hasValue(jsObject.spatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetEditedFeatureResultEditedFeatures.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference);
        }
        if (hasValue(jsObject.updates)) {
            let { buildDotNetEditedFeatureResultEditedFeaturesUpdates } = await import('./editedFeatureResultEditedFeaturesUpdates');
            dotNetEditedFeatureResultEditedFeatures.updates = await Promise.all(jsObject.updates.map(async i => await buildDotNetEditedFeatureResultEditedFeaturesUpdates(i)));
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetEditedFeatureResultEditedFeatures.id = k;
                break;
            }
        }
    }

    return dotNetEditedFeatureResultEditedFeatures;
}

