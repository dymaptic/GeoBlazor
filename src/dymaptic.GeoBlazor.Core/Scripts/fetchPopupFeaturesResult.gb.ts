// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetFetchPopupFeaturesResult } from './fetchPopupFeaturesResult';

export async function buildJsFetchPopupFeaturesResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFetchPopupFeaturesResult: any = {};
    if (hasValue(dotNetObject.allGraphicsPromise)) {
        let { buildJsGraphic } = await import('./graphic');
        jsFetchPopupFeaturesResult.allGraphicsPromise = dotNetObject.allGraphicsPromise.map(i => buildJsGraphic(i)) as any;
    }
    if (hasValue(dotNetObject.location)) {
        let { buildJsPoint } = await import('./point');
        jsFetchPopupFeaturesResult.location = buildJsPoint(dotNetObject.location) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsFetchPopupFeaturesResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFetchPopupFeaturesResult;
    
    return jsFetchPopupFeaturesResult;
}


export async function buildDotNetFetchPopupFeaturesResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsFetchPopupFeaturesResult } = await import('./fetchPopupFeaturesResult');
        jsComponentRef = await buildJsFetchPopupFeaturesResult(jsObject, layerId, viewId);
    }
    
    let dotNetFetchPopupFeaturesResult: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.allGraphicsPromise)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetFetchPopupFeaturesResult.allGraphicsPromise = jsObject.allGraphicsPromise.map(i => buildDotNetGraphic(i, layerId, viewId));
    }
    if (hasValue(jsObject.location)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetFetchPopupFeaturesResult.location = buildDotNetPoint(jsObject.location);
    }

    return dotNetFetchPopupFeaturesResult;
}

