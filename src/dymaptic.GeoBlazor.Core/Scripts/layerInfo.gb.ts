// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import LayerInfo = __esri.LayerInfo;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class LayerInfoGenerated implements IPropertyWrapper {
    public component: LayerInfo;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: LayerInfo) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsLayerInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsLayerInfo: any = {}

    if (hasValue(dotNetObject.geometryType)) {
        jsLayerInfo.geometryType = dotNetObject.geometryType;
    }
    if (hasValue(dotNetObject.layerInfoId)) {
        jsLayerInfo.id = dotNetObject.layerInfoId;
    }
    if (hasValue(dotNetObject.name)) {
        jsLayerInfo.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.url)) {
        jsLayerInfo.url = dotNetObject.url;
    }
    let { default: LayerInfoWrapper } = await import('./layerInfo');
    let layerInfoWrapper = new LayerInfoWrapper(jsLayerInfo);
    layerInfoWrapper.geoBlazorId = dotNetObject.id;
    layerInfoWrapper.viewId = viewId;
    layerInfoWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(layerInfoWrapper);
    jsObjectRefs[dotNetObject.id] = layerInfoWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsLayerInfo;
    
    let dnInstantiatedObject = await buildDotNetLayerInfo(jsLayerInfo, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LayerInfo', e);
    }
    
    return jsLayerInfo;
}

export async function buildDotNetLayerInfoGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLayerInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.geometryType)) {
            dotNetLayerInfo.geometryType = jsObject.geometryType;
        }
        if (hasValue(jsObject.id)) {
            dotNetLayerInfo.layerInfoId = jsObject.id;
        }
        if (hasValue(jsObject.name)) {
            dotNetLayerInfo.name = jsObject.name;
        }
        if (hasValue(jsObject.type)) {
            dotNetLayerInfo.type = jsObject.type;
        }
        if (hasValue(jsObject.url)) {
            dotNetLayerInfo.url = jsObject.url;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLayerInfo.id = k;
                break;
            }
        }
    }

    return dotNetLayerInfo;
}

