// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetListNode } from './listNode';

export async function buildJsListNodeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsListNode: any = {};

    if (hasValue(dotNetObject.expr)) {
        jsListNode.expr = dotNetObject.expr;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsListNode);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsListNode;
    
    return jsListNode;
}


export async function buildDotNetListNodeGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsListNode } = await import('./listNode');
        jsComponentRef = await buildJsListNode(jsObject, layerId, viewId);
    }
    
    let dotNetListNode: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.expr)) {
        dotNetListNode.expr = jsObject.expr;
    }
    if (hasValue(jsObject.type)) {
        dotNetListNode.type = jsObject.type;
    }

    return dotNetListNode;
}

