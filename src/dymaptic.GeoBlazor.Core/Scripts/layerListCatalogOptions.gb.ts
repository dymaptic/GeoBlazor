// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetLayerListCatalogOptions } from './layerListCatalogOptions';

export async function buildJsLayerListCatalogOptionsGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsLayerListCatalogOptions: any = {};
    if (hasValue(dotNetObject.visibleElements)) {
        let { buildJsLayerListCatalogOptionsVisibleElements } = await import('./layerListCatalogOptionsVisibleElements');
        jsLayerListCatalogOptions.visibleElements = await buildJsLayerListCatalogOptionsVisibleElements(dotNetObject.visibleElements) as any;
    }

    if (hasValue(dotNetObject.filterPlaceholder)) {
        jsLayerListCatalogOptions.filterPlaceholder = dotNetObject.filterPlaceholder;
    }
    if (hasValue(dotNetObject.listItemCreatedFunction)) {
        jsLayerListCatalogOptions.listItemCreatedFunction = dotNetObject.listItemCreatedFunction;
    }
    if (hasValue(dotNetObject.minFilterItems)) {
        jsLayerListCatalogOptions.minFilterItems = dotNetObject.minFilterItems;
    }
    if (hasValue(dotNetObject.selectionMode)) {
        jsLayerListCatalogOptions.selectionMode = dotNetObject.selectionMode;
    }
    if (hasValue(dotNetObject.visibilityAppearance)) {
        jsLayerListCatalogOptions.visibilityAppearance = dotNetObject.visibilityAppearance;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsLayerListCatalogOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLayerListCatalogOptions;
    
    return jsLayerListCatalogOptions;
}


export async function buildDotNetLayerListCatalogOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLayerListCatalogOptions: any = {};
    
    if (hasValue(jsObject.visibleElements)) {
        let { buildDotNetLayerListCatalogOptionsVisibleElements } = await import('./layerListCatalogOptionsVisibleElements');
        dotNetLayerListCatalogOptions.visibleElements = await buildDotNetLayerListCatalogOptionsVisibleElements(jsObject.visibleElements);
    }
    
    if (hasValue(jsObject.filterPlaceholder)) {
        dotNetLayerListCatalogOptions.filterPlaceholder = jsObject.filterPlaceholder;
    }
    
    if (hasValue(jsObject.listItemCreatedFunction)) {
        dotNetLayerListCatalogOptions.listItemCreatedFunction = removeCircularReferences(jsObject.listItemCreatedFunction);
    }
    
    if (hasValue(jsObject.minFilterItems)) {
        dotNetLayerListCatalogOptions.minFilterItems = jsObject.minFilterItems;
    }
    
    if (hasValue(jsObject.selectionMode)) {
        dotNetLayerListCatalogOptions.selectionMode = jsObject.selectionMode;
    }
    
    if (hasValue(jsObject.visibilityAppearance)) {
        dotNetLayerListCatalogOptions.visibilityAppearance = jsObject.visibilityAppearance;
    }
    

    return dotNetLayerListCatalogOptions;
}

