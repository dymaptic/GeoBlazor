// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetIconSymbol3DLayerResource } from './iconSymbol3DLayerResource';

export async function buildJsIconSymbol3DLayerResourceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsIconSymbol3DLayerResource: any = {};

    if (hasValue(dotNetObject.href)) {
        jsIconSymbol3DLayerResource.href = dotNetObject.href;
    }
    if (hasValue(dotNetObject.primitive)) {
        jsIconSymbol3DLayerResource.primitive = dotNetObject.primitive;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsIconSymbol3DLayerResource);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsIconSymbol3DLayerResource;
    
    return jsIconSymbol3DLayerResource;
}


export async function buildDotNetIconSymbol3DLayerResourceGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIconSymbol3DLayerResource: any = {};
    
    if (hasValue(jsObject.href)) {
        dotNetIconSymbol3DLayerResource.href = jsObject.href;
    }
    
    if (hasValue(jsObject.primitive)) {
        dotNetIconSymbol3DLayerResource.primitive = jsObject.primitive;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetIconSymbol3DLayerResource.id = geoBlazorId;
    }

    return dotNetIconSymbol3DLayerResource;
}

