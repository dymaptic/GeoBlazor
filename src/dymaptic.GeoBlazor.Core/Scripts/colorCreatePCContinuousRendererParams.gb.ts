import { buildDotNetColorCreatePCContinuousRendererParams } from './colorCreatePCContinuousRendererParams';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import colorCreatePCContinuousRendererParams = __esri.colorCreatePCContinuousRendererParams;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsColorCreatePCContinuousRendererParamsGenerated(dotNetObject: any): Promise<any> {
    let jscolorCreatePCContinuousRendererParams: any = {}
    if (hasValue(dotNetObject.layer)) {
        let { buildJsPointCloudLayer } = await import('./pointCloudLayer');
        jscolorCreatePCContinuousRendererParams.layer = await buildJsPointCloudLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.basemap)) {
        jscolorCreatePCContinuousRendererParams.basemap = dotNetObject.basemap;
    }
    if (hasValue(dotNetObject.colorScheme)) {
        jscolorCreatePCContinuousRendererParams.colorScheme = dotNetObject.colorScheme;
    }
    if (hasValue(dotNetObject.density)) {
        jscolorCreatePCContinuousRendererParams.density = dotNetObject.density;
    }
    if (hasValue(dotNetObject.field)) {
        jscolorCreatePCContinuousRendererParams.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.signal)) {
        jscolorCreatePCContinuousRendererParams.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.size)) {
        jscolorCreatePCContinuousRendererParams.size = dotNetObject.size;
    }
    if (hasValue(dotNetObject.statistics)) {
        jscolorCreatePCContinuousRendererParams.statistics = dotNetObject.statistics;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jscolorCreatePCContinuousRendererParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jscolorCreatePCContinuousRendererParams;
    
    let dnInstantiatedObject = await buildDotNetColorCreatePCContinuousRendererParams(jscolorCreatePCContinuousRendererParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ColorCreatePCContinuousRendererParams', e);
    }
    
    return jscolorCreatePCContinuousRendererParams;
}
export async function buildDotNetColorCreatePCContinuousRendererParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetColorCreatePCContinuousRendererParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.basemap)) {
            dotNetColorCreatePCContinuousRendererParams.basemap = jsObject.basemap;
        }
        if (hasValue(jsObject.colorScheme)) {
            dotNetColorCreatePCContinuousRendererParams.colorScheme = jsObject.colorScheme;
        }
        if (hasValue(jsObject.density)) {
            dotNetColorCreatePCContinuousRendererParams.density = jsObject.density;
        }
        if (hasValue(jsObject.field)) {
            dotNetColorCreatePCContinuousRendererParams.field = jsObject.field;
        }
        if (hasValue(jsObject.signal)) {
            dotNetColorCreatePCContinuousRendererParams.signal = jsObject.signal;
        }
        if (hasValue(jsObject.size)) {
            dotNetColorCreatePCContinuousRendererParams.size = jsObject.size;
        }
        if (hasValue(jsObject.statistics)) {
            dotNetColorCreatePCContinuousRendererParams.statistics = jsObject.statistics;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetColorCreatePCContinuousRendererParams.id = k;
                break;
            }
        }
    }

    return dotNetColorCreatePCContinuousRendererParams;
}

