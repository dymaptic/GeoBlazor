// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import TableDataSource = __esri.TableDataSource;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class TableDataSourceGenerated implements IPropertyWrapper {
    public component: TableDataSource;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: TableDataSource) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsTableDataSourceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTableDataSource: any = {}

    if (hasValue(dotNetObject.dataSourceName)) {
        jsTableDataSource.dataSourceName = dotNetObject.dataSourceName;
    }
    if (hasValue(dotNetObject.gdbVersion)) {
        jsTableDataSource.gdbVersion = dotNetObject.gdbVersion;
    }
    if (hasValue(dotNetObject.workspaceId)) {
        jsTableDataSource.workspaceId = dotNetObject.workspaceId;
    }
    let { default: TableDataSourceWrapper } = await import('./tableDataSource');
    let tableDataSourceWrapper = new TableDataSourceWrapper(jsTableDataSource);
    tableDataSourceWrapper.geoBlazorId = dotNetObject.id;
    tableDataSourceWrapper.viewId = viewId;
    tableDataSourceWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(tableDataSourceWrapper);
    jsObjectRefs[dotNetObject.id] = tableDataSourceWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsTableDataSource;
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TableDataSource', e);
    }
    
    return jsTableDataSource;
}

export async function buildDotNetTableDataSourceGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTableDataSource: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.dataSourceName)) {
            dotNetTableDataSource.dataSourceName = jsObject.dataSourceName;
        }
        if (hasValue(jsObject.gdbVersion)) {
            dotNetTableDataSource.gdbVersion = jsObject.gdbVersion;
        }
        if (hasValue(jsObject.type)) {
            dotNetTableDataSource.type = jsObject.type;
        }
        if (hasValue(jsObject.workspaceId)) {
            dotNetTableDataSource.workspaceId = jsObject.workspaceId;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTableDataSource.id = k;
                break;
            }
        }
    }

    return dotNetTableDataSource;
}

