// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetTableDataSource } from './tableDataSource';

export async function buildJsTableDataSourceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsTableDataSource: any = {};

    if (hasValue(dotNetObject.dataSourceName)) {
        jsTableDataSource.dataSourceName = dotNetObject.dataSourceName;
    }
    if (hasValue(dotNetObject.gdbVersion)) {
        jsTableDataSource.gdbVersion = dotNetObject.gdbVersion;
    }
    if (hasValue(dotNetObject.workspaceId)) {
        jsTableDataSource.workspaceId = dotNetObject.workspaceId;
    }
    
    jsObjectRefs[dotNetObject.id] = jsTableDataSource;
    arcGisObjectRefs[dotNetObject.id] = jsTableDataSource;
    
    return jsTableDataSource;
}


export async function buildDotNetTableDataSourceGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTableDataSource: any = {};
    
    if (hasValue(jsObject.dataSourceName)) {
        dotNetTableDataSource.dataSourceName = jsObject.dataSourceName;
    }
    
    if (hasValue(jsObject.gdbVersion)) {
        dotNetTableDataSource.gdbVersion = jsObject.gdbVersion;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetTableDataSource.type = jsObject.type;
    }
    
    if (hasValue(jsObject.workspaceId)) {
        dotNetTableDataSource.workspaceId = jsObject.workspaceId;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetTableDataSource.id = geoBlazorId;
    }

    return dotNetTableDataSource;
}

