// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetWFSCapabilities } from './wFSCapabilities';

export async function buildJsWFSCapabilitiesGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsWFSCapabilities: any = {};
    if (hasValue(dotNetObject.featureTypes) && dotNetObject.featureTypes.length > 0) {
        let { buildJsWFSFeatureType } = await import('./wFSFeatureType');
        jsWFSCapabilities.featureTypes = await Promise.all(dotNetObject.featureTypes.map(async i => await buildJsWFSFeatureType(i))) as any;
    }
    if (hasValue(dotNetObject.operations)) {
        let { buildJsWFSOperations } = await import('./wFSOperations');
        jsWFSCapabilities.operations = await buildJsWFSOperations(dotNetObject.operations) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsWFSCapabilities);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsWFSCapabilities;
    
    return jsWFSCapabilities;
}


export async function buildDotNetWFSCapabilitiesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWFSCapabilities: any = {};
    
    if (hasValue(jsObject.featureTypes)) {
        let { buildDotNetWFSFeatureType } = await import('./wFSFeatureType');
        dotNetWFSCapabilities.featureTypes = await Promise.all(jsObject.featureTypes.map(async i => await buildDotNetWFSFeatureType(i)));
    }
    
    if (hasValue(jsObject.operations)) {
        let { buildDotNetWFSOperations } = await import('./wFSOperations');
        dotNetWFSCapabilities.operations = await buildDotNetWFSOperations(jsObject.operations);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetWFSCapabilities.id = geoBlazorId;
    }

    return dotNetWFSCapabilities;
}

