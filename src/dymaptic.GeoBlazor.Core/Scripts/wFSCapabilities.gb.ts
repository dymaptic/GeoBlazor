// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetWFSCapabilities } from './wFSCapabilities';
import WFSCapabilities = __esri.WFSCapabilities;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsWFSCapabilitiesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsWFSCapabilities: any = {}
    if (hasValue(dotNetObject.featureTypes)) {
        let { buildJsWFSFeatureType } = await import('./wFSFeatureType');
        jsWFSCapabilities.featureTypes = await Promise.all(dotNetObject.featureTypes.map(async i => await buildJsWFSFeatureType(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.operations)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedOperations } = dotNetObject.operations;
        jsWFSCapabilities.operations = sanitizedOperations;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsWFSCapabilities);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsWFSCapabilities;
    
    let dnInstantiatedObject = await buildDotNetWFSCapabilities(jsWFSCapabilities);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for WFSCapabilities', e);
    }
    
    return jsWFSCapabilities;
}

export async function buildDotNetWFSCapabilitiesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWFSCapabilities: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.featureTypes)) {
            let { buildDotNetWFSFeatureType } = await import('./wFSFeatureType');
            dotNetWFSCapabilities.featureTypes = await Promise.all(jsObject.featureTypes.map(async i => await buildDotNetWFSFeatureType(i)));
        }
        if (hasValue(jsObject.operations)) {
            dotNetWFSCapabilities.operations = jsObject.operations;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetWFSCapabilities.id = k;
                break;
            }
        }
    }

    return dotNetWFSCapabilities;
}

