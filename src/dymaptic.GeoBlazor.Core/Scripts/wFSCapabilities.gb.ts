// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetWFSCapabilities } from './wFSCapabilities';

export async function buildJsWFSCapabilitiesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsWFSCapabilities: any = {};
    if (hasValue(dotNetObject.featureTypes)) {
        let { buildJsWFSFeatureType } = await import('./wFSFeatureType');
        jsWFSCapabilities.featureTypes = await Promise.all(dotNetObject.featureTypes.map(async i => await buildJsWFSFeatureType(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.operations)) {
        let { buildJsWFSOperations } = await import('./wFSOperations');
        jsWFSCapabilities.operations = await buildJsWFSOperations(dotNetObject.operations, layerId, viewId) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsWFSCapabilities);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsWFSCapabilities;
    
    let { buildDotNetWFSCapabilities } = await import('./wFSCapabilities');
    let dnInstantiatedObject = await buildDotNetWFSCapabilities(jsWFSCapabilities);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type WFSCapabilities detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for WFSCapabilities', e);
    }
    
    return jsWFSCapabilities;
}


export async function buildDotNetWFSCapabilitiesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWFSCapabilities: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.featureTypes)) {
        let { buildDotNetWFSFeatureType } = await import('./wFSFeatureType');
        dotNetWFSCapabilities.featureTypes = await Promise.all(jsObject.featureTypes.map(async i => await buildDotNetWFSFeatureType(i)));
    }
    if (hasValue(jsObject.operations)) {
        let { buildDotNetWFSOperations } = await import('./wFSOperations');
        dotNetWFSCapabilities.operations = await buildDotNetWFSOperations(jsObject.operations);
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetWFSCapabilities.id = k;
                break;
            }
        }
    }

    return dotNetWFSCapabilities;
}

