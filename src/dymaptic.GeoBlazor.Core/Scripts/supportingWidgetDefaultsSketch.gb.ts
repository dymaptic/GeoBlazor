// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSupportingWidgetDefaultsSketch } from './supportingWidgetDefaultsSketch';

export async function buildJsSupportingWidgetDefaultsSketchGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSupportingWidgetDefaultsSketch: any = {}
    if (hasValue(dotNetObject.markerSymbol)) {
        let { buildJsSimpleMarkerSymbol } = await import('./simpleMarkerSymbol');
        jsSupportingWidgetDefaultsSketch.markerSymbol = buildJsSimpleMarkerSymbol(dotNetObject.markerSymbol) as any;
    }
    if (hasValue(dotNetObject.polygonSymbol)) {
        let { buildJsSimpleFillSymbol } = await import('./simpleFillSymbol');
        jsSupportingWidgetDefaultsSketch.polygonSymbol = buildJsSimpleFillSymbol(dotNetObject.polygonSymbol) as any;
    }
    if (hasValue(dotNetObject.polylineSymbol)) {
        let { buildJsSimpleLineSymbol } = await import('./simpleLineSymbol');
        jsSupportingWidgetDefaultsSketch.polylineSymbol = buildJsSimpleLineSymbol(dotNetObject.polylineSymbol) as any;
    }

    if (hasValue(dotNetObject.defaultUpdateOptions)) {
        jsSupportingWidgetDefaultsSketch.defaultUpdateOptions = dotNetObject.defaultUpdateOptions;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsSupportingWidgetDefaultsSketch);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSupportingWidgetDefaultsSketch;
    
    let dnInstantiatedObject = await buildDotNetSupportingWidgetDefaultsSketch(jsSupportingWidgetDefaultsSketch);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SupportingWidgetDefaultsSketch', e);
    }
    
    return jsSupportingWidgetDefaultsSketch;
}

export async function buildDotNetSupportingWidgetDefaultsSketchGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSupportingWidgetDefaultsSketch: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.markerSymbol)) {
            let { buildDotNetSimpleMarkerSymbol } = await import('./simpleMarkerSymbol');
            dotNetSupportingWidgetDefaultsSketch.markerSymbol = buildDotNetSimpleMarkerSymbol(jsObject.markerSymbol);
        }
        if (hasValue(jsObject.polygonSymbol)) {
            let { buildDotNetSimpleFillSymbol } = await import('./simpleFillSymbol');
            dotNetSupportingWidgetDefaultsSketch.polygonSymbol = buildDotNetSimpleFillSymbol(jsObject.polygonSymbol);
        }
        if (hasValue(jsObject.polylineSymbol)) {
            let { buildDotNetSimpleLineSymbol } = await import('./simpleLineSymbol');
            dotNetSupportingWidgetDefaultsSketch.polylineSymbol = buildDotNetSimpleLineSymbol(jsObject.polylineSymbol);
        }
        if (hasValue(jsObject.defaultUpdateOptions)) {
            dotNetSupportingWidgetDefaultsSketch.defaultUpdateOptions = jsObject.defaultUpdateOptions;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSupportingWidgetDefaultsSketch.id = k;
                break;
            }
        }
    }

    return dotNetSupportingWidgetDefaultsSketch;
}

