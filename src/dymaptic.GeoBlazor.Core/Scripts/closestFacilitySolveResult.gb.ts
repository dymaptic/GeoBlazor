import { buildDotNetClosestFacilitySolveResult } from './closestFacilitySolveResult';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import ClosestFacilitySolveResult from '@arcgis/core/rest/support/ClosestFacilitySolveResult';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsClosestFacilitySolveResultGenerated(dotNetObject: any): Promise<any> {
    let jsClosestFacilitySolveResult = new ClosestFacilitySolveResult();
    if (hasValue(dotNetObject.directionLines)) {
        let { buildJsFeatureSet } = await import('./featureSet');
        jsClosestFacilitySolveResult.directionLines = buildJsFeatureSet(dotNetObject.directionLines) as any;
    }
    if (hasValue(dotNetObject.directionPoints)) {
        let { buildJsFeatureSet } = await import('./featureSet');
        jsClosestFacilitySolveResult.directionPoints = buildJsFeatureSet(dotNetObject.directionPoints) as any;
    }
    if (hasValue(dotNetObject.facilities)) {
        let { buildJsFeatureSet } = await import('./featureSet');
        jsClosestFacilitySolveResult.facilities = buildJsFeatureSet(dotNetObject.facilities) as any;
    }
    if (hasValue(dotNetObject.incidents)) {
        let { buildJsFeatureSet } = await import('./featureSet');
        jsClosestFacilitySolveResult.incidents = buildJsFeatureSet(dotNetObject.incidents) as any;
    }
    if (hasValue(dotNetObject.pointBarriers)) {
        let { buildJsFeatureSet } = await import('./featureSet');
        jsClosestFacilitySolveResult.pointBarriers = buildJsFeatureSet(dotNetObject.pointBarriers) as any;
    }
    if (hasValue(dotNetObject.polygonBarriers)) {
        let { buildJsFeatureSet } = await import('./featureSet');
        jsClosestFacilitySolveResult.polygonBarriers = buildJsFeatureSet(dotNetObject.polygonBarriers) as any;
    }
    if (hasValue(dotNetObject.polylineBarriers)) {
        let { buildJsFeatureSet } = await import('./featureSet');
        jsClosestFacilitySolveResult.polylineBarriers = buildJsFeatureSet(dotNetObject.polylineBarriers) as any;
    }
    if (hasValue(dotNetObject.routes)) {
        let { buildJsFeatureSet } = await import('./featureSet');
        jsClosestFacilitySolveResult.routes = buildJsFeatureSet(dotNetObject.routes) as any;
    }
    if (hasValue(dotNetObject.traversedEdges)) {
        let { buildJsFeatureSet } = await import('./featureSet');
        jsClosestFacilitySolveResult.traversedEdges = buildJsFeatureSet(dotNetObject.traversedEdges) as any;
    }
    if (hasValue(dotNetObject.traversedJunctions)) {
        let { buildJsFeatureSet } = await import('./featureSet');
        jsClosestFacilitySolveResult.traversedJunctions = buildJsFeatureSet(dotNetObject.traversedJunctions) as any;
    }
    if (hasValue(dotNetObject.traversedTurns)) {
        let { buildJsFeatureSet } = await import('./featureSet');
        jsClosestFacilitySolveResult.traversedTurns = buildJsFeatureSet(dotNetObject.traversedTurns) as any;
    }

    if (hasValue(dotNetObject.directions)) {
        jsClosestFacilitySolveResult.directions = dotNetObject.directions;
    }
    if (hasValue(dotNetObject.messages)) {
        jsClosestFacilitySolveResult.messages = dotNetObject.messages;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsClosestFacilitySolveResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsClosestFacilitySolveResult;
    
    let dnInstantiatedObject = await buildDotNetClosestFacilitySolveResult(jsClosestFacilitySolveResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ClosestFacilitySolveResult', e);
    }
    
    return jsClosestFacilitySolveResult;
}
export async function buildDotNetClosestFacilitySolveResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetClosestFacilitySolveResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.directionLines)) {
            let { buildDotNetFeatureSet } = await import('./featureSet');
            dotNetClosestFacilitySolveResult.directionLines = await buildDotNetFeatureSet(jsObject.directionLines, layerId, viewId);
        }
        if (hasValue(jsObject.directionPoints)) {
            let { buildDotNetFeatureSet } = await import('./featureSet');
            dotNetClosestFacilitySolveResult.directionPoints = await buildDotNetFeatureSet(jsObject.directionPoints, layerId, viewId);
        }
        if (hasValue(jsObject.facilities)) {
            let { buildDotNetFeatureSet } = await import('./featureSet');
            dotNetClosestFacilitySolveResult.facilities = await buildDotNetFeatureSet(jsObject.facilities, layerId, viewId);
        }
        if (hasValue(jsObject.incidents)) {
            let { buildDotNetFeatureSet } = await import('./featureSet');
            dotNetClosestFacilitySolveResult.incidents = await buildDotNetFeatureSet(jsObject.incidents, layerId, viewId);
        }
        if (hasValue(jsObject.pointBarriers)) {
            let { buildDotNetFeatureSet } = await import('./featureSet');
            dotNetClosestFacilitySolveResult.pointBarriers = await buildDotNetFeatureSet(jsObject.pointBarriers, layerId, viewId);
        }
        if (hasValue(jsObject.polygonBarriers)) {
            let { buildDotNetFeatureSet } = await import('./featureSet');
            dotNetClosestFacilitySolveResult.polygonBarriers = await buildDotNetFeatureSet(jsObject.polygonBarriers, layerId, viewId);
        }
        if (hasValue(jsObject.polylineBarriers)) {
            let { buildDotNetFeatureSet } = await import('./featureSet');
            dotNetClosestFacilitySolveResult.polylineBarriers = await buildDotNetFeatureSet(jsObject.polylineBarriers, layerId, viewId);
        }
        if (hasValue(jsObject.routes)) {
            let { buildDotNetFeatureSet } = await import('./featureSet');
            dotNetClosestFacilitySolveResult.routes = await buildDotNetFeatureSet(jsObject.routes, layerId, viewId);
        }
        if (hasValue(jsObject.traversedEdges)) {
            let { buildDotNetFeatureSet } = await import('./featureSet');
            dotNetClosestFacilitySolveResult.traversedEdges = await buildDotNetFeatureSet(jsObject.traversedEdges, layerId, viewId);
        }
        if (hasValue(jsObject.traversedJunctions)) {
            let { buildDotNetFeatureSet } = await import('./featureSet');
            dotNetClosestFacilitySolveResult.traversedJunctions = await buildDotNetFeatureSet(jsObject.traversedJunctions, layerId, viewId);
        }
        if (hasValue(jsObject.traversedTurns)) {
            let { buildDotNetFeatureSet } = await import('./featureSet');
            dotNetClosestFacilitySolveResult.traversedTurns = await buildDotNetFeatureSet(jsObject.traversedTurns, layerId, viewId);
        }
        if (hasValue(jsObject.directions)) {
            dotNetClosestFacilitySolveResult.directions = jsObject.directions;
        }
        if (hasValue(jsObject.messages)) {
            dotNetClosestFacilitySolveResult.messages = jsObject.messages;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetClosestFacilitySolveResult.id = k;
                break;
            }
        }
    }

    return dotNetClosestFacilitySolveResult;
}

