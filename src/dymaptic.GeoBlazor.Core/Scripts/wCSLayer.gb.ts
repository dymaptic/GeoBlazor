// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import WCSLayer from '@arcgis/core/layers/WCSLayer';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class WCSLayerGenerated implements IPropertyWrapper {
    public layer: WCSLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: WCSLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    async createLayerView(view: any,
        options: any): Promise<any> {
        return await this.layer.createLayerView(view,
            options);
    }

    async createPopupTemplate(options: any): Promise<any> {
        return this.layer.createPopupTemplate(options);
    }

    async fetchAttributionData(): Promise<any> {
        return await this.layer.fetchAttributionData();
    }

    async fetchPixels(extent: any,
        width: any,
        height: any,
        options: any): Promise<any> {
        let { buildJsExtent } = await import('./extent');
        let jsExtent = buildJsExtent(extent) as any;
        return await this.layer.fetchPixels(jsExtent,
            width,
            height,
            options);
    }

    async identify(point: any,
        options: any): Promise<any> {
        let { buildJsPoint } = await import('./point');
        let jsPoint = buildJsPoint(point) as any;
        let { buildJsRasterIdentifyOptions } = await import('./rasterIdentifyOptions');
        let jsOptions = await buildJsRasterIdentifyOptions(options, this.layerId, this.viewId) as any;
        return await this.layer.identify(jsPoint,
            jsOptions);
    }

    // region properties
    
    async getCoverageInfo(): Promise<any> {
        if (!hasValue(this.layer.coverageInfo)) {
            return null;
        }
        
        let { buildDotNetCoverageInfo } = await import('./coverageInfo');
        return await buildDotNetCoverageInfo(this.layer.coverageInfo);
    }
    async setCoverageInfo(value: any): Promise<void> {
        let { buildJsCoverageInfo } = await import('./coverageInfo');
        this.layer.coverageInfo = await  buildJsCoverageInfo(value, this.layerId, this.viewId);
    }
    async getFullExtent(): Promise<any> {
        if (!hasValue(this.layer.fullExtent)) {
            return null;
        }
        
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(this.layer.fullExtent);
    }
    async setFullExtent(value: any): Promise<void> {
        let { buildJsExtent } = await import('./extent');
        this.layer.fullExtent =  buildJsExtent(value);
    }
    async getMultidimensionalSubset(): Promise<any> {
        if (!hasValue(this.layer.multidimensionalSubset)) {
            return null;
        }
        
        let { buildDotNetMultidimensionalSubset } = await import('./multidimensionalSubset');
        return await buildDotNetMultidimensionalSubset(this.layer.multidimensionalSubset);
    }
    async setMultidimensionalSubset(value: any): Promise<void> {
        let { buildJsMultidimensionalSubset } = await import('./multidimensionalSubset');
        this.layer.multidimensionalSubset = await  buildJsMultidimensionalSubset(value, this.layerId, this.viewId);
    }
    async getPopupTemplate(): Promise<any> {
        if (!hasValue(this.layer.popupTemplate)) {
            return null;
        }
        
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        return await buildDotNetPopupTemplate(this.layer.popupTemplate);
    }
    async setPopupTemplate(value: any): Promise<void> {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        this.layer.popupTemplate =  buildJsPopupTemplate(value, this.layerId, this.viewId);
    }
    async getPortalItem(): Promise<any> {
        if (!hasValue(this.layer.portalItem)) {
            return null;
        }
        
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(this.layer.portalItem);
    }
    async setPortalItem(value: any): Promise<void> {
        let { buildJsPortalItem } = await import('./portalItem');
        this.layer.portalItem = await  buildJsPortalItem(value, this.layerId, this.viewId);
    }
    async getRasterFields(): Promise<any> {
        if (!hasValue(this.layer.rasterFields)) {
            return null;
        }
        
        let { buildDotNetField } = await import('./field');
        return this.layer.rasterFields!.map(i => buildDotNetField(i));
    }
    
    async setRasterFields(value: any): Promise<void> {
        let { buildJsField } = await import('./field');
        this.layer.rasterFields = value.map(i => buildJsField(i)) as any;
    }
    
    async getRasterInfo(): Promise<any> {
        if (!hasValue(this.layer.rasterInfo)) {
            return null;
        }
        
        let { buildDotNetRasterInfo } = await import('./rasterInfo');
        return await buildDotNetRasterInfo(this.layer.rasterInfo, this.layerId, this.viewId);
    }
    async getServiceRasterInfo(): Promise<any> {
        if (!hasValue(this.layer.serviceRasterInfo)) {
            return null;
        }
        
        let { buildDotNetRasterInfo } = await import('./rasterInfo');
        return await buildDotNetRasterInfo(this.layer.serviceRasterInfo, this.layerId, this.viewId);
    }
    async getTimeExtent(): Promise<any> {
        if (!hasValue(this.layer.timeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.timeExtent);
    }
    async setTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.timeExtent = await  buildJsTimeExtent(value, this.layerId, this.viewId);
    }
    async getTimeInfo(): Promise<any> {
        if (!hasValue(this.layer.timeInfo)) {
            return null;
        }
        
        let { buildDotNetTimeInfo } = await import('./timeInfo');
        return await buildDotNetTimeInfo(this.layer.timeInfo);
    }
    async setTimeInfo(value: any): Promise<void> {
        let { buildJsTimeInfo } = await import('./timeInfo');
        this.layer.timeInfo = await  buildJsTimeInfo(value, this.layerId, this.viewId);
    }
    async getVisibilityTimeExtent(): Promise<any> {
        if (!hasValue(this.layer.visibilityTimeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.visibilityTimeExtent);
    }
    async setVisibilityTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.visibilityTimeExtent = await  buildJsTimeExtent(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}


export async function buildJsWCSLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.coverageInfo)) {
        let { buildJsCoverageInfo } = await import('./coverageInfo');
        properties.coverageInfo = await buildJsCoverageInfo(dotNetObject.coverageInfo, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.fullExtent)) {
        let { buildJsExtent } = await import('./extent');
        properties.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;
    }
    if (hasValue(dotNetObject.multidimensionalSubset)) {
        let { buildJsMultidimensionalSubset } = await import('./multidimensionalSubset');
        properties.multidimensionalSubset = await buildJsMultidimensionalSubset(dotNetObject.multidimensionalSubset, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.popupTemplate)) {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        properties.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.portalItem)) {
        let { buildJsPortalItem } = await import('./portalItem');
        properties.portalItem = await buildJsPortalItem(dotNetObject.portalItem, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.rasterFields)) {
        let { buildJsField } = await import('./field');
        properties.rasterFields = dotNetObject.rasterFields.map(i => buildJsField(i)) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.timeInfo)) {
        let { buildJsTimeInfo } = await import('./timeInfo');
        properties.timeInfo = await buildJsTimeInfo(dotNetObject.timeInfo, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.visibilityTimeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.arcGISLayerId)) {
        properties.id = dotNetObject.arcGISLayerId;
    }
    if (hasValue(dotNetObject.bandIds)) {
        properties.bandIds = dotNetObject.bandIds;
    }
    if (hasValue(dotNetObject.blendMode)) {
        properties.blendMode = dotNetObject.blendMode;
    }
    if (hasValue(dotNetObject.copyright)) {
        properties.copyright = dotNetObject.copyright;
    }
    if (hasValue(dotNetObject.coverageId)) {
        properties.coverageId = dotNetObject.coverageId;
    }
    if (hasValue(dotNetObject.customParameters)) {
        properties.customParameters = dotNetObject.customParameters;
    }
    if (hasValue(dotNetObject.effect)) {
        properties.effect = dotNetObject.effect;
    }
    if (hasValue(dotNetObject.interpolation)) {
        properties.interpolation = dotNetObject.interpolation;
    }
    if (hasValue(dotNetObject.legendEnabled)) {
        properties.legendEnabled = dotNetObject.legendEnabled;
    }
    if (hasValue(dotNetObject.listMode)) {
        properties.listMode = dotNetObject.listMode;
    }
    if (hasValue(dotNetObject.maxScale)) {
        properties.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.minScale)) {
        properties.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.multidimensionalDefinition)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedMultidimensionalDefinition } = dotNetObject.multidimensionalDefinition;
        properties.multidimensionalDefinition = sanitizedMultidimensionalDefinition;
    }
    if (hasValue(dotNetObject.opacity)) {
        properties.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.persistenceEnabled)) {
        properties.persistenceEnabled = dotNetObject.persistenceEnabled;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        properties.popupEnabled = dotNetObject.popupEnabled;
    }
    if (hasValue(dotNetObject.renderer)) {
        properties.renderer = dotNetObject.renderer;
    }
    if (hasValue(dotNetObject.timeOffset)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedTimeOffset } = dotNetObject.timeOffset;
        properties.timeOffset = sanitizedTimeOffset;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.url)) {
        properties.url = dotNetObject.url;
    }
    if (hasValue(dotNetObject.useViewTime)) {
        properties.useViewTime = dotNetObject.useViewTime;
    }
    if (hasValue(dotNetObject.version)) {
        properties.version = dotNetObject.version;
    }
    let jsWCSLayer = new WCSLayer(properties);

    let { default: WCSLayerWrapper } = await import('./wCSLayer');
    let wCSLayerWrapper = new WCSLayerWrapper(jsWCSLayer);
    wCSLayerWrapper.geoBlazorId = dotNetObject.id;
    wCSLayerWrapper.viewId = viewId;
    wCSLayerWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(wCSLayerWrapper);
    jsObjectRefs[dotNetObject.id] = wCSLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsWCSLayer;
    let { buildDotNetWCSLayer } = await import('./wCSLayer');
    let dnInstantiatedObject = await buildDotNetWCSLayer(jsWCSLayer);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for WCSLayer', e);
    }
    
    return jsWCSLayer;
}

export async function buildDotNetWCSLayerGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWCSLayer: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.coverageInfo)) {
            let { buildDotNetCoverageInfo } = await import('./coverageInfo');
            dotNetWCSLayer.coverageInfo = await buildDotNetCoverageInfo(jsObject.coverageInfo);
        }
        if (hasValue(jsObject.fullExtent)) {
            let { buildDotNetExtent } = await import('./extent');
            dotNetWCSLayer.fullExtent = buildDotNetExtent(jsObject.fullExtent);
        }
        if (hasValue(jsObject.multidimensionalSubset)) {
            let { buildDotNetMultidimensionalSubset } = await import('./multidimensionalSubset');
            dotNetWCSLayer.multidimensionalSubset = await buildDotNetMultidimensionalSubset(jsObject.multidimensionalSubset);
        }
        if (hasValue(jsObject.popupTemplate)) {
            let { buildDotNetPopupTemplate } = await import('./popupTemplate');
            dotNetWCSLayer.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
        }
        if (hasValue(jsObject.portalItem)) {
            let { buildDotNetPortalItem } = await import('./portalItem');
            dotNetWCSLayer.portalItem = await buildDotNetPortalItem(jsObject.portalItem);
        }
        if (hasValue(jsObject.rasterFields)) {
            let { buildDotNetField } = await import('./field');
            dotNetWCSLayer.rasterFields = jsObject.rasterFields.map(i => buildDotNetField(i));
        }
        if (hasValue(jsObject.rasterInfo)) {
            let { buildDotNetRasterInfo } = await import('./rasterInfo');
            dotNetWCSLayer.rasterInfo = await buildDotNetRasterInfo(jsObject.rasterInfo, layerId, viewId);
        }
        if (hasValue(jsObject.serviceRasterInfo)) {
            let { buildDotNetRasterInfo } = await import('./rasterInfo');
            dotNetWCSLayer.serviceRasterInfo = await buildDotNetRasterInfo(jsObject.serviceRasterInfo, layerId, viewId);
        }
        if (hasValue(jsObject.timeExtent)) {
            let { buildDotNetTimeExtent } = await import('./timeExtent');
            dotNetWCSLayer.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
        }
        if (hasValue(jsObject.timeInfo)) {
            let { buildDotNetTimeInfo } = await import('./timeInfo');
            dotNetWCSLayer.timeInfo = await buildDotNetTimeInfo(jsObject.timeInfo);
        }
        if (hasValue(jsObject.visibilityTimeExtent)) {
            let { buildDotNetTimeExtent } = await import('./timeExtent');
            dotNetWCSLayer.visibilityTimeExtent = buildDotNetTimeExtent(jsObject.visibilityTimeExtent);
        }
    if (hasValue(jsObject.id)) {
        dotNetWCSLayer.arcGISLayerId = jsObject.id;
    }
    if (hasValue(jsObject.bandIds)) {
        dotNetWCSLayer.bandIds = jsObject.bandIds;
    }
    if (hasValue(jsObject.blendMode)) {
        dotNetWCSLayer.blendMode = jsObject.blendMode;
    }
    if (hasValue(jsObject.copyright)) {
        dotNetWCSLayer.copyright = jsObject.copyright;
    }
    if (hasValue(jsObject.coverageId)) {
        dotNetWCSLayer.coverageId = jsObject.coverageId;
    }
    if (hasValue(jsObject.customParameters)) {
        dotNetWCSLayer.customParameters = jsObject.customParameters;
    }
    if (hasValue(jsObject.effect)) {
        dotNetWCSLayer.effect = jsObject.effect;
    }
    if (hasValue(jsObject.interpolation)) {
        dotNetWCSLayer.interpolation = jsObject.interpolation;
    }
    if (hasValue(jsObject.legendEnabled)) {
        dotNetWCSLayer.legendEnabled = jsObject.legendEnabled;
    }
    if (hasValue(jsObject.listMode)) {
        dotNetWCSLayer.listMode = jsObject.listMode;
    }
    if (hasValue(jsObject.loaded)) {
        dotNetWCSLayer.loaded = jsObject.loaded;
    }
    if (hasValue(jsObject.maxScale)) {
        dotNetWCSLayer.maxScale = jsObject.maxScale;
    }
    if (hasValue(jsObject.minScale)) {
        dotNetWCSLayer.minScale = jsObject.minScale;
    }
    if (hasValue(jsObject.multidimensionalDefinition)) {
        dotNetWCSLayer.multidimensionalDefinition = jsObject.multidimensionalDefinition;
    }
    if (hasValue(jsObject.opacity)) {
        dotNetWCSLayer.opacity = jsObject.opacity;
    }
    if (hasValue(jsObject.persistenceEnabled)) {
        dotNetWCSLayer.persistenceEnabled = jsObject.persistenceEnabled;
    }
    if (hasValue(jsObject.popupEnabled)) {
        dotNetWCSLayer.popupEnabled = jsObject.popupEnabled;
    }
    if (hasValue(jsObject.renderer)) {
        dotNetWCSLayer.renderer = jsObject.renderer;
    }
    if (hasValue(jsObject.timeOffset)) {
        dotNetWCSLayer.timeOffset = jsObject.timeOffset;
    }
    if (hasValue(jsObject.title)) {
        dotNetWCSLayer.title = jsObject.title;
    }
    if (hasValue(jsObject.type)) {
        dotNetWCSLayer.type = jsObject.type;
    }
    if (hasValue(jsObject.url)) {
        dotNetWCSLayer.url = jsObject.url;
    }
    if (hasValue(jsObject.useViewTime)) {
        dotNetWCSLayer.useViewTime = jsObject.useViewTime;
    }
    if (hasValue(jsObject.version)) {
        dotNetWCSLayer.version = jsObject.version;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetWCSLayer.id = k;
                break;
            }
        }
    }

    return dotNetWCSLayer;
}

