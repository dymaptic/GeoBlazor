// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetEditorVisibleElements } from './editorVisibleElements';

export async function buildJsEditorVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsEditorVisibleElements: any = {};
    if (hasValue(dotNetObject.snappingControlsElements)) {
        let { buildJsVisibleElementsSnappingControlsElements } = await import('./visibleElementsSnappingControlsElements');
        jsEditorVisibleElements.snappingControlsElements = await buildJsVisibleElementsSnappingControlsElements(dotNetObject.snappingControlsElements, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.createFeaturesSection)) {
        jsEditorVisibleElements.createFeaturesSection = dotNetObject.createFeaturesSection;
    }
    if (hasValue(dotNetObject.editFeaturesSection)) {
        jsEditorVisibleElements.editFeaturesSection = dotNetObject.editFeaturesSection;
    }
    if (hasValue(dotNetObject.labelsToggle)) {
        jsEditorVisibleElements.labelsToggle = dotNetObject.labelsToggle;
    }
    if (hasValue(dotNetObject.settingsMenu)) {
        jsEditorVisibleElements.settingsMenu = dotNetObject.settingsMenu;
    }
    if (hasValue(dotNetObject.snappingControls)) {
        jsEditorVisibleElements.snappingControls = dotNetObject.snappingControls;
    }
    if (hasValue(dotNetObject.tooltipsToggle)) {
        jsEditorVisibleElements.tooltipsToggle = dotNetObject.tooltipsToggle;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsEditorVisibleElements);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsEditorVisibleElements;
    
    return jsEditorVisibleElements;
}


export async function buildDotNetEditorVisibleElementsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetEditorVisibleElements: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.snappingControlsElements)) {
        let { buildDotNetVisibleElementsSnappingControlsElements } = await import('./visibleElementsSnappingControlsElements');
        dotNetEditorVisibleElements.snappingControlsElements = await buildDotNetVisibleElementsSnappingControlsElements(jsObject.snappingControlsElements);
    }
    if (hasValue(jsObject.createFeaturesSection)) {
        dotNetEditorVisibleElements.createFeaturesSection = jsObject.createFeaturesSection;
    }
    if (hasValue(jsObject.editFeaturesSection)) {
        dotNetEditorVisibleElements.editFeaturesSection = jsObject.editFeaturesSection;
    }
    if (hasValue(jsObject.labelsToggle)) {
        dotNetEditorVisibleElements.labelsToggle = jsObject.labelsToggle;
    }
    if (hasValue(jsObject.settingsMenu)) {
        dotNetEditorVisibleElements.settingsMenu = jsObject.settingsMenu;
    }
    if (hasValue(jsObject.snappingControls)) {
        dotNetEditorVisibleElements.snappingControls = jsObject.snappingControls;
    }
    if (hasValue(jsObject.tooltipsToggle)) {
        dotNetEditorVisibleElements.tooltipsToggle = jsObject.tooltipsToggle;
    }

    return dotNetEditorVisibleElements;
}

