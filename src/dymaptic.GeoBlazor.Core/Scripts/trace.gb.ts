// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import trace = __esri.trace;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class TraceGenerated implements IPropertyWrapper {
    public component: trace;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: trace) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async trace(url: any,
        parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsTraceParameters } = await import('./traceParameters');
        let jsparameters = await buildJsTraceParameters(parameters, this.layerId, this.viewId) as any;
        return await this.component.trace(url,
            jsparameters,
            requestOptions);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsTraceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jstrace: any = {};


    let { default: TraceWrapper } = await import('./trace');
    let traceWrapper = new TraceWrapper(jstrace);
    traceWrapper.geoBlazorId = dotNetObject.id;
    traceWrapper.viewId = viewId;
    traceWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(traceWrapper);
    jsObjectRefs[dotNetObject.id] = traceWrapper;
    arcGisObjectRefs[dotNetObject.id] = jstrace;
    let { buildDotNetTrace } = await import('./trace');
    let dnInstantiatedObject = await buildDotNetTrace(jstrace);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Trace', e);
    }
    
    return jstrace;
}

export async function buildDotNetTraceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTrace: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTrace.id = k;
                break;
            }
        }
    }

    return dotNetTrace;
}

