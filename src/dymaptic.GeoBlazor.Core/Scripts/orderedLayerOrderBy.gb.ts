// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetOrderedLayerOrderBy } from './orderedLayerOrderBy';

export async function buildJsOrderedLayerOrderByGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsOrderedLayerOrderBy: any = {};

    if (hasValue(dotNetObject.field)) {
        jsOrderedLayerOrderBy.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.order)) {
        jsOrderedLayerOrderBy.order = dotNetObject.order;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        jsOrderedLayerOrderBy.valueExpression = dotNetObject.valueExpression;
    }
    
    jsObjectRefs[dotNetObject.id] = jsOrderedLayerOrderBy;
    arcGisObjectRefs[dotNetObject.id] = jsOrderedLayerOrderBy;
    
    return jsOrderedLayerOrderBy;
}


export async function buildDotNetOrderedLayerOrderByGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetOrderedLayerOrderBy: any = {};
    
    if (hasValue(jsObject.field)) {
        dotNetOrderedLayerOrderBy.field = jsObject.field;
    }
    
    if (hasValue(jsObject.order)) {
        dotNetOrderedLayerOrderBy.order = removeCircularReferences(jsObject.order);
    }
    
    if (hasValue(jsObject.valueExpression)) {
        dotNetOrderedLayerOrderBy.valueExpression = jsObject.valueExpression;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetOrderedLayerOrderBy.id = geoBlazorId;
    }

    return dotNetOrderedLayerOrderBy;
}

