// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import TickConfig = __esri.TickConfig;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class TickConfigGenerated implements IPropertyWrapper {
    public component: TickConfig;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: TickConfig) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildDotNetTickConfigGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTickConfig: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.labelFormatFunction)) {
            dotNetTickConfig.labelFormatFunction = jsObject.labelFormatFunction;
        }
        if (hasValue(jsObject.labelsVisible)) {
            dotNetTickConfig.labelsVisible = jsObject.labelsVisible;
        }
        if (hasValue(jsObject.mode)) {
            dotNetTickConfig.mode = jsObject.mode;
        }
        if (hasValue(jsObject.tickCreatedFunction)) {
            dotNetTickConfig.tickCreatedFunction = jsObject.tickCreatedFunction;
        }
        if (hasValue(jsObject.values)) {
            dotNetTickConfig.values = jsObject.values;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTickConfig.id = k;
                break;
            }
        }
    }

    return dotNetTickConfig;
}

