// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetClassBreaksResult } from './classBreaksResult';

export async function buildJsClassBreaksResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsClassBreaksResult: any = {};
    if (hasValue(dotNetObject.classBreakInfos) && dotNetObject.classBreakInfos.length > 0) {
        let { buildJsClassBreak } = await import('./classBreak');
        jsClassBreaksResult.classBreakInfos = await Promise.all(dotNetObject.classBreakInfos.map(async i => await buildJsClassBreak(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.maxValue)) {
        jsClassBreaksResult.maxValue = dotNetObject.maxValue;
    }
    if (hasValue(dotNetObject.minValue)) {
        jsClassBreaksResult.minValue = dotNetObject.minValue;
    }
    if (hasValue(dotNetObject.normalizationTotal)) {
        jsClassBreaksResult.normalizationTotal = dotNetObject.normalizationTotal;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsClassBreaksResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsClassBreaksResult;
    
    return jsClassBreaksResult;
}


export async function buildDotNetClassBreaksResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetClassBreaksResult: any = {};
    
    if (hasValue(jsObject.classBreakInfos)) {
        let { buildDotNetClassBreak } = await import('./classBreak');
        dotNetClassBreaksResult.classBreakInfos = await Promise.all(jsObject.classBreakInfos.map(async i => await buildDotNetClassBreak(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.maxValue)) {
        dotNetClassBreaksResult.maxValue = jsObject.maxValue;
    }
    
    if (hasValue(jsObject.minValue)) {
        dotNetClassBreaksResult.minValue = jsObject.minValue;
    }
    
    if (hasValue(jsObject.normalizationTotal)) {
        dotNetClassBreaksResult.normalizationTotal = jsObject.normalizationTotal;
    }
    

    return dotNetClassBreaksResult;
}

