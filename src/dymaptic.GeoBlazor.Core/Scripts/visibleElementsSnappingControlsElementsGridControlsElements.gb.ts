// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetVisibleElementsSnappingControlsElementsGridControlsElements } from './visibleElementsSnappingControlsElementsGridControlsElements';

export async function buildJsVisibleElementsSnappingControlsElementsGridControlsElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsVisibleElementsSnappingControlsElementsGridControlsElements: any = {};

    if (hasValue(dotNetObject.colorSelection)) {
        jsVisibleElementsSnappingControlsElementsGridControlsElements.colorSelection = dotNetObject.colorSelection;
    }
    if (hasValue(dotNetObject.dynamicScaleToggle)) {
        jsVisibleElementsSnappingControlsElementsGridControlsElements.dynamicScaleToggle = dotNetObject.dynamicScaleToggle;
    }
    if (hasValue(dotNetObject.gridEnabledToggle)) {
        jsVisibleElementsSnappingControlsElementsGridControlsElements.gridEnabledToggle = dotNetObject.gridEnabledToggle;
    }
    if (hasValue(dotNetObject.gridSnapEnabledToggle)) {
        jsVisibleElementsSnappingControlsElementsGridControlsElements.gridSnapEnabledToggle = dotNetObject.gridSnapEnabledToggle;
    }
    if (hasValue(dotNetObject.lineIntervalInput)) {
        jsVisibleElementsSnappingControlsElementsGridControlsElements.lineIntervalInput = dotNetObject.lineIntervalInput;
    }
    if (hasValue(dotNetObject.numericInputs)) {
        jsVisibleElementsSnappingControlsElementsGridControlsElements.numericInputs = dotNetObject.numericInputs;
    }
    if (hasValue(dotNetObject.outOfScaleWarning)) {
        jsVisibleElementsSnappingControlsElementsGridControlsElements.outOfScaleWarning = dotNetObject.outOfScaleWarning;
    }
    if (hasValue(dotNetObject.placementButtons)) {
        jsVisibleElementsSnappingControlsElementsGridControlsElements.placementButtons = dotNetObject.placementButtons;
    }
    if (hasValue(dotNetObject.rotateWithMapToggle)) {
        jsVisibleElementsSnappingControlsElementsGridControlsElements.rotateWithMapToggle = dotNetObject.rotateWithMapToggle;
    }
    
    jsObjectRefs[dotNetObject.id] = jsVisibleElementsSnappingControlsElementsGridControlsElements;
    arcGisObjectRefs[dotNetObject.id] = jsVisibleElementsSnappingControlsElementsGridControlsElements;
    
    return jsVisibleElementsSnappingControlsElementsGridControlsElements;
}


export async function buildDotNetVisibleElementsSnappingControlsElementsGridControlsElementsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVisibleElementsSnappingControlsElementsGridControlsElements: any = {};
    
    if (hasValue(jsObject.colorSelection)) {
        dotNetVisibleElementsSnappingControlsElementsGridControlsElements.colorSelection = jsObject.colorSelection;
    }
    
    if (hasValue(jsObject.dynamicScaleToggle)) {
        dotNetVisibleElementsSnappingControlsElementsGridControlsElements.dynamicScaleToggle = jsObject.dynamicScaleToggle;
    }
    
    if (hasValue(jsObject.gridEnabledToggle)) {
        dotNetVisibleElementsSnappingControlsElementsGridControlsElements.gridEnabledToggle = jsObject.gridEnabledToggle;
    }
    
    if (hasValue(jsObject.gridSnapEnabledToggle)) {
        dotNetVisibleElementsSnappingControlsElementsGridControlsElements.gridSnapEnabledToggle = jsObject.gridSnapEnabledToggle;
    }
    
    if (hasValue(jsObject.lineIntervalInput)) {
        dotNetVisibleElementsSnappingControlsElementsGridControlsElements.lineIntervalInput = jsObject.lineIntervalInput;
    }
    
    if (hasValue(jsObject.numericInputs)) {
        dotNetVisibleElementsSnappingControlsElementsGridControlsElements.numericInputs = jsObject.numericInputs;
    }
    
    if (hasValue(jsObject.outOfScaleWarning)) {
        dotNetVisibleElementsSnappingControlsElementsGridControlsElements.outOfScaleWarning = jsObject.outOfScaleWarning;
    }
    
    if (hasValue(jsObject.placementButtons)) {
        dotNetVisibleElementsSnappingControlsElementsGridControlsElements.placementButtons = jsObject.placementButtons;
    }
    
    if (hasValue(jsObject.rotateWithMapToggle)) {
        dotNetVisibleElementsSnappingControlsElementsGridControlsElements.rotateWithMapToggle = jsObject.rotateWithMapToggle;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetVisibleElementsSnappingControlsElementsGridControlsElements.id = geoBlazorId;
    }

    return dotNetVisibleElementsSnappingControlsElementsGridControlsElements;
}

