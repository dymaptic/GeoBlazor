// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetHeatmapRendererResult } from './heatmapRendererResult';

export async function buildJsHeatmapRendererResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsHeatmapRendererResult: any = {}
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsHeatmapRenderer } = await import('./heatmapRenderer');
        jsHeatmapRendererResult.renderer = await buildJsHeatmapRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.scheme)) {
        let { buildJsHeatmapScheme } = await import('./heatmapScheme');
        jsHeatmapRendererResult.scheme = await buildJsHeatmapScheme(dotNetObject.scheme, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.basemapId)) {
        jsHeatmapRendererResult.basemapId = dotNetObject.basemapId;
    }
    if (hasValue(dotNetObject.basemapTheme)) {
        jsHeatmapRendererResult.basemapTheme = dotNetObject.basemapTheme;
    }
    if (hasValue(dotNetObject.defaultValuesUsed)) {
        jsHeatmapRendererResult.defaultValuesUsed = dotNetObject.defaultValuesUsed;
    }
    if (hasValue(dotNetObject.statistics)) {
        jsHeatmapRendererResult.statistics = dotNetObject.statistics;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsHeatmapRendererResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsHeatmapRendererResult;
    
    let dnInstantiatedObject = await buildDotNetHeatmapRendererResult(jsHeatmapRendererResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for HeatmapRendererResult', e);
    }
    
    return jsHeatmapRendererResult;
}

export async function buildDotNetHeatmapRendererResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetHeatmapRendererResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.renderer)) {
            let { buildDotNetHeatmapRenderer } = await import('./heatmapRenderer');
            dotNetHeatmapRendererResult.renderer = await buildDotNetHeatmapRenderer(jsObject.renderer);
        }
        if (hasValue(jsObject.scheme)) {
            let { buildDotNetHeatmapScheme } = await import('./heatmapScheme');
            dotNetHeatmapRendererResult.scheme = await buildDotNetHeatmapScheme(jsObject.scheme);
        }
    if (hasValue(jsObject.basemapId)) {
        dotNetHeatmapRendererResult.basemapId = jsObject.basemapId;
    }
    if (hasValue(jsObject.basemapTheme)) {
        dotNetHeatmapRendererResult.basemapTheme = jsObject.basemapTheme;
    }
    if (hasValue(jsObject.defaultValuesUsed)) {
        dotNetHeatmapRendererResult.defaultValuesUsed = jsObject.defaultValuesUsed;
    }
    if (hasValue(jsObject.statistics)) {
        dotNetHeatmapRendererResult.statistics = jsObject.statistics;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetHeatmapRendererResult.id = k;
                break;
            }
        }
    }

    return dotNetHeatmapRendererResult;
}

