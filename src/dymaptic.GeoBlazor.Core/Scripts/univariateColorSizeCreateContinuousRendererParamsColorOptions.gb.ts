import { buildDotNetUnivariateColorSizeCreateContinuousRendererParamsColorOptions } from './univariateColorSizeCreateContinuousRendererParamsColorOptions';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import univariateColorSizeCreateContinuousRendererParamsColorOptions = __esri.univariateColorSizeCreateContinuousRendererParamsColorOptions;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsUnivariateColorSizeCreateContinuousRendererParamsColorOptionsGenerated(dotNetObject: any): Promise<any> {
    let jsunivariateColorSizeCreateContinuousRendererParamsColorOptions: any = {}

    if (hasValue(dotNetObject.colorScheme)) {
        jsunivariateColorSizeCreateContinuousRendererParamsColorOptions.colorScheme = dotNetObject.colorScheme;
    }
    if (hasValue(dotNetObject.isContinuous)) {
        jsunivariateColorSizeCreateContinuousRendererParamsColorOptions.isContinuous = dotNetObject.isContinuous;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsunivariateColorSizeCreateContinuousRendererParamsColorOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsunivariateColorSizeCreateContinuousRendererParamsColorOptions;
    
    let dnInstantiatedObject = await buildDotNetUnivariateColorSizeCreateContinuousRendererParamsColorOptions(jsunivariateColorSizeCreateContinuousRendererParamsColorOptions);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for UnivariateColorSizeCreateContinuousRendererParamsColorOptions', e);
    }
    
    return jsunivariateColorSizeCreateContinuousRendererParamsColorOptions;
}
export async function buildDotNetUnivariateColorSizeCreateContinuousRendererParamsColorOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUnivariateColorSizeCreateContinuousRendererParamsColorOptions: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.colorScheme)) {
            dotNetUnivariateColorSizeCreateContinuousRendererParamsColorOptions.colorScheme = jsObject.colorScheme;
        }
        if (hasValue(jsObject.isContinuous)) {
            dotNetUnivariateColorSizeCreateContinuousRendererParamsColorOptions.isContinuous = jsObject.isContinuous;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetUnivariateColorSizeCreateContinuousRendererParamsColorOptions.id = k;
                break;
            }
        }
    }

    return dotNetUnivariateColorSizeCreateContinuousRendererParamsColorOptions;
}

