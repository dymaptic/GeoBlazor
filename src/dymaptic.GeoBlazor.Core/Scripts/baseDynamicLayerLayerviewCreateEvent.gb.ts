// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetBaseDynamicLayerLayerviewCreateEvent } from './baseDynamicLayerLayerviewCreateEvent';

export async function buildJsBaseDynamicLayerLayerviewCreateEventGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsBaseDynamicLayerLayerviewCreateEvent: any = {};
    if (hasValue(viewId)) {
        jsBaseDynamicLayerLayerviewCreateEvent.view = arcGisObjectRefs[viewId];
    }
    if (hasValue(dotNetObject.layerView)) {
        let { buildJsLayerView } = await import('./layerView');
        jsBaseDynamicLayerLayerviewCreateEvent.layerView = await buildJsLayerView(dotNetObject.layerView, layerId, viewId) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsBaseDynamicLayerLayerviewCreateEvent);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsBaseDynamicLayerLayerviewCreateEvent;
    
    let dnInstantiatedObject = await buildDotNetBaseDynamicLayerLayerviewCreateEvent(jsBaseDynamicLayerLayerviewCreateEvent);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BaseDynamicLayerLayerviewCreateEvent', e);
    }
    
    return jsBaseDynamicLayerLayerviewCreateEvent;
}

export async function buildDotNetBaseDynamicLayerLayerviewCreateEventGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBaseDynamicLayerLayerviewCreateEvent: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.layerView)) {
            let { buildDotNetLayerView } = await import('./layerView');
            dotNetBaseDynamicLayerLayerviewCreateEvent.layerView = await buildDotNetLayerView(jsObject.layerView);
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetBaseDynamicLayerLayerviewCreateEvent.id = k;
                break;
            }
        }
    }

    return dotNetBaseDynamicLayerLayerviewCreateEvent;
}

