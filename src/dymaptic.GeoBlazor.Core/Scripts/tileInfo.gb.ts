// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import TileInfo from '@arcgis/core/layers/support/TileInfo';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, sanitize, removeCircularReferences } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class TileInfoGenerated implements IPropertyWrapper {
    public component: TileInfo;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: TileInfo) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.lods) && dotNetObject.lods.length > 0) {
            let { buildJsLOD } = await import('./lOD');
            this.component.lods = await Promise.all(dotNetObject.lods.map(async i => await buildJsLOD(i))) as any;
        }
        if (hasValue(dotNetObject.origin)) {
            let { buildJsPoint } = await import('./point');
            this.component.origin = buildJsPoint(dotNetObject.origin) as any;
        }

        if (hasValue(dotNetObject.dpi)) {
            this.component.dpi = dotNetObject.dpi;
        }
        if (hasValue(dotNetObject.format)) {
            this.component.format = dotNetObject.format;
        }
        if (hasValue(dotNetObject.size) && dotNetObject.size.length > 0) {
            this.component.size = dotNetObject.size;
        }
        if (hasValue(dotNetObject.spatialReference)) {
            this.component.spatialReference = sanitize(dotNetObject.spatialReference);
        }
    }
    
    async scaleToZoom(scale: any): Promise<any> {
        return this.component.scaleToZoom(scale);
    }

    async zoomToScale(zoom: any): Promise<any> {
        return this.component.zoomToScale(zoom);
    }

    // region properties
    
    async getLods(): Promise<any> {
        if (!hasValue(this.component.lods)) {
            return null;
        }
        
        let { buildDotNetLOD } = await import('./lOD');
        return await Promise.all(this.component.lods.map(async i => await buildDotNetLOD(i)));
    }
    
    async setLods(value: any): Promise<void> {
        let { buildJsLOD } = await import('./lOD');
        this.component.lods = await Promise.all(value.map(async i => await buildJsLOD(i))) as any;
    }
    
    async getOrigin(): Promise<any> {
        if (!hasValue(this.component.origin)) {
            return null;
        }
        
        let { buildDotNetPoint } = await import('./point');
        return buildDotNetPoint(this.component.origin);
    }
    
    async setOrigin(value: any): Promise<void> {
        let { buildJsPoint } = await import('./point');
        this.component.origin =  buildJsPoint(value);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsTileInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.lods) && dotNetObject.lods.length > 0) {
        let { buildJsLOD } = await import('./lOD');
        properties.lods = await Promise.all(dotNetObject.lods.map(async i => await buildJsLOD(i))) as any;
    }
    if (hasValue(dotNetObject.origin)) {
        let { buildJsPoint } = await import('./point');
        properties.origin = buildJsPoint(dotNetObject.origin) as any;
    }

    if (hasValue(dotNetObject.dpi)) {
        properties.dpi = dotNetObject.dpi;
    }
    if (hasValue(dotNetObject.format)) {
        properties.format = dotNetObject.format;
    }
    if (hasValue(dotNetObject.size) && dotNetObject.size.length > 0) {
        properties.size = dotNetObject.size;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        properties.spatialReference = sanitize(dotNetObject.spatialReference);
    }
    let jsTileInfo = new TileInfo(properties);

    let { default: TileInfoWrapper } = await import('./tileInfo');
    let tileInfoWrapper = new TileInfoWrapper(jsTileInfo);
    tileInfoWrapper.geoBlazorId = dotNetObject.id;
    tileInfoWrapper.viewId = viewId;
    tileInfoWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(tileInfoWrapper);
    jsObjectRefs[dotNetObject.id] = tileInfoWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsTileInfo;
    
    try {
        let { buildDotNetTileInfo } = await import('./tileInfo');
        let dnInstantiatedObject = await buildDotNetTileInfo(jsTileInfo);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type TileInfo detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TileInfo', e);
    }
    
    return jsTileInfo;
}


export async function buildDotNetTileInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTileInfo: any = {};
    
    if (hasValue(jsObject.lods)) {
        let { buildDotNetLOD } = await import('./lOD');
        dotNetTileInfo.lods = await Promise.all(jsObject.lods.map(async i => await buildDotNetLOD(i)));
    }
    
    if (hasValue(jsObject.origin)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetTileInfo.origin = buildDotNetPoint(jsObject.origin);
    }
    
    if (hasValue(jsObject.dpi)) {
        dotNetTileInfo.dpi = jsObject.dpi;
    }
    
    if (hasValue(jsObject.format)) {
        dotNetTileInfo.format = removeCircularReferences(jsObject.format);
    }
    
    if (hasValue(jsObject.isWrappable)) {
        dotNetTileInfo.isWrappable = jsObject.isWrappable;
    }
    
    if (hasValue(jsObject.size)) {
        dotNetTileInfo.size = jsObject.size;
    }
    
    if (hasValue(jsObject.spatialReference)) {
        dotNetTileInfo.spatialReference = removeCircularReferences(jsObject.spatialReference);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetTileInfo.id = geoBlazorId;
    }

    return dotNetTileInfo;
}

