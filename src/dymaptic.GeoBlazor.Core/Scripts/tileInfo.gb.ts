// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import TileInfo from '@arcgis/core/layers/support/TileInfo';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class TileInfoGenerated implements IPropertyWrapper {
    public component: TileInfo;
    public readonly geoBlazorId: string = '';

    constructor(component: TileInfo) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async scaleToZoom(scale: any): Promise<any> {
        return this.component.scaleToZoom(scale);
    }

    async zoomToScale(zoom: any): Promise<any> {
        return this.component.zoomToScale(zoom);
    }

    // region properties
    
    async getLods(): Promise<any> {
        let { buildDotNetLOD } = await import('./lOD');
        return this.component.lods.map(async i => await buildDotNetLOD(i));
    }
    
    async setLods(value: any): Promise<void> {
        let { buildJsLOD } = await import('./lOD');
        this.component.lods = value.map(async i => await buildJsLOD(i));
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}
export async function buildJsTileInfoGenerated(dotNetObject: any): Promise<any> {
    let { default: TileInfo } = await import('@arcgis/core/layers/support/TileInfo');
    let jsTileInfo = new TileInfo();
    if (hasValue(dotNetObject.lods)) {
        let { buildJsLOD } = await import('lOD');
        jsTileInfo.lods = dotNetObject.lods.map(async i => await buildJsLOD(i)) as any;

    }
    if (hasValue(dotNetObject.origin)) {
        let { buildJsPoint } = await import('point');
        jsTileInfo.origin = buildJsPoint(dotNetObject.origin) as any;

    }
    if (hasValue(dotNetObject.dpi)) {
        jsTileInfo.dpi = dotNetObject.dpi;
    }
    if (hasValue(dotNetObject.format)) {
        jsTileInfo.format = dotNetObject.format;
    }
    if (hasValue(dotNetObject.isWrappable)) {
        jsTileInfo.isWrappable = dotNetObject.isWrappable;
    }
    if (hasValue(dotNetObject.size)) {
        jsTileInfo.size = dotNetObject.size;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        jsTileInfo.spatialReference = dotNetObject.spatialReference;
    }
    let { default: TileInfoWrapper } = await import('./tileInfo');
    let tileInfoWrapper = new TileInfoWrapper(jsTileInfo);
    jsTileInfo.id = dotNetObject.id;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(tileInfoWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = tileInfoWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsTileInfo;
    
    return jsTileInfo;
}

export async function buildDotNetTileInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTileInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.lods)) {
            let { buildDotNetLOD } = await import('./lOD');
            dotNetTileInfo.lods = jsObject.lods.map(async i => await buildDotNetLOD(i));
        }
        if (hasValue(jsObject.origin)) {
            let { buildDotNetPoint } = await import('./dotNetBuilder');
            dotNetTileInfo.origin = await buildDotNetPoint(jsObject.origin);
        }
        dotNetTileInfo.dpi = jsObject.dpi;
        dotNetTileInfo.format = jsObject.format;
        dotNetTileInfo.isWrappable = jsObject.isWrappable;
        dotNetTileInfo.size = jsObject.size;
        dotNetTileInfo.spatialReference = jsObject.spatialReference;
    return dotNetTileInfo;
}

