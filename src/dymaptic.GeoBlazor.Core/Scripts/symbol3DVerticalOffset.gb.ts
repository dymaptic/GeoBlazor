// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Symbol3DVerticalOffset from '@arcgis/core/symbols/support/Symbol3DVerticalOffset';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetSymbol3DVerticalOffset } from './symbol3DVerticalOffset';

export async function buildJsSymbol3DVerticalOffsetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.maxWorldLength)) {
        properties.maxWorldLength = dotNetObject.maxWorldLength;
    }
    if (hasValue(dotNetObject.minWorldLength)) {
        properties.minWorldLength = dotNetObject.minWorldLength;
    }
    if (hasValue(dotNetObject.screenLength)) {
        properties.screenLength = dotNetObject.screenLength;
    }
    let jsSymbol3DVerticalOffset = new Symbol3DVerticalOffset(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSymbol3DVerticalOffset);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSymbol3DVerticalOffset;
    
    return jsSymbol3DVerticalOffset;
}


export async function buildDotNetSymbol3DVerticalOffsetGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSymbol3DVerticalOffset: any = {};
    
    if (hasValue(jsObject.maxWorldLength)) {
        dotNetSymbol3DVerticalOffset.maxWorldLength = jsObject.maxWorldLength;
    }
    
    if (hasValue(jsObject.minWorldLength)) {
        dotNetSymbol3DVerticalOffset.minWorldLength = jsObject.minWorldLength;
    }
    
    if (hasValue(jsObject.screenLength)) {
        dotNetSymbol3DVerticalOffset.screenLength = jsObject.screenLength;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSymbol3DVerticalOffset.id = geoBlazorId;
    }

    return dotNetSymbol3DVerticalOffset;
}

