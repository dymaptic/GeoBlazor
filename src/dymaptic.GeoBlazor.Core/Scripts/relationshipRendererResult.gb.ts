import { buildDotNetRelationshipRendererResult } from './relationshipRendererResult';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import relationshipRendererResult = __esri.relationshipRendererResult;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsRelationshipRendererResultGenerated(dotNetObject: any): Promise<any> {
    let jsrelationshipRendererResult: any = {}
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsUniqueValueRenderer } = await import('./uniqueValueRenderer');
        jsrelationshipRendererResult.renderer = await buildJsUniqueValueRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.uniqueValueInfos)) {
        let { buildJsTypeUniqueValueInfo } = await import('./typeUniqueValueInfo');
        jsrelationshipRendererResult.uniqueValueInfos = await Promise.all(dotNetObject.uniqueValueInfos.map(async i => await buildJsTypeUniqueValueInfo(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.basemapId)) {
        jsrelationshipRendererResult.basemapId = dotNetObject.basemapId;
    }
    if (hasValue(dotNetObject.basemapTheme)) {
        jsrelationshipRendererResult.basemapTheme = dotNetObject.basemapTheme;
    }
    if (hasValue(dotNetObject.classBreaks)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedClassBreaks } = dotNetObject.classBreaks;
        jsrelationshipRendererResult.classBreaks = sanitizedClassBreaks;
    }
    if (hasValue(dotNetObject.relationshipScheme)) {
        jsrelationshipRendererResult.relationshipScheme = dotNetObject.relationshipScheme;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsrelationshipRendererResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsrelationshipRendererResult;
    
    let dnInstantiatedObject = await buildDotNetRelationshipRendererResult(jsrelationshipRendererResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RelationshipRendererResult', e);
    }
    
    return jsrelationshipRendererResult;
}
export async function buildDotNetRelationshipRendererResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRelationshipRendererResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.renderer)) {
            let { buildDotNetUniqueValueRenderer } = await import('./uniqueValueRenderer');
            dotNetRelationshipRendererResult.renderer = await buildDotNetUniqueValueRenderer(jsObject.renderer);
        }
        if (hasValue(jsObject.uniqueValueInfos)) {
            let { buildDotNetTypeUniqueValueInfo } = await import('./typeUniqueValueInfo');
            dotNetRelationshipRendererResult.uniqueValueInfos = await Promise.all(jsObject.uniqueValueInfos.map(async i => await buildDotNetTypeUniqueValueInfo(i)));
        }
        if (hasValue(jsObject.basemapId)) {
            dotNetRelationshipRendererResult.basemapId = jsObject.basemapId;
        }
        if (hasValue(jsObject.basemapTheme)) {
            dotNetRelationshipRendererResult.basemapTheme = jsObject.basemapTheme;
        }
        if (hasValue(jsObject.classBreaks)) {
            dotNetRelationshipRendererResult.classBreaks = jsObject.classBreaks;
        }
        if (hasValue(jsObject.relationshipScheme)) {
            dotNetRelationshipRendererResult.relationshipScheme = jsObject.relationshipScheme;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRelationshipRendererResult.id = k;
                break;
            }
        }
    }

    return dotNetRelationshipRendererResult;
}

