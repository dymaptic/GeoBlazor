// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetScaleDependentIcons } from './scaleDependentIcons';

export async function buildJsScaleDependentIconsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsScaleDependentIcons: any = {};
    if (hasValue(dotNetObject.maxSize)) {
        let { buildJsScaleDependentStops } = await import('./scaleDependentStops');
        jsScaleDependentIcons.maxSize = await buildJsScaleDependentStops(dotNetObject.maxSize, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.minSize)) {
        let { buildJsScaleDependentStops } = await import('./scaleDependentStops');
        jsScaleDependentIcons.minSize = await buildJsScaleDependentStops(dotNetObject.minSize, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.field)) {
        jsScaleDependentIcons.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.maxDataValue)) {
        jsScaleDependentIcons.maxDataValue = dotNetObject.maxDataValue;
    }
    if (hasValue(dotNetObject.minDataValue)) {
        jsScaleDependentIcons.minDataValue = dotNetObject.minDataValue;
    }
    if (hasValue(dotNetObject.normalizationField)) {
        jsScaleDependentIcons.normalizationField = dotNetObject.normalizationField;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        jsScaleDependentIcons.valueExpression = dotNetObject.valueExpression;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsScaleDependentIcons);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsScaleDependentIcons;
    
    return jsScaleDependentIcons;
}


export async function buildDotNetScaleDependentIconsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetScaleDependentIcons: any = {};
    
    if (hasValue(jsObject.maxSize)) {
        let { buildDotNetScaleDependentStops } = await import('./scaleDependentStops');
        dotNetScaleDependentIcons.maxSize = await buildDotNetScaleDependentStops(jsObject.maxSize, layerId, viewId);
    }
    
    if (hasValue(jsObject.minSize)) {
        let { buildDotNetScaleDependentStops } = await import('./scaleDependentStops');
        dotNetScaleDependentIcons.minSize = await buildDotNetScaleDependentStops(jsObject.minSize, layerId, viewId);
    }
    
    if (hasValue(jsObject.field)) {
        dotNetScaleDependentIcons.field = jsObject.field;
    }
    
    if (hasValue(jsObject.maxDataValue)) {
        dotNetScaleDependentIcons.maxDataValue = jsObject.maxDataValue;
    }
    
    if (hasValue(jsObject.minDataValue)) {
        dotNetScaleDependentIcons.minDataValue = jsObject.minDataValue;
    }
    
    if (hasValue(jsObject.normalizationField)) {
        dotNetScaleDependentIcons.normalizationField = jsObject.normalizationField;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetScaleDependentIcons.type = jsObject.type;
    }
    
    if (hasValue(jsObject.valueExpression)) {
        dotNetScaleDependentIcons.valueExpression = jsObject.valueExpression;
    }
    

    return dotNetScaleDependentIcons;
}

