// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import MeshTextureTransform from '@arcgis/core/geometry/support/MeshTextureTransform';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class MeshTextureTransformGenerated implements IPropertyWrapper {
    public component: MeshTextureTransform;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: MeshTextureTransform) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsMeshTextureTransformGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsMeshTextureTransform = new MeshTextureTransform();

    if (hasValue(dotNetObject.offset)) {
        jsMeshTextureTransform.offset = dotNetObject.offset;
    }
    if (hasValue(dotNetObject.rotation)) {
        jsMeshTextureTransform.rotation = dotNetObject.rotation;
    }
    if (hasValue(dotNetObject.scale)) {
        jsMeshTextureTransform.scale = dotNetObject.scale;
    }
    let { default: MeshTextureTransformWrapper } = await import('./meshTextureTransform');
    let meshTextureTransformWrapper = new MeshTextureTransformWrapper(jsMeshTextureTransform);
    meshTextureTransformWrapper.geoBlazorId = dotNetObject.id;
    meshTextureTransformWrapper.viewId = viewId;
    meshTextureTransformWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(meshTextureTransformWrapper);
    jsObjectRefs[dotNetObject.id] = meshTextureTransformWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsMeshTextureTransform;
    
    let { buildDotNetMeshTextureTransform } = await import('./meshTextureTransform');
    let dnInstantiatedObject = await buildDotNetMeshTextureTransform(jsMeshTextureTransform, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for MeshTextureTransform', e);
    }
    
    return jsMeshTextureTransform;
}

export async function buildDotNetMeshTextureTransformGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMeshTextureTransform: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.offset)) {
            dotNetMeshTextureTransform.offset = jsObject.offset;
        }
        if (hasValue(jsObject.rotation)) {
            dotNetMeshTextureTransform.rotation = jsObject.rotation;
        }
        if (hasValue(jsObject.scale)) {
            dotNetMeshTextureTransform.scale = jsObject.scale;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetMeshTextureTransform.id = k;
                break;
            }
        }
    }

    return dotNetMeshTextureTransform;
}

