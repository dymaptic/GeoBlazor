// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';

export async function buildJsFeaturesViewModelScreenPointGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsFeaturesViewModelScreenPoint: any = {};

    if (hasValue(dotNetObject.x)) {
        jsFeaturesViewModelScreenPoint.x = dotNetObject.x;
    }
    if (hasValue(dotNetObject.y)) {
        jsFeaturesViewModelScreenPoint.y = dotNetObject.y;
    }
    
    jsObjectRefs[dotNetObject.id] = jsFeaturesViewModelScreenPoint;
    arcGisObjectRefs[dotNetObject.id] = jsFeaturesViewModelScreenPoint;
    
    return jsFeaturesViewModelScreenPoint;
}


export async function buildDotNetFeaturesViewModelScreenPointGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeaturesViewModelScreenPoint: any = {};
    
    if (hasValue(jsObject.x)) {
        dotNetFeaturesViewModelScreenPoint.x = jsObject.x;
    }
    
    if (hasValue(jsObject.y)) {
        dotNetFeaturesViewModelScreenPoint.y = jsObject.y;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetFeaturesViewModelScreenPoint.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetFeaturesViewModelScreenPoint.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetFeaturesViewModelScreenPoint.id)) {
        jsObjectRefs[dotNetFeaturesViewModelScreenPoint.id] ??= jsObject;
        arcGisObjectRefs[dotNetFeaturesViewModelScreenPoint.id] ??= jsObject;
    }

    return dotNetFeaturesViewModelScreenPoint;
}

