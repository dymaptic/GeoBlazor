// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetLayerListKnowledgeGraphOptions } from './layerListKnowledgeGraphOptions';

export async function buildJsLayerListKnowledgeGraphOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsLayerListKnowledgeGraphOptions: any = {};
    if (hasValue(dotNetObject.hasListItemCreatedFunction) && dotNetObject.hasListItemCreatedFunction) {
        jsLayerListKnowledgeGraphOptions.listItemCreatedFunction = async (event) => {

            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsListItemCreatedFunction', event);
        };
    }
    if (hasValue(dotNetObject.visibleElements)) {
        let { buildJsLayerListKnowledgeGraphOptionsVisibleElements } = await import('./layerListKnowledgeGraphOptionsVisibleElements');
        jsLayerListKnowledgeGraphOptions.visibleElements = await buildJsLayerListKnowledgeGraphOptionsVisibleElements(dotNetObject.visibleElements, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.filterPlaceholder)) {
        jsLayerListKnowledgeGraphOptions.filterPlaceholder = dotNetObject.filterPlaceholder;
    }
    if (hasValue(dotNetObject.minFilterItems)) {
        jsLayerListKnowledgeGraphOptions.minFilterItems = dotNetObject.minFilterItems;
    }
    if (hasValue(dotNetObject.selectionMode)) {
        jsLayerListKnowledgeGraphOptions.selectionMode = dotNetObject.selectionMode;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsLayerListKnowledgeGraphOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLayerListKnowledgeGraphOptions;
    
    return jsLayerListKnowledgeGraphOptions;
}


export async function buildDotNetLayerListKnowledgeGraphOptionsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsLayerListKnowledgeGraphOptions } = await import('./layerListKnowledgeGraphOptions');
        jsComponentRef = await buildJsLayerListKnowledgeGraphOptions(jsObject, layerId, viewId);
    }
    
    let dotNetLayerListKnowledgeGraphOptions: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.visibleElements)) {
        let { buildDotNetLayerListKnowledgeGraphOptionsVisibleElements } = await import('./layerListKnowledgeGraphOptionsVisibleElements');
        dotNetLayerListKnowledgeGraphOptions.visibleElements = await buildDotNetLayerListKnowledgeGraphOptionsVisibleElements(jsObject.visibleElements, layerId, viewId);
    }
    if (hasValue(jsObject.filterPlaceholder)) {
        dotNetLayerListKnowledgeGraphOptions.filterPlaceholder = jsObject.filterPlaceholder;
    }
    if (hasValue(jsObject.listItemCreatedFunction)) {
        dotNetLayerListKnowledgeGraphOptions.listItemCreatedFunction = jsObject.listItemCreatedFunction;
    }
    if (hasValue(jsObject.minFilterItems)) {
        dotNetLayerListKnowledgeGraphOptions.minFilterItems = jsObject.minFilterItems;
    }
    if (hasValue(jsObject.selectionMode)) {
        dotNetLayerListKnowledgeGraphOptions.selectionMode = jsObject.selectionMode;
    }

    return dotNetLayerListKnowledgeGraphOptions;
}

