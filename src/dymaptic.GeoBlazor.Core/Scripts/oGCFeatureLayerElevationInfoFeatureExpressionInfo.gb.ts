// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetOGCFeatureLayerElevationInfoFeatureExpressionInfo } from './oGCFeatureLayerElevationInfoFeatureExpressionInfo';

export async function buildJsOGCFeatureLayerElevationInfoFeatureExpressionInfoGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsOGCFeatureLayerElevationInfoFeatureExpressionInfo: any = {};

    if (hasValue(dotNetObject.expression)) {
        jsOGCFeatureLayerElevationInfoFeatureExpressionInfo.expression = dotNetObject.expression;
    }
    if (hasValue(dotNetObject.title)) {
        jsOGCFeatureLayerElevationInfoFeatureExpressionInfo.title = dotNetObject.title;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsOGCFeatureLayerElevationInfoFeatureExpressionInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsOGCFeatureLayerElevationInfoFeatureExpressionInfo;
    
    return jsOGCFeatureLayerElevationInfoFeatureExpressionInfo;
}


export async function buildDotNetOGCFeatureLayerElevationInfoFeatureExpressionInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetOGCFeatureLayerElevationInfoFeatureExpressionInfo: any = {};
    
    if (hasValue(jsObject.expression)) {
        dotNetOGCFeatureLayerElevationInfoFeatureExpressionInfo.expression = jsObject.expression;
    }
    
    if (hasValue(jsObject.title)) {
        dotNetOGCFeatureLayerElevationInfoFeatureExpressionInfo.title = jsObject.title;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetOGCFeatureLayerElevationInfoFeatureExpressionInfo.id = geoBlazorId;
    }

    return dotNetOGCFeatureLayerElevationInfoFeatureExpressionInfo;
}

