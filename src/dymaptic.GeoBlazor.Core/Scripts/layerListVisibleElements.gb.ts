// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import LayerListVisibleElements = __esri.LayerListVisibleElements;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class LayerListVisibleElementsGenerated implements IPropertyWrapper {
    public component: LayerListVisibleElements;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: LayerListVisibleElements) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsLayerListVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsLayerListVisibleElements: any = {}

    if (hasValue(dotNetObject.catalogLayerList)) {
        jsLayerListVisibleElements.catalogLayerList = dotNetObject.catalogLayerList;
    }
    if (hasValue(dotNetObject.closeButton)) {
        jsLayerListVisibleElements.closeButton = dotNetObject.closeButton;
    }
    if (hasValue(dotNetObject.collapseButton)) {
        jsLayerListVisibleElements.collapseButton = dotNetObject.collapseButton;
    }
    if (hasValue(dotNetObject.errors)) {
        jsLayerListVisibleElements.errors = dotNetObject.errors;
    }
    if (hasValue(dotNetObject.filter)) {
        jsLayerListVisibleElements.filter = dotNetObject.filter;
    }
    if (hasValue(dotNetObject.flow)) {
        jsLayerListVisibleElements.flow = dotNetObject.flow;
    }
    if (hasValue(dotNetObject.heading)) {
        jsLayerListVisibleElements.heading = dotNetObject.heading;
    }
    if (hasValue(dotNetObject.statusIndicators)) {
        jsLayerListVisibleElements.statusIndicators = dotNetObject.statusIndicators;
    }
    if (hasValue(dotNetObject.temporaryLayerIndicators)) {
        jsLayerListVisibleElements.temporaryLayerIndicators = dotNetObject.temporaryLayerIndicators;
    }
    let { default: LayerListVisibleElementsWrapper } = await import('./layerListVisibleElements');
    let layerListVisibleElementsWrapper = new LayerListVisibleElementsWrapper(jsLayerListVisibleElements);
    layerListVisibleElementsWrapper.geoBlazorId = dotNetObject.id;
    layerListVisibleElementsWrapper.viewId = viewId;
    layerListVisibleElementsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(layerListVisibleElementsWrapper);
    jsObjectRefs[dotNetObject.id] = layerListVisibleElementsWrapper;

    arcGisObjectRefs[dotNetObject.id] = jsLayerListVisibleElements;
    let { buildDotNetLayerListVisibleElements } = await import('./layerListVisibleElements');
    let dnInstantiatedObject = await buildDotNetLayerListVisibleElements(jsLayerListVisibleElements, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LayerListVisibleElements', e);
    }
    
    return jsLayerListVisibleElements;
}

export async function buildDotNetLayerListVisibleElementsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLayerListVisibleElements: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.catalogLayerList)) {
            dotNetLayerListVisibleElements.catalogLayerList = jsObject.catalogLayerList;
        }
        if (hasValue(jsObject.closeButton)) {
            dotNetLayerListVisibleElements.closeButton = jsObject.closeButton;
        }
        if (hasValue(jsObject.collapseButton)) {
            dotNetLayerListVisibleElements.collapseButton = jsObject.collapseButton;
        }
        if (hasValue(jsObject.errors)) {
            dotNetLayerListVisibleElements.errors = jsObject.errors;
        }
        if (hasValue(jsObject.filter)) {
            dotNetLayerListVisibleElements.filter = jsObject.filter;
        }
        if (hasValue(jsObject.flow)) {
            dotNetLayerListVisibleElements.flow = jsObject.flow;
        }
        if (hasValue(jsObject.heading)) {
            dotNetLayerListVisibleElements.heading = jsObject.heading;
        }
        if (hasValue(jsObject.statusIndicators)) {
            dotNetLayerListVisibleElements.statusIndicators = jsObject.statusIndicators;
        }
        if (hasValue(jsObject.temporaryLayerIndicators)) {
            dotNetLayerListVisibleElements.temporaryLayerIndicators = jsObject.temporaryLayerIndicators;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLayerListVisibleElements.id = k;
                break;
            }
        }
    }

    return dotNetLayerListVisibleElements;
}

