// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetLayerListVisibleElements } from './layerListVisibleElements';

export async function buildJsLayerListVisibleElementsGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsLayerListVisibleElements: any = {};

    if (hasValue(dotNetObject.catalogLayerList)) {
        jsLayerListVisibleElements.catalogLayerList = dotNetObject.catalogLayerList;
    }
    if (hasValue(dotNetObject.closeButton)) {
        jsLayerListVisibleElements.closeButton = dotNetObject.closeButton;
    }
    if (hasValue(dotNetObject.collapseButton)) {
        jsLayerListVisibleElements.collapseButton = dotNetObject.collapseButton;
    }
    if (hasValue(dotNetObject.errors)) {
        jsLayerListVisibleElements.errors = dotNetObject.errors;
    }
    if (hasValue(dotNetObject.filter)) {
        jsLayerListVisibleElements.filter = dotNetObject.filter;
    }
    if (hasValue(dotNetObject.flow)) {
        jsLayerListVisibleElements.flow = dotNetObject.flow;
    }
    if (hasValue(dotNetObject.heading)) {
        jsLayerListVisibleElements.heading = dotNetObject.heading;
    }
    if (hasValue(dotNetObject.statusIndicators)) {
        jsLayerListVisibleElements.statusIndicators = dotNetObject.statusIndicators;
    }
    if (hasValue(dotNetObject.temporaryLayerIndicators)) {
        jsLayerListVisibleElements.temporaryLayerIndicators = dotNetObject.temporaryLayerIndicators;
    }
    
    jsObjectRefs[dotNetObject.id] = jsLayerListVisibleElements;
    arcGisObjectRefs[dotNetObject.id] = jsLayerListVisibleElements;
    
    return jsLayerListVisibleElements;
}


export async function buildDotNetLayerListVisibleElementsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLayerListVisibleElements: any = {};
    
    if (hasValue(jsObject.catalogLayerList)) {
        dotNetLayerListVisibleElements.catalogLayerList = jsObject.catalogLayerList;
    }
    
    if (hasValue(jsObject.closeButton)) {
        dotNetLayerListVisibleElements.closeButton = jsObject.closeButton;
    }
    
    if (hasValue(jsObject.collapseButton)) {
        dotNetLayerListVisibleElements.collapseButton = jsObject.collapseButton;
    }
    
    if (hasValue(jsObject.errors)) {
        dotNetLayerListVisibleElements.errors = jsObject.errors;
    }
    
    if (hasValue(jsObject.filter)) {
        dotNetLayerListVisibleElements.filter = jsObject.filter;
    }
    
    if (hasValue(jsObject.flow)) {
        dotNetLayerListVisibleElements.flow = jsObject.flow;
    }
    
    if (hasValue(jsObject.heading)) {
        dotNetLayerListVisibleElements.heading = jsObject.heading;
    }
    
    if (hasValue(jsObject.statusIndicators)) {
        dotNetLayerListVisibleElements.statusIndicators = jsObject.statusIndicators;
    }
    
    if (hasValue(jsObject.temporaryLayerIndicators)) {
        dotNetLayerListVisibleElements.temporaryLayerIndicators = jsObject.temporaryLayerIndicators;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetLayerListVisibleElements.id = geoBlazorId;
    }

    return dotNetLayerListVisibleElements;
}

