import {buildDotNetIChartMediaInfo} from './iChartMediaInfo';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import ChartMediaInfo from '@arcgis/core/popup/content/mixins/ChartMediaInfo';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsIChartMediaInfoGenerated(dotNetObject: any): Promise<any> {
    let jsChartMediaInfo = new ChartMediaInfo();
    if (hasValue(dotNetObject.value)) {
        let {buildJsChartMediaInfoValue} = await import('./chartMediaInfoValue');
        jsChartMediaInfo.value = buildJsChartMediaInfoValue(dotNetObject.value) as any;
    }


    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsChartMediaInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsChartMediaInfo;

    let dnInstantiatedObject = await buildDotNetIChartMediaInfo(jsChartMediaInfo);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for IChartMediaInfo', e);
    }

    return jsChartMediaInfo;
}

export async function buildDotNetIChartMediaInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetIChartMediaInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.value)) {
        let {buildDotNetChartMediaInfoValue} = await import('./chartMediaInfoValue');
        dotNetIChartMediaInfo.value = buildDotNetChartMediaInfoValue(jsObject.value);
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetIChartMediaInfo.id = k;
                break;
            }
        }
    }

    return dotNetIChartMediaInfo;
}

