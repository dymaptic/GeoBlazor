// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import shadedRelief = __esri.shadedRelief;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ShadedReliefRendererGeneratorGenerated implements IPropertyWrapper {
    public component: shadedRelief;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: shadedRelief) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async createRenderer(parameters: any): Promise<any> {
                let { buildJsShadedReliefCreateRendererParams } = await import('./shadedReliefCreateRendererParams');
let jsparameters = await buildJsShadedReliefCreateRendererParams(parameters, this.layerId, this.viewId) as any;
        return await this.component.createRenderer(jsparameters);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsShadedReliefRendererGeneratorGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsshadedRelief: any = {};


    let { default: ShadedReliefRendererGeneratorWrapper } = await import('./shadedReliefRendererGenerator');
    let shadedReliefRendererGeneratorWrapper = new ShadedReliefRendererGeneratorWrapper(jsshadedRelief);
    shadedReliefRendererGeneratorWrapper.geoBlazorId = dotNetObject.id;
    shadedReliefRendererGeneratorWrapper.viewId = viewId;
    shadedReliefRendererGeneratorWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(shadedReliefRendererGeneratorWrapper);
    jsObjectRefs[dotNetObject.id] = shadedReliefRendererGeneratorWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsshadedRelief;
    let { buildDotNetShadedReliefRendererGenerator } = await import('./shadedReliefRendererGenerator');
    let dnInstantiatedObject = await buildDotNetShadedReliefRendererGenerator(jsshadedRelief);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ShadedReliefRendererGenerator', e);
    }
    
    return shadedReliefRendererGeneratorWrapper;
}

export async function buildDotNetShadedReliefRendererGeneratorGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetShadedReliefRendererGenerator: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetShadedReliefRendererGenerator.id = k;
                break;
            }
        }
    }

    return dotNetShadedReliefRendererGenerator;
}

