// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ListItem from '@arcgis/core/widgets/LayerList/ListItem';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetListItem } from './listItem';

export async function buildJsListItemGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsListItem = new ListItem();
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsListItem.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.actionsOpen)) {
        jsListItem.actionsOpen = dotNetObject.actionsOpen;
    }
    if (hasValue(dotNetObject.actionsSections)) {
        jsListItem.actionsSections = dotNetObject.actionsSections;
    }
    if (hasValue(dotNetObject.childrenSortable)) {
        jsListItem.childrenSortable = dotNetObject.childrenSortable;
    }
    if (hasValue(dotNetObject.hidden)) {
        jsListItem.hidden = dotNetObject.hidden;
    }
    if (hasValue(dotNetObject.listModeDisabled)) {
        jsListItem.listModeDisabled = dotNetObject.listModeDisabled;
    }
    if (hasValue(dotNetObject.open)) {
        jsListItem.open = dotNetObject.open;
    }
    if (hasValue(dotNetObject.sortable)) {
        jsListItem.sortable = dotNetObject.sortable;
    }
    if (hasValue(dotNetObject.title)) {
        jsListItem.title = dotNetObject.title;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsListItem);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsListItem;
    
    let dnInstantiatedObject = await buildDotNetListItem(jsListItem);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ListItem', e);
    }
    
    return jsListItem;
}

export async function buildDotNetListItemGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetListItem: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.layerView)) {
            let { buildDotNetLayerView } = await import('./layerView');
            dotNetListItem.layerView = await buildDotNetLayerView(jsObject.layerView);
        }
    if (hasValue(jsObject.actionsOpen)) {
        dotNetListItem.actionsOpen = jsObject.actionsOpen;
    }
    if (hasValue(jsObject.actionsSections)) {
        dotNetListItem.actionsSections = jsObject.actionsSections;
    }
    if (hasValue(jsObject.childrenSortable)) {
        dotNetListItem.childrenSortable = jsObject.childrenSortable;
    }
    if (hasValue(jsObject.connectionStatus)) {
        dotNetListItem.connectionStatus = jsObject.connectionStatus;
    }
    if (hasValue(jsObject.error)) {
        dotNetListItem.error = jsObject.error;
    }
    if (hasValue(jsObject.hidden)) {
        dotNetListItem.hidden = jsObject.hidden;
    }
    if (hasValue(jsObject.listModeDisabled)) {
        dotNetListItem.listModeDisabled = jsObject.listModeDisabled;
    }
    if (hasValue(jsObject.open)) {
        dotNetListItem.open = jsObject.open;
    }
    if (hasValue(jsObject.publishing)) {
        dotNetListItem.publishing = jsObject.publishing;
    }
    if (hasValue(jsObject.sortable)) {
        dotNetListItem.sortable = jsObject.sortable;
    }
    if (hasValue(jsObject.title)) {
        dotNetListItem.title = jsObject.title;
    }
    if (hasValue(jsObject.updating)) {
        dotNetListItem.updating = jsObject.updating;
    }
    if (hasValue(jsObject.visibilityMode)) {
        dotNetListItem.visibilityMode = jsObject.visibilityMode;
    }
    if (hasValue(jsObject.visibleAtCurrentScale)) {
        dotNetListItem.visibleAtCurrentScale = jsObject.visibleAtCurrentScale;
    }
    if (hasValue(jsObject.visibleAtCurrentTimeExtent)) {
        dotNetListItem.visibleAtCurrentTimeExtent = jsObject.visibleAtCurrentTimeExtent;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetListItem.id = k;
                break;
            }
        }
    }

    return dotNetListItem;
}

