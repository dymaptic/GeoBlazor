// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import ListItem from '@arcgis/core/widgets/LayerList/ListItem';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ListItemGenerated implements IPropertyWrapper {
    public component: ListItem;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ListItem) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getChildren(): Promise<any> {
        if (!hasValue(this.component.children)) {
            return null;
        }
        
        let { buildDotNetListItem } = await import('./listItem');
        return await Promise.all(this.component.children.map(async i => await buildDotNetListItem(i)));
    }
    
    async setChildren(value: any): Promise<void> {
        let { buildJsListItem } = await import('./listItem');
        this.component.children = await Promise.all(value.map(async i => await buildJsListItem(i, this.layerId, this.viewId))) as any;
    }
    
    async getLayer(): Promise<any> {
        if (!hasValue(this.component.layer)) {
            return null;
        }
        
        let { buildDotNetLayer } = await import('./layer');
        return await buildDotNetLayer(this.component.layer);
    }
    async setLayer(value: any): Promise<void> {
        let { buildJsLayer } = await import('./layer');
        this.component.layer = await  buildJsLayer(value, this.layerId, this.viewId);
    }
    async getLayerView(): Promise<any> {
        if (!hasValue(this.component.layerView)) {
            return null;
        }
        
        let { buildDotNetLayerView } = await import('./layerView');
        return await buildDotNetLayerView(this.component.layerView);
    }
    async getPanel(): Promise<any> {
        if (!hasValue(this.component.panel)) {
            return null;
        }
        
        let { buildDotNetListItemPanelWidget } = await import('./listItemPanelWidget');
        return await buildDotNetListItemPanelWidget(this.component.panel, this.layerId, this.viewId);
    }
    async setPanel(value: any): Promise<void> {
        let { buildJsListItemPanelWidget } = await import('./listItemPanelWidget');
        this.component.panel = await  buildJsListItemPanelWidget(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsListItemGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsListItem = new ListItem();
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsListItem.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.actionsOpen)) {
        jsListItem.actionsOpen = dotNetObject.actionsOpen;
    }
    if (hasValue(dotNetObject.actionsSections)) {
        jsListItem.actionsSections = dotNetObject.actionsSections;
    }
    if (hasValue(dotNetObject.childrenSortable)) {
        jsListItem.childrenSortable = dotNetObject.childrenSortable;
    }
    if (hasValue(dotNetObject.hidden)) {
        jsListItem.hidden = dotNetObject.hidden;
    }
    if (hasValue(dotNetObject.listModeDisabled)) {
        jsListItem.listModeDisabled = dotNetObject.listModeDisabled;
    }
    if (hasValue(dotNetObject.open)) {
        jsListItem.open = dotNetObject.open;
    }
    if (hasValue(dotNetObject.sortable)) {
        jsListItem.sortable = dotNetObject.sortable;
    }
    if (hasValue(dotNetObject.title)) {
        jsListItem.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.view)) {
        jsListItem.view = dotNetObject.view;
    }
    let { default: ListItemWrapper } = await import('./listItem');
    let listItemWrapper = new ListItemWrapper(jsListItem);
    listItemWrapper.geoBlazorId = dotNetObject.id;
    listItemWrapper.viewId = viewId;
    listItemWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(listItemWrapper);
    jsObjectRefs[dotNetObject.id] = listItemWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsListItem;
    
    let { buildDotNetListItem } = await import('./listItem');
    let dnInstantiatedObject = await buildDotNetListItem(jsListItem, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ListItem', e);
    }
    
    return jsListItem;
}

export async function buildDotNetListItemGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetListItem: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.layer)) {
            let { buildDotNetLayer } = await import('./layer');
            dotNetListItem.layer = await buildDotNetLayer(jsObject.layer);
        }
        if (hasValue(jsObject.layerView)) {
            let { buildDotNetLayerView } = await import('./layerView');
            dotNetListItem.layerView = await buildDotNetLayerView(jsObject.layerView);
        }
        if (hasValue(jsObject.actionsOpen)) {
            dotNetListItem.actionsOpen = jsObject.actionsOpen;
        }
        if (hasValue(jsObject.actionsSections)) {
            dotNetListItem.actionsSections = jsObject.actionsSections;
        }
        if (hasValue(jsObject.childrenSortable)) {
            dotNetListItem.childrenSortable = jsObject.childrenSortable;
        }
        if (hasValue(jsObject.connectionStatus)) {
            dotNetListItem.connectionStatus = jsObject.connectionStatus;
        }
        if (hasValue(jsObject.error)) {
            dotNetListItem.error = jsObject.error;
        }
        if (hasValue(jsObject.hidden)) {
            dotNetListItem.hidden = jsObject.hidden;
        }
        if (hasValue(jsObject.listModeDisabled)) {
            dotNetListItem.listModeDisabled = jsObject.listModeDisabled;
        }
        if (hasValue(jsObject.open)) {
            dotNetListItem.open = jsObject.open;
        }
        if (hasValue(jsObject.publishing)) {
            dotNetListItem.publishing = jsObject.publishing;
        }
        if (hasValue(jsObject.sortable)) {
            dotNetListItem.sortable = jsObject.sortable;
        }
        if (hasValue(jsObject.title)) {
            dotNetListItem.title = jsObject.title;
        }
        if (hasValue(jsObject.updating)) {
            dotNetListItem.updating = jsObject.updating;
        }
        if (hasValue(jsObject.view)) {
            dotNetListItem.view = jsObject.view;
        }
        if (hasValue(jsObject.visibilityMode)) {
            dotNetListItem.visibilityMode = jsObject.visibilityMode;
        }
        if (hasValue(jsObject.visibleAtCurrentScale)) {
            dotNetListItem.visibleAtCurrentScale = jsObject.visibleAtCurrentScale;
        }
        if (hasValue(jsObject.visibleAtCurrentTimeExtent)) {
            dotNetListItem.visibleAtCurrentTimeExtent = jsObject.visibleAtCurrentTimeExtent;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetListItem.id = k;
                break;
            }
        }
    }

    return dotNetListItem;
}

