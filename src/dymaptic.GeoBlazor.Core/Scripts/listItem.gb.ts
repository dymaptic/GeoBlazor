// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ListItem from '@arcgis/core/widgets/LayerList/ListItem';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, generateSerializableJson } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ListItemGenerated implements IPropertyWrapper {
    public component: ListItem;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ListItem) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.actionsSections) && dotNetObject.actionsSections.length > 0) {
            this.component.actionsSections = dotNetObject.actionBase;
        }
        if (hasValue(dotNetObject.layer)) {
            this.component.layer = dotNetObject.layer;
        }

        if (hasValue(dotNetObject.actionsOpen)) {
            this.component.actionsOpen = dotNetObject.actionsOpen;
        }
        if (hasValue(dotNetObject.childrenSortable)) {
            this.component.childrenSortable = dotNetObject.childrenSortable;
        }
        if (hasValue(dotNetObject.hidden)) {
            this.component.hidden = dotNetObject.hidden;
        }
        if (hasValue(dotNetObject.listModeDisabled)) {
            this.component.listModeDisabled = dotNetObject.listModeDisabled;
        }
        if (hasValue(dotNetObject.open)) {
            this.component.open = dotNetObject.open;
        }
        if (hasValue(dotNetObject.sortable)) {
            this.component.sortable = dotNetObject.sortable;
        }
        if (hasValue(dotNetObject.title)) {
            this.component.title = dotNetObject.title;
        }
        if (hasValue(dotNetObject.visible)) {
            this.component.visible = dotNetObject.visible;
        }
    }
    
    // region properties
    
    async getChildren(): Promise<any> {
        if (!hasValue(this.component.children)) {
            return null;
        }
        
        let { buildDotNetListItem } = await import('./listItem');
        return await Promise.all(this.component.children!.map(async i => await buildDotNetListItem(i, this.viewId)));
    }
    
    async setChildren(value: any): Promise<void> {
        if (!hasValue(value)) {
            this.component.children.removeAll();
        }
        let { buildJsListItem } = await import('./listItem');
        this.component.children = await Promise.all(value.map(async i => await buildJsListItem(i, this.layerId, this.viewId))) as any;
    }
    
    async getLayerView(): Promise<any> {
        if (!hasValue(this.component.layerView)) {
            return null;
        }
        
        let { buildDotNetLayerView } = await import('./layerView');
        return await buildDotNetLayerView(this.component.layerView, this.viewId);
    }
    
    async getPanel(): Promise<any> {
        if (!hasValue(this.component.panel)) {
            return null;
        }
        
        let { buildDotNetListItemPanelWidget } = await import('./listItemPanelWidget');
        return await buildDotNetListItemPanelWidget(this.component.panel, this.viewId);
    }
    
    getTitle(): any {
        if (!hasValue(this.component.title)) {
            return null;
        }
        
        return generateSerializableJson(this.component.title);
    }
    
    setTitle(value: any): void {
        this.component.title = JSON.parse(value);
    }
    
    getVisibilityMode(): any {
        if (!hasValue(this.component.visibilityMode)) {
            return null;
        }
        
        return generateSerializableJson(this.component.visibilityMode);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsListItemGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.actionsSections) && dotNetObject.actionsSections.length > 0) {
        properties.actionsSections = dotNetObject.actionsSections;
    }
    if (hasValue(dotNetObject.layerId) && arcGisObjectRefs.hasOwnProperty(dotNetObject.layerId)) {
        properties.layer = arcGisObjectRefs[dotNetObject.layerId!];
    } else if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        properties.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId);
    }

    if (hasValue(dotNetObject.actionsOpen)) {
        properties.actionsOpen = dotNetObject.actionsOpen;
    }
    if (hasValue(dotNetObject.childrenSortable)) {
        properties.childrenSortable = dotNetObject.childrenSortable;
    }
    if (hasValue(dotNetObject.hidden)) {
        properties.hidden = dotNetObject.hidden;
    }
    if (hasValue(dotNetObject.listModeDisabled)) {
        properties.listModeDisabled = dotNetObject.listModeDisabled;
    }
    if (hasValue(dotNetObject.open)) {
        properties.open = dotNetObject.open;
    }
    if (hasValue(dotNetObject.sortable)) {
        properties.sortable = dotNetObject.sortable;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    let jsListItem = new ListItem(properties);

    let { default: ListItemWrapper } = await import('./listItem');
    let listItemWrapper = new ListItemWrapper(jsListItem);
    listItemWrapper.geoBlazorId = dotNetObject.id;
    listItemWrapper.viewId = viewId;
    listItemWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = listItemWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsListItem;
    
    return jsListItem;
}


export async function buildDotNetListItemGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetListItem: any = {};
    
    if (hasValue(jsObject.layerView)) {
        let { buildDotNetLayerView } = await import('./layerView');
        dotNetListItem.layerView = await buildDotNetLayerView(jsObject.layerView, viewId);
    }
    
    if (hasValue(jsObject.actionsOpen)) {
        dotNetListItem.actionsOpen = jsObject.actionsOpen;
    }
    
    if (hasValue(jsObject.actionsSections)) {
        dotNetListItem.actionsSections = removeCircularReferences(jsObject.actionsSections);
    }
    
    if (hasValue(jsObject.childrenSortable)) {
        dotNetListItem.childrenSortable = jsObject.childrenSortable;
    }
    
    if (hasValue(jsObject.connectionStatus)) {
        dotNetListItem.connectionStatus = removeCircularReferences(jsObject.connectionStatus);
    }
    
    if (hasValue(jsObject.error)) {
        dotNetListItem.error = removeCircularReferences(jsObject.error);
    }
    
    if (hasValue(jsObject.hidden)) {
        dotNetListItem.hidden = jsObject.hidden;
    }
    
    if (hasValue(jsObject.incompatible)) {
        dotNetListItem.incompatible = jsObject.incompatible;
    }
    
    if (hasValue(jsObject.layer)) {
        dotNetListItem.layer = removeCircularReferences(jsObject.layer);
    }
    
    if (hasValue(jsObject.listModeDisabled)) {
        dotNetListItem.listModeDisabled = jsObject.listModeDisabled;
    }
    
    if (hasValue(jsObject.open)) {
        dotNetListItem.open = jsObject.open;
    }
    
    if (hasValue(jsObject.publishing)) {
        dotNetListItem.publishing = jsObject.publishing;
    }
    
    if (hasValue(jsObject.sortable)) {
        dotNetListItem.sortable = jsObject.sortable;
    }
    
    if (hasValue(jsObject.title)) {
        dotNetListItem.title = jsObject.title;
    }
    
    if (hasValue(jsObject.updating)) {
        dotNetListItem.updating = jsObject.updating;
    }
    
    if (hasValue(jsObject.visibilityMode)) {
        dotNetListItem.visibilityMode = jsObject.visibilityMode;
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetListItem.visible = jsObject.visible;
    }
    
    if (hasValue(jsObject.visibleAtCurrentScale)) {
        dotNetListItem.visibleAtCurrentScale = jsObject.visibleAtCurrentScale;
    }
    
    if (hasValue(jsObject.visibleAtCurrentTimeExtent)) {
        dotNetListItem.visibleAtCurrentTimeExtent = jsObject.visibleAtCurrentTimeExtent;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetListItem.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetListItem.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetListItem.id)) {
        jsObjectRefs[dotNetListItem.id] ??= jsObject;
        arcGisObjectRefs[dotNetListItem.id] ??= jsObject;
    }

    return dotNetListItem;
}

