// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';

export async function buildJsDynamicDataLayerGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsDynamicDataLayer: any = {};
    if (hasValue(dotNetObject.dataSource)) {
        let { buildJsDynamicDataSource } = await import('./dynamicDataSource');
        jsDynamicDataLayer.dataSource = await buildJsDynamicDataSource(dotNetObject.dataSource) as any;
    }

    if (hasValue(dotNetObject.fields) && dotNetObject.fields.length > 0) {
        jsDynamicDataLayer.fields = dotNetObject.fields;
    }
    
    jsObjectRefs[dotNetObject.id] = jsDynamicDataLayer;
    arcGisObjectRefs[dotNetObject.id] = jsDynamicDataLayer;
    
    return jsDynamicDataLayer;
}


export async function buildDotNetDynamicDataLayerGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDynamicDataLayer: any = {};
    
    if (hasValue(jsObject.dataSource)) {
        let { buildDotNetDynamicDataSource } = await import('./dynamicDataSource');
        dotNetDynamicDataLayer.dataSource = await buildDotNetDynamicDataSource(jsObject.dataSource, viewId);
    }
    
    if (hasValue(jsObject.fields)) {
        dotNetDynamicDataLayer.fields = removeCircularReferences(jsObject.fields);
    }
    
    if (hasValue(jsObject.type)) {
        dotNetDynamicDataLayer.type = jsObject.type;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetDynamicDataLayer.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        if (hasValue(dotNetRef)) {
            try {
                dotNetDynamicDataLayer.id = await dotNetRef.invokeMethodAsync('GetId');
            } catch (e) {
                console.error('Error invoking GetId for DynamicDataLayer', e);
            }
        }
    }
    if (hasValue(dotNetDynamicDataLayer.id)) {
        jsObjectRefs[dotNetDynamicDataLayer.id] ??= jsObject;
        arcGisObjectRefs[dotNetDynamicDataLayer.id] ??= jsObject;
    }

    return dotNetDynamicDataLayer;
}

