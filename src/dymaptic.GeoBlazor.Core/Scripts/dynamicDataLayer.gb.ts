// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetDynamicDataLayer } from './dynamicDataLayer';

export async function buildJsDynamicDataLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsDynamicDataLayer: any = {};
    if (hasValue(dotNetObject.dataSource)) {
        let { buildJsDynamicDataSource } = await import('./dynamicDataSource');
        jsDynamicDataLayer.dataSource = await buildJsDynamicDataSource(dotNetObject.dataSource, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.fields) && dotNetObject.fields.length > 0) {
        jsDynamicDataLayer.fields = dotNetObject.fields;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsDynamicDataLayer);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsDynamicDataLayer;
    
    try {
        let { buildDotNetDynamicDataLayer } = await import('./dynamicDataLayer');
        let dnInstantiatedObject = await buildDotNetDynamicDataLayer(jsDynamicDataLayer);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type DynamicDataLayer detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DynamicDataLayer', e);
    }
    
    return jsDynamicDataLayer;
}


export async function buildDotNetDynamicDataLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDynamicDataLayer: any = {};
    
    if (hasValue(jsObject.dataSource)) {
        let { buildDotNetDynamicDataSource } = await import('./dynamicDataSource');
        dotNetDynamicDataLayer.dataSource = await buildDotNetDynamicDataSource(jsObject.dataSource);
    }
    
    if (hasValue(jsObject.fields)) {
        dotNetDynamicDataLayer.fields = removeCircularReferences(jsObject.fields);
    }
    
    if (hasValue(jsObject.type)) {
        dotNetDynamicDataLayer.type = jsObject.type;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetDynamicDataLayer.id = geoBlazorId;
    }

    return dotNetDynamicDataLayer;
}

