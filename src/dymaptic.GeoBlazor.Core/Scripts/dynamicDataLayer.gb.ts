// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import DynamicDataLayer = __esri.DynamicDataLayer;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class DynamicDataLayerGenerated implements IPropertyWrapper {
    public component: DynamicDataLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: DynamicDataLayer) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getFields(): Promise<any> {
        if (!hasValue(this.component.fields)) {
            return null;
        }
        
        let { buildDotNetDynamicDataLayerFields } = await import('./dynamicDataLayerFields');
        return await Promise.all(this.component.fields.map(async i => await buildDotNetDynamicDataLayerFields(i)));
    }
    
    async setFields(value: any): Promise<void> {
        let { buildJsDynamicDataLayerFields } = await import('./dynamicDataLayerFields');
        this.component.fields = await Promise.all(value.map(async i => await buildJsDynamicDataLayerFields(i, this.layerId, this.viewId))) as any;
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsDynamicDataLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsDynamicDataLayer: any = {}
    if (hasValue(dotNetObject.fields)) {
        let { buildJsDynamicDataLayerFields } = await import('./dynamicDataLayerFields');
        jsDynamicDataLayer.fields = await Promise.all(dotNetObject.fields.map(async i => await buildJsDynamicDataLayerFields(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.dataSource)) {
        jsDynamicDataLayer.dataSource = dotNetObject.dataSource;
    }
    let { default: DynamicDataLayerWrapper } = await import('./dynamicDataLayer');
    let dynamicDataLayerWrapper = new DynamicDataLayerWrapper(jsDynamicDataLayer);
    dynamicDataLayerWrapper.geoBlazorId = dotNetObject.id;
    dynamicDataLayerWrapper.viewId = viewId;
    dynamicDataLayerWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(dynamicDataLayerWrapper);
    jsObjectRefs[dotNetObject.id] = dynamicDataLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsDynamicDataLayer;
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DynamicDataLayer', e);
    }
    
    return jsDynamicDataLayer;
}

export async function buildDotNetDynamicDataLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDynamicDataLayer: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.fields)) {
            let { buildDotNetDynamicDataLayerFields } = await import('./dynamicDataLayerFields');
            dotNetDynamicDataLayer.fields = await Promise.all(jsObject.fields.map(async i => await buildDotNetDynamicDataLayerFields(i)));
        }
        if (hasValue(jsObject.dataSource)) {
            dotNetDynamicDataLayer.dataSource = jsObject.dataSource;
        }
        if (hasValue(jsObject.type)) {
            dotNetDynamicDataLayer.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetDynamicDataLayer.id = k;
                break;
            }
        }
    }

    return dotNetDynamicDataLayer;
}

