// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetDynamicDataLayer } from './dynamicDataLayer';

export async function buildJsDynamicDataLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsDynamicDataLayer: any = {};

    if (hasValue(dotNetObject.dataSource)) {
        jsDynamicDataLayer.dataSource = dotNetObject.dataSource;
    }
    if (hasValue(dotNetObject.fields)) {
        jsDynamicDataLayer.fields = dotNetObject.fields;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsDynamicDataLayer);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsDynamicDataLayer;
    
    let dnInstantiatedObject = await buildDotNetDynamicDataLayer(jsDynamicDataLayer);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DynamicDataLayer', e);
    }
    
    return jsDynamicDataLayer;
}

export async function buildDotNetDynamicDataLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDynamicDataLayer: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.dataSource)) {
        dotNetDynamicDataLayer.dataSource = jsObject.dataSource;
    }
    if (hasValue(jsObject.fields)) {
        dotNetDynamicDataLayer.fields = jsObject.fields;
    }
    if (hasValue(jsObject.type)) {
        dotNetDynamicDataLayer.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetDynamicDataLayer.id = k;
                break;
            }
        }
    }

    return dotNetDynamicDataLayer;
}

