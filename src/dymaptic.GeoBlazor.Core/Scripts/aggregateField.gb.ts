// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetAggregateField } from './aggregateField';
import AggregateField from '@arcgis/core/layers/support/AggregateField';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsAggregateFieldGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsAggregateField = new AggregateField();

    if (hasValue(dotNetObject.alias)) {
        jsAggregateField.alias = dotNetObject.alias;
    }
    if (hasValue(dotNetObject.isAutoGenerated)) {
        jsAggregateField.isAutoGenerated = dotNetObject.isAutoGenerated;
    }
    if (hasValue(dotNetObject.name)) {
        jsAggregateField.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.onStatisticExpression)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedOnStatisticExpression } = dotNetObject.onStatisticExpression;
        jsAggregateField.onStatisticExpression = sanitizedOnStatisticExpression;
    }
    if (hasValue(dotNetObject.onStatisticField)) {
        jsAggregateField.onStatisticField = dotNetObject.onStatisticField;
    }
    if (hasValue(dotNetObject.statisticType)) {
        jsAggregateField.statisticType = dotNetObject.statisticType;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsAggregateField);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsAggregateField;
    
    let dnInstantiatedObject = await buildDotNetAggregateField(jsAggregateField);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for AggregateField', e);
    }
    
    return jsAggregateField;
}
