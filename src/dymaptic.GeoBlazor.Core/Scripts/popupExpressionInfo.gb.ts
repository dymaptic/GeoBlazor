// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import popupExpressionInfo from '@arcgis/core/popup/ExpressionInfo';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetPopupExpressionInfo } from './popupExpressionInfo';

export async function buildJsPopupExpressionInfoGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.expression)) {
        properties.expression = dotNetObject.expression;
    }
    if (hasValue(dotNetObject.name)) {
        properties.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.returnType)) {
        properties.returnType = dotNetObject.returnType;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    let jspopupExpressionInfo = new popupExpressionInfo(properties);
    
    jsObjectRefs[dotNetObject.id] = jspopupExpressionInfo;
    arcGisObjectRefs[dotNetObject.id] = jspopupExpressionInfo;
    
    return jspopupExpressionInfo;
}


export async function buildDotNetPopupExpressionInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPopupExpressionInfo: any = {};
    
    if (hasValue(jsObject.expression)) {
        dotNetPopupExpressionInfo.expression = jsObject.expression;
    }
    
    if (hasValue(jsObject.name)) {
        dotNetPopupExpressionInfo.name = jsObject.name;
    }
    
    if (hasValue(jsObject.returnType)) {
        dotNetPopupExpressionInfo.returnType = removeCircularReferences(jsObject.returnType);
    }
    
    if (hasValue(jsObject.title)) {
        dotNetPopupExpressionInfo.title = jsObject.title;
    }

    return dotNetPopupExpressionInfo;
}

