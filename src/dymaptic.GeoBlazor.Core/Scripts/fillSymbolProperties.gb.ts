// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, sanitize } from './arcGisJsInterop';
import { buildDotNetFillSymbolProperties } from './fillSymbolProperties';
export async function buildJsFillSymbolPropertiesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }
    
    switch (dotNetObject.type) {
        case 'any':
            let jsFillSymbolProperties: any = {};

            if (hasValue(dotNetObject.color)) {
                jsFillSymbolProperties.color = dotNetObject.color;
            }
            if (hasValue(dotNetObject.outline)) {
                jsFillSymbolProperties.outline = dotNetObject.outline;
            }
    
            let jsObjectRef = DotNet.createJSObjectReference(jsFillSymbolProperties);
            jsObjectRefs[dotNetObject.id] = jsObjectRef;
            arcGisObjectRefs[dotNetObject.id] = jsFillSymbolProperties;
    
            return jsFillSymbolProperties;

        default: 
            return sanitize(dotNetObject);
    }
}     

export async function buildDotNetFillSymbolPropertiesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    switch (jsObject.type) {
        case 'any': 
        let dotNetFillSymbolProperties: any = {};
            if (hasValue(jsObject.color)) {
                dotNetFillSymbolProperties.color = jsObject.color;
            }
    
            if (hasValue(jsObject.outline)) {
                dotNetFillSymbolProperties.outline = jsObject.outline;
            }
    
            if (hasValue(jsObject.type)) {
                dotNetFillSymbolProperties.type = jsObject.type;
            }
    

            return dotNetFillSymbolProperties;

        default: 
            return jsObject;
    }
}     

