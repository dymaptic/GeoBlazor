// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import TrackViewModel from '@arcgis/core/widgets/Track/TrackViewModel';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class TrackViewModelGenerated implements IPropertyWrapper {
    public component: TrackViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: TrackViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async start(): Promise<void> {
        this.component.start();
    }

    async stop(): Promise<void> {
        this.component.stop();
    }

    // region properties
    
    async getGraphic(): Promise<any> {
        if (!hasValue(this.component.graphic)) {
            return null;
        }
        
        let { buildDotNetGraphic } = await import('./graphic');
        return buildDotNetGraphic(this.component.graphic, this.layerId, this.viewId);
    }
    async setGraphic(value: any): Promise<void> {
        let { buildJsGraphic } = await import('./graphic');
        this.component.graphic =  buildJsGraphic(value);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsTrackViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTrackViewModel = new TrackViewModel();
    if (hasValue(dotNetObject.graphic)) {
        let { buildJsGraphic } = await import('./graphic');
        jsTrackViewModel.graphic = buildJsGraphic(dotNetObject.graphic) as any;
    }

    if (hasValue(dotNetObject.error)) {
        jsTrackViewModel.error = dotNetObject.error;
    }
    if (hasValue(dotNetObject.geolocationOptions)) {
        jsTrackViewModel.geolocationOptions = dotNetObject.geolocationOptions;
    }
    if (hasValue(dotNetObject.goToLocationEnabled)) {
        jsTrackViewModel.goToLocationEnabled = dotNetObject.goToLocationEnabled;
    }
    if (hasValue(dotNetObject.goToOverride)) {
        jsTrackViewModel.goToOverride = dotNetObject.goToOverride;
    }
    if (hasValue(dotNetObject.positionFilterFunction)) {
        jsTrackViewModel.positionFilterFunction = dotNetObject.positionFilterFunction;
    }
    if (hasValue(dotNetObject.scale)) {
        jsTrackViewModel.scale = dotNetObject.scale;
    }
    if (hasValue(dotNetObject.view)) {
        jsTrackViewModel.view = dotNetObject.view;
    }
    jsTrackViewModel.on('track', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsTrack', evt);
    });
    
    jsTrackViewModel.on('track-error', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsTrackError', evt);
    });
    

    let { default: TrackViewModelWrapper } = await import('./trackViewModel');
    let trackViewModelWrapper = new TrackViewModelWrapper(jsTrackViewModel);
    trackViewModelWrapper.geoBlazorId = dotNetObject.id;
    trackViewModelWrapper.viewId = viewId;
    trackViewModelWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(trackViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = trackViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsTrackViewModel;
    let { buildDotNetTrackViewModel } = await import('./trackViewModel');
    let dnInstantiatedObject = await buildDotNetTrackViewModel(jsTrackViewModel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TrackViewModel', e);
    }
    
    return jsTrackViewModel;
}
export async function buildDotNetTrackViewModelGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTrackViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.graphic)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetTrackViewModel.graphic = buildDotNetGraphic(jsObject.graphic, layerId, viewId);
        }
        if (hasValue(jsObject.error)) {
            dotNetTrackViewModel.error = jsObject.error;
        }
        if (hasValue(jsObject.geolocationOptions)) {
            dotNetTrackViewModel.geolocationOptions = jsObject.geolocationOptions;
        }
        if (hasValue(jsObject.goToLocationEnabled)) {
            dotNetTrackViewModel.goToLocationEnabled = jsObject.goToLocationEnabled;
        }
        if (hasValue(jsObject.goToOverride)) {
            dotNetTrackViewModel.goToOverride = jsObject.goToOverride;
        }
        if (hasValue(jsObject.positionFilterFunction)) {
            dotNetTrackViewModel.positionFilterFunction = jsObject.positionFilterFunction;
        }
        if (hasValue(jsObject.scale)) {
            dotNetTrackViewModel.scale = jsObject.scale;
        }
        if (hasValue(jsObject.state)) {
            dotNetTrackViewModel.state = jsObject.state;
        }
        if (hasValue(jsObject.tracking)) {
            dotNetTrackViewModel.tracking = jsObject.tracking;
        }
        if (hasValue(jsObject.view)) {
            dotNetTrackViewModel.view = jsObject.view;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTrackViewModel.id = k;
                break;
            }
        }
    }

    return dotNetTrackViewModel;
}

