// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import SimpleFillSymbol from '@arcgis/core/symbols/SimpleFillSymbol';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SimpleFillSymbolGenerated implements IPropertyWrapper {
    public component: SimpleFillSymbol;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: SimpleFillSymbol) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsSimpleFillSymbolGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSimpleFillSymbol = new SimpleFillSymbol();

    if (hasValue(dotNetObject.color)) {
        jsSimpleFillSymbol.color = dotNetObject.color;
    }
    if (hasValue(dotNetObject.outline)) {
        jsSimpleFillSymbol.outline = dotNetObject.outline;
    }
    if (hasValue(dotNetObject.style)) {
        jsSimpleFillSymbol.style = dotNetObject.style;
    }
    let { default: SimpleFillSymbolWrapper } = await import('./simpleFillSymbol');
    let simpleFillSymbolWrapper = new SimpleFillSymbolWrapper(jsSimpleFillSymbol);
    simpleFillSymbolWrapper.geoBlazorId = dotNetObject.id;
    simpleFillSymbolWrapper.viewId = viewId;
    simpleFillSymbolWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(simpleFillSymbolWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = simpleFillSymbolWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsSimpleFillSymbol;
    
    return jsSimpleFillSymbol;
}

export async function buildDotNetSimpleFillSymbolGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSimpleFillSymbol: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetSimpleFillSymbol.color = jsObject.color;
        dotNetSimpleFillSymbol.outline = jsObject.outline;
        dotNetSimpleFillSymbol.style = jsObject.style;
        dotNetSimpleFillSymbol.type = jsObject.type;

    return dotNetSimpleFillSymbol;
}

