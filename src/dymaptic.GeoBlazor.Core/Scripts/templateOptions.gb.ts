import { buildDotNetTemplateOptions } from './templateOptions';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import TemplateOptions from '@arcgis/core/widgets/Print/TemplateOptions';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsTemplateOptionsGenerated(dotNetObject: any): Promise<any> {
    let jsTemplateOptions = new TemplateOptions();
    if (hasValue(dotNetObject.format)) {
        let { buildJsFormat } = await import('./format');
        jsTemplateOptions.format = await buildJsFormat(dotNetObject.format, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.layoutItem)) {
        let { buildJsPortalItem } = await import('./portalItem');
        jsTemplateOptions.layoutItem = await buildJsPortalItem(dotNetObject.layoutItem, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.attributionEnabled)) {
        jsTemplateOptions.attributionEnabled = dotNetObject.attributionEnabled;
    }
    if (hasValue(dotNetObject.author)) {
        jsTemplateOptions.author = dotNetObject.author;
    }
    if (hasValue(dotNetObject.copyright)) {
        jsTemplateOptions.copyright = dotNetObject.copyright;
    }
    if (hasValue(dotNetObject.customTextElements)) {
        jsTemplateOptions.customTextElements = dotNetObject.customTextElements;
    }
    if (hasValue(dotNetObject.dpi)) {
        jsTemplateOptions.dpi = dotNetObject.dpi;
    }
    if (hasValue(dotNetObject.fileName)) {
        jsTemplateOptions.fileName = dotNetObject.fileName;
    }
    if (hasValue(dotNetObject.forceFeatureAttributes)) {
        jsTemplateOptions.forceFeatureAttributes = dotNetObject.forceFeatureAttributes;
    }
    if (hasValue(dotNetObject.height)) {
        jsTemplateOptions.height = dotNetObject.height;
    }
    if (hasValue(dotNetObject.includeTables)) {
        jsTemplateOptions.includeTables = dotNetObject.includeTables;
    }
    if (hasValue(dotNetObject.layout)) {
        jsTemplateOptions.layout = dotNetObject.layout;
    }
    if (hasValue(dotNetObject.legendEnabled)) {
        jsTemplateOptions.legendEnabled = dotNetObject.legendEnabled;
    }
    if (hasValue(dotNetObject.northArrowEnabled)) {
        jsTemplateOptions.northArrowEnabled = dotNetObject.northArrowEnabled;
    }
    if (hasValue(dotNetObject.scale)) {
        jsTemplateOptions.scale = dotNetObject.scale;
    }
    if (hasValue(dotNetObject.scaleEnabled)) {
        jsTemplateOptions.scaleEnabled = dotNetObject.scaleEnabled;
    }
    if (hasValue(dotNetObject.title)) {
        jsTemplateOptions.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.width)) {
        jsTemplateOptions.width = dotNetObject.width;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsTemplateOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTemplateOptions;
    
    let dnInstantiatedObject = await buildDotNetTemplateOptions(jsTemplateOptions);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TemplateOptions', e);
    }
    
    return jsTemplateOptions;
}
export async function buildDotNetTemplateOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTemplateOptions: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.format)) {
            let { buildDotNetFormat } = await import('./format');
            dotNetTemplateOptions.format = await buildDotNetFormat(jsObject.format);
        }
        if (hasValue(jsObject.layoutItem)) {
            let { buildDotNetPortalItem } = await import('./portalItem');
            dotNetTemplateOptions.layoutItem = await buildDotNetPortalItem(jsObject.layoutItem);
        }
        if (hasValue(jsObject.attributionEnabled)) {
            dotNetTemplateOptions.attributionEnabled = jsObject.attributionEnabled;
        }
        if (hasValue(jsObject.author)) {
            dotNetTemplateOptions.author = jsObject.author;
        }
        if (hasValue(jsObject.copyright)) {
            dotNetTemplateOptions.copyright = jsObject.copyright;
        }
        if (hasValue(jsObject.customTextElements)) {
            dotNetTemplateOptions.customTextElements = jsObject.customTextElements;
        }
        if (hasValue(jsObject.dpi)) {
            dotNetTemplateOptions.dpi = jsObject.dpi;
        }
        if (hasValue(jsObject.fileName)) {
            dotNetTemplateOptions.fileName = jsObject.fileName;
        }
        if (hasValue(jsObject.forceFeatureAttributes)) {
            dotNetTemplateOptions.forceFeatureAttributes = jsObject.forceFeatureAttributes;
        }
        if (hasValue(jsObject.height)) {
            dotNetTemplateOptions.height = jsObject.height;
        }
        if (hasValue(jsObject.includeTables)) {
            dotNetTemplateOptions.includeTables = jsObject.includeTables;
        }
        if (hasValue(jsObject.layout)) {
            dotNetTemplateOptions.layout = jsObject.layout;
        }
        if (hasValue(jsObject.legendEnabled)) {
            dotNetTemplateOptions.legendEnabled = jsObject.legendEnabled;
        }
        if (hasValue(jsObject.northArrowEnabled)) {
            dotNetTemplateOptions.northArrowEnabled = jsObject.northArrowEnabled;
        }
        if (hasValue(jsObject.scale)) {
            dotNetTemplateOptions.scale = jsObject.scale;
        }
        if (hasValue(jsObject.scaleEnabled)) {
            dotNetTemplateOptions.scaleEnabled = jsObject.scaleEnabled;
        }
        if (hasValue(jsObject.title)) {
            dotNetTemplateOptions.title = jsObject.title;
        }
        if (hasValue(jsObject.width)) {
            dotNetTemplateOptions.width = jsObject.width;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTemplateOptions.id = k;
                break;
            }
        }
    }

    return dotNetTemplateOptions;
}

