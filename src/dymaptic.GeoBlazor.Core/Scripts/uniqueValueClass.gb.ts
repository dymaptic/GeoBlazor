// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import UniqueValueClass from '@arcgis/core/renderers/support/UniqueValueClass';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetUniqueValueClass } from './uniqueValueClass';

export async function buildJsUniqueValueClassGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.symbol)) {
        let { buildJsSymbol } = await import('./symbol');
        properties.symbol = buildJsSymbol(dotNetObject.symbol) as any;
    }
    if (hasValue(dotNetObject.values)) {
        let { buildJsUniqueValue } = await import('./uniqueValue');
        properties.values = await Promise.all(dotNetObject.values.map(async i => await buildJsUniqueValue(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    let jsUniqueValueClass = new UniqueValueClass(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsUniqueValueClass);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsUniqueValueClass;
    
    let { buildDotNetUniqueValueClass } = await import('./uniqueValueClass');
    let dnInstantiatedObject = await buildDotNetUniqueValueClass(jsUniqueValueClass, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type UniqueValueClass detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for UniqueValueClass', e);
    }
    
    return jsUniqueValueClass;
}


export async function buildDotNetUniqueValueClassGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUniqueValueClass: any = {};
    
    if (hasValue(jsObject.symbol)) {
        let { buildDotNetSymbol } = await import('./symbol');
        dotNetUniqueValueClass.symbol = buildDotNetSymbol(jsObject.symbol);
    }
    
    if (hasValue(jsObject.values)) {
        let { buildDotNetUniqueValue } = await import('./uniqueValue');
        dotNetUniqueValueClass.values = await Promise.all(jsObject.values.map(async i => await buildDotNetUniqueValue(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.label)) {
        dotNetUniqueValueClass.label = jsObject.label;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetUniqueValueClass.id = geoBlazorId;
    }

    return dotNetUniqueValueClass;
}

