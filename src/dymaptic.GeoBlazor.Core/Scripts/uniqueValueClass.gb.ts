// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import UniqueValueClass from '@arcgis/core/renderers/support/UniqueValueClass';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetUniqueValueClass } from './uniqueValueClass';

export async function buildJsUniqueValueClassGenerated(dotNetObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.symbol)) {
        let { buildJsSymbol } = await import('./symbol');
        properties.symbol = buildJsSymbol(dotNetObject.symbol, viewId) as any;
    }
    if (hasValue(dotNetObject.values) && dotNetObject.values.length > 0) {
        let { buildJsUniqueValue } = await import('./uniqueValue');
        properties.values = await Promise.all(dotNetObject.values.map(async i => await buildJsUniqueValue(i, viewId))) as any;
    }

    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    let jsUniqueValueClass = new UniqueValueClass(properties);
    
    jsObjectRefs[dotNetObject.id] = jsUniqueValueClass;
    arcGisObjectRefs[dotNetObject.id] = jsUniqueValueClass;
    
    return jsUniqueValueClass;
}


export async function buildDotNetUniqueValueClassGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUniqueValueClass: any = {};
    
    if (hasValue(jsObject.symbol)) {
        let { buildDotNetSymbol } = await import('./symbol');
        dotNetUniqueValueClass.symbol = buildDotNetSymbol(jsObject.symbol, viewId);
    }
    
    if (hasValue(jsObject.values)) {
        let { buildDotNetUniqueValue } = await import('./uniqueValue');
        dotNetUniqueValueClass.values = await Promise.all(jsObject.values.map(async i => await buildDotNetUniqueValue(i, viewId)));
    }
    
    if (hasValue(jsObject.label)) {
        dotNetUniqueValueClass.label = jsObject.label;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetUniqueValueClass.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetUniqueValueClass.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetUniqueValueClass.id)) {
        jsObjectRefs[dotNetUniqueValueClass.id] ??= jsObject;
        arcGisObjectRefs[dotNetUniqueValueClass.id] ??= jsObject;
    }

    return dotNetUniqueValueClass;
}

