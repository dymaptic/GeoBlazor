// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import UniqueValueClass from '@arcgis/core/renderers/support/UniqueValueClass';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class UniqueValueClassGenerated implements IPropertyWrapper {
    public component: UniqueValueClass;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: UniqueValueClass) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getSymbol(): Promise<any> {
        if (!hasValue(this.component.symbol)) {
            return null;
        }
        
        let { buildDotNetSymbol } = await import('./symbol');
        return buildDotNetSymbol(this.component.symbol);
    }
    async setSymbol(value: any): Promise<void> {
        let { buildJsSymbol } = await import('./symbol');
        this.component.symbol =  buildJsSymbol(value);
    }
    async getValues(): Promise<any> {
        if (!hasValue(this.component.values)) {
            return null;
        }
        
        let { buildDotNetUniqueValue } = await import('./uniqueValue');
        return await Promise.all(this.component.values.map(async i => await buildDotNetUniqueValue(i)));
    }
    
    async setValues(value: any): Promise<void> {
        let { buildJsUniqueValue } = await import('./uniqueValue');
        this.component.values = await Promise.all(value.map(async i => await buildJsUniqueValue(i, this.layerId, this.viewId))) as any;
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsUniqueValueClassGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsUniqueValueClass = new UniqueValueClass();
    if (hasValue(dotNetObject.symbol)) {
        let { buildJsSymbol } = await import('./symbol');
        jsUniqueValueClass.symbol = buildJsSymbol(dotNetObject.symbol) as any;
    }
    if (hasValue(dotNetObject.values)) {
        let { buildJsUniqueValue } = await import('./uniqueValue');
        jsUniqueValueClass.values = await Promise.all(dotNetObject.values.map(async i => await buildJsUniqueValue(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.label)) {
        jsUniqueValueClass.label = dotNetObject.label;
    }
    let { default: UniqueValueClassWrapper } = await import('./uniqueValueClass');
    let uniqueValueClassWrapper = new UniqueValueClassWrapper(jsUniqueValueClass);
    uniqueValueClassWrapper.geoBlazorId = dotNetObject.id;
    uniqueValueClassWrapper.viewId = viewId;
    uniqueValueClassWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(uniqueValueClassWrapper);
    jsObjectRefs[dotNetObject.id] = uniqueValueClassWrapper;

    arcGisObjectRefs[dotNetObject.id] = jsUniqueValueClass;
    let { buildDotNetUniqueValueClass } = await import('./uniqueValueClass');
    let dnInstantiatedObject = await buildDotNetUniqueValueClass(jsUniqueValueClass);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for UniqueValueClass', e);
    }
    
    return jsUniqueValueClass;
}

export async function buildDotNetUniqueValueClassGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUniqueValueClass: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.symbol)) {
            let { buildDotNetSymbol } = await import('./symbol');
            dotNetUniqueValueClass.symbol = buildDotNetSymbol(jsObject.symbol);
        }
        if (hasValue(jsObject.values)) {
            let { buildDotNetUniqueValue } = await import('./uniqueValue');
            dotNetUniqueValueClass.values = await Promise.all(jsObject.values.map(async i => await buildDotNetUniqueValue(i)));
        }
        if (hasValue(jsObject.label)) {
            dotNetUniqueValueClass.label = jsObject.label;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetUniqueValueClass.id = k;
                break;
            }
        }
    }

    return dotNetUniqueValueClass;
}

