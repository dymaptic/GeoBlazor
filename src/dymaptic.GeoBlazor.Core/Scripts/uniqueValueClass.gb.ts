// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import UniqueValueClass from '@arcgis/core/renderers/support/UniqueValueClass';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetUniqueValueClass } from './uniqueValueClass';

export async function buildJsUniqueValueClassGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsUniqueValueClass = new UniqueValueClass();
    if (hasValue(dotNetObject.symbol)) {
        let { buildJsSymbol } = await import('./symbol');
        jsUniqueValueClass.symbol = buildJsSymbol(dotNetObject.symbol) as any;
    }

    if (hasValue(dotNetObject.label)) {
        jsUniqueValueClass.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.values)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedValues } = dotNetObject.values;
        jsUniqueValueClass.values = sanitizedValues;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsUniqueValueClass);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsUniqueValueClass;
    
    let dnInstantiatedObject = await buildDotNetUniqueValueClass(jsUniqueValueClass);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for UniqueValueClass', e);
    }
    
    return jsUniqueValueClass;
}

export async function buildDotNetUniqueValueClassGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUniqueValueClass: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.symbol)) {
            let { buildDotNetSymbol } = await import('./symbol');
            dotNetUniqueValueClass.symbol = buildDotNetSymbol(jsObject.symbol);
        }
    if (hasValue(jsObject.label)) {
        dotNetUniqueValueClass.label = jsObject.label;
    }
    if (hasValue(jsObject.values)) {
        dotNetUniqueValueClass.values = jsObject.values;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetUniqueValueClass.id = k;
                break;
            }
        }
    }

    return dotNetUniqueValueClass;
}

