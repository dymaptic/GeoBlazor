// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetColorCreatePCTrueColorRendererParams } from './colorCreatePCTrueColorRendererParams';
import colorCreatePCTrueColorRendererParams = __esri.colorCreatePCTrueColorRendererParams;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsColorCreatePCTrueColorRendererParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jscolorCreatePCTrueColorRendererParams: any = {}
    if (hasValue(dotNetObject.layer)) {
        let { buildJsPointCloudLayer } = await import('./pointCloudLayer');
        jscolorCreatePCTrueColorRendererParams.layer = await buildJsPointCloudLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.density)) {
        jscolorCreatePCTrueColorRendererParams.density = dotNetObject.density;
    }
    if (hasValue(dotNetObject.signal)) {
        jscolorCreatePCTrueColorRendererParams.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.size)) {
        jscolorCreatePCTrueColorRendererParams.size = dotNetObject.size;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jscolorCreatePCTrueColorRendererParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jscolorCreatePCTrueColorRendererParams;
    
    let dnInstantiatedObject = await buildDotNetColorCreatePCTrueColorRendererParams(jscolorCreatePCTrueColorRendererParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ColorCreatePCTrueColorRendererParams', e);
    }
    
    return jscolorCreatePCTrueColorRendererParams;
}

export async function buildDotNetColorCreatePCTrueColorRendererParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetColorCreatePCTrueColorRendererParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.density)) {
            dotNetColorCreatePCTrueColorRendererParams.density = jsObject.density;
        }
        if (hasValue(jsObject.signal)) {
            dotNetColorCreatePCTrueColorRendererParams.signal = jsObject.signal;
        }
        if (hasValue(jsObject.size)) {
            dotNetColorCreatePCTrueColorRendererParams.size = jsObject.size;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetColorCreatePCTrueColorRendererParams.id = k;
                break;
            }
        }
    }

    return dotNetColorCreatePCTrueColorRendererParams;
}

