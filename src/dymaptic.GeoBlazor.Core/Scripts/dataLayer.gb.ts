// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import DataLayer from '@arcgis/core/rest/support/DataLayer';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class DataLayerGenerated implements IPropertyWrapper {
    public layer: DataLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: DataLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    // region properties
    
    async getGeometry(): Promise<any> {
        if (!hasValue(this.layer.geometry)) {
            return null;
        }
        
        let { buildDotNetGeometry } = await import('./geometry');
        return buildDotNetGeometry(this.layer.geometry);
    }
    async setGeometry(value: any): Promise<void> {
        let { buildJsGeometry } = await import('./geometry');
        this.layer.geometry =  buildJsGeometry(value);
    }
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}


export async function buildJsDataLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsDataLayer = new DataLayer();
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsGeometry } = await import('./geometry');
        jsDataLayer.geometry = buildJsGeometry(dotNetObject.geometry) as any;
    }

    if (hasValue(dotNetObject.doNotLocateOnRestrictedElements)) {
        jsDataLayer.doNotLocateOnRestrictedElements = dotNetObject.doNotLocateOnRestrictedElements;
    }
    if (hasValue(dotNetObject.geometryType)) {
        jsDataLayer.geometryType = dotNetObject.geometryType;
    }
    if (hasValue(dotNetObject.name)) {
        jsDataLayer.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.spatialRelationship)) {
        jsDataLayer.spatialRelationship = dotNetObject.spatialRelationship;
    }
    if (hasValue(dotNetObject.where)) {
        jsDataLayer.where = dotNetObject.where;
    }

    let { default: DataLayerWrapper } = await import('./dataLayer');
    let dataLayerWrapper = new DataLayerWrapper(jsDataLayer);
    dataLayerWrapper.geoBlazorId = dotNetObject.id;
    dataLayerWrapper.viewId = viewId;
    dataLayerWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(dataLayerWrapper);
    jsObjectRefs[dotNetObject.id] = dataLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsDataLayer;
    let { buildDotNetDataLayer } = await import('./dataLayer');
    let dnInstantiatedObject = await buildDotNetDataLayer(jsDataLayer);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DataLayer', e);
    }
    
    return jsDataLayer;
}

export async function buildDotNetDataLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDataLayer: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.geometry)) {
            let { buildDotNetGeometry } = await import('./geometry');
            dotNetDataLayer.geometry = buildDotNetGeometry(jsObject.geometry);
        }
        if (hasValue(jsObject.doNotLocateOnRestrictedElements)) {
            dotNetDataLayer.doNotLocateOnRestrictedElements = jsObject.doNotLocateOnRestrictedElements;
        }
        if (hasValue(jsObject.geometryType)) {
            dotNetDataLayer.geometryType = jsObject.geometryType;
        }
        if (hasValue(jsObject.name)) {
            dotNetDataLayer.name = jsObject.name;
        }
        if (hasValue(jsObject.spatialRelationship)) {
            dotNetDataLayer.spatialRelationship = jsObject.spatialRelationship;
        }
        if (hasValue(jsObject.type)) {
            dotNetDataLayer.type = jsObject.type;
        }
        if (hasValue(jsObject.where)) {
            dotNetDataLayer.where = jsObject.where;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetDataLayer.id = k;
                break;
            }
        }
    }

    return dotNetDataLayer;
}

