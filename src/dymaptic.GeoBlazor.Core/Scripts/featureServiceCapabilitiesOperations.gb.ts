// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetFeatureServiceCapabilitiesOperations } from './featureServiceCapabilitiesOperations';

export async function buildJsFeatureServiceCapabilitiesOperationsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureServiceCapabilitiesOperations: any = {};

    if (hasValue(dotNetObject.supportsAdd)) {
        jsFeatureServiceCapabilitiesOperations.supportsAdd = dotNetObject.supportsAdd;
    }
    if (hasValue(dotNetObject.supportsChangeTracking)) {
        jsFeatureServiceCapabilitiesOperations.supportsChangeTracking = dotNetObject.supportsChangeTracking;
    }
    if (hasValue(dotNetObject.supportsDelete)) {
        jsFeatureServiceCapabilitiesOperations.supportsDelete = dotNetObject.supportsDelete;
    }
    if (hasValue(dotNetObject.supportsEditing)) {
        jsFeatureServiceCapabilitiesOperations.supportsEditing = dotNetObject.supportsEditing;
    }
    if (hasValue(dotNetObject.supportsQuery)) {
        jsFeatureServiceCapabilitiesOperations.supportsQuery = dotNetObject.supportsQuery;
    }
    if (hasValue(dotNetObject.supportsQueryContingentValues)) {
        jsFeatureServiceCapabilitiesOperations.supportsQueryContingentValues = dotNetObject.supportsQueryContingentValues;
    }
    if (hasValue(dotNetObject.supportsQueryDataElements)) {
        jsFeatureServiceCapabilitiesOperations.supportsQueryDataElements = dotNetObject.supportsQueryDataElements;
    }
    if (hasValue(dotNetObject.supportsQueryDomains)) {
        jsFeatureServiceCapabilitiesOperations.supportsQueryDomains = dotNetObject.supportsQueryDomains;
    }
    if (hasValue(dotNetObject.supportsSync)) {
        jsFeatureServiceCapabilitiesOperations.supportsSync = dotNetObject.supportsSync;
    }
    if (hasValue(dotNetObject.supportsUpdate)) {
        jsFeatureServiceCapabilitiesOperations.supportsUpdate = dotNetObject.supportsUpdate;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureServiceCapabilitiesOperations);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureServiceCapabilitiesOperations;
    
    try {
        let { buildDotNetFeatureServiceCapabilitiesOperations } = await import('./featureServiceCapabilitiesOperations');
        let dnInstantiatedObject = await buildDotNetFeatureServiceCapabilitiesOperations(jsFeatureServiceCapabilitiesOperations, layerId, viewId);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type FeatureServiceCapabilitiesOperations detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureServiceCapabilitiesOperations', e);
    }
    
    return jsFeatureServiceCapabilitiesOperations;
}


export async function buildDotNetFeatureServiceCapabilitiesOperationsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureServiceCapabilitiesOperations: any = {};
    
    if (hasValue(jsObject.supportsAdd)) {
        dotNetFeatureServiceCapabilitiesOperations.supportsAdd = jsObject.supportsAdd;
    }
    
    if (hasValue(jsObject.supportsChangeTracking)) {
        dotNetFeatureServiceCapabilitiesOperations.supportsChangeTracking = jsObject.supportsChangeTracking;
    }
    
    if (hasValue(jsObject.supportsDelete)) {
        dotNetFeatureServiceCapabilitiesOperations.supportsDelete = jsObject.supportsDelete;
    }
    
    if (hasValue(jsObject.supportsEditing)) {
        dotNetFeatureServiceCapabilitiesOperations.supportsEditing = jsObject.supportsEditing;
    }
    
    if (hasValue(jsObject.supportsQuery)) {
        dotNetFeatureServiceCapabilitiesOperations.supportsQuery = jsObject.supportsQuery;
    }
    
    if (hasValue(jsObject.supportsQueryContingentValues)) {
        dotNetFeatureServiceCapabilitiesOperations.supportsQueryContingentValues = jsObject.supportsQueryContingentValues;
    }
    
    if (hasValue(jsObject.supportsQueryDataElements)) {
        dotNetFeatureServiceCapabilitiesOperations.supportsQueryDataElements = jsObject.supportsQueryDataElements;
    }
    
    if (hasValue(jsObject.supportsQueryDomains)) {
        dotNetFeatureServiceCapabilitiesOperations.supportsQueryDomains = jsObject.supportsQueryDomains;
    }
    
    if (hasValue(jsObject.supportsSync)) {
        dotNetFeatureServiceCapabilitiesOperations.supportsSync = jsObject.supportsSync;
    }
    
    if (hasValue(jsObject.supportsUpdate)) {
        dotNetFeatureServiceCapabilitiesOperations.supportsUpdate = jsObject.supportsUpdate;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetFeatureServiceCapabilitiesOperations.id = geoBlazorId;
    }

    return dotNetFeatureServiceCapabilitiesOperations;
}

