// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Environment from '@arcgis/core/webscene/Environment';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetEnvironment } from './environment';

export async function buildJsEnvironmentGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.atmosphereEnabled)) {
        properties.atmosphereEnabled = dotNetObject.atmosphereEnabled;
    }
    if (hasValue(dotNetObject.background)) {
        const { id, dotNetComponentReference, ...sanitizedBackground } = dotNetObject.background;
        properties.background = sanitizedBackground;
    }
    if (hasValue(dotNetObject.lighting)) {
        properties.lighting = dotNetObject.lighting;
    }
    if (hasValue(dotNetObject.starsEnabled)) {
        properties.starsEnabled = dotNetObject.starsEnabled;
    }
    if (hasValue(dotNetObject.weather)) {
        const { id, dotNetComponentReference, ...sanitizedWeather } = dotNetObject.weather;
        properties.weather = sanitizedWeather;
    }
    let jsEnvironment = new Environment(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsEnvironment);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsEnvironment;
    
    let { buildDotNetEnvironment } = await import('./environment');
    let dnInstantiatedObject = await buildDotNetEnvironment(jsEnvironment);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type Environment detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Environment', e);
    }
    
    return jsEnvironment;
}


export async function buildDotNetEnvironmentGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetEnvironment: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.atmosphereEnabled)) {
        dotNetEnvironment.atmosphereEnabled = jsObject.atmosphereEnabled;
    }
    if (hasValue(jsObject.background)) {
        dotNetEnvironment.background = jsObject.background;
    }
    if (hasValue(jsObject.lighting)) {
        dotNetEnvironment.lighting = jsObject.lighting;
    }
    if (hasValue(jsObject.starsEnabled)) {
        dotNetEnvironment.starsEnabled = jsObject.starsEnabled;
    }
    if (hasValue(jsObject.weather)) {
        dotNetEnvironment.weather = jsObject.weather;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetEnvironment.id = k;
                break;
            }
        }
    }

    return dotNetEnvironment;
}

