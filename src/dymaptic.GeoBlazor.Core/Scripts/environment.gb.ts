// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Environment from '@arcgis/core/webscene/Environment';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetEnvironment } from './environment';

export async function buildJsEnvironmentGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.background)) {
        let { buildJsBackground } = await import('./background');
        properties.background = buildJsBackground(dotNetObject.background, viewId) as any;
    }
    if (hasValue(dotNetObject.lighting)) {
        properties.lighting = dotNetObject.lighting;
    }
    if (hasValue(dotNetObject.weather)) {
        properties.weather = dotNetObject.weather;
    }

    if (hasValue(dotNetObject.atmosphereEnabled)) {
        properties.atmosphereEnabled = dotNetObject.atmosphereEnabled;
    }
    if (hasValue(dotNetObject.starsEnabled)) {
        properties.starsEnabled = dotNetObject.starsEnabled;
    }
    let jsEnvironment = new Environment(properties);
    
    jsObjectRefs[dotNetObject.id] = jsEnvironment;
    arcGisObjectRefs[dotNetObject.id] = jsEnvironment;
    
    return jsEnvironment;
}


export async function buildDotNetEnvironmentGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetEnvironment: any = {};
    
    if (hasValue(jsObject.background)) {
        let { buildDotNetBackground } = await import('./background');
        dotNetEnvironment.background = buildDotNetBackground(jsObject.background, viewId);
    }
    
    if (hasValue(jsObject.atmosphereEnabled)) {
        dotNetEnvironment.atmosphereEnabled = jsObject.atmosphereEnabled;
    }
    
    if (hasValue(jsObject.lighting)) {
        dotNetEnvironment.lighting = removeCircularReferences(jsObject.lighting);
    }
    
    if (hasValue(jsObject.starsEnabled)) {
        dotNetEnvironment.starsEnabled = jsObject.starsEnabled;
    }
    
    if (hasValue(jsObject.weather)) {
        dotNetEnvironment.weather = removeCircularReferences(jsObject.weather);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetEnvironment.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetEnvironment.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetEnvironment.id)) {
        jsObjectRefs[dotNetEnvironment.id] ??= jsObject;
        arcGisObjectRefs[dotNetEnvironment.id] ??= jsObject;
    }

    return dotNetEnvironment;
}

