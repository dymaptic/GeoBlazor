import { buildDotNetEnvironment } from './environment';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import Environment from '@arcgis/core/webscene/Environment';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsEnvironmentGenerated(dotNetObject: any): Promise<any> {
    let jsEnvironment = new Environment();

    if (hasValue(dotNetObject.atmosphereEnabled)) {
        jsEnvironment.atmosphereEnabled = dotNetObject.atmosphereEnabled;
    }
    if (hasValue(dotNetObject.background)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedBackground } = dotNetObject.background;
        jsEnvironment.background = sanitizedBackground;
    }
    if (hasValue(dotNetObject.lighting)) {
        jsEnvironment.lighting = dotNetObject.lighting;
    }
    if (hasValue(dotNetObject.starsEnabled)) {
        jsEnvironment.starsEnabled = dotNetObject.starsEnabled;
    }
    if (hasValue(dotNetObject.weather)) {
        jsEnvironment.weather = dotNetObject.weather;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsEnvironment);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsEnvironment;
    
    let dnInstantiatedObject = await buildDotNetEnvironment(jsEnvironment);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Environment', e);
    }
    
    return jsEnvironment;
}
export async function buildDotNetEnvironmentGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetEnvironment: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.atmosphereEnabled)) {
            dotNetEnvironment.atmosphereEnabled = jsObject.atmosphereEnabled;
        }
        if (hasValue(jsObject.background)) {
            dotNetEnvironment.background = jsObject.background;
        }
        if (hasValue(jsObject.lighting)) {
            dotNetEnvironment.lighting = jsObject.lighting;
        }
        if (hasValue(jsObject.starsEnabled)) {
            dotNetEnvironment.starsEnabled = jsObject.starsEnabled;
        }
        if (hasValue(jsObject.weather)) {
            dotNetEnvironment.weather = jsObject.weather;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetEnvironment.id = k;
                break;
            }
        }
    }

    return dotNetEnvironment;
}

