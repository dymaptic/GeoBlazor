// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetEdits } from './edits';

export async function buildJsEditsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsEdits = new Edits();

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsEdits);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsEdits;
    
    let dnInstantiatedObject = await buildDotNetEdits(jsEdits);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Edits', e);
    }
    
    return jsEdits;
}

export async function buildDotNetEditsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetEdits: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.feature)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetEdits.feature = buildDotNetGraphic(jsObject.feature, layerId, viewId);
        }
        if (hasValue(jsObject.modified)) {
            dotNetEdits.modified = jsObject.modified;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetEdits.id = k;
                break;
            }
        }
    }

    return dotNetEdits;
}

