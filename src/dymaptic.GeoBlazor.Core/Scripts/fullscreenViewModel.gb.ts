// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import FullscreenViewModel from '@arcgis/core/widgets/Fullscreen/FullscreenViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FullscreenViewModelGenerated implements IPropertyWrapper {
    public component: FullscreenViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: FullscreenViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async enter(): Promise<void> {
        this.component.enter();
    }

    async exit(): Promise<void> {
        this.component.exit();
    }

    async toggle(): Promise<void> {
        this.component.toggle();
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsFullscreenViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.element)) {
        properties.element = dotNetObject.element;
    }
    let jsFullscreenViewModel = new FullscreenViewModel(properties);

    let { default: FullscreenViewModelWrapper } = await import('./fullscreenViewModel');
    let fullscreenViewModelWrapper = new FullscreenViewModelWrapper(jsFullscreenViewModel);
    fullscreenViewModelWrapper.geoBlazorId = dotNetObject.id;
    fullscreenViewModelWrapper.viewId = viewId;
    fullscreenViewModelWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(fullscreenViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = fullscreenViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsFullscreenViewModel;
    let { buildDotNetFullscreenViewModel } = await import('./fullscreenViewModel');
    let dnInstantiatedObject = await buildDotNetFullscreenViewModel(jsFullscreenViewModel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FullscreenViewModel', e);
    }
    
    return jsFullscreenViewModel;
}

export async function buildDotNetFullscreenViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFullscreenViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.element)) {
        dotNetFullscreenViewModel.element = jsObject.element;
    }
    if (hasValue(jsObject.state)) {
        dotNetFullscreenViewModel.state = jsObject.state;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFullscreenViewModel.id = k;
                break;
            }
        }
    }

    return dotNetFullscreenViewModel;
}

