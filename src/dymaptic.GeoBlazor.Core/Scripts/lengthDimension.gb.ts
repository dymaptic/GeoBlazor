// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import LengthDimension from '@arcgis/core/analysis/LengthDimension';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetLengthDimension } from './lengthDimension';

export async function buildJsLengthDimensionGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsLengthDimension = new LengthDimension();
    if (hasValue(dotNetObject.endPoint)) {
        let { buildJsPoint } = await import('./point');
        jsLengthDimension.endPoint = buildJsPoint(dotNetObject.endPoint) as any;
    }
    if (hasValue(dotNetObject.startPoint)) {
        let { buildJsPoint } = await import('./point');
        jsLengthDimension.startPoint = buildJsPoint(dotNetObject.startPoint) as any;
    }

    if (hasValue(dotNetObject.measureType)) {
        jsLengthDimension.measureType = dotNetObject.measureType;
    }
    if (hasValue(dotNetObject.offset)) {
        jsLengthDimension.offset = dotNetObject.offset;
    }
    if (hasValue(dotNetObject.orientation)) {
        jsLengthDimension.orientation = dotNetObject.orientation;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsLengthDimension);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLengthDimension;
    
    let dnInstantiatedObject = await buildDotNetLengthDimension(jsLengthDimension);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LengthDimension', e);
    }
    
    return jsLengthDimension;
}

export async function buildDotNetLengthDimensionGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLengthDimension: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.endPoint)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetLengthDimension.endPoint = buildDotNetPoint(jsObject.endPoint);
        }
        if (hasValue(jsObject.startPoint)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetLengthDimension.startPoint = buildDotNetPoint(jsObject.startPoint);
        }
    if (hasValue(jsObject.measureType)) {
        dotNetLengthDimension.measureType = jsObject.measureType;
    }
    if (hasValue(jsObject.offset)) {
        dotNetLengthDimension.offset = jsObject.offset;
    }
    if (hasValue(jsObject.orientation)) {
        dotNetLengthDimension.orientation = jsObject.orientation;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLengthDimension.id = k;
                break;
            }
        }
    }

    return dotNetLengthDimension;
}

