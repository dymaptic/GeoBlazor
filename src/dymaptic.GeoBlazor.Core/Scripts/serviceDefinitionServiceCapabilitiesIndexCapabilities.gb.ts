// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetServiceDefinitionServiceCapabilitiesIndexCapabilities } from './serviceDefinitionServiceCapabilitiesIndexCapabilities';

export async function buildJsServiceDefinitionServiceCapabilitiesIndexCapabilitiesGenerated(dotNetObject: any): Promise<any> {
    let jsServiceDefinitionServiceCapabilitiesIndexCapabilities: any = {};

    if (hasValue(dotNetObject.supportsDescendingIndex)) {
        jsServiceDefinitionServiceCapabilitiesIndexCapabilities.supportsDescendingIndex = dotNetObject.supportsDescendingIndex;
    }
    if (hasValue(dotNetObject.supportsRelationshipIndex)) {
        jsServiceDefinitionServiceCapabilitiesIndexCapabilities.supportsRelationshipIndex = dotNetObject.supportsRelationshipIndex;
    }
    if (hasValue(dotNetObject.supportsUniqueRelationshipConstraint)) {
        jsServiceDefinitionServiceCapabilitiesIndexCapabilities.supportsUniqueRelationshipConstraint = dotNetObject.supportsUniqueRelationshipConstraint;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsServiceDefinitionServiceCapabilitiesIndexCapabilities);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsServiceDefinitionServiceCapabilitiesIndexCapabilities;
    
    let { buildDotNetServiceDefinitionServiceCapabilitiesIndexCapabilities } = await import('./serviceDefinitionServiceCapabilitiesIndexCapabilities');
    let dnInstantiatedObject = await buildDotNetServiceDefinitionServiceCapabilitiesIndexCapabilities(jsServiceDefinitionServiceCapabilitiesIndexCapabilities);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type ServiceDefinitionServiceCapabilitiesIndexCapabilities detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ServiceDefinitionServiceCapabilitiesIndexCapabilities', e);
    }
    
    return jsServiceDefinitionServiceCapabilitiesIndexCapabilities;
}


export async function buildDotNetServiceDefinitionServiceCapabilitiesIndexCapabilitiesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetServiceDefinitionServiceCapabilitiesIndexCapabilities: any = {};
    
    if (hasValue(jsObject.supportsDescendingIndex)) {
        dotNetServiceDefinitionServiceCapabilitiesIndexCapabilities.supportsDescendingIndex = jsObject.supportsDescendingIndex;
    }
    
    if (hasValue(jsObject.supportsRelationshipIndex)) {
        dotNetServiceDefinitionServiceCapabilitiesIndexCapabilities.supportsRelationshipIndex = jsObject.supportsRelationshipIndex;
    }
    
    if (hasValue(jsObject.supportsUniqueRelationshipConstraint)) {
        dotNetServiceDefinitionServiceCapabilitiesIndexCapabilities.supportsUniqueRelationshipConstraint = jsObject.supportsUniqueRelationshipConstraint;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetServiceDefinitionServiceCapabilitiesIndexCapabilities.id = geoBlazorId;
    }

    return dotNetServiceDefinitionServiceCapabilitiesIndexCapabilities;
}

