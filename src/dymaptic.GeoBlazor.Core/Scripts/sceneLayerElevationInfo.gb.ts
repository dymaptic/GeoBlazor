// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';

export async function buildJsSceneLayerElevationInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsSceneLayerElevationInfo: any = {};

    if (hasValue(dotNetObject.mode)) {
        jsSceneLayerElevationInfo.mode = dotNetObject.mode;
    }
    if (hasValue(dotNetObject.offset)) {
        jsSceneLayerElevationInfo.offset = dotNetObject.offset;
    }
    if (hasValue(dotNetObject.unit)) {
        jsSceneLayerElevationInfo.unit = dotNetObject.unit;
    }
    
    jsObjectRefs[dotNetObject.id] = jsSceneLayerElevationInfo;
    arcGisObjectRefs[dotNetObject.id] = jsSceneLayerElevationInfo;
    
    return jsSceneLayerElevationInfo;
}


export async function buildDotNetSceneLayerElevationInfoGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSceneLayerElevationInfo: any = {};
    
    if (hasValue(jsObject.mode)) {
        dotNetSceneLayerElevationInfo.mode = removeCircularReferences(jsObject.mode);
    }
    
    if (hasValue(jsObject.offset)) {
        dotNetSceneLayerElevationInfo.offset = jsObject.offset;
    }
    
    if (hasValue(jsObject.unit)) {
        dotNetSceneLayerElevationInfo.unit = removeCircularReferences(jsObject.unit);
    }
    

    return dotNetSceneLayerElevationInfo;
}

