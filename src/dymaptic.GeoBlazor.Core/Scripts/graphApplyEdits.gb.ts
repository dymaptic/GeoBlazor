// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import GraphApplyEdits from '@arcgis/core/rest/knowledgeGraph/GraphApplyEdits';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetGraphApplyEdits } from './graphApplyEdits';

export async function buildJsGraphApplyEditsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.entityDeletes) && dotNetObject.entityDeletes.length > 0) {
        let { buildJsGraphNamedObjectDeletes } = await import('./graphNamedObjectDeletes');
        properties.entityDeletes = await Promise.all(dotNetObject.entityDeletes.map(async i => await buildJsGraphNamedObjectDeletes(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.relationshipDeletes) && dotNetObject.relationshipDeletes.length > 0) {
        let { buildJsGraphNamedObjectDeletes } = await import('./graphNamedObjectDeletes');
        properties.relationshipDeletes = await Promise.all(dotNetObject.relationshipDeletes.map(async i => await buildJsGraphNamedObjectDeletes(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.entityAdds) && dotNetObject.entityAdds.length > 0) {
        properties.entityAdds = dotNetObject.entityAdds;
    }
    if (hasValue(dotNetObject.entityUpdates) && dotNetObject.entityUpdates.length > 0) {
        properties.entityUpdates = dotNetObject.entityUpdates;
    }
    if (hasValue(dotNetObject.options)) {
        properties.options = dotNetObject.options;
    }
    if (hasValue(dotNetObject.relationshipAdds) && dotNetObject.relationshipAdds.length > 0) {
        properties.relationshipAdds = dotNetObject.relationshipAdds;
    }
    if (hasValue(dotNetObject.relationshipUpdates) && dotNetObject.relationshipUpdates.length > 0) {
        properties.relationshipUpdates = dotNetObject.relationshipUpdates;
    }
    let jsGraphApplyEdits = new GraphApplyEdits(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsGraphApplyEdits);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsGraphApplyEdits;
    
    return jsGraphApplyEdits;
}


export async function buildDotNetGraphApplyEditsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGraphApplyEdits: any = {};
    
    if (hasValue(jsObject.entityDeletes)) {
        let { buildDotNetGraphNamedObjectDeletes } = await import('./graphNamedObjectDeletes');
        dotNetGraphApplyEdits.entityDeletes = await Promise.all(jsObject.entityDeletes.map(async i => await buildDotNetGraphNamedObjectDeletes(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.relationshipDeletes)) {
        let { buildDotNetGraphNamedObjectDeletes } = await import('./graphNamedObjectDeletes');
        dotNetGraphApplyEdits.relationshipDeletes = await Promise.all(jsObject.relationshipDeletes.map(async i => await buildDotNetGraphNamedObjectDeletes(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.entityAdds)) {
        dotNetGraphApplyEdits.entityAdds = jsObject.entityAdds;
    }
    
    if (hasValue(jsObject.entityUpdates)) {
        dotNetGraphApplyEdits.entityUpdates = jsObject.entityUpdates;
    }
    
    if (hasValue(jsObject.options)) {
        dotNetGraphApplyEdits.options = jsObject.options;
    }
    
    if (hasValue(jsObject.relationshipAdds)) {
        dotNetGraphApplyEdits.relationshipAdds = jsObject.relationshipAdds;
    }
    
    if (hasValue(jsObject.relationshipUpdates)) {
        dotNetGraphApplyEdits.relationshipUpdates = jsObject.relationshipUpdates;
    }
    

    return dotNetGraphApplyEdits;
}

