// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetPrintTemplate } from './printTemplate';
import PrintTemplate from '@arcgis/core/rest/support/PrintTemplate';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsPrintTemplateGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPrintTemplate = new PrintTemplate();
    if (hasValue(dotNetObject.format)) {
        let { buildJsFormat } = await import('./format');
        jsPrintTemplate.format = await buildJsFormat(dotNetObject.format, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.layoutItem)) {
        let { buildJsPortalItem } = await import('./portalItem');
        jsPrintTemplate.layoutItem = await buildJsPortalItem(dotNetObject.layoutItem, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.layoutOptions)) {
        let { buildJsPrintTemplateLayoutOptions } = await import('./printTemplateLayoutOptions');
        jsPrintTemplate.layoutOptions = await buildJsPrintTemplateLayoutOptions(dotNetObject.layoutOptions, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.reportItem)) {
        let { buildJsPortalItem } = await import('./portalItem');
        jsPrintTemplate.reportItem = await buildJsPortalItem(dotNetObject.reportItem, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.attributionVisible)) {
        jsPrintTemplate.attributionVisible = dotNetObject.attributionVisible;
    }
    if (hasValue(dotNetObject.exportOptions)) {
        jsPrintTemplate.exportOptions = dotNetObject.exportOptions;
    }
    if (hasValue(dotNetObject.forceFeatureAttributes)) {
        jsPrintTemplate.forceFeatureAttributes = dotNetObject.forceFeatureAttributes;
    }
    if (hasValue(dotNetObject.includeCharts)) {
        jsPrintTemplate.includeCharts = dotNetObject.includeCharts;
    }
    if (hasValue(dotNetObject.includeTables)) {
        jsPrintTemplate.includeTables = dotNetObject.includeTables;
    }
    if (hasValue(dotNetObject.layout)) {
        jsPrintTemplate.layout = dotNetObject.layout;
    }
    if (hasValue(dotNetObject.outScale)) {
        jsPrintTemplate.outScale = dotNetObject.outScale;
    }
    if (hasValue(dotNetObject.report)) {
        jsPrintTemplate.report = dotNetObject.report;
    }
    if (hasValue(dotNetObject.reportOptions)) {
        jsPrintTemplate.reportOptions = dotNetObject.reportOptions;
    }
    if (hasValue(dotNetObject.scalePreserved)) {
        jsPrintTemplate.scalePreserved = dotNetObject.scalePreserved;
    }
    if (hasValue(dotNetObject.showLabels)) {
        jsPrintTemplate.showLabels = dotNetObject.showLabels;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsPrintTemplate);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPrintTemplate;
    
    let dnInstantiatedObject = await buildDotNetPrintTemplate(jsPrintTemplate);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PrintTemplate', e);
    }
    
    return jsPrintTemplate;
}

export async function buildDotNetPrintTemplateGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPrintTemplate: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.format)) {
            let { buildDotNetFormat } = await import('./format');
            dotNetPrintTemplate.format = await buildDotNetFormat(jsObject.format);
        }
        if (hasValue(jsObject.layoutItem)) {
            let { buildDotNetPortalItem } = await import('./portalItem');
            dotNetPrintTemplate.layoutItem = await buildDotNetPortalItem(jsObject.layoutItem);
        }
        if (hasValue(jsObject.layoutOptions)) {
            let { buildDotNetPrintTemplateLayoutOptions } = await import('./printTemplateLayoutOptions');
            dotNetPrintTemplate.layoutOptions = await buildDotNetPrintTemplateLayoutOptions(jsObject.layoutOptions);
        }
        if (hasValue(jsObject.reportItem)) {
            let { buildDotNetPortalItem } = await import('./portalItem');
            dotNetPrintTemplate.reportItem = await buildDotNetPortalItem(jsObject.reportItem);
        }
        if (hasValue(jsObject.attributionVisible)) {
            dotNetPrintTemplate.attributionVisible = jsObject.attributionVisible;
        }
        if (hasValue(jsObject.exportOptions)) {
            dotNetPrintTemplate.exportOptions = jsObject.exportOptions;
        }
        if (hasValue(jsObject.forceFeatureAttributes)) {
            dotNetPrintTemplate.forceFeatureAttributes = jsObject.forceFeatureAttributes;
        }
        if (hasValue(jsObject.includeCharts)) {
            dotNetPrintTemplate.includeCharts = jsObject.includeCharts;
        }
        if (hasValue(jsObject.includeTables)) {
            dotNetPrintTemplate.includeTables = jsObject.includeTables;
        }
        if (hasValue(jsObject.layout)) {
            dotNetPrintTemplate.layout = jsObject.layout;
        }
        if (hasValue(jsObject.outScale)) {
            dotNetPrintTemplate.outScale = jsObject.outScale;
        }
        if (hasValue(jsObject.report)) {
            dotNetPrintTemplate.report = jsObject.report;
        }
        if (hasValue(jsObject.reportOptions)) {
            dotNetPrintTemplate.reportOptions = jsObject.reportOptions;
        }
        if (hasValue(jsObject.scalePreserved)) {
            dotNetPrintTemplate.scalePreserved = jsObject.scalePreserved;
        }
        if (hasValue(jsObject.showLabels)) {
            dotNetPrintTemplate.showLabels = jsObject.showLabels;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPrintTemplate.id = k;
                break;
            }
        }
    }

    return dotNetPrintTemplate;
}

