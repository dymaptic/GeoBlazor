// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import RasterFunction from '@arcgis/core/layers/support/RasterFunction';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class RasterFunctionGenerated implements IPropertyWrapper {
    public component: RasterFunction;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: RasterFunction) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsRasterFunctionGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsRasterFunction = new RasterFunction();

    if (hasValue(dotNetObject.functionArguments)) {
        jsRasterFunction.functionArguments = dotNetObject.functionArguments;
    }
    if (hasValue(dotNetObject.functionName)) {
        jsRasterFunction.functionName = dotNetObject.functionName;
    }
    if (hasValue(dotNetObject.outputPixelType)) {
        jsRasterFunction.outputPixelType = dotNetObject.outputPixelType;
    }
    if (hasValue(dotNetObject.rasterFunctionDefinition)) {
        jsRasterFunction.rasterFunctionDefinition = dotNetObject.rasterFunctionDefinition;
    }
    if (hasValue(dotNetObject.variableName)) {
        jsRasterFunction.variableName = dotNetObject.variableName;
    }
    let { default: RasterFunctionWrapper } = await import('./rasterFunction');
    let rasterFunctionWrapper = new RasterFunctionWrapper(jsRasterFunction);
    rasterFunctionWrapper.geoBlazorId = dotNetObject.id;
    rasterFunctionWrapper.viewId = viewId;
    rasterFunctionWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(rasterFunctionWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = rasterFunctionWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsRasterFunction;
    
    return jsRasterFunction;
}

export async function buildDotNetRasterFunctionGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRasterFunction: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetRasterFunction.functionArguments = jsObject.functionArguments;
        dotNetRasterFunction.functionName = jsObject.functionName;
        dotNetRasterFunction.outputPixelType = jsObject.outputPixelType;
        dotNetRasterFunction.rasterFunctionDefinition = jsObject.rasterFunctionDefinition;
        dotNetRasterFunction.variableName = jsObject.variableName;

    return dotNetRasterFunction;
}

