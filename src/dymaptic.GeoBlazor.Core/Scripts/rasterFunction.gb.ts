// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import RasterFunction from '@arcgis/core/layers/support/RasterFunction';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetRasterFunction } from './rasterFunction';

export async function buildJsRasterFunctionGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.functionArguments)) {
        properties.functionArguments = dotNetObject.functionArguments;
    }
    if (hasValue(dotNetObject.functionName)) {
        properties.functionName = dotNetObject.functionName;
    }
    if (hasValue(dotNetObject.outputPixelType)) {
        properties.outputPixelType = dotNetObject.outputPixelType;
    }
    if (hasValue(dotNetObject.rasterFunctionDefinition)) {
        properties.rasterFunctionDefinition = dotNetObject.rasterFunctionDefinition;
    }
    if (hasValue(dotNetObject.variableName)) {
        properties.variableName = dotNetObject.variableName;
    }
    let jsRasterFunction = new RasterFunction(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsRasterFunction);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRasterFunction;
    
    let { buildDotNetRasterFunction } = await import('./rasterFunction');
    let dnInstantiatedObject = await buildDotNetRasterFunction(jsRasterFunction, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type RasterFunction detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RasterFunction', e);
    }
    
    return jsRasterFunction;
}


export async function buildDotNetRasterFunctionGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsRasterFunction } = await import('./rasterFunction');
        jsComponentRef = await buildJsRasterFunction(jsObject, layerId, viewId);
    }
    
    let dotNetRasterFunction: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.functionArguments)) {
        dotNetRasterFunction.functionArguments = jsObject.functionArguments;
    }
    if (hasValue(jsObject.functionName)) {
        dotNetRasterFunction.functionName = jsObject.functionName;
    }
    if (hasValue(jsObject.outputPixelType)) {
        dotNetRasterFunction.outputPixelType = jsObject.outputPixelType;
    }
    if (hasValue(jsObject.rasterFunctionDefinition)) {
        dotNetRasterFunction.rasterFunctionDefinition = jsObject.rasterFunctionDefinition;
    }
    if (hasValue(jsObject.variableName)) {
        dotNetRasterFunction.variableName = jsObject.variableName;
    }


    if (hasValue(geoBlazorId)) {
        dotNetRasterFunction.id = geoBlazorId;
    }

    return dotNetRasterFunction;
}

