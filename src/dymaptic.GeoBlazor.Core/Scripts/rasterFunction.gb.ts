// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import RasterFunction from '@arcgis/core/layers/support/RasterFunction';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, generateSerializableJson } from './arcGisJsInterop';
import { buildDotNetRasterFunction } from './rasterFunction';

export async function buildJsRasterFunctionGenerated(dotNetObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.functionArguments)) {
        properties.functionArguments = JSON.parse(dotNetObject.functionArguments);
    }
    if (hasValue(dotNetObject.functionName)) {
        properties.functionName = dotNetObject.functionName;
    }
    if (hasValue(dotNetObject.outputPixelType)) {
        properties.outputPixelType = dotNetObject.outputPixelType;
    }
    if (hasValue(dotNetObject.rasterFunctionDefinition)) {
        properties.rasterFunctionDefinition = JSON.parse(dotNetObject.rasterFunctionDefinition);
    }
    if (hasValue(dotNetObject.variableName)) {
        properties.variableName = dotNetObject.variableName;
    }
    let jsRasterFunction = new RasterFunction(properties);
    
    jsObjectRefs[dotNetObject.id] = jsRasterFunction;
    arcGisObjectRefs[dotNetObject.id] = jsRasterFunction;
    
    return jsRasterFunction;
}


export async function buildDotNetRasterFunctionGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRasterFunction: any = {};
    
    if (hasValue(jsObject.functionArguments)) {
        dotNetRasterFunction.functionArguments = generateSerializableJson(jsObject.functionArguments);
    }
    
    if (hasValue(jsObject.functionName)) {
        dotNetRasterFunction.functionName = jsObject.functionName;
    }
    
    if (hasValue(jsObject.outputPixelType)) {
        dotNetRasterFunction.outputPixelType = removeCircularReferences(jsObject.outputPixelType);
    }
    
    if (hasValue(jsObject.rasterFunctionDefinition)) {
        dotNetRasterFunction.rasterFunctionDefinition = generateSerializableJson(jsObject.rasterFunctionDefinition);
    }
    
    if (hasValue(jsObject.variableName)) {
        dotNetRasterFunction.variableName = jsObject.variableName;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetRasterFunction.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetRasterFunction.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetRasterFunction.id)) {
        jsObjectRefs[dotNetRasterFunction.id] ??= jsObject;
        arcGisObjectRefs[dotNetRasterFunction.id] ??= jsObject;
    }

    return dotNetRasterFunction;
}

