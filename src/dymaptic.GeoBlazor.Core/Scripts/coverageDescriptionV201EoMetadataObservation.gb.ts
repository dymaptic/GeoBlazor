// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import CoverageDescriptionV201EoMetadataObservation = __esri.CoverageDescriptionV201EoMetadataObservation;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CoverageDescriptionV201EoMetadataObservationGenerated implements IPropertyWrapper {
    public component: CoverageDescriptionV201EoMetadataObservation;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: CoverageDescriptionV201EoMetadataObservation) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getFootprint(): Promise<any> {
        if (!hasValue(this.component.footprint)) {
            return null;
        }
        
        let { buildDotNetPolygon } = await import('./polygon');
        return buildDotNetPolygon(this.component.footprint);
    }
    async setFootprint(value: any): Promise<void> {
        let { buildJsPolygon } = await import('./polygon');
        this.component.footprint = await  buildJsPolygon(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsCoverageDescriptionV201EoMetadataObservationGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCoverageDescriptionV201EoMetadataObservation: any = {}
    if (hasValue(dotNetObject.footprint)) {
        let { buildJsPolygon } = await import('./polygon');
        jsCoverageDescriptionV201EoMetadataObservation.footprint = await buildJsPolygon(dotNetObject.footprint, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.acquisitionType)) {
        jsCoverageDescriptionV201EoMetadataObservation.acquisitionType = dotNetObject.acquisitionType;
    }
    if (hasValue(dotNetObject.identifier)) {
        jsCoverageDescriptionV201EoMetadataObservation.identifier = dotNetObject.identifier;
    }
    if (hasValue(dotNetObject.phenomenonTime)) {
        jsCoverageDescriptionV201EoMetadataObservation.phenomenonTime = dotNetObject.phenomenonTime;
    }
    if (hasValue(dotNetObject.resultTime)) {
        jsCoverageDescriptionV201EoMetadataObservation.resultTime = dotNetObject.resultTime;
    }
    if (hasValue(dotNetObject.status)) {
        jsCoverageDescriptionV201EoMetadataObservation.status = dotNetObject.status;
    }
    let { default: CoverageDescriptionV201EoMetadataObservationWrapper } = await import('./coverageDescriptionV201EoMetadataObservation');
    let coverageDescriptionV201EoMetadataObservationWrapper = new CoverageDescriptionV201EoMetadataObservationWrapper(jsCoverageDescriptionV201EoMetadataObservation);
    coverageDescriptionV201EoMetadataObservationWrapper.geoBlazorId = dotNetObject.id;
    coverageDescriptionV201EoMetadataObservationWrapper.viewId = viewId;
    coverageDescriptionV201EoMetadataObservationWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(coverageDescriptionV201EoMetadataObservationWrapper);
    jsObjectRefs[dotNetObject.id] = coverageDescriptionV201EoMetadataObservationWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsCoverageDescriptionV201EoMetadataObservation;
    
    let dnInstantiatedObject = await buildDotNetCoverageDescriptionV201EoMetadataObservation(jsCoverageDescriptionV201EoMetadataObservation, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CoverageDescriptionV201EoMetadataObservation', e);
    }
    
    return jsCoverageDescriptionV201EoMetadataObservation;
}

export async function buildDotNetCoverageDescriptionV201EoMetadataObservationGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCoverageDescriptionV201EoMetadataObservation: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.footprint)) {
            let { buildDotNetPolygon } = await import('./polygon');
            dotNetCoverageDescriptionV201EoMetadataObservation.footprint = buildDotNetPolygon(jsObject.footprint);
        }
        if (hasValue(jsObject.acquisitionType)) {
            dotNetCoverageDescriptionV201EoMetadataObservation.acquisitionType = jsObject.acquisitionType;
        }
        if (hasValue(jsObject.identifier)) {
            dotNetCoverageDescriptionV201EoMetadataObservation.identifier = jsObject.identifier;
        }
        if (hasValue(jsObject.phenomenonTime)) {
            dotNetCoverageDescriptionV201EoMetadataObservation.phenomenonTime = jsObject.phenomenonTime;
        }
        if (hasValue(jsObject.resultTime)) {
            dotNetCoverageDescriptionV201EoMetadataObservation.resultTime = jsObject.resultTime;
        }
        if (hasValue(jsObject.status)) {
            dotNetCoverageDescriptionV201EoMetadataObservation.status = jsObject.status;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCoverageDescriptionV201EoMetadataObservation.id = k;
                break;
            }
        }
    }

    return dotNetCoverageDescriptionV201EoMetadataObservation;
}

