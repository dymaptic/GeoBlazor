// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetCoverageDescriptionV201EoMetadataObservation } from './coverageDescriptionV201EoMetadataObservation';

export async function buildJsCoverageDescriptionV201EoMetadataObservationGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCoverageDescriptionV201EoMetadataObservation: any = {};
    if (hasValue(dotNetObject.footprint)) {
        let { buildJsPolygon } = await import('./polygon');
        jsCoverageDescriptionV201EoMetadataObservation.footprint = buildJsPolygon(dotNetObject.footprint) as any;
    }

    if (hasValue(dotNetObject.acquisitionType)) {
        jsCoverageDescriptionV201EoMetadataObservation.acquisitionType = dotNetObject.acquisitionType;
    }
    if (hasValue(dotNetObject.identifier)) {
        jsCoverageDescriptionV201EoMetadataObservation.identifier = dotNetObject.identifier;
    }
    if (hasValue(dotNetObject.phenomenonTime)) {
        jsCoverageDescriptionV201EoMetadataObservation.phenomenonTime = dotNetObject.phenomenonTime;
    }
    if (hasValue(dotNetObject.resultTime)) {
        jsCoverageDescriptionV201EoMetadataObservation.resultTime = dotNetObject.resultTime;
    }
    if (hasValue(dotNetObject.status)) {
        jsCoverageDescriptionV201EoMetadataObservation.status = dotNetObject.status;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCoverageDescriptionV201EoMetadataObservation);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCoverageDescriptionV201EoMetadataObservation;
    
    let { buildDotNetCoverageDescriptionV201EoMetadataObservation } = await import('./coverageDescriptionV201EoMetadataObservation');
    let dnInstantiatedObject = await buildDotNetCoverageDescriptionV201EoMetadataObservation(jsCoverageDescriptionV201EoMetadataObservation);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type CoverageDescriptionV201EoMetadataObservation detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CoverageDescriptionV201EoMetadataObservation', e);
    }
    
    return jsCoverageDescriptionV201EoMetadataObservation;
}


export async function buildDotNetCoverageDescriptionV201EoMetadataObservationGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCoverageDescriptionV201EoMetadataObservation: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.footprint)) {
        let { buildDotNetPolygon } = await import('./polygon');
        dotNetCoverageDescriptionV201EoMetadataObservation.footprint = buildDotNetPolygon(jsObject.footprint);
    }
    if (hasValue(jsObject.acquisitionType)) {
        dotNetCoverageDescriptionV201EoMetadataObservation.acquisitionType = jsObject.acquisitionType;
    }
    if (hasValue(jsObject.identifier)) {
        dotNetCoverageDescriptionV201EoMetadataObservation.identifier = jsObject.identifier;
    }
    if (hasValue(jsObject.phenomenonTime)) {
        dotNetCoverageDescriptionV201EoMetadataObservation.phenomenonTime = jsObject.phenomenonTime;
    }
    if (hasValue(jsObject.resultTime)) {
        dotNetCoverageDescriptionV201EoMetadataObservation.resultTime = jsObject.resultTime;
    }
    if (hasValue(jsObject.status)) {
        dotNetCoverageDescriptionV201EoMetadataObservation.status = jsObject.status;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCoverageDescriptionV201EoMetadataObservation.id = k;
                break;
            }
        }
    }

    return dotNetCoverageDescriptionV201EoMetadataObservation;
}

