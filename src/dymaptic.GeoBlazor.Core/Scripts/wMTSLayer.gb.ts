// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import WMTSLayer from '@arcgis/core/layers/WMTSLayer';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class WMTSLayerGenerated implements IPropertyWrapper {
    public layer: WMTSLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: WMTSLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    async createLayerView(view: any,
        options: any): Promise<any> {
        return await this.layer.createLayerView(view,
            options);
    }

    async fetchAttributionData(): Promise<any> {
        return await this.layer.fetchAttributionData();
    }

    async fetchTile(level: any,
        row: any,
        col: any,
        options: any): Promise<any> {
        return await this.layer.fetchTile(level,
            row,
            col,
            options);
    }

    async findSublayerById(id: any): Promise<any> {
        return this.layer.findSublayerById(id);
    }

    async refresh(): Promise<void> {
        this.layer.refresh();
    }

    // region properties
    
    async getActiveLayer(): Promise<any> {
        if (!hasValue(this.layer.activeLayer)) {
            return null;
        }
        
        let { buildDotNetWMTSSublayer } = await import('./wMTSSublayer');
        return await buildDotNetWMTSSublayer(this.layer.activeLayer);
    }
    async setActiveLayer(value: any): Promise<void> {
        let { buildJsWMTSSublayer } = await import('./wMTSSublayer');
        this.layer.activeLayer = await  buildJsWMTSSublayer(value, this.layerId, this.viewId);
    }
    async getFullExtent(): Promise<any> {
        if (!hasValue(this.layer.fullExtent)) {
            return null;
        }
        
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(this.layer.fullExtent);
    }
    async setFullExtent(value: any): Promise<void> {
        let { buildJsExtent } = await import('./extent');
        this.layer.fullExtent =  buildJsExtent(value);
    }
    async getPortalItem(): Promise<any> {
        if (!hasValue(this.layer.portalItem)) {
            return null;
        }
        
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(this.layer.portalItem);
    }
    async setPortalItem(value: any): Promise<void> {
        let { buildJsPortalItem } = await import('./portalItem');
        this.layer.portalItem = await  buildJsPortalItem(value, this.layerId, this.viewId);
    }
    async getSublayers(): Promise<any> {
        if (!hasValue(this.layer.sublayers)) {
            return null;
        }
        
        let { buildDotNetWMTSSublayer } = await import('./wMTSSublayer');
        return await Promise.all(this.layer.sublayers.map(async i => await buildDotNetWMTSSublayer(i)));
    }
    
    async setSublayers(value: any): Promise<void> {
        let { buildJsWMTSSublayer } = await import('./wMTSSublayer');
        this.layer.sublayers = await Promise.all(value.map(async i => await buildJsWMTSSublayer(i, this.layerId, this.viewId))) as any;
    }
    
    async getVisibilityTimeExtent(): Promise<any> {
        if (!hasValue(this.layer.visibilityTimeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.visibilityTimeExtent);
    }
    async setVisibilityTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.visibilityTimeExtent = await  buildJsTimeExtent(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}


export async function buildJsWMTSLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.activeLayer)) {
        let { buildJsWMTSSublayer } = await import('./wMTSSublayer');
        properties.activeLayer = await buildJsWMTSSublayer(dotNetObject.activeLayer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.fullExtent)) {
        let { buildJsExtent } = await import('./extent');
        properties.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;
    }
    if (hasValue(dotNetObject.portalItem)) {
        let { buildJsPortalItem } = await import('./portalItem');
        properties.portalItem = await buildJsPortalItem(dotNetObject.portalItem, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.sublayers)) {
        let { buildJsWMTSSublayer } = await import('./wMTSSublayer');
        properties.sublayers = await Promise.all(dotNetObject.sublayers.map(async i => await buildJsWMTSSublayer(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.visibilityTimeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.arcGISLayerId)) {
        properties.id = dotNetObject.arcGISLayerId;
    }
    if (hasValue(dotNetObject.blendMode)) {
        properties.blendMode = dotNetObject.blendMode;
    }
    if (hasValue(dotNetObject.copyright)) {
        properties.copyright = dotNetObject.copyright;
    }
    if (hasValue(dotNetObject.customLayerParameters)) {
        properties.customLayerParameters = dotNetObject.customLayerParameters;
    }
    if (hasValue(dotNetObject.customParameters)) {
        properties.customParameters = dotNetObject.customParameters;
    }
    if (hasValue(dotNetObject.effect)) {
        properties.effect = dotNetObject.effect;
    }
    if (hasValue(dotNetObject.listMode)) {
        properties.listMode = dotNetObject.listMode;
    }
    if (hasValue(dotNetObject.maxScale)) {
        properties.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.minScale)) {
        properties.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.opacity)) {
        properties.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.persistenceEnabled)) {
        properties.persistenceEnabled = dotNetObject.persistenceEnabled;
    }
    if (hasValue(dotNetObject.refreshInterval)) {
        properties.refreshInterval = dotNetObject.refreshInterval;
    }
    if (hasValue(dotNetObject.serviceMode)) {
        properties.serviceMode = dotNetObject.serviceMode;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.url)) {
        properties.url = dotNetObject.url;
    }
    if (hasValue(dotNetObject.version)) {
        properties.version = dotNetObject.version;
    }
    let jsWMTSLayer = new WMTSLayer(properties);

    let { default: WMTSLayerWrapper } = await import('./wMTSLayer');
    let wMTSLayerWrapper = new WMTSLayerWrapper(jsWMTSLayer);
    wMTSLayerWrapper.geoBlazorId = dotNetObject.id;
    wMTSLayerWrapper.viewId = viewId;
    wMTSLayerWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(wMTSLayerWrapper);
    jsObjectRefs[dotNetObject.id] = wMTSLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsWMTSLayer;
    let { buildDotNetWMTSLayer } = await import('./wMTSLayer');
    let dnInstantiatedObject = await buildDotNetWMTSLayer(jsWMTSLayer);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for WMTSLayer', e);
    }
    
    return jsWMTSLayer;
}

export async function buildDotNetWMTSLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWMTSLayer: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.activeLayer)) {
            let { buildDotNetWMTSSublayer } = await import('./wMTSSublayer');
            dotNetWMTSLayer.activeLayer = await buildDotNetWMTSSublayer(jsObject.activeLayer);
        }
        if (hasValue(jsObject.fullExtent)) {
            let { buildDotNetExtent } = await import('./extent');
            dotNetWMTSLayer.fullExtent = buildDotNetExtent(jsObject.fullExtent);
        }
        if (hasValue(jsObject.portalItem)) {
            let { buildDotNetPortalItem } = await import('./portalItem');
            dotNetWMTSLayer.portalItem = await buildDotNetPortalItem(jsObject.portalItem);
        }
        if (hasValue(jsObject.sublayers)) {
            let { buildDotNetWMTSSublayer } = await import('./wMTSSublayer');
            dotNetWMTSLayer.sublayers = await Promise.all(jsObject.sublayers.map(async i => await buildDotNetWMTSSublayer(i)));
        }
        if (hasValue(jsObject.visibilityTimeExtent)) {
            let { buildDotNetTimeExtent } = await import('./timeExtent');
            dotNetWMTSLayer.visibilityTimeExtent = buildDotNetTimeExtent(jsObject.visibilityTimeExtent);
        }
    if (hasValue(jsObject.id)) {
        dotNetWMTSLayer.arcGISLayerId = jsObject.id;
    }
    if (hasValue(jsObject.blendMode)) {
        dotNetWMTSLayer.blendMode = jsObject.blendMode;
    }
    if (hasValue(jsObject.copyright)) {
        dotNetWMTSLayer.copyright = jsObject.copyright;
    }
    if (hasValue(jsObject.customLayerParameters)) {
        dotNetWMTSLayer.customLayerParameters = jsObject.customLayerParameters;
    }
    if (hasValue(jsObject.customParameters)) {
        dotNetWMTSLayer.customParameters = jsObject.customParameters;
    }
    if (hasValue(jsObject.effect)) {
        dotNetWMTSLayer.effect = jsObject.effect;
    }
    if (hasValue(jsObject.listMode)) {
        dotNetWMTSLayer.listMode = jsObject.listMode;
    }
    if (hasValue(jsObject.loaded)) {
        dotNetWMTSLayer.loaded = jsObject.loaded;
    }
    if (hasValue(jsObject.maxScale)) {
        dotNetWMTSLayer.maxScale = jsObject.maxScale;
    }
    if (hasValue(jsObject.minScale)) {
        dotNetWMTSLayer.minScale = jsObject.minScale;
    }
    if (hasValue(jsObject.opacity)) {
        dotNetWMTSLayer.opacity = jsObject.opacity;
    }
    if (hasValue(jsObject.persistenceEnabled)) {
        dotNetWMTSLayer.persistenceEnabled = jsObject.persistenceEnabled;
    }
    if (hasValue(jsObject.refreshInterval)) {
        dotNetWMTSLayer.refreshInterval = jsObject.refreshInterval;
    }
    if (hasValue(jsObject.serviceMode)) {
        dotNetWMTSLayer.serviceMode = jsObject.serviceMode;
    }
    if (hasValue(jsObject.title)) {
        dotNetWMTSLayer.title = jsObject.title;
    }
    if (hasValue(jsObject.type)) {
        dotNetWMTSLayer.type = jsObject.type;
    }
    if (hasValue(jsObject.url)) {
        dotNetWMTSLayer.url = jsObject.url;
    }
    if (hasValue(jsObject.version)) {
        dotNetWMTSLayer.version = jsObject.version;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetWMTSLayer.id = k;
                break;
            }
        }
    }

    return dotNetWMTSLayer;
}

