// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import WMTSLayer from '@arcgis/core/layers/WMTSLayer';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class WMTSLayerGenerated implements IPropertyWrapper {
    public layer: WMTSLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: WMTSLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }


    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.activeLayer)) {
            let { buildJsWMTSSublayer } = await import('./wMTSSublayer');
            this.layer.activeLayer = await buildJsWMTSSublayer(dotNetObject.activeLayer, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.effect)) {
            let { buildJsEffect } = await import('./effect');
            this.layer.effect = buildJsEffect(dotNetObject.effect) as any;
        }
        if (hasValue(dotNetObject.fullExtent)) {
            let { buildJsExtent } = await import('./extent');
            this.layer.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;
        }
        if (hasValue(dotNetObject.portalItem)) {
            let { buildJsPortalItem } = await import('./portalItem');
            this.layer.portalItem = await buildJsPortalItem(dotNetObject.portalItem, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.sublayers)) {
            let { buildJsWMTSSublayer } = await import('./wMTSSublayer');
            this.layer.sublayers = await Promise.all(dotNetObject.sublayers.map(async i => await buildJsWMTSSublayer(i, this.layerId, this.viewId))) as any;
        }
        if (hasValue(dotNetObject.visibilityTimeExtent)) {
            let { buildJsTimeExtent } = await import('./timeExtent');
            this.layer.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent, this.layerId, this.viewId) as any;
        }

        if (hasValue(dotNetObject.arcGISLayerId)) {
            this.layer.id = dotNetObject.arcGISLayerId;
        }
        if (hasValue(dotNetObject.blendMode)) {
            this.layer.blendMode = dotNetObject.blendMode;
        }
        if (hasValue(dotNetObject.copyright)) {
            this.layer.copyright = dotNetObject.copyright;
        }
        if (hasValue(dotNetObject.customLayerParameters)) {
            this.layer.customLayerParameters = dotNetObject.customLayerParameters;
        }
        if (hasValue(dotNetObject.customParameters)) {
            this.layer.customParameters = dotNetObject.customParameters;
        }
        if (hasValue(dotNetObject.listMode)) {
            this.layer.listMode = dotNetObject.listMode;
        }
        if (hasValue(dotNetObject.maxScale)) {
            this.layer.maxScale = dotNetObject.maxScale;
        }
        if (hasValue(dotNetObject.minScale)) {
            this.layer.minScale = dotNetObject.minScale;
        }
        if (hasValue(dotNetObject.opacity)) {
            this.layer.opacity = dotNetObject.opacity;
        }
        if (hasValue(dotNetObject.persistenceEnabled)) {
            this.layer.persistenceEnabled = dotNetObject.persistenceEnabled;
        }
        if (hasValue(dotNetObject.refreshInterval)) {
            this.layer.refreshInterval = dotNetObject.refreshInterval;
        }
        if (hasValue(dotNetObject.serviceMode)) {
            this.layer.serviceMode = dotNetObject.serviceMode;
        }
        if (hasValue(dotNetObject.title)) {
            this.layer.title = dotNetObject.title;
        }
        if (hasValue(dotNetObject.url)) {
            this.layer.url = dotNetObject.url;
        }
        if (hasValue(dotNetObject.version)) {
            this.layer.version = dotNetObject.version;
        }
        if (hasValue(dotNetObject.visible)) {
            this.layer.visible = dotNetObject.visible;
        }
    }
    
    async createLayerView(view: any,
        options: any): Promise<any> {
        return await this.layer.createLayerView(view,
            options);
    }

    async fetchAttributionData(): Promise<any> {
        return await this.layer.fetchAttributionData();
    }

    async fetchTile(level: any,
        row: any,
        col: any,
        options: any): Promise<any> {
        return await this.layer.fetchTile(level,
            row,
            col,
            options);
    }

    async findSublayerById(id: any): Promise<any> {
        return this.layer.findSublayerById(id);
    }

    async refresh(): Promise<void> {
        this.layer.refresh();
    }

    // region properties
    
    async getActiveLayer(): Promise<any> {
        if (!hasValue(this.layer.activeLayer)) {
            return null;
        }
        
        let { buildDotNetWMTSSublayer } = await import('./wMTSSublayer');
        return await buildDotNetWMTSSublayer(this.layer.activeLayer, this.layerId, this.viewId);
    }
    
    async setActiveLayer(value: any): Promise<void> {
        let { buildJsWMTSSublayer } = await import('./wMTSSublayer');
        this.layer.activeLayer = await  buildJsWMTSSublayer(value, this.layerId, this.viewId);
    }
    
    async getEffect(): Promise<any> {
        if (!hasValue(this.layer.effect)) {
            return null;
        }
        
        let { buildDotNetEffect } = await import('./effect');
        return buildDotNetEffect(this.layer.effect);
    }
    
    async setEffect(value: any): Promise<void> {
        let { buildJsEffect } = await import('./effect');
        this.layer.effect =  buildJsEffect(value);
    }
    
    async getFullExtent(): Promise<any> {
        if (!hasValue(this.layer.fullExtent)) {
            return null;
        }
        
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(this.layer.fullExtent);
    }
    
    async setFullExtent(value: any): Promise<void> {
        let { buildJsExtent } = await import('./extent');
        this.layer.fullExtent =  buildJsExtent(value);
    }
    
    async getPortalItem(): Promise<any> {
        if (!hasValue(this.layer.portalItem)) {
            return null;
        }
        
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(this.layer.portalItem, this.layerId, this.viewId);
    }
    
    async setPortalItem(value: any): Promise<void> {
        let { buildJsPortalItem } = await import('./portalItem');
        this.layer.portalItem = await  buildJsPortalItem(value, this.layerId, this.viewId);
    }
    
    async getSublayers(): Promise<any> {
        if (!hasValue(this.layer.sublayers)) {
            return null;
        }
        
        let { buildDotNetWMTSSublayer } = await import('./wMTSSublayer');
        return await Promise.all(this.layer.sublayers.map(async i => await buildDotNetWMTSSublayer(i, this.layerId, this.viewId)));
    }
    
    async setSublayers(value: any): Promise<void> {
        let { buildJsWMTSSublayer } = await import('./wMTSSublayer');
        this.layer.sublayers = await Promise.all(value.map(async i => await buildJsWMTSSublayer(i, this.layerId, this.viewId))) as any;
    }
    
    async getVisibilityTimeExtent(): Promise<any> {
        if (!hasValue(this.layer.visibilityTimeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.visibilityTimeExtent);
    }
    
    async setVisibilityTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.visibilityTimeExtent = await  buildJsTimeExtent(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}


export async function buildJsWMTSLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.activeLayer)) {
        let { buildJsWMTSSublayer } = await import('./wMTSSublayer');
        properties.activeLayer = await buildJsWMTSSublayer(dotNetObject.activeLayer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.effect)) {
        let { buildJsEffect } = await import('./effect');
        properties.effect = buildJsEffect(dotNetObject.effect) as any;
    }
    if (hasValue(dotNetObject.fullExtent)) {
        let { buildJsExtent } = await import('./extent');
        properties.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;
    }
    if (hasValue(dotNetObject.portalItem)) {
        let { buildJsPortalItem } = await import('./portalItem');
        properties.portalItem = await buildJsPortalItem(dotNetObject.portalItem, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.sublayers)) {
        let { buildJsWMTSSublayer } = await import('./wMTSSublayer');
        properties.sublayers = await Promise.all(dotNetObject.sublayers.map(async i => await buildJsWMTSSublayer(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.visibilityTimeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.arcGISLayerId)) {
        properties.id = dotNetObject.arcGISLayerId;
    }
    if (hasValue(dotNetObject.blendMode)) {
        properties.blendMode = dotNetObject.blendMode;
    }
    if (hasValue(dotNetObject.copyright)) {
        properties.copyright = dotNetObject.copyright;
    }
    if (hasValue(dotNetObject.customLayerParameters)) {
        properties.customLayerParameters = dotNetObject.customLayerParameters;
    }
    if (hasValue(dotNetObject.customParameters)) {
        properties.customParameters = dotNetObject.customParameters;
    }
    if (hasValue(dotNetObject.listMode)) {
        properties.listMode = dotNetObject.listMode;
    }
    if (hasValue(dotNetObject.maxScale)) {
        properties.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.minScale)) {
        properties.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.opacity)) {
        properties.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.persistenceEnabled)) {
        properties.persistenceEnabled = dotNetObject.persistenceEnabled;
    }
    if (hasValue(dotNetObject.refreshInterval)) {
        properties.refreshInterval = dotNetObject.refreshInterval;
    }
    if (hasValue(dotNetObject.serviceMode)) {
        properties.serviceMode = dotNetObject.serviceMode;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.url)) {
        properties.url = dotNetObject.url;
    }
    if (hasValue(dotNetObject.version)) {
        properties.version = dotNetObject.version;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    let jsWMTSLayer = new WMTSLayer(properties);
    jsWMTSLayer.on('layerview-create', async (evt: any) => {
        let { buildDotNetLayerViewCreateEvent } = await import('./layerViewCreateEvent');
        let dnEvent = await buildDotNetLayerViewCreateEvent(evt, layerId, viewId);
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreate', dnEvent);
    });
    
    jsWMTSLayer.on('layerview-create-error', async (evt: any) => {
        let { buildDotNetLayerViewCreateErrorEvent } = await import('./layerViewCreateErrorEvent');
        let dnEvent = await buildDotNetLayerViewCreateErrorEvent(evt, layerId, viewId);
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreateError', dnEvent);
    });
    
    jsWMTSLayer.on('layerview-destroy', async (evt: any) => {
        let { buildDotNetLayerViewDestroyEvent } = await import('./layerViewDestroyEvent');
        let dnEvent = await buildDotNetLayerViewDestroyEvent(evt, layerId, viewId);
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsDestroy', dnEvent);
    });
    

    let { default: WMTSLayerWrapper } = await import('./wMTSLayer');
    let wMTSLayerWrapper = new WMTSLayerWrapper(jsWMTSLayer);
    wMTSLayerWrapper.geoBlazorId = dotNetObject.id;
    wMTSLayerWrapper.viewId = viewId;
    wMTSLayerWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(wMTSLayerWrapper);
    jsObjectRefs[dotNetObject.id] = wMTSLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsWMTSLayer;
    
    let { buildDotNetWMTSLayer } = await import('./wMTSLayer');
    let dnInstantiatedObject = await buildDotNetWMTSLayer(jsWMTSLayer, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type WMTSLayer detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for WMTSLayer', e);
    }
    
    return jsWMTSLayer;
}


export async function buildDotNetWMTSLayerGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsWMTSLayer } = await import('./wMTSLayer');
        jsComponentRef = await buildJsWMTSLayer(jsObject, layerId, viewId);
    }
    
    let dotNetWMTSLayer: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.activeLayer)) {
        let { buildDotNetWMTSSublayer } = await import('./wMTSSublayer');
        dotNetWMTSLayer.activeLayer = await buildDotNetWMTSSublayer(jsObject.activeLayer, layerId, viewId);
    }
    if (hasValue(jsObject.effect)) {
        let { buildDotNetEffect } = await import('./effect');
        dotNetWMTSLayer.effect = buildDotNetEffect(jsObject.effect);
    }
    if (hasValue(jsObject.fullExtent)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetWMTSLayer.fullExtent = buildDotNetExtent(jsObject.fullExtent);
    }
    if (hasValue(jsObject.portalItem)) {
        let { buildDotNetPortalItem } = await import('./portalItem');
        dotNetWMTSLayer.portalItem = await buildDotNetPortalItem(jsObject.portalItem, layerId, viewId);
    }
    if (hasValue(jsObject.sublayers)) {
        let { buildDotNetWMTSSublayer } = await import('./wMTSSublayer');
        dotNetWMTSLayer.sublayers = await Promise.all(jsObject.sublayers.map(async i => await buildDotNetWMTSSublayer(i, layerId, viewId)));
    }
    if (hasValue(jsObject.visibilityTimeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetWMTSLayer.visibilityTimeExtent = buildDotNetTimeExtent(jsObject.visibilityTimeExtent);
    }
    if (hasValue(jsObject.id)) {
        dotNetWMTSLayer.arcGISLayerId = jsObject.id;
    }
    if (hasValue(jsObject.blendMode)) {
        dotNetWMTSLayer.blendMode = jsObject.blendMode;
    }
    if (hasValue(jsObject.copyright)) {
        dotNetWMTSLayer.copyright = jsObject.copyright;
    }
    if (hasValue(jsObject.customLayerParameters)) {
        dotNetWMTSLayer.customLayerParameters = jsObject.customLayerParameters;
    }
    if (hasValue(jsObject.customParameters)) {
        dotNetWMTSLayer.customParameters = jsObject.customParameters;
    }
    if (hasValue(jsObject.listMode)) {
        dotNetWMTSLayer.listMode = jsObject.listMode;
    }
    if (hasValue(jsObject.loaded)) {
        dotNetWMTSLayer.loaded = jsObject.loaded;
    }
    if (hasValue(jsObject.maxScale)) {
        dotNetWMTSLayer.maxScale = jsObject.maxScale;
    }
    if (hasValue(jsObject.minScale)) {
        dotNetWMTSLayer.minScale = jsObject.minScale;
    }
    if (hasValue(jsObject.opacity)) {
        dotNetWMTSLayer.opacity = jsObject.opacity;
    }
    if (hasValue(jsObject.persistenceEnabled)) {
        dotNetWMTSLayer.persistenceEnabled = jsObject.persistenceEnabled;
    }
    if (hasValue(jsObject.refreshInterval)) {
        dotNetWMTSLayer.refreshInterval = jsObject.refreshInterval;
    }
    if (hasValue(jsObject.serviceMode)) {
        dotNetWMTSLayer.serviceMode = jsObject.serviceMode;
    }
    if (hasValue(jsObject.title)) {
        dotNetWMTSLayer.title = jsObject.title;
    }
    if (hasValue(jsObject.type)) {
        dotNetWMTSLayer.type = jsObject.type;
    }
    if (hasValue(jsObject.url)) {
        dotNetWMTSLayer.url = jsObject.url;
    }
    if (hasValue(jsObject.version)) {
        dotNetWMTSLayer.version = jsObject.version;
    }
    if (hasValue(jsObject.visible)) {
        dotNetWMTSLayer.visible = jsObject.visible;
    }


    if (hasValue(geoBlazorId)) {
        dotNetWMTSLayer.id = geoBlazorId;
    }

    return dotNetWMTSLayer;
}

