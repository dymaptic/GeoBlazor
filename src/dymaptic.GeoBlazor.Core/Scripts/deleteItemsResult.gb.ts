// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetDeleteItemsResult } from './deleteItemsResult';
import DeleteItemsResult = __esri.DeleteItemsResult;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsDeleteItemsResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsDeleteItemsResult: any = {}
    if (hasValue(dotNetObject.item)) {
        let { buildJsPortalItem } = await import('./portalItem');
        jsDeleteItemsResult.item = await buildJsPortalItem(dotNetObject.item, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.error)) {
        jsDeleteItemsResult.error = dotNetObject.error;
    }
    if (hasValue(dotNetObject.success)) {
        jsDeleteItemsResult.success = dotNetObject.success;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsDeleteItemsResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsDeleteItemsResult;
    
    let dnInstantiatedObject = await buildDotNetDeleteItemsResult(jsDeleteItemsResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DeleteItemsResult', e);
    }
    
    return jsDeleteItemsResult;
}

export async function buildDotNetDeleteItemsResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDeleteItemsResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.item)) {
            let { buildDotNetPortalItem } = await import('./portalItem');
            dotNetDeleteItemsResult.item = await buildDotNetPortalItem(jsObject.item);
        }
        if (hasValue(jsObject.error)) {
            dotNetDeleteItemsResult.error = jsObject.error;
        }
        if (hasValue(jsObject.success)) {
            dotNetDeleteItemsResult.success = jsObject.success;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetDeleteItemsResult.id = k;
                break;
            }
        }
    }

    return dotNetDeleteItemsResult;
}

