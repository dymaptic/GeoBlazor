// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetDeleteItemsResult } from './deleteItemsResult';

export async function buildJsDeleteItemsResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsDeleteItemsResult: any = {};
    if (hasValue(dotNetObject.item)) {
        let { buildJsPortalItem } = await import('./portalItem');
        jsDeleteItemsResult.item = await buildJsPortalItem(dotNetObject.item, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.error)) {
        jsDeleteItemsResult.error = dotNetObject.error;
    }
    if (hasValue(dotNetObject.success)) {
        jsDeleteItemsResult.success = dotNetObject.success;
    }
    
    jsObjectRefs[dotNetObject.id] = jsDeleteItemsResult;
    arcGisObjectRefs[dotNetObject.id] = jsDeleteItemsResult;
    
    return jsDeleteItemsResult;
}


export async function buildDotNetDeleteItemsResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDeleteItemsResult: any = {};
    
    if (hasValue(jsObject.item)) {
        let { buildDotNetPortalItem } = await import('./portalItem');
        dotNetDeleteItemsResult.item = await buildDotNetPortalItem(jsObject.item, viewId);
    }
    
    if (hasValue(jsObject.error)) {
        dotNetDeleteItemsResult.error = removeCircularReferences(jsObject.error);
    }
    
    if (hasValue(jsObject.success)) {
        dotNetDeleteItemsResult.success = jsObject.success;
    }
    

    return dotNetDeleteItemsResult;
}

