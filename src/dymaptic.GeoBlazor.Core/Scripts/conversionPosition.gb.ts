// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetConversionPosition } from './conversionPosition';
import ConversionPosition = __esri.ConversionPosition;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsConversionPositionGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsConversionPosition: any = {}
    if (hasValue(dotNetObject.location)) {
        let { buildJsPoint } = await import('./point');
        jsConversionPosition.location = buildJsPoint(dotNetObject.location) as any;
    }

    if (hasValue(dotNetObject.coordinate)) {
        jsConversionPosition.coordinate = dotNetObject.coordinate;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsConversionPosition);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsConversionPosition;
    
    let dnInstantiatedObject = await buildDotNetConversionPosition(jsConversionPosition);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ConversionPosition', e);
    }
    
    return jsConversionPosition;
}

export async function buildDotNetConversionPositionGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetConversionPosition: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.location)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetConversionPosition.location = buildDotNetPoint(jsObject.location);
        }
        if (hasValue(jsObject.coordinate)) {
            dotNetConversionPosition.coordinate = jsObject.coordinate;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetConversionPosition.id = k;
                break;
            }
        }
    }

    return dotNetConversionPosition;
}

