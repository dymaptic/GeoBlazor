// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';

export async function buildJsHeatmapRampStopGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsHeatmapRampStop: any = {};
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsHeatmapRampStop.color = buildJsMapColor(dotNetObject.color) as any;
    }

    if (hasValue(dotNetObject.label)) {
        jsHeatmapRampStop.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.ratio)) {
        jsHeatmapRampStop.ratio = dotNetObject.ratio;
    }
    
    jsObjectRefs[dotNetObject.id] = jsHeatmapRampStop;
    arcGisObjectRefs[dotNetObject.id] = jsHeatmapRampStop;
    
    return jsHeatmapRampStop;
}


export async function buildDotNetHeatmapRampStopGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetHeatmapRampStop: any = {};
    
    if (hasValue(jsObject.color)) {
        let { buildDotNetMapColor } = await import('./mapColor');
        dotNetHeatmapRampStop.color = buildDotNetMapColor(jsObject.color);
    }
    
    if (hasValue(jsObject.label)) {
        dotNetHeatmapRampStop.label = jsObject.label;
    }
    
    if (hasValue(jsObject.ratio)) {
        dotNetHeatmapRampStop.ratio = jsObject.ratio;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetHeatmapRampStop.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetHeatmapRampStop.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetHeatmapRampStop.id)) {
        jsObjectRefs[dotNetHeatmapRampStop.id] ??= jsObject;
        arcGisObjectRefs[dotNetHeatmapRampStop.id] ??= jsObject;
    }

    return dotNetHeatmapRampStop;
}

