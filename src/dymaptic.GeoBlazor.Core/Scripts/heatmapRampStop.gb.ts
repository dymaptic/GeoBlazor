// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetHeatmapRampStop } from './heatmapRampStop';

export async function buildJsHeatmapRampStopGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsHeatmapRampStop: any = {};

    if (hasValue(dotNetObject.color)) {
        jsHeatmapRampStop.color = dotNetObject.color;
    }
    if (hasValue(dotNetObject.label)) {
        jsHeatmapRampStop.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.ratio)) {
        jsHeatmapRampStop.ratio = dotNetObject.ratio;
    }
    
    jsObjectRefs[dotNetObject.id] = jsHeatmapRampStop;
    arcGisObjectRefs[dotNetObject.id] = jsHeatmapRampStop;
    
    return jsHeatmapRampStop;
}


export async function buildDotNetHeatmapRampStopGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetHeatmapRampStop: any = {};
    
    if (hasValue(jsObject.color)) {
        dotNetHeatmapRampStop.color = removeCircularReferences(jsObject.color);
    }
    
    if (hasValue(jsObject.label)) {
        dotNetHeatmapRampStop.label = jsObject.label;
    }
    
    if (hasValue(jsObject.ratio)) {
        dotNetHeatmapRampStop.ratio = jsObject.ratio;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetHeatmapRampStop.id = geoBlazorId;
    }

    return dotNetHeatmapRampStop;
}

