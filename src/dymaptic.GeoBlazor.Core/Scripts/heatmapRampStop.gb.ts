// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetHeatmapRampStop } from './heatmapRampStop';

export async function buildJsHeatmapRampStopGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsHeatmapRampStop: any = {}
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsHeatmapRampStop.color = buildJsMapColor(dotNetObject.color) as any;
    }

    if (hasValue(dotNetObject.label)) {
        jsHeatmapRampStop.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.offset)) {
        jsHeatmapRampStop.offset = dotNetObject.offset;
    }
    if (hasValue(dotNetObject.ratio)) {
        jsHeatmapRampStop.ratio = dotNetObject.ratio;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsHeatmapRampStop);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsHeatmapRampStop;
    
    let dnInstantiatedObject = await buildDotNetHeatmapRampStop(jsHeatmapRampStop);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for HeatmapRampStop', e);
    }
    
    return jsHeatmapRampStop;
}

export async function buildDotNetHeatmapRampStopGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetHeatmapRampStop: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.color)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetHeatmapRampStop.color = buildDotNetMapColor(jsObject.color);
        }
        if (hasValue(jsObject.label)) {
            dotNetHeatmapRampStop.label = jsObject.label;
        }
        if (hasValue(jsObject.offset)) {
            dotNetHeatmapRampStop.offset = jsObject.offset;
        }
        if (hasValue(jsObject.ratio)) {
            dotNetHeatmapRampStop.ratio = jsObject.ratio;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetHeatmapRampStop.id = k;
                break;
            }
        }
    }

    return dotNetHeatmapRampStop;
}

