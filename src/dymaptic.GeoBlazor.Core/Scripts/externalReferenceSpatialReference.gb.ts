// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetExternalReferenceSpatialReference } from './externalReferenceSpatialReference';

export async function buildJsExternalReferenceSpatialReferenceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsExternalReferenceSpatialReference: any = {};

    if (hasValue(dotNetObject.latestVcsWkid)) {
        jsExternalReferenceSpatialReference.latestVcsWkid = dotNetObject.latestVcsWkid;
    }
    if (hasValue(dotNetObject.latestWkid)) {
        jsExternalReferenceSpatialReference.latestWkid = dotNetObject.latestWkid;
    }
    if (hasValue(dotNetObject.vcsWkid)) {
        jsExternalReferenceSpatialReference.vcsWkid = dotNetObject.vcsWkid;
    }
    if (hasValue(dotNetObject.wkid)) {
        jsExternalReferenceSpatialReference.wkid = dotNetObject.wkid;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsExternalReferenceSpatialReference);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsExternalReferenceSpatialReference;
    
    return jsExternalReferenceSpatialReference;
}


export async function buildDotNetExternalReferenceSpatialReferenceGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetExternalReferenceSpatialReference: any = {};
    
    if (hasValue(jsObject.latestVcsWkid)) {
        dotNetExternalReferenceSpatialReference.latestVcsWkid = jsObject.latestVcsWkid;
    }
    
    if (hasValue(jsObject.latestWkid)) {
        dotNetExternalReferenceSpatialReference.latestWkid = jsObject.latestWkid;
    }
    
    if (hasValue(jsObject.vcsWkid)) {
        dotNetExternalReferenceSpatialReference.vcsWkid = jsObject.vcsWkid;
    }
    
    if (hasValue(jsObject.wkid)) {
        dotNetExternalReferenceSpatialReference.wkid = jsObject.wkid;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetExternalReferenceSpatialReference.id = geoBlazorId;
    }

    return dotNetExternalReferenceSpatialReference;
}

