// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetExternalReferenceSpatialReference } from './externalReferenceSpatialReference';

export async function buildJsExternalReferenceSpatialReferenceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsExternalReferenceSpatialReference: any = {};

    if (hasValue(dotNetObject.latestVcsWkid)) {
        jsExternalReferenceSpatialReference.latestVcsWkid = dotNetObject.latestVcsWkid;
    }
    if (hasValue(dotNetObject.latestWkid)) {
        jsExternalReferenceSpatialReference.latestWkid = dotNetObject.latestWkid;
    }
    if (hasValue(dotNetObject.vcsWkid)) {
        jsExternalReferenceSpatialReference.vcsWkid = dotNetObject.vcsWkid;
    }
    if (hasValue(dotNetObject.wkid)) {
        jsExternalReferenceSpatialReference.wkid = dotNetObject.wkid;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsExternalReferenceSpatialReference);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsExternalReferenceSpatialReference;
    
    let { buildDotNetExternalReferenceSpatialReference } = await import('./externalReferenceSpatialReference');
    let dnInstantiatedObject = await buildDotNetExternalReferenceSpatialReference(jsExternalReferenceSpatialReference, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type ExternalReferenceSpatialReference detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ExternalReferenceSpatialReference', e);
    }
    
    return jsExternalReferenceSpatialReference;
}


export async function buildDotNetExternalReferenceSpatialReferenceGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsExternalReferenceSpatialReference } = await import('./externalReferenceSpatialReference');
        jsComponentRef = await buildJsExternalReferenceSpatialReference(jsObject, layerId, viewId);
    }
    
    let dotNetExternalReferenceSpatialReference: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.latestVcsWkid)) {
        dotNetExternalReferenceSpatialReference.latestVcsWkid = jsObject.latestVcsWkid;
    }
    if (hasValue(jsObject.latestWkid)) {
        dotNetExternalReferenceSpatialReference.latestWkid = jsObject.latestWkid;
    }
    if (hasValue(jsObject.vcsWkid)) {
        dotNetExternalReferenceSpatialReference.vcsWkid = jsObject.vcsWkid;
    }
    if (hasValue(jsObject.wkid)) {
        dotNetExternalReferenceSpatialReference.wkid = jsObject.wkid;
    }


    if (hasValue(geoBlazorId)) {
        dotNetExternalReferenceSpatialReference.id = geoBlazorId;
    }

    return dotNetExternalReferenceSpatialReference;
}

