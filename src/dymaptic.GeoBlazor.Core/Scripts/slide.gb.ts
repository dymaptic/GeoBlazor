// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import Slide from '@arcgis/core/webscene/Slide';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SlideGenerated implements IPropertyWrapper {
    public component: Slide;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: Slide) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async applyTo(view: any,
        optionsWithDefaults: any): Promise<any> {
        let result = await this.component.applyTo(view,
            optionsWithDefaults);
        let { buildDotNetSlide } = await import('./slide');
        return await buildDotNetSlide(result);
    }

    async updateFrom(view: any,
        options: any): Promise<any> {
        let result = await this.component.updateFrom(view,
            options);
        let { buildDotNetSlide } = await import('./slide');
        return await buildDotNetSlide(result);
    }

    // region properties
    
    async getBasemap(): Promise<any> {
        if (!hasValue(this.component.basemap)) {
            return null;
        }
        
        let { buildDotNetBasemap } = await import('./basemap');
        return await buildDotNetBasemap(this.component.basemap);
    }
    async setBasemap(value: any): Promise<void> {
        let { buildJsBasemap } = await import('./basemap');
        this.component.basemap = await  buildJsBasemap(value, this.layerId, this.viewId);
    }
    async getEnvironment(): Promise<any> {
        if (!hasValue(this.component.environment)) {
            return null;
        }
        
        let { buildDotNetSlideEnvironment } = await import('./slideEnvironment');
        return await buildDotNetSlideEnvironment(this.component.environment);
    }
    async setEnvironment(value: any): Promise<void> {
        let { buildJsSlideEnvironment } = await import('./slideEnvironment');
        this.component.environment = await  buildJsSlideEnvironment(value, this.layerId, this.viewId);
    }
    async getTimeExtent(): Promise<any> {
        if (!hasValue(this.component.timeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.component.timeExtent);
    }
    async setTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.component.timeExtent = await  buildJsTimeExtent(value, this.layerId, this.viewId);
    }
    async getViewpoint(): Promise<any> {
        if (!hasValue(this.component.viewpoint)) {
            return null;
        }
        
        let { buildDotNetViewpoint } = await import('./viewpoint');
        return buildDotNetViewpoint(this.component.viewpoint);
    }
    async setViewpoint(value: any): Promise<void> {
        let { buildJsViewpoint } = await import('./viewpoint');
        this.component.viewpoint =  buildJsViewpoint(value);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsSlideGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSlide = new Slide();
    if (hasValue(dotNetObject.basemap)) {
        let { buildJsBasemap } = await import('./basemap');
        jsSlide.basemap = await buildJsBasemap(dotNetObject.basemap, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.environment)) {
        let { buildJsSlideEnvironment } = await import('./slideEnvironment');
        jsSlide.environment = await buildJsSlideEnvironment(dotNetObject.environment, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        jsSlide.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.viewpoint)) {
        let { buildJsViewpoint } = await import('./viewpoint');
        jsSlide.viewpoint = buildJsViewpoint(dotNetObject.viewpoint) as any;
    }

    if (hasValue(dotNetObject.description)) {
        jsSlide.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.ground)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedGround } = dotNetObject.ground;
        jsSlide.ground = sanitizedGround;
    }
    if (hasValue(dotNetObject.hidden)) {
        jsSlide.hidden = dotNetObject.hidden;
    }
    if (hasValue(dotNetObject.slideId)) {
        jsSlide.id = dotNetObject.slideId;
    }
    if (hasValue(dotNetObject.thumbnail)) {
        jsSlide.thumbnail = dotNetObject.thumbnail;
    }
    if (hasValue(dotNetObject.title)) {
        jsSlide.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.visibleLayers)) {
        jsSlide.visibleLayers = dotNetObject.visibleLayers;
    }

    let { default: SlideWrapper } = await import('./slide');
    let slideWrapper = new SlideWrapper(jsSlide);
    slideWrapper.geoBlazorId = dotNetObject.id;
    slideWrapper.viewId = viewId;
    slideWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(slideWrapper);
    jsObjectRefs[dotNetObject.id] = slideWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsSlide;
    let { buildDotNetSlide } = await import('./slide');
    let dnInstantiatedObject = await buildDotNetSlide(jsSlide);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Slide', e);
    }
    
    return jsSlide;
}
export async function buildDotNetSlideGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSlide: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.basemap)) {
            let { buildDotNetBasemap } = await import('./basemap');
            dotNetSlide.basemap = await buildDotNetBasemap(jsObject.basemap);
        }
        if (hasValue(jsObject.environment)) {
            let { buildDotNetSlideEnvironment } = await import('./slideEnvironment');
            dotNetSlide.environment = await buildDotNetSlideEnvironment(jsObject.environment);
        }
        if (hasValue(jsObject.timeExtent)) {
            let { buildDotNetTimeExtent } = await import('./timeExtent');
            dotNetSlide.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
        }
        if (hasValue(jsObject.viewpoint)) {
            let { buildDotNetViewpoint } = await import('./viewpoint');
            dotNetSlide.viewpoint = buildDotNetViewpoint(jsObject.viewpoint);
        }
        if (hasValue(jsObject.description)) {
            dotNetSlide.description = jsObject.description;
        }
        if (hasValue(jsObject.ground)) {
            dotNetSlide.ground = jsObject.ground;
        }
        if (hasValue(jsObject.hidden)) {
            dotNetSlide.hidden = jsObject.hidden;
        }
        if (hasValue(jsObject.id)) {
            dotNetSlide.slideId = jsObject.id;
        }
        if (hasValue(jsObject.thumbnail)) {
            dotNetSlide.thumbnail = jsObject.thumbnail;
        }
        if (hasValue(jsObject.title)) {
            dotNetSlide.title = jsObject.title;
        }
        if (hasValue(jsObject.visibleLayers)) {
            dotNetSlide.visibleLayers = jsObject.visibleLayers;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSlide.id = k;
                break;
            }
        }
    }

    return dotNetSlide;
}

