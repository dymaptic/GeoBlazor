// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetRelationshipInput } from './relationshipInput';
import RelationshipInput from '@arcgis/core/widgets/FeatureForm/RelationshipInput';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsRelationshipInputGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsRelationshipInput = new RelationshipInput();

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsRelationshipInput);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRelationshipInput;
    
    let dnInstantiatedObject = await buildDotNetRelationshipInput(jsRelationshipInput);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RelationshipInput', e);
    }
    
    return jsRelationshipInput;
}

export async function buildDotNetRelationshipInputGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRelationshipInput: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.group)) {
            let { buildDotNetGroupInput } = await import('./groupInput');
            dotNetRelationshipInput.group = await buildDotNetGroupInput(jsObject.group);
        }
        if (hasValue(jsObject.description)) {
            dotNetRelationshipInput.description = jsObject.description;
        }
        if (hasValue(jsObject.displayCount)) {
            dotNetRelationshipInput.displayCount = jsObject.displayCount;
        }
        if (hasValue(jsObject.displayType)) {
            dotNetRelationshipInput.displayType = jsObject.displayType;
        }
        if (hasValue(jsObject.editable)) {
            dotNetRelationshipInput.editable = jsObject.editable;
        }
        if (hasValue(jsObject.orderByFields)) {
            dotNetRelationshipInput.orderByFields = jsObject.orderByFields;
        }
        if (hasValue(jsObject.type)) {
            dotNetRelationshipInput.type = jsObject.type;
        }
        if (hasValue(jsObject.updating)) {
            dotNetRelationshipInput.updating = jsObject.updating;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRelationshipInput.id = k;
                break;
            }
        }
    }

    return dotNetRelationshipInput;
}

