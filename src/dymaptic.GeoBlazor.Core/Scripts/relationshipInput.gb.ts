// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import RelationshipInput from '@arcgis/core/widgets/FeatureForm/RelationshipInput';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class RelationshipInputGenerated implements IPropertyWrapper {
    public component: RelationshipInput;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: RelationshipInput) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getType(): Promise<any> {
        if (!hasValue(this.component.type)) {
            return null;
        }
        
        let { buildDotNetRelationshipRendererCreator } = await import('./relationshipRendererCreator');
        return await buildDotNetRelationshipRendererCreator(this.component.type);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsRelationshipInputGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsRelationshipInput = new RelationshipInput();


    let { default: RelationshipInputWrapper } = await import('./relationshipInput');
    let relationshipInputWrapper = new RelationshipInputWrapper(jsRelationshipInput);
    relationshipInputWrapper.geoBlazorId = dotNetObject.id;
    relationshipInputWrapper.viewId = viewId;
    relationshipInputWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(relationshipInputWrapper);
    jsObjectRefs[dotNetObject.id] = relationshipInputWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsRelationshipInput;
    let { buildDotNetRelationshipInput } = await import('./relationshipInput');
    let dnInstantiatedObject = await buildDotNetRelationshipInput(jsRelationshipInput);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RelationshipInput', e);
    }
    
    return jsRelationshipInput;
}
export async function buildDotNetRelationshipInputGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRelationshipInput: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetRelationshipInput.group = jsObject.group;
        if (hasValue(jsObject.type)) {
            let { buildDotNetRelationshipRendererCreator } = await import('./relationshipRendererCreator');
            dotNetRelationshipInput.type = await buildDotNetRelationshipRendererCreator(jsObject.type);
        }
        if (hasValue(jsObject.description)) {
            dotNetRelationshipInput.description = jsObject.description;
        }
        if (hasValue(jsObject.displayCount)) {
            dotNetRelationshipInput.displayCount = jsObject.displayCount;
        }
        if (hasValue(jsObject.displayType)) {
            dotNetRelationshipInput.displayType = jsObject.displayType;
        }
        if (hasValue(jsObject.editable)) {
            dotNetRelationshipInput.editable = jsObject.editable;
        }
        if (hasValue(jsObject.orderByFields)) {
            dotNetRelationshipInput.orderByFields = jsObject.orderByFields;
        }
        if (hasValue(jsObject.updating)) {
            dotNetRelationshipInput.updating = jsObject.updating;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRelationshipInput.id = k;
                break;
            }
        }
    }

    return dotNetRelationshipInput;
}

