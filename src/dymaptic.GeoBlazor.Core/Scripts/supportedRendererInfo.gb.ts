// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSupportedRendererInfo } from './supportedRendererInfo';

export async function buildJsSupportedRendererInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSupportedRendererInfo: any = {};
    if (hasValue(dotNetObject.defaultRenderer)) {
        let { buildJsRenderer } = await import('./renderer');
        jsSupportedRendererInfo.defaultRenderer = await buildJsRenderer(dotNetObject.defaultRenderer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.supportedTypes)) {
        jsSupportedRendererInfo.supportedTypes = dotNetObject.supportedTypes;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSupportedRendererInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSupportedRendererInfo;
    
    let dnInstantiatedObject = await buildDotNetSupportedRendererInfo(jsSupportedRendererInfo);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SupportedRendererInfo', e);
    }
    
    return jsSupportedRendererInfo;
}

export async function buildDotNetSupportedRendererInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSupportedRendererInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.defaultRenderer)) {
            let { buildDotNetRenderer } = await import('./renderer');
            dotNetSupportedRendererInfo.defaultRenderer = await buildDotNetRenderer(jsObject.defaultRenderer);
        }
    if (hasValue(jsObject.supportedTypes)) {
        dotNetSupportedRendererInfo.supportedTypes = jsObject.supportedTypes;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSupportedRendererInfo.id = k;
                break;
            }
        }
    }

    return dotNetSupportedRendererInfo;
}

