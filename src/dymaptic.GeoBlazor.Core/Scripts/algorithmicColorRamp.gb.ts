// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import AlgorithmicColorRamp from '@arcgis/core/rest/support/AlgorithmicColorRamp';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class AlgorithmicColorRampGenerated implements IPropertyWrapper {
    public component: AlgorithmicColorRamp;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: AlgorithmicColorRamp) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsAlgorithmicColorRampGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsAlgorithmicColorRamp = new AlgorithmicColorRamp();

    if (hasValue(dotNetObject.algorithm)) {
        jsAlgorithmicColorRamp.algorithm = dotNetObject.algorithm;
    }
    if (hasValue(dotNetObject.fromColor)) {
        jsAlgorithmicColorRamp.fromColor = dotNetObject.fromColor;
    }
    if (hasValue(dotNetObject.toColor)) {
        jsAlgorithmicColorRamp.toColor = dotNetObject.toColor;
    }
    let { default: AlgorithmicColorRampWrapper } = await import('./algorithmicColorRamp');
    let algorithmicColorRampWrapper = new AlgorithmicColorRampWrapper(jsAlgorithmicColorRamp);
    algorithmicColorRampWrapper.geoBlazorId = dotNetObject.id;
    algorithmicColorRampWrapper.viewId = viewId;
    algorithmicColorRampWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(algorithmicColorRampWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = algorithmicColorRampWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsAlgorithmicColorRamp;
    
    return jsAlgorithmicColorRamp;
}

export async function buildDotNetAlgorithmicColorRampGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAlgorithmicColorRamp: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetAlgorithmicColorRamp.algorithm = jsObject.algorithm;
        dotNetAlgorithmicColorRamp.fromColor = jsObject.fromColor;
        dotNetAlgorithmicColorRamp.toColor = jsObject.toColor;
        dotNetAlgorithmicColorRamp.type = jsObject.type;

    return dotNetAlgorithmicColorRamp;
}

