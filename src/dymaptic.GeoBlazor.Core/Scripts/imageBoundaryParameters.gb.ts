// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageBoundaryParameters from '@arcgis/core/rest/support/ImageBoundaryParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetImageBoundaryParameters } from './imageBoundaryParameters';

export async function buildJsImageBoundaryParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.outSpatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        properties.outSpatialReference = buildJsSpatialReference(dotNetObject.outSpatialReference) as any;
    }

    let jsImageBoundaryParameters = new ImageBoundaryParameters(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsImageBoundaryParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageBoundaryParameters;
    
    let dnInstantiatedObject = await buildDotNetImageBoundaryParameters(jsImageBoundaryParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImageBoundaryParameters', e);
    }
    
    return jsImageBoundaryParameters;
}

export async function buildDotNetImageBoundaryParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageBoundaryParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.outSpatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetImageBoundaryParameters.outSpatialReference = buildDotNetSpatialReference(jsObject.outSpatialReference);
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImageBoundaryParameters.id = k;
                break;
            }
        }
    }

    return dotNetImageBoundaryParameters;
}

