// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageBoundaryParameters from '@arcgis/core/rest/support/ImageBoundaryParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, sanitize } from './arcGisJsInterop';
import { buildDotNetImageBoundaryParameters } from './imageBoundaryParameters';

export async function buildJsImageBoundaryParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.outSpatialReference)) {
        properties.outSpatialReference = sanitize(dotNetObject.outSpatialReference);
    }
    let jsImageBoundaryParameters = new ImageBoundaryParameters(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsImageBoundaryParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageBoundaryParameters;
    
    return jsImageBoundaryParameters;
}


export async function buildDotNetImageBoundaryParametersGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsImageBoundaryParameters } = await import('./imageBoundaryParameters');
        jsComponentRef = await buildJsImageBoundaryParameters(jsObject, layerId, viewId);
    }
    
    let dotNetImageBoundaryParameters: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.outSpatialReference)) {
        dotNetImageBoundaryParameters.outSpatialReference = jsObject.outSpatialReference;
    }

    return dotNetImageBoundaryParameters;
}

