import { buildDotNetClassBreaksCreateRendererParams } from './classBreaksCreateRendererParams';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import classBreaksCreateRendererParams = __esri.classBreaksCreateRendererParams;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsClassBreaksCreateRendererParamsGenerated(dotNetObject: any): Promise<any> {
    let jsclassBreaksCreateRendererParams: any = {}
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsclassBreaksCreateRendererParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.classificationMethod)) {
        jsclassBreaksCreateRendererParams.classificationMethod = dotNetObject.classificationMethod;
    }
    if (hasValue(dotNetObject.colorRamp)) {
        jsclassBreaksCreateRendererParams.colorRamp = dotNetObject.colorRamp;
    }
    if (hasValue(dotNetObject.colors)) {
        jsclassBreaksCreateRendererParams.colors = dotNetObject.colors;
    }
    if (hasValue(dotNetObject.definedInterval)) {
        jsclassBreaksCreateRendererParams.definedInterval = dotNetObject.definedInterval;
    }
    if (hasValue(dotNetObject.field)) {
        jsclassBreaksCreateRendererParams.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.numClasses)) {
        jsclassBreaksCreateRendererParams.numClasses = dotNetObject.numClasses;
    }
    if (hasValue(dotNetObject.rasterFunction)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedRasterFunction } = dotNetObject.rasterFunction;
        jsclassBreaksCreateRendererParams.rasterFunction = sanitizedRasterFunction;
    }
    if (hasValue(dotNetObject.renderingRule)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedRenderingRule } = dotNetObject.renderingRule;
        jsclassBreaksCreateRendererParams.renderingRule = sanitizedRenderingRule;
    }
    if (hasValue(dotNetObject.signal)) {
        jsclassBreaksCreateRendererParams.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.variableName)) {
        jsclassBreaksCreateRendererParams.variableName = dotNetObject.variableName;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsclassBreaksCreateRendererParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsclassBreaksCreateRendererParams;
    
    let dnInstantiatedObject = await buildDotNetClassBreaksCreateRendererParams(jsclassBreaksCreateRendererParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ClassBreaksCreateRendererParams', e);
    }
    
    return jsclassBreaksCreateRendererParams;
}
export async function buildDotNetClassBreaksCreateRendererParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetClassBreaksCreateRendererParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.classificationMethod)) {
            dotNetClassBreaksCreateRendererParams.classificationMethod = jsObject.classificationMethod;
        }
        if (hasValue(jsObject.colorRamp)) {
            dotNetClassBreaksCreateRendererParams.colorRamp = jsObject.colorRamp;
        }
        if (hasValue(jsObject.colors)) {
            dotNetClassBreaksCreateRendererParams.colors = jsObject.colors;
        }
        if (hasValue(jsObject.definedInterval)) {
            dotNetClassBreaksCreateRendererParams.definedInterval = jsObject.definedInterval;
        }
        if (hasValue(jsObject.field)) {
            dotNetClassBreaksCreateRendererParams.field = jsObject.field;
        }
        if (hasValue(jsObject.numClasses)) {
            dotNetClassBreaksCreateRendererParams.numClasses = jsObject.numClasses;
        }
        if (hasValue(jsObject.rasterFunction)) {
            dotNetClassBreaksCreateRendererParams.rasterFunction = jsObject.rasterFunction;
        }
        if (hasValue(jsObject.renderingRule)) {
            dotNetClassBreaksCreateRendererParams.renderingRule = jsObject.renderingRule;
        }
        if (hasValue(jsObject.signal)) {
            dotNetClassBreaksCreateRendererParams.signal = jsObject.signal;
        }
        if (hasValue(jsObject.variableName)) {
            dotNetClassBreaksCreateRendererParams.variableName = jsObject.variableName;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetClassBreaksCreateRendererParams.id = k;
                break;
            }
        }
    }

    return dotNetClassBreaksCreateRendererParams;
}

