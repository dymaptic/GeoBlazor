// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import TelemetryDisplay from '@arcgis/core/layers/support/TelemetryDisplay';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetTelemetryDisplay } from './telemetryDisplay';

export async function buildJsTelemetryDisplayGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.frameCenter)) {
        properties.frameCenter = dotNetObject.frameCenter;
    }
    if (hasValue(dotNetObject.frameOutline)) {
        properties.frameOutline = dotNetObject.frameOutline;
    }
    if (hasValue(dotNetObject.lineOfSight)) {
        properties.lineOfSight = dotNetObject.lineOfSight;
    }
    if (hasValue(dotNetObject.sensorLocation)) {
        properties.sensorLocation = dotNetObject.sensorLocation;
    }
    if (hasValue(dotNetObject.sensorTrail)) {
        properties.sensorTrail = dotNetObject.sensorTrail;
    }
    let jsTelemetryDisplay = new TelemetryDisplay(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsTelemetryDisplay);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTelemetryDisplay;
    
    let { buildDotNetTelemetryDisplay } = await import('./telemetryDisplay');
    let dnInstantiatedObject = await buildDotNetTelemetryDisplay(jsTelemetryDisplay, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type TelemetryDisplay detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TelemetryDisplay', e);
    }
    
    return jsTelemetryDisplay;
}


export async function buildDotNetTelemetryDisplayGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTelemetryDisplay: any = {};
    
    if (hasValue(jsObject.frameCenter)) {
        dotNetTelemetryDisplay.frameCenter = jsObject.frameCenter;
    }
    
    if (hasValue(jsObject.frameOutline)) {
        dotNetTelemetryDisplay.frameOutline = jsObject.frameOutline;
    }
    
    if (hasValue(jsObject.lineOfSight)) {
        dotNetTelemetryDisplay.lineOfSight = jsObject.lineOfSight;
    }
    
    if (hasValue(jsObject.sensorLocation)) {
        dotNetTelemetryDisplay.sensorLocation = jsObject.sensorLocation;
    }
    
    if (hasValue(jsObject.sensorTrail)) {
        dotNetTelemetryDisplay.sensorTrail = jsObject.sensorTrail;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetTelemetryDisplay.id = geoBlazorId;
    }

    return dotNetTelemetryDisplay;
}

