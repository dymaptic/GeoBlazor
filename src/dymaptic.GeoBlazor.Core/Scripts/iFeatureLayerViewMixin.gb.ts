// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import FeatureLayerViewMixin from '@arcgis/core/views/layers/FeatureLayerViewMixin';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class IFeatureLayerViewMixinGenerated implements IPropertyWrapper {
    public component: FeatureLayerViewMixin;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: FeatureLayerViewMixin) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async createAggregateQuery(): Promise<any> {
        return this.component.createAggregateQuery();
    }

    async createQuery(): Promise<any> {
        return this.component.createQuery();
    }

    async queryAggregates(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.component.queryAggregates(jsQuery,
            options);
    }

    async queryExtent(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.component.queryExtent(jsQuery,
            options);
    }

    async queryFeatureCount(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.component.queryFeatureCount(jsQuery,
            options);
    }

    async queryFeatures(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.component.queryFeatures(jsQuery,
            options);
    }

    async queryObjectIds(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.component.queryObjectIds(jsQuery,
            options);
    }

    // region properties
    
    async getFilter(): Promise<any> {
        if (!hasValue(this.component.filter)) {
            return null;
        }
        
        let { buildDotNetFeatureFilter } = await import('./featureFilter');
        return await buildDotNetFeatureFilter(this.component.filter);
    }
    async setFilter(value: any): Promise<void> {
        let { buildJsFeatureFilter } = await import('./featureFilter');
        this.component.filter = await  buildJsFeatureFilter(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsIFeatureLayerViewMixinGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureLayerViewMixin = new FeatureLayerViewMixin();
    if (hasValue(dotNetObject.filter)) {
        let { buildJsFeatureFilter } = await import('./featureFilter');
        jsFeatureLayerViewMixin.filter = await buildJsFeatureFilter(dotNetObject.filter, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.featureEffect)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedFeatureEffect } = dotNetObject.featureEffect;
        jsFeatureLayerViewMixin.featureEffect = sanitizedFeatureEffect;
    }
    if (hasValue(dotNetObject.maximumNumberOfFeatures)) {
        jsFeatureLayerViewMixin.maximumNumberOfFeatures = dotNetObject.maximumNumberOfFeatures;
    }
    if (hasValue(dotNetObject.maximumNumberOfFeaturesExceeded)) {
        jsFeatureLayerViewMixin.maximumNumberOfFeaturesExceeded = dotNetObject.maximumNumberOfFeaturesExceeded;
    }

    let { default: IFeatureLayerViewMixinWrapper } = await import('./iFeatureLayerViewMixin');
    let iFeatureLayerViewMixinWrapper = new IFeatureLayerViewMixinWrapper(jsFeatureLayerViewMixin);
    iFeatureLayerViewMixinWrapper.geoBlazorId = dotNetObject.id;
    iFeatureLayerViewMixinWrapper.viewId = viewId;
    iFeatureLayerViewMixinWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(iFeatureLayerViewMixinWrapper);
    jsObjectRefs[dotNetObject.id] = iFeatureLayerViewMixinWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureLayerViewMixin;
    let { buildDotNetIFeatureLayerViewMixin } = await import('./iFeatureLayerViewMixin');
    let dnInstantiatedObject = await buildDotNetIFeatureLayerViewMixin(jsFeatureLayerViewMixin);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for IFeatureLayerViewMixin', e);
    }
    
    return jsFeatureLayerViewMixin;
}

export async function buildDotNetIFeatureLayerViewMixinGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIFeatureLayerViewMixin: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.filter)) {
            let { buildDotNetFeatureFilter } = await import('./featureFilter');
            dotNetIFeatureLayerViewMixin.filter = await buildDotNetFeatureFilter(jsObject.filter);
        }
        if (hasValue(jsObject.availableFields)) {
            dotNetIFeatureLayerViewMixin.availableFields = jsObject.availableFields;
        }
        if (hasValue(jsObject.dataUpdating)) {
            dotNetIFeatureLayerViewMixin.dataUpdating = jsObject.dataUpdating;
        }
        if (hasValue(jsObject.featureEffect)) {
            dotNetIFeatureLayerViewMixin.featureEffect = jsObject.featureEffect;
        }
        if (hasValue(jsObject.hasAllFeatures)) {
            dotNetIFeatureLayerViewMixin.hasAllFeatures = jsObject.hasAllFeatures;
        }
        if (hasValue(jsObject.hasAllFeaturesInView)) {
            dotNetIFeatureLayerViewMixin.hasAllFeaturesInView = jsObject.hasAllFeaturesInView;
        }
        if (hasValue(jsObject.hasFullGeometries)) {
            dotNetIFeatureLayerViewMixin.hasFullGeometries = jsObject.hasFullGeometries;
        }
        if (hasValue(jsObject.maximumNumberOfFeatures)) {
            dotNetIFeatureLayerViewMixin.maximumNumberOfFeatures = jsObject.maximumNumberOfFeatures;
        }
        if (hasValue(jsObject.maximumNumberOfFeaturesExceeded)) {
            dotNetIFeatureLayerViewMixin.maximumNumberOfFeaturesExceeded = jsObject.maximumNumberOfFeaturesExceeded;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetIFeatureLayerViewMixin.id = k;
                break;
            }
        }
    }

    return dotNetIFeatureLayerViewMixin;
}

