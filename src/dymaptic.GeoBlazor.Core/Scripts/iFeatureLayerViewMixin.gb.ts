// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import FeatureLayerViewMixin from '@arcgis/core/views/layers/FeatureLayerViewMixin';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetIFeatureLayerViewMixin } from './iFeatureLayerViewMixin';

export async function buildJsIFeatureLayerViewMixinGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.featureEffect)) {
        let { buildJsFeatureEffect } = await import('./featureEffect');
        properties.featureEffect = await buildJsFeatureEffect(dotNetObject.featureEffect, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.filter)) {
        let { buildJsFeatureFilter } = await import('./featureFilter');
        properties.filter = await buildJsFeatureFilter(dotNetObject.filter, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.maximumNumberOfFeatures)) {
        properties.maximumNumberOfFeatures = dotNetObject.maximumNumberOfFeatures;
    }
    if (hasValue(dotNetObject.maximumNumberOfFeaturesExceeded)) {
        properties.maximumNumberOfFeaturesExceeded = dotNetObject.maximumNumberOfFeaturesExceeded;
    }
    let jsFeatureLayerViewMixin = new FeatureLayerViewMixin(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureLayerViewMixin);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureLayerViewMixin;
    
    let dnInstantiatedObject = await buildDotNetIFeatureLayerViewMixin(jsFeatureLayerViewMixin);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for IFeatureLayerViewMixin', e);
    }
    
    return jsFeatureLayerViewMixin;
}

export async function buildDotNetIFeatureLayerViewMixinGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIFeatureLayerViewMixin: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.featureEffect)) {
            let { buildDotNetFeatureEffect } = await import('./featureEffect');
            dotNetIFeatureLayerViewMixin.featureEffect = await buildDotNetFeatureEffect(jsObject.featureEffect);
        }
        if (hasValue(jsObject.filter)) {
            let { buildDotNetFeatureFilter } = await import('./featureFilter');
            dotNetIFeatureLayerViewMixin.filter = await buildDotNetFeatureFilter(jsObject.filter);
        }
    if (hasValue(jsObject.availableFields)) {
        dotNetIFeatureLayerViewMixin.availableFields = jsObject.availableFields;
    }
    if (hasValue(jsObject.dataUpdating)) {
        dotNetIFeatureLayerViewMixin.dataUpdating = jsObject.dataUpdating;
    }
    if (hasValue(jsObject.hasAllFeatures)) {
        dotNetIFeatureLayerViewMixin.hasAllFeatures = jsObject.hasAllFeatures;
    }
    if (hasValue(jsObject.hasAllFeaturesInView)) {
        dotNetIFeatureLayerViewMixin.hasAllFeaturesInView = jsObject.hasAllFeaturesInView;
    }
    if (hasValue(jsObject.hasFullGeometries)) {
        dotNetIFeatureLayerViewMixin.hasFullGeometries = jsObject.hasFullGeometries;
    }
    if (hasValue(jsObject.maximumNumberOfFeatures)) {
        dotNetIFeatureLayerViewMixin.maximumNumberOfFeatures = jsObject.maximumNumberOfFeatures;
    }
    if (hasValue(jsObject.maximumNumberOfFeaturesExceeded)) {
        dotNetIFeatureLayerViewMixin.maximumNumberOfFeaturesExceeded = jsObject.maximumNumberOfFeaturesExceeded;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetIFeatureLayerViewMixin.id = k;
                break;
            }
        }
    }

    return dotNetIFeatureLayerViewMixin;
}

