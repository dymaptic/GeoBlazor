// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetWFSOperations } from './wFSOperations';

export async function buildJsWFSOperationsGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsWFSOperations: any = {};
    if (hasValue(dotNetObject.describeFeatureType)) {
        let { buildJsWFSOperationsDescribeFeatureType } = await import('./wFSOperationsDescribeFeatureType');
        jsWFSOperations.DescribeFeatureType = await buildJsWFSOperationsDescribeFeatureType(dotNetObject.describeFeatureType) as any;
    }
    if (hasValue(dotNetObject.getCapabilities)) {
        let { buildJsWFSOperationsGetCapabilities } = await import('./wFSOperationsGetCapabilities');
        jsWFSOperations.GetCapabilities = await buildJsWFSOperationsGetCapabilities(dotNetObject.getCapabilities) as any;
    }
    if (hasValue(dotNetObject.getFeature)) {
        let { buildJsWFSOperationsGetFeature } = await import('./wFSOperationsGetFeature');
        jsWFSOperations.GetFeature = await buildJsWFSOperationsGetFeature(dotNetObject.getFeature) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsWFSOperations);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsWFSOperations;
    
    return jsWFSOperations;
}


export async function buildDotNetWFSOperationsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWFSOperations: any = {};
    
    if (hasValue(jsObject.DescribeFeatureType)) {
        let { buildDotNetWFSOperationsDescribeFeatureType } = await import('./wFSOperationsDescribeFeatureType');
        dotNetWFSOperations.describeFeatureType = await buildDotNetWFSOperationsDescribeFeatureType(jsObject.DescribeFeatureType);
    }
    
    if (hasValue(jsObject.GetCapabilities)) {
        let { buildDotNetWFSOperationsGetCapabilities } = await import('./wFSOperationsGetCapabilities');
        dotNetWFSOperations.getCapabilities = await buildDotNetWFSOperationsGetCapabilities(jsObject.GetCapabilities);
    }
    
    if (hasValue(jsObject.GetFeature)) {
        let { buildDotNetWFSOperationsGetFeature } = await import('./wFSOperationsGetFeature');
        dotNetWFSOperations.getFeature = await buildDotNetWFSOperationsGetFeature(jsObject.GetFeature);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetWFSOperations.id = geoBlazorId;
    }

    return dotNetWFSOperations;
}

