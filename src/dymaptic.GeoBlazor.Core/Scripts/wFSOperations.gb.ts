// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetWFSOperations } from './wFSOperations';

export async function buildJsWFSOperationsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsWFSOperations: any = {};
    if (hasValue(dotNetObject.describeFeatureType)) {
        let { buildJsWFSOperationsDescribeFeatureType } = await import('./wFSOperationsDescribeFeatureType');
        jsWFSOperations.DescribeFeatureType = await buildJsWFSOperationsDescribeFeatureType(dotNetObject.describeFeatureType, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.getCapabilities)) {
        let { buildJsWFSOperationsGetCapabilities } = await import('./wFSOperationsGetCapabilities');
        jsWFSOperations.GetCapabilities = await buildJsWFSOperationsGetCapabilities(dotNetObject.getCapabilities, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.getFeature)) {
        let { buildJsWFSOperationsGetFeature } = await import('./wFSOperationsGetFeature');
        jsWFSOperations.GetFeature = await buildJsWFSOperationsGetFeature(dotNetObject.getFeature, layerId, viewId) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsWFSOperations);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsWFSOperations;
    
    let { buildDotNetWFSOperations } = await import('./wFSOperations');
    let dnInstantiatedObject = await buildDotNetWFSOperations(jsWFSOperations);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type WFSOperations detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for WFSOperations', e);
    }
    
    return jsWFSOperations;
}


export async function buildDotNetWFSOperationsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWFSOperations: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.DescribeFeatureType)) {
        let { buildDotNetWFSOperationsDescribeFeatureType } = await import('./wFSOperationsDescribeFeatureType');
        dotNetWFSOperations.describeFeatureType = await buildDotNetWFSOperationsDescribeFeatureType(jsObject.DescribeFeatureType);
    }
    if (hasValue(jsObject.GetCapabilities)) {
        let { buildDotNetWFSOperationsGetCapabilities } = await import('./wFSOperationsGetCapabilities');
        dotNetWFSOperations.getCapabilities = await buildDotNetWFSOperationsGetCapabilities(jsObject.GetCapabilities);
    }
    if (hasValue(jsObject.GetFeature)) {
        let { buildDotNetWFSOperationsGetFeature } = await import('./wFSOperationsGetFeature');
        dotNetWFSOperations.getFeature = await buildDotNetWFSOperationsGetFeature(jsObject.GetFeature);
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetWFSOperations.id = geoBlazorId;
    }

    return dotNetWFSOperations;
}

