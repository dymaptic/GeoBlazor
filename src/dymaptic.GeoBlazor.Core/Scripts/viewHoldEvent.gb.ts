// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetViewHoldEvent } from './viewHoldEvent';
import ViewHoldEvent = __esri.ViewHoldEvent;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsViewHoldEventGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsViewHoldEvent: any = {}
    if (hasValue(dotNetObject.mapPoint)) {
        let { buildJsPoint } = await import('./point');
        jsViewHoldEvent.mapPoint = buildJsPoint(dotNetObject.mapPoint) as any;
    }

    if (hasValue(dotNetObject.button)) {
        jsViewHoldEvent.button = dotNetObject.button;
    }
    if (hasValue(dotNetObject.buttons)) {
        jsViewHoldEvent.buttons = dotNetObject.buttons;
    }
    if (hasValue(dotNetObject.native)) {
        jsViewHoldEvent.native = dotNetObject.native;
    }
    if (hasValue(dotNetObject.stopPropagation)) {
        jsViewHoldEvent.stopPropagation = dotNetObject.stopPropagation;
    }
    if (hasValue(dotNetObject.timestamp)) {
        jsViewHoldEvent.timestamp = dotNetObject.timestamp;
    }
    if (hasValue(dotNetObject.x)) {
        jsViewHoldEvent.x = dotNetObject.x;
    }
    if (hasValue(dotNetObject.y)) {
        jsViewHoldEvent.y = dotNetObject.y;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsViewHoldEvent);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsViewHoldEvent;
    
    let dnInstantiatedObject = await buildDotNetViewHoldEvent(jsViewHoldEvent);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ViewHoldEvent', e);
    }
    
    return jsViewHoldEvent;
}

export async function buildDotNetViewHoldEventGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetViewHoldEvent: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.mapPoint)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetViewHoldEvent.mapPoint = buildDotNetPoint(jsObject.mapPoint);
        }
        if (hasValue(jsObject.button)) {
            dotNetViewHoldEvent.button = jsObject.button;
        }
        if (hasValue(jsObject.buttons)) {
            dotNetViewHoldEvent.buttons = jsObject.buttons;
        }
        if (hasValue(jsObject.native)) {
            dotNetViewHoldEvent.native = jsObject.native;
        }
        if (hasValue(jsObject.stopPropagation)) {
            dotNetViewHoldEvent.stopPropagation = jsObject.stopPropagation;
        }
        if (hasValue(jsObject.timestamp)) {
            dotNetViewHoldEvent.timestamp = jsObject.timestamp;
        }
        if (hasValue(jsObject.type)) {
            dotNetViewHoldEvent.type = jsObject.type;
        }
        if (hasValue(jsObject.x)) {
            dotNetViewHoldEvent.x = jsObject.x;
        }
        if (hasValue(jsObject.y)) {
            dotNetViewHoldEvent.y = jsObject.y;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetViewHoldEvent.id = k;
                break;
            }
        }
    }

    return dotNetViewHoldEvent;
}

