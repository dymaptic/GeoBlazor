// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import WebMap from '@arcgis/core/WebMap';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class WebMapGenerated implements IPropertyWrapper {
    public component: WebMap;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: WebMap) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.applicationProperties)) {
            let { buildJsApplicationProperties } = await import('./applicationProperties');
            this.component.applicationProperties = await buildJsApplicationProperties(dotNetObject.applicationProperties, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.bookmarks) && dotNetObject.bookmarks.length > 0) {
            let { buildJsBookmark } = await import('./bookmark');
            this.component.bookmarks = await Promise.all(dotNetObject.bookmarks.map(async i => await buildJsBookmark(i))) as any;
        }
        if (hasValue(dotNetObject.floorInfo)) {
            let { buildJsMapFloorInfo } = await import('./mapFloorInfo');
            this.component.floorInfo = await buildJsMapFloorInfo(dotNetObject.floorInfo, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.geotriggersInfo)) {
            let { buildJsGeotriggersInfo } = await import('./geotriggersInfo');
            this.component.geotriggersInfo = await buildJsGeotriggersInfo(dotNetObject.geotriggersInfo, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.initialViewProperties)) {
            let { buildJsInitialViewProperties } = await import('./initialViewProperties');
            this.component.initialViewProperties = await buildJsInitialViewProperties(dotNetObject.initialViewProperties, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.portalItem)) {
            let { buildJsPortalItem } = await import('./portalItem');
            this.component.portalItem = await buildJsPortalItem(dotNetObject.portalItem, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.widgets)) {
            let { buildJsWebMapWidgets } = await import('./webMapWidgets');
            this.component.widgets = await buildJsWebMapWidgets(dotNetObject.widgets, this.layerId, this.viewId) as any;
        }

        if (hasValue(dotNetObject.authoringApp)) {
            this.component.authoringApp = dotNetObject.authoringApp;
        }
        if (hasValue(dotNetObject.authoringAppVersion)) {
            this.component.authoringAppVersion = dotNetObject.authoringAppVersion;
        }
        if (hasValue(dotNetObject.presentation)) {
            this.component.presentation = dotNetObject.presentation;
        }
        if (hasValue(dotNetObject.thumbnailUrl)) {
            this.component.thumbnailUrl = dotNetObject.thumbnailUrl;
        }
        if (hasValue(dotNetObject.utilityNetworks) && dotNetObject.utilityNetworks.length > 0) {
            this.component.utilityNetworks = dotNetObject.utilityNetworks;
        }
    }
    
    async load(): Promise<any> {
        return await this.component.load();
    }

    async loadAll(): Promise<any> {
        let result = await this.component.loadAll();
        let { buildDotNetWebMap } = await import('./webMap');
        return await buildDotNetWebMap(result, this.layerId, this.viewId);
    }

    async save(options: any): Promise<any> {
        let result = await this.component.save(options);
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(result);
    }

    async saveAs(portalItem: any,
        options: any): Promise<any> {
        let { buildJsPortalItem } = await import('./portalItem');
        let jsPortalItem = await buildJsPortalItem(portalItem, this.layerId, this.viewId) as any;
        let { buildJsWebMapSaveAsOptions } = await import('./webMapSaveAsOptions');
        let jsOptions = await buildJsWebMapSaveAsOptions(options, this.layerId, this.viewId) as any;
        let result = await this.component.saveAs(jsPortalItem,
            jsOptions);
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(result);
    }

    async updateFrom(view: any,
        options: any): Promise<any> {
        return await this.component.updateFrom(view,
            options);
    }

    // region properties
    
    async getApplicationProperties(): Promise<any> {
        if (!hasValue(this.component.applicationProperties)) {
            return null;
        }
        
        let { buildDotNetApplicationProperties } = await import('./applicationProperties');
        return await buildDotNetApplicationProperties(this.component.applicationProperties);
    }
    
    async setApplicationProperties(value: any): Promise<void> {
        let { buildJsApplicationProperties } = await import('./applicationProperties');
        this.component.applicationProperties = await  buildJsApplicationProperties(value, this.layerId, this.viewId);
    }
    
    async getBookmarks(): Promise<any> {
        if (!hasValue(this.component.bookmarks)) {
            return null;
        }
        
        let { buildDotNetBookmark } = await import('./bookmark');
        return await Promise.all(this.component.bookmarks.map(async i => await buildDotNetBookmark(i)));
    }
    
    async setBookmarks(value: any): Promise<void> {
        let { buildJsBookmark } = await import('./bookmark');
        this.component.bookmarks = await Promise.all(value.map(async i => await buildJsBookmark(i))) as any;
    }
    
    async getFloorInfo(): Promise<any> {
        if (!hasValue(this.component.floorInfo)) {
            return null;
        }
        
        let { buildDotNetMapFloorInfo } = await import('./mapFloorInfo');
        return await buildDotNetMapFloorInfo(this.component.floorInfo);
    }
    
    async setFloorInfo(value: any): Promise<void> {
        let { buildJsMapFloorInfo } = await import('./mapFloorInfo');
        this.component.floorInfo = await  buildJsMapFloorInfo(value, this.layerId, this.viewId);
    }
    
    async getGeotriggersInfo(): Promise<any> {
        if (!hasValue(this.component.geotriggersInfo)) {
            return null;
        }
        
        let { buildDotNetGeotriggersInfo } = await import('./geotriggersInfo');
        return await buildDotNetGeotriggersInfo(this.component.geotriggersInfo);
    }
    
    async setGeotriggersInfo(value: any): Promise<void> {
        let { buildJsGeotriggersInfo } = await import('./geotriggersInfo');
        this.component.geotriggersInfo = await  buildJsGeotriggersInfo(value, this.layerId, this.viewId);
    }
    
    async getInitialViewProperties(): Promise<any> {
        if (!hasValue(this.component.initialViewProperties)) {
            return null;
        }
        
        let { buildDotNetInitialViewProperties } = await import('./initialViewProperties');
        return await buildDotNetInitialViewProperties(this.component.initialViewProperties);
    }
    
    async setInitialViewProperties(value: any): Promise<void> {
        let { buildJsInitialViewProperties } = await import('./initialViewProperties');
        this.component.initialViewProperties = await  buildJsInitialViewProperties(value, this.layerId, this.viewId);
    }
    
    async getPortalItem(): Promise<any> {
        if (!hasValue(this.component.portalItem)) {
            return null;
        }
        
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(this.component.portalItem);
    }
    
    async setPortalItem(value: any): Promise<void> {
        let { buildJsPortalItem } = await import('./portalItem');
        this.component.portalItem = await  buildJsPortalItem(value, this.layerId, this.viewId);
    }
    
    async getWidgets(): Promise<any> {
        if (!hasValue(this.component.widgets)) {
            return null;
        }
        
        let { buildDotNetWebMapWidgets } = await import('./webMapWidgets');
        return await buildDotNetWebMapWidgets(this.component.widgets);
    }
    
    async setWidgets(value: any): Promise<void> {
        let { buildJsWebMapWidgets } = await import('./webMapWidgets');
        this.component.widgets = await  buildJsWebMapWidgets(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsWebMapGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.applicationProperties)) {
        let { buildJsApplicationProperties } = await import('./applicationProperties');
        properties.applicationProperties = await buildJsApplicationProperties(dotNetObject.applicationProperties, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.bookmarks) && dotNetObject.bookmarks.length > 0) {
        let { buildJsBookmark } = await import('./bookmark');
        properties.bookmarks = await Promise.all(dotNetObject.bookmarks.map(async i => await buildJsBookmark(i))) as any;
    }
    if (hasValue(dotNetObject.floorInfo)) {
        let { buildJsMapFloorInfo } = await import('./mapFloorInfo');
        properties.floorInfo = await buildJsMapFloorInfo(dotNetObject.floorInfo, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.geotriggersInfo)) {
        let { buildJsGeotriggersInfo } = await import('./geotriggersInfo');
        properties.geotriggersInfo = await buildJsGeotriggersInfo(dotNetObject.geotriggersInfo, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.initialViewProperties)) {
        let { buildJsInitialViewProperties } = await import('./initialViewProperties');
        properties.initialViewProperties = await buildJsInitialViewProperties(dotNetObject.initialViewProperties, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.portalItem)) {
        let { buildJsPortalItem } = await import('./portalItem');
        properties.portalItem = await buildJsPortalItem(dotNetObject.portalItem, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.widgets)) {
        let { buildJsWebMapWidgets } = await import('./webMapWidgets');
        properties.widgets = await buildJsWebMapWidgets(dotNetObject.widgets, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.authoringApp)) {
        properties.authoringApp = dotNetObject.authoringApp;
    }
    if (hasValue(dotNetObject.authoringAppVersion)) {
        properties.authoringAppVersion = dotNetObject.authoringAppVersion;
    }
    if (hasValue(dotNetObject.presentation)) {
        properties.presentation = dotNetObject.presentation;
    }
    if (hasValue(dotNetObject.thumbnailUrl)) {
        properties.thumbnailUrl = dotNetObject.thumbnailUrl;
    }
    if (hasValue(dotNetObject.utilityNetworks) && dotNetObject.utilityNetworks.length > 0) {
        properties.utilityNetworks = dotNetObject.utilityNetworks;
    }
    let jsWebMap = new WebMap(properties);

    let { default: WebMapWrapper } = await import('./webMap');
    let webMapWrapper = new WebMapWrapper(jsWebMap);
    webMapWrapper.geoBlazorId = dotNetObject.id;
    webMapWrapper.viewId = viewId;
    webMapWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = webMapWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsWebMap;
    
    return jsWebMap;
}


export async function buildDotNetWebMapGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWebMap: any = {};
    
    if (hasValue(jsObject.applicationProperties)) {
        let { buildDotNetApplicationProperties } = await import('./applicationProperties');
        dotNetWebMap.applicationProperties = await buildDotNetApplicationProperties(jsObject.applicationProperties);
    }
    
    if (hasValue(jsObject.bookmarks)) {
        let { buildDotNetBookmark } = await import('./bookmark');
        dotNetWebMap.bookmarks = await Promise.all(jsObject.bookmarks.map(async i => await buildDotNetBookmark(i)));
    }
    
    if (hasValue(jsObject.floorInfo)) {
        let { buildDotNetMapFloorInfo } = await import('./mapFloorInfo');
        dotNetWebMap.floorInfo = await buildDotNetMapFloorInfo(jsObject.floorInfo);
    }
    
    if (hasValue(jsObject.geotriggersInfo)) {
        let { buildDotNetGeotriggersInfo } = await import('./geotriggersInfo');
        dotNetWebMap.geotriggersInfo = await buildDotNetGeotriggersInfo(jsObject.geotriggersInfo);
    }
    
    if (hasValue(jsObject.initialViewProperties)) {
        let { buildDotNetInitialViewProperties } = await import('./initialViewProperties');
        dotNetWebMap.initialViewProperties = await buildDotNetInitialViewProperties(jsObject.initialViewProperties);
    }
    
    if (hasValue(jsObject.portalItem)) {
        let { buildDotNetPortalItem } = await import('./portalItem');
        dotNetWebMap.portalItem = await buildDotNetPortalItem(jsObject.portalItem);
    }
    
    if (hasValue(jsObject.widgets)) {
        let { buildDotNetWebMapWidgets } = await import('./webMapWidgets');
        dotNetWebMap.widgets = await buildDotNetWebMapWidgets(jsObject.widgets);
    }
    
    if (hasValue(jsObject.authoringApp)) {
        dotNetWebMap.authoringApp = jsObject.authoringApp;
    }
    
    if (hasValue(jsObject.authoringAppVersion)) {
        dotNetWebMap.authoringAppVersion = jsObject.authoringAppVersion;
    }
    
    if (hasValue(jsObject.loaded)) {
        dotNetWebMap.loaded = jsObject.loaded;
    }
    
    if (hasValue(jsObject.loadError)) {
        dotNetWebMap.loadError = removeCircularReferences(jsObject.loadError);
    }
    
    if (hasValue(jsObject.loadStatus)) {
        dotNetWebMap.loadStatus = removeCircularReferences(jsObject.loadStatus);
    }
    
    if (hasValue(jsObject.presentation)) {
        dotNetWebMap.presentation = jsObject.presentation;
    }
    
    if (hasValue(jsObject.sourceVersion)) {
        dotNetWebMap.sourceVersion = removeCircularReferences(jsObject.sourceVersion);
    }
    
    if (hasValue(jsObject.thumbnailUrl)) {
        dotNetWebMap.thumbnailUrl = jsObject.thumbnailUrl;
    }
    
    if (hasValue(jsObject.utilityNetworks)) {
        dotNetWebMap.utilityNetworks = removeCircularReferences(jsObject.utilityNetworks);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetWebMap.id = geoBlazorId;
    }

    return dotNetWebMap;
}

