// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import WebMap from '@arcgis/core/WebMap';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, generateSerializableJson } from './arcGisJsInterop';
import { buildDotNetWebMap } from './webMap';

export async function buildJsWebMapGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.applicationProperties)) {
        let { buildJsApplicationProperties } = await import('./applicationProperties');
        properties.applicationProperties = await buildJsApplicationProperties(dotNetObject.applicationProperties, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.bookmarks) && dotNetObject.bookmarks.length > 0) {
        let { buildJsBookmark } = await import('./bookmark');
        properties.bookmarks = await Promise.all(dotNetObject.bookmarks.map(async i => await buildJsBookmark(i))) as any;
    }
    if (hasValue(dotNetObject.geotriggersInfo)) {
        let { buildJsGeotriggersInfo } = await import('./geotriggersInfo');
        properties.geotriggersInfo = await buildJsGeotriggersInfo(dotNetObject.geotriggersInfo, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.initialViewProperties)) {
        let { buildJsInitialViewProperties } = await import('./initialViewProperties');
        properties.initialViewProperties = await buildJsInitialViewProperties(dotNetObject.initialViewProperties, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.ipsInfo)) {
        let { buildJsIPSInfo } = await import('./iPSInfo');
        properties.ipsInfo = await buildJsIPSInfo(dotNetObject.ipsInfo, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.portalItem)) {
        let { buildJsPortalItem } = await import('./portalItem');
        properties.portalItem = await buildJsPortalItem(dotNetObject.portalItem, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.utilityNetworks) && dotNetObject.utilityNetworks.length > 0) {
        let { buildJsUtilityNetwork } = await import('./utilityNetwork');
        properties.utilityNetworks = await Promise.all(dotNetObject.utilityNetworks.map(async i => await buildJsUtilityNetwork(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.authoringApp)) {
        properties.authoringApp = dotNetObject.authoringApp;
    }
    if (hasValue(dotNetObject.authoringAppVersion)) {
        properties.authoringAppVersion = dotNetObject.authoringAppVersion;
    }
    if (hasValue(dotNetObject.floorInfo)) {
        properties.floorInfo = dotNetObject.floorInfo;
    }
    if (hasValue(dotNetObject.presentation)) {
        properties.presentation = JSON.parse(dotNetObject.presentation);
    }
    if (hasValue(dotNetObject.thumbnailUrl)) {
        properties.thumbnailUrl = dotNetObject.thumbnailUrl;
    }
    if (hasValue(dotNetObject.widgets)) {
        properties.widgets = dotNetObject.widgets;
    }
    let jsWebMap = new WebMap(properties);
    
    jsObjectRefs[dotNetObject.id] = jsWebMap;
    arcGisObjectRefs[dotNetObject.id] = jsWebMap;
    
    return jsWebMap;
}


export async function buildDotNetWebMapGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWebMap: any = {};
    
    if (hasValue(jsObject.applicationProperties)) {
        let { buildDotNetApplicationProperties } = await import('./applicationProperties');
        dotNetWebMap.applicationProperties = await buildDotNetApplicationProperties(jsObject.applicationProperties);
    }
    
    if (hasValue(jsObject.bookmarks)) {
        let { buildDotNetBookmark } = await import('./bookmark');
        dotNetWebMap.bookmarks = await Promise.all(jsObject.bookmarks.map(async i => await buildDotNetBookmark(i)));
    }
    
    if (hasValue(jsObject.geotriggersInfo)) {
        let { buildDotNetGeotriggersInfo } = await import('./geotriggersInfo');
        dotNetWebMap.geotriggersInfo = await buildDotNetGeotriggersInfo(jsObject.geotriggersInfo, layerId, viewId);
    }
    
    if (hasValue(jsObject.initialViewProperties)) {
        let { buildDotNetInitialViewProperties } = await import('./initialViewProperties');
        dotNetWebMap.initialViewProperties = await buildDotNetInitialViewProperties(jsObject.initialViewProperties);
    }
    
    if (hasValue(jsObject.ipsInfo)) {
        let { buildDotNetIPSInfo } = await import('./iPSInfo');
        dotNetWebMap.ipsInfo = await buildDotNetIPSInfo(jsObject.ipsInfo);
    }
    
    if (hasValue(jsObject.portalItem)) {
        let { buildDotNetPortalItem } = await import('./portalItem');
        dotNetWebMap.portalItem = await buildDotNetPortalItem(jsObject.portalItem);
    }
    
    if (hasValue(jsObject.utilityNetworks)) {
        let { buildDotNetUtilityNetwork } = await import('./utilityNetwork');
        dotNetWebMap.utilityNetworks = await Promise.all(jsObject.utilityNetworks.map(async i => await buildDotNetUtilityNetwork(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.authoringApp)) {
        dotNetWebMap.authoringApp = jsObject.authoringApp;
    }
    
    if (hasValue(jsObject.authoringAppVersion)) {
        dotNetWebMap.authoringAppVersion = jsObject.authoringAppVersion;
    }
    
    if (hasValue(jsObject.floorInfo)) {
        dotNetWebMap.floorInfo = removeCircularReferences(jsObject.floorInfo);
    }
    
    if (hasValue(jsObject.loaded)) {
        dotNetWebMap.loaded = jsObject.loaded;
    }
    
    if (hasValue(jsObject.loadError)) {
        dotNetWebMap.loadError = removeCircularReferences(jsObject.loadError);
    }
    
    if (hasValue(jsObject.loadStatus)) {
        dotNetWebMap.loadStatus = removeCircularReferences(jsObject.loadStatus);
    }
    
    if (hasValue(jsObject.presentation)) {
        dotNetWebMap.presentation = generateSerializableJson(jsObject.presentation);
    }
    
    if (hasValue(jsObject.sourceVersion)) {
        dotNetWebMap.sourceVersion = removeCircularReferences(jsObject.sourceVersion);
    }
    
    if (hasValue(jsObject.thumbnailUrl)) {
        dotNetWebMap.thumbnailUrl = jsObject.thumbnailUrl;
    }
    
    if (hasValue(jsObject.widgets)) {
        dotNetWebMap.widgets = removeCircularReferences(jsObject.widgets);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetWebMap.id = geoBlazorId;
    }

    return dotNetWebMap;
}

