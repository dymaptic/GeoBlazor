// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import WebMap from '@arcgis/core/WebMap';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetWebMap } from './webMap';

export async function buildJsWebMapGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsWebMap = new WebMap();
    if (hasValue(dotNetObject.bookmarks)) {
        let { buildJsBookmark } = await import('./bookmark');
        jsWebMap.bookmarks = await Promise.all(dotNetObject.bookmarks.map(async i => await buildJsBookmark(i))) as any;
    }
    if (hasValue(dotNetObject.geotriggersInfo)) {
        let { buildJsGeotriggersInfo } = await import('./geotriggersInfo');
        jsWebMap.geotriggersInfo = await buildJsGeotriggersInfo(dotNetObject.geotriggersInfo, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.portalItem)) {
        let { buildJsPortalItem } = await import('./portalItem');
        jsWebMap.portalItem = await buildJsPortalItem(dotNetObject.portalItem, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.utilityNetworks)) {
        let { buildJsUtilityNetwork } = await import('./utilityNetwork');
        jsWebMap.utilityNetworks = await Promise.all(dotNetObject.utilityNetworks.map(async i => await buildJsUtilityNetwork(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.applicationProperties)) {
        jsWebMap.applicationProperties = dotNetObject.applicationProperties;
    }
    if (hasValue(dotNetObject.authoringApp)) {
        jsWebMap.authoringApp = dotNetObject.authoringApp;
    }
    if (hasValue(dotNetObject.authoringAppVersion)) {
        jsWebMap.authoringAppVersion = dotNetObject.authoringAppVersion;
    }
    if (hasValue(dotNetObject.floorInfo)) {
        jsWebMap.floorInfo = dotNetObject.floorInfo;
    }
    if (hasValue(dotNetObject.initialViewProperties)) {
        jsWebMap.initialViewProperties = dotNetObject.initialViewProperties;
    }
    if (hasValue(dotNetObject.presentation)) {
        jsWebMap.presentation = dotNetObject.presentation;
    }
    if (hasValue(dotNetObject.thumbnailUrl)) {
        jsWebMap.thumbnailUrl = dotNetObject.thumbnailUrl;
    }
    if (hasValue(dotNetObject.widgets)) {
        jsWebMap.widgets = dotNetObject.widgets;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsWebMap);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsWebMap;
    
    let dnInstantiatedObject = await buildDotNetWebMap(jsWebMap);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for WebMap', e);
    }
    
    return jsWebMap;
}

export async function buildDotNetWebMapGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWebMap: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.bookmarks)) {
            let { buildDotNetBookmark } = await import('./bookmark');
            dotNetWebMap.bookmarks = await Promise.all(jsObject.bookmarks.map(async i => await buildDotNetBookmark(i)));
        }
        if (hasValue(jsObject.geotriggersInfo)) {
            let { buildDotNetGeotriggersInfo } = await import('./geotriggersInfo');
            dotNetWebMap.geotriggersInfo = await buildDotNetGeotriggersInfo(jsObject.geotriggersInfo);
        }
        if (hasValue(jsObject.portalItem)) {
            let { buildDotNetPortalItem } = await import('./portalItem');
            dotNetWebMap.portalItem = await buildDotNetPortalItem(jsObject.portalItem);
        }
        if (hasValue(jsObject.utilityNetworks)) {
            let { buildDotNetUtilityNetwork } = await import('./utilityNetwork');
            dotNetWebMap.utilityNetworks = await Promise.all(jsObject.utilityNetworks.map(async i => await buildDotNetUtilityNetwork(i, layerId, viewId)));
        }
        if (hasValue(jsObject.applicationProperties)) {
            dotNetWebMap.applicationProperties = jsObject.applicationProperties;
        }
        if (hasValue(jsObject.authoringApp)) {
            dotNetWebMap.authoringApp = jsObject.authoringApp;
        }
        if (hasValue(jsObject.authoringAppVersion)) {
            dotNetWebMap.authoringAppVersion = jsObject.authoringAppVersion;
        }
        if (hasValue(jsObject.floorInfo)) {
            dotNetWebMap.floorInfo = jsObject.floorInfo;
        }
        if (hasValue(jsObject.initialViewProperties)) {
            dotNetWebMap.initialViewProperties = jsObject.initialViewProperties;
        }
        if (hasValue(jsObject.loaded)) {
            dotNetWebMap.loaded = jsObject.loaded;
        }
        if (hasValue(jsObject.loadError)) {
            dotNetWebMap.loadError = jsObject.loadError;
        }
        if (hasValue(jsObject.loadStatus)) {
            dotNetWebMap.loadStatus = jsObject.loadStatus;
        }
        if (hasValue(jsObject.presentation)) {
            dotNetWebMap.presentation = jsObject.presentation;
        }
        if (hasValue(jsObject.sourceVersion)) {
            dotNetWebMap.sourceVersion = jsObject.sourceVersion;
        }
        if (hasValue(jsObject.thumbnailUrl)) {
            dotNetWebMap.thumbnailUrl = jsObject.thumbnailUrl;
        }
        if (hasValue(jsObject.widgets)) {
            dotNetWebMap.widgets = jsObject.widgets;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetWebMap.id = k;
                break;
            }
        }
    }

    return dotNetWebMap;
}

