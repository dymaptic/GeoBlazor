// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import FeatureTableViewModel from '@arcgis/core/widgets/FeatureTable/FeatureTableViewModel';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FeatureTableViewModelGenerated implements IPropertyWrapper {
    public component: FeatureTableViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: FeatureTableViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async clearSelectionFilter(): Promise<void> {
        this.component.clearSelectionFilter();
    }

    async deleteSelection(showWarningPrompt: any): Promise<void> {
        await this.component.deleteSelection(showWarningPrompt);
    }

    async filterBySelection(): Promise<void> {
        this.component.filterBySelection();
    }

    async getObjectIdIndex(objectId: any): Promise<any> {
        return this.component.getObjectIdIndex(objectId);
    }

    async getValue(objectId: any,
        fieldName: any): Promise<any> {
        return this.component.getValue(objectId,
            fieldName);
    }

    async refresh(): Promise<void> {
        this.component.refresh();
    }

    async refreshCellContent(): Promise<void> {
        this.component.refreshCellContent();
    }

    async reset(): Promise<void> {
        this.component.reset();
    }

    async scrollToIndex(index: any): Promise<void> {
        this.component.scrollToIndex(index);
    }

    async zoomToSelection(): Promise<void> {
        this.component.zoomToSelection();
    }

    // region properties
    
    async getFilterGeometry(): Promise<any> {
        if (!hasValue(this.component.filterGeometry)) {
            return null;
        }
        
        let { buildDotNetGeometry } = await import('./geometry');
        return buildDotNetGeometry(this.component.filterGeometry);
    }
    async setFilterGeometry(value: any): Promise<void> {
        let { buildJsGeometry } = await import('./geometry');
        this.component.filterGeometry =  buildJsGeometry(value);
    }
    async getLayer(): Promise<any> {
        if (!hasValue(this.component.layer)) {
            return null;
        }
        
        let { buildDotNetLayer } = await import('./layer');
        return await buildDotNetLayer(this.component.layer);
    }
    async setLayer(value: any): Promise<void> {
        let { buildJsLayer } = await import('./layer');
        this.component.layer = await  buildJsLayer(value, this.layerId, this.viewId);
    }
    async getLayerView(): Promise<any> {
        if (!hasValue(this.component.layerView)) {
            return null;
        }
        
        let { buildDotNetLayerView } = await import('./layerView');
        return await buildDotNetLayerView(this.component.layerView);
    }
    async getTimeExtent(): Promise<any> {
        if (!hasValue(this.component.timeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.component.timeExtent);
    }
    async setTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.component.timeExtent = await  buildJsTimeExtent(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsFeatureTableViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureTableViewModel = new FeatureTableViewModel();
    if (hasValue(dotNetObject.filterGeometry)) {
        let { buildJsGeometry } = await import('./geometry');
        jsFeatureTableViewModel.filterGeometry = buildJsGeometry(dotNetObject.filterGeometry) as any;
    }
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsFeatureTableViewModel.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        jsFeatureTableViewModel.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.actionColumnConfig)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedActionColumnConfig } = dotNetObject.actionColumnConfig;
        jsFeatureTableViewModel.actionColumnConfig = sanitizedActionColumnConfig;
    }
    if (hasValue(dotNetObject.attachmentsEnabled)) {
        jsFeatureTableViewModel.attachmentsEnabled = dotNetObject.attachmentsEnabled;
    }
    if (hasValue(dotNetObject.autoRefreshEnabled)) {
        jsFeatureTableViewModel.autoRefreshEnabled = dotNetObject.autoRefreshEnabled;
    }
    if (hasValue(dotNetObject.editingEnabled)) {
        jsFeatureTableViewModel.editingEnabled = dotNetObject.editingEnabled;
    }
    if (hasValue(dotNetObject.filterBySelectionEnabled)) {
        jsFeatureTableViewModel.filterBySelectionEnabled = dotNetObject.filterBySelectionEnabled;
    }
    if (hasValue(dotNetObject.hiddenFields)) {
        jsFeatureTableViewModel.hiddenFields = dotNetObject.hiddenFields;
    }
    if (hasValue(dotNetObject.highlightEnabled)) {
        jsFeatureTableViewModel.highlightEnabled = dotNetObject.highlightEnabled;
    }
    if (hasValue(dotNetObject.highlightIds)) {
        jsFeatureTableViewModel.highlightIds = dotNetObject.highlightIds;
    }
    if (hasValue(dotNetObject.multipleSelectionEnabled)) {
        jsFeatureTableViewModel.multipleSelectionEnabled = dotNetObject.multipleSelectionEnabled;
    }
    if (hasValue(dotNetObject.multiSortEnabled)) {
        jsFeatureTableViewModel.multiSortEnabled = dotNetObject.multiSortEnabled;
    }
    if (hasValue(dotNetObject.objectIds)) {
        jsFeatureTableViewModel.objectIds = dotNetObject.objectIds;
    }
    if (hasValue(dotNetObject.relatedRecordsEnabled)) {
        jsFeatureTableViewModel.relatedRecordsEnabled = dotNetObject.relatedRecordsEnabled;
    }
    if (hasValue(dotNetObject.returnGeometryEnabled)) {
        jsFeatureTableViewModel.returnGeometryEnabled = dotNetObject.returnGeometryEnabled;
    }
    if (hasValue(dotNetObject.returnMEnabled)) {
        jsFeatureTableViewModel.returnMEnabled = dotNetObject.returnMEnabled;
    }
    if (hasValue(dotNetObject.returnZEnabled)) {
        jsFeatureTableViewModel.returnZEnabled = dotNetObject.returnZEnabled;
    }
    if (hasValue(dotNetObject.rowHighlightIds)) {
        jsFeatureTableViewModel.rowHighlightIds = dotNetObject.rowHighlightIds;
    }
    if (hasValue(dotNetObject.tableTemplate)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedTableTemplate } = dotNetObject.tableTemplate;
        jsFeatureTableViewModel.tableTemplate = sanitizedTableTemplate;
    }
    if (hasValue(dotNetObject.timeZone)) {
        jsFeatureTableViewModel.timeZone = dotNetObject.timeZone;
    }
    if (hasValue(dotNetObject.view)) {
        jsFeatureTableViewModel.view = dotNetObject.view;
    }
    jsFeatureTableViewModel.on('cell-click', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCellClick', evt);
    });
    
    jsFeatureTableViewModel.on('cell-keydown', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCellKeydown', evt);
    });
    
    jsFeatureTableViewModel.on('cell-pointerout', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCellPointerout', evt);
    });
    
    jsFeatureTableViewModel.on('cell-pointerover', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCellPointerover', evt);
    });
    

    let { default: FeatureTableViewModelWrapper } = await import('./featureTableViewModel');
    let featureTableViewModelWrapper = new FeatureTableViewModelWrapper(jsFeatureTableViewModel);
    featureTableViewModelWrapper.geoBlazorId = dotNetObject.id;
    featureTableViewModelWrapper.viewId = viewId;
    featureTableViewModelWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(featureTableViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = featureTableViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureTableViewModel;
    let { buildDotNetFeatureTableViewModel } = await import('./featureTableViewModel');
    let dnInstantiatedObject = await buildDotNetFeatureTableViewModel(jsFeatureTableViewModel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureTableViewModel', e);
    }
    
    return jsFeatureTableViewModel;
}
export async function buildDotNetFeatureTableViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureTableViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.filterGeometry)) {
            let { buildDotNetGeometry } = await import('./geometry');
            dotNetFeatureTableViewModel.filterGeometry = buildDotNetGeometry(jsObject.filterGeometry);
        }
        if (hasValue(jsObject.layerView)) {
            let { buildDotNetLayerView } = await import('./layerView');
            dotNetFeatureTableViewModel.layerView = await buildDotNetLayerView(jsObject.layerView);
        }
        if (hasValue(jsObject.timeExtent)) {
            let { buildDotNetTimeExtent } = await import('./timeExtent');
            dotNetFeatureTableViewModel.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
        }
        if (hasValue(jsObject.actionColumnConfig)) {
            dotNetFeatureTableViewModel.actionColumnConfig = jsObject.actionColumnConfig;
        }
        if (hasValue(jsObject.activeFilters)) {
            dotNetFeatureTableViewModel.activeFilters = jsObject.activeFilters;
        }
        if (hasValue(jsObject.activeSortOrders)) {
            dotNetFeatureTableViewModel.activeSortOrders = jsObject.activeSortOrders;
        }
        if (hasValue(jsObject.attachmentsEnabled)) {
            dotNetFeatureTableViewModel.attachmentsEnabled = jsObject.attachmentsEnabled;
        }
        if (hasValue(jsObject.autoRefreshEnabled)) {
            dotNetFeatureTableViewModel.autoRefreshEnabled = jsObject.autoRefreshEnabled;
        }
        if (hasValue(jsObject.columns)) {
            dotNetFeatureTableViewModel.columns = jsObject.columns;
        }
        if (hasValue(jsObject.editingEnabled)) {
            dotNetFeatureTableViewModel.editingEnabled = jsObject.editingEnabled;
        }
        if (hasValue(jsObject.filterBySelectionEnabled)) {
            dotNetFeatureTableViewModel.filterBySelectionEnabled = jsObject.filterBySelectionEnabled;
        }
        if (hasValue(jsObject.hiddenFields)) {
            dotNetFeatureTableViewModel.hiddenFields = jsObject.hiddenFields;
        }
        if (hasValue(jsObject.highlightEnabled)) {
            dotNetFeatureTableViewModel.highlightEnabled = jsObject.highlightEnabled;
        }
        if (hasValue(jsObject.highlightIds)) {
            dotNetFeatureTableViewModel.highlightIds = jsObject.highlightIds;
        }
        if (hasValue(jsObject.multipleSelectionEnabled)) {
            dotNetFeatureTableViewModel.multipleSelectionEnabled = jsObject.multipleSelectionEnabled;
        }
        if (hasValue(jsObject.multiSortEnabled)) {
            dotNetFeatureTableViewModel.multiSortEnabled = jsObject.multiSortEnabled;
        }
        if (hasValue(jsObject.objectIds)) {
            dotNetFeatureTableViewModel.objectIds = jsObject.objectIds;
        }
        if (hasValue(jsObject.relatedRecordsEnabled)) {
            dotNetFeatureTableViewModel.relatedRecordsEnabled = jsObject.relatedRecordsEnabled;
        }
        if (hasValue(jsObject.returnGeometryEnabled)) {
            dotNetFeatureTableViewModel.returnGeometryEnabled = jsObject.returnGeometryEnabled;
        }
        if (hasValue(jsObject.returnMEnabled)) {
            dotNetFeatureTableViewModel.returnMEnabled = jsObject.returnMEnabled;
        }
        if (hasValue(jsObject.returnZEnabled)) {
            dotNetFeatureTableViewModel.returnZEnabled = jsObject.returnZEnabled;
        }
        if (hasValue(jsObject.rowHighlightIds)) {
            dotNetFeatureTableViewModel.rowHighlightIds = jsObject.rowHighlightIds;
        }
        if (hasValue(jsObject.size)) {
            dotNetFeatureTableViewModel.size = jsObject.size;
        }
        if (hasValue(jsObject.state)) {
            dotNetFeatureTableViewModel.state = jsObject.state;
        }
        if (hasValue(jsObject.tableTemplate)) {
            dotNetFeatureTableViewModel.tableTemplate = jsObject.tableTemplate;
        }
        if (hasValue(jsObject.timeZone)) {
            dotNetFeatureTableViewModel.timeZone = jsObject.timeZone;
        }
        if (hasValue(jsObject.view)) {
            dotNetFeatureTableViewModel.view = jsObject.view;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFeatureTableViewModel.id = k;
                break;
            }
        }
    }

    return dotNetFeatureTableViewModel;
}

