// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import SnappingOptions from '@arcgis/core/views/interactive/snapping/SnappingOptions';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';

export async function buildJsSnappingOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.featureSources) && dotNetObject.featureSources.length > 0) {
        let { buildJsFeatureSnappingLayerSource } = await import('./featureSnappingLayerSource');
        properties.featureSources = await Promise.all(dotNetObject.featureSources.map(async i => await buildJsFeatureSnappingLayerSource(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.attributeRulesEnabled)) {
        properties.attributeRulesEnabled = dotNetObject.attributeRulesEnabled;
    }
    if (hasValue(dotNetObject.distance)) {
        properties.distance = dotNetObject.distance;
    }
    if (hasValue(dotNetObject.enabled)) {
        properties.enabled = dotNetObject.enabled;
    }
    if (hasValue(dotNetObject.featureEnabled)) {
        properties.featureEnabled = dotNetObject.featureEnabled;
    }
    if (hasValue(dotNetObject.gridEnabled)) {
        properties.gridEnabled = dotNetObject.gridEnabled;
    }
    if (hasValue(dotNetObject.selfEnabled)) {
        properties.selfEnabled = dotNetObject.selfEnabled;
    }
    let jsSnappingOptions = new SnappingOptions(properties);
    
    jsObjectRefs[dotNetObject.id] = jsSnappingOptions;
    arcGisObjectRefs[dotNetObject.id] = jsSnappingOptions;
    
    return jsSnappingOptions;
}


export async function buildDotNetSnappingOptionsGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSnappingOptions: any = {};
    
    if (hasValue(jsObject.featureSources)) {
        let { buildDotNetFeatureSnappingLayerSource } = await import('./featureSnappingLayerSource');
        dotNetSnappingOptions.featureSources = await Promise.all(jsObject.featureSources.map(async i => await buildDotNetFeatureSnappingLayerSource(i, viewId)));
    }
    
    if (hasValue(jsObject.attributeRulesEnabled)) {
        dotNetSnappingOptions.attributeRulesEnabled = jsObject.attributeRulesEnabled;
    }
    
    if (hasValue(jsObject.distance)) {
        dotNetSnappingOptions.distance = jsObject.distance;
    }
    
    if (hasValue(jsObject.enabled)) {
        dotNetSnappingOptions.enabled = jsObject.enabled;
    }
    
    if (hasValue(jsObject.featureEnabled)) {
        dotNetSnappingOptions.featureEnabled = jsObject.featureEnabled;
    }
    
    if (hasValue(jsObject.gridEnabled)) {
        dotNetSnappingOptions.gridEnabled = jsObject.gridEnabled;
    }
    
    if (hasValue(jsObject.selfEnabled)) {
        dotNetSnappingOptions.selfEnabled = jsObject.selfEnabled;
    }
    

    return dotNetSnappingOptions;
}

