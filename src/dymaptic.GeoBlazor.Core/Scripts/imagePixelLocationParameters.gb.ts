// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImagePixelLocationParameters from '@arcgis/core/rest/support/ImagePixelLocationParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetImagePixelLocationParameters } from './imagePixelLocationParameters';

export async function buildJsImagePixelLocationParametersGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.geometries) && dotNetObject.geometries.length > 0) {
        let { buildJsPoint } = await import('./point');
        properties.geometries = dotNetObject.geometries.map(i => buildJsPoint(i)) as any;
    }

    if (hasValue(dotNetObject.rasterId)) {
        properties.rasterId = dotNetObject.rasterId;
    }
    let jsImagePixelLocationParameters = new ImagePixelLocationParameters(properties);
    
    jsObjectRefs[dotNetObject.id] = jsImagePixelLocationParameters;
    arcGisObjectRefs[dotNetObject.id] = jsImagePixelLocationParameters;
    
    return jsImagePixelLocationParameters;
}


export async function buildDotNetImagePixelLocationParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImagePixelLocationParameters: any = {};
    
    if (hasValue(jsObject.geometries)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetImagePixelLocationParameters.geometries = jsObject.geometries.map(i => buildDotNetPoint(i));
    }
    
    if (hasValue(jsObject.rasterId)) {
        dotNetImagePixelLocationParameters.rasterId = jsObject.rasterId;
    }
    

    return dotNetImagePixelLocationParameters;
}

