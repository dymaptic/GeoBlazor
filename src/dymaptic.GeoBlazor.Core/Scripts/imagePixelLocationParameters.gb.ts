// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImagePixelLocationParameters from '@arcgis/core/rest/support/ImagePixelLocationParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetImagePixelLocationParameters } from './imagePixelLocationParameters';

export async function buildJsImagePixelLocationParametersGenerated(dotNetObject: any): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.point)) {
        let { buildJsPoint } = await import('./point');
        properties.point = dotNetObject.point.map(i => buildJsPoint(i)) as any;
    }

    if (hasValue(dotNetObject.rasterId)) {
        properties.rasterId = dotNetObject.rasterId;
    }
    let jsImagePixelLocationParameters = new ImagePixelLocationParameters(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsImagePixelLocationParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImagePixelLocationParameters;
    
    let { buildDotNetImagePixelLocationParameters } = await import('./imagePixelLocationParameters');
    let dnInstantiatedObject = await buildDotNetImagePixelLocationParameters(jsImagePixelLocationParameters);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type ImagePixelLocationParameters detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImagePixelLocationParameters', e);
    }
    
    return jsImagePixelLocationParameters;
}


export async function buildDotNetImagePixelLocationParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImagePixelLocationParameters: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.point)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetImagePixelLocationParameters.point = jsObject.point.map(i => buildDotNetPoint(i));
    }
    if (hasValue(jsObject.rasterId)) {
        dotNetImagePixelLocationParameters.rasterId = jsObject.rasterId;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImagePixelLocationParameters.id = k;
                break;
            }
        }
    }

    return dotNetImagePixelLocationParameters;
}

