import { buildDotNetImagePixelLocationParameters } from './imagePixelLocationParameters';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import ImagePixelLocationParameters from '@arcgis/core/rest/support/ImagePixelLocationParameters';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsImagePixelLocationParametersGenerated(dotNetObject: any): Promise<any> {
    let jsImagePixelLocationParameters = new ImagePixelLocationParameters();
    if (hasValue(dotNetObject.point)) {
        let { buildJsPoint } = await import('./point');
        jsImagePixelLocationParameters.point = dotNetObject.point.map(i => buildJsPoint(i)) as any;
    }

    if (hasValue(dotNetObject.rasterId)) {
        jsImagePixelLocationParameters.rasterId = dotNetObject.rasterId;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsImagePixelLocationParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImagePixelLocationParameters;
    
    let dnInstantiatedObject = await buildDotNetImagePixelLocationParameters(jsImagePixelLocationParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImagePixelLocationParameters', e);
    }
    
    return jsImagePixelLocationParameters;
}
export async function buildDotNetImagePixelLocationParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImagePixelLocationParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.point)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetImagePixelLocationParameters.point = jsObject.point.map(i => buildDotNetPoint(i));
        }
        if (hasValue(jsObject.rasterId)) {
            dotNetImagePixelLocationParameters.rasterId = jsObject.rasterId;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImagePixelLocationParameters.id = k;
                break;
            }
        }
    }

    return dotNetImagePixelLocationParameters;
}

