// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import AreaMeasurement2DViewModelMeasurementLabel = __esri.AreaMeasurement2DViewModelMeasurementLabel;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class AreaMeasurement2DViewModelMeasurementLabelGenerated implements IPropertyWrapper {
    public component: AreaMeasurement2DViewModelMeasurementLabel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: AreaMeasurement2DViewModelMeasurementLabel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsAreaMeasurement2DViewModelMeasurementLabelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsAreaMeasurement2DViewModelMeasurementLabel: any = {}

    if (hasValue(dotNetObject.area)) {
        jsAreaMeasurement2DViewModelMeasurementLabel.area = dotNetObject.area;
    }
    if (hasValue(dotNetObject.perimeter)) {
        jsAreaMeasurement2DViewModelMeasurementLabel.perimeter = dotNetObject.perimeter;
    }
    let { default: AreaMeasurement2DViewModelMeasurementLabelWrapper } = await import('./areaMeasurement2DViewModelMeasurementLabel');
    let areaMeasurement2DViewModelMeasurementLabelWrapper = new AreaMeasurement2DViewModelMeasurementLabelWrapper(jsAreaMeasurement2DViewModelMeasurementLabel);
    areaMeasurement2DViewModelMeasurementLabelWrapper.geoBlazorId = dotNetObject.id;
    areaMeasurement2DViewModelMeasurementLabelWrapper.viewId = viewId;
    areaMeasurement2DViewModelMeasurementLabelWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(areaMeasurement2DViewModelMeasurementLabelWrapper);
    jsObjectRefs[dotNetObject.id] = areaMeasurement2DViewModelMeasurementLabelWrapper;

    arcGisObjectRefs[dotNetObject.id] = jsAreaMeasurement2DViewModelMeasurementLabel;
    let { buildDotNetAreaMeasurement2DViewModelMeasurementLabel } = await import('./areaMeasurement2DViewModelMeasurementLabel');
    let dnInstantiatedObject = await buildDotNetAreaMeasurement2DViewModelMeasurementLabel(jsAreaMeasurement2DViewModelMeasurementLabel, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for AreaMeasurement2DViewModelMeasurementLabel', e);
    }
    
    return jsAreaMeasurement2DViewModelMeasurementLabel;
}

export async function buildDotNetAreaMeasurement2DViewModelMeasurementLabelGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAreaMeasurement2DViewModelMeasurementLabel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.area)) {
            dotNetAreaMeasurement2DViewModelMeasurementLabel.area = jsObject.area;
        }
        if (hasValue(jsObject.perimeter)) {
            dotNetAreaMeasurement2DViewModelMeasurementLabel.perimeter = jsObject.perimeter;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetAreaMeasurement2DViewModelMeasurementLabel.id = k;
                break;
            }
        }
    }

    return dotNetAreaMeasurement2DViewModelMeasurementLabel;
}

