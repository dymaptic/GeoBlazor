// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Portal from '@arcgis/core/portal/Portal';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PortalGenerated implements IPropertyWrapper {
    public component: Portal;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: Portal) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async createElevationLayers(): Promise<any> {
        return await this.component.createElevationLayers();
    }

    async fetchBasemaps(basemapGalleryGroupQuery: any,
        options: any): Promise<any> {
        let result = await this.component.fetchBasemaps(basemapGalleryGroupQuery,
            options);
        let { buildDotNetBasemap } = await import('./basemap');
        return await Promise.all(result.map(async i => await buildDotNetBasemap(i)));
    }

    async fetchCategorySchema(options: any): Promise<any> {
        return await this.component.fetchCategorySchema(options);
    }

    async fetchFeaturedGroups(options: any): Promise<any> {
        let result = await this.component.fetchFeaturedGroups(options);
        let { buildDotNetPortalGroup } = await import('./portalGroup');
        return await Promise.all(result.map(async i => await buildDotNetPortalGroup(i)));
    }

    async fetchRegions(options: any): Promise<any> {
        return await this.component.fetchRegions(options);
    }

    async fetchSettings(options: any): Promise<any> {
        return await this.component.fetchSettings(options);
    }

    async queryGroups(queryParams: any,
        options: any): Promise<any> {
                let { buildJsPortalQueryParams } = await import('./portalQueryParams');
let jsQueryParams = await buildJsPortalQueryParams(queryParams, this.layerId, this.viewId) as any;
        return await this.component.queryGroups(jsQueryParams,
            options);
    }

    async queryItems(queryParams: any,
        options: any): Promise<any> {
                let { buildJsPortalQueryParams } = await import('./portalQueryParams');
let jsQueryParams = await buildJsPortalQueryParams(queryParams, this.layerId, this.viewId) as any;
        return await this.component.queryItems(jsQueryParams,
            options);
    }

    async queryUsers(queryParams: any,
        options: any): Promise<any> {
                let { buildJsPortalQueryParams } = await import('./portalQueryParams');
let jsQueryParams = await buildJsPortalQueryParams(queryParams, this.layerId, this.viewId) as any;
        return await this.component.queryUsers(jsQueryParams,
            options);
    }

    // region properties
    
    async getDefaultBasemap(): Promise<any> {
        if (!hasValue(this.component.defaultBasemap)) {
            return null;
        }
        
        let { buildDotNetBasemap } = await import('./basemap');
        return await buildDotNetBasemap(this.component.defaultBasemap);
    }
    
    async setDefaultBasemap(value: any): Promise<void> {
        let { buildJsBasemap } = await import('./basemap');
        this.component.defaultBasemap = await  buildJsBasemap(value, this.layerId, this.viewId);
    }
    
    async getDefaultDevBasemap(): Promise<any> {
        if (!hasValue(this.component.defaultDevBasemap)) {
            return null;
        }
        
        let { buildDotNetBasemap } = await import('./basemap');
        return await buildDotNetBasemap(this.component.defaultDevBasemap);
    }
    
    async setDefaultDevBasemap(value: any): Promise<void> {
        let { buildJsBasemap } = await import('./basemap');
        this.component.defaultDevBasemap = await  buildJsBasemap(value, this.layerId, this.viewId);
    }
    
    async getDefaultExtent(): Promise<any> {
        if (!hasValue(this.component.defaultExtent)) {
            return null;
        }
        
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(this.component.defaultExtent);
    }
    
    async setDefaultExtent(value: any): Promise<void> {
        let { buildJsExtent } = await import('./extent');
        this.component.defaultExtent =  buildJsExtent(value);
    }
    
    async getDefaultVectorBasemap(): Promise<any> {
        if (!hasValue(this.component.defaultVectorBasemap)) {
            return null;
        }
        
        let { buildDotNetBasemap } = await import('./basemap');
        return await buildDotNetBasemap(this.component.defaultVectorBasemap);
    }
    
    async setDefaultVectorBasemap(value: any): Promise<void> {
        let { buildJsBasemap } = await import('./basemap');
        this.component.defaultVectorBasemap = await  buildJsBasemap(value, this.layerId, this.viewId);
    }
    
    async getUser(): Promise<any> {
        if (!hasValue(this.component.user)) {
            return null;
        }
        
        let { buildDotNetPortalUser } = await import('./portalUser');
        return await buildDotNetPortalUser(this.component.user);
    }
    
    async setUser(value: any): Promise<void> {
        let { buildJsPortalUser } = await import('./portalUser');
        this.component.user = await  buildJsPortalUser(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsPortalGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.defaultExtent)) {
        let { buildJsExtent } = await import('./extent');
        properties.defaultExtent = buildJsExtent(dotNetObject.defaultExtent) as any;
    }

    if (hasValue(dotNetObject.access)) {
        properties.access = dotNetObject.access;
    }
    if (hasValue(dotNetObject.allSSL)) {
        properties.allSSL = dotNetObject.allSSL;
    }
    if (hasValue(dotNetObject.authMode)) {
        properties.authMode = dotNetObject.authMode;
    }
    if (hasValue(dotNetObject.authorizedCrossOriginDomains)) {
        properties.authorizedCrossOriginDomains = dotNetObject.authorizedCrossOriginDomains;
    }
    if (hasValue(dotNetObject.basemapGalleryGroupQuery)) {
        properties.basemapGalleryGroupQuery = dotNetObject.basemapGalleryGroupQuery;
    }
    if (hasValue(dotNetObject.basemapGalleryGroupQuery3D)) {
        properties.basemapGalleryGroupQuery3D = dotNetObject.basemapGalleryGroupQuery3D;
    }
    if (hasValue(dotNetObject.bingKey)) {
        properties.bingKey = dotNetObject.bingKey;
    }
    if (hasValue(dotNetObject.canListApps)) {
        properties.canListApps = dotNetObject.canListApps;
    }
    if (hasValue(dotNetObject.canListData)) {
        properties.canListData = dotNetObject.canListData;
    }
    if (hasValue(dotNetObject.canListPreProvisionedItems)) {
        properties.canListPreProvisionedItems = dotNetObject.canListPreProvisionedItems;
    }
    if (hasValue(dotNetObject.canProvisionDirectPurchase)) {
        properties.canProvisionDirectPurchase = dotNetObject.canProvisionDirectPurchase;
    }
    if (hasValue(dotNetObject.canSearchPublic)) {
        properties.canSearchPublic = dotNetObject.canSearchPublic;
    }
    if (hasValue(dotNetObject.canShareBingPublic)) {
        properties.canShareBingPublic = dotNetObject.canShareBingPublic;
    }
    if (hasValue(dotNetObject.canSharePublic)) {
        properties.canSharePublic = dotNetObject.canSharePublic;
    }
    if (hasValue(dotNetObject.canSignInArcGIS)) {
        properties.canSignInArcGIS = dotNetObject.canSignInArcGIS;
    }
    if (hasValue(dotNetObject.canSignInIDP)) {
        properties.canSignInIDP = dotNetObject.canSignInIDP;
    }
    if (hasValue(dotNetObject.colorSetsGroupQuery)) {
        properties.colorSetsGroupQuery = dotNetObject.colorSetsGroupQuery;
    }
    if (hasValue(dotNetObject.commentsEnabled)) {
        properties.commentsEnabled = dotNetObject.commentsEnabled;
    }
    if (hasValue(dotNetObject.created)) {
        properties.created = dotNetObject.created;
    }
    if (hasValue(dotNetObject.culture)) {
        properties.culture = dotNetObject.culture;
    }
    if (hasValue(dotNetObject.customBaseUrl)) {
        properties.customBaseUrl = dotNetObject.customBaseUrl;
    }
    if (hasValue(dotNetObject.description)) {
        properties.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.devBasemapGalleryGroupQuery)) {
        properties.devBasemapGalleryGroupQuery = dotNetObject.devBasemapGalleryGroupQuery;
    }
    if (hasValue(dotNetObject.eueiEnabled)) {
        properties.eueiEnabled = dotNetObject.eueiEnabled;
    }
    if (hasValue(dotNetObject.featuredGroups)) {
        const { id, dotNetComponentReference, ...sanitizedFeaturedGroups } = dotNetObject.featuredGroups;
        properties.featuredGroups = sanitizedFeaturedGroups;
    }
    if (hasValue(dotNetObject.featuredItemsGroupQuery)) {
        properties.featuredItemsGroupQuery = dotNetObject.featuredItemsGroupQuery;
    }
    if (hasValue(dotNetObject.galleryTemplatesGroupQuery)) {
        properties.galleryTemplatesGroupQuery = dotNetObject.galleryTemplatesGroupQuery;
    }
    if (hasValue(dotNetObject.hasCategorySchema)) {
        properties.hasCategorySchema = dotNetObject.hasCategorySchema;
    }
    if (hasValue(dotNetObject.helperServices)) {
        properties.helperServices = dotNetObject.helperServices;
    }
    if (hasValue(dotNetObject.homePageFeaturedContent)) {
        properties.homePageFeaturedContent = dotNetObject.homePageFeaturedContent;
    }
    if (hasValue(dotNetObject.homePageFeaturedContentCount)) {
        properties.homePageFeaturedContentCount = dotNetObject.homePageFeaturedContentCount;
    }
    if (hasValue(dotNetObject.httpPort)) {
        properties.httpPort = dotNetObject.httpPort;
    }
    if (hasValue(dotNetObject.httpsPort)) {
        properties.httpsPort = dotNetObject.httpsPort;
    }
    if (hasValue(dotNetObject.ipCntryCode)) {
        properties.ipCntryCode = dotNetObject.ipCntryCode;
    }
    if (hasValue(dotNetObject.isPortal)) {
        properties.isPortal = dotNetObject.isPortal;
    }
    if (hasValue(dotNetObject.isReadOnly)) {
        properties.isReadOnly = dotNetObject.isReadOnly;
    }
    if (hasValue(dotNetObject.layerTemplatesGroupQuery)) {
        properties.layerTemplatesGroupQuery = dotNetObject.layerTemplatesGroupQuery;
    }
    if (hasValue(dotNetObject.maxTokenExpirationMinutes)) {
        properties.maxTokenExpirationMinutes = dotNetObject.maxTokenExpirationMinutes;
    }
    if (hasValue(dotNetObject.modified)) {
        properties.modified = dotNetObject.modified;
    }
    if (hasValue(dotNetObject.name)) {
        properties.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.portalHostname)) {
        properties.portalHostname = dotNetObject.portalHostname;
    }
    if (hasValue(dotNetObject.portalId)) {
        properties.id = dotNetObject.portalId;
    }
    if (hasValue(dotNetObject.portalMode)) {
        properties.portalMode = dotNetObject.portalMode;
    }
    if (hasValue(dotNetObject.portalProperties)) {
        properties.portalProperties = dotNetObject.portalProperties;
    }
    if (hasValue(dotNetObject.recycleBinEnabled)) {
        properties.recycleBinEnabled = dotNetObject.recycleBinEnabled;
    }
    if (hasValue(dotNetObject.region)) {
        properties.region = dotNetObject.region;
    }
    if (hasValue(dotNetObject.rotatorPanels)) {
        properties.rotatorPanels = dotNetObject.rotatorPanels;
    }
    if (hasValue(dotNetObject.showHomePageDescription)) {
        properties.showHomePageDescription = dotNetObject.showHomePageDescription;
    }
    if (hasValue(dotNetObject.supportsHostedServices)) {
        properties.supportsHostedServices = dotNetObject.supportsHostedServices;
    }
    if (hasValue(dotNetObject.symbolSetsGroupQuery)) {
        properties.symbolSetsGroupQuery = dotNetObject.symbolSetsGroupQuery;
    }
    if (hasValue(dotNetObject.templatesGroupQuery)) {
        properties.templatesGroupQuery = dotNetObject.templatesGroupQuery;
    }
    if (hasValue(dotNetObject.units)) {
        properties.units = dotNetObject.units;
    }
    if (hasValue(dotNetObject.url)) {
        properties.url = dotNetObject.url;
    }
    if (hasValue(dotNetObject.urlKey)) {
        properties.urlKey = dotNetObject.urlKey;
    }
    if (hasValue(dotNetObject.use3dBasemaps)) {
        properties.use3dBasemaps = dotNetObject.use3dBasemaps;
    }
    if (hasValue(dotNetObject.useStandardizedQuery)) {
        properties.useStandardizedQuery = dotNetObject.useStandardizedQuery;
    }
    if (hasValue(dotNetObject.useVectorBasemaps)) {
        properties.useVectorBasemaps = dotNetObject.useVectorBasemaps;
    }
    if (hasValue(dotNetObject.vectorBasemapGalleryGroupQuery)) {
        properties.vectorBasemapGalleryGroupQuery = dotNetObject.vectorBasemapGalleryGroupQuery;
    }
    let jsPortal = new Portal(properties);

    let { default: PortalWrapper } = await import('./portal');
    let portalWrapper = new PortalWrapper(jsPortal);
    portalWrapper.geoBlazorId = dotNetObject.id;
    portalWrapper.viewId = viewId;
    portalWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(portalWrapper);
    jsObjectRefs[dotNetObject.id] = portalWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsPortal;
    let { buildDotNetPortal } = await import('./portal');
    let dnInstantiatedObject = await buildDotNetPortal(jsPortal);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Portal', e);
    }
    
    return portalWrapper;
}

export async function buildDotNetPortalGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPortal: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.defaultExtent)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetPortal.defaultExtent = buildDotNetExtent(jsObject.defaultExtent);
    }
    if (hasValue(jsObject.access)) {
        dotNetPortal.access = jsObject.access;
    }
    if (hasValue(jsObject.allSSL)) {
        dotNetPortal.allSSL = jsObject.allSSL;
    }
    if (hasValue(jsObject.authMode)) {
        dotNetPortal.authMode = jsObject.authMode;
    }
    if (hasValue(jsObject.authorizedCrossOriginDomains)) {
        dotNetPortal.authorizedCrossOriginDomains = jsObject.authorizedCrossOriginDomains;
    }
    if (hasValue(jsObject.basemapGalleryGroupQuery)) {
        dotNetPortal.basemapGalleryGroupQuery = jsObject.basemapGalleryGroupQuery;
    }
    if (hasValue(jsObject.basemapGalleryGroupQuery3D)) {
        dotNetPortal.basemapGalleryGroupQuery3D = jsObject.basemapGalleryGroupQuery3D;
    }
    if (hasValue(jsObject.bingKey)) {
        dotNetPortal.bingKey = jsObject.bingKey;
    }
    if (hasValue(jsObject.canListApps)) {
        dotNetPortal.canListApps = jsObject.canListApps;
    }
    if (hasValue(jsObject.canListData)) {
        dotNetPortal.canListData = jsObject.canListData;
    }
    if (hasValue(jsObject.canListPreProvisionedItems)) {
        dotNetPortal.canListPreProvisionedItems = jsObject.canListPreProvisionedItems;
    }
    if (hasValue(jsObject.canProvisionDirectPurchase)) {
        dotNetPortal.canProvisionDirectPurchase = jsObject.canProvisionDirectPurchase;
    }
    if (hasValue(jsObject.canSearchPublic)) {
        dotNetPortal.canSearchPublic = jsObject.canSearchPublic;
    }
    if (hasValue(jsObject.canShareBingPublic)) {
        dotNetPortal.canShareBingPublic = jsObject.canShareBingPublic;
    }
    if (hasValue(jsObject.canSharePublic)) {
        dotNetPortal.canSharePublic = jsObject.canSharePublic;
    }
    if (hasValue(jsObject.canSignInArcGIS)) {
        dotNetPortal.canSignInArcGIS = jsObject.canSignInArcGIS;
    }
    if (hasValue(jsObject.canSignInIDP)) {
        dotNetPortal.canSignInIDP = jsObject.canSignInIDP;
    }
    if (hasValue(jsObject.colorSetsGroupQuery)) {
        dotNetPortal.colorSetsGroupQuery = jsObject.colorSetsGroupQuery;
    }
    if (hasValue(jsObject.commentsEnabled)) {
        dotNetPortal.commentsEnabled = jsObject.commentsEnabled;
    }
    if (hasValue(jsObject.created)) {
        dotNetPortal.created = jsObject.created;
    }
    if (hasValue(jsObject.culture)) {
        dotNetPortal.culture = jsObject.culture;
    }
    if (hasValue(jsObject.customBaseUrl)) {
        dotNetPortal.customBaseUrl = jsObject.customBaseUrl;
    }
    if (hasValue(jsObject.description)) {
        dotNetPortal.description = jsObject.description;
    }
    if (hasValue(jsObject.devBasemapGalleryGroupQuery)) {
        dotNetPortal.devBasemapGalleryGroupQuery = jsObject.devBasemapGalleryGroupQuery;
    }
    if (hasValue(jsObject.eueiEnabled)) {
        dotNetPortal.eueiEnabled = jsObject.eueiEnabled;
    }
    if (hasValue(jsObject.featuredGroups)) {
        dotNetPortal.featuredGroups = jsObject.featuredGroups;
    }
    if (hasValue(jsObject.featuredItemsGroupQuery)) {
        dotNetPortal.featuredItemsGroupQuery = jsObject.featuredItemsGroupQuery;
    }
    if (hasValue(jsObject.galleryTemplatesGroupQuery)) {
        dotNetPortal.galleryTemplatesGroupQuery = jsObject.galleryTemplatesGroupQuery;
    }
    if (hasValue(jsObject.hasCategorySchema)) {
        dotNetPortal.hasCategorySchema = jsObject.hasCategorySchema;
    }
    if (hasValue(jsObject.helperServices)) {
        dotNetPortal.helperServices = jsObject.helperServices;
    }
    if (hasValue(jsObject.homePageFeaturedContent)) {
        dotNetPortal.homePageFeaturedContent = jsObject.homePageFeaturedContent;
    }
    if (hasValue(jsObject.homePageFeaturedContentCount)) {
        dotNetPortal.homePageFeaturedContentCount = jsObject.homePageFeaturedContentCount;
    }
    if (hasValue(jsObject.httpPort)) {
        dotNetPortal.httpPort = jsObject.httpPort;
    }
    if (hasValue(jsObject.httpsPort)) {
        dotNetPortal.httpsPort = jsObject.httpsPort;
    }
    if (hasValue(jsObject.ipCntryCode)) {
        dotNetPortal.ipCntryCode = jsObject.ipCntryCode;
    }
    if (hasValue(jsObject.isOrganization)) {
        dotNetPortal.isOrganization = jsObject.isOrganization;
    }
    if (hasValue(jsObject.isPortal)) {
        dotNetPortal.isPortal = jsObject.isPortal;
    }
    if (hasValue(jsObject.isReadOnly)) {
        dotNetPortal.isReadOnly = jsObject.isReadOnly;
    }
    if (hasValue(jsObject.layerTemplatesGroupQuery)) {
        dotNetPortal.layerTemplatesGroupQuery = jsObject.layerTemplatesGroupQuery;
    }
    if (hasValue(jsObject.loaded)) {
        dotNetPortal.loaded = jsObject.loaded;
    }
    if (hasValue(jsObject.maxTokenExpirationMinutes)) {
        dotNetPortal.maxTokenExpirationMinutes = jsObject.maxTokenExpirationMinutes;
    }
    if (hasValue(jsObject.modified)) {
        dotNetPortal.modified = jsObject.modified;
    }
    if (hasValue(jsObject.name)) {
        dotNetPortal.name = jsObject.name;
    }
    if (hasValue(jsObject.portalHostname)) {
        dotNetPortal.portalHostname = jsObject.portalHostname;
    }
    if (hasValue(jsObject.id)) {
        dotNetPortal.portalId = jsObject.id;
    }
    if (hasValue(jsObject.portalMode)) {
        dotNetPortal.portalMode = jsObject.portalMode;
    }
    if (hasValue(jsObject.portalProperties)) {
        dotNetPortal.portalProperties = jsObject.portalProperties;
    }
    if (hasValue(jsObject.recycleBinEnabled)) {
        dotNetPortal.recycleBinEnabled = jsObject.recycleBinEnabled;
    }
    if (hasValue(jsObject.region)) {
        dotNetPortal.region = jsObject.region;
    }
    if (hasValue(jsObject.restUrl)) {
        dotNetPortal.restUrl = jsObject.restUrl;
    }
    if (hasValue(jsObject.rotatorPanels)) {
        dotNetPortal.rotatorPanels = jsObject.rotatorPanels;
    }
    if (hasValue(jsObject.showHomePageDescription)) {
        dotNetPortal.showHomePageDescription = jsObject.showHomePageDescription;
    }
    if (hasValue(jsObject.supportsHostedServices)) {
        dotNetPortal.supportsHostedServices = jsObject.supportsHostedServices;
    }
    if (hasValue(jsObject.symbolSetsGroupQuery)) {
        dotNetPortal.symbolSetsGroupQuery = jsObject.symbolSetsGroupQuery;
    }
    if (hasValue(jsObject.templatesGroupQuery)) {
        dotNetPortal.templatesGroupQuery = jsObject.templatesGroupQuery;
    }
    if (hasValue(jsObject.thumbnailUrl)) {
        dotNetPortal.thumbnailUrl = jsObject.thumbnailUrl;
    }
    if (hasValue(jsObject.units)) {
        dotNetPortal.units = jsObject.units;
    }
    if (hasValue(jsObject.url)) {
        dotNetPortal.url = jsObject.url;
    }
    if (hasValue(jsObject.urlKey)) {
        dotNetPortal.urlKey = jsObject.urlKey;
    }
    if (hasValue(jsObject.use3dBasemaps)) {
        dotNetPortal.use3dBasemaps = jsObject.use3dBasemaps;
    }
    if (hasValue(jsObject.useStandardizedQuery)) {
        dotNetPortal.useStandardizedQuery = jsObject.useStandardizedQuery;
    }
    if (hasValue(jsObject.useVectorBasemaps)) {
        dotNetPortal.useVectorBasemaps = jsObject.useVectorBasemaps;
    }
    if (hasValue(jsObject.vectorBasemapGalleryGroupQuery)) {
        dotNetPortal.vectorBasemapGalleryGroupQuery = jsObject.vectorBasemapGalleryGroupQuery;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPortal.id = k;
                break;
            }
        }
    }

    return dotNetPortal;
}

