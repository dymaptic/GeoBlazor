// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import SliderViewModel from '@arcgis/core/widgets/Slider/SliderViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SliderViewModelGenerated implements IPropertyWrapper {
    public component: SliderViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: SliderViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async defaultInputFormatFunction(value: any): Promise<any> {
        return this.component.defaultInputFormatFunction(value);
    }

    async defaultInputParseFunction(value: any): Promise<any> {
        return this.component.defaultInputParseFunction(value);
    }

    async defaultLabelFormatFunction(value: any): Promise<any> {
        return this.component.defaultLabelFormatFunction(value);
    }

    async getBounds(): Promise<any> {
        return this.component.getBounds();
    }

    async getBoundsForValueAtIndex(index: any): Promise<any> {
        return this.component.getBoundsForValueAtIndex(index);
    }

    async getLabelForValue(value: any,
        type: any,
        index: any): Promise<any> {
        return this.component.getLabelForValue(value,
            type,
            index);
    }

    async setValue(index: any,
        value: any): Promise<void> {
        this.component.setValue(index,
            value);
    }

    async toPrecision(value: any): Promise<any> {
        return this.component.toPrecision(value);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsSliderViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.hasInputFormatFunction) && dotNetObject.hasInputFormatFunction) {
        properties.inputFormatFunction = async (value,
        type,
        index) => {

            let func = new Function('value',
            'type',
            'index', dotNetObject.inputFormatFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }
    if (hasValue(dotNetObject.hasInputParseFunction) && dotNetObject.hasInputParseFunction) {
        properties.inputParseFunction = async (value,
        type,
        index) => {

            let func = new Function('value',
            'type',
            'index', dotNetObject.inputParseFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }
    if (hasValue(dotNetObject.hasLabelFormatFunction) && dotNetObject.hasLabelFormatFunction) {
        properties.labelFormatFunction = async (value,
        type,
        index) => {

            let func = new Function('value',
            'type',
            'index', dotNetObject.labelFormatFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }

    if (hasValue(dotNetObject.effectiveMax)) {
        properties.effectiveMax = dotNetObject.effectiveMax;
    }
    if (hasValue(dotNetObject.effectiveMin)) {
        properties.effectiveMin = dotNetObject.effectiveMin;
    }
    if (hasValue(dotNetObject.max)) {
        properties.max = dotNetObject.max;
    }
    if (hasValue(dotNetObject.min)) {
        properties.min = dotNetObject.min;
    }
    if (hasValue(dotNetObject.precision)) {
        properties.precision = dotNetObject.precision;
    }
    if (hasValue(dotNetObject.thumbsConstrained)) {
        properties.thumbsConstrained = dotNetObject.thumbsConstrained;
    }
    if (hasValue(dotNetObject.values)) {
        properties.values = dotNetObject.values;
    }
    let jsSliderViewModel = new SliderViewModel(properties);

    let { default: SliderViewModelWrapper } = await import('./sliderViewModel');
    let sliderViewModelWrapper = new SliderViewModelWrapper(jsSliderViewModel);
    sliderViewModelWrapper.geoBlazorId = dotNetObject.id;
    sliderViewModelWrapper.viewId = viewId;
    sliderViewModelWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(sliderViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = sliderViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsSliderViewModel;
    
    let { buildDotNetSliderViewModel } = await import('./sliderViewModel');
    let dnInstantiatedObject = await buildDotNetSliderViewModel(jsSliderViewModel);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type SliderViewModel detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SliderViewModel', e);
    }
    
    return jsSliderViewModel;
}


export async function buildDotNetSliderViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSliderViewModel: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.effectiveMax)) {
        dotNetSliderViewModel.effectiveMax = jsObject.effectiveMax;
    }
    if (hasValue(jsObject.effectiveMin)) {
        dotNetSliderViewModel.effectiveMin = jsObject.effectiveMin;
    }
    if (hasValue(jsObject.inputFormatFunction)) {
        dotNetSliderViewModel.inputFormatFunction = jsObject.inputFormatFunction;
    }
    if (hasValue(jsObject.inputParseFunction)) {
        dotNetSliderViewModel.inputParseFunction = jsObject.inputParseFunction;
    }
    if (hasValue(jsObject.labelFormatFunction)) {
        dotNetSliderViewModel.labelFormatFunction = jsObject.labelFormatFunction;
    }
    if (hasValue(jsObject.labels)) {
        dotNetSliderViewModel.labels = jsObject.labels;
    }
    if (hasValue(jsObject.max)) {
        dotNetSliderViewModel.max = jsObject.max;
    }
    if (hasValue(jsObject.min)) {
        dotNetSliderViewModel.min = jsObject.min;
    }
    if (hasValue(jsObject.precision)) {
        dotNetSliderViewModel.precision = jsObject.precision;
    }
    if (hasValue(jsObject.state)) {
        dotNetSliderViewModel.state = jsObject.state;
    }
    if (hasValue(jsObject.thumbsConstrained)) {
        dotNetSliderViewModel.thumbsConstrained = jsObject.thumbsConstrained;
    }
    if (hasValue(jsObject.values)) {
        dotNetSliderViewModel.values = jsObject.values;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSliderViewModel.id = geoBlazorId;
    }

    return dotNetSliderViewModel;
}

