import { buildDotNetClustersSchemes } from './clustersSchemes';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import clustersSchemes = __esri.clustersSchemes;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsClustersSchemesGenerated(dotNetObject: any): Promise<any> {
    let jsclustersSchemes: any = {}
    if (hasValue(dotNetObject.primaryScheme)) {
        let { buildJsClustersScheme } = await import('./clustersScheme');
        jsclustersSchemes.primaryScheme = await buildJsClustersScheme(dotNetObject.primaryScheme, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.secondarySchemes)) {
        let { buildJsClustersScheme } = await import('./clustersScheme');
        jsclustersSchemes.secondarySchemes = await Promise.all(dotNetObject.secondarySchemes.map(async i => await buildJsClustersScheme(i, layerId, viewId))) as any;
    }

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsclustersSchemes);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsclustersSchemes;
    
    let dnInstantiatedObject = await buildDotNetClustersSchemes(jsclustersSchemes);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ClustersSchemes', e);
    }
    
    return jsclustersSchemes;
}
export async function buildDotNetClustersSchemesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetClustersSchemes: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.primaryScheme)) {
            let { buildDotNetClustersScheme } = await import('./clustersScheme');
            dotNetClustersSchemes.primaryScheme = await buildDotNetClustersScheme(jsObject.primaryScheme);
        }
        if (hasValue(jsObject.secondarySchemes)) {
            let { buildDotNetClustersScheme } = await import('./clustersScheme');
            dotNetClustersSchemes.secondarySchemes = await Promise.all(jsObject.secondarySchemes.map(async i => await buildDotNetClustersScheme(i)));
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetClustersSchemes.id = k;
                break;
            }
        }
    }

    return dotNetClustersSchemes;
}

