// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetSceneViewScreenshot } from './sceneViewScreenshot';

export async function buildJsSceneViewScreenshotGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsSceneViewScreenshot: any = {};

    if (hasValue(dotNetObject.data)) {
        jsSceneViewScreenshot.data = dotNetObject.data;
    }
    if (hasValue(dotNetObject.dataUrl)) {
        jsSceneViewScreenshot.dataUrl = dotNetObject.dataUrl;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSceneViewScreenshot);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSceneViewScreenshot;
    
    return jsSceneViewScreenshot;
}


export async function buildDotNetSceneViewScreenshotGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSceneViewScreenshot: any = {};
    
    if (hasValue(jsObject.data)) {
        dotNetSceneViewScreenshot.data = removeCircularReferences(jsObject.data);
    }
    
    if (hasValue(jsObject.dataUrl)) {
        dotNetSceneViewScreenshot.dataUrl = jsObject.dataUrl;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSceneViewScreenshot.id = geoBlazorId;
    }

    return dotNetSceneViewScreenshot;
}

