// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetRasterColormapByMapParameters } from './rasterColormapByMapParameters';

export async function buildJsRasterColormapByMapParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsRasterColormapByMapParameters: any = {};
    if (hasValue(dotNetObject.rasterValueToColorCollectionColormap) && dotNetObject.rasterValueToColorCollectionColormap.length > 0) {
        let { buildJsRasterValueToColor } = await import('./rasterValueToColor');
        jsRasterColormapByMapParameters.colormap = await Promise.all(dotNetObject.rasterValueToColorCollectionColormap.map(async i => await buildJsRasterValueToColor(i, layerId, viewId))) as any;
    }
    else if (hasValue(dotNetObject.doubleCollectionColormap) && dotNetObject.doubleCollectionColormap.length > 0) {
        jsRasterColormapByMapParameters.colormap = dotNetObject.doubleCollectionColormap;
    }

    if (hasValue(dotNetObject.outputPixelType)) {
        jsRasterColormapByMapParameters.outputPixelType = dotNetObject.outputPixelType;
    }
    if (hasValue(dotNetObject.raster)) {
        jsRasterColormapByMapParameters.raster = dotNetObject.raster;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsRasterColormapByMapParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRasterColormapByMapParameters;
    
    return jsRasterColormapByMapParameters;
}


export async function buildDotNetRasterColormapByMapParametersGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRasterColormapByMapParameters: any = {};
    
    if (hasValue(jsObject.colormap)) {
        let { buildDotNetRasterValueToColor } = await import('./rasterValueToColor');
        dotNetRasterColormapByMapParameters.colormap = await Promise.all(jsObject.colormap.map(async i => await buildDotNetRasterValueToColor(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.outputPixelType)) {
        dotNetRasterColormapByMapParameters.outputPixelType = jsObject.outputPixelType;
    }
    
    if (hasValue(jsObject.raster)) {
        dotNetRasterColormapByMapParameters.raster = jsObject.raster;
    }
    

    return dotNetRasterColormapByMapParameters;
}

