import {buildDotNetDirectionsEvent} from './directionsEvent';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import DirectionsEvent from '@arcgis/core/rest/support/DirectionsEvent';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsDirectionsEventGenerated(dotNetObject: any): Promise<any> {
    let jsDirectionsEvent = new DirectionsEvent();
    if (hasValue(dotNetObject.geometry)) {
        let {buildJsPoint} = await import('./point');
        jsDirectionsEvent.geometry = buildJsPoint(dotNetObject.geometry) as any;
    }

    if (hasValue(dotNetObject.arriveTime)) {
        jsDirectionsEvent.arriveTime = dotNetObject.arriveTime;
    }
    if (hasValue(dotNetObject.arriveTimeOffset)) {
        jsDirectionsEvent.arriveTimeOffset = dotNetObject.arriveTimeOffset;
    }
    if (hasValue(dotNetObject.strings)) {
        jsDirectionsEvent.strings = dotNetObject.strings;
    }

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsDirectionsEvent);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsDirectionsEvent;

    let dnInstantiatedObject = await buildDotNetDirectionsEvent(jsDirectionsEvent);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DirectionsEvent', e);
    }

    return jsDirectionsEvent;
}

export async function buildDotNetDirectionsEventGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetDirectionsEvent: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.geometry)) {
        let {buildDotNetPoint} = await import('./point');
        dotNetDirectionsEvent.geometry = buildDotNetPoint(jsObject.geometry);
    }
    if (hasValue(jsObject.arriveTime)) {
        dotNetDirectionsEvent.arriveTime = jsObject.arriveTime;
    }
    if (hasValue(jsObject.arriveTimeOffset)) {
        dotNetDirectionsEvent.arriveTimeOffset = jsObject.arriveTimeOffset;
    }
    if (hasValue(jsObject.strings)) {
        dotNetDirectionsEvent.strings = jsObject.strings;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetDirectionsEvent.id = k;
                break;
            }
        }
    }

    return dotNetDirectionsEvent;
}

