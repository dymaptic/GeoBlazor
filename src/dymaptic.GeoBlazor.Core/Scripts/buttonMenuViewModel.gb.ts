// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ButtonMenuViewModel from '@arcgis/core/widgets/FeatureTable/Grid/support/ButtonMenuViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetButtonMenuViewModel } from './buttonMenuViewModel';

export async function buildJsButtonMenuViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.items)) {
        let { buildJsButtonMenuItem } = await import('./buttonMenuItem');
        properties.items = await Promise.all(dotNetObject.items.map(async i => await buildJsButtonMenuItem(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.open)) {
        properties.open = dotNetObject.open;
    }
    let jsButtonMenuViewModel = new ButtonMenuViewModel(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsButtonMenuViewModel);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsButtonMenuViewModel;
    
    let { buildDotNetButtonMenuViewModel } = await import('./buttonMenuViewModel');
    let dnInstantiatedObject = await buildDotNetButtonMenuViewModel(jsButtonMenuViewModel, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type ButtonMenuViewModel detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ButtonMenuViewModel', e);
    }
    
    return jsButtonMenuViewModel;
}


export async function buildDotNetButtonMenuViewModelGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsButtonMenuViewModel } = await import('./buttonMenuViewModel');
        jsComponentRef = await buildJsButtonMenuViewModel(jsObject, layerId, viewId);
    }
    
    let dotNetButtonMenuViewModel: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.items)) {
        let { buildDotNetButtonMenuItem } = await import('./buttonMenuItem');
        dotNetButtonMenuViewModel.items = await Promise.all(jsObject.items.map(async i => await buildDotNetButtonMenuItem(i, layerId, viewId)));
    }
    if (hasValue(jsObject.open)) {
        dotNetButtonMenuViewModel.open = jsObject.open;
    }


    if (hasValue(geoBlazorId)) {
        dotNetButtonMenuViewModel.id = geoBlazorId;
    }

    return dotNetButtonMenuViewModel;
}

