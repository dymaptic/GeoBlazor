// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetIGoTo } from './iGoTo';

export async function buildJsIGoToGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsGoTo: any = {};
    if (hasValue(dotNetObject.goToOverride)) {
        let { buildJsGoToOverride } = await import('./goToOverride');
        jsGoTo.goToOverride = buildJsGoToOverride(dotNetObject.goToOverride, viewId) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsGoTo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsGoTo;
    
    let dnInstantiatedObject = await buildDotNetIGoTo(jsGoTo);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for IGoTo', e);
    }
    
    return jsGoTo;
}

export async function buildDotNetIGoToGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIGoTo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.goToOverride)) {
            let { buildDotNetGoToOverride } = await import('./goToOverride');
            dotNetIGoTo.goToOverride = await buildDotNetGoToOverride(jsObject.goToOverride);
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetIGoTo.id = k;
                break;
            }
        }
    }

    return dotNetIGoTo;
}

