// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import symbologyHeatmap = __esri.symbologyHeatmap;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SymbologyHeatmapGenerated implements IPropertyWrapper {
    public component: symbologyHeatmap;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: symbologyHeatmap) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async cloneScheme(scheme: any): Promise<any> {
        let { buildJsHeatmapScheme } = await import('./heatmapScheme');
        let jsScheme = await buildJsHeatmapScheme(scheme, this.layerId, this.viewId) as any;
        return this.component.cloneScheme(jsScheme);
    }

    async getSchemeByName(parameters: any): Promise<any> {
        return this.component.getSchemeByName(parameters);
    }

    async getSchemes(parameters: any): Promise<any> {
        return this.component.getSchemes(parameters);
    }

    async getSchemesByTag(parameters: any): Promise<any> {
        return this.component.getSchemesByTag(parameters);
    }

    async getThemes(basemap: any): Promise<any> {
        return this.component.getThemes(basemap);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsSymbologyHeatmapGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jssymbologyHeatmap: any = {}


    let { default: SymbologyHeatmapWrapper } = await import('./symbologyHeatmap');
    let symbologyHeatmapWrapper = new SymbologyHeatmapWrapper(jssymbologyHeatmap);
    symbologyHeatmapWrapper.geoBlazorId = dotNetObject.id;
    symbologyHeatmapWrapper.viewId = viewId;
    symbologyHeatmapWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(symbologyHeatmapWrapper);
    jsObjectRefs[dotNetObject.id] = symbologyHeatmapWrapper;
    arcGisObjectRefs[dotNetObject.id] = jssymbologyHeatmap;
    let { buildDotNetSymbologyHeatmap } = await import('./symbologyHeatmap');
    let dnInstantiatedObject = await buildDotNetSymbologyHeatmap(jssymbologyHeatmap);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SymbologyHeatmap', e);
    }
    
    return jssymbologyHeatmap;
}

export async function buildDotNetSymbologyHeatmapGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSymbologyHeatmap: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSymbologyHeatmap.id = k;
                break;
            }
        }
    }

    return dotNetSymbologyHeatmap;
}

