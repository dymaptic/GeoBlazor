// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import BlendLayer = __esri.BlendLayer;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class IBlendLayerGenerated implements IPropertyWrapper {
    public layer: BlendLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: BlendLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}

export async function buildJsIBlendLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsBlendLayer = new BlendLayer();

    if (hasValue(dotNetObject.blendMode)) {
        jsBlendLayer.blendMode = dotNetObject.blendMode;
    }
    if (hasValue(dotNetObject.effect)) {
        jsBlendLayer.effect = dotNetObject.effect;
    }

    let { default: IBlendLayerWrapper } = await import('./iBlendLayer');
    let iBlendLayerWrapper = new IBlendLayerWrapper(jsBlendLayer);
    iBlendLayerWrapper.geoBlazorId = dotNetObject.id;
    iBlendLayerWrapper.viewId = viewId;
    iBlendLayerWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(iBlendLayerWrapper);
    jsObjectRefs[dotNetObject.id] = iBlendLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsBlendLayer;
    let { buildDotNetIBlendLayer } = await import('./iBlendLayer');
    let dnInstantiatedObject = await buildDotNetIBlendLayer(jsBlendLayer);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for IBlendLayer', e);
    }
    
    return jsBlendLayer;
}
export async function buildDotNetIBlendLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIBlendLayer: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.blendMode)) {
            dotNetIBlendLayer.blendMode = jsObject.blendMode;
        }
        if (hasValue(jsObject.effect)) {
            dotNetIBlendLayer.effect = jsObject.effect;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetIBlendLayer.id = k;
                break;
            }
        }
    }

    return dotNetIBlendLayer;
}

