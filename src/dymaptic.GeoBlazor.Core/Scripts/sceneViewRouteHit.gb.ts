// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import SceneViewRouteHit = __esri.SceneViewRouteHit;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SceneViewRouteHitGenerated implements IPropertyWrapper {
    public component: SceneViewRouteHit;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: SceneViewRouteHit) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getLayer(): Promise<any> {
        if (!hasValue(this.component.layer)) {
            return null;
        }
        
        let { buildDotNetRouteLayer } = await import('./routeLayer');
        return await buildDotNetRouteLayer(this.component.layer);
    }
    async setLayer(value: any): Promise<void> {
        let { buildJsRouteLayer } = await import('./routeLayer');
        this.component.layer = await  buildJsRouteLayer(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsSceneViewRouteHitGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSceneViewRouteHit: any = {}
    if (hasValue(dotNetObject.layer)) {
        let { buildJsRouteLayer } = await import('./routeLayer');
        jsSceneViewRouteHit.layer = await buildJsRouteLayer(dotNetObject.layer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.mapPoint)) {
        let { buildJsPoint } = await import('./point');
        jsSceneViewRouteHit.mapPoint = buildJsPoint(dotNetObject.mapPoint) as any;
    }
    if (hasValue(dotNetObject.networkFeature)) {
        jsSceneViewRouteHit.networkFeature = dotNetObject.iSceneViewRouteHitNetworkFeature;
    }


    let { default: SceneViewRouteHitWrapper } = await import('./sceneViewRouteHit');
    let sceneViewRouteHitWrapper = new SceneViewRouteHitWrapper(jsSceneViewRouteHit);
    sceneViewRouteHitWrapper.geoBlazorId = dotNetObject.id;
    sceneViewRouteHitWrapper.viewId = viewId;
    sceneViewRouteHitWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(sceneViewRouteHitWrapper);
    jsObjectRefs[dotNetObject.id] = sceneViewRouteHitWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsSceneViewRouteHit;
    let { buildDotNetSceneViewRouteHit } = await import('./sceneViewRouteHit');
    let dnInstantiatedObject = await buildDotNetSceneViewRouteHit(jsSceneViewRouteHit);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SceneViewRouteHit', e);
    }
    
    return jsSceneViewRouteHit;
}
export async function buildDotNetSceneViewRouteHitGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSceneViewRouteHit: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.mapPoint)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetSceneViewRouteHit.mapPoint = buildDotNetPoint(jsObject.mapPoint);
        }
        dotNetSceneViewRouteHit.networkFeature = jsObject.networkFeature;
        if (hasValue(jsObject.type)) {
            dotNetSceneViewRouteHit.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSceneViewRouteHit.id = k;
                break;
            }
        }
    }

    return dotNetSceneViewRouteHit;
}

