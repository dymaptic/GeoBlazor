// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Popup from '@arcgis/core/widgets/Popup';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PopupWidgetGenerated implements IPropertyWrapper {
    public widget: Popup;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: Popup) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    
    async blur(): Promise<void> {
        this.widget.blur();
    }

    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async focus(): Promise<void> {
        this.widget.focus();
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async next(): Promise<any> {
        let result = this.widget.next();
        let { buildDotNetPopupViewModel } = await import('./popupViewModel');
        return await buildDotNetPopupViewModel(result, this.layerId, this.viewId);
    }

    async own(handleOrHandles: any): Promise<void> {
                let { buildJsWatchHandle } = await import('./watchHandle');
let jsHandleOrHandles = await buildJsWatchHandle(handleOrHandles, this.layerId, this.viewId) as any;
        this.widget.own(jsHandleOrHandles);
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async previous(): Promise<any> {
        let result = this.widget.previous();
        let { buildDotNetPopupViewModel } = await import('./popupViewModel');
        return await buildDotNetPopupViewModel(result, this.layerId, this.viewId);
    }

    async render(): Promise<any> {
        return this.widget.render();
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async reposition(): Promise<void> {
        this.widget.reposition();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async triggerAction(actionIndex: any): Promise<void> {
        this.widget.triggerAction(actionIndex);
    }

    async when(callback: any,
        errback: any): Promise<any> {
        return await this.widget.when(callback,
            errback);
    }

    // region properties
    
    async getActions(): Promise<any> {
        if (!hasValue(this.widget.actions)) {
            return null;
        }
        
        let { buildDotNetActionBase } = await import('./actionBase');
        return await Promise.all(this.widget.actions.map(async i => await buildDotNetActionBase(i)));
    }
    
    async setActions(value: any): Promise<void> {
        let { buildJsActionBase } = await import('./actionBase');
        this.widget.actions = await Promise.all(value.map(async i => await buildJsActionBase(i, this.layerId, this.viewId))) as any;
    }
    
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetPopupViewModel } = await import('./popupViewModel');
        return await buildDotNetPopupViewModel(this.widget.viewModel, this.layerId, this.viewId);
    }
    
    async setViewModel(value: any): Promise<void> {
        let { buildJsPopupViewModel } = await import('./popupViewModel');
        this.widget.viewModel = await  buildJsPopupViewModel(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsPopupWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.actions)) {
        let { buildJsActionBase } = await import('./actionBase');
        properties.actions = await Promise.all(dotNetObject.actions.map(async i => await buildJsActionBase(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.hasGoToOverride) && dotNetObject.hasGoToOverride) {
        properties.goToOverride = async (view,
        goToParameters) => {

            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsGoToOverride', view,
            goToParameters);
        };
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsPopupViewModel } = await import('./popupViewModel');
        properties.viewModel = await buildJsPopupViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.alignment)) {
        properties.alignment = dotNetObject.alignment;
    }
    if (hasValue(dotNetObject.autoCloseEnabled)) {
        properties.autoCloseEnabled = dotNetObject.autoCloseEnabled;
    }
    if (hasValue(dotNetObject.collapseEnabled)) {
        properties.collapseEnabled = dotNetObject.collapseEnabled;
    }
    if (hasValue(dotNetObject.container)) {
        properties.container = dotNetObject.container;
    }
    if (hasValue(dotNetObject.content)) {
        properties.content = dotNetObject.content;
    }
    if (hasValue(dotNetObject.defaultPopupTemplateEnabled)) {
        properties.defaultPopupTemplateEnabled = dotNetObject.defaultPopupTemplateEnabled;
    }
    if (hasValue(dotNetObject.dockEnabled)) {
        properties.dockEnabled = dotNetObject.dockEnabled;
    }
    if (hasValue(dotNetObject.dockOptions)) {
        const { id, dotNetComponentReference, ...sanitizedDockOptions } = dotNetObject.dockOptions;
        properties.dockOptions = sanitizedDockOptions;
    }
    if (hasValue(dotNetObject.features)) {
        const { id, dotNetComponentReference, ...sanitizedFeatures } = dotNetObject.features;
        properties.features = sanitizedFeatures;
    }
    if (hasValue(dotNetObject.headingLevel)) {
        properties.headingLevel = dotNetObject.headingLevel;
    }
    if (hasValue(dotNetObject.highlightEnabled)) {
        properties.highlightEnabled = dotNetObject.highlightEnabled;
    }
    if (hasValue(dotNetObject.icon)) {
        properties.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.location)) {
        const { id, dotNetComponentReference, ...sanitizedLocation } = dotNetObject.location;
        properties.location = sanitizedLocation;
    }
    if (hasValue(dotNetObject.promises)) {
        properties.promises = dotNetObject.promises;
    }
    if (hasValue(dotNetObject.selectedFeatureIndex)) {
        properties.selectedFeatureIndex = dotNetObject.selectedFeatureIndex;
    }
    if (hasValue(dotNetObject.spinnerEnabled)) {
        properties.spinnerEnabled = dotNetObject.spinnerEnabled;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.visibleElements)) {
        const { id, dotNetComponentReference, ...sanitizedVisibleElements } = dotNetObject.visibleElements;
        properties.visibleElements = sanitizedVisibleElements;
    }
    if (hasValue(dotNetObject.widgetId)) {
        properties.id = dotNetObject.widgetId;
    }
    let jsPopup = new Popup(properties);
    jsPopup.on('trigger-action', async (evt: any) => {
        let { buildDotNetPopupTriggerActionEvent } = await import('./popupTriggerActionEvent');
        let dnEvent = await buildDotNetPopupTriggerActionEvent(evt);
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsTriggerAction', dnEvent);
    });
    

    let { default: PopupWidgetWrapper } = await import('./popupWidget');
    let popupWidgetWrapper = new PopupWidgetWrapper(jsPopup);
    popupWidgetWrapper.geoBlazorId = dotNetObject.id;
    popupWidgetWrapper.viewId = viewId;
    popupWidgetWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(popupWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = popupWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsPopup;
    
    let { buildDotNetPopupWidget } = await import('./popupWidget');
    let dnInstantiatedObject = await buildDotNetPopupWidget(jsPopup, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type PopupWidget detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PopupWidget', e);
    }
    
    return jsPopup;
}


export async function buildDotNetPopupWidgetGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPopupWidget: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.actions)) {
        let { buildDotNetActionBase } = await import('./actionBase');
        dotNetPopupWidget.actions = await Promise.all(jsObject.actions.map(async i => await buildDotNetActionBase(i)));
    }
    if (hasValue(jsObject.viewModel)) {
        let { buildDotNetPopupViewModel } = await import('./popupViewModel');
        dotNetPopupWidget.viewModel = await buildDotNetPopupViewModel(jsObject.viewModel, layerId, viewId);
    }
    if (hasValue(jsObject.active)) {
        dotNetPopupWidget.active = jsObject.active;
    }
    if (hasValue(jsObject.alignment)) {
        dotNetPopupWidget.alignment = jsObject.alignment;
    }
    if (hasValue(jsObject.autoCloseEnabled)) {
        dotNetPopupWidget.autoCloseEnabled = jsObject.autoCloseEnabled;
    }
    if (hasValue(jsObject.collapsed)) {
        dotNetPopupWidget.collapsed = jsObject.collapsed;
    }
    if (hasValue(jsObject.collapseEnabled)) {
        dotNetPopupWidget.collapseEnabled = jsObject.collapseEnabled;
    }
    if (hasValue(jsObject.container)) {
        dotNetPopupWidget.container = jsObject.container;
    }
    if (hasValue(jsObject.content)) {
        dotNetPopupWidget.content = jsObject.content;
    }
    if (hasValue(jsObject.currentDockPosition)) {
        dotNetPopupWidget.currentDockPosition = jsObject.currentDockPosition;
    }
    if (hasValue(jsObject.defaultPopupTemplateEnabled)) {
        dotNetPopupWidget.defaultPopupTemplateEnabled = jsObject.defaultPopupTemplateEnabled;
    }
    if (hasValue(jsObject.dockEnabled)) {
        dotNetPopupWidget.dockEnabled = jsObject.dockEnabled;
    }
    if (hasValue(jsObject.dockOptions)) {
        dotNetPopupWidget.dockOptions = jsObject.dockOptions;
    }
    if (hasValue(jsObject.featureCount)) {
        dotNetPopupWidget.featureCount = jsObject.featureCount;
    }
    if (hasValue(jsObject.features)) {
        dotNetPopupWidget.features = jsObject.features;
    }
    if (hasValue(jsObject.goToOverride)) {
        dotNetPopupWidget.goToOverride = jsObject.goToOverride;
    }
    if (hasValue(jsObject.headingLevel)) {
        dotNetPopupWidget.headingLevel = jsObject.headingLevel;
    }
    if (hasValue(jsObject.highlightEnabled)) {
        dotNetPopupWidget.highlightEnabled = jsObject.highlightEnabled;
    }
    if (hasValue(jsObject.icon)) {
        dotNetPopupWidget.icon = jsObject.icon;
    }
    if (hasValue(jsObject.label)) {
        dotNetPopupWidget.label = jsObject.label;
    }
    if (hasValue(jsObject.location)) {
        dotNetPopupWidget.location = jsObject.location;
    }
    if (hasValue(jsObject.promises)) {
        dotNetPopupWidget.promises = jsObject.promises;
    }
    if (hasValue(jsObject.selectedFeature)) {
        dotNetPopupWidget.selectedFeature = jsObject.selectedFeature;
    }
    if (hasValue(jsObject.selectedFeatureIndex)) {
        dotNetPopupWidget.selectedFeatureIndex = jsObject.selectedFeatureIndex;
    }
    if (hasValue(jsObject.selectedFeatureWidget)) {
        dotNetPopupWidget.selectedFeatureWidget = jsObject.selectedFeatureWidget;
    }
    if (hasValue(jsObject.spinnerEnabled)) {
        dotNetPopupWidget.spinnerEnabled = jsObject.spinnerEnabled;
    }
    if (hasValue(jsObject.title)) {
        dotNetPopupWidget.title = jsObject.title;
    }
    if (hasValue(jsObject.type)) {
        dotNetPopupWidget.type = jsObject.type;
    }
    if (hasValue(jsObject.visibleElements)) {
        dotNetPopupWidget.visibleElements = jsObject.visibleElements;
    }
    if (hasValue(jsObject.id)) {
        dotNetPopupWidget.widgetId = jsObject.id;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPopupWidget.id = k;
                break;
            }
        }
    }

    return dotNetPopupWidget;
}

