import {buildDotNetServiceAreaSolveResult} from './serviceAreaSolveResult';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import ServiceAreaSolveResult from '@arcgis/core/rest/support/ServiceAreaSolveResult';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsServiceAreaSolveResultGenerated(dotNetObject: any): Promise<any> {
    let jsServiceAreaSolveResult = new ServiceAreaSolveResult();
    if (hasValue(dotNetObject.facilities)) {
        let {buildJsFeatureSet} = await import('./featureSet');
        jsServiceAreaSolveResult.facilities = buildJsFeatureSet(dotNetObject.facilities) as any;
    }
    if (hasValue(dotNetObject.pointBarriers)) {
        let {buildJsFeatureSet} = await import('./featureSet');
        jsServiceAreaSolveResult.pointBarriers = buildJsFeatureSet(dotNetObject.pointBarriers) as any;
    }
    if (hasValue(dotNetObject.polygonBarriers)) {
        let {buildJsFeatureSet} = await import('./featureSet');
        jsServiceAreaSolveResult.polygonBarriers = buildJsFeatureSet(dotNetObject.polygonBarriers) as any;
    }
    if (hasValue(dotNetObject.polylineBarriers)) {
        let {buildJsFeatureSet} = await import('./featureSet');
        jsServiceAreaSolveResult.polylineBarriers = buildJsFeatureSet(dotNetObject.polylineBarriers) as any;
    }
    if (hasValue(dotNetObject.serviceAreaPolygons)) {
        let {buildJsFeatureSet} = await import('./featureSet');
        jsServiceAreaSolveResult.serviceAreaPolygons = buildJsFeatureSet(dotNetObject.serviceAreaPolygons) as any;
    }
    if (hasValue(dotNetObject.serviceAreaPolylines)) {
        let {buildJsFeatureSet} = await import('./featureSet');
        jsServiceAreaSolveResult.serviceAreaPolylines = buildJsFeatureSet(dotNetObject.serviceAreaPolylines) as any;
    }

    if (hasValue(dotNetObject.messages)) {
        jsServiceAreaSolveResult.messages = dotNetObject.messages;
    }

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsServiceAreaSolveResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsServiceAreaSolveResult;

    let dnInstantiatedObject = await buildDotNetServiceAreaSolveResult(jsServiceAreaSolveResult);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ServiceAreaSolveResult', e);
    }

    return jsServiceAreaSolveResult;
}

export async function buildDotNetServiceAreaSolveResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetServiceAreaSolveResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.facilities)) {
        let {buildDotNetFeatureSet} = await import('./featureSet');
        dotNetServiceAreaSolveResult.facilities = await buildDotNetFeatureSet(jsObject.facilities, layerId, viewId);
    }
    if (hasValue(jsObject.pointBarriers)) {
        let {buildDotNetFeatureSet} = await import('./featureSet');
        dotNetServiceAreaSolveResult.pointBarriers = await buildDotNetFeatureSet(jsObject.pointBarriers, layerId, viewId);
    }
    if (hasValue(jsObject.polygonBarriers)) {
        let {buildDotNetFeatureSet} = await import('./featureSet');
        dotNetServiceAreaSolveResult.polygonBarriers = await buildDotNetFeatureSet(jsObject.polygonBarriers, layerId, viewId);
    }
    if (hasValue(jsObject.polylineBarriers)) {
        let {buildDotNetFeatureSet} = await import('./featureSet');
        dotNetServiceAreaSolveResult.polylineBarriers = await buildDotNetFeatureSet(jsObject.polylineBarriers, layerId, viewId);
    }
    if (hasValue(jsObject.serviceAreaPolygons)) {
        let {buildDotNetFeatureSet} = await import('./featureSet');
        dotNetServiceAreaSolveResult.serviceAreaPolygons = await buildDotNetFeatureSet(jsObject.serviceAreaPolygons, layerId, viewId);
    }
    if (hasValue(jsObject.serviceAreaPolylines)) {
        let {buildDotNetFeatureSet} = await import('./featureSet');
        dotNetServiceAreaSolveResult.serviceAreaPolylines = await buildDotNetFeatureSet(jsObject.serviceAreaPolylines, layerId, viewId);
    }
    if (hasValue(jsObject.messages)) {
        dotNetServiceAreaSolveResult.messages = jsObject.messages;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetServiceAreaSolveResult.id = k;
                break;
            }
        }
    }

    return dotNetServiceAreaSolveResult;
}

