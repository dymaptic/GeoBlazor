// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import FeatureEffect from '@arcgis/core/layers/support/FeatureEffect';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetFeatureEffect } from './featureEffect';

export async function buildJsFeatureEffectGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.filter)) {
        let { buildJsFeatureFilter } = await import('./featureFilter');
        properties.filter = await buildJsFeatureFilter(dotNetObject.filter, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.excludedEffect)) {
        properties.excludedEffect = dotNetObject.excludedEffect;
    }
    if (hasValue(dotNetObject.excludedLabelsVisible)) {
        properties.excludedLabelsVisible = dotNetObject.excludedLabelsVisible;
    }
    if (hasValue(dotNetObject.includedEffect)) {
        properties.includedEffect = dotNetObject.includedEffect;
    }
    let jsFeatureEffect = new FeatureEffect(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureEffect);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureEffect;
    
    let dnInstantiatedObject = await buildDotNetFeatureEffect(jsFeatureEffect);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureEffect', e);
    }
    
    return jsFeatureEffect;
}

export async function buildDotNetFeatureEffectGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureEffect: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.filter)) {
            let { buildDotNetFeatureFilter } = await import('./featureFilter');
            dotNetFeatureEffect.filter = await buildDotNetFeatureFilter(jsObject.filter);
        }
    if (hasValue(jsObject.excludedEffect)) {
        dotNetFeatureEffect.excludedEffect = jsObject.excludedEffect;
    }
    if (hasValue(jsObject.excludedLabelsVisible)) {
        dotNetFeatureEffect.excludedLabelsVisible = jsObject.excludedLabelsVisible;
    }
    if (hasValue(jsObject.includedEffect)) {
        dotNetFeatureEffect.includedEffect = jsObject.includedEffect;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFeatureEffect.id = k;
                break;
            }
        }
    }

    return dotNetFeatureEffect;
}

