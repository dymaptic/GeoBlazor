// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetElevationQueryResult } from './elevationQueryResult';

export async function buildJsElevationQueryResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsElevationQueryResult: any = {};
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsGeometry } = await import('./geometry');
        jsElevationQueryResult.geometry = buildJsGeometry(dotNetObject.geometry) as any;
    }
    if (hasValue(dotNetObject.sampleInfo)) {
        let { buildJsElevationQueryResultSampleInfo } = await import('./elevationQueryResultSampleInfo');
        jsElevationQueryResult.sampleInfo = await Promise.all(dotNetObject.sampleInfo.map(async i => await buildJsElevationQueryResultSampleInfo(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.noDataValue)) {
        jsElevationQueryResult.noDataValue = dotNetObject.noDataValue;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsElevationQueryResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsElevationQueryResult;
    
    let dnInstantiatedObject = await buildDotNetElevationQueryResult(jsElevationQueryResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ElevationQueryResult', e);
    }
    
    return jsElevationQueryResult;
}

export async function buildDotNetElevationQueryResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetElevationQueryResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.geometry)) {
            let { buildDotNetGeometry } = await import('./geometry');
            dotNetElevationQueryResult.geometry = buildDotNetGeometry(jsObject.geometry);
        }
        if (hasValue(jsObject.sampleInfo)) {
            let { buildDotNetElevationQueryResultSampleInfo } = await import('./elevationQueryResultSampleInfo');
            dotNetElevationQueryResult.sampleInfo = await Promise.all(jsObject.sampleInfo.map(async i => await buildDotNetElevationQueryResultSampleInfo(i)));
        }
    if (hasValue(jsObject.noDataValue)) {
        dotNetElevationQueryResult.noDataValue = jsObject.noDataValue;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetElevationQueryResult.id = k;
                break;
            }
        }
    }

    return dotNetElevationQueryResult;
}

