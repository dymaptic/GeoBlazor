// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, buildJsStreamReference } from './arcGisJsInterop';
import { buildDotNetIEditorViewModelGetTemplatesForLayer } from './iEditorViewModelGetTemplatesForLayer';

export async function buildJsIEditorViewModelGetTemplatesForLayerGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsEditorViewModelGetTemplatesForLayer: any = {};

    
    jsObjectRefs[dotNetObject.id] = jsEditorViewModelGetTemplatesForLayer;
    arcGisObjectRefs[dotNetObject.id] = jsEditorViewModelGetTemplatesForLayer;
    
    try {
        let jsObjectRef = DotNet.createJSObjectReference(jsEditorViewModelGetTemplatesForLayer);
        let { buildDotNetIEditorViewModelGetTemplatesForLayer } = await import('./iEditorViewModelGetTemplatesForLayer');
        let dnInstantiatedObject = await buildDotNetIEditorViewModelGetTemplatesForLayer(jsEditorViewModelGetTemplatesForLayer);

        let dnStream = buildJsStreamReference(dnInstantiatedObject);
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, dnStream);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for IEditorViewModelGetTemplatesForLayer', e);
    }
    
    return jsEditorViewModelGetTemplatesForLayer;
}


export async function buildDotNetIEditorViewModelGetTemplatesForLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIEditorViewModelGetTemplatesForLayer: any = {};
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetIEditorViewModelGetTemplatesForLayer.id = geoBlazorId;
    }

    return dotNetIEditorViewModelGetTemplatesForLayer;
}

