// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import VoxelSlice from '@arcgis/core/layers/voxel/VoxelSlice';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetVoxelSlice } from './voxelSlice';

export async function buildJsVoxelSliceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.enabled)) {
        properties.enabled = dotNetObject.enabled;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.orientation)) {
        properties.orientation = dotNetObject.orientation;
    }
    if (hasValue(dotNetObject.point)) {
        properties.point = dotNetObject.point;
    }
    if (hasValue(dotNetObject.tilt)) {
        properties.tilt = dotNetObject.tilt;
    }
    let jsVoxelSlice = new VoxelSlice(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsVoxelSlice);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsVoxelSlice;
    
    let { buildDotNetVoxelSlice } = await import('./voxelSlice');
    let dnInstantiatedObject = await buildDotNetVoxelSlice(jsVoxelSlice);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type VoxelSlice detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for VoxelSlice', e);
    }
    
    return jsVoxelSlice;
}


export async function buildDotNetVoxelSliceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVoxelSlice: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.enabled)) {
        dotNetVoxelSlice.enabled = jsObject.enabled;
    }
    if (hasValue(jsObject.label)) {
        dotNetVoxelSlice.label = jsObject.label;
    }
    if (hasValue(jsObject.orientation)) {
        dotNetVoxelSlice.orientation = jsObject.orientation;
    }
    if (hasValue(jsObject.point)) {
        dotNetVoxelSlice.point = jsObject.point;
    }
    if (hasValue(jsObject.tilt)) {
        dotNetVoxelSlice.tilt = jsObject.tilt;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetVoxelSlice.id = geoBlazorId;
    }

    return dotNetVoxelSlice;
}

