// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSearchedCaseNode } from './searchedCaseNode';

export async function buildJsSearchedCaseNodeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSearchedCaseNode: any = {};
    if (hasValue(dotNetObject.clauses)) {
        let { buildJsWhenNode } = await import('./whenNode');
        jsSearchedCaseNode.clauses = await Promise.all(dotNetObject.clauses.map(async i => await buildJsWhenNode(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.else)) {
        jsSearchedCaseNode.else = dotNetObject.else;
    }
    if (hasValue(dotNetObject.format)) {
        jsSearchedCaseNode.format = dotNetObject.format;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSearchedCaseNode);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSearchedCaseNode;
    
    let { buildDotNetSearchedCaseNode } = await import('./searchedCaseNode');
    let dnInstantiatedObject = await buildDotNetSearchedCaseNode(jsSearchedCaseNode);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type SearchedCaseNode detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SearchedCaseNode', e);
    }
    
    return jsSearchedCaseNode;
}


export async function buildDotNetSearchedCaseNodeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchedCaseNode: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.clauses)) {
        let { buildDotNetWhenNode } = await import('./whenNode');
        dotNetSearchedCaseNode.clauses = await Promise.all(jsObject.clauses.map(async i => await buildDotNetWhenNode(i)));
    }
    if (hasValue(jsObject.else)) {
        dotNetSearchedCaseNode.else = jsObject.else;
    }
    if (hasValue(jsObject.format)) {
        dotNetSearchedCaseNode.format = jsObject.format;
    }
    if (hasValue(jsObject.type)) {
        dotNetSearchedCaseNode.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSearchedCaseNode.id = k;
                break;
            }
        }
    }

    return dotNetSearchedCaseNode;
}

