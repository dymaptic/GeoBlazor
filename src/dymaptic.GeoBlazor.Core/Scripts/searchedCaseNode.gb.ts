// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetSearchedCaseNode } from './searchedCaseNode';

export async function buildJsSearchedCaseNodeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsSearchedCaseNode: any = {};
    if (hasValue(dotNetObject.clauses) && dotNetObject.clauses.length > 0) {
        let { buildJsWhenNode } = await import('./whenNode');
        jsSearchedCaseNode.clauses = await Promise.all(dotNetObject.clauses.map(async i => await buildJsWhenNode(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.else)) {
        jsSearchedCaseNode.else = dotNetObject.else;
    }
    if (hasValue(dotNetObject.format)) {
        jsSearchedCaseNode.format = dotNetObject.format;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSearchedCaseNode);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSearchedCaseNode;
    
    return jsSearchedCaseNode;
}


export async function buildDotNetSearchedCaseNodeGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchedCaseNode: any = {};
    
    if (hasValue(jsObject.clauses)) {
        let { buildDotNetWhenNode } = await import('./whenNode');
        dotNetSearchedCaseNode.clauses = await Promise.all(jsObject.clauses.map(async i => await buildDotNetWhenNode(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.else)) {
        dotNetSearchedCaseNode.else = removeCircularReferences(jsObject.else);
    }
    
    if (hasValue(jsObject.format)) {
        dotNetSearchedCaseNode.format = jsObject.format;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetSearchedCaseNode.type = jsObject.type;
    }
    

    return dotNetSearchedCaseNode;
}

