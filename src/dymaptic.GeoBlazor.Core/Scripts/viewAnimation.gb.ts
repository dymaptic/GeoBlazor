// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ViewAnimation from '@arcgis/core/views/ViewAnimation';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ViewAnimationGenerated implements IPropertyWrapper {
    public component: ViewAnimation;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ViewAnimation) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.target)) {
            let { buildJsViewpoint } = await import('./viewpoint');
            this.component.target = buildJsViewpoint(dotNetObject.target) as any;
        }

    }
    
    async finish(): Promise<void> {
        this.component.finish();
    }

    async stop(): Promise<void> {
        this.component.stop();
    }

    // region properties
    
    async getTarget(): Promise<any> {
        if (!hasValue(this.component.target)) {
            return null;
        }
        
        let { buildDotNetViewpoint } = await import('./viewpoint');
        return buildDotNetViewpoint(this.component.target);
    }
    
    async setTarget(value: any): Promise<void> {
        let { buildJsViewpoint } = await import('./viewpoint');
        this.component.target =  buildJsViewpoint(value);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsViewAnimationGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.target)) {
        let { buildJsViewpoint } = await import('./viewpoint');
        properties.target = buildJsViewpoint(dotNetObject.target) as any;
    }

    let jsViewAnimation = new ViewAnimation(properties);

    let { default: ViewAnimationWrapper } = await import('./viewAnimation');
    let viewAnimationWrapper = new ViewAnimationWrapper(jsViewAnimation);
    viewAnimationWrapper.geoBlazorId = dotNetObject.id;
    viewAnimationWrapper.viewId = viewId;
    viewAnimationWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(viewAnimationWrapper);
    jsObjectRefs[dotNetObject.id] = viewAnimationWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsViewAnimation;
    
    let { buildDotNetViewAnimation } = await import('./viewAnimation');
    let dnInstantiatedObject = await buildDotNetViewAnimation(jsViewAnimation, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type ViewAnimation detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ViewAnimation', e);
    }
    
    return jsViewAnimation;
}


export async function buildDotNetViewAnimationGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetViewAnimation: any = {};
    
    if (hasValue(jsObject.target)) {
        let { buildDotNetViewpoint } = await import('./viewpoint');
        dotNetViewAnimation.target = buildDotNetViewpoint(jsObject.target);
    }
    
    if (hasValue(jsObject.state)) {
        dotNetViewAnimation.state = jsObject.state;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetViewAnimation.id = geoBlazorId;
    }

    return dotNetViewAnimation;
}

