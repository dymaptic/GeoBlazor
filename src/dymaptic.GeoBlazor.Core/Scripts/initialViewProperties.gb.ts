// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import InitialViewProperties from '@arcgis/core/webmap/InitialViewProperties';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetInitialViewProperties } from './initialViewProperties';

export async function buildJsInitialViewPropertiesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.background)) {
        let { buildJsColorBackground } = await import('./colorBackground');
        properties.background = await buildJsColorBackground(dotNetObject.background, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        properties.spatialReference = buildJsSpatialReference(dotNetObject.spatialReference, viewId) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent, viewId) as any;
    }
    if (hasValue(dotNetObject.viewpoint)) {
        let { buildJsViewpoint } = await import('./viewpoint');
        properties.viewpoint = buildJsViewpoint(dotNetObject.viewpoint, viewId) as any;
    }

    if (hasValue(dotNetObject.timeZone)) {
        properties.timeZone = dotNetObject.timeZone;
    }
    let jsInitialViewProperties = new InitialViewProperties(properties);
    
    jsObjectRefs[dotNetObject.id] = jsInitialViewProperties;
    arcGisObjectRefs[dotNetObject.id] = jsInitialViewProperties;
    
    return jsInitialViewProperties;
}


export async function buildDotNetInitialViewPropertiesGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetInitialViewProperties: any = {};
    
    if (hasValue(jsObject.background)) {
        let { buildDotNetColorBackground } = await import('./colorBackground');
        dotNetInitialViewProperties.background = await buildDotNetColorBackground(jsObject.background, layerId, viewId);
    }
    
    if (hasValue(jsObject.spatialReference)) {
        let { buildDotNetSpatialReference } = await import('./spatialReference');
        dotNetInitialViewProperties.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference, viewId);
    }
    
    if (hasValue(jsObject.timeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetInitialViewProperties.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent, viewId);
    }
    
    if (hasValue(jsObject.viewpoint)) {
        let { buildDotNetViewpoint } = await import('./viewpoint');
        dotNetInitialViewProperties.viewpoint = buildDotNetViewpoint(jsObject.viewpoint, viewId);
    }
    
    if (hasValue(jsObject.timeZone)) {
        dotNetInitialViewProperties.timeZone = jsObject.timeZone;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetInitialViewProperties.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetInitialViewProperties.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetInitialViewProperties.id)) {
        jsObjectRefs[dotNetInitialViewProperties.id] ??= jsObject;
        arcGisObjectRefs[dotNetInitialViewProperties.id] ??= jsObject;
    }

    return dotNetInitialViewProperties;
}

