import { buildDotNetSearchViewModelSearchCompleteEvent } from './searchViewModelSearchCompleteEvent';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import SearchViewModelSearchCompleteEvent = __esri.SearchViewModelSearchCompleteEvent;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsSearchViewModelSearchCompleteEventGenerated(dotNetObject: any): Promise<any> {
    let jsSearchViewModelSearchCompleteEvent: any = {}
    if (hasValue(dotNetObject.results)) {
        let { buildJsSearchViewModelSearchCompleteEventResults } = await import('./searchViewModelSearchCompleteEventResults');
        jsSearchViewModelSearchCompleteEvent.results = await Promise.all(dotNetObject.results.map(async i => await buildJsSearchViewModelSearchCompleteEventResults(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.activeSourceIndex)) {
        jsSearchViewModelSearchCompleteEvent.activeSourceIndex = dotNetObject.activeSourceIndex;
    }
    if (hasValue(dotNetObject.errors)) {
        jsSearchViewModelSearchCompleteEvent.errors = dotNetObject.errors;
    }
    if (hasValue(dotNetObject.numResults)) {
        jsSearchViewModelSearchCompleteEvent.numResults = dotNetObject.numResults;
    }
    if (hasValue(dotNetObject.searchTerm)) {
        jsSearchViewModelSearchCompleteEvent.searchTerm = dotNetObject.searchTerm;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsSearchViewModelSearchCompleteEvent);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSearchViewModelSearchCompleteEvent;
    
    let dnInstantiatedObject = await buildDotNetSearchViewModelSearchCompleteEvent(jsSearchViewModelSearchCompleteEvent);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SearchViewModelSearchCompleteEvent', e);
    }
    
    return jsSearchViewModelSearchCompleteEvent;
}
export async function buildDotNetSearchViewModelSearchCompleteEventGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchViewModelSearchCompleteEvent: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.results)) {
            let { buildDotNetSearchViewModelSearchCompleteEventResults } = await import('./searchViewModelSearchCompleteEventResults');
            dotNetSearchViewModelSearchCompleteEvent.results = await Promise.all(jsObject.results.map(async i => await buildDotNetSearchViewModelSearchCompleteEventResults(i)));
        }
        if (hasValue(jsObject.activeSourceIndex)) {
            dotNetSearchViewModelSearchCompleteEvent.activeSourceIndex = jsObject.activeSourceIndex;
        }
        if (hasValue(jsObject.errors)) {
            dotNetSearchViewModelSearchCompleteEvent.errors = jsObject.errors;
        }
        if (hasValue(jsObject.numResults)) {
            dotNetSearchViewModelSearchCompleteEvent.numResults = jsObject.numResults;
        }
        if (hasValue(jsObject.searchTerm)) {
            dotNetSearchViewModelSearchCompleteEvent.searchTerm = jsObject.searchTerm;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSearchViewModelSearchCompleteEvent.id = k;
                break;
            }
        }
    }

    return dotNetSearchViewModelSearchCompleteEvent;
}

