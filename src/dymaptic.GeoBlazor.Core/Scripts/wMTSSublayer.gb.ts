// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import WMTSSublayer from '@arcgis/core/layers/support/WMTSSublayer';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetWMTSSublayer } from './wMTSSublayer';

export async function buildJsWMTSSublayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.fullExtent)) {
        let { buildJsExtent } = await import('./extent');
        properties.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;
    }
    if (hasValue(dotNetObject.tileMatrixSet)) {
        let { buildJsTileMatrixSet } = await import('./tileMatrixSet');
        properties.tileMatrixSet = await buildJsTileMatrixSet(dotNetObject.tileMatrixSet, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.tileMatrixSets)) {
        let { buildJsTileMatrixSet } = await import('./tileMatrixSet');
        properties.tileMatrixSets = await Promise.all(dotNetObject.tileMatrixSets.map(async i => await buildJsTileMatrixSet(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.description)) {
        properties.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.imageFormat)) {
        properties.imageFormat = dotNetObject.imageFormat;
    }
    if (hasValue(dotNetObject.imageFormats)) {
        properties.imageFormats = dotNetObject.imageFormats;
    }
    if (hasValue(dotNetObject.styleId)) {
        properties.styleId = dotNetObject.styleId;
    }
    if (hasValue(dotNetObject.styles)) {
        const { id, dotNetComponentReference, ...sanitizedStyles } = dotNetObject.styles;
        properties.styles = sanitizedStyles;
    }
    if (hasValue(dotNetObject.tileMatrixSetId)) {
        properties.tileMatrixSetId = dotNetObject.tileMatrixSetId;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.wMTSSublayerId)) {
        properties.id = dotNetObject.wMTSSublayerId;
    }
    let jsWMTSSublayer = new WMTSSublayer(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsWMTSSublayer);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsWMTSSublayer;
    
    let dnInstantiatedObject = await buildDotNetWMTSSublayer(jsWMTSSublayer);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for WMTSSublayer', e);
    }
    
    return jsWMTSSublayer;
}

export async function buildDotNetWMTSSublayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWMTSSublayer: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.fullExtent)) {
            let { buildDotNetExtent } = await import('./extent');
            dotNetWMTSSublayer.fullExtent = buildDotNetExtent(jsObject.fullExtent);
        }
        if (hasValue(jsObject.tileMatrixSet)) {
            let { buildDotNetTileMatrixSet } = await import('./tileMatrixSet');
            dotNetWMTSSublayer.tileMatrixSet = await buildDotNetTileMatrixSet(jsObject.tileMatrixSet);
        }
        if (hasValue(jsObject.tileMatrixSets)) {
            let { buildDotNetTileMatrixSet } = await import('./tileMatrixSet');
            dotNetWMTSSublayer.tileMatrixSets = await Promise.all(jsObject.tileMatrixSets.map(async i => await buildDotNetTileMatrixSet(i)));
        }
    if (hasValue(jsObject.description)) {
        dotNetWMTSSublayer.description = jsObject.description;
    }
    if (hasValue(jsObject.imageFormat)) {
        dotNetWMTSSublayer.imageFormat = jsObject.imageFormat;
    }
    if (hasValue(jsObject.imageFormats)) {
        dotNetWMTSSublayer.imageFormats = jsObject.imageFormats;
    }
    if (hasValue(jsObject.styleId)) {
        dotNetWMTSSublayer.styleId = jsObject.styleId;
    }
    if (hasValue(jsObject.styles)) {
        dotNetWMTSSublayer.styles = jsObject.styles;
    }
    if (hasValue(jsObject.tileMatrixSetId)) {
        dotNetWMTSSublayer.tileMatrixSetId = jsObject.tileMatrixSetId;
    }
    if (hasValue(jsObject.title)) {
        dotNetWMTSSublayer.title = jsObject.title;
    }
    if (hasValue(jsObject.id)) {
        dotNetWMTSSublayer.wMTSSublayerId = jsObject.id;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetWMTSSublayer.id = k;
                break;
            }
        }
    }

    return dotNetWMTSSublayer;
}

