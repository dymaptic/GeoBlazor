// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import WMTSSublayer from '@arcgis/core/layers/support/WMTSSublayer';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';

export async function buildDotNetWMTSSublayerGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWMTSSublayer: any = {};
    
    if (hasValue(jsObject.fullExtent)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetWMTSSublayer.fullExtent = buildDotNetExtent(jsObject.fullExtent);
    }
    
    if (hasValue(jsObject.styles)) {
        let { buildDotNetWMTSStyle } = await import('./wMTSStyle');
        dotNetWMTSSublayer.styles = await Promise.all(jsObject.styles.map(async i => await buildDotNetWMTSStyle(i, viewId)));
    }
    
    if (hasValue(jsObject.tileMatrixSet)) {
        let { buildDotNetTileMatrixSet } = await import('./tileMatrixSet');
        dotNetWMTSSublayer.tileMatrixSet = await buildDotNetTileMatrixSet(jsObject.tileMatrixSet, viewId);
    }
    
    if (hasValue(jsObject.tileMatrixSets)) {
        let { buildDotNetTileMatrixSet } = await import('./tileMatrixSet');
        dotNetWMTSSublayer.tileMatrixSets = await Promise.all(jsObject.tileMatrixSets.map(async i => await buildDotNetTileMatrixSet(i, viewId)));
    }
    
    if (hasValue(jsObject.description)) {
        dotNetWMTSSublayer.description = jsObject.description;
    }
    
    if (hasValue(jsObject.imageFormat)) {
        dotNetWMTSSublayer.imageFormat = jsObject.imageFormat;
    }
    
    if (hasValue(jsObject.imageFormats)) {
        dotNetWMTSSublayer.imageFormats = jsObject.imageFormats;
    }
    
    if (hasValue(jsObject.styleId)) {
        dotNetWMTSSublayer.styleId = jsObject.styleId;
    }
    
    if (hasValue(jsObject.tileMatrixSetId)) {
        dotNetWMTSSublayer.tileMatrixSetId = jsObject.tileMatrixSetId;
    }
    
    if (hasValue(jsObject.title)) {
        dotNetWMTSSublayer.title = jsObject.title;
    }
    
    if (hasValue(jsObject.id)) {
        dotNetWMTSSublayer.wMTSSublayerId = jsObject.id;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetWMTSSublayer.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetWMTSSublayer.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetWMTSSublayer.id)) {
        jsObjectRefs[dotNetWMTSSublayer.id] ??= jsObject;
        arcGisObjectRefs[dotNetWMTSSublayer.id] ??= jsObject;
    }

    return dotNetWMTSSublayer;
}

