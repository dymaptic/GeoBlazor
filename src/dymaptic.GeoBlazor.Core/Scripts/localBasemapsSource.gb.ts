// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetLocalBasemapsSource } from './localBasemapsSource';
import LocalBasemapsSource from '@arcgis/core/widgets/BasemapGallery/support/LocalBasemapsSource';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsLocalBasemapsSourceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsLocalBasemapsSource = new LocalBasemapsSource();
    if (hasValue(dotNetObject.basemaps)) {
        let { buildJsBasemap } = await import('./basemap');
        jsLocalBasemapsSource.basemaps = await Promise.all(dotNetObject.basemaps.map(async i => await buildJsBasemap(i, layerId, viewId))) as any;
    }

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsLocalBasemapsSource);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLocalBasemapsSource;
    
    let dnInstantiatedObject = await buildDotNetLocalBasemapsSource(jsLocalBasemapsSource);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LocalBasemapsSource', e);
    }
    
    return jsLocalBasemapsSource;
}

export async function buildDotNetLocalBasemapsSourceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLocalBasemapsSource: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.basemaps)) {
            let { buildDotNetBasemap } = await import('./basemap');
            dotNetLocalBasemapsSource.basemaps = await Promise.all(jsObject.basemaps.map(async i => await buildDotNetBasemap(i)));
        }
        if (hasValue(jsObject.state)) {
            dotNetLocalBasemapsSource.state = jsObject.state;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLocalBasemapsSource.id = k;
                break;
            }
        }
    }

    return dotNetLocalBasemapsSource;
}

