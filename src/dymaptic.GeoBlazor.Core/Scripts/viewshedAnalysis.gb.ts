import { buildDotNetViewshedAnalysis } from './viewshedAnalysis';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import ViewshedAnalysis from '@arcgis/core/analysis/ViewshedAnalysis';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsViewshedAnalysisGenerated(dotNetObject: any): Promise<any> {
    let jsViewshedAnalysis = new ViewshedAnalysis();
    if (hasValue(dotNetObject.viewsheds)) {
        let { buildJsViewshed } = await import('./viewshed');
        jsViewshedAnalysis.viewsheds = await Promise.all(dotNetObject.viewsheds.map(async i => await buildJsViewshed(i, layerId, viewId))) as any;
    }

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsViewshedAnalysis);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsViewshedAnalysis;
    
    let dnInstantiatedObject = await buildDotNetViewshedAnalysis(jsViewshedAnalysis);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ViewshedAnalysis', e);
    }
    
    return jsViewshedAnalysis;
}
export async function buildDotNetViewshedAnalysisGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetViewshedAnalysis: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.viewsheds)) {
            let { buildDotNetViewshed } = await import('./viewshed');
            dotNetViewshedAnalysis.viewsheds = await Promise.all(jsObject.viewsheds.map(async i => await buildDotNetViewshed(i)));
        }
        if (hasValue(jsObject.type)) {
            dotNetViewshedAnalysis.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetViewshedAnalysis.id = k;
                break;
            }
        }
    }

    return dotNetViewshedAnalysis;
}

