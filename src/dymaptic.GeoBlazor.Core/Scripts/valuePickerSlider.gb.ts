// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ValuePickerSlider from '@arcgis/core/widgets/ValuePicker/ValuePickerSlider';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetValuePickerSlider } from './valuePickerSlider';

export async function buildJsValuePickerSliderGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.hasLabelFormatFunction) && dotNetObject.hasLabelFormatFunction) {
        properties.labelFormatFunction = async (value,
        type,
        index) => {

            let func = new Function('value',
            'type',
            'index', dotNetObject.labelFormatFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }
    if (hasValue(dotNetObject.visibleElements)) {
        let { buildJsValuePickerSliderVisibleElements } = await import('./valuePickerSliderVisibleElements');
        properties.visibleElements = await buildJsValuePickerSliderVisibleElements(dotNetObject.visibleElements, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.labels)) {
        properties.labels = dotNetObject.labels;
    }
    if (hasValue(dotNetObject.majorTicks)) {
        properties.majorTicks = dotNetObject.majorTicks;
    }
    if (hasValue(dotNetObject.max)) {
        properties.max = dotNetObject.max;
    }
    if (hasValue(dotNetObject.min)) {
        properties.min = dotNetObject.min;
    }
    if (hasValue(dotNetObject.minorTicks)) {
        properties.minorTicks = dotNetObject.minorTicks;
    }
    if (hasValue(dotNetObject.reversed)) {
        properties.reversed = dotNetObject.reversed;
    }
    if (hasValue(dotNetObject.steps)) {
        properties.steps = dotNetObject.steps;
    }
    let jsValuePickerSlider = new ValuePickerSlider(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsValuePickerSlider);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsValuePickerSlider;
    
    let { buildDotNetValuePickerSlider } = await import('./valuePickerSlider');
    let dnInstantiatedObject = await buildDotNetValuePickerSlider(jsValuePickerSlider);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type ValuePickerSlider detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ValuePickerSlider', e);
    }
    
    return jsValuePickerSlider;
}


export async function buildDotNetValuePickerSliderGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetValuePickerSlider: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.visibleElements)) {
        let { buildDotNetValuePickerSliderVisibleElements } = await import('./valuePickerSliderVisibleElements');
        dotNetValuePickerSlider.visibleElements = await buildDotNetValuePickerSliderVisibleElements(jsObject.visibleElements);
    }
    if (hasValue(jsObject.labelFormatFunction)) {
        dotNetValuePickerSlider.labelFormatFunction = jsObject.labelFormatFunction;
    }
    if (hasValue(jsObject.labels)) {
        dotNetValuePickerSlider.labels = jsObject.labels;
    }
    if (hasValue(jsObject.majorTicks)) {
        dotNetValuePickerSlider.majorTicks = jsObject.majorTicks;
    }
    if (hasValue(jsObject.max)) {
        dotNetValuePickerSlider.max = jsObject.max;
    }
    if (hasValue(jsObject.min)) {
        dotNetValuePickerSlider.min = jsObject.min;
    }
    if (hasValue(jsObject.minorTicks)) {
        dotNetValuePickerSlider.minorTicks = jsObject.minorTicks;
    }
    if (hasValue(jsObject.reversed)) {
        dotNetValuePickerSlider.reversed = jsObject.reversed;
    }
    if (hasValue(jsObject.steps)) {
        dotNetValuePickerSlider.steps = jsObject.steps;
    }
    if (hasValue(jsObject.type)) {
        dotNetValuePickerSlider.type = jsObject.type;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetValuePickerSlider.id = geoBlazorId;
    }

    return dotNetValuePickerSlider;
}

