// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ValuePickerCollection from '@arcgis/core/widgets/ValuePicker/ValuePickerCollection';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetValuePickerCollection } from './valuePickerCollection';

export async function buildJsValuePickerCollectionGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsValuePickerCollection: any = {};

    if (hasValue(dotNetObject.collection)) {
        jsValuePickerCollection.collection = dotNetObject.collection;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsValuePickerCollection);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsValuePickerCollection;
    
    return jsValuePickerCollection;
}


export async function buildDotNetValuePickerCollectionGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetValuePickerCollection: any = {};
    
    if (hasValue(jsObject.collection)) {
        dotNetValuePickerCollection.collection = removeCircularReferences(jsObject.collection);
    }
    
    if (hasValue(jsObject.type)) {
        dotNetValuePickerCollection.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetValuePickerCollection.id = geoBlazorId;
    }

    return dotNetValuePickerCollection;
}

