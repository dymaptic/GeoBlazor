// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import FindImagesResult from '@arcgis/core/rest/support/FindImagesResult';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetFindImagesResult } from './findImagesResult';

export async function buildJsFindImagesResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.images)) {
        let { buildJsImageInspectionInfo } = await import('./imageInspectionInfo');
        properties.images = await Promise.all(dotNetObject.images.map(async i => await buildJsImageInspectionInfo(i, layerId, viewId))) as any;
    }

    let jsFindImagesResult = new FindImagesResult(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFindImagesResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFindImagesResult;
    
    return jsFindImagesResult;
}


export async function buildDotNetFindImagesResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsFindImagesResult } = await import('./findImagesResult');
        jsComponentRef = await buildJsFindImagesResult(jsObject, layerId, viewId);
    }
    
    let dotNetFindImagesResult: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.images)) {
        let { buildDotNetImageInspectionInfo } = await import('./imageInspectionInfo');
        dotNetFindImagesResult.images = await Promise.all(jsObject.images.map(async i => await buildDotNetImageInspectionInfo(i, layerId, viewId)));
    }

    return dotNetFindImagesResult;
}

