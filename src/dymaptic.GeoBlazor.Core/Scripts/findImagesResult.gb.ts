import { buildDotNetFindImagesResult } from './findImagesResult';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import FindImagesResult from '@arcgis/core/rest/support/FindImagesResult';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsFindImagesResultGenerated(dotNetObject: any): Promise<any> {
    let jsFindImagesResult = new FindImagesResult();
    if (hasValue(dotNetObject.images)) {
        let { buildJsImageInspectionInfo } = await import('./imageInspectionInfo');
        jsFindImagesResult.images = await Promise.all(dotNetObject.images.map(async i => await buildJsImageInspectionInfo(i, layerId, viewId))) as any;
    }

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsFindImagesResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFindImagesResult;
    
    let dnInstantiatedObject = await buildDotNetFindImagesResult(jsFindImagesResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FindImagesResult', e);
    }
    
    return jsFindImagesResult;
}
export async function buildDotNetFindImagesResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFindImagesResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.images)) {
            let { buildDotNetImageInspectionInfo } = await import('./imageInspectionInfo');
            dotNetFindImagesResult.images = await Promise.all(jsObject.images.map(async i => await buildDotNetImageInspectionInfo(i)));
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFindImagesResult.id = k;
                break;
            }
        }
    }

    return dotNetFindImagesResult;
}

