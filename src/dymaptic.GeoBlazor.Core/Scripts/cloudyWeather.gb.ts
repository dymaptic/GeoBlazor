// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import CloudyWeather from '@arcgis/core/views/3d/environment/CloudyWeather';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetCloudyWeather } from './cloudyWeather';

export async function buildJsCloudyWeatherGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.cloudCover)) {
        properties.cloudCover = dotNetObject.cloudCover;
    }
    let jsCloudyWeather = new CloudyWeather(properties);
    
    jsObjectRefs[dotNetObject.id] = jsCloudyWeather;
    arcGisObjectRefs[dotNetObject.id] = jsCloudyWeather;
    
    return jsCloudyWeather;
}


export async function buildDotNetCloudyWeatherGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCloudyWeather: any = {};
    
    if (hasValue(jsObject.cloudCover)) {
        dotNetCloudyWeather.cloudCover = jsObject.cloudCover;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetCloudyWeather.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCloudyWeather.id = geoBlazorId;
    }

    return dotNetCloudyWeather;
}

