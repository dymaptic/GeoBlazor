// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetFileLink } from './fileLink';

export async function buildJsFileLinkGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsFileLink: any = {};

    if (hasValue(dotNetObject.count)) {
        jsFileLink.count = dotNetObject.count;
    }
    if (hasValue(dotNetObject.error)) {
        jsFileLink.error = dotNetObject.error;
    }
    if (hasValue(dotNetObject.extension)) {
        jsFileLink.extension = dotNetObject.extension;
    }
    if (hasValue(dotNetObject.name)) {
        jsFileLink.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.state)) {
        jsFileLink.state = dotNetObject.state;
    }
    if (hasValue(dotNetObject.url)) {
        jsFileLink.url = dotNetObject.url;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFileLink);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFileLink;
    
    return jsFileLink;
}


export async function buildDotNetFileLinkGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFileLink: any = {};
    
    if (hasValue(jsObject.count)) {
        dotNetFileLink.count = jsObject.count;
    }
    
    if (hasValue(jsObject.error)) {
        dotNetFileLink.error = jsObject.error;
    }
    
    if (hasValue(jsObject.extension)) {
        dotNetFileLink.extension = jsObject.extension;
    }
    
    if (hasValue(jsObject.name)) {
        dotNetFileLink.name = jsObject.name;
    }
    
    if (hasValue(jsObject.state)) {
        dotNetFileLink.state = jsObject.state;
    }
    
    if (hasValue(jsObject.url)) {
        dotNetFileLink.url = jsObject.url;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetFileLink.id = geoBlazorId;
    }

    return dotNetFileLink;
}

