// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import MediaContent from '@arcgis/core/popup/content/MediaContent';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class MediaPopupContentGenerated implements IPropertyWrapper {
    public component: MediaContent;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: MediaContent) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getMediaInfos(): Promise<any> {
        if (!hasValue(this.component.mediaInfos)) {
            return null;
        }
        
        let { buildDotNetMediaInfo } = await import('./mediaInfo');
        return await Promise.all(this.component.mediaInfos.map(async i => await buildDotNetMediaInfo(i)));
    }
    
    async setMediaInfos(value: any): Promise<void> {
        let { buildJsMediaInfo } = await import('./mediaInfo');
        this.component.mediaInfos = await Promise.all(value.map(async i => await buildJsMediaInfo(i))) as any;
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsMediaPopupContentGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsMediaContent = new MediaContent();
    if (hasValue(dotNetObject.mediaInfos)) {
        let { buildJsMediaInfo } = await import('./jsBuilder');
        jsMediaContent.mediaInfos = dotNetObject.mediaInfos.map(i => buildJsMediaInfo(i)) as any;
    }

    if (hasValue(dotNetObject.activeMediaInfoIndex)) {
        jsMediaContent.activeMediaInfoIndex = dotNetObject.activeMediaInfoIndex;
    }
    if (hasValue(dotNetObject.description)) {
        jsMediaContent.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.title)) {
        jsMediaContent.title = dotNetObject.title;
    }
    let { default: MediaPopupContentWrapper } = await import('./mediaPopupContent');
    let mediaPopupContentWrapper = new MediaPopupContentWrapper(jsMediaContent);
    mediaPopupContentWrapper.geoBlazorId = dotNetObject.id;
    mediaPopupContentWrapper.viewId = viewId;
    mediaPopupContentWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(mediaPopupContentWrapper);
    jsObjectRefs[dotNetObject.id] = mediaPopupContentWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsMediaContent;
    
    let dnInstantiatedObject = await buildDotNetMediaPopupContent(jsMediaContent);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for MediaPopupContent', e);
    }
    
    return jsMediaContent;
}

export async function buildDotNetMediaPopupContentGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMediaPopupContent: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.mediaInfos)) {
            let { buildDotNetMediaInfo } = await import('./mediaInfo');
            dotNetMediaPopupContent.mediaInfos = await Promise.all(jsObject.mediaInfos.map(async i => await buildDotNetMediaInfo(i)));
        }
        if (hasValue(jsObject.activeMediaInfoIndex)) {
            dotNetMediaPopupContent.activeMediaInfoIndex = jsObject.activeMediaInfoIndex;
        }
        if (hasValue(jsObject.description)) {
            dotNetMediaPopupContent.description = jsObject.description;
        }
        if (hasValue(jsObject.title)) {
            dotNetMediaPopupContent.title = jsObject.title;
        }
        if (hasValue(jsObject.type)) {
            dotNetMediaPopupContent.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetMediaPopupContent.id = k;
                break;
            }
        }
    }

    return dotNetMediaPopupContent;
}

