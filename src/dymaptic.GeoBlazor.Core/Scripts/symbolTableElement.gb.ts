// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetSymbolTableElement } from './symbolTableElement';
import SymbolTableElement = __esri.SymbolTableElement;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsSymbolTableElementGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSymbolTableElement: any = {}

    if (hasValue(dotNetObject.infos)) {
        jsSymbolTableElement.infos = dotNetObject.infos;
    }
    if (hasValue(dotNetObject.legendType)) {
        jsSymbolTableElement.legendType = dotNetObject.legendType;
    }
    if (hasValue(dotNetObject.title)) {
        jsSymbolTableElement.title = dotNetObject.title;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsSymbolTableElement);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSymbolTableElement;
    
    let dnInstantiatedObject = await buildDotNetSymbolTableElement(jsSymbolTableElement);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SymbolTableElement', e);
    }
    
    return jsSymbolTableElement;
}

export async function buildDotNetSymbolTableElementGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSymbolTableElement: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.infos)) {
            dotNetSymbolTableElement.infos = jsObject.infos;
        }
        if (hasValue(jsObject.legendType)) {
            dotNetSymbolTableElement.legendType = jsObject.legendType;
        }
        if (hasValue(jsObject.title)) {
            dotNetSymbolTableElement.title = jsObject.title;
        }
        if (hasValue(jsObject.type)) {
            dotNetSymbolTableElement.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSymbolTableElement.id = k;
                break;
            }
        }
    }

    return dotNetSymbolTableElement;
}

