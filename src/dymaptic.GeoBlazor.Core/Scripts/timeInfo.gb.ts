// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import TimeInfo from '@arcgis/core/layers/support/TimeInfo';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetTimeInfo } from './timeInfo';

export async function buildJsTimeInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.fullTimeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.fullTimeExtent = await buildJsTimeExtent(dotNetObject.fullTimeExtent, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.interval)) {
        let { buildJsTimeInterval } = await import('./timeInterval');
        properties.interval = await buildJsTimeInterval(dotNetObject.interval, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.endField)) {
        properties.endField = dotNetObject.endField;
    }
    if (hasValue(dotNetObject.startField)) {
        properties.startField = dotNetObject.startField;
    }
    if (hasValue(dotNetObject.stops)) {
        properties.stops = dotNetObject.stops;
    }
    if (hasValue(dotNetObject.timeZone)) {
        properties.timeZone = dotNetObject.timeZone;
    }
    if (hasValue(dotNetObject.trackIdField)) {
        properties.trackIdField = dotNetObject.trackIdField;
    }
    let jsTimeInfo = new TimeInfo(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsTimeInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTimeInfo;
    
    let { buildDotNetTimeInfo } = await import('./timeInfo');
    let dnInstantiatedObject = await buildDotNetTimeInfo(jsTimeInfo);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type TimeInfo detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TimeInfo', e);
    }
    
    return jsTimeInfo;
}


export async function buildDotNetTimeInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTimeInfo: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.fullTimeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetTimeInfo.fullTimeExtent = buildDotNetTimeExtent(jsObject.fullTimeExtent);
    }
    if (hasValue(jsObject.interval)) {
        let { buildDotNetTimeInterval } = await import('./timeInterval');
        dotNetTimeInfo.interval = await buildDotNetTimeInterval(jsObject.interval);
    }
    if (hasValue(jsObject.endField)) {
        dotNetTimeInfo.endField = jsObject.endField;
    }
    if (hasValue(jsObject.startField)) {
        dotNetTimeInfo.startField = jsObject.startField;
    }
    if (hasValue(jsObject.stops)) {
        dotNetTimeInfo.stops = jsObject.stops;
    }
    if (hasValue(jsObject.timeZone)) {
        dotNetTimeInfo.timeZone = jsObject.timeZone;
    }
    if (hasValue(jsObject.trackIdField)) {
        dotNetTimeInfo.trackIdField = jsObject.trackIdField;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetTimeInfo.id = geoBlazorId;
    }

    return dotNetTimeInfo;
}

