// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import TimeInfo from '@arcgis/core/layers/support/TimeInfo';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class TimeInfoGenerated implements IPropertyWrapper {
    public component: TimeInfo;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: TimeInfo) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getFullTimeExtent(): Promise<any> {
        if (!hasValue(this.component.fullTimeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.component.fullTimeExtent);
    }
    async setFullTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.component.fullTimeExtent = await  buildJsTimeExtent(value, this.layerId, this.viewId);
    }
    async getInterval(): Promise<any> {
        if (!hasValue(this.component.interval)) {
            return null;
        }
        
        let { buildDotNetTimeInterval } = await import('./timeInterval');
        return await buildDotNetTimeInterval(this.component.interval);
    }
    async setInterval(value: any): Promise<void> {
        let { buildJsTimeInterval } = await import('./timeInterval');
        this.component.interval = await  buildJsTimeInterval(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsTimeInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTimeInfo = new TimeInfo();
    if (hasValue(dotNetObject.fullTimeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        jsTimeInfo.fullTimeExtent = await buildJsTimeExtent(dotNetObject.fullTimeExtent, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.interval)) {
        let { buildJsTimeInterval } = await import('./timeInterval');
        jsTimeInfo.interval = await buildJsTimeInterval(dotNetObject.interval, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.endField)) {
        jsTimeInfo.endField = dotNetObject.endField;
    }
    if (hasValue(dotNetObject.startField)) {
        jsTimeInfo.startField = dotNetObject.startField;
    }
    if (hasValue(dotNetObject.stops)) {
        jsTimeInfo.stops = dotNetObject.stops;
    }
    if (hasValue(dotNetObject.timeZone)) {
        jsTimeInfo.timeZone = dotNetObject.timeZone;
    }
    if (hasValue(dotNetObject.trackIdField)) {
        jsTimeInfo.trackIdField = dotNetObject.trackIdField;
    }
    let { default: TimeInfoWrapper } = await import('./timeInfo');
    let timeInfoWrapper = new TimeInfoWrapper(jsTimeInfo);
    timeInfoWrapper.geoBlazorId = dotNetObject.id;
    timeInfoWrapper.viewId = viewId;
    timeInfoWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(timeInfoWrapper);
    jsObjectRefs[dotNetObject.id] = timeInfoWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsTimeInfo;
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TimeInfo', e);
    }
    
    return jsTimeInfo;
}

export async function buildDotNetTimeInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTimeInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.fullTimeExtent)) {
            let { buildDotNetTimeExtent } = await import('./timeExtent');
            dotNetTimeInfo.fullTimeExtent = buildDotNetTimeExtent(jsObject.fullTimeExtent);
        }
        if (hasValue(jsObject.interval)) {
            let { buildDotNetTimeInterval } = await import('./timeInterval');
            dotNetTimeInfo.interval = await buildDotNetTimeInterval(jsObject.interval);
        }
        if (hasValue(jsObject.endField)) {
            dotNetTimeInfo.endField = jsObject.endField;
        }
        if (hasValue(jsObject.startField)) {
            dotNetTimeInfo.startField = jsObject.startField;
        }
        if (hasValue(jsObject.stops)) {
            dotNetTimeInfo.stops = jsObject.stops;
        }
        if (hasValue(jsObject.timeZone)) {
            dotNetTimeInfo.timeZone = jsObject.timeZone;
        }
        if (hasValue(jsObject.trackIdField)) {
            dotNetTimeInfo.trackIdField = jsObject.trackIdField;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTimeInfo.id = k;
                break;
            }
        }
    }

    return dotNetTimeInfo;
}

