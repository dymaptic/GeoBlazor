// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetPieChartCreateRendererForClusteringParams } from './pieChartCreateRendererForClusteringParams';
import pieChartCreateRendererForClusteringParams = __esri.pieChartCreateRendererForClusteringParams;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsPieChartCreateRendererForClusteringParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jspieChartCreateRendererForClusteringParams: any = {}
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jspieChartCreateRendererForClusteringParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.defaultSymbolEnabled)) {
        jspieChartCreateRendererForClusteringParams.defaultSymbolEnabled = dotNetObject.defaultSymbolEnabled;
    }
    if (hasValue(dotNetObject.legendOptions)) {
        jspieChartCreateRendererForClusteringParams.legendOptions = dotNetObject.legendOptions;
    }
    if (hasValue(dotNetObject.shape)) {
        jspieChartCreateRendererForClusteringParams.shape = dotNetObject.shape;
    }
    if (hasValue(dotNetObject.signal)) {
        jspieChartCreateRendererForClusteringParams.signal = dotNetObject.signal;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jspieChartCreateRendererForClusteringParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jspieChartCreateRendererForClusteringParams;
    
    let dnInstantiatedObject = await buildDotNetPieChartCreateRendererForClusteringParams(jspieChartCreateRendererForClusteringParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PieChartCreateRendererForClusteringParams', e);
    }
    
    return jspieChartCreateRendererForClusteringParams;
}

export async function buildDotNetPieChartCreateRendererForClusteringParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPieChartCreateRendererForClusteringParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.defaultSymbolEnabled)) {
            dotNetPieChartCreateRendererForClusteringParams.defaultSymbolEnabled = jsObject.defaultSymbolEnabled;
        }
        if (hasValue(jsObject.legendOptions)) {
            dotNetPieChartCreateRendererForClusteringParams.legendOptions = jsObject.legendOptions;
        }
        if (hasValue(jsObject.shape)) {
            dotNetPieChartCreateRendererForClusteringParams.shape = jsObject.shape;
        }
        if (hasValue(jsObject.signal)) {
            dotNetPieChartCreateRendererForClusteringParams.signal = jsObject.signal;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPieChartCreateRendererForClusteringParams.id = k;
                break;
            }
        }
    }

    return dotNetPieChartCreateRendererForClusteringParams;
}

