// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import RasterClassBreaksResult = __esri.RasterClassBreaksResult;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class RasterClassBreaksResultGenerated implements IPropertyWrapper {
    public component: RasterClassBreaksResult;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: RasterClassBreaksResult) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getRenderer(): Promise<any> {
        if (!hasValue(this.component.renderer)) {
            return null;
        }
        
        let { buildDotNetClassBreaksRenderer } = await import('./classBreaksRenderer');
        return await buildDotNetClassBreaksRenderer(this.component.renderer);
    }
    async setRenderer(value: any): Promise<void> {
        let { buildJsClassBreaksRenderer } = await import('./classBreaksRenderer');
        this.component.renderer = await  buildJsClassBreaksRenderer(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsRasterClassBreaksResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsRasterClassBreaksResult: any = {}
    if (hasValue(dotNetObject.classBreaksResult)) {
        jsRasterClassBreaksResult.classBreaksResult = dotNetObject.classBreaksResult;
    }
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsClassBreaksRenderer } = await import('./classBreaksRenderer');
        jsRasterClassBreaksResult.renderer = await buildJsClassBreaksRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }


    let { default: RasterClassBreaksResultWrapper } = await import('./rasterClassBreaksResult');
    let rasterClassBreaksResultWrapper = new RasterClassBreaksResultWrapper(jsRasterClassBreaksResult);
    rasterClassBreaksResultWrapper.geoBlazorId = dotNetObject.id;
    rasterClassBreaksResultWrapper.viewId = viewId;
    rasterClassBreaksResultWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(rasterClassBreaksResultWrapper);
    jsObjectRefs[dotNetObject.id] = rasterClassBreaksResultWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsRasterClassBreaksResult;
    let { buildDotNetRasterClassBreaksResult } = await import('./rasterClassBreaksResult');
    let dnInstantiatedObject = await buildDotNetRasterClassBreaksResult(jsRasterClassBreaksResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RasterClassBreaksResult', e);
    }
    
    return jsRasterClassBreaksResult;
}
export async function buildDotNetRasterClassBreaksResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRasterClassBreaksResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetRasterClassBreaksResult.classBreaksResult = jsObject.classBreaksResult;
        if (hasValue(jsObject.renderer)) {
            let { buildDotNetClassBreaksRenderer } = await import('./classBreaksRenderer');
            dotNetRasterClassBreaksResult.renderer = await buildDotNetClassBreaksRenderer(jsObject.renderer);
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRasterClassBreaksResult.id = k;
                break;
            }
        }
    }

    return dotNetRasterClassBreaksResult;
}

