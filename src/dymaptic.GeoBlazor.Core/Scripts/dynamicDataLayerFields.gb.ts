// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetDynamicDataLayerFields } from './dynamicDataLayerFields';

export async function buildJsDynamicDataLayerFieldsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsDynamicDataLayerFields: any = {};

    if (hasValue(dotNetObject.alias)) {
        jsDynamicDataLayerFields.alias = dotNetObject.alias;
    }
    if (hasValue(dotNetObject.name)) {
        jsDynamicDataLayerFields.name = dotNetObject.name;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsDynamicDataLayerFields);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsDynamicDataLayerFields;
    
    return jsDynamicDataLayerFields;
}


export async function buildDotNetDynamicDataLayerFieldsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDynamicDataLayerFields: any = {};
    
    if (hasValue(jsObject.alias)) {
        dotNetDynamicDataLayerFields.alias = jsObject.alias;
    }
    
    if (hasValue(jsObject.name)) {
        dotNetDynamicDataLayerFields.name = jsObject.name;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetDynamicDataLayerFields.id = geoBlazorId;
    }

    return dotNetDynamicDataLayerFields;
}

