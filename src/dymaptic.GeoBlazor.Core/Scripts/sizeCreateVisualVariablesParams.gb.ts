// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetSizeCreateVisualVariablesParams } from './sizeCreateVisualVariablesParams';
import sizeCreateVisualVariablesParams = __esri.sizeCreateVisualVariablesParams;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsSizeCreateVisualVariablesParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jssizeCreateVisualVariablesParams: any = {}
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jssizeCreateVisualVariablesParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.axis)) {
        jssizeCreateVisualVariablesParams.axis = dotNetObject.axis;
    }
    if (hasValue(dotNetObject.field)) {
        jssizeCreateVisualVariablesParams.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.forBinning)) {
        jssizeCreateVisualVariablesParams.forBinning = dotNetObject.forBinning;
    }
    if (hasValue(dotNetObject.legendOptions)) {
        jssizeCreateVisualVariablesParams.legendOptions = dotNetObject.legendOptions;
    }
    if (hasValue(dotNetObject.maxValue)) {
        jssizeCreateVisualVariablesParams.maxValue = dotNetObject.maxValue;
    }
    if (hasValue(dotNetObject.minValue)) {
        jssizeCreateVisualVariablesParams.minValue = dotNetObject.minValue;
    }
    if (hasValue(dotNetObject.normalizationField)) {
        jssizeCreateVisualVariablesParams.normalizationField = dotNetObject.normalizationField;
    }
    if (hasValue(dotNetObject.referenceSizeOptions)) {
        jssizeCreateVisualVariablesParams.referenceSizeOptions = dotNetObject.referenceSizeOptions;
    }
    if (hasValue(dotNetObject.signal)) {
        jssizeCreateVisualVariablesParams.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.sizeOptimizationEnabled)) {
        jssizeCreateVisualVariablesParams.sizeOptimizationEnabled = dotNetObject.sizeOptimizationEnabled;
    }
    if (hasValue(dotNetObject.sizeScheme)) {
        jssizeCreateVisualVariablesParams.sizeScheme = dotNetObject.sizeScheme;
    }
    if (hasValue(dotNetObject.sqlExpression)) {
        jssizeCreateVisualVariablesParams.sqlExpression = dotNetObject.sqlExpression;
    }
    if (hasValue(dotNetObject.sqlWhere)) {
        jssizeCreateVisualVariablesParams.sqlWhere = dotNetObject.sqlWhere;
    }
    if (hasValue(dotNetObject.statistics)) {
        jssizeCreateVisualVariablesParams.statistics = dotNetObject.statistics;
    }
    if (hasValue(dotNetObject.theme)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedTheme } = dotNetObject.theme;
        jssizeCreateVisualVariablesParams.theme = sanitizedTheme;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        jssizeCreateVisualVariablesParams.valueExpression = dotNetObject.valueExpression;
    }
    if (hasValue(dotNetObject.valueExpressionTitle)) {
        jssizeCreateVisualVariablesParams.valueExpressionTitle = dotNetObject.valueExpressionTitle;
    }
    if (hasValue(dotNetObject.view)) {
        jssizeCreateVisualVariablesParams.view = dotNetObject.view;
    }
    if (hasValue(dotNetObject.worldScale)) {
        jssizeCreateVisualVariablesParams.worldScale = dotNetObject.worldScale;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jssizeCreateVisualVariablesParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jssizeCreateVisualVariablesParams;
    
    let dnInstantiatedObject = await buildDotNetSizeCreateVisualVariablesParams(jssizeCreateVisualVariablesParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SizeCreateVisualVariablesParams', e);
    }
    
    return jssizeCreateVisualVariablesParams;
}

export async function buildDotNetSizeCreateVisualVariablesParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSizeCreateVisualVariablesParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.axis)) {
            dotNetSizeCreateVisualVariablesParams.axis = jsObject.axis;
        }
        if (hasValue(jsObject.field)) {
            dotNetSizeCreateVisualVariablesParams.field = jsObject.field;
        }
        if (hasValue(jsObject.forBinning)) {
            dotNetSizeCreateVisualVariablesParams.forBinning = jsObject.forBinning;
        }
        if (hasValue(jsObject.legendOptions)) {
            dotNetSizeCreateVisualVariablesParams.legendOptions = jsObject.legendOptions;
        }
        if (hasValue(jsObject.maxValue)) {
            dotNetSizeCreateVisualVariablesParams.maxValue = jsObject.maxValue;
        }
        if (hasValue(jsObject.minValue)) {
            dotNetSizeCreateVisualVariablesParams.minValue = jsObject.minValue;
        }
        if (hasValue(jsObject.normalizationField)) {
            dotNetSizeCreateVisualVariablesParams.normalizationField = jsObject.normalizationField;
        }
        if (hasValue(jsObject.referenceSizeOptions)) {
            dotNetSizeCreateVisualVariablesParams.referenceSizeOptions = jsObject.referenceSizeOptions;
        }
        if (hasValue(jsObject.signal)) {
            dotNetSizeCreateVisualVariablesParams.signal = jsObject.signal;
        }
        if (hasValue(jsObject.sizeOptimizationEnabled)) {
            dotNetSizeCreateVisualVariablesParams.sizeOptimizationEnabled = jsObject.sizeOptimizationEnabled;
        }
        if (hasValue(jsObject.sizeScheme)) {
            dotNetSizeCreateVisualVariablesParams.sizeScheme = jsObject.sizeScheme;
        }
        if (hasValue(jsObject.sqlExpression)) {
            dotNetSizeCreateVisualVariablesParams.sqlExpression = jsObject.sqlExpression;
        }
        if (hasValue(jsObject.sqlWhere)) {
            dotNetSizeCreateVisualVariablesParams.sqlWhere = jsObject.sqlWhere;
        }
        if (hasValue(jsObject.statistics)) {
            dotNetSizeCreateVisualVariablesParams.statistics = jsObject.statistics;
        }
        if (hasValue(jsObject.theme)) {
            dotNetSizeCreateVisualVariablesParams.theme = jsObject.theme;
        }
        if (hasValue(jsObject.valueExpression)) {
            dotNetSizeCreateVisualVariablesParams.valueExpression = jsObject.valueExpression;
        }
        if (hasValue(jsObject.valueExpressionTitle)) {
            dotNetSizeCreateVisualVariablesParams.valueExpressionTitle = jsObject.valueExpressionTitle;
        }
        if (hasValue(jsObject.view)) {
            dotNetSizeCreateVisualVariablesParams.view = jsObject.view;
        }
        if (hasValue(jsObject.worldScale)) {
            dotNetSizeCreateVisualVariablesParams.worldScale = jsObject.worldScale;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSizeCreateVisualVariablesParams.id = k;
                break;
            }
        }
    }

    return dotNetSizeCreateVisualVariablesParams;
}

