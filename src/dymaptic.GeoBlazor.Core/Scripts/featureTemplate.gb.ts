// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import FeatureTemplate from '@arcgis/core/layers/support/FeatureTemplate';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FeatureTemplateGenerated implements IPropertyWrapper {
    public component: FeatureTemplate;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: FeatureTemplate) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getPrototype(): Promise<any> {
        let { buildDotNetGraphic } = await import('./graphic');
        return await buildDotNetGraphic(this.component.prototype, this.layerId, this.viewId);
    }
    async setPrototype(value: any): Promise<void> {
        let { buildJsGraphic } = await import('./graphic');
        this.component.prototype = await  buildJsGraphic(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsFeatureTemplateGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureTemplate = new FeatureTemplate();
    if (hasValue(dotNetObject.prototype)) {
        let { buildJsGraphic } = await import('./jsBuilder');
        jsFeatureTemplate.prototype = await buildJsGraphic(dotNetObject.prototype, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.description)) {
        jsFeatureTemplate.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.drawingTool)) {
        jsFeatureTemplate.drawingTool = dotNetObject.drawingTool;
    }
    if (hasValue(dotNetObject.name)) {
        jsFeatureTemplate.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.thumbnail)) {
        jsFeatureTemplate.thumbnail = dotNetObject.thumbnail;
    }
    let { default: FeatureTemplateWrapper } = await import('./featureTemplate');
    let featureTemplateWrapper = new FeatureTemplateWrapper(jsFeatureTemplate);
    featureTemplateWrapper.geoBlazorId = dotNetObject.id;
    featureTemplateWrapper.viewId = viewId;
    featureTemplateWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(featureTemplateWrapper);
    jsObjectRefs[dotNetObject.id] = featureTemplateWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureTemplate;
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureTemplate', e);
    }
    
    return jsFeatureTemplate;
}

export async function buildDotNetFeatureTemplateGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureTemplate: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.prototype)) {
            let { buildDotNetGraphic } = await import('./dotNetBuilder');
            dotNetFeatureTemplate.prototype = await buildDotNetGraphic(jsObject.prototype, layerId, viewId);
        }
        if (hasValue(jsObject.description)) {
            dotNetFeatureTemplate.description = jsObject.description;
        }
        if (hasValue(jsObject.drawingTool)) {
            dotNetFeatureTemplate.drawingTool = jsObject.drawingTool;
        }
        if (hasValue(jsObject.name)) {
            dotNetFeatureTemplate.name = jsObject.name;
        }
        if (hasValue(jsObject.thumbnail)) {
            dotNetFeatureTemplate.thumbnail = jsObject.thumbnail;
        }

    return dotNetFeatureTemplate;
}

