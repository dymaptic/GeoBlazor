// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetPredominanceRendererResult } from './predominanceRendererResult';

export async function buildJsPredominanceRendererResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jspredominanceRendererResult: any = {}
    if (hasValue(dotNetObject.opacity)) {
        let { buildJsOpacityVisualVariableResult } = await import('./opacityVisualVariableResult');
        jspredominanceRendererResult.opacity = await buildJsOpacityVisualVariableResult(dotNetObject.opacity, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.predominantCategoryInfos)) {
        let { buildJsTypeUniqueValueInfo } = await import('./typeUniqueValueInfo');
        jspredominanceRendererResult.predominantCategoryInfos = await Promise.all(dotNetObject.predominantCategoryInfos.map(async i => await buildJsTypeUniqueValueInfo(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsUniqueValueRenderer } = await import('./uniqueValueRenderer');
        jspredominanceRendererResult.renderer = await buildJsUniqueValueRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.size)) {
        let { buildJsSizeVisualVariableResult } = await import('./sizeVisualVariableResult');
        jspredominanceRendererResult.size = await buildJsSizeVisualVariableResult(dotNetObject.size, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.basemapId)) {
        jspredominanceRendererResult.basemapId = dotNetObject.basemapId;
    }
    if (hasValue(dotNetObject.basemapTheme)) {
        jspredominanceRendererResult.basemapTheme = dotNetObject.basemapTheme;
    }
    if (hasValue(dotNetObject.excludedCategoryInfos)) {
        jspredominanceRendererResult.excludedCategoryInfos = dotNetObject.excludedCategoryInfos;
    }
    if (hasValue(dotNetObject.predominanceScheme)) {
        jspredominanceRendererResult.predominanceScheme = dotNetObject.predominanceScheme;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jspredominanceRendererResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jspredominanceRendererResult;
    
    let dnInstantiatedObject = await buildDotNetPredominanceRendererResult(jspredominanceRendererResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PredominanceRendererResult', e);
    }
    
    return jspredominanceRendererResult;
}

export async function buildDotNetPredominanceRendererResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPredominanceRendererResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.opacity)) {
            let { buildDotNetOpacityVisualVariableResult } = await import('./opacityVisualVariableResult');
            dotNetPredominanceRendererResult.opacity = await buildDotNetOpacityVisualVariableResult(jsObject.opacity);
        }
        if (hasValue(jsObject.predominantCategoryInfos)) {
            let { buildDotNetTypeUniqueValueInfo } = await import('./typeUniqueValueInfo');
            dotNetPredominanceRendererResult.predominantCategoryInfos = await Promise.all(jsObject.predominantCategoryInfos.map(async i => await buildDotNetTypeUniqueValueInfo(i)));
        }
        if (hasValue(jsObject.renderer)) {
            let { buildDotNetUniqueValueRenderer } = await import('./uniqueValueRenderer');
            dotNetPredominanceRendererResult.renderer = await buildDotNetUniqueValueRenderer(jsObject.renderer);
        }
        if (hasValue(jsObject.size)) {
            let { buildDotNetSizeVisualVariableResult } = await import('./sizeVisualVariableResult');
            dotNetPredominanceRendererResult.size = await buildDotNetSizeVisualVariableResult(jsObject.size);
        }
        if (hasValue(jsObject.basemapId)) {
            dotNetPredominanceRendererResult.basemapId = jsObject.basemapId;
        }
        if (hasValue(jsObject.basemapTheme)) {
            dotNetPredominanceRendererResult.basemapTheme = jsObject.basemapTheme;
        }
        if (hasValue(jsObject.excludedCategoryInfos)) {
            dotNetPredominanceRendererResult.excludedCategoryInfos = jsObject.excludedCategoryInfos;
        }
        if (hasValue(jsObject.predominanceScheme)) {
            dotNetPredominanceRendererResult.predominanceScheme = jsObject.predominanceScheme;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPredominanceRendererResult.id = k;
                break;
            }
        }
    }

    return dotNetPredominanceRendererResult;
}

