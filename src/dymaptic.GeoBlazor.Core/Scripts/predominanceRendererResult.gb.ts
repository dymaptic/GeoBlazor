// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import predominanceRendererResult = __esri.predominanceRendererResult;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PredominanceRendererResultGenerated implements IPropertyWrapper {
    public component: predominanceRendererResult;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: predominanceRendererResult) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getRenderer(): Promise<any> {
        if (!hasValue(this.component.renderer)) {
            return null;
        }
        
        let { buildDotNetUniqueValueRenderer } = await import('./uniqueValueRenderer');
        return await buildDotNetUniqueValueRenderer(this.component.renderer);
    }
    async setRenderer(value: any): Promise<void> {
        let { buildJsUniqueValueRenderer } = await import('./uniqueValueRenderer');
        this.component.renderer = await  buildJsUniqueValueRenderer(value, this.layerId, this.viewId);
    }
    async getSize(): Promise<any> {
        if (!hasValue(this.component.size)) {
            return null;
        }
        
        let { buildDotNetSizeVisualVariableResult } = await import('./sizeVisualVariableResult');
        return await buildDotNetSizeVisualVariableResult(this.component.size);
    }
    async setSize(value: any): Promise<void> {
        let { buildJsSizeVisualVariableResult } = await import('./sizeVisualVariableResult');
        this.component.size = await  buildJsSizeVisualVariableResult(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsPredominanceRendererResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jspredominanceRendererResult: any = {}
    if (hasValue(dotNetObject.opacity)) {
        jspredominanceRendererResult.opacity = dotNetObject.opacityVisualVariableResult;
    }
    if (hasValue(dotNetObject.predominanceScheme)) {
        jspredominanceRendererResult.predominanceScheme = dotNetObject.iPredominanceScheme;
    }
    if (hasValue(dotNetObject.predominantCategoryInfos)) {
        jspredominanceRendererResult.predominantCategoryInfos = dotNetObject.typeUniqueValueInfo;
    }
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsUniqueValueRenderer } = await import('./uniqueValueRenderer');
        jspredominanceRendererResult.renderer = await buildJsUniqueValueRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.size)) {
        let { buildJsSizeVisualVariableResult } = await import('./sizeVisualVariableResult');
        jspredominanceRendererResult.size = await buildJsSizeVisualVariableResult(dotNetObject.size, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.basemapId)) {
        jspredominanceRendererResult.basemapId = dotNetObject.basemapId;
    }
    if (hasValue(dotNetObject.basemapTheme)) {
        jspredominanceRendererResult.basemapTheme = dotNetObject.basemapTheme;
    }
    if (hasValue(dotNetObject.excludedCategoryInfos)) {
        jspredominanceRendererResult.excludedCategoryInfos = dotNetObject.excludedCategoryInfos;
    }

    let { default: PredominanceRendererResultWrapper } = await import('./predominanceRendererResult');
    let predominanceRendererResultWrapper = new PredominanceRendererResultWrapper(jspredominanceRendererResult);
    predominanceRendererResultWrapper.geoBlazorId = dotNetObject.id;
    predominanceRendererResultWrapper.viewId = viewId;
    predominanceRendererResultWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(predominanceRendererResultWrapper);
    jsObjectRefs[dotNetObject.id] = predominanceRendererResultWrapper;
    arcGisObjectRefs[dotNetObject.id] = jspredominanceRendererResult;
    let { buildDotNetPredominanceRendererResult } = await import('./predominanceRendererResult');
    let dnInstantiatedObject = await buildDotNetPredominanceRendererResult(jspredominanceRendererResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PredominanceRendererResult', e);
    }
    
    return jspredominanceRendererResult;
}
export async function buildDotNetPredominanceRendererResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPredominanceRendererResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetPredominanceRendererResult.opacity = jsObject.opacity;
        dotNetPredominanceRendererResult.predominanceScheme = jsObject.predominanceScheme;
        dotNetPredominanceRendererResult.predominantCategoryInfos = jsObject.predominantCategoryInfos;
        if (hasValue(jsObject.renderer)) {
            let { buildDotNetUniqueValueRenderer } = await import('./uniqueValueRenderer');
            dotNetPredominanceRendererResult.renderer = await buildDotNetUniqueValueRenderer(jsObject.renderer);
        }
        if (hasValue(jsObject.size)) {
            let { buildDotNetSizeVisualVariableResult } = await import('./sizeVisualVariableResult');
            dotNetPredominanceRendererResult.size = await buildDotNetSizeVisualVariableResult(jsObject.size);
        }
        if (hasValue(jsObject.basemapId)) {
            dotNetPredominanceRendererResult.basemapId = jsObject.basemapId;
        }
        if (hasValue(jsObject.basemapTheme)) {
            dotNetPredominanceRendererResult.basemapTheme = jsObject.basemapTheme;
        }
        if (hasValue(jsObject.excludedCategoryInfos)) {
            dotNetPredominanceRendererResult.excludedCategoryInfos = jsObject.excludedCategoryInfos;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPredominanceRendererResult.id = k;
                break;
            }
        }
    }

    return dotNetPredominanceRendererResult;
}

