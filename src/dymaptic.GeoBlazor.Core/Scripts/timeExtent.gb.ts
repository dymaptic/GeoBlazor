// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import TimeExtent from '@arcgis/core/TimeExtent';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class TimeExtentGenerated implements IPropertyWrapper {
    public component: TimeExtent;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: TimeExtent) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async intersection(timeExtent: any): Promise<any> {
                let { buildJsTimeExtent } = await import('./timeExtent');
let jsTimeExtent = await buildJsTimeExtent(timeExtent, this.layerId, this.viewId) as any;
        let result = this.component.intersection(jsTimeExtent);
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(result);
    }

    async union(timeExtent: any): Promise<any> {
                let { buildJsTimeExtent } = await import('./timeExtent');
let jsTimeExtent = await buildJsTimeExtent(timeExtent, this.layerId, this.viewId) as any;
        let result = this.component.union(jsTimeExtent);
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(result);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsTimeExtentGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.end)) {
        properties.end = dotNetObject.end;
    }
    if (hasValue(dotNetObject.start)) {
        properties.start = dotNetObject.start;
    }
    let jsTimeExtent = new TimeExtent(properties);

    let { default: TimeExtentWrapper } = await import('./timeExtent');
    let timeExtentWrapper = new TimeExtentWrapper(jsTimeExtent);
    timeExtentWrapper.geoBlazorId = dotNetObject.id;
    timeExtentWrapper.viewId = viewId;
    timeExtentWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(timeExtentWrapper);
    jsObjectRefs[dotNetObject.id] = timeExtentWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsTimeExtent;
    let { buildDotNetTimeExtent } = await import('./timeExtent');
    let dnInstantiatedObject = buildDotNetTimeExtent(jsTimeExtent);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TimeExtent', e);
    }
    
    return jsTimeExtent;
}
