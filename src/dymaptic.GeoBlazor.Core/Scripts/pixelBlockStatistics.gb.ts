// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import PixelBlockStatistics = __esri.PixelBlockStatistics;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PixelBlockStatisticsGenerated implements IPropertyWrapper {
    public component: PixelBlockStatistics;
    public readonly geoBlazorId: string = '';

    constructor(component: PixelBlockStatistics) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}
export async function buildJsPixelBlockStatisticsGenerated(dotNetObject: any): Promise<any> {
    let jsPixelBlockStatistics = {
        maxValue: dotNetObject.maxValue,
        minValue: dotNetObject.minValue,
        noDataValue: dotNetObject.noDataValue,
    }
    let { default: PixelBlockStatisticsWrapper } = await import('./pixelBlockStatistics');
    let pixelBlockStatisticsWrapper = new PixelBlockStatisticsWrapper(jsPixelBlockStatistics);
    jsPixelBlockStatistics.id = dotNetObject.id;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(pixelBlockStatisticsWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = pixelBlockStatisticsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsPixelBlockStatistics;
    
    return jsPixelBlockStatistics;
}

export async function buildDotNetPixelBlockStatisticsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPixelBlockStatistics: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetPixelBlockStatistics.maxValue = jsObject.maxValue;
        dotNetPixelBlockStatistics.minValue = jsObject.minValue;
        dotNetPixelBlockStatistics.noDataValue = jsObject.noDataValue;
    return dotNetPixelBlockStatistics;
}

