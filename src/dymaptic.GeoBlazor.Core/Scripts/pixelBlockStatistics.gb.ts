// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetPixelBlockStatistics } from './pixelBlockStatistics';

export async function buildJsPixelBlockStatisticsGenerated(dotNetObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsPixelBlockStatistics: any = {};

    if (hasValue(dotNetObject.maxValue)) {
        jsPixelBlockStatistics.maxValue = dotNetObject.maxValue;
    }
    if (hasValue(dotNetObject.minValue)) {
        jsPixelBlockStatistics.minValue = dotNetObject.minValue;
    }
    if (hasValue(dotNetObject.noDataValue)) {
        jsPixelBlockStatistics.noDataValue = dotNetObject.noDataValue;
    }
    
    jsObjectRefs[dotNetObject.id] = jsPixelBlockStatistics;
    arcGisObjectRefs[dotNetObject.id] = jsPixelBlockStatistics;
    
    return jsPixelBlockStatistics;
}


export async function buildDotNetPixelBlockStatisticsGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPixelBlockStatistics: any = {};
    
    if (hasValue(jsObject.maxValue)) {
        dotNetPixelBlockStatistics.maxValue = jsObject.maxValue;
    }
    
    if (hasValue(jsObject.minValue)) {
        dotNetPixelBlockStatistics.minValue = jsObject.minValue;
    }
    
    if (hasValue(jsObject.noDataValue)) {
        dotNetPixelBlockStatistics.noDataValue = jsObject.noDataValue;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetPixelBlockStatistics.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetPixelBlockStatistics.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetPixelBlockStatistics.id)) {
        jsObjectRefs[dotNetPixelBlockStatistics.id] ??= jsObject;
        arcGisObjectRefs[dotNetPixelBlockStatistics.id] ??= jsObject;
    }

    return dotNetPixelBlockStatistics;
}

