// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import geometryService = __esri.geometryService;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class GeometryServiceGenerated implements IPropertyWrapper {
    public component: geometryService;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: geometryService) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async areasAndLengths(url: any,
        areasAndLengthsParameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsAreasAndLengthsParameters } = await import('./areasAndLengthsParameters');
        let jsAreasAndLengthsParameters = await buildJsAreasAndLengthsParameters(areasAndLengthsParameters, this.layerId, this.viewId) as any;
        return await this.component.areasAndLengths(url,
            jsAreasAndLengthsParameters,
            requestOptions);
    }

    async autoComplete(url: any,
        polygons: any,
        polylines: any,
        requestOptions: any): Promise<any> {
        let { buildJsPolygon } = await import('./polygon');
        let jsPolygons = buildJsPolygon(polygons) as any;
        let { buildJsPolyline } = await import('./polyline');
        let jsPolylines = buildJsPolyline(polylines) as any;
        return await this.component.autoComplete(url,
            jsPolygons,
            jsPolylines,
            requestOptions);
    }

    async buffer(url: any,
        bufferParameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsBufferParameters } = await import('./bufferParameters');
        let jsBufferParameters = await buildJsBufferParameters(bufferParameters, this.layerId, this.viewId) as any;
        return await this.component.buffer(url,
            jsBufferParameters,
            requestOptions);
    }

    async convexHull(url: any,
        geometries: any,
        requestOptions: any): Promise<any> {
        let { buildJsGeometry } = await import('./geometry');
        let jsGeometries = buildJsGeometry(geometries) as any;
        return await this.component.convexHull(url,
            jsGeometries,
            requestOptions);
    }

    async cut(url: any,
        geometries: any,
        cutter: any,
        requestOptions: any): Promise<any> {
        let { buildJsGeometry } = await import('./geometry');
        let jsGeometries = buildJsGeometry(geometries) as any;
        let { buildJsPolyline } = await import('./polyline');
        let jsCutter = buildJsPolyline(cutter) as any;
        return await this.component.cut(url,
            jsGeometries,
            jsCutter,
            requestOptions);
    }

    async densify(url: any,
        densifyParameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsDensifyParameters } = await import('./densifyParameters');
        let jsDensifyParameters = await buildJsDensifyParameters(densifyParameters, this.layerId, this.viewId) as any;
        return await this.component.densify(url,
            jsDensifyParameters,
            requestOptions);
    }

    async difference(url: any,
        geometries: any,
        geometry: any,
        requestOptions: any): Promise<any> {
        let { buildJsGeometry } = await import('./geometry');
        let jsGeometries = buildJsGeometry(geometries) as any;
        let { buildJsGeometry } = await import('./geometry');
        let jsGeometry = buildJsGeometry(geometry) as any;
        return await this.component.difference(url,
            jsGeometries,
            jsGeometry,
            requestOptions);
    }

    async distance(url: any,
        distanceParameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsDistanceParameters } = await import('./distanceParameters');
        let jsDistanceParameters = await buildJsDistanceParameters(distanceParameters, this.layerId, this.viewId) as any;
        return await this.component.distance(url,
            jsDistanceParameters,
            requestOptions);
    }

    async fromGeoCoordinateString(url: any,
        parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsGeometryServiceFromGeoCoordinateStringParams } = await import('./geometryServiceFromGeoCoordinateStringParams');
        let jsparameters = await buildJsGeometryServiceFromGeoCoordinateStringParams(parameters, this.layerId, this.viewId) as any;
        return await this.component.fromGeoCoordinateString(url,
            jsparameters,
            requestOptions);
    }

    async generalize(url: any,
        generalizeParameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsGeneralizeParameters } = await import('./generalizeParameters');
        let jsGeneralizeParameters = await buildJsGeneralizeParameters(generalizeParameters, this.layerId, this.viewId) as any;
        return await this.component.generalize(url,
            jsGeneralizeParameters,
            requestOptions);
    }

    async intersect(url: any,
        geometries: any,
        intersector: any,
        requestOptions: any): Promise<any> {
        let { buildJsGeometry } = await import('./geometry');
        let jsGeometries = buildJsGeometry(geometries) as any;
        let { buildJsGeometry } = await import('./geometry');
        let jsIntersector = buildJsGeometry(intersector) as any;
        return await this.component.intersect(url,
            jsGeometries,
            jsIntersector,
            requestOptions);
    }

    async labelPoints(url: any,
        polygons: any,
        requestOptions: any): Promise<any> {
        let { buildJsPolygon } = await import('./polygon');
        let jsPolygons = buildJsPolygon(polygons) as any;
        return await this.component.labelPoints(url,
            jsPolygons,
            requestOptions);
    }

    async lengths(url: any,
        lengthsParameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsLengthsParameters } = await import('./lengthsParameters');
        let jsLengthsParameters = await buildJsLengthsParameters(lengthsParameters, this.layerId, this.viewId) as any;
        return await this.component.lengths(url,
            jsLengthsParameters,
            requestOptions);
    }

    async offset(url: any,
        offsetParameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsOffsetParameters } = await import('./offsetParameters');
        let jsOffsetParameters = await buildJsOffsetParameters(offsetParameters, this.layerId, this.viewId) as any;
        return await this.component.offset(url,
            jsOffsetParameters,
            requestOptions);
    }

    async project(url: any,
        projectParameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsProjectParameters } = await import('./projectParameters');
        let jsProjectParameters = await buildJsProjectParameters(projectParameters, this.layerId, this.viewId) as any;
        return await this.component.project(url,
            jsProjectParameters,
            requestOptions);
    }

    async relation(url: any,
        relationParameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsRelationParameters } = await import('./relationParameters');
        let jsRelationParameters = await buildJsRelationParameters(relationParameters, this.layerId, this.viewId) as any;
        return await this.component.relation(url,
            jsRelationParameters,
            requestOptions);
    }

    async reshape(url: any,
        geometry: any,
        reshaper: any,
        requestOptions: any): Promise<any> {
        let { buildJsGeometry } = await import('./geometry');
        let jsGeometry = buildJsGeometry(geometry) as any;
        let { buildJsPolyline } = await import('./polyline');
        let jsReshaper = buildJsPolyline(reshaper) as any;
        return await this.component.reshape(url,
            jsGeometry,
            jsReshaper,
            requestOptions);
    }

    async simplify(url: any,
        geometries: any,
        requestOptions: any): Promise<any> {
        let { buildJsGeometry } = await import('./geometry');
        let jsGeometries = buildJsGeometry(geometries) as any;
        return await this.component.simplify(url,
            jsGeometries,
            requestOptions);
    }

    async toGeoCoordinateString(url: any,
        parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsGeometryServiceToGeoCoordinateStringParams } = await import('./geometryServiceToGeoCoordinateStringParams');
        let jsparameters = await buildJsGeometryServiceToGeoCoordinateStringParams(parameters, this.layerId, this.viewId) as any;
        return await this.component.toGeoCoordinateString(url,
            jsparameters,
            requestOptions);
    }

    async trimExtend(url: any,
        trimExtendParameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsTrimExtendParameters } = await import('./trimExtendParameters');
        let jsTrimExtendParameters = await buildJsTrimExtendParameters(trimExtendParameters, this.layerId, this.viewId) as any;
        return await this.component.trimExtend(url,
            jsTrimExtendParameters,
            requestOptions);
    }

    async union(url: any,
        geometries: any,
        requestOptions: any): Promise<any> {
        let { buildJsGeometry } = await import('./geometry');
        let jsGeometries = buildJsGeometry(geometries) as any;
        return await this.component.union(url,
            jsGeometries,
            requestOptions);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsGeometryServiceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsgeometryService: any = {}


    let { default: GeometryServiceWrapper } = await import('./geometryService');
    let geometryServiceWrapper = new GeometryServiceWrapper(jsgeometryService);
    geometryServiceWrapper.geoBlazorId = dotNetObject.id;
    geometryServiceWrapper.viewId = viewId;
    geometryServiceWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(geometryServiceWrapper);
    jsObjectRefs[dotNetObject.id] = geometryServiceWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsgeometryService;
    let { buildDotNetGeometryService } = await import('./geometryService');
    let dnInstantiatedObject = await buildDotNetGeometryService(jsgeometryService);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for GeometryService', e);
    }
    
    return jsgeometryService;
}
export async function buildDotNetGeometryServiceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGeometryService: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetGeometryService.id = k;
                break;
            }
        }
    }

    return dotNetGeometryService;
}

