// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetEnvelope } from './envelope';

export async function buildJsEnvelopeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsEnvelope: any = {};

    if (hasValue(dotNetObject.xmax)) {
        jsEnvelope.xmax = dotNetObject.xmax;
    }
    if (hasValue(dotNetObject.xmin)) {
        jsEnvelope.xmin = dotNetObject.xmin;
    }
    if (hasValue(dotNetObject.ymax)) {
        jsEnvelope.ymax = dotNetObject.ymax;
    }
    if (hasValue(dotNetObject.ymin)) {
        jsEnvelope.ymin = dotNetObject.ymin;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsEnvelope);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsEnvelope;
    
    return jsEnvelope;
}


export async function buildDotNetEnvelopeGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetEnvelope: any = {};
    
    if (hasValue(jsObject.xmax)) {
        dotNetEnvelope.xmax = jsObject.xmax;
    }
    
    if (hasValue(jsObject.xmin)) {
        dotNetEnvelope.xmin = jsObject.xmin;
    }
    
    if (hasValue(jsObject.ymax)) {
        dotNetEnvelope.ymax = jsObject.ymax;
    }
    
    if (hasValue(jsObject.ymin)) {
        dotNetEnvelope.ymin = jsObject.ymin;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetEnvelope.id = geoBlazorId;
    }

    return dotNetEnvelope;
}

