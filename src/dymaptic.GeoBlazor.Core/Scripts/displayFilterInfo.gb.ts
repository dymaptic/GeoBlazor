// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import DisplayFilterInfo from '@arcgis/core/layers/support/DisplayFilterInfo';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetDisplayFilterInfo } from './displayFilterInfo';

export async function buildJsDisplayFilterInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.activeFilterId)) {
        properties.activeFilterId = dotNetObject.activeFilterId;
    }
    if (hasValue(dotNetObject.filters) && dotNetObject.filters.length > 0) {
        properties.filters = dotNetObject.filters;
    }
    if (hasValue(dotNetObject.mode)) {
        properties.mode = dotNetObject.mode;
    }
    let jsDisplayFilterInfo = new DisplayFilterInfo(properties);
    
    jsObjectRefs[dotNetObject.id] = jsDisplayFilterInfo;
    arcGisObjectRefs[dotNetObject.id] = jsDisplayFilterInfo;
    
    return jsDisplayFilterInfo;
}


export async function buildDotNetDisplayFilterInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDisplayFilterInfo: any = {};
    
    if (hasValue(jsObject.activeFilterId)) {
        dotNetDisplayFilterInfo.activeFilterId = jsObject.activeFilterId;
    }
    
    if (hasValue(jsObject.filters)) {
        dotNetDisplayFilterInfo.filters = removeCircularReferences(jsObject.filters);
    }
    
    if (hasValue(jsObject.mode)) {
        dotNetDisplayFilterInfo.mode = removeCircularReferences(jsObject.mode);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetDisplayFilterInfo.id = geoBlazorId;
    }

    return dotNetDisplayFilterInfo;
}

