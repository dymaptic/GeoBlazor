// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import GraphicsLayerView = __esri.GraphicsLayerView;
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, generateSerializableJson } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class GraphicsLayerViewGenerated implements IPropertyWrapper {
    public component: GraphicsLayerView;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: GraphicsLayerView) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.highlightOptions)) {
            let { buildJsHighlightOptions } = await import('./highlightOptions');
            this.component.highlightOptions = await buildJsHighlightOptions(dotNetObject.highlightOptions) as any;
        }

        if (hasValue(dotNetObject.visible)) {
            this.component.visible = dotNetObject.visible;
        }
    }
    
    async highlight(target: any,
        options: any): Promise<any> {
        let { buildJsGraphic } = await import('./graphic');
        let jsTarget = buildJsGraphic(target) as any;
        return this.component.highlight(jsTarget,
            options);
    }

    async isFulfilled(): Promise<any> {
        return this.component.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.component.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.component.isResolved();
    }

    async queryGraphics(): Promise<any> {
        return await this.component.queryGraphics();
    }

    async when(callback: any,
        errback: any): Promise<any> {
        let result = await this.component.when(callback,
            errback);
        
        return generateSerializableJson(result);
    }

    // region properties
    
    async getHighlightOptions(): Promise<any> {
        if (!hasValue(this.component.highlightOptions)) {
            return null;
        }
        
        let { buildDotNetHighlightOptions } = await import('./highlightOptions');
        return await buildDotNetHighlightOptions(this.component.highlightOptions);
    }
    
    async setHighlightOptions(value: any): Promise<void> {
        let { buildJsHighlightOptions } = await import('./highlightOptions');
        this.component.highlightOptions = await  buildJsHighlightOptions(value);
    }
    
    async getLayer(): Promise<any> {
        if (!hasValue(this.component.layer)) {
            return null;
        }
        
        let { buildDotNetLayer } = await import('./layer');
        return await buildDotNetLayer(this.component.layer);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsGraphicsLayerViewGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsGraphicsLayerView: any = {};
    if (hasValue(dotNetObject.highlightOptions)) {
        let { buildJsHighlightOptions } = await import('./highlightOptions');
        jsGraphicsLayerView.highlightOptions = await buildJsHighlightOptions(dotNetObject.highlightOptions) as any;
    }

    if (hasValue(dotNetObject.visible)) {
        jsGraphicsLayerView.visible = dotNetObject.visible;
    }

    let { default: GraphicsLayerViewWrapper } = await import('./graphicsLayerView');
    let graphicsLayerViewWrapper = new GraphicsLayerViewWrapper(jsGraphicsLayerView);
    graphicsLayerViewWrapper.geoBlazorId = dotNetObject.id;
    graphicsLayerViewWrapper.viewId = viewId;
    graphicsLayerViewWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = graphicsLayerViewWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsGraphicsLayerView;
    
    return jsGraphicsLayerView;
}


export async function buildDotNetGraphicsLayerViewGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGraphicsLayerView: any = {};
    
    if (hasValue(jsObject.highlightOptions)) {
        let { buildDotNetHighlightOptions } = await import('./highlightOptions');
        dotNetGraphicsLayerView.highlightOptions = await buildDotNetHighlightOptions(jsObject.highlightOptions);
    }
    
    if (hasValue(jsObject.spatialReferenceSupported)) {
        dotNetGraphicsLayerView.spatialReferenceSupported = jsObject.spatialReferenceSupported;
    }
    
    if (hasValue(jsObject.suspended)) {
        dotNetGraphicsLayerView.suspended = jsObject.suspended;
    }
    
    if (hasValue(jsObject.updating)) {
        dotNetGraphicsLayerView.updating = jsObject.updating;
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetGraphicsLayerView.visible = jsObject.visible;
    }
    
    if (hasValue(jsObject.visibleAtCurrentScale)) {
        dotNetGraphicsLayerView.visibleAtCurrentScale = jsObject.visibleAtCurrentScale;
    }
    
    if (hasValue(jsObject.visibleAtCurrentTimeExtent)) {
        dotNetGraphicsLayerView.visibleAtCurrentTimeExtent = jsObject.visibleAtCurrentTimeExtent;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetGraphicsLayerView.id = geoBlazorId;
    }

    return dotNetGraphicsLayerView;
}

