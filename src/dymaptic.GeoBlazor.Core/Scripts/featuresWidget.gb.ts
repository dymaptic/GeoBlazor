// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Features from '@arcgis/core/widgets/Features';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FeaturesWidgetGenerated implements IPropertyWrapper {
    public widget: Features;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: Features) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    
    async blur(): Promise<void> {
        this.widget.blur();
    }

    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async clear(): Promise<void> {
        this.widget.clear();
    }

    async close(): Promise<void> {
        this.widget.close();
    }

    async fetchFeatures(screenPoint: any,
        options: any): Promise<any> {
        return await this.widget.fetchFeatures(screenPoint,
            options);
    }

    async focus(): Promise<void> {
        this.widget.focus();
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async next(): Promise<any> {
        let result = this.widget.next();
        let { buildDotNetFeaturesViewModel } = await import('./featuresViewModel');
        return await buildDotNetFeaturesViewModel(result);
    }

    async open(options: any): Promise<void> {
        let { buildJsFeaturesOpenOptions } = await import('./featuresOpenOptions');
        let jsOptions = await buildJsFeaturesOpenOptions(options, this.layerId, this.viewId) as any;
        this.widget.open(jsOptions);
    }

    async own(handleOrHandles: any): Promise<void> {
        let { buildJsWatchHandle } = await import('./watchHandle');
        let jsHandleOrHandles = await buildJsWatchHandle(handleOrHandles, this.layerId, this.viewId) as any;
        this.widget.own(jsHandleOrHandles);
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async previous(): Promise<any> {
        let result = this.widget.previous();
        let { buildDotNetFeaturesViewModel } = await import('./featuresViewModel');
        return await buildDotNetFeaturesViewModel(result);
    }

    async render(): Promise<any> {
        return this.widget.render();
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async triggerAction(actionIndex: any): Promise<void> {
        this.widget.triggerAction(actionIndex);
    }

    async when(callback: any,
        errback: any): Promise<any> {
        return await this.widget.when(callback,
            errback);
    }

    // region properties
    
    async getFeatures(): Promise<any> {
        if (!hasValue(this.widget.features)) {
            return null;
        }
        
        let { buildDotNetGraphic } = await import('./graphic');
        return this.widget.features!.map(i => buildDotNetGraphic(i));
    }
    
    async setFeatures(value: any): Promise<void> {
        let { buildJsGraphic } = await import('./graphic');
        this.widget.features = value.map(i => buildJsGraphic(i)) as any;
    }
    
    async getGoToOverride(): Promise<any> {
        if (!hasValue(this.widget.goToOverride)) {
            return null;
        }
        
        let { buildDotNetGoToOverride } = await import('./goToOverride');
        return await buildDotNetGoToOverride(this.widget.goToOverride);
    }
    async setGoToOverride(value: any): Promise<void> {
        let { buildJsGoToOverride } = await import('./goToOverride');
        this.widget.goToOverride =  buildJsGoToOverride(value, this.viewId);
    }
    async getSelectedFeature(): Promise<any> {
        if (!hasValue(this.widget.selectedFeature)) {
            return null;
        }
        
        let { buildDotNetGraphic } = await import('./graphic');
        return buildDotNetGraphic(this.widget.selectedFeature, this.layerId, this.viewId);
    }
    async getSelectedFeatureWidget(): Promise<any> {
        if (!hasValue(this.widget.selectedFeatureWidget)) {
            return null;
        }
        
        let { buildDotNetFeatureWidget } = await import('./featureWidget');
        return await buildDotNetFeatureWidget(this.widget.selectedFeatureWidget);
    }
    async getSpatialReference(): Promise<any> {
        if (!hasValue(this.widget.spatialReference)) {
            return null;
        }
        
        let { buildDotNetSpatialReference } = await import('./spatialReference');
        return buildDotNetSpatialReference(this.widget.spatialReference);
    }
    async setSpatialReference(value: any): Promise<void> {
        let { buildJsSpatialReference } = await import('./spatialReference');
        this.widget.spatialReference =  buildJsSpatialReference(value);
    }
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetFeaturesViewModel } = await import('./featuresViewModel');
        return await buildDotNetFeaturesViewModel(this.widget.viewModel);
    }
    async setViewModel(value: any): Promise<void> {
        let { buildJsFeaturesViewModel } = await import('./featuresViewModel');
        this.widget.viewModel = await  buildJsFeaturesViewModel(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsFeaturesWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatures = new Features();
    if (hasValue(dotNetObject.features)) {
        let { buildJsGraphic } = await import('./graphic');
        jsFeatures.features = dotNetObject.features.map(i => buildJsGraphic(i)) as any;
    }
    if (hasValue(dotNetObject.goToOverride)) {
        let { buildJsGoToOverride } = await import('./goToOverride');
        jsFeatures.goToOverride = buildJsGoToOverride(dotNetObject.goToOverride, viewId) as any;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        jsFeatures.spatialReference = buildJsSpatialReference(dotNetObject.spatialReference) as any;
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsFeaturesViewModel } = await import('./featuresViewModel');
        jsFeatures.viewModel = await buildJsFeaturesViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.container)) {
        jsFeatures.container = dotNetObject.container;
    }
    if (hasValue(dotNetObject.content)) {
        jsFeatures.content = dotNetObject.content;
    }
    if (hasValue(dotNetObject.headingLevel)) {
        jsFeatures.headingLevel = dotNetObject.headingLevel;
    }
    if (hasValue(dotNetObject.icon)) {
        jsFeatures.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.label)) {
        jsFeatures.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.map)) {
        jsFeatures.map = dotNetObject.map;
    }
    if (hasValue(dotNetObject.promises)) {
        jsFeatures.promises = dotNetObject.promises;
    }
    if (hasValue(dotNetObject.selectedFeatureIndex)) {
        jsFeatures.selectedFeatureIndex = dotNetObject.selectedFeatureIndex;
    }
    if (hasValue(dotNetObject.timeZone)) {
        jsFeatures.timeZone = dotNetObject.timeZone;
    }
    if (hasValue(dotNetObject.title)) {
        jsFeatures.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.view)) {
        jsFeatures.view = dotNetObject.view;
    }
    if (hasValue(dotNetObject.visibleElements)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedVisibleElements } = dotNetObject.visibleElements;
        jsFeatures.visibleElements = sanitizedVisibleElements;
    }
    if (hasValue(dotNetObject.widgetId)) {
        jsFeatures.id = dotNetObject.widgetId;
    }
    jsFeatures.on('trigger-action', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsTriggerAction', evt);
    });
    

    let { default: FeaturesWidgetWrapper } = await import('./featuresWidget');
    let featuresWidgetWrapper = new FeaturesWidgetWrapper(jsFeatures);
    featuresWidgetWrapper.geoBlazorId = dotNetObject.id;
    featuresWidgetWrapper.viewId = viewId;
    featuresWidgetWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(featuresWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = featuresWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsFeatures;
    let { buildDotNetFeaturesWidget } = await import('./featuresWidget');
    let dnInstantiatedObject = await buildDotNetFeaturesWidget(jsFeatures);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeaturesWidget', e);
    }
    
    return jsFeatures;
}

export async function buildDotNetFeaturesWidgetGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeaturesWidget: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.features)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetFeaturesWidget.features = jsObject.features.map(i => buildDotNetGraphic(i, layerId, viewId));
        }
        if (hasValue(jsObject.goToOverride)) {
            let { buildDotNetGoToOverride } = await import('./goToOverride');
            dotNetFeaturesWidget.goToOverride = await buildDotNetGoToOverride(jsObject.goToOverride);
        }
        if (hasValue(jsObject.selectedFeature)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetFeaturesWidget.selectedFeature = buildDotNetGraphic(jsObject.selectedFeature, layerId, viewId);
        }
        if (hasValue(jsObject.selectedFeatureWidget)) {
            let { buildDotNetFeatureWidget } = await import('./featureWidget');
            dotNetFeaturesWidget.selectedFeatureWidget = await buildDotNetFeatureWidget(jsObject.selectedFeatureWidget);
        }
        if (hasValue(jsObject.spatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetFeaturesWidget.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference);
        }
        if (hasValue(jsObject.viewModel)) {
            let { buildDotNetFeaturesViewModel } = await import('./featuresViewModel');
            dotNetFeaturesWidget.viewModel = await buildDotNetFeaturesViewModel(jsObject.viewModel);
        }
    if (hasValue(jsObject.active)) {
        dotNetFeaturesWidget.active = jsObject.active;
    }
    if (hasValue(jsObject.collapsed)) {
        dotNetFeaturesWidget.collapsed = jsObject.collapsed;
    }
    if (hasValue(jsObject.container)) {
        dotNetFeaturesWidget.container = jsObject.container;
    }
    if (hasValue(jsObject.content)) {
        dotNetFeaturesWidget.content = jsObject.content;
    }
    if (hasValue(jsObject.headingLevel)) {
        dotNetFeaturesWidget.headingLevel = jsObject.headingLevel;
    }
    if (hasValue(jsObject.icon)) {
        dotNetFeaturesWidget.icon = jsObject.icon;
    }
    if (hasValue(jsObject.label)) {
        dotNetFeaturesWidget.label = jsObject.label;
    }
    if (hasValue(jsObject.map)) {
        dotNetFeaturesWidget.map = jsObject.map;
    }
    if (hasValue(jsObject.promises)) {
        dotNetFeaturesWidget.promises = jsObject.promises;
    }
    if (hasValue(jsObject.selectedFeatureIndex)) {
        dotNetFeaturesWidget.selectedFeatureIndex = jsObject.selectedFeatureIndex;
    }
    if (hasValue(jsObject.timeZone)) {
        dotNetFeaturesWidget.timeZone = jsObject.timeZone;
    }
    if (hasValue(jsObject.title)) {
        dotNetFeaturesWidget.title = jsObject.title;
    }
    if (hasValue(jsObject.type)) {
        dotNetFeaturesWidget.type = jsObject.type;
    }
    if (hasValue(jsObject.view)) {
        dotNetFeaturesWidget.view = jsObject.view;
    }
    if (hasValue(jsObject.visibleElements)) {
        dotNetFeaturesWidget.visibleElements = jsObject.visibleElements;
    }
    if (hasValue(jsObject.id)) {
        dotNetFeaturesWidget.widgetId = jsObject.id;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFeaturesWidget.id = k;
                break;
            }
        }
    }

    return dotNetFeaturesWidget;
}

