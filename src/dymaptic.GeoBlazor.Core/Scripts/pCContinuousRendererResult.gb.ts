// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetPCContinuousRendererResult } from './pCContinuousRendererResult';
import PCContinuousRendererResult = __esri.PCContinuousRendererResult;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsPCContinuousRendererResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPCContinuousRendererResult: any = {}
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsPointCloudStretchRenderer } = await import('./pointCloudStretchRenderer');
        jsPCContinuousRendererResult.renderer = await buildJsPointCloudStretchRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.basemapId)) {
        jsPCContinuousRendererResult.basemapId = dotNetObject.basemapId;
    }
    if (hasValue(dotNetObject.basemapTheme)) {
        jsPCContinuousRendererResult.basemapTheme = dotNetObject.basemapTheme;
    }
    if (hasValue(dotNetObject.colorScheme)) {
        jsPCContinuousRendererResult.colorScheme = dotNetObject.colorScheme;
    }
    if (hasValue(dotNetObject.defaultValuesUsed)) {
        jsPCContinuousRendererResult.defaultValuesUsed = dotNetObject.defaultValuesUsed;
    }
    if (hasValue(dotNetObject.statistics)) {
        jsPCContinuousRendererResult.statistics = dotNetObject.statistics;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsPCContinuousRendererResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPCContinuousRendererResult;
    
    let dnInstantiatedObject = await buildDotNetPCContinuousRendererResult(jsPCContinuousRendererResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PCContinuousRendererResult', e);
    }
    
    return jsPCContinuousRendererResult;
}

export async function buildDotNetPCContinuousRendererResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPCContinuousRendererResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.renderer)) {
            let { buildDotNetPointCloudStretchRenderer } = await import('./pointCloudStretchRenderer');
            dotNetPCContinuousRendererResult.renderer = await buildDotNetPointCloudStretchRenderer(jsObject.renderer);
        }
        if (hasValue(jsObject.basemapId)) {
            dotNetPCContinuousRendererResult.basemapId = jsObject.basemapId;
        }
        if (hasValue(jsObject.basemapTheme)) {
            dotNetPCContinuousRendererResult.basemapTheme = jsObject.basemapTheme;
        }
        if (hasValue(jsObject.colorScheme)) {
            dotNetPCContinuousRendererResult.colorScheme = jsObject.colorScheme;
        }
        if (hasValue(jsObject.defaultValuesUsed)) {
            dotNetPCContinuousRendererResult.defaultValuesUsed = jsObject.defaultValuesUsed;
        }
        if (hasValue(jsObject.statistics)) {
            dotNetPCContinuousRendererResult.statistics = jsObject.statistics;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPCContinuousRendererResult.id = k;
                break;
            }
        }
    }

    return dotNetPCContinuousRendererResult;
}

