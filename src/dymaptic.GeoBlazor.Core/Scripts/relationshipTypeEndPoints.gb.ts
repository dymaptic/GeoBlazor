// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetRelationshipTypeEndPoints } from './relationshipTypeEndPoints';

export async function buildJsRelationshipTypeEndPointsGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsRelationshipTypeEndPoints: any = {};

    if (hasValue(dotNetObject.destinationEntityType)) {
        jsRelationshipTypeEndPoints.destinationEntityType = dotNetObject.destinationEntityType;
    }
    if (hasValue(dotNetObject.originEntityType)) {
        jsRelationshipTypeEndPoints.originEntityType = dotNetObject.originEntityType;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsRelationshipTypeEndPoints);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRelationshipTypeEndPoints;
    
    return jsRelationshipTypeEndPoints;
}


export async function buildDotNetRelationshipTypeEndPointsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRelationshipTypeEndPoints: any = {};
    
    if (hasValue(jsObject.destinationEntityType)) {
        dotNetRelationshipTypeEndPoints.destinationEntityType = jsObject.destinationEntityType;
    }
    
    if (hasValue(jsObject.originEntityType)) {
        dotNetRelationshipTypeEndPoints.originEntityType = jsObject.originEntityType;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetRelationshipTypeEndPoints.id = geoBlazorId;
    }

    return dotNetRelationshipTypeEndPoints;
}

