// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetSearchViewModelDefaultSymbols } from './searchViewModelDefaultSymbols';

export async function buildJsSearchViewModelDefaultSymbolsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsSearchViewModelDefaultSymbols: any = {};
    if (hasValue(dotNetObject.point)) {
        let { buildJsSymbol } = await import('./symbol');
        jsSearchViewModelDefaultSymbols.point = buildJsSymbol(dotNetObject.point, viewId) as any;
    }
    if (hasValue(dotNetObject.polygon)) {
        let { buildJsSymbol } = await import('./symbol');
        jsSearchViewModelDefaultSymbols.polygon = buildJsSymbol(dotNetObject.polygon, viewId) as any;
    }
    if (hasValue(dotNetObject.polyline)) {
        let { buildJsSymbol } = await import('./symbol');
        jsSearchViewModelDefaultSymbols.polyline = buildJsSymbol(dotNetObject.polyline, viewId) as any;
    }

    
    jsObjectRefs[dotNetObject.id] = jsSearchViewModelDefaultSymbols;
    arcGisObjectRefs[dotNetObject.id] = jsSearchViewModelDefaultSymbols;
    
    return jsSearchViewModelDefaultSymbols;
}


export async function buildDotNetSearchViewModelDefaultSymbolsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchViewModelDefaultSymbols: any = {};
    
    if (hasValue(jsObject.point)) {
        let { buildDotNetSymbol } = await import('./symbol');
        dotNetSearchViewModelDefaultSymbols.point = buildDotNetSymbol(jsObject.point, viewId);
    }
    
    if (hasValue(jsObject.polygon)) {
        let { buildDotNetSymbol } = await import('./symbol');
        dotNetSearchViewModelDefaultSymbols.polygon = buildDotNetSymbol(jsObject.polygon, viewId);
    }
    
    if (hasValue(jsObject.polyline)) {
        let { buildDotNetSymbol } = await import('./symbol');
        dotNetSearchViewModelDefaultSymbols.polyline = buildDotNetSymbol(jsObject.polyline, viewId);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSearchViewModelDefaultSymbols.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetSearchViewModelDefaultSymbols.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetSearchViewModelDefaultSymbols.id)) {
        jsObjectRefs[dotNetSearchViewModelDefaultSymbols.id] ??= jsObject;
        arcGisObjectRefs[dotNetSearchViewModelDefaultSymbols.id] ??= jsObject;
    }

    return dotNetSearchViewModelDefaultSymbols;
}

