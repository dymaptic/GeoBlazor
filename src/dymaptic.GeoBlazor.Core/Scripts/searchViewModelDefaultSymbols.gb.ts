// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetSearchViewModelDefaultSymbols } from './searchViewModelDefaultSymbols';
import SearchViewModelDefaultSymbols = __esri.SearchViewModelDefaultSymbols;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsSearchViewModelDefaultSymbolsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSearchViewModelDefaultSymbols: any = {}

    if (hasValue(dotNetObject.point)) {
        jsSearchViewModelDefaultSymbols.point = dotNetObject.point;
    }
    if (hasValue(dotNetObject.polygon)) {
        jsSearchViewModelDefaultSymbols.polygon = dotNetObject.polygon;
    }
    if (hasValue(dotNetObject.polyline)) {
        jsSearchViewModelDefaultSymbols.polyline = dotNetObject.polyline;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsSearchViewModelDefaultSymbols);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSearchViewModelDefaultSymbols;
    
    let dnInstantiatedObject = await buildDotNetSearchViewModelDefaultSymbols(jsSearchViewModelDefaultSymbols);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SearchViewModelDefaultSymbols', e);
    }
    
    return jsSearchViewModelDefaultSymbols;
}

export async function buildDotNetSearchViewModelDefaultSymbolsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchViewModelDefaultSymbols: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.point)) {
            dotNetSearchViewModelDefaultSymbols.point = jsObject.point;
        }
        if (hasValue(jsObject.polygon)) {
            dotNetSearchViewModelDefaultSymbols.polygon = jsObject.polygon;
        }
        if (hasValue(jsObject.polyline)) {
            dotNetSearchViewModelDefaultSymbols.polyline = jsObject.polyline;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSearchViewModelDefaultSymbols.id = k;
                break;
            }
        }
    }

    return dotNetSearchViewModelDefaultSymbols;
}

