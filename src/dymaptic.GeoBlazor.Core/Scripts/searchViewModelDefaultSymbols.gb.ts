// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetSearchViewModelDefaultSymbols } from './searchViewModelDefaultSymbols';

export async function buildJsSearchViewModelDefaultSymbolsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSearchViewModelDefaultSymbols: any = {};
    if (hasValue(dotNetObject.point)) {
        let { buildJsSymbol } = await import('./symbol');
        jsSearchViewModelDefaultSymbols.point = buildJsSymbol(dotNetObject.point) as any;
    }
    if (hasValue(dotNetObject.polygon)) {
        let { buildJsSymbol } = await import('./symbol');
        jsSearchViewModelDefaultSymbols.polygon = buildJsSymbol(dotNetObject.polygon) as any;
    }
    if (hasValue(dotNetObject.polyline)) {
        let { buildJsSymbol } = await import('./symbol');
        jsSearchViewModelDefaultSymbols.polyline = buildJsSymbol(dotNetObject.polyline) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsSearchViewModelDefaultSymbols);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSearchViewModelDefaultSymbols;
    
    let { buildDotNetSearchViewModelDefaultSymbols } = await import('./searchViewModelDefaultSymbols');
    let dnInstantiatedObject = await buildDotNetSearchViewModelDefaultSymbols(jsSearchViewModelDefaultSymbols);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type SearchViewModelDefaultSymbols detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SearchViewModelDefaultSymbols', e);
    }
    
    return jsSearchViewModelDefaultSymbols;
}


export async function buildDotNetSearchViewModelDefaultSymbolsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchViewModelDefaultSymbols: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.point)) {
        let { buildDotNetSymbol } = await import('./symbol');
        dotNetSearchViewModelDefaultSymbols.point = buildDotNetSymbol(jsObject.point);
    }
    if (hasValue(jsObject.polygon)) {
        let { buildDotNetSymbol } = await import('./symbol');
        dotNetSearchViewModelDefaultSymbols.polygon = buildDotNetSymbol(jsObject.polygon);
    }
    if (hasValue(jsObject.polyline)) {
        let { buildDotNetSymbol } = await import('./symbol');
        dotNetSearchViewModelDefaultSymbols.polyline = buildDotNetSymbol(jsObject.polyline);
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSearchViewModelDefaultSymbols.id = geoBlazorId;
    }

    return dotNetSearchViewModelDefaultSymbols;
}

