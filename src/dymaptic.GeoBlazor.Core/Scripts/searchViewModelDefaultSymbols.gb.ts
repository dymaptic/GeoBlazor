// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import SearchViewModelDefaultSymbols = __esri.SearchViewModelDefaultSymbols;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SearchViewModelDefaultSymbolsGenerated implements IPropertyWrapper {
    public component: SearchViewModelDefaultSymbols;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: SearchViewModelDefaultSymbols) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsSearchViewModelDefaultSymbolsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSearchViewModelDefaultSymbols: any = {}

    if (hasValue(dotNetObject.point)) {
        jsSearchViewModelDefaultSymbols.point = dotNetObject.point;
    }
    if (hasValue(dotNetObject.polygon)) {
        jsSearchViewModelDefaultSymbols.polygon = dotNetObject.polygon;
    }
    if (hasValue(dotNetObject.polyline)) {
        jsSearchViewModelDefaultSymbols.polyline = dotNetObject.polyline;
    }
    let { default: SearchViewModelDefaultSymbolsWrapper } = await import('./searchViewModelDefaultSymbols');
    let searchViewModelDefaultSymbolsWrapper = new SearchViewModelDefaultSymbolsWrapper(jsSearchViewModelDefaultSymbols);
    searchViewModelDefaultSymbolsWrapper.geoBlazorId = dotNetObject.id;
    searchViewModelDefaultSymbolsWrapper.viewId = viewId;
    searchViewModelDefaultSymbolsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(searchViewModelDefaultSymbolsWrapper);
    jsObjectRefs[dotNetObject.id] = searchViewModelDefaultSymbolsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsSearchViewModelDefaultSymbols;
    
    let { buildDotNetSearchViewModelDefaultSymbols } = await import('./searchViewModelDefaultSymbols');
    let dnInstantiatedObject = await buildDotNetSearchViewModelDefaultSymbols(jsSearchViewModelDefaultSymbols, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SearchViewModelDefaultSymbols', e);
    }
    
    return jsSearchViewModelDefaultSymbols;
}

export async function buildDotNetSearchViewModelDefaultSymbolsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchViewModelDefaultSymbols: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.point)) {
            dotNetSearchViewModelDefaultSymbols.point = jsObject.point;
        }
        if (hasValue(jsObject.polygon)) {
            dotNetSearchViewModelDefaultSymbols.polygon = jsObject.polygon;
        }
        if (hasValue(jsObject.polyline)) {
            dotNetSearchViewModelDefaultSymbols.polyline = jsObject.polyline;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSearchViewModelDefaultSymbols.id = k;
                break;
            }
        }
    }

    return dotNetSearchViewModelDefaultSymbols;
}

