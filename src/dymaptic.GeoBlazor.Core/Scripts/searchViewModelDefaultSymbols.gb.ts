// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetSearchViewModelDefaultSymbols } from './searchViewModelDefaultSymbols';

export async function buildJsSearchViewModelDefaultSymbolsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsSearchViewModelDefaultSymbols: any = {};
    if (hasValue(dotNetObject.point)) {
        jsSearchViewModelDefaultSymbols.point = dotNetObject.point;
    }
    if (hasValue(dotNetObject.polygon)) {
        jsSearchViewModelDefaultSymbols.polygon = dotNetObject.polygon;
    }
    if (hasValue(dotNetObject.polyline)) {
        jsSearchViewModelDefaultSymbols.polyline = dotNetObject.polyline;
    }

    
    jsObjectRefs[dotNetObject.id] = jsSearchViewModelDefaultSymbols;
    arcGisObjectRefs[dotNetObject.id] = jsSearchViewModelDefaultSymbols;
    
    return jsSearchViewModelDefaultSymbols;
}


export async function buildDotNetSearchViewModelDefaultSymbolsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchViewModelDefaultSymbols: any = {};
    
    if (hasValue(jsObject.point)) {
        dotNetSearchViewModelDefaultSymbols.point = jsObject.point;
    }
    
    if (hasValue(jsObject.polygon)) {
        dotNetSearchViewModelDefaultSymbols.polygon = jsObject.polygon;
    }
    
    if (hasValue(jsObject.polyline)) {
        dotNetSearchViewModelDefaultSymbols.polyline = jsObject.polyline;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSearchViewModelDefaultSymbols.id = geoBlazorId;
    }

    return dotNetSearchViewModelDefaultSymbols;
}

