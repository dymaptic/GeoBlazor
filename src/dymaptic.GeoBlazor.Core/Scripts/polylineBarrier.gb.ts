// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import PolylineBarrier from '@arcgis/core/rest/support/PolylineBarrier';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PolylineBarrierGenerated implements IPropertyWrapper {
    public component: PolylineBarrier;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: PolylineBarrier) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async toGraphic(): Promise<any> {
        return this.component.toGraphic();
    }

    // region properties
    
    async getGeometry(): Promise<any> {
        if (!hasValue(this.component.geometry)) {
            return null;
        }
        
        let { buildDotNetPoint } = await import('./point');
        return buildDotNetPoint(this.component.geometry);
    }
    async setGeometry(value: any): Promise<void> {
        let { buildJsPoint } = await import('./point');
        this.component.geometry =  buildJsPoint(value);
    }
    async getPopupTemplate(): Promise<any> {
        if (!hasValue(this.component.popupTemplate)) {
            return null;
        }
        
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        return await buildDotNetPopupTemplate(this.component.popupTemplate);
    }
    async setPopupTemplate(value: any): Promise<void> {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        this.component.popupTemplate =  buildJsPopupTemplate(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsPolylineBarrierGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPolylineBarrier = new PolylineBarrier();
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsPoint } = await import('./point');
        jsPolylineBarrier.geometry = buildJsPoint(dotNetObject.geometry) as any;
    }
    if (hasValue(dotNetObject.popupTemplate)) {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        jsPolylineBarrier.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.barrierType)) {
        jsPolylineBarrier.barrierType = dotNetObject.barrierType;
    }
    if (hasValue(dotNetObject.name)) {
        jsPolylineBarrier.name = dotNetObject.name;
    }

    let { default: PolylineBarrierWrapper } = await import('./polylineBarrier');
    let polylineBarrierWrapper = new PolylineBarrierWrapper(jsPolylineBarrier);
    polylineBarrierWrapper.geoBlazorId = dotNetObject.id;
    polylineBarrierWrapper.viewId = viewId;
    polylineBarrierWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(polylineBarrierWrapper);
    jsObjectRefs[dotNetObject.id] = polylineBarrierWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsPolylineBarrier;
    let { buildDotNetPolylineBarrier } = await import('./polylineBarrier');
    let dnInstantiatedObject = await buildDotNetPolylineBarrier(jsPolylineBarrier);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PolylineBarrier', e);
    }
    
    return jsPolylineBarrier;
}

export async function buildDotNetPolylineBarrierGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPolylineBarrier: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.geometry)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetPolylineBarrier.geometry = buildDotNetPoint(jsObject.geometry);
        }
        if (hasValue(jsObject.popupTemplate)) {
            let { buildDotNetPopupTemplate } = await import('./popupTemplate');
            dotNetPolylineBarrier.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
        }
    if (hasValue(jsObject.barrierType)) {
        dotNetPolylineBarrier.barrierType = jsObject.barrierType;
    }
    if (hasValue(jsObject.name)) {
        dotNetPolylineBarrier.name = jsObject.name;
    }
    if (hasValue(jsObject.type)) {
        dotNetPolylineBarrier.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPolylineBarrier.id = k;
                break;
            }
        }
    }

    return dotNetPolylineBarrier;
}

