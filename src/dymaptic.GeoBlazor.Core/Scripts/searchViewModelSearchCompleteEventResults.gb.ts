// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSearchViewModelSearchCompleteEventResults } from './searchViewModelSearchCompleteEventResults';

export async function buildJsSearchViewModelSearchCompleteEventResultsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSearchViewModelSearchCompleteEventResults: any = {};
    if (hasValue(dotNetObject.results)) {
        let { buildJsSearchResult } = await import('./searchResult');
        jsSearchViewModelSearchCompleteEventResults.results = await Promise.all(dotNetObject.results.map(async i => await buildJsSearchResult(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.source)) {
        jsSearchViewModelSearchCompleteEventResults.source = dotNetObject.source;
    }
    if (hasValue(dotNetObject.sourceIndex)) {
        jsSearchViewModelSearchCompleteEventResults.sourceIndex = dotNetObject.sourceIndex;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSearchViewModelSearchCompleteEventResults);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSearchViewModelSearchCompleteEventResults;
    
    let dnInstantiatedObject = await buildDotNetSearchViewModelSearchCompleteEventResults(jsSearchViewModelSearchCompleteEventResults);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SearchViewModelSearchCompleteEventResults', e);
    }
    
    return jsSearchViewModelSearchCompleteEventResults;
}

export async function buildDotNetSearchViewModelSearchCompleteEventResultsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchViewModelSearchCompleteEventResults: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.results)) {
            let { buildDotNetSearchResult } = await import('./searchResult');
            dotNetSearchViewModelSearchCompleteEventResults.results = jsObject.results.map(i => buildDotNetSearchResult(i));
        }
    if (hasValue(jsObject.source)) {
        dotNetSearchViewModelSearchCompleteEventResults.source = jsObject.source;
    }
    if (hasValue(jsObject.sourceIndex)) {
        dotNetSearchViewModelSearchCompleteEventResults.sourceIndex = jsObject.sourceIndex;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSearchViewModelSearchCompleteEventResults.id = k;
                break;
            }
        }
    }

    return dotNetSearchViewModelSearchCompleteEventResults;
}

