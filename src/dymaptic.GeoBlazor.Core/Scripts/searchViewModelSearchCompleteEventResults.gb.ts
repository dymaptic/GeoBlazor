// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSearchViewModelSearchCompleteEventResults } from './searchViewModelSearchCompleteEventResults';

export async function buildJsSearchViewModelSearchCompleteEventResultsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsSearchViewModelSearchCompleteEventResults: any = {};
    if (hasValue(dotNetObject.results) && dotNetObject.results.length > 0) {
        let { buildJsSearchResult } = await import('./searchResult');
        jsSearchViewModelSearchCompleteEventResults.results = await Promise.all(dotNetObject.results.map(async i => await buildJsSearchResult(i))) as any;
    }

    if (hasValue(dotNetObject.source) && dotNetObject.source.length > 0) {
        jsSearchViewModelSearchCompleteEventResults.source = dotNetObject.source;
    }
    if (hasValue(dotNetObject.sourceIndex)) {
        jsSearchViewModelSearchCompleteEventResults.sourceIndex = dotNetObject.sourceIndex;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSearchViewModelSearchCompleteEventResults);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSearchViewModelSearchCompleteEventResults;
    
    return jsSearchViewModelSearchCompleteEventResults;
}


export async function buildDotNetSearchViewModelSearchCompleteEventResultsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchViewModelSearchCompleteEventResults: any = {};
    
    if (hasValue(jsObject.results)) {
        let { buildDotNetSearchResult } = await import('./searchResult');
        dotNetSearchViewModelSearchCompleteEventResults.results = jsObject.results.map(i => buildDotNetSearchResult(i));
    }
    
    if (hasValue(jsObject.source)) {
        dotNetSearchViewModelSearchCompleteEventResults.source = jsObject.source;
    }
    
    if (hasValue(jsObject.sourceIndex)) {
        dotNetSearchViewModelSearchCompleteEventResults.sourceIndex = jsObject.sourceIndex;
    }
    

    return dotNetSearchViewModelSearchCompleteEventResults;
}

