// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import geometryEngine = __esri.geometryEngine;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class GeometryEngineGenerated implements IPropertyWrapper {
    public component: geometryEngine;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: geometryEngine) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async intersectLinesToPoints(line1: any,
        line2: any): Promise<any> {
        let { buildJsPolyline } = await import('./polyline');
        let jsLine1 = buildJsPolyline(line1) as any;
        let { buildJsPolyline } = await import('./polyline');
        let jsLine2 = buildJsPolyline(line2) as any;
        return this.component.intersectLinesToPoints(jsLine1,
            jsLine2);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsGeometryEngineGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsgeometryEngine: any = {}


    let { default: GeometryEngineWrapper } = await import('./geometryEngine');
    let geometryEngineWrapper = new GeometryEngineWrapper(jsgeometryEngine);
    geometryEngineWrapper.geoBlazorId = dotNetObject.id;
    geometryEngineWrapper.viewId = viewId;
    geometryEngineWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(geometryEngineWrapper);
    jsObjectRefs[dotNetObject.id] = geometryEngineWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsgeometryEngine;
    let { buildDotNetGeometryEngine } = await import('./geometryEngine');
    let dnInstantiatedObject = await buildDotNetGeometryEngine(jsgeometryEngine);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for GeometryEngine', e);
    }
    
    return jsgeometryEngine;
}
export async function buildDotNetGeometryEngineGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGeometryEngine: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetGeometryEngine.id = k;
                break;
            }
        }
    }

    return dotNetGeometryEngine;
}

