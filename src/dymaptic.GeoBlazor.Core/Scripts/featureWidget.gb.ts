// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Feature from '@arcgis/core/widgets/Feature';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FeatureWidgetGenerated implements IPropertyWrapper {
    public widget: Feature;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: Feature) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    
    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async nextMedia(contentElementIndex: any): Promise<void> {
        this.widget.nextMedia(contentElementIndex);
    }

    async own(handleOrHandles: any): Promise<void> {
        let { buildJsWatchHandle } = await import('./watchHandle');
        let jsHandleOrHandles = await buildJsWatchHandle(handleOrHandles, this.layerId, this.viewId) as any;
        this.widget.own(jsHandleOrHandles);
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async previousMedia(contentElementIndex: any): Promise<void> {
        this.widget.previousMedia(contentElementIndex);
    }

    async render(): Promise<any> {
        return this.widget.render();
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async setActiveMedia(contentElementIndex: any,
        mediaInfoIndex: any): Promise<void> {
        this.widget.setActiveMedia(contentElementIndex,
            mediaInfoIndex);
    }

    async when(callback: any,
        errback: any): Promise<any> {
        return await this.widget.when(callback,
            errback);
    }

    // region properties
    
    async getGraphic(): Promise<any> {
        if (!hasValue(this.widget.graphic)) {
            return null;
        }
        
        let { buildDotNetGraphic } = await import('./graphic');
        return buildDotNetGraphic(this.widget.graphic, this.layerId, this.viewId);
    }
    async setGraphic(value: any): Promise<void> {
        let { buildJsGraphic } = await import('./graphic');
        this.widget.graphic =  buildJsGraphic(value);
    }
    async getSpatialReference(): Promise<any> {
        if (!hasValue(this.widget.spatialReference)) {
            return null;
        }
        
        let { buildDotNetSpatialReference } = await import('./spatialReference');
        return buildDotNetSpatialReference(this.widget.spatialReference);
    }
    async setSpatialReference(value: any): Promise<void> {
        let { buildJsSpatialReference } = await import('./spatialReference');
        this.widget.spatialReference =  buildJsSpatialReference(value);
    }
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetFeatureViewModel } = await import('./featureViewModel');
        return await buildDotNetFeatureViewModel(this.widget.viewModel, this.layerId, this.viewId);
    }
    async setViewModel(value: any): Promise<void> {
        let { buildJsFeatureViewModel } = await import('./featureViewModel');
        this.widget.viewModel = await  buildJsFeatureViewModel(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsFeatureWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeature = new Feature();
    if (hasValue(dotNetObject.graphic)) {
        let { buildJsGraphic } = await import('./graphic');
        jsFeature.graphic = buildJsGraphic(dotNetObject.graphic) as any;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        jsFeature.spatialReference = buildJsSpatialReference(dotNetObject.spatialReference) as any;
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsFeatureViewModel } = await import('./featureViewModel');
        jsFeature.viewModel = await buildJsFeatureViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.container)) {
        jsFeature.container = dotNetObject.container;
    }
    if (hasValue(dotNetObject.defaultPopupTemplateEnabled)) {
        jsFeature.defaultPopupTemplateEnabled = dotNetObject.defaultPopupTemplateEnabled;
    }
    if (hasValue(dotNetObject.headingLevel)) {
        jsFeature.headingLevel = dotNetObject.headingLevel;
    }
    if (hasValue(dotNetObject.icon)) {
        jsFeature.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.label)) {
        jsFeature.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.map)) {
        jsFeature.map = dotNetObject.map;
    }
    if (hasValue(dotNetObject.timeZone)) {
        jsFeature.timeZone = dotNetObject.timeZone;
    }
    if (hasValue(dotNetObject.view)) {
        jsFeature.view = dotNetObject.view;
    }
    if (hasValue(dotNetObject.visibleElements)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedVisibleElements } = dotNetObject.visibleElements;
        jsFeature.visibleElements = sanitizedVisibleElements;
    }
    if (hasValue(dotNetObject.widgetId)) {
        jsFeature.id = dotNetObject.widgetId;
    }

    let { default: FeatureWidgetWrapper } = await import('./featureWidget');
    let featureWidgetWrapper = new FeatureWidgetWrapper(jsFeature);
    featureWidgetWrapper.geoBlazorId = dotNetObject.id;
    featureWidgetWrapper.viewId = viewId;
    featureWidgetWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(featureWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = featureWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsFeature;
    let { buildDotNetFeatureWidget } = await import('./featureWidget');
    let dnInstantiatedObject = await buildDotNetFeatureWidget(jsFeature);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureWidget', e);
    }
    
    return jsFeature;
}

export async function buildDotNetFeatureWidgetGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureWidget: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.graphic)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetFeatureWidget.graphic = buildDotNetGraphic(jsObject.graphic, layerId, viewId);
        }
        if (hasValue(jsObject.spatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetFeatureWidget.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference);
        }
        if (hasValue(jsObject.viewModel)) {
            let { buildDotNetFeatureViewModel } = await import('./featureViewModel');
            dotNetFeatureWidget.viewModel = await buildDotNetFeatureViewModel(jsObject.viewModel, layerId, viewId);
        }
    if (hasValue(jsObject.container)) {
        dotNetFeatureWidget.container = jsObject.container;
    }
    if (hasValue(jsObject.defaultPopupTemplateEnabled)) {
        dotNetFeatureWidget.defaultPopupTemplateEnabled = jsObject.defaultPopupTemplateEnabled;
    }
    if (hasValue(jsObject.headingLevel)) {
        dotNetFeatureWidget.headingLevel = jsObject.headingLevel;
    }
    if (hasValue(jsObject.icon)) {
        dotNetFeatureWidget.icon = jsObject.icon;
    }
    if (hasValue(jsObject.label)) {
        dotNetFeatureWidget.label = jsObject.label;
    }
    if (hasValue(jsObject.map)) {
        dotNetFeatureWidget.map = jsObject.map;
    }
    if (hasValue(jsObject.timeZone)) {
        dotNetFeatureWidget.timeZone = jsObject.timeZone;
    }
    if (hasValue(jsObject.title)) {
        dotNetFeatureWidget.title = jsObject.title;
    }
    if (hasValue(jsObject.type)) {
        dotNetFeatureWidget.type = jsObject.type;
    }
    if (hasValue(jsObject.view)) {
        dotNetFeatureWidget.view = jsObject.view;
    }
    if (hasValue(jsObject.visibleElements)) {
        dotNetFeatureWidget.visibleElements = jsObject.visibleElements;
    }
    if (hasValue(jsObject.id)) {
        dotNetFeatureWidget.widgetId = jsObject.id;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFeatureWidget.id = k;
                break;
            }
        }
    }

    return dotNetFeatureWidget;
}

