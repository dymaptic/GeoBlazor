// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import BookmarksViewModel from '@arcgis/core/widgets/Bookmarks/BookmarksViewModel';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, generateSerializableJson } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class BookmarksViewModelGenerated implements IPropertyWrapper {
    public component: BookmarksViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: BookmarksViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.bookmarks) && dotNetObject.bookmarks.length > 0) {
            let { buildJsBookmark } = await import('./bookmark');
            this.component.bookmarks = await Promise.all(dotNetObject.bookmarks.map(async i => await buildJsBookmark(i))) as any;
        }
        if (hasValue(dotNetObject.capabilities)) {
            let { buildJsBookmarksCapabilities } = await import('./bookmarksCapabilities');
            this.component.capabilities = await buildJsBookmarksCapabilities(dotNetObject.capabilities, this.viewId) as any;
        }

        if (hasValue(dotNetObject.defaultCreateOptions)) {
            this.component.defaultCreateOptions = dotNetObject.defaultCreateOptions;
        }
        if (hasValue(dotNetObject.defaultEditOptions)) {
            this.component.defaultEditOptions = dotNetObject.defaultEditOptions;
        }
    }
    
    async createBookmark(options: any): Promise<any> {
        return await this.component.createBookmark(options);
    }

    async editBookmark(bookmark: any,
        options: any): Promise<any> {
        let { buildJsBookmark } = await import('./bookmark');
        let jsBookmark = await buildJsBookmark(bookmark) as any;
        return await this.component.editBookmark(jsBookmark,
            options);
    }

    async goTo(bookmark: any): Promise<any> {
        let { buildJsBookmark } = await import('./bookmark');
        let jsBookmark = await buildJsBookmark(bookmark) as any;
        let result = await this.component.goTo(jsBookmark);
        
        return generateSerializableJson(result);
    }

    // region properties
    
    async getActiveBookmark(): Promise<any> {
        if (!hasValue(this.component.activeBookmark)) {
            return null;
        }
        
        let { buildDotNetBookmark } = await import('./bookmark');
        return await buildDotNetBookmark(this.component.activeBookmark);
    }
    
    async getBookmarks(): Promise<any> {
        if (!hasValue(this.component.bookmarks)) {
            return null;
        }
        
        let { buildDotNetBookmark } = await import('./bookmark');
        return await Promise.all(this.component.bookmarks!.map(async i => await buildDotNetBookmark(i)));
    }
    
    async setBookmarks(value: any): Promise<void> {
        if (!hasValue(value)) {
            this.component.bookmarks.removeAll();
        }
        let { buildJsBookmark } = await import('./bookmark');
        this.component.bookmarks = await Promise.all(value.map(async i => await buildJsBookmark(i))) as any;
    }
    
    async getCapabilities(): Promise<any> {
        if (!hasValue(this.component.capabilities)) {
            return null;
        }
        
        let { buildDotNetBookmarksCapabilities } = await import('./bookmarksCapabilities');
        return await buildDotNetBookmarksCapabilities(this.component.capabilities, this.viewId);
    }
    
    async setCapabilities(value: any): Promise<void> {
        let { buildJsBookmarksCapabilities } = await import('./bookmarksCapabilities');
        this.component.capabilities = await  buildJsBookmarksCapabilities(value, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsBookmarksViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.bookmarks) && dotNetObject.bookmarks.length > 0) {
        let { buildJsBookmark } = await import('./bookmark');
        properties.bookmarks = await Promise.all(dotNetObject.bookmarks.map(async i => await buildJsBookmark(i))) as any;
    }
    if (hasValue(dotNetObject.capabilities)) {
        let { buildJsBookmarksCapabilities } = await import('./bookmarksCapabilities');
        properties.capabilities = await buildJsBookmarksCapabilities(dotNetObject.capabilities, viewId) as any;
    }
    if (hasValue(dotNetObject.hasGoToOverride) && dotNetObject.hasGoToOverride) {
        properties.goToOverride = async (view,
        goToParameters) => {

            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsGoToOverride', view,
            goToParameters);
        };
    }

    if (hasValue(dotNetObject.defaultCreateOptions)) {
        properties.defaultCreateOptions = dotNetObject.defaultCreateOptions;
    }
    if (hasValue(dotNetObject.defaultEditOptions)) {
        properties.defaultEditOptions = dotNetObject.defaultEditOptions;
    }
    let jsBookmarksViewModel = new BookmarksViewModel(properties);

    let { default: BookmarksViewModelWrapper } = await import('./bookmarksViewModel');
    let bookmarksViewModelWrapper = new BookmarksViewModelWrapper(jsBookmarksViewModel);
    bookmarksViewModelWrapper.geoBlazorId = dotNetObject.id;
    bookmarksViewModelWrapper.viewId = viewId;
    bookmarksViewModelWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = bookmarksViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsBookmarksViewModel;
    
    return jsBookmarksViewModel;
}


export async function buildDotNetBookmarksViewModelGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBookmarksViewModel: any = {};
    
    if (hasValue(jsObject.activeBookmark)) {
        let { buildDotNetBookmark } = await import('./bookmark');
        dotNetBookmarksViewModel.activeBookmark = await buildDotNetBookmark(jsObject.activeBookmark);
    }
    
    if (hasValue(jsObject.bookmarks)) {
        let { buildDotNetBookmark } = await import('./bookmark');
        dotNetBookmarksViewModel.bookmarks = await Promise.all(jsObject.bookmarks.map(async i => await buildDotNetBookmark(i)));
    }
    
    if (hasValue(jsObject.capabilities)) {
        let { buildDotNetBookmarksCapabilities } = await import('./bookmarksCapabilities');
        dotNetBookmarksViewModel.capabilities = await buildDotNetBookmarksCapabilities(jsObject.capabilities, viewId);
    }
    
    if (hasValue(jsObject.defaultCreateOptions)) {
        dotNetBookmarksViewModel.defaultCreateOptions = removeCircularReferences(jsObject.defaultCreateOptions);
    }
    
    if (hasValue(jsObject.defaultEditOptions)) {
        dotNetBookmarksViewModel.defaultEditOptions = removeCircularReferences(jsObject.defaultEditOptions);
    }
    
    if (hasValue(jsObject.state)) {
        dotNetBookmarksViewModel.state = removeCircularReferences(jsObject.state);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetBookmarksViewModel.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetBookmarksViewModel.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetBookmarksViewModel.id)) {
        jsObjectRefs[dotNetBookmarksViewModel.id] ??= jsObject;
        arcGisObjectRefs[dotNetBookmarksViewModel.id] ??= jsObject;
    }

    return dotNetBookmarksViewModel;
}

