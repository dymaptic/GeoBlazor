// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import BookmarksViewModel from '@arcgis/core/widgets/Bookmarks/BookmarksViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class BookmarksViewModelGenerated implements IPropertyWrapper {
    public component: BookmarksViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: BookmarksViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async createBookmark(options: any): Promise<any> {
                let { buildJsBookmarkOptions } = await import('./bookmarkOptions');
let jsOptions = await buildJsBookmarkOptions(options, this.layerId, this.viewId) as any;
        return await this.component.createBookmark(jsOptions);
    }

    async editBookmark(bookmark: any,
        options: any): Promise<any> {
                let { buildJsBookmark } = await import('./bookmark');
let jsBookmark = await buildJsBookmark(bookmark) as any;
                let { buildJsBookmarkOptions } = await import('./bookmarkOptions');
let jsOptions = await buildJsBookmarkOptions(options, this.layerId, this.viewId) as any;
        return await this.component.editBookmark(jsBookmark,
            jsOptions);
    }

    async goTo(bookmark: any): Promise<any> {
                let { buildJsBookmark } = await import('./bookmark');
let jsBookmark = await buildJsBookmark(bookmark) as any;
        return await this.component.goTo(jsBookmark);
    }

    // region properties
    
    async getActiveBookmark(): Promise<any> {
        if (!hasValue(this.component.activeBookmark)) {
            return null;
        }
        
        let { buildDotNetBookmark } = await import('./bookmark');
        return await buildDotNetBookmark(this.component.activeBookmark);
    }
    
    async getBookmarks(): Promise<any> {
        if (!hasValue(this.component.bookmarks)) {
            return null;
        }
        
        let { buildDotNetBookmark } = await import('./bookmark');
        return await Promise.all(this.component.bookmarks.map(async i => await buildDotNetBookmark(i)));
    }
    
    async setBookmarks(value: any): Promise<void> {
        let { buildJsBookmark } = await import('./bookmark');
        this.component.bookmarks = await Promise.all(value.map(async i => await buildJsBookmark(i))) as any;
    }
    
    async getDefaultCreateOptions(): Promise<any> {
        if (!hasValue(this.component.defaultCreateOptions)) {
            return null;
        }
        
        let { buildDotNetBookmarkOptions } = await import('./bookmarkOptions');
        return await buildDotNetBookmarkOptions(this.component.defaultCreateOptions);
    }
    
    async setDefaultCreateOptions(value: any): Promise<void> {
        let { buildJsBookmarkOptions } = await import('./bookmarkOptions');
        this.component.defaultCreateOptions = await  buildJsBookmarkOptions(value, this.layerId, this.viewId);
    }
    
    async getDefaultEditOptions(): Promise<any> {
        if (!hasValue(this.component.defaultEditOptions)) {
            return null;
        }
        
        let { buildDotNetBookmarkOptions } = await import('./bookmarkOptions');
        return await buildDotNetBookmarkOptions(this.component.defaultEditOptions);
    }
    
    async setDefaultEditOptions(value: any): Promise<void> {
        let { buildJsBookmarkOptions } = await import('./bookmarkOptions');
        this.component.defaultEditOptions = await  buildJsBookmarkOptions(value, this.layerId, this.viewId);
    }
    
    async getGoToOverride(): Promise<any> {
        if (!hasValue(this.component.goToOverride)) {
            return null;
        }
        
        let { buildDotNetGoToOverride } = await import('./goToOverride');
        return await buildDotNetGoToOverride(this.component.goToOverride);
    }
    
    async setGoToOverride(value: any): Promise<void> {
        let { buildJsGoToOverride } = await import('./goToOverride');
        this.component.goToOverride =  buildJsGoToOverride(value, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsBookmarksViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.bookmarks)) {
        let { buildJsBookmark } = await import('./bookmark');
        properties.bookmarks = await Promise.all(dotNetObject.bookmarks.map(async i => await buildJsBookmark(i))) as any;
    }
    if (hasValue(dotNetObject.defaultCreateOptions)) {
        let { buildJsBookmarkOptions } = await import('./bookmarkOptions');
        properties.defaultCreateOptions = await buildJsBookmarkOptions(dotNetObject.defaultCreateOptions, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.defaultEditOptions)) {
        let { buildJsBookmarkOptions } = await import('./bookmarkOptions');
        properties.defaultEditOptions = await buildJsBookmarkOptions(dotNetObject.defaultEditOptions, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.goToOverride)) {
        let { buildJsGoToOverride } = await import('./goToOverride');
        properties.goToOverride = buildJsGoToOverride(dotNetObject.goToOverride, viewId) as any;
    }

    if (hasValue(dotNetObject.capabilities)) {
        const { id, dotNetComponentReference, ...sanitizedCapabilities } = dotNetObject.capabilities;
        properties.capabilities = sanitizedCapabilities;
    }
    let jsBookmarksViewModel = new BookmarksViewModel(properties);

    let { default: BookmarksViewModelWrapper } = await import('./bookmarksViewModel');
    let bookmarksViewModelWrapper = new BookmarksViewModelWrapper(jsBookmarksViewModel);
    bookmarksViewModelWrapper.geoBlazorId = dotNetObject.id;
    bookmarksViewModelWrapper.viewId = viewId;
    bookmarksViewModelWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(bookmarksViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = bookmarksViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsBookmarksViewModel;
    
    let { buildDotNetBookmarksViewModel } = await import('./bookmarksViewModel');
    let dnInstantiatedObject = await buildDotNetBookmarksViewModel(jsBookmarksViewModel);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type BookmarksViewModel detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BookmarksViewModel', e);
    }
    
    return jsBookmarksViewModel;
}


export async function buildDotNetBookmarksViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBookmarksViewModel: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.activeBookmark)) {
        let { buildDotNetBookmark } = await import('./bookmark');
        dotNetBookmarksViewModel.activeBookmark = await buildDotNetBookmark(jsObject.activeBookmark);
    }
    if (hasValue(jsObject.bookmarks)) {
        let { buildDotNetBookmark } = await import('./bookmark');
        dotNetBookmarksViewModel.bookmarks = await Promise.all(jsObject.bookmarks.map(async i => await buildDotNetBookmark(i)));
    }
    if (hasValue(jsObject.defaultCreateOptions)) {
        let { buildDotNetBookmarkOptions } = await import('./bookmarkOptions');
        dotNetBookmarksViewModel.defaultCreateOptions = await buildDotNetBookmarkOptions(jsObject.defaultCreateOptions);
    }
    if (hasValue(jsObject.defaultEditOptions)) {
        let { buildDotNetBookmarkOptions } = await import('./bookmarkOptions');
        dotNetBookmarksViewModel.defaultEditOptions = await buildDotNetBookmarkOptions(jsObject.defaultEditOptions);
    }
    if (hasValue(jsObject.goToOverride)) {
        let { buildDotNetGoToOverride } = await import('./goToOverride');
        dotNetBookmarksViewModel.goToOverride = await buildDotNetGoToOverride(jsObject.goToOverride);
    }
    if (hasValue(jsObject.capabilities)) {
        dotNetBookmarksViewModel.capabilities = jsObject.capabilities;
    }
    if (hasValue(jsObject.state)) {
        dotNetBookmarksViewModel.state = jsObject.state;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetBookmarksViewModel.id = k;
                break;
            }
        }
    }

    return dotNetBookmarksViewModel;
}

