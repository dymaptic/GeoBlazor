// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import TraceParameters from '@arcgis/core/rest/networks/support/TraceParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetTraceParameters } from './traceParameters';

export async function buildJsTraceParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTraceParameters = new TraceParameters();
    if (hasValue(dotNetObject.outSpatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        jsTraceParameters.outSpatialReference = buildJsSpatialReference(dotNetObject.outSpatialReference) as any;
    }

    if (hasValue(dotNetObject.gdbVersion)) {
        jsTraceParameters.gdbVersion = dotNetObject.gdbVersion;
    }
    if (hasValue(dotNetObject.moment)) {
        jsTraceParameters.moment = dotNetObject.moment;
    }
    if (hasValue(dotNetObject.namedTraceConfigurationGlobalId)) {
        jsTraceParameters.namedTraceConfigurationGlobalId = dotNetObject.namedTraceConfigurationGlobalId;
    }
    if (hasValue(dotNetObject.resultTypes)) {
        jsTraceParameters.resultTypes = dotNetObject.resultTypes;
    }
    if (hasValue(dotNetObject.traceConfiguration)) {
        jsTraceParameters.traceConfiguration = dotNetObject.traceConfiguration;
    }
    if (hasValue(dotNetObject.traceLocations)) {
        jsTraceParameters.traceLocations = dotNetObject.traceLocations;
    }
    if (hasValue(dotNetObject.traceType)) {
        jsTraceParameters.traceType = dotNetObject.traceType;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsTraceParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTraceParameters;
    
    let dnInstantiatedObject = await buildDotNetTraceParameters(jsTraceParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TraceParameters', e);
    }
    
    return jsTraceParameters;
}

export async function buildDotNetTraceParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTraceParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.outSpatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetTraceParameters.outSpatialReference = buildDotNetSpatialReference(jsObject.outSpatialReference);
        }
        if (hasValue(jsObject.gdbVersion)) {
            dotNetTraceParameters.gdbVersion = jsObject.gdbVersion;
        }
        if (hasValue(jsObject.moment)) {
            dotNetTraceParameters.moment = jsObject.moment;
        }
        if (hasValue(jsObject.namedTraceConfigurationGlobalId)) {
            dotNetTraceParameters.namedTraceConfigurationGlobalId = jsObject.namedTraceConfigurationGlobalId;
        }
        if (hasValue(jsObject.resultTypes)) {
            dotNetTraceParameters.resultTypes = jsObject.resultTypes;
        }
        if (hasValue(jsObject.traceConfiguration)) {
            dotNetTraceParameters.traceConfiguration = jsObject.traceConfiguration;
        }
        if (hasValue(jsObject.traceLocations)) {
            dotNetTraceParameters.traceLocations = jsObject.traceLocations;
        }
        if (hasValue(jsObject.traceType)) {
            dotNetTraceParameters.traceType = jsObject.traceType;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTraceParameters.id = k;
                break;
            }
        }
    }

    return dotNetTraceParameters;
}

