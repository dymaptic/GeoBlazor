// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetTileInfoCreateOptions } from './tileInfoCreateOptions';

export async function buildJsTileInfoCreateOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTileInfoCreateOptions: any = {}
    if (hasValue(dotNetObject.spatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        jsTileInfoCreateOptions.spatialReference = buildJsSpatialReference(dotNetObject.spatialReference) as any;
    }

    if (hasValue(dotNetObject.numLODs)) {
        jsTileInfoCreateOptions.numLODs = dotNetObject.numLODs;
    }
    if (hasValue(dotNetObject.scales)) {
        jsTileInfoCreateOptions.scales = dotNetObject.scales;
    }
    if (hasValue(dotNetObject.size)) {
        jsTileInfoCreateOptions.size = dotNetObject.size;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsTileInfoCreateOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTileInfoCreateOptions;
    
    let dnInstantiatedObject = await buildDotNetTileInfoCreateOptions(jsTileInfoCreateOptions);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TileInfoCreateOptions', e);
    }
    
    return jsTileInfoCreateOptions;
}

export async function buildDotNetTileInfoCreateOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTileInfoCreateOptions: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.spatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetTileInfoCreateOptions.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference);
        }
    if (hasValue(jsObject.numLODs)) {
        dotNetTileInfoCreateOptions.numLODs = jsObject.numLODs;
    }
    if (hasValue(jsObject.scales)) {
        dotNetTileInfoCreateOptions.scales = jsObject.scales;
    }
    if (hasValue(jsObject.size)) {
        dotNetTileInfoCreateOptions.size = jsObject.size;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTileInfoCreateOptions.id = k;
                break;
            }
        }
    }

    return dotNetTileInfoCreateOptions;
}

