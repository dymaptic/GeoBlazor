// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import WMSLayer from '@arcgis/core/layers/WMSLayer';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, buildJsStreamReference, generateSerializableJson } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class WMSLayerGenerated implements IPropertyWrapper {
    public layer: WMSLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: WMSLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.effect)) {
            let { buildJsEffect } = await import('./effect');
            this.layer.effect = buildJsEffect(dotNetObject.effect) as any;
        }
        if (hasValue(dotNetObject.fullExtent)) {
            let { buildJsExtent } = await import('./extent');
            this.layer.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;
        }
        if (hasValue(dotNetObject.fullExtents) && dotNetObject.fullExtents.length > 0) {
            let { buildJsExtent } = await import('./extent');
            this.layer.fullExtents = dotNetObject.fullExtents.map(i => buildJsExtent(i)) as any;
        }
        if (hasValue(dotNetObject.portalItem)) {
            let { buildJsPortalItem } = await import('./portalItem');
            this.layer.portalItem = await buildJsPortalItem(dotNetObject.portalItem, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.spatialReference)) {
            let { buildJsSpatialReference } = await import('./spatialReference');
            this.layer.spatialReference = buildJsSpatialReference(dotNetObject.spatialReference) as any;
        }
        if (hasValue(dotNetObject.sublayers) && dotNetObject.sublayers.length > 0) {
            let { buildJsWMSSublayer } = await import('./wMSSublayer');
            this.layer.sublayers = await Promise.all(dotNetObject.sublayers.map(async i => await buildJsWMSSublayer(i, this.viewId))) as any;
        }
        if (hasValue(dotNetObject.timeExtent)) {
            let { buildJsTimeExtent } = await import('./timeExtent');
            this.layer.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent) as any;
        }
        if (hasValue(dotNetObject.timeInfo)) {
            let { buildJsTimeInfo } = await import('./timeInfo');
            this.layer.timeInfo = await buildJsTimeInfo(dotNetObject.timeInfo) as any;
        }
        if (hasValue(dotNetObject.timeOffset)) {
            let { buildJsTimeInterval } = await import('./timeInterval');
            this.layer.timeOffset = await buildJsTimeInterval(dotNetObject.timeOffset) as any;
        }
        if (hasValue(dotNetObject.visibilityTimeExtent)) {
            let { buildJsTimeExtent } = await import('./timeExtent');
            this.layer.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent) as any;
        }

        if (hasValue(dotNetObject.arcGISLayerId)) {
            this.layer.id = dotNetObject.arcGISLayerId;
        }
        if (hasValue(dotNetObject.blendMode)) {
            this.layer.blendMode = dotNetObject.blendMode;
        }
        if (hasValue(dotNetObject.copyright)) {
            this.layer.copyright = dotNetObject.copyright;
        }
        if (hasValue(dotNetObject.customLayerParameters)) {
            this.layer.customLayerParameters = dotNetObject.customLayerParameters;
        }
        if (hasValue(dotNetObject.customParameters)) {
            this.layer.customParameters = dotNetObject.customParameters;
        }
        if (hasValue(dotNetObject.description)) {
            this.layer.description = dotNetObject.description;
        }
        if (hasValue(dotNetObject.featureInfoFormat)) {
            this.layer.featureInfoFormat = dotNetObject.featureInfoFormat;
        }
        if (hasValue(dotNetObject.featureInfoUrl)) {
            this.layer.featureInfoUrl = dotNetObject.featureInfoUrl;
        }
        if (hasValue(dotNetObject.imageFormat)) {
            this.layer.imageFormat = dotNetObject.imageFormat;
        }
        if (hasValue(dotNetObject.imageMaxHeight)) {
            this.layer.imageMaxHeight = dotNetObject.imageMaxHeight;
        }
        if (hasValue(dotNetObject.imageMaxWidth)) {
            this.layer.imageMaxWidth = dotNetObject.imageMaxWidth;
        }
        if (hasValue(dotNetObject.imageTransparency)) {
            this.layer.imageTransparency = dotNetObject.imageTransparency;
        }
        if (hasValue(dotNetObject.legendEnabled)) {
            this.layer.legendEnabled = dotNetObject.legendEnabled;
        }
        if (hasValue(dotNetObject.listMode)) {
            this.layer.listMode = dotNetObject.listMode;
        }
        if (hasValue(dotNetObject.maxScale)) {
            this.layer.maxScale = dotNetObject.maxScale;
        }
        if (hasValue(dotNetObject.minScale)) {
            this.layer.minScale = dotNetObject.minScale;
        }
        if (hasValue(dotNetObject.opacity)) {
            this.layer.opacity = dotNetObject.opacity;
        }
        if (hasValue(dotNetObject.persistenceEnabled)) {
            this.layer.persistenceEnabled = dotNetObject.persistenceEnabled;
        }
        if (hasValue(dotNetObject.refreshInterval)) {
            this.layer.refreshInterval = dotNetObject.refreshInterval;
        }
        if (hasValue(dotNetObject.spatialReferences) && dotNetObject.spatialReferences.length > 0) {
            this.layer.spatialReferences = dotNetObject.spatialReferences;
        }
        if (hasValue(dotNetObject.title)) {
            this.layer.title = dotNetObject.title;
        }
        if (hasValue(dotNetObject.url)) {
            this.layer.url = dotNetObject.url;
        }
        if (hasValue(dotNetObject.useViewTime)) {
            this.layer.useViewTime = dotNetObject.useViewTime;
        }
        if (hasValue(dotNetObject.version)) {
            this.layer.version = dotNetObject.version;
        }
        if (hasValue(dotNetObject.visible)) {
            this.layer.visible = dotNetObject.visible;
        }
    }
    
    async cancelLoad(): Promise<void> {
        this.layer.cancelLoad();
    }

    async createLayerView(view: any,
        options: any): Promise<any> {
        return await this.layer.createLayerView(view,
            options);
    }

    async fetchAttributionData(): Promise<any> {
        let result = await this.layer.fetchAttributionData();
        
        return generateSerializableJson(result);
    }

    async findSublayerById(id: any): Promise<any> {
        return this.layer.findSublayerById(id);
    }

    async findSublayerByName(name: any): Promise<any> {
        return this.layer.findSublayerByName(name);
    }

    async isFulfilled(): Promise<any> {
        return this.layer.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.layer.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.layer.isResolved();
    }

    async load(options: any): Promise<any> {
        let result = await this.layer.load(options);
        
        return generateSerializableJson(result);
    }

    async refresh(): Promise<void> {
        this.layer.refresh();
    }

    async when(callback: any,
        errback: any): Promise<any> {
        let result = await this.layer.when(callback,
            errback);
        
        return generateSerializableJson(result);
    }

    // region properties
    
    async getAllSublayers(): Promise<any> {
        if (!hasValue(this.layer.allSublayers)) {
            return null;
        }
        
        let { buildDotNetWMSSublayer } = await import('./wMSSublayer');
        return await Promise.all(this.layer.allSublayers!.map(async i => await buildDotNetWMSSublayer(i, this.viewId)));
    }
    
    getArcGISLayerId(): any {
        if (!hasValue(this.layer.id)) {
            return null;
        }
        
        return generateSerializableJson(this.layer.id);
    }
    
    setArcGISLayerId(value: any): void {
        this.layer.id = JSON.parse(value);
    }
    
    getCopyright(): any {
        if (!hasValue(this.layer.copyright)) {
            return null;
        }
        
        return generateSerializableJson(this.layer.copyright);
    }
    
    setCopyright(value: any): void {
        this.layer.copyright = JSON.parse(value);
    }
    
    getCustomLayerParameters(): any {
        if (!hasValue(this.layer.customLayerParameters)) {
            return null;
        }
        
        return generateSerializableJson(this.layer.customLayerParameters);
    }
    
    setCustomLayerParameters(value: any): void {
        this.layer.customLayerParameters = JSON.parse(value);
    }
    
    getDescription(): any {
        if (!hasValue(this.layer.description)) {
            return null;
        }
        
        return generateSerializableJson(this.layer.description);
    }
    
    setDescription(value: any): void {
        this.layer.description = JSON.parse(value);
    }
    
    async getEffect(): Promise<any> {
        if (!hasValue(this.layer.effect)) {
            return null;
        }
        
        let { buildDotNetEffect } = await import('./effect');
        return buildDotNetEffect(this.layer.effect);
    }
    
    async setEffect(value: any): Promise<void> {
        let { buildJsEffect } = await import('./effect');
        this.layer.effect =  buildJsEffect(value);
    }
    
    getFeatureInfoUrl(): any {
        if (!hasValue(this.layer.featureInfoUrl)) {
            return null;
        }
        
        return generateSerializableJson(this.layer.featureInfoUrl);
    }
    
    setFeatureInfoUrl(value: any): void {
        this.layer.featureInfoUrl = JSON.parse(value);
    }
    
    async getFullExtent(): Promise<any> {
        if (!hasValue(this.layer.fullExtent)) {
            return null;
        }
        
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(this.layer.fullExtent);
    }
    
    async setFullExtent(value: any): Promise<void> {
        let { buildJsExtent } = await import('./extent');
        this.layer.fullExtent =  buildJsExtent(value);
    }
    
    async getFullExtents(): Promise<any> {
        if (!hasValue(this.layer.fullExtents)) {
            return null;
        }
        
        let { buildDotNetExtent } = await import('./extent');
        return this.layer.fullExtents!.map(i => buildDotNetExtent(i));
    }
    
    async setFullExtents(value: any): Promise<void> {
        if (!hasValue(value)) {
            this.layer.fullExtents = [];
        }
        let { buildJsExtent } = await import('./extent');
        this.layer.fullExtents = value.map(i => buildJsExtent(i)) as any;
    }
    
    getImageFormat(): any {
        if (!hasValue(this.layer.imageFormat)) {
            return null;
        }
        
        return generateSerializableJson(this.layer.imageFormat);
    }
    
    setImageFormat(value: any): void {
        this.layer.imageFormat = JSON.parse(value);
    }
    
    async getPortalItem(): Promise<any> {
        if (!hasValue(this.layer.portalItem)) {
            return null;
        }
        
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(this.layer.portalItem, this.viewId);
    }
    
    async setPortalItem(value: any): Promise<void> {
        let { buildJsPortalItem } = await import('./portalItem');
        this.layer.portalItem = await  buildJsPortalItem(value, this.layerId, this.viewId);
    }
    
    async getSpatialReference(): Promise<any> {
        if (!hasValue(this.layer.spatialReference)) {
            return null;
        }
        
        let { buildDotNetSpatialReference } = await import('./spatialReference');
        return buildDotNetSpatialReference(this.layer.spatialReference);
    }
    
    async getSublayers(): Promise<any> {
        if (!hasValue(this.layer.sublayers)) {
            return null;
        }
        
        let { buildDotNetWMSSublayer } = await import('./wMSSublayer');
        return await Promise.all(this.layer.sublayers!.map(async i => await buildDotNetWMSSublayer(i, this.viewId)));
    }
    
    async setSublayers(value: any): Promise<void> {
        if (!hasValue(value)) {
            this.layer.sublayers.removeAll();
        }
        let { buildJsWMSSublayer } = await import('./wMSSublayer');
        this.layer.sublayers = await Promise.all(value.map(async i => await buildJsWMSSublayer(i, this.viewId))) as any;
    }
    
    async getTimeExtent(): Promise<any> {
        if (!hasValue(this.layer.timeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.timeExtent);
    }
    
    async setTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.timeExtent = await  buildJsTimeExtent(value);
    }
    
    async getTimeInfo(): Promise<any> {
        if (!hasValue(this.layer.timeInfo)) {
            return null;
        }
        
        let { buildDotNetTimeInfo } = await import('./timeInfo');
        return await buildDotNetTimeInfo(this.layer.timeInfo);
    }
    
    async setTimeInfo(value: any): Promise<void> {
        let { buildJsTimeInfo } = await import('./timeInfo');
        this.layer.timeInfo = await  buildJsTimeInfo(value);
    }
    
    async getTimeOffset(): Promise<any> {
        if (!hasValue(this.layer.timeOffset)) {
            return null;
        }
        
        let { buildDotNetTimeInterval } = await import('./timeInterval');
        return await buildDotNetTimeInterval(this.layer.timeOffset);
    }
    
    async setTimeOffset(value: any): Promise<void> {
        let { buildJsTimeInterval } = await import('./timeInterval');
        this.layer.timeOffset = await  buildJsTimeInterval(value);
    }
    
    getTitle(): any {
        if (!hasValue(this.layer.title)) {
            return null;
        }
        
        return generateSerializableJson(this.layer.title);
    }
    
    setTitle(value: any): void {
        this.layer.title = JSON.parse(value);
    }
    
    getUrl(): any {
        if (!hasValue(this.layer.url)) {
            return null;
        }
        
        return generateSerializableJson(this.layer.url);
    }
    
    setUrl(value: any): void {
        this.layer.url = JSON.parse(value);
    }
    
    getVersion(): any {
        if (!hasValue(this.layer.version)) {
            return null;
        }
        
        return generateSerializableJson(this.layer.version);
    }
    
    setVersion(value: any): void {
        this.layer.version = JSON.parse(value);
    }
    
    async getVisibilityTimeExtent(): Promise<any> {
        if (!hasValue(this.layer.visibilityTimeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.visibilityTimeExtent);
    }
    
    async setVisibilityTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.visibilityTimeExtent = await  buildJsTimeExtent(value);
    }
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}


export async function buildJsWMSLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.effect)) {
        let { buildJsEffect } = await import('./effect');
        properties.effect = buildJsEffect(dotNetObject.effect) as any;
    }
    if (hasValue(dotNetObject.hasFetchFeatureInfoFunction) && dotNetObject.hasFetchFeatureInfoFunction) {
        properties.fetchFeatureInfoFunction = async (query) => {

            let result = await dotNetObject.invokeMethodAsync('OnJsFetchFeatureInfoFunction', query);
            let { buildJsGraphic } = await import('./graphic');
            return await Promise.all(result.map(async i => await buildJsGraphic(i)));
        };
    }
    if (hasValue(dotNetObject.fullExtent)) {
        let { buildJsExtent } = await import('./extent');
        properties.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;
    }
    if (hasValue(dotNetObject.fullExtents) && dotNetObject.fullExtents.length > 0) {
        let { buildJsExtent } = await import('./extent');
        properties.fullExtents = dotNetObject.fullExtents.map(i => buildJsExtent(i)) as any;
    }
    if (hasValue(dotNetObject.portalItem)) {
        let { buildJsPortalItem } = await import('./portalItem');
        properties.portalItem = await buildJsPortalItem(dotNetObject.portalItem, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        properties.spatialReference = buildJsSpatialReference(dotNetObject.spatialReference) as any;
    }
    if (hasValue(dotNetObject.sublayers) && dotNetObject.sublayers.length > 0) {
        let { buildJsWMSSublayer } = await import('./wMSSublayer');
        properties.sublayers = await Promise.all(dotNetObject.sublayers.map(async i => await buildJsWMSSublayer(i, viewId))) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent) as any;
    }
    if (hasValue(dotNetObject.timeInfo)) {
        let { buildJsTimeInfo } = await import('./timeInfo');
        properties.timeInfo = await buildJsTimeInfo(dotNetObject.timeInfo) as any;
    }
    if (hasValue(dotNetObject.timeOffset)) {
        let { buildJsTimeInterval } = await import('./timeInterval');
        properties.timeOffset = await buildJsTimeInterval(dotNetObject.timeOffset) as any;
    }
    if (hasValue(dotNetObject.visibilityTimeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent) as any;
    }

    if (hasValue(dotNetObject.arcGISLayerId)) {
        properties.id = dotNetObject.arcGISLayerId;
    }
    if (hasValue(dotNetObject.blendMode)) {
        properties.blendMode = dotNetObject.blendMode;
    }
    if (hasValue(dotNetObject.copyright)) {
        properties.copyright = dotNetObject.copyright;
    }
    if (hasValue(dotNetObject.customLayerParameters)) {
        properties.customLayerParameters = JSON.parse(dotNetObject.customLayerParameters);
    }
    if (hasValue(dotNetObject.customParameters)) {
        properties.customParameters = dotNetObject.customParameters;
    }
    if (hasValue(dotNetObject.description)) {
        properties.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.featureInfoFormat)) {
        properties.featureInfoFormat = dotNetObject.featureInfoFormat;
    }
    if (hasValue(dotNetObject.featureInfoUrl)) {
        properties.featureInfoUrl = dotNetObject.featureInfoUrl;
    }
    if (hasValue(dotNetObject.imageFormat)) {
        properties.imageFormat = dotNetObject.imageFormat;
    }
    if (hasValue(dotNetObject.imageMaxHeight)) {
        properties.imageMaxHeight = dotNetObject.imageMaxHeight;
    }
    if (hasValue(dotNetObject.imageMaxWidth)) {
        properties.imageMaxWidth = dotNetObject.imageMaxWidth;
    }
    if (hasValue(dotNetObject.imageTransparency)) {
        properties.imageTransparency = dotNetObject.imageTransparency;
    }
    if (hasValue(dotNetObject.legendEnabled)) {
        properties.legendEnabled = dotNetObject.legendEnabled;
    }
    if (hasValue(dotNetObject.listMode)) {
        properties.listMode = dotNetObject.listMode;
    }
    if (hasValue(dotNetObject.maxScale)) {
        properties.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.minScale)) {
        properties.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.opacity)) {
        properties.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.persistenceEnabled)) {
        properties.persistenceEnabled = dotNetObject.persistenceEnabled;
    }
    if (hasValue(dotNetObject.refreshInterval)) {
        properties.refreshInterval = dotNetObject.refreshInterval;
    }
    if (hasValue(dotNetObject.spatialReferences) && dotNetObject.spatialReferences.length > 0) {
        properties.spatialReferences = dotNetObject.spatialReferences;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.url)) {
        properties.url = dotNetObject.url;
    }
    if (hasValue(dotNetObject.useViewTime)) {
        properties.useViewTime = dotNetObject.useViewTime;
    }
    if (hasValue(dotNetObject.version)) {
        properties.version = dotNetObject.version;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    let jsWMSLayer = new WMSLayer(properties);
    if (hasValue(dotNetObject.hasCreateListener) && dotNetObject.hasCreateListener) {
        jsWMSLayer.on('layerview-create', async (evt: any) => {
                let { buildDotNetLayerViewCreateEvent } = await import('./layerViewCreateEvent');
                let dnEvent = await buildDotNetLayerViewCreateEvent(evt, layerId, viewId);
                let streamRef = buildJsStreamReference(dnEvent ?? {});
                await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreate', streamRef);
            });
    }
    
    if (hasValue(dotNetObject.hasCreateErrorListener) && dotNetObject.hasCreateErrorListener) {
        jsWMSLayer.on('layerview-create-error', async (evt: any) => {
                let { buildDotNetLayerViewCreateErrorEvent } = await import('./layerViewCreateErrorEvent');
                let dnEvent = await buildDotNetLayerViewCreateErrorEvent(evt, layerId, viewId);
                let streamRef = buildJsStreamReference(dnEvent ?? {});
                await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreateError', streamRef);
            });
    }
    
    if (hasValue(dotNetObject.hasDestroyListener) && dotNetObject.hasDestroyListener) {
        jsWMSLayer.on('layerview-destroy', async (evt: any) => {
                let { buildDotNetLayerViewDestroyEvent } = await import('./layerViewDestroyEvent');
                let dnEvent = await buildDotNetLayerViewDestroyEvent(evt, layerId, viewId);
                let streamRef = buildJsStreamReference(dnEvent ?? {});
                await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsDestroy', streamRef);
            });
    }
    
    if (hasValue(dotNetObject.hasRefreshListener) && dotNetObject.hasRefreshListener) {
        jsWMSLayer.on('refresh', async (evt: any) => {
                let streamRef = buildJsStreamReference(evt ?? {});
                await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsRefresh', streamRef);
            });
    }
    

    let { default: WMSLayerWrapper } = await import('./wMSLayer');
    let wMSLayerWrapper = new WMSLayerWrapper(jsWMSLayer);
    wMSLayerWrapper.geoBlazorId = dotNetObject.id;
    wMSLayerWrapper.viewId = viewId;
    wMSLayerWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = wMSLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsWMSLayer;
    
    requestAnimationFrame(async () => {
        try {
            let jsObjectRef = DotNet.createJSObjectReference(wMSLayerWrapper);
            let { buildDotNetWMSLayer } = await import('./wMSLayer');
            let dnInstantiatedObject = await buildDotNetWMSLayer(jsWMSLayer, viewId);

            let dnStream = buildJsStreamReference(dnInstantiatedObject);
            await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
                jsObjectRef, dnStream);
        } catch (e) {
            console.error('Error invoking OnJsComponentCreated for WMSLayer', e);
        }
    });
    
    return jsWMSLayer;
}


export async function buildDotNetWMSLayerGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWMSLayer: any = {};
    
    if (hasValue(jsObject.effect)) {
        let { buildDotNetEffect } = await import('./effect');
        dotNetWMSLayer.effect = buildDotNetEffect(jsObject.effect);
    }
    
    if (hasValue(jsObject.fullExtent)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetWMSLayer.fullExtent = buildDotNetExtent(jsObject.fullExtent);
    }
    
    if (hasValue(jsObject.fullExtents)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetWMSLayer.fullExtents = jsObject.fullExtents.map(i => buildDotNetExtent(i));
    }
    
    if (hasValue(jsObject.portalItem)) {
        let { buildDotNetPortalItem } = await import('./portalItem');
        dotNetWMSLayer.portalItem = await buildDotNetPortalItem(jsObject.portalItem, viewId);
    }
    
    if (hasValue(jsObject.spatialReference)) {
        let { buildDotNetSpatialReference } = await import('./spatialReference');
        dotNetWMSLayer.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference);
    }
    
    if (hasValue(jsObject.sublayers)) {
        let { buildDotNetWMSSublayer } = await import('./wMSSublayer');
        dotNetWMSLayer.sublayers = await Promise.all(jsObject.sublayers.map(async i => await buildDotNetWMSSublayer(i, viewId)));
    }
    
    if (hasValue(jsObject.timeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetWMSLayer.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
    }
    
    if (hasValue(jsObject.timeInfo)) {
        let { buildDotNetTimeInfo } = await import('./timeInfo');
        dotNetWMSLayer.timeInfo = await buildDotNetTimeInfo(jsObject.timeInfo);
    }
    
    if (hasValue(jsObject.timeOffset)) {
        let { buildDotNetTimeInterval } = await import('./timeInterval');
        dotNetWMSLayer.timeOffset = await buildDotNetTimeInterval(jsObject.timeOffset);
    }
    
    if (hasValue(jsObject.visibilityTimeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetWMSLayer.visibilityTimeExtent = buildDotNetTimeExtent(jsObject.visibilityTimeExtent);
    }
    
    if (hasValue(jsObject.id)) {
        dotNetWMSLayer.arcGISLayerId = jsObject.id;
    }
    
    if (hasValue(jsObject.blendMode)) {
        dotNetWMSLayer.blendMode = removeCircularReferences(jsObject.blendMode);
    }
    
    if (hasValue(jsObject.copyright)) {
        dotNetWMSLayer.copyright = jsObject.copyright;
    }
    
    if (hasValue(jsObject.customLayerParameters)) {
        dotNetWMSLayer.customLayerParameters = generateSerializableJson(jsObject.customLayerParameters);
    }
    
    if (hasValue(jsObject.customParameters)) {
        dotNetWMSLayer.customParameters = removeCircularReferences(jsObject.customParameters);
    }
    
    if (hasValue(jsObject.description)) {
        dotNetWMSLayer.description = jsObject.description;
    }
    
    if (hasValue(jsObject.dimensions)) {
        dotNetWMSLayer.dimensions = removeCircularReferences(jsObject.dimensions);
    }
    
    if (hasValue(jsObject.featureInfoFormat)) {
        dotNetWMSLayer.featureInfoFormat = removeCircularReferences(jsObject.featureInfoFormat);
    }
    
    if (hasValue(jsObject.featureInfoFormats)) {
        dotNetWMSLayer.featureInfoFormats = jsObject.featureInfoFormats;
    }
    
    if (hasValue(jsObject.featureInfoUrl)) {
        dotNetWMSLayer.featureInfoUrl = jsObject.featureInfoUrl;
    }
    
    if (hasValue(jsObject.imageFormat)) {
        dotNetWMSLayer.imageFormat = jsObject.imageFormat;
    }
    
    if (hasValue(jsObject.imageMaxHeight)) {
        dotNetWMSLayer.imageMaxHeight = jsObject.imageMaxHeight;
    }
    
    if (hasValue(jsObject.imageMaxWidth)) {
        dotNetWMSLayer.imageMaxWidth = jsObject.imageMaxWidth;
    }
    
    if (hasValue(jsObject.imageTransparency)) {
        dotNetWMSLayer.imageTransparency = jsObject.imageTransparency;
    }
    
    if (hasValue(jsObject.legendEnabled)) {
        dotNetWMSLayer.legendEnabled = jsObject.legendEnabled;
    }
    
    if (hasValue(jsObject.listMode)) {
        dotNetWMSLayer.listMode = removeCircularReferences(jsObject.listMode);
    }
    
    if (hasValue(jsObject.loaded)) {
        dotNetWMSLayer.loaded = jsObject.loaded;
    }
    
    if (hasValue(jsObject.maxScale)) {
        dotNetWMSLayer.maxScale = jsObject.maxScale;
    }
    
    if (hasValue(jsObject.minScale)) {
        dotNetWMSLayer.minScale = jsObject.minScale;
    }
    
    if (hasValue(jsObject.opacity)) {
        dotNetWMSLayer.opacity = jsObject.opacity;
    }
    
    if (hasValue(jsObject.persistenceEnabled)) {
        dotNetWMSLayer.persistenceEnabled = jsObject.persistenceEnabled;
    }
    
    if (hasValue(jsObject.refreshInterval)) {
        dotNetWMSLayer.refreshInterval = jsObject.refreshInterval;
    }
    
    if (hasValue(jsObject.spatialReferences)) {
        dotNetWMSLayer.spatialReferences = jsObject.spatialReferences;
    }
    
    if (hasValue(jsObject.title)) {
        dotNetWMSLayer.title = jsObject.title;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetWMSLayer.type = removeCircularReferences(jsObject.type);
    }
    
    if (hasValue(jsObject.url)) {
        dotNetWMSLayer.url = jsObject.url;
    }
    
    if (hasValue(jsObject.useViewTime)) {
        dotNetWMSLayer.useViewTime = jsObject.useViewTime;
    }
    
    if (hasValue(jsObject.version)) {
        dotNetWMSLayer.version = jsObject.version;
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetWMSLayer.visible = jsObject.visible;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetWMSLayer.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        if (hasValue(dotNetRef)) {
            try {
                dotNetWMSLayer.id = await dotNetRef.invokeMethodAsync('GetId');
            } catch (e) {
                console.error('Error invoking GetId for WMSLayer', e);
            }
        }
    }
    if (hasValue(dotNetWMSLayer.id)) {
        jsObjectRefs[dotNetWMSLayer.id] ??= jsObject;
        arcGisObjectRefs[dotNetWMSLayer.id] ??= jsObject;
    }

    return dotNetWMSLayer;
}

