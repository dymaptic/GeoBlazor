// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetVoxelIsosurface } from './voxelIsosurface';
import VoxelIsosurface = __esri.VoxelIsosurface;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsVoxelIsosurfaceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsVoxelIsosurface: any = {}
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsVoxelIsosurface.color = buildJsMapColor(dotNetObject.color) as any;
    }

    if (hasValue(dotNetObject.colorLocked)) {
        jsVoxelIsosurface.colorLocked = dotNetObject.colorLocked;
    }
    if (hasValue(dotNetObject.enabled)) {
        jsVoxelIsosurface.enabled = dotNetObject.enabled;
    }
    if (hasValue(dotNetObject.label)) {
        jsVoxelIsosurface.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.value)) {
        jsVoxelIsosurface.value = dotNetObject.value;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsVoxelIsosurface);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsVoxelIsosurface;
    
    let dnInstantiatedObject = await buildDotNetVoxelIsosurface(jsVoxelIsosurface);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for VoxelIsosurface', e);
    }
    
    return jsVoxelIsosurface;
}

export async function buildDotNetVoxelIsosurfaceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVoxelIsosurface: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.color)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetVoxelIsosurface.color = buildDotNetMapColor(jsObject.color);
        }
        if (hasValue(jsObject.colorLocked)) {
            dotNetVoxelIsosurface.colorLocked = jsObject.colorLocked;
        }
        if (hasValue(jsObject.enabled)) {
            dotNetVoxelIsosurface.enabled = jsObject.enabled;
        }
        if (hasValue(jsObject.label)) {
            dotNetVoxelIsosurface.label = jsObject.label;
        }
        if (hasValue(jsObject.value)) {
            dotNetVoxelIsosurface.value = jsObject.value;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetVoxelIsosurface.id = k;
                break;
            }
        }
    }

    return dotNetVoxelIsosurface;
}

