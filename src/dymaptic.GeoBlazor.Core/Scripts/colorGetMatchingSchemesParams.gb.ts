// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetColorGetMatchingSchemesParams } from './colorGetMatchingSchemesParams';

export async function buildJsColorGetMatchingSchemesParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jscolorGetMatchingSchemesParams: any = {}
    if (hasValue(dotNetObject.colors)) {
        let { buildJsMapColor } = await import('./mapColor');
        jscolorGetMatchingSchemesParams.colors = dotNetObject.colors.map(i => buildJsMapColor(i)) as any;
    }
    if (hasValue(dotNetObject.theme)) {
        let { buildJsTheme } = await import('./theme');
        jscolorGetMatchingSchemesParams.theme = await buildJsTheme(dotNetObject.theme, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.geometryType)) {
        jscolorGetMatchingSchemesParams.geometryType = dotNetObject.geometryType;
    }
    if (hasValue(dotNetObject.worldScale)) {
        jscolorGetMatchingSchemesParams.worldScale = dotNetObject.worldScale;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jscolorGetMatchingSchemesParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jscolorGetMatchingSchemesParams;
    
    let dnInstantiatedObject = await buildDotNetColorGetMatchingSchemesParams(jscolorGetMatchingSchemesParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ColorGetMatchingSchemesParams', e);
    }
    
    return jscolorGetMatchingSchemesParams;
}

export async function buildDotNetColorGetMatchingSchemesParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetColorGetMatchingSchemesParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.colors)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetColorGetMatchingSchemesParams.colors = jsObject.colors.map(i => buildDotNetMapColor(i));
        }
        if (hasValue(jsObject.theme)) {
            let { buildDotNetTheme } = await import('./theme');
            dotNetColorGetMatchingSchemesParams.theme = await buildDotNetTheme(jsObject.theme);
        }
    if (hasValue(jsObject.geometryType)) {
        dotNetColorGetMatchingSchemesParams.geometryType = jsObject.geometryType;
    }
    if (hasValue(jsObject.worldScale)) {
        dotNetColorGetMatchingSchemesParams.worldScale = jsObject.worldScale;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetColorGetMatchingSchemesParams.id = k;
                break;
            }
        }
    }

    return dotNetColorGetMatchingSchemesParams;
}

