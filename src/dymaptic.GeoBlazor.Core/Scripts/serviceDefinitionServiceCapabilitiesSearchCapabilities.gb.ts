// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetServiceDefinitionServiceCapabilitiesSearchCapabilities } from './serviceDefinitionServiceCapabilitiesSearchCapabilities';

export async function buildJsServiceDefinitionServiceCapabilitiesSearchCapabilitiesGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsServiceDefinitionServiceCapabilitiesSearchCapabilities: any = {};

    if (hasValue(dotNetObject.allowLeadingWildcardQueries)) {
        jsServiceDefinitionServiceCapabilitiesSearchCapabilities.allowLeadingWildcardQueries = dotNetObject.allowLeadingWildcardQueries;
    }
    if (hasValue(dotNetObject.searchTypeFilterCapabilities) && dotNetObject.searchTypeFilterCapabilities.length > 0) {
        jsServiceDefinitionServiceCapabilitiesSearchCapabilities.searchTypeFilterCapabilities = dotNetObject.searchTypeFilterCapabilities;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsServiceDefinitionServiceCapabilitiesSearchCapabilities);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsServiceDefinitionServiceCapabilitiesSearchCapabilities;
    
    return jsServiceDefinitionServiceCapabilitiesSearchCapabilities;
}


export async function buildDotNetServiceDefinitionServiceCapabilitiesSearchCapabilitiesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetServiceDefinitionServiceCapabilitiesSearchCapabilities: any = {};
    
    if (hasValue(jsObject.allowLeadingWildcardQueries)) {
        dotNetServiceDefinitionServiceCapabilitiesSearchCapabilities.allowLeadingWildcardQueries = jsObject.allowLeadingWildcardQueries;
    }
    
    if (hasValue(jsObject.searchTypeFilterCapabilities)) {
        dotNetServiceDefinitionServiceCapabilitiesSearchCapabilities.searchTypeFilterCapabilities = removeCircularReferences(jsObject.searchTypeFilterCapabilities);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetServiceDefinitionServiceCapabilitiesSearchCapabilities.id = geoBlazorId;
    }

    return dotNetServiceDefinitionServiceCapabilitiesSearchCapabilities;
}

