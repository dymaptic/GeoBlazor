// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetServiceDefinitionServiceCapabilitiesSearchCapabilities } from './serviceDefinitionServiceCapabilitiesSearchCapabilities';

export async function buildJsServiceDefinitionServiceCapabilitiesSearchCapabilitiesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsServiceDefinitionServiceCapabilitiesSearchCapabilities: any = {};

    if (hasValue(dotNetObject.allowLeadingWildcardQueries)) {
        jsServiceDefinitionServiceCapabilitiesSearchCapabilities.allowLeadingWildcardQueries = dotNetObject.allowLeadingWildcardQueries;
    }
    if (hasValue(dotNetObject.searchTypeFilterCapabilities)) {
        jsServiceDefinitionServiceCapabilitiesSearchCapabilities.searchTypeFilterCapabilities = dotNetObject.searchTypeFilterCapabilities;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsServiceDefinitionServiceCapabilitiesSearchCapabilities);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsServiceDefinitionServiceCapabilitiesSearchCapabilities;
    
    let { buildDotNetServiceDefinitionServiceCapabilitiesSearchCapabilities } = await import('./serviceDefinitionServiceCapabilitiesSearchCapabilities');
    let dnInstantiatedObject = await buildDotNetServiceDefinitionServiceCapabilitiesSearchCapabilities(jsServiceDefinitionServiceCapabilitiesSearchCapabilities, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type ServiceDefinitionServiceCapabilitiesSearchCapabilities detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ServiceDefinitionServiceCapabilitiesSearchCapabilities', e);
    }
    
    return jsServiceDefinitionServiceCapabilitiesSearchCapabilities;
}


export async function buildDotNetServiceDefinitionServiceCapabilitiesSearchCapabilitiesGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetServiceDefinitionServiceCapabilitiesSearchCapabilities: any = {};
    
    if (hasValue(jsObject.allowLeadingWildcardQueries)) {
        dotNetServiceDefinitionServiceCapabilitiesSearchCapabilities.allowLeadingWildcardQueries = jsObject.allowLeadingWildcardQueries;
    }
    
    if (hasValue(jsObject.searchTypeFilterCapabilities)) {
        dotNetServiceDefinitionServiceCapabilitiesSearchCapabilities.searchTypeFilterCapabilities = jsObject.searchTypeFilterCapabilities;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetServiceDefinitionServiceCapabilitiesSearchCapabilities.id = geoBlazorId;
    }

    return dotNetServiceDefinitionServiceCapabilitiesSearchCapabilities;
}

