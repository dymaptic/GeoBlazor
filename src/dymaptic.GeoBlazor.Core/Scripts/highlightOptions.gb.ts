// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetHighlightOptions } from './highlightOptions';

export async function buildJsHighlightOptionsGenerated(dotNetObject: any): Promise<any> {
    let jsHighlightOptions: any = {};
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsHighlightOptions.color = buildJsMapColor(dotNetObject.color) as any;
    }
    if (hasValue(dotNetObject.haloColor)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsHighlightOptions.haloColor = buildJsMapColor(dotNetObject.haloColor) as any;
    }
    if (hasValue(dotNetObject.shadowColor)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsHighlightOptions.shadowColor = buildJsMapColor(dotNetObject.shadowColor) as any;
    }

    if (hasValue(dotNetObject.fillOpacity)) {
        jsHighlightOptions.fillOpacity = dotNetObject.fillOpacity;
    }
    if (hasValue(dotNetObject.haloOpacity)) {
        jsHighlightOptions.haloOpacity = dotNetObject.haloOpacity;
    }
    if (hasValue(dotNetObject.shadowDifference)) {
        jsHighlightOptions.shadowDifference = dotNetObject.shadowDifference;
    }
    if (hasValue(dotNetObject.shadowOpacity)) {
        jsHighlightOptions.shadowOpacity = dotNetObject.shadowOpacity;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsHighlightOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsHighlightOptions;
    
    try {
        let { buildDotNetHighlightOptions } = await import('./highlightOptions');
        let dnInstantiatedObject = await buildDotNetHighlightOptions(jsHighlightOptions);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type HighlightOptions detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for HighlightOptions', e);
    }
    
    return jsHighlightOptions;
}


export async function buildDotNetHighlightOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetHighlightOptions: any = {};
    
    if (hasValue(jsObject.color)) {
        let { buildDotNetMapColor } = await import('./mapColor');
        dotNetHighlightOptions.color = buildDotNetMapColor(jsObject.color);
    }
    
    if (hasValue(jsObject.haloColor)) {
        let { buildDotNetMapColor } = await import('./mapColor');
        dotNetHighlightOptions.haloColor = buildDotNetMapColor(jsObject.haloColor);
    }
    
    if (hasValue(jsObject.shadowColor)) {
        let { buildDotNetMapColor } = await import('./mapColor');
        dotNetHighlightOptions.shadowColor = buildDotNetMapColor(jsObject.shadowColor);
    }
    
    if (hasValue(jsObject.fillOpacity)) {
        dotNetHighlightOptions.fillOpacity = jsObject.fillOpacity;
    }
    
    if (hasValue(jsObject.haloOpacity)) {
        dotNetHighlightOptions.haloOpacity = jsObject.haloOpacity;
    }
    
    if (hasValue(jsObject.shadowDifference)) {
        dotNetHighlightOptions.shadowDifference = jsObject.shadowDifference;
    }
    
    if (hasValue(jsObject.shadowOpacity)) {
        dotNetHighlightOptions.shadowOpacity = jsObject.shadowOpacity;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetHighlightOptions.id = geoBlazorId;
    }

    return dotNetHighlightOptions;
}

