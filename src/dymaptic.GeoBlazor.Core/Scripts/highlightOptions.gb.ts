// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetHighlightOptions } from './highlightOptions';

export async function buildJsHighlightOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsHighlightOptions: any = {};
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsHighlightOptions.color = buildJsMapColor(dotNetObject.color) as any;
    }
    if (hasValue(dotNetObject.haloColor)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsHighlightOptions.haloColor = buildJsMapColor(dotNetObject.haloColor) as any;
    }
    if (hasValue(dotNetObject.shadowColor)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsHighlightOptions.shadowColor = buildJsMapColor(dotNetObject.shadowColor) as any;
    }

    if (hasValue(dotNetObject.fillOpacity)) {
        jsHighlightOptions.fillOpacity = dotNetObject.fillOpacity;
    }
    if (hasValue(dotNetObject.haloOpacity)) {
        jsHighlightOptions.haloOpacity = dotNetObject.haloOpacity;
    }
    if (hasValue(dotNetObject.shadowDifference)) {
        jsHighlightOptions.shadowDifference = dotNetObject.shadowDifference;
    }
    if (hasValue(dotNetObject.shadowOpacity)) {
        jsHighlightOptions.shadowOpacity = dotNetObject.shadowOpacity;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsHighlightOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsHighlightOptions;
    
    let dnInstantiatedObject = await buildDotNetHighlightOptions(jsHighlightOptions);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for HighlightOptions', e);
    }
    
    return jsHighlightOptions;
}

export async function buildDotNetHighlightOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetHighlightOptions: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.color)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetHighlightOptions.color = buildDotNetMapColor(jsObject.color);
        }
        if (hasValue(jsObject.haloColor)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetHighlightOptions.haloColor = buildDotNetMapColor(jsObject.haloColor);
        }
        if (hasValue(jsObject.shadowColor)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetHighlightOptions.shadowColor = buildDotNetMapColor(jsObject.shadowColor);
        }
    if (hasValue(jsObject.fillOpacity)) {
        dotNetHighlightOptions.fillOpacity = jsObject.fillOpacity;
    }
    if (hasValue(jsObject.haloOpacity)) {
        dotNetHighlightOptions.haloOpacity = jsObject.haloOpacity;
    }
    if (hasValue(jsObject.shadowDifference)) {
        dotNetHighlightOptions.shadowDifference = jsObject.shadowDifference;
    }
    if (hasValue(jsObject.shadowOpacity)) {
        dotNetHighlightOptions.shadowOpacity = jsObject.shadowOpacity;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetHighlightOptions.id = k;
                break;
            }
        }
    }

    return dotNetHighlightOptions;
}

