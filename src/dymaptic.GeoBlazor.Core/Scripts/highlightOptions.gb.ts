// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import HighlightOptions from '@arcgis/core/views/support/HighlightOptions';
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';

export async function buildJsHighlightOptionsGenerated(dotNetObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.color)) {
        properties.color = dotNetObject.color;
    }
    if (hasValue(dotNetObject.fillOpacity)) {
        properties.fillOpacity = dotNetObject.fillOpacity;
    }
    if (hasValue(dotNetObject.haloColor)) {
        properties.haloColor = dotNetObject.haloColor;
    }
    if (hasValue(dotNetObject.haloOpacity)) {
        properties.haloOpacity = dotNetObject.haloOpacity;
    }
    if (hasValue(dotNetObject.name)) {
        properties.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.shadowColor)) {
        properties.shadowColor = dotNetObject.shadowColor;
    }
    if (hasValue(dotNetObject.shadowDifference)) {
        properties.shadowDifference = dotNetObject.shadowDifference;
    }
    if (hasValue(dotNetObject.shadowOpacity)) {
        properties.shadowOpacity = dotNetObject.shadowOpacity;
    }
    let jsHighlightOptions = new HighlightOptions(properties);
    
    jsObjectRefs[dotNetObject.id] = jsHighlightOptions;
    arcGisObjectRefs[dotNetObject.id] = jsHighlightOptions;
    
    return jsHighlightOptions;
}


export async function buildDotNetHighlightOptionsGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetHighlightOptions: any = {};
    
    if (hasValue(jsObject.color)) {
        dotNetHighlightOptions.color = removeCircularReferences(jsObject.color);
    }
    
    if (hasValue(jsObject.fillOpacity)) {
        dotNetHighlightOptions.fillOpacity = jsObject.fillOpacity;
    }
    
    if (hasValue(jsObject.haloColor)) {
        dotNetHighlightOptions.haloColor = removeCircularReferences(jsObject.haloColor);
    }
    
    if (hasValue(jsObject.haloOpacity)) {
        dotNetHighlightOptions.haloOpacity = jsObject.haloOpacity;
    }
    
    if (hasValue(jsObject.name)) {
        dotNetHighlightOptions.name = jsObject.name;
    }
    
    if (hasValue(jsObject.shadowColor)) {
        dotNetHighlightOptions.shadowColor = removeCircularReferences(jsObject.shadowColor);
    }
    
    if (hasValue(jsObject.shadowDifference)) {
        dotNetHighlightOptions.shadowDifference = jsObject.shadowDifference;
    }
    
    if (hasValue(jsObject.shadowOpacity)) {
        dotNetHighlightOptions.shadowOpacity = jsObject.shadowOpacity;
    }
    

    return dotNetHighlightOptions;
}

