// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCoordinateSegment } from './coordinateSegment';

export async function buildJsCoordinateSegmentGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsCoordinateSegment: any = {};

    if (hasValue(dotNetObject.alias)) {
        jsCoordinateSegment.alias = dotNetObject.alias;
    }
    if (hasValue(dotNetObject.description)) {
        jsCoordinateSegment.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.searchPattern)) {
        jsCoordinateSegment.searchPattern = dotNetObject.searchPattern;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCoordinateSegment);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCoordinateSegment;
    
    return jsCoordinateSegment;
}


export async function buildDotNetCoordinateSegmentGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCoordinateSegment: any = {};
    
    if (hasValue(jsObject.alias)) {
        dotNetCoordinateSegment.alias = jsObject.alias;
    }
    
    if (hasValue(jsObject.description)) {
        dotNetCoordinateSegment.description = jsObject.description;
    }
    
    if (hasValue(jsObject.searchPattern)) {
        dotNetCoordinateSegment.searchPattern = jsObject.searchPattern;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCoordinateSegment.id = geoBlazorId;
    }

    return dotNetCoordinateSegment;
}

