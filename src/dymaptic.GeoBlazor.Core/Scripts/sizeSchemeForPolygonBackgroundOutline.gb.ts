// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSizeSchemeForPolygonBackgroundOutline } from './sizeSchemeForPolygonBackgroundOutline';

export async function buildJsSizeSchemeForPolygonBackgroundOutlineGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSizeSchemeForPolygonBackgroundOutline: any = {};
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsSizeSchemeForPolygonBackgroundOutline.color = buildJsMapColor(dotNetObject.color) as any;
    }

    if (hasValue(dotNetObject.width)) {
        jsSizeSchemeForPolygonBackgroundOutline.width = dotNetObject.width;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSizeSchemeForPolygonBackgroundOutline);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSizeSchemeForPolygonBackgroundOutline;
    
    let dnInstantiatedObject = await buildDotNetSizeSchemeForPolygonBackgroundOutline(jsSizeSchemeForPolygonBackgroundOutline);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SizeSchemeForPolygonBackgroundOutline', e);
    }
    
    return jsSizeSchemeForPolygonBackgroundOutline;
}

export async function buildDotNetSizeSchemeForPolygonBackgroundOutlineGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSizeSchemeForPolygonBackgroundOutline: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.color)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetSizeSchemeForPolygonBackgroundOutline.color = buildDotNetMapColor(jsObject.color);
        }
    if (hasValue(jsObject.width)) {
        dotNetSizeSchemeForPolygonBackgroundOutline.width = jsObject.width;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSizeSchemeForPolygonBackgroundOutline.id = k;
                break;
            }
        }
    }

    return dotNetSizeSchemeForPolygonBackgroundOutline;
}

