// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ClassBreaksRenderer from '@arcgis/core/renderers/ClassBreaksRenderer';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ClassBreaksRendererGenerated implements IPropertyWrapper {
    public component: ClassBreaksRenderer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ClassBreaksRenderer) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async addClassBreakInfo(min: any,
        max: any,
        symbol: any): Promise<void> {
                let { buildJsSymbol } = await import('./symbol');
let jsSymbol = buildJsSymbol(symbol) as any;
        this.component.addClassBreakInfo(min,
            max,
            jsSymbol);
    }

    async getClassBreakInfo(graphic: any): Promise<any> {
                let { buildJsGraphic } = await import('./graphic');
let jsGraphic = buildJsGraphic(graphic) as any;
        return await this.component.getClassBreakInfo(jsGraphic);
    }

    async removeClassBreakInfo(min: any,
        max: any): Promise<void> {
        this.component.removeClassBreakInfo(min,
            max);
    }

    // region properties
    
    async getAuthoringInfo(): Promise<any> {
        if (!hasValue(this.component.authoringInfo)) {
            return null;
        }
        
        let { buildDotNetAuthoringInfo } = await import('./authoringInfo');
        return await buildDotNetAuthoringInfo(this.component.authoringInfo);
    }
    
    async setAuthoringInfo(value: any): Promise<void> {
        let { buildJsAuthoringInfo } = await import('./authoringInfo');
        this.component.authoringInfo = await  buildJsAuthoringInfo(value);
    }
    
    async getClassBreakInfos(): Promise<any> {
        if (!hasValue(this.component.classBreakInfos)) {
            return null;
        }
        
        let { buildDotNetClassBreakInfo } = await import('./classBreakInfo');
        return await Promise.all(this.component.classBreakInfos.map(async i => await buildDotNetClassBreakInfo(i)));
    }
    
    async setClassBreakInfos(value: any): Promise<void> {
        let { buildJsClassBreakInfo } = await import('./classBreakInfo');
        this.component.classBreakInfos = await Promise.all(value.map(async i => await buildJsClassBreakInfo(i))) as any;
    }
    
    async getDefaultSymbol(): Promise<any> {
        if (!hasValue(this.component.defaultSymbol)) {
            return null;
        }
        
        let { buildDotNetSymbol } = await import('./symbol');
        return buildDotNetSymbol(this.component.defaultSymbol);
    }
    
    async setDefaultSymbol(value: any): Promise<void> {
        let { buildJsSymbol } = await import('./symbol');
        this.component.defaultSymbol =  buildJsSymbol(value);
    }
    
    async getVisualVariables(): Promise<any> {
        if (!hasValue(this.component.visualVariables)) {
            return null;
        }
        
        let { buildDotNetVisualVariable } = await import('./visualVariable');
        return await Promise.all(this.component.visualVariables.map(async i => await buildDotNetVisualVariable(i)));
    }
    
    async setVisualVariables(value: any): Promise<void> {
        let { buildJsVisualVariable } = await import('./visualVariable');
        this.component.visualVariables = await Promise.all(value.map(async i => await buildJsVisualVariable(i, this.layerId, this.viewId))) as any;
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsClassBreaksRendererGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.authoringInfo)) {
        let { buildJsAuthoringInfo } = await import('./authoringInfo');
        properties.authoringInfo = await buildJsAuthoringInfo(dotNetObject.authoringInfo) as any;
    }
    if (hasValue(dotNetObject.classBreakInfos)) {
        let { buildJsClassBreakInfo } = await import('./classBreakInfo');
        properties.classBreakInfos = await Promise.all(dotNetObject.classBreakInfos.map(async i => await buildJsClassBreakInfo(i))) as any;
    }
    if (hasValue(dotNetObject.defaultSymbol)) {
        let { buildJsSymbol } = await import('./symbol');
        properties.defaultSymbol = buildJsSymbol(dotNetObject.defaultSymbol) as any;
    }
    if (hasValue(dotNetObject.visualVariables)) {
        let { buildJsVisualVariable } = await import('./visualVariable');
        properties.visualVariables = await Promise.all(dotNetObject.visualVariables.map(async i => await buildJsVisualVariable(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.backgroundFillSymbol)) {
        const { id, dotNetComponentReference, ...sanitizedBackgroundFillSymbol } = dotNetObject.backgroundFillSymbol;
        properties.backgroundFillSymbol = sanitizedBackgroundFillSymbol;
    }
    if (hasValue(dotNetObject.defaultLabel)) {
        properties.defaultLabel = dotNetObject.defaultLabel;
    }
    if (hasValue(dotNetObject.field)) {
        properties.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.legendOptions)) {
        properties.legendOptions = dotNetObject.legendOptions;
    }
    if (hasValue(dotNetObject.normalizationField)) {
        properties.normalizationField = dotNetObject.normalizationField;
    }
    if (hasValue(dotNetObject.normalizationTotal)) {
        properties.normalizationTotal = dotNetObject.normalizationTotal;
    }
    if (hasValue(dotNetObject.normalizationType)) {
        properties.normalizationType = dotNetObject.normalizationType;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        properties.valueExpression = dotNetObject.valueExpression;
    }
    if (hasValue(dotNetObject.valueExpressionTitle)) {
        properties.valueExpressionTitle = dotNetObject.valueExpressionTitle;
    }
    let jsClassBreaksRenderer = new ClassBreaksRenderer(properties);

    let { default: ClassBreaksRendererWrapper } = await import('./classBreaksRenderer');
    let classBreaksRendererWrapper = new ClassBreaksRendererWrapper(jsClassBreaksRenderer);
    classBreaksRendererWrapper.geoBlazorId = dotNetObject.id;
    classBreaksRendererWrapper.viewId = viewId;
    classBreaksRendererWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(classBreaksRendererWrapper);
    jsObjectRefs[dotNetObject.id] = classBreaksRendererWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsClassBreaksRenderer;
    let { buildDotNetClassBreaksRenderer } = await import('./classBreaksRenderer');
    let dnInstantiatedObject = await buildDotNetClassBreaksRenderer(jsClassBreaksRenderer);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ClassBreaksRenderer', e);
    }
    
    return classBreaksRendererWrapper;
}

export async function buildDotNetClassBreaksRendererGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetClassBreaksRenderer: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.authoringInfo)) {
        let { buildDotNetAuthoringInfo } = await import('./authoringInfo');
        dotNetClassBreaksRenderer.authoringInfo = await buildDotNetAuthoringInfo(jsObject.authoringInfo);
    }
    if (hasValue(jsObject.classBreakInfos)) {
        let { buildDotNetClassBreakInfo } = await import('./classBreakInfo');
        dotNetClassBreaksRenderer.classBreakInfos = await Promise.all(jsObject.classBreakInfos.map(async i => await buildDotNetClassBreakInfo(i)));
    }
    if (hasValue(jsObject.defaultSymbol)) {
        let { buildDotNetSymbol } = await import('./symbol');
        dotNetClassBreaksRenderer.defaultSymbol = buildDotNetSymbol(jsObject.defaultSymbol);
    }
    if (hasValue(jsObject.visualVariables)) {
        let { buildDotNetVisualVariable } = await import('./visualVariable');
        dotNetClassBreaksRenderer.visualVariables = await Promise.all(jsObject.visualVariables.map(async i => await buildDotNetVisualVariable(i)));
    }
    if (hasValue(jsObject.backgroundFillSymbol)) {
        dotNetClassBreaksRenderer.backgroundFillSymbol = jsObject.backgroundFillSymbol;
    }
    if (hasValue(jsObject.defaultLabel)) {
        dotNetClassBreaksRenderer.defaultLabel = jsObject.defaultLabel;
    }
    if (hasValue(jsObject.field)) {
        dotNetClassBreaksRenderer.field = jsObject.field;
    }
    if (hasValue(jsObject.legendOptions)) {
        dotNetClassBreaksRenderer.legendOptions = jsObject.legendOptions;
    }
    if (hasValue(jsObject.normalizationField)) {
        dotNetClassBreaksRenderer.normalizationField = jsObject.normalizationField;
    }
    if (hasValue(jsObject.normalizationTotal)) {
        dotNetClassBreaksRenderer.normalizationTotal = jsObject.normalizationTotal;
    }
    if (hasValue(jsObject.normalizationType)) {
        dotNetClassBreaksRenderer.normalizationType = jsObject.normalizationType;
    }
    if (hasValue(jsObject.type)) {
        dotNetClassBreaksRenderer.type = jsObject.type;
    }
    if (hasValue(jsObject.valueExpression)) {
        dotNetClassBreaksRenderer.valueExpression = jsObject.valueExpression;
    }
    if (hasValue(jsObject.valueExpressionTitle)) {
        dotNetClassBreaksRenderer.valueExpressionTitle = jsObject.valueExpressionTitle;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetClassBreaksRenderer.id = k;
                break;
            }
        }
    }

    return dotNetClassBreaksRenderer;
}

