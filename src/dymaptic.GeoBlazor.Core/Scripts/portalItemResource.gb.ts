// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import PortalItemResource from '@arcgis/core/portal/PortalItemResource';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PortalItemResourceGenerated implements IPropertyWrapper {
    public component: PortalItemResource;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: PortalItemResource) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async fetch(responseType: any,
        options: any): Promise<any> {
        return await this.component.fetch(responseType,
            options);
    }

    async update(content: any,
        options: any): Promise<any> {
        return await this.component.update(content,
            options);
    }

    // region properties
    
    async getPortalItem(): Promise<any> {
        if (!hasValue(this.component.portalItem)) {
            return null;
        }
        
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(this.component.portalItem);
    }
    
    async setPortalItem(value: any): Promise<void> {
        let { buildJsPortalItem } = await import('./portalItem');
        this.component.portalItem = await  buildJsPortalItem(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsPortalItemResourceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.portalItem)) {
        let { buildJsPortalItem } = await import('./portalItem');
        properties.portalItem = await buildJsPortalItem(dotNetObject.portalItem, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.path)) {
        properties.path = dotNetObject.path;
    }
    let jsPortalItemResource = new PortalItemResource(properties);

    let { default: PortalItemResourceWrapper } = await import('./portalItemResource');
    let portalItemResourceWrapper = new PortalItemResourceWrapper(jsPortalItemResource);
    portalItemResourceWrapper.geoBlazorId = dotNetObject.id;
    portalItemResourceWrapper.viewId = viewId;
    portalItemResourceWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(portalItemResourceWrapper);
    jsObjectRefs[dotNetObject.id] = portalItemResourceWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsPortalItemResource;
    
    return jsPortalItemResource;
}


export async function buildDotNetPortalItemResourceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPortalItemResource: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.portalItem)) {
        let { buildDotNetPortalItem } = await import('./portalItem');
        dotNetPortalItemResource.portalItem = await buildDotNetPortalItem(jsObject.portalItem);
    }
    if (hasValue(jsObject.path)) {
        dotNetPortalItemResource.path = jsObject.path;
    }
    if (hasValue(jsObject.url)) {
        dotNetPortalItemResource.url = jsObject.url;
    }

    return dotNetPortalItemResource;
}

