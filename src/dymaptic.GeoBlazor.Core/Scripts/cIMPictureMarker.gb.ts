// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCIMPictureMarker } from './cIMPictureMarker';

export async function buildJsCIMPictureMarkerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCIMPictureMarker: any = {};
    if (hasValue(dotNetObject.anchorPoint)) {
        let { buildJsCIMPictureMarkerAnchorPoint } = await import('./cIMPictureMarkerAnchorPoint');
        jsCIMPictureMarker.anchorPoint = await buildJsCIMPictureMarkerAnchorPoint(dotNetObject.anchorPoint, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.colorSubstitutions)) {
        let { buildJsCIMColorSubstitution } = await import('./cIMColorSubstitution');
        jsCIMPictureMarker.colorSubstitutions = await Promise.all(dotNetObject.colorSubstitutions.map(async i => await buildJsCIMColorSubstitution(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.effects)) {
        let { buildJsICIMGeometricEffect } = await import('./iCIMGeometricEffect');
        jsCIMPictureMarker.effects = dotNetObject.effects.map(i => buildJsICIMGeometricEffect(i)) as any;
    }
    if (hasValue(dotNetObject.markerPlacement)) {
        let { buildJsIMarkerPlacement } = await import('./iMarkerPlacement');
        jsCIMPictureMarker.markerPlacement = buildJsIMarkerPlacement(dotNetObject.markerPlacement) as any;
    }

    if (hasValue(dotNetObject.anchorPointUnits)) {
        jsCIMPictureMarker.anchorPointUnits = dotNetObject.anchorPointUnits;
    }
    if (hasValue(dotNetObject.angleX)) {
        jsCIMPictureMarker.angleX = dotNetObject.angleX;
    }
    if (hasValue(dotNetObject.angleY)) {
        jsCIMPictureMarker.angleY = dotNetObject.angleY;
    }
    if (hasValue(dotNetObject.animatedSymbolProperties)) {
        jsCIMPictureMarker.animatedSymbolProperties = dotNetObject.animatedSymbolProperties;
    }
    if (hasValue(dotNetObject.billboardMode3D)) {
        jsCIMPictureMarker.billboardMode3D = dotNetObject.billboardMode3D;
    }
    if (hasValue(dotNetObject.colorLocked)) {
        jsCIMPictureMarker.colorLocked = dotNetObject.colorLocked;
    }
    if (hasValue(dotNetObject.depth3D)) {
        jsCIMPictureMarker.depth3D = dotNetObject.depth3D;
    }
    if (hasValue(dotNetObject.dominantSizeAxis3D)) {
        jsCIMPictureMarker.dominantSizeAxis3D = dotNetObject.dominantSizeAxis3D;
    }
    if (hasValue(dotNetObject.enable)) {
        jsCIMPictureMarker.enable = dotNetObject.enable;
    }
    if (hasValue(dotNetObject.height)) {
        jsCIMPictureMarker.height = dotNetObject.height;
    }
    if (hasValue(dotNetObject.invertBackfaceTexture)) {
        jsCIMPictureMarker.invertBackfaceTexture = dotNetObject.invertBackfaceTexture;
    }
    if (hasValue(dotNetObject.name)) {
        jsCIMPictureMarker.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.offsetX)) {
        jsCIMPictureMarker.offsetX = dotNetObject.offsetX;
    }
    if (hasValue(dotNetObject.offsetY)) {
        jsCIMPictureMarker.offsetY = dotNetObject.offsetY;
    }
    if (hasValue(dotNetObject.offsetZ)) {
        jsCIMPictureMarker.offsetZ = dotNetObject.offsetZ;
    }
    if (hasValue(dotNetObject.overprint)) {
        jsCIMPictureMarker.overprint = dotNetObject.overprint;
    }
    if (hasValue(dotNetObject.primitiveName)) {
        jsCIMPictureMarker.primitiveName = dotNetObject.primitiveName;
    }
    if (hasValue(dotNetObject.rotateClockwise)) {
        jsCIMPictureMarker.rotateClockwise = dotNetObject.rotateClockwise;
    }
    if (hasValue(dotNetObject.rotation)) {
        jsCIMPictureMarker.rotation = dotNetObject.rotation;
    }
    if (hasValue(dotNetObject.scaleX)) {
        jsCIMPictureMarker.scaleX = dotNetObject.scaleX;
    }
    if (hasValue(dotNetObject.size)) {
        jsCIMPictureMarker.size = dotNetObject.size;
    }
    if (hasValue(dotNetObject.textureFilter)) {
        jsCIMPictureMarker.textureFilter = dotNetObject.textureFilter;
    }
    if (hasValue(dotNetObject.tintColor)) {
        jsCIMPictureMarker.tintColor = dotNetObject.tintColor;
    }
    if (hasValue(dotNetObject.url)) {
        jsCIMPictureMarker.url = dotNetObject.url;
    }
    if (hasValue(dotNetObject.verticalOrientation3D)) {
        jsCIMPictureMarker.verticalOrientation3D = dotNetObject.verticalOrientation3D;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCIMPictureMarker);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCIMPictureMarker;
    
    let { buildDotNetCIMPictureMarker } = await import('./cIMPictureMarker');
    let dnInstantiatedObject = await buildDotNetCIMPictureMarker(jsCIMPictureMarker);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type CIMPictureMarker detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CIMPictureMarker', e);
    }
    
    return jsCIMPictureMarker;
}


export async function buildDotNetCIMPictureMarkerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCIMPictureMarker: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.anchorPoint)) {
        let { buildDotNetCIMPictureMarkerAnchorPoint } = await import('./cIMPictureMarkerAnchorPoint');
        dotNetCIMPictureMarker.anchorPoint = await buildDotNetCIMPictureMarkerAnchorPoint(jsObject.anchorPoint);
    }
    if (hasValue(jsObject.colorSubstitutions)) {
        let { buildDotNetCIMColorSubstitution } = await import('./cIMColorSubstitution');
        dotNetCIMPictureMarker.colorSubstitutions = await Promise.all(jsObject.colorSubstitutions.map(async i => await buildDotNetCIMColorSubstitution(i)));
    }
    if (hasValue(jsObject.effects)) {
        let { buildDotNetICIMGeometricEffect } = await import('./iCIMGeometricEffect');
        dotNetCIMPictureMarker.effects = jsObject.effects.map(i => buildDotNetICIMGeometricEffect(i));
    }
    if (hasValue(jsObject.markerPlacement)) {
        let { buildDotNetIMarkerPlacement } = await import('./iMarkerPlacement');
        dotNetCIMPictureMarker.markerPlacement = buildDotNetIMarkerPlacement(jsObject.markerPlacement);
    }
    if (hasValue(jsObject.anchorPointUnits)) {
        dotNetCIMPictureMarker.anchorPointUnits = jsObject.anchorPointUnits;
    }
    if (hasValue(jsObject.angleX)) {
        dotNetCIMPictureMarker.angleX = jsObject.angleX;
    }
    if (hasValue(jsObject.angleY)) {
        dotNetCIMPictureMarker.angleY = jsObject.angleY;
    }
    if (hasValue(jsObject.animatedSymbolProperties)) {
        dotNetCIMPictureMarker.animatedSymbolProperties = jsObject.animatedSymbolProperties;
    }
    if (hasValue(jsObject.billboardMode3D)) {
        dotNetCIMPictureMarker.billboardMode3D = jsObject.billboardMode3D;
    }
    if (hasValue(jsObject.colorLocked)) {
        dotNetCIMPictureMarker.colorLocked = jsObject.colorLocked;
    }
    if (hasValue(jsObject.depth3D)) {
        dotNetCIMPictureMarker.depth3D = jsObject.depth3D;
    }
    if (hasValue(jsObject.dominantSizeAxis3D)) {
        dotNetCIMPictureMarker.dominantSizeAxis3D = jsObject.dominantSizeAxis3D;
    }
    if (hasValue(jsObject.enable)) {
        dotNetCIMPictureMarker.enable = jsObject.enable;
    }
    if (hasValue(jsObject.height)) {
        dotNetCIMPictureMarker.height = jsObject.height;
    }
    if (hasValue(jsObject.invertBackfaceTexture)) {
        dotNetCIMPictureMarker.invertBackfaceTexture = jsObject.invertBackfaceTexture;
    }
    if (hasValue(jsObject.name)) {
        dotNetCIMPictureMarker.name = jsObject.name;
    }
    if (hasValue(jsObject.offsetX)) {
        dotNetCIMPictureMarker.offsetX = jsObject.offsetX;
    }
    if (hasValue(jsObject.offsetY)) {
        dotNetCIMPictureMarker.offsetY = jsObject.offsetY;
    }
    if (hasValue(jsObject.offsetZ)) {
        dotNetCIMPictureMarker.offsetZ = jsObject.offsetZ;
    }
    if (hasValue(jsObject.overprint)) {
        dotNetCIMPictureMarker.overprint = jsObject.overprint;
    }
    if (hasValue(jsObject.primitiveName)) {
        dotNetCIMPictureMarker.primitiveName = jsObject.primitiveName;
    }
    if (hasValue(jsObject.rotateClockwise)) {
        dotNetCIMPictureMarker.rotateClockwise = jsObject.rotateClockwise;
    }
    if (hasValue(jsObject.rotation)) {
        dotNetCIMPictureMarker.rotation = jsObject.rotation;
    }
    if (hasValue(jsObject.scaleX)) {
        dotNetCIMPictureMarker.scaleX = jsObject.scaleX;
    }
    if (hasValue(jsObject.size)) {
        dotNetCIMPictureMarker.size = jsObject.size;
    }
    if (hasValue(jsObject.textureFilter)) {
        dotNetCIMPictureMarker.textureFilter = jsObject.textureFilter;
    }
    if (hasValue(jsObject.tintColor)) {
        dotNetCIMPictureMarker.tintColor = jsObject.tintColor;
    }
    if (hasValue(jsObject.type)) {
        dotNetCIMPictureMarker.type = jsObject.type;
    }
    if (hasValue(jsObject.url)) {
        dotNetCIMPictureMarker.url = jsObject.url;
    }
    if (hasValue(jsObject.verticalOrientation3D)) {
        dotNetCIMPictureMarker.verticalOrientation3D = jsObject.verticalOrientation3D;
    }

    dotNetCIMPictureMarker.id = lookupGeoBlazorId(jsObject);

    return dotNetCIMPictureMarker;
}

