// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetMoveEventInfo } from './moveEventInfo';

export async function buildJsMoveEventInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsMoveEventInfo: any = {}
    if (hasValue(dotNetObject.mover)) {
        let { buildJsGraphic } = await import('./graphic');
        jsMoveEventInfo.mover = buildJsGraphic(dotNetObject.mover) as any;
    }

    if (hasValue(dotNetObject.dx)) {
        jsMoveEventInfo.dx = dotNetObject.dx;
    }
    if (hasValue(dotNetObject.dy)) {
        jsMoveEventInfo.dy = dotNetObject.dy;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsMoveEventInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsMoveEventInfo;
    
    let dnInstantiatedObject = await buildDotNetMoveEventInfo(jsMoveEventInfo);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for MoveEventInfo', e);
    }
    
    return jsMoveEventInfo;
}

export async function buildDotNetMoveEventInfoGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMoveEventInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.mover)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetMoveEventInfo.mover = buildDotNetGraphic(jsObject.mover, layerId, viewId);
        }
        if (hasValue(jsObject.dx)) {
            dotNetMoveEventInfo.dx = jsObject.dx;
        }
        if (hasValue(jsObject.dy)) {
            dotNetMoveEventInfo.dy = jsObject.dy;
        }
        if (hasValue(jsObject.type)) {
            dotNetMoveEventInfo.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetMoveEventInfo.id = k;
                break;
            }
        }
    }

    return dotNetMoveEventInfo;
}

