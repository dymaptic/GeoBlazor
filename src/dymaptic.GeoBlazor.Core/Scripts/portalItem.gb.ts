// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import PortalItem from '@arcgis/core/portal/PortalItem';
import {IPropertyWrapper} from './definitions';
import {createGeoBlazorObject} from './arcGisJsInterop';

export default class PortalItemGenerated implements IPropertyWrapper {
    public component: PortalItem;

    constructor(component: PortalItem) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async addRating(rating: any): Promise<any> {
        let result = await this.component.addRating(rating);
        return await createGeoBlazorObject(result);
    }

    async addResource(resource: any,
        content: any,
        options: any): Promise<any> {
        return await this.component.addResource(resource,
            content,
            options);
    }

    async deleteRating(): Promise<any> {
        return await this.component.deleteRating();
    }

    async fetchData(responseType: any,
        options: any): Promise<any> {
        return await this.component.fetchData(responseType,
            options);
    }

    async fetchRating(options: any): Promise<any> {
        let result = await this.component.fetchRating(options);
        return await createGeoBlazorObject(result);
    }

    async fetchRelatedItems(relationshipType: any,
        direction: any,
        options: any): Promise<any> {
        let result = await this.component.fetchRelatedItems(relationshipType,
            direction,
            options);
        return await createGeoBlazorObject(result);
    }

    async fetchResources(num: any,
        start: any,
        sortOrder: any,
        sortField: any,
        options: any): Promise<any> {
        let result = await this.component.fetchResources(num,
            start,
            sortOrder,
            sortField,
            options);
        return await createGeoBlazorObject(result);
    }

    async getThumbnailUrl(width: any): Promise<any> {
        return this.component.getThumbnailUrl(width);
    }

    async reload(): Promise<any> {
        let result = await this.component.reload();
        return await createGeoBlazorObject(result);
    }

    async removeAllResources(options: any): Promise<any> {
        return await this.component.removeAllResources(options);
    }

    async removeResource(resource: any,
        options: any): Promise<any> {
        return await this.component.removeResource(resource,
            options);
    }

    async update(data: any): Promise<any> {
        let result = await this.component.update(data);
        return await createGeoBlazorObject(result);
    }

    async updateThumbnail(thumbnail: any,
        filename: any): Promise<any> {
        let result = await this.component.updateThumbnail(thumbnail,
            filename);
        return await createGeoBlazorObject(result);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
    
    addToProperty(prop: string, value: any): void {
        if (Array.isArray(value)) {
            this.component[prop].addMany(value);
        } else {
            this.component[prop].add(value);
        }
    }
    
    removeFromProperty(prop: string, value: any): any {
        if (Array.isArray(value)) {
            this.component[prop].removeMany(value);
        } else {
            this.component[prop].remove(value);
        }
    }
}
