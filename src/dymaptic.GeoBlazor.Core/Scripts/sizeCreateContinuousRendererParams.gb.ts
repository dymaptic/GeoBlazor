// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetSizeCreateContinuousRendererParams } from './sizeCreateContinuousRendererParams';
import sizeCreateContinuousRendererParams = __esri.sizeCreateContinuousRendererParams;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsSizeCreateContinuousRendererParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jssizeCreateContinuousRendererParams: any = {}
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jssizeCreateContinuousRendererParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.defaultSymbolEnabled)) {
        jssizeCreateContinuousRendererParams.defaultSymbolEnabled = dotNetObject.defaultSymbolEnabled;
    }
    if (hasValue(dotNetObject.field)) {
        jssizeCreateContinuousRendererParams.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.forBinning)) {
        jssizeCreateContinuousRendererParams.forBinning = dotNetObject.forBinning;
    }
    if (hasValue(dotNetObject.legendOptions)) {
        jssizeCreateContinuousRendererParams.legendOptions = dotNetObject.legendOptions;
    }
    if (hasValue(dotNetObject.maxValue)) {
        jssizeCreateContinuousRendererParams.maxValue = dotNetObject.maxValue;
    }
    if (hasValue(dotNetObject.minValue)) {
        jssizeCreateContinuousRendererParams.minValue = dotNetObject.minValue;
    }
    if (hasValue(dotNetObject.normalizationField)) {
        jssizeCreateContinuousRendererParams.normalizationField = dotNetObject.normalizationField;
    }
    if (hasValue(dotNetObject.outlineOptimizationEnabled)) {
        jssizeCreateContinuousRendererParams.outlineOptimizationEnabled = dotNetObject.outlineOptimizationEnabled;
    }
    if (hasValue(dotNetObject.referenceSizeOptions)) {
        jssizeCreateContinuousRendererParams.referenceSizeOptions = dotNetObject.referenceSizeOptions;
    }
    if (hasValue(dotNetObject.signal)) {
        jssizeCreateContinuousRendererParams.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.sizeOptimizationEnabled)) {
        jssizeCreateContinuousRendererParams.sizeOptimizationEnabled = dotNetObject.sizeOptimizationEnabled;
    }
    if (hasValue(dotNetObject.sizeScheme)) {
        jssizeCreateContinuousRendererParams.sizeScheme = dotNetObject.sizeScheme;
    }
    if (hasValue(dotNetObject.sqlExpression)) {
        jssizeCreateContinuousRendererParams.sqlExpression = dotNetObject.sqlExpression;
    }
    if (hasValue(dotNetObject.sqlWhere)) {
        jssizeCreateContinuousRendererParams.sqlWhere = dotNetObject.sqlWhere;
    }
    if (hasValue(dotNetObject.statistics)) {
        jssizeCreateContinuousRendererParams.statistics = dotNetObject.statistics;
    }
    if (hasValue(dotNetObject.symbolType)) {
        jssizeCreateContinuousRendererParams.symbolType = dotNetObject.symbolType;
    }
    if (hasValue(dotNetObject.theme)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedTheme } = dotNetObject.theme;
        jssizeCreateContinuousRendererParams.theme = sanitizedTheme;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        jssizeCreateContinuousRendererParams.valueExpression = dotNetObject.valueExpression;
    }
    if (hasValue(dotNetObject.valueExpressionTitle)) {
        jssizeCreateContinuousRendererParams.valueExpressionTitle = dotNetObject.valueExpressionTitle;
    }
    if (hasValue(dotNetObject.view)) {
        jssizeCreateContinuousRendererParams.view = dotNetObject.view;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jssizeCreateContinuousRendererParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jssizeCreateContinuousRendererParams;
    
    let dnInstantiatedObject = await buildDotNetSizeCreateContinuousRendererParams(jssizeCreateContinuousRendererParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SizeCreateContinuousRendererParams', e);
    }
    
    return jssizeCreateContinuousRendererParams;
}

export async function buildDotNetSizeCreateContinuousRendererParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSizeCreateContinuousRendererParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.defaultSymbolEnabled)) {
            dotNetSizeCreateContinuousRendererParams.defaultSymbolEnabled = jsObject.defaultSymbolEnabled;
        }
        if (hasValue(jsObject.field)) {
            dotNetSizeCreateContinuousRendererParams.field = jsObject.field;
        }
        if (hasValue(jsObject.forBinning)) {
            dotNetSizeCreateContinuousRendererParams.forBinning = jsObject.forBinning;
        }
        if (hasValue(jsObject.legendOptions)) {
            dotNetSizeCreateContinuousRendererParams.legendOptions = jsObject.legendOptions;
        }
        if (hasValue(jsObject.maxValue)) {
            dotNetSizeCreateContinuousRendererParams.maxValue = jsObject.maxValue;
        }
        if (hasValue(jsObject.minValue)) {
            dotNetSizeCreateContinuousRendererParams.minValue = jsObject.minValue;
        }
        if (hasValue(jsObject.normalizationField)) {
            dotNetSizeCreateContinuousRendererParams.normalizationField = jsObject.normalizationField;
        }
        if (hasValue(jsObject.outlineOptimizationEnabled)) {
            dotNetSizeCreateContinuousRendererParams.outlineOptimizationEnabled = jsObject.outlineOptimizationEnabled;
        }
        if (hasValue(jsObject.referenceSizeOptions)) {
            dotNetSizeCreateContinuousRendererParams.referenceSizeOptions = jsObject.referenceSizeOptions;
        }
        if (hasValue(jsObject.signal)) {
            dotNetSizeCreateContinuousRendererParams.signal = jsObject.signal;
        }
        if (hasValue(jsObject.sizeOptimizationEnabled)) {
            dotNetSizeCreateContinuousRendererParams.sizeOptimizationEnabled = jsObject.sizeOptimizationEnabled;
        }
        if (hasValue(jsObject.sizeScheme)) {
            dotNetSizeCreateContinuousRendererParams.sizeScheme = jsObject.sizeScheme;
        }
        if (hasValue(jsObject.sqlExpression)) {
            dotNetSizeCreateContinuousRendererParams.sqlExpression = jsObject.sqlExpression;
        }
        if (hasValue(jsObject.sqlWhere)) {
            dotNetSizeCreateContinuousRendererParams.sqlWhere = jsObject.sqlWhere;
        }
        if (hasValue(jsObject.statistics)) {
            dotNetSizeCreateContinuousRendererParams.statistics = jsObject.statistics;
        }
        if (hasValue(jsObject.symbolType)) {
            dotNetSizeCreateContinuousRendererParams.symbolType = jsObject.symbolType;
        }
        if (hasValue(jsObject.theme)) {
            dotNetSizeCreateContinuousRendererParams.theme = jsObject.theme;
        }
        if (hasValue(jsObject.valueExpression)) {
            dotNetSizeCreateContinuousRendererParams.valueExpression = jsObject.valueExpression;
        }
        if (hasValue(jsObject.valueExpressionTitle)) {
            dotNetSizeCreateContinuousRendererParams.valueExpressionTitle = jsObject.valueExpressionTitle;
        }
        if (hasValue(jsObject.view)) {
            dotNetSizeCreateContinuousRendererParams.view = jsObject.view;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSizeCreateContinuousRendererParams.id = k;
                break;
            }
        }
    }

    return dotNetSizeCreateContinuousRendererParams;
}

