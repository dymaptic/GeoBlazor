// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetPredominanceUtils } from './predominanceUtils';

export async function buildJsPredominanceUtilsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jspredominanceUtils: any = {};

    
    let jsObjectRef = DotNet.createJSObjectReference(jspredominanceUtils);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jspredominanceUtils;
    
    let dnInstantiatedObject = await buildDotNetPredominanceUtils(jspredominanceUtils);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PredominanceUtils', e);
    }
    
    return jspredominanceUtils;
}

export async function buildDotNetPredominanceUtilsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPredominanceUtils: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPredominanceUtils.id = k;
                break;
            }
        }
    }

    return dotNetPredominanceUtils;
}

