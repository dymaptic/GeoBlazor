// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import RasterPresetRenderer from '@arcgis/core/renderers/support/RasterPresetRenderer';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';

export async function buildJsRasterPresetRendererGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsRenderer } = await import('./renderer');
        properties.renderer = await buildJsRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.bandIds) && dotNetObject.bandIds.length > 0) {
        properties.bandIds = dotNetObject.bandIds;
    }
    if (hasValue(dotNetObject.method)) {
        properties.method = dotNetObject.method;
    }
    if (hasValue(dotNetObject.name)) {
        properties.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.value)) {
        properties.value = dotNetObject.value;
    }
    let jsRasterPresetRenderer = new RasterPresetRenderer(properties);
    
    jsObjectRefs[dotNetObject.id] = jsRasterPresetRenderer;
    arcGisObjectRefs[dotNetObject.id] = jsRasterPresetRenderer;
    
    return jsRasterPresetRenderer;
}


export async function buildDotNetRasterPresetRendererGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRasterPresetRenderer: any = {};
    
    if (hasValue(jsObject.renderer)) {
        let { buildDotNetRenderer } = await import('./renderer');
        dotNetRasterPresetRenderer.renderer = await buildDotNetRenderer(jsObject.renderer, viewId);
    }
    
    if (hasValue(jsObject.bandIds)) {
        dotNetRasterPresetRenderer.bandIds = jsObject.bandIds;
    }
    
    if (hasValue(jsObject.method)) {
        dotNetRasterPresetRenderer.method = removeCircularReferences(jsObject.method);
    }
    
    if (hasValue(jsObject.name)) {
        dotNetRasterPresetRenderer.name = jsObject.name;
    }
    
    if (hasValue(jsObject.value)) {
        dotNetRasterPresetRenderer.value = jsObject.value;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetRasterPresetRenderer.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        if (hasValue(dotNetRef)) {
            try {
                dotNetRasterPresetRenderer.id = await dotNetRef.invokeMethodAsync('GetId');
            } catch (e) {
                console.error('Error invoking GetId for RasterPresetRenderer', e);
            }
        }
    }
    if (hasValue(dotNetRasterPresetRenderer.id)) {
        jsObjectRefs[dotNetRasterPresetRenderer.id] ??= jsObject;
        arcGisObjectRefs[dotNetRasterPresetRenderer.id] ??= jsObject;
    }

    return dotNetRasterPresetRenderer;
}

