// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import ExpandViewModel from '@arcgis/core/widgets/Expand/ExpandViewModel';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ExpandViewModelGenerated implements IPropertyWrapper {
    public component: ExpandViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ExpandViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsExpandViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsExpandViewModel = new ExpandViewModel();

    if (hasValue(dotNetObject.autoCollapse)) {
        jsExpandViewModel.autoCollapse = dotNetObject.autoCollapse;
    }
    if (hasValue(dotNetObject.expanded)) {
        jsExpandViewModel.expanded = dotNetObject.expanded;
    }
    if (hasValue(dotNetObject.group)) {
        jsExpandViewModel.group = dotNetObject.group;
    }
    if (hasValue(dotNetObject.view)) {
        jsExpandViewModel.view = dotNetObject.view;
    }
    let { default: ExpandViewModelWrapper } = await import('./expandViewModel');
    let expandViewModelWrapper = new ExpandViewModelWrapper(jsExpandViewModel);
    expandViewModelWrapper.geoBlazorId = dotNetObject.id;
    expandViewModelWrapper.viewId = viewId;
    expandViewModelWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(expandViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = expandViewModelWrapper;

    arcGisObjectRefs[dotNetObject.id] = jsExpandViewModel;
    let { buildDotNetExpandViewModel } = await import('./expandViewModel');
    let dnInstantiatedObject = await buildDotNetExpandViewModel(jsExpandViewModel, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ExpandViewModel', e);
    }
    
    return jsExpandViewModel;
}

export async function buildDotNetExpandViewModelGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetExpandViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.autoCollapse)) {
            dotNetExpandViewModel.autoCollapse = jsObject.autoCollapse;
        }
        if (hasValue(jsObject.expanded)) {
            dotNetExpandViewModel.expanded = jsObject.expanded;
        }
        if (hasValue(jsObject.group)) {
            dotNetExpandViewModel.group = jsObject.group;
        }
        if (hasValue(jsObject.state)) {
            dotNetExpandViewModel.state = jsObject.state;
        }
        if (hasValue(jsObject.view)) {
            dotNetExpandViewModel.view = jsObject.view;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetExpandViewModel.id = k;
                break;
            }
        }
    }

    return dotNetExpandViewModel;
}

