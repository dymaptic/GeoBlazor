// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Expand from '@arcgis/core/widgets/Expand';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, buildJsStreamReference, generateSerializableJson } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ExpandWidgetGenerated implements IPropertyWrapper {
    public widget: Expand;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: Expand) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {

        if (hasValue(dotNetObject.autoCollapse)) {
            this.widget.autoCollapse = dotNetObject.autoCollapse;
        }
        if (hasValue(dotNetObject.closeOnEsc)) {
            this.widget.closeOnEsc = dotNetObject.closeOnEsc;
        }
        if (hasValue(dotNetObject.collapseIcon)) {
            this.widget.collapseIcon = dotNetObject.collapseIcon;
        }
        if (hasValue(dotNetObject.collapseTooltip)) {
            this.widget.collapseTooltip = dotNetObject.collapseTooltip;
        }
        if (hasValue(dotNetObject.expanded)) {
            this.widget.expanded = dotNetObject.expanded;
        }
        if (hasValue(dotNetObject.expandIcon)) {
            this.widget.expandIcon = dotNetObject.expandIcon;
        }
        if (hasValue(dotNetObject.expandTooltip)) {
            this.widget.expandTooltip = dotNetObject.expandTooltip;
        }
        if (hasValue(dotNetObject.focusTrapDisabled)) {
            this.widget.focusTrapDisabled = dotNetObject.focusTrapDisabled;
        }
        if (hasValue(dotNetObject.group)) {
            this.widget.group = dotNetObject.group;
        }
        if (hasValue(dotNetObject.icon)) {
            this.widget.icon = dotNetObject.icon;
        }
        if (hasValue(dotNetObject.iconNumber)) {
            this.widget.iconNumber = dotNetObject.iconNumber;
        }
        if (hasValue(dotNetObject.label)) {
            this.widget.label = dotNetObject.label;
        }
        if (hasValue(dotNetObject.mode)) {
            this.widget.mode = dotNetObject.mode;
        }
        if (hasValue(dotNetObject.placement)) {
            this.widget.placement = dotNetObject.placement;
        }
        if (hasValue(dotNetObject.visible)) {
            this.widget.visible = dotNetObject.visible;
        }
        if (hasValue(dotNetObject.widgetId)) {
            this.widget.id = dotNetObject.widgetId;
        }
    }
    
    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async collapse(): Promise<void> {
        this.widget.collapse();
    }

    async expand(): Promise<void> {
        this.widget.expand();
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async render(): Promise<any> {
        let result = this.widget.render();
        
        return generateSerializableJson(result);
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async toggle(): Promise<void> {
        this.widget.toggle();
    }

    async when(callback: any,
        errback: any): Promise<any> {
        let result = await this.widget.when(callback,
            errback);
        
        return generateSerializableJson(result);
    }

    // region properties
    
    getCollapseIcon(): any {
        if (!hasValue(this.widget.collapseIcon)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.collapseIcon);
    }
    
    setCollapseIcon(value: any): void {
        this.widget.collapseIcon = JSON.parse(value);
    }
    
    getCollapseTooltip(): any {
        if (!hasValue(this.widget.collapseTooltip)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.collapseTooltip);
    }
    
    setCollapseTooltip(value: any): void {
        this.widget.collapseTooltip = JSON.parse(value);
    }
    
    getContent(): any {
        if (!hasValue(this.widget.content)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.content);
    }
    
    setContent(value: any): void {
        this.widget.content = JSON.parse(value);
    }
    
    getExpandIcon(): any {
        if (!hasValue(this.widget.expandIcon)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.expandIcon);
    }
    
    setExpandIcon(value: any): void {
        this.widget.expandIcon = JSON.parse(value);
    }
    
    getExpandTooltip(): any {
        if (!hasValue(this.widget.expandTooltip)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.expandTooltip);
    }
    
    setExpandTooltip(value: any): void {
        this.widget.expandTooltip = JSON.parse(value);
    }
    
    getGroup(): any {
        if (!hasValue(this.widget.group)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.group);
    }
    
    setGroup(value: any): void {
        this.widget.group = JSON.parse(value);
    }
    
    getIcon(): any {
        if (!hasValue(this.widget.icon)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.icon);
    }
    
    setIcon(value: any): void {
        this.widget.icon = JSON.parse(value);
    }
    
    getLabel(): any {
        if (!hasValue(this.widget.label)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.label);
    }
    
    setLabel(value: any): void {
        this.widget.label = JSON.parse(value);
    }
    
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetExpandViewModel } = await import('./expandViewModel');
        return await buildDotNetExpandViewModel(this.widget.viewModel, this.viewId);
    }
    
    async setViewModel(value: any): Promise<void> {
        let { buildJsExpandViewModel } = await import('./expandViewModel');
        this.widget.viewModel = await  buildJsExpandViewModel(value, this.layerId, this.viewId);
    }
    
    getWidgetId(): any {
        if (!hasValue(this.widget.id)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.id);
    }
    
    setWidgetId(value: any): void {
        this.widget.id = JSON.parse(value);
    }
    
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsExpandWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsExpandViewModel } = await import('./expandViewModel');
        properties.viewModel = await buildJsExpandViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.autoCollapse)) {
        properties.autoCollapse = dotNetObject.autoCollapse;
    }
    if (hasValue(dotNetObject.closeOnEsc)) {
        properties.closeOnEsc = dotNetObject.closeOnEsc;
    }
    if (hasValue(dotNetObject.collapseIcon)) {
        properties.collapseIcon = dotNetObject.collapseIcon;
    }
    if (hasValue(dotNetObject.collapseTooltip)) {
        properties.collapseTooltip = dotNetObject.collapseTooltip;
    }
    if (hasValue(dotNetObject.expanded)) {
        properties.expanded = dotNetObject.expanded;
    }
    if (hasValue(dotNetObject.expandIcon)) {
        properties.expandIcon = dotNetObject.expandIcon;
    }
    if (hasValue(dotNetObject.expandTooltip)) {
        properties.expandTooltip = dotNetObject.expandTooltip;
    }
    if (hasValue(dotNetObject.focusTrapDisabled)) {
        properties.focusTrapDisabled = dotNetObject.focusTrapDisabled;
    }
    if (hasValue(dotNetObject.group)) {
        properties.group = dotNetObject.group;
    }
    if (hasValue(dotNetObject.icon)) {
        properties.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.iconNumber)) {
        properties.iconNumber = dotNetObject.iconNumber;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.mode)) {
        properties.mode = dotNetObject.mode;
    }
    if (hasValue(dotNetObject.placement)) {
        properties.placement = dotNetObject.placement;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    if (hasValue(dotNetObject.widgetId)) {
        properties.id = dotNetObject.widgetId;
    }
    let jsExpand = new Expand(properties);

    let { default: ExpandWidgetWrapper } = await import('./expandWidget');
    let expandWidgetWrapper = new ExpandWidgetWrapper(jsExpand);
    expandWidgetWrapper.geoBlazorId = dotNetObject.id;
    expandWidgetWrapper.viewId = viewId;
    expandWidgetWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = expandWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsExpand;
    
    try {
        let jsObjectRef = DotNet.createJSObjectReference(expandWidgetWrapper);
        let { buildDotNetExpandWidget } = await import('./expandWidget');
        let dnInstantiatedObject = await buildDotNetExpandWidget(jsExpand, viewId);

        let dnStream = buildJsStreamReference(dnInstantiatedObject);
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, dnStream);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ExpandWidget', e);
    }
    
    return jsExpand;
}


export async function buildDotNetExpandWidgetGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetExpandWidget: any = {};
    
    if (hasValue(jsObject.viewModel)) {
        let { buildDotNetExpandViewModel } = await import('./expandViewModel');
        dotNetExpandWidget.viewModel = await buildDotNetExpandViewModel(jsObject.viewModel, viewId);
    }
    
    if (hasValue(jsObject.autoCollapse)) {
        dotNetExpandWidget.autoCollapse = jsObject.autoCollapse;
    }
    
    if (hasValue(jsObject.closeOnEsc)) {
        dotNetExpandWidget.closeOnEsc = jsObject.closeOnEsc;
    }
    
    if (hasValue(jsObject.collapseIcon)) {
        dotNetExpandWidget.collapseIcon = jsObject.collapseIcon;
    }
    
    if (hasValue(jsObject.collapseTooltip)) {
        dotNetExpandWidget.collapseTooltip = jsObject.collapseTooltip;
    }
    
    if (hasValue(jsObject.content)) {
        dotNetExpandWidget.content = jsObject.content;
    }
    
    if (hasValue(jsObject.expanded)) {
        dotNetExpandWidget.expanded = jsObject.expanded;
    }
    
    if (hasValue(jsObject.expandIcon)) {
        dotNetExpandWidget.expandIcon = jsObject.expandIcon;
    }
    
    if (hasValue(jsObject.expandTooltip)) {
        dotNetExpandWidget.expandTooltip = jsObject.expandTooltip;
    }
    
    if (hasValue(jsObject.focusTrapDisabled)) {
        dotNetExpandWidget.focusTrapDisabled = jsObject.focusTrapDisabled;
    }
    
    if (hasValue(jsObject.group)) {
        dotNetExpandWidget.group = jsObject.group;
    }
    
    if (hasValue(jsObject.icon)) {
        dotNetExpandWidget.icon = jsObject.icon;
    }
    
    if (hasValue(jsObject.iconNumber)) {
        dotNetExpandWidget.iconNumber = jsObject.iconNumber;
    }
    
    if (hasValue(jsObject.label)) {
        dotNetExpandWidget.label = jsObject.label;
    }
    
    if (hasValue(jsObject.mode)) {
        dotNetExpandWidget.mode = removeCircularReferences(jsObject.mode);
    }
    
    if (hasValue(jsObject.placement)) {
        dotNetExpandWidget.placement = removeCircularReferences(jsObject.placement);
    }
    
    if (hasValue(jsObject.type)) {
        dotNetExpandWidget.type = removeCircularReferences(jsObject.type);
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetExpandWidget.visible = jsObject.visible;
    }
    
    if (hasValue(jsObject.id)) {
        dotNetExpandWidget.widgetId = jsObject.id;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetExpandWidget.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        if (hasValue(dotNetRef)) {
            try {
                dotNetExpandWidget.id = await dotNetRef.invokeMethodAsync('GetId');
            } catch (e) {
                console.error('Error invoking GetId for ExpandWidget', e);
            }
        }
    }
    if (hasValue(dotNetExpandWidget.id)) {
        jsObjectRefs[dotNetExpandWidget.id] ??= jsObject;
        arcGisObjectRefs[dotNetExpandWidget.id] ??= jsObject;
    }

    return dotNetExpandWidget;
}

