// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import Expand from '@arcgis/core/widgets/Expand';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ExpandWidgetGenerated implements IPropertyWrapper {
    public widget: Expand;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: Expand) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    
    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async collapse(): Promise<void> {
        this.widget.collapse();
    }

    async expand(): Promise<void> {
        this.widget.expand();
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async own(handleOrHandles: any): Promise<void> {
        this.widget.own(handleOrHandles);
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async render(): Promise<any> {
        return this.widget.render();
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async toggle(): Promise<void> {
        this.widget.toggle();
    }

    async when(callback: any,
        errback: any): Promise<any> {
        return await this.widget.when(callback,
            errback);
    }

    // region properties
    
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetExpandViewModel } = await import('./expandViewModel');
        return await buildDotNetExpandViewModel(this.widget.viewModel, this.layerId, this.viewId);
    }
    async setViewModel(value: any): Promise<void> {
        let { buildJsExpandViewModel } = await import('./expandViewModel');
        this.widget.viewModel = await  buildJsExpandViewModel(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}

export async function buildJsExpandWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsExpand = new Expand();
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsExpandViewModel } = await import('./expandViewModel');
        jsExpand.viewModel = await buildJsExpandViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.autoCollapse)) {
        jsExpand.autoCollapse = dotNetObject.autoCollapse;
    }
    if (hasValue(dotNetObject.closeOnEsc)) {
        jsExpand.closeOnEsc = dotNetObject.closeOnEsc;
    }
    if (hasValue(dotNetObject.collapseIcon)) {
        jsExpand.collapseIcon = dotNetObject.collapseIcon;
    }
    if (hasValue(dotNetObject.collapseTooltip)) {
        jsExpand.collapseTooltip = dotNetObject.collapseTooltip;
    }
    if (hasValue(dotNetObject.container)) {
        jsExpand.container = dotNetObject.container;
    }
    if (hasValue(dotNetObject.content)) {
        jsExpand.content = dotNetObject.content;
    }
    if (hasValue(dotNetObject.expanded)) {
        jsExpand.expanded = dotNetObject.expanded;
    }
    if (hasValue(dotNetObject.expandIcon)) {
        jsExpand.expandIcon = dotNetObject.expandIcon;
    }
    if (hasValue(dotNetObject.expandTooltip)) {
        jsExpand.expandTooltip = dotNetObject.expandTooltip;
    }
    if (hasValue(dotNetObject.group)) {
        jsExpand.group = dotNetObject.group;
    }
    if (hasValue(dotNetObject.icon)) {
        jsExpand.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.iconNumber)) {
        jsExpand.iconNumber = dotNetObject.iconNumber;
    }
    if (hasValue(dotNetObject.label)) {
        jsExpand.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.mode)) {
        jsExpand.mode = dotNetObject.mode;
    }
    if (hasValue(dotNetObject.placement)) {
        jsExpand.placement = dotNetObject.placement;
    }
    if (hasValue(dotNetObject.view)) {
        jsExpand.view = dotNetObject.view;
    }
    if (hasValue(dotNetObject.widgetId)) {
        jsExpand.id = dotNetObject.widgetId;
    }
    let { default: ExpandWidgetWrapper } = await import('./expandWidget');
    let expandWidgetWrapper = new ExpandWidgetWrapper(jsExpand);
    expandWidgetWrapper.geoBlazorId = dotNetObject.id;
    expandWidgetWrapper.viewId = viewId;
    expandWidgetWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(expandWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = expandWidgetWrapper;

    arcGisObjectRefs[dotNetObject.id] = jsExpand;
    let { buildDotNetExpandWidget } = await import('./expandWidget');
    let dnInstantiatedObject = await buildDotNetExpandWidget(jsExpand, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ExpandWidget', e);
    }
    
    return jsExpand;
}

export async function buildDotNetExpandWidgetGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetExpandWidget: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.viewModel)) {
            let { buildDotNetExpandViewModel } = await import('./expandViewModel');
            dotNetExpandWidget.viewModel = await buildDotNetExpandViewModel(jsObject.viewModel, layerId, viewId);
        }
        if (hasValue(jsObject.autoCollapse)) {
            dotNetExpandWidget.autoCollapse = jsObject.autoCollapse;
        }
        if (hasValue(jsObject.closeOnEsc)) {
            dotNetExpandWidget.closeOnEsc = jsObject.closeOnEsc;
        }
        if (hasValue(jsObject.collapseIcon)) {
            dotNetExpandWidget.collapseIcon = jsObject.collapseIcon;
        }
        if (hasValue(jsObject.collapseTooltip)) {
            dotNetExpandWidget.collapseTooltip = jsObject.collapseTooltip;
        }
        if (hasValue(jsObject.container)) {
            dotNetExpandWidget.container = jsObject.container;
        }
        if (hasValue(jsObject.content)) {
            dotNetExpandWidget.content = jsObject.content;
        }
        if (hasValue(jsObject.expanded)) {
            dotNetExpandWidget.expanded = jsObject.expanded;
        }
        if (hasValue(jsObject.expandIcon)) {
            dotNetExpandWidget.expandIcon = jsObject.expandIcon;
        }
        if (hasValue(jsObject.expandTooltip)) {
            dotNetExpandWidget.expandTooltip = jsObject.expandTooltip;
        }
        if (hasValue(jsObject.group)) {
            dotNetExpandWidget.group = jsObject.group;
        }
        if (hasValue(jsObject.icon)) {
            dotNetExpandWidget.icon = jsObject.icon;
        }
        if (hasValue(jsObject.iconNumber)) {
            dotNetExpandWidget.iconNumber = jsObject.iconNumber;
        }
        if (hasValue(jsObject.label)) {
            dotNetExpandWidget.label = jsObject.label;
        }
        if (hasValue(jsObject.mode)) {
            dotNetExpandWidget.mode = jsObject.mode;
        }
        if (hasValue(jsObject.placement)) {
            dotNetExpandWidget.placement = jsObject.placement;
        }
        if (hasValue(jsObject.type)) {
            dotNetExpandWidget.type = jsObject.type;
        }
        if (hasValue(jsObject.view)) {
            dotNetExpandWidget.view = jsObject.view;
        }
        if (hasValue(jsObject.id)) {
            dotNetExpandWidget.widgetId = jsObject.id;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetExpandWidget.id = k;
                break;
            }
        }
    }

    return dotNetExpandWidget;
}

