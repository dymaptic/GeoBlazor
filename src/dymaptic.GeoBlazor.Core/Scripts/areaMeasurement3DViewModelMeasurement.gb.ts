// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetAreaMeasurement3DViewModelMeasurement } from './areaMeasurement3DViewModelMeasurement';

export async function buildJsAreaMeasurement3DViewModelMeasurementGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsAreaMeasurement3DViewModelMeasurement: any = {};
    if (hasValue(dotNetObject.area)) {
        let { buildJsAreaMeasurement3DViewModelMeasurementValue } = await import('./areaMeasurement3DViewModelMeasurementValue');
        jsAreaMeasurement3DViewModelMeasurement.area = await buildJsAreaMeasurement3DViewModelMeasurementValue(dotNetObject.area, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.perimeterLength)) {
        let { buildJsAreaMeasurement3DViewModelMeasurementValue } = await import('./areaMeasurement3DViewModelMeasurementValue');
        jsAreaMeasurement3DViewModelMeasurement.perimeterLength = await buildJsAreaMeasurement3DViewModelMeasurementValue(dotNetObject.perimeterLength, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.mode)) {
        jsAreaMeasurement3DViewModelMeasurement.mode = dotNetObject.mode;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsAreaMeasurement3DViewModelMeasurement);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsAreaMeasurement3DViewModelMeasurement;
    
    return jsAreaMeasurement3DViewModelMeasurement;
}


export async function buildDotNetAreaMeasurement3DViewModelMeasurementGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAreaMeasurement3DViewModelMeasurement: any = {};
    
    if (hasValue(jsObject.area)) {
        let { buildDotNetAreaMeasurement3DViewModelMeasurementValue } = await import('./areaMeasurement3DViewModelMeasurementValue');
        dotNetAreaMeasurement3DViewModelMeasurement.area = await buildDotNetAreaMeasurement3DViewModelMeasurementValue(jsObject.area, layerId, viewId);
    }
    
    if (hasValue(jsObject.perimeterLength)) {
        let { buildDotNetAreaMeasurement3DViewModelMeasurementValue } = await import('./areaMeasurement3DViewModelMeasurementValue');
        dotNetAreaMeasurement3DViewModelMeasurement.perimeterLength = await buildDotNetAreaMeasurement3DViewModelMeasurementValue(jsObject.perimeterLength, layerId, viewId);
    }
    
    if (hasValue(jsObject.mode)) {
        dotNetAreaMeasurement3DViewModelMeasurement.mode = removeCircularReferences(jsObject.mode);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetAreaMeasurement3DViewModelMeasurement.id = geoBlazorId;
    }

    return dotNetAreaMeasurement3DViewModelMeasurement;
}

