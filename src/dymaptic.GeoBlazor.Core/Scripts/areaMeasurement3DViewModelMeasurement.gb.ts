// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import AreaMeasurement3DViewModelMeasurement = __esri.AreaMeasurement3DViewModelMeasurement;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class AreaMeasurement3DViewModelMeasurementGenerated implements IPropertyWrapper {
    public component: AreaMeasurement3DViewModelMeasurement;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: AreaMeasurement3DViewModelMeasurement) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getArea(): Promise<any> {
        if (!hasValue(this.component.area)) {
            return null;
        }
        
        let { buildDotNetAreaMeasurement3DViewModelMeasurementValue } = await import('./areaMeasurement3DViewModelMeasurementValue');
        return await buildDotNetAreaMeasurement3DViewModelMeasurementValue(this.component.area, this.layerId, this.viewId);
    }
    async setArea(value: any): Promise<void> {
        let { buildJsAreaMeasurement3DViewModelMeasurementValue } = await import('./areaMeasurement3DViewModelMeasurementValue');
        this.component.area = await  buildJsAreaMeasurement3DViewModelMeasurementValue(value, this.layerId, this.viewId);
    }
    async getPerimeterLength(): Promise<any> {
        if (!hasValue(this.component.perimeterLength)) {
            return null;
        }
        
        let { buildDotNetAreaMeasurement3DViewModelMeasurementValue } = await import('./areaMeasurement3DViewModelMeasurementValue');
        return await buildDotNetAreaMeasurement3DViewModelMeasurementValue(this.component.perimeterLength, this.layerId, this.viewId);
    }
    async setPerimeterLength(value: any): Promise<void> {
        let { buildJsAreaMeasurement3DViewModelMeasurementValue } = await import('./areaMeasurement3DViewModelMeasurementValue');
        this.component.perimeterLength = await  buildJsAreaMeasurement3DViewModelMeasurementValue(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsAreaMeasurement3DViewModelMeasurementGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsAreaMeasurement3DViewModelMeasurement: any = {}
    if (hasValue(dotNetObject.area)) {
        let { buildJsAreaMeasurement3DViewModelMeasurementValue } = await import('./areaMeasurement3DViewModelMeasurementValue');
        jsAreaMeasurement3DViewModelMeasurement.area = await buildJsAreaMeasurement3DViewModelMeasurementValue(dotNetObject.area, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.perimeterLength)) {
        let { buildJsAreaMeasurement3DViewModelMeasurementValue } = await import('./areaMeasurement3DViewModelMeasurementValue');
        jsAreaMeasurement3DViewModelMeasurement.perimeterLength = await buildJsAreaMeasurement3DViewModelMeasurementValue(dotNetObject.perimeterLength, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.mode)) {
        jsAreaMeasurement3DViewModelMeasurement.mode = dotNetObject.mode;
    }
    let { default: AreaMeasurement3DViewModelMeasurementWrapper } = await import('./areaMeasurement3DViewModelMeasurement');
    let areaMeasurement3DViewModelMeasurementWrapper = new AreaMeasurement3DViewModelMeasurementWrapper(jsAreaMeasurement3DViewModelMeasurement);
    areaMeasurement3DViewModelMeasurementWrapper.geoBlazorId = dotNetObject.id;
    areaMeasurement3DViewModelMeasurementWrapper.viewId = viewId;
    areaMeasurement3DViewModelMeasurementWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(areaMeasurement3DViewModelMeasurementWrapper);
    jsObjectRefs[dotNetObject.id] = areaMeasurement3DViewModelMeasurementWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsAreaMeasurement3DViewModelMeasurement;
    
    let { buildDotNetAreaMeasurement3DViewModelMeasurement } = await import('./areaMeasurement3DViewModelMeasurement');
    let dnInstantiatedObject = await buildDotNetAreaMeasurement3DViewModelMeasurement(jsAreaMeasurement3DViewModelMeasurement, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for AreaMeasurement3DViewModelMeasurement', e);
    }
    
    return jsAreaMeasurement3DViewModelMeasurement;
}

export async function buildDotNetAreaMeasurement3DViewModelMeasurementGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAreaMeasurement3DViewModelMeasurement: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.area)) {
            let { buildDotNetAreaMeasurement3DViewModelMeasurementValue } = await import('./areaMeasurement3DViewModelMeasurementValue');
            dotNetAreaMeasurement3DViewModelMeasurement.area = await buildDotNetAreaMeasurement3DViewModelMeasurementValue(jsObject.area, layerId, viewId);
        }
        if (hasValue(jsObject.perimeterLength)) {
            let { buildDotNetAreaMeasurement3DViewModelMeasurementValue } = await import('./areaMeasurement3DViewModelMeasurementValue');
            dotNetAreaMeasurement3DViewModelMeasurement.perimeterLength = await buildDotNetAreaMeasurement3DViewModelMeasurementValue(jsObject.perimeterLength, layerId, viewId);
        }
        if (hasValue(jsObject.mode)) {
            dotNetAreaMeasurement3DViewModelMeasurement.mode = jsObject.mode;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetAreaMeasurement3DViewModelMeasurement.id = k;
                break;
            }
        }
    }

    return dotNetAreaMeasurement3DViewModelMeasurement;
}

