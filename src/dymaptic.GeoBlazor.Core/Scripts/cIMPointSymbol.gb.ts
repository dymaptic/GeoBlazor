// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import CIMPointSymbol = __esri.CIMPointSymbol;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CIMPointSymbolGenerated implements IPropertyWrapper {
    public component: CIMPointSymbol;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: CIMPointSymbol) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getHaloSymbol(): Promise<any> {
        if (!hasValue(this.component.haloSymbol)) {
            return null;
        }
        
        let { buildDotNetCIMPolygonSymbol } = await import('./cIMPolygonSymbol');
        return await buildDotNetCIMPolygonSymbol(this.component.haloSymbol);
    }
    async setHaloSymbol(value: any): Promise<void> {
        let { buildJsCIMPolygonSymbol } = await import('./cIMPolygonSymbol');
        this.component.haloSymbol = await  buildJsCIMPolygonSymbol(value, this.layerId, this.viewId);
    }
    async getSymbolLayers(): Promise<any> {
        if (!hasValue(this.component.symbolLayers)) {
            return null;
        }
        
        let { buildDotNetICIMSymbolLayer } = await import('./iCIMSymbolLayer');
        return await Promise.all(this.component.symbolLayers.map(async i => await buildDotNetICIMSymbolLayer(i)));
    }
    
    async setSymbolLayers(value: any): Promise<void> {
        let { buildJsICIMSymbolLayer } = await import('./iCIMSymbolLayer');
        this.component.symbolLayers = await Promise.all(value.map(async i => await buildJsICIMSymbolLayer(i, this.layerId, this.viewId))) as any;
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsCIMPointSymbolGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCIMPointSymbol: any = {}
    if (hasValue(dotNetObject.callout)) {
        jsCIMPointSymbol.callout = dotNetObject.cIMCalloutType;
    }
    if (hasValue(dotNetObject.effects)) {
        jsCIMPointSymbol.effects = dotNetObject.iCIMGeometricEffect;
    }
    if (hasValue(dotNetObject.haloSymbol)) {
        let { buildJsCIMPolygonSymbol } = await import('./cIMPolygonSymbol');
        jsCIMPointSymbol.haloSymbol = await buildJsCIMPolygonSymbol(dotNetObject.haloSymbol, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.symbol3DProperties)) {
        jsCIMPointSymbol.symbol3DProperties = dotNetObject.cIM3DSymbolProperties;
    }
    if (hasValue(dotNetObject.symbolLayers)) {
        let { buildJsICIMSymbolLayer } = await import('./iCIMSymbolLayer');
        jsCIMPointSymbol.symbolLayers = await Promise.all(dotNetObject.symbolLayers.map(async i => await buildJsICIMSymbolLayer(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.angle)) {
        jsCIMPointSymbol.angle = dotNetObject.angle;
    }
    if (hasValue(dotNetObject.angleAlignment)) {
        jsCIMPointSymbol.angleAlignment = dotNetObject.angleAlignment;
    }
    if (hasValue(dotNetObject.haloSize)) {
        jsCIMPointSymbol.haloSize = dotNetObject.haloSize;
    }
    if (hasValue(dotNetObject.primitiveName)) {
        jsCIMPointSymbol.primitiveName = dotNetObject.primitiveName;
    }
    if (hasValue(dotNetObject.scaleX)) {
        jsCIMPointSymbol.scaleX = dotNetObject.scaleX;
    }
    if (hasValue(dotNetObject.thumbnailURI)) {
        jsCIMPointSymbol.thumbnailURI = dotNetObject.thumbnailURI;
    }
    if (hasValue(dotNetObject.useRealWorldSymbolSizes)) {
        jsCIMPointSymbol.useRealWorldSymbolSizes = dotNetObject.useRealWorldSymbolSizes;
    }

    let { default: CIMPointSymbolWrapper } = await import('./cIMPointSymbol');
    let cIMPointSymbolWrapper = new CIMPointSymbolWrapper(jsCIMPointSymbol);
    cIMPointSymbolWrapper.geoBlazorId = dotNetObject.id;
    cIMPointSymbolWrapper.viewId = viewId;
    cIMPointSymbolWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(cIMPointSymbolWrapper);
    jsObjectRefs[dotNetObject.id] = cIMPointSymbolWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsCIMPointSymbol;
    let { buildDotNetCIMPointSymbol } = await import('./cIMPointSymbol');
    let dnInstantiatedObject = await buildDotNetCIMPointSymbol(jsCIMPointSymbol);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CIMPointSymbol', e);
    }
    
    return jsCIMPointSymbol;
}
export async function buildDotNetCIMPointSymbolGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCIMPointSymbol: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetCIMPointSymbol.callout = jsObject.callout;
        dotNetCIMPointSymbol.effects = jsObject.effects;
        if (hasValue(jsObject.haloSymbol)) {
            let { buildDotNetCIMPolygonSymbol } = await import('./cIMPolygonSymbol');
            dotNetCIMPointSymbol.haloSymbol = await buildDotNetCIMPolygonSymbol(jsObject.haloSymbol);
        }
        dotNetCIMPointSymbol.symbol3DProperties = jsObject.symbol3DProperties;
        if (hasValue(jsObject.angle)) {
            dotNetCIMPointSymbol.angle = jsObject.angle;
        }
        if (hasValue(jsObject.angleAlignment)) {
            dotNetCIMPointSymbol.angleAlignment = jsObject.angleAlignment;
        }
        if (hasValue(jsObject.haloSize)) {
            dotNetCIMPointSymbol.haloSize = jsObject.haloSize;
        }
        if (hasValue(jsObject.primitiveName)) {
            dotNetCIMPointSymbol.primitiveName = jsObject.primitiveName;
        }
        if (hasValue(jsObject.scaleX)) {
            dotNetCIMPointSymbol.scaleX = jsObject.scaleX;
        }
        if (hasValue(jsObject.thumbnailURI)) {
            dotNetCIMPointSymbol.thumbnailURI = jsObject.thumbnailURI;
        }
        if (hasValue(jsObject.type)) {
            dotNetCIMPointSymbol.type = jsObject.type;
        }
        if (hasValue(jsObject.useRealWorldSymbolSizes)) {
            dotNetCIMPointSymbol.useRealWorldSymbolSizes = jsObject.useRealWorldSymbolSizes;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCIMPointSymbol.id = k;
                break;
            }
        }
    }

    return dotNetCIMPointSymbol;
}

