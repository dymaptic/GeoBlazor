// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetCIMPointSymbol } from './cIMPointSymbol';

export async function buildJsCIMPointSymbolGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCIMPointSymbol: any = {};
    if (hasValue(dotNetObject.haloSymbol)) {
        let { buildJsCIMPolygonSymbol } = await import('./cIMPolygonSymbol');
        jsCIMPointSymbol.haloSymbol = await buildJsCIMPolygonSymbol(dotNetObject.haloSymbol, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.symbolLayers)) {
        let { buildJsICIMSymbolLayer } = await import('./iCIMSymbolLayer');
        jsCIMPointSymbol.symbolLayers = await Promise.all(dotNetObject.symbolLayers.map(async i => await buildJsICIMSymbolLayer(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.angle)) {
        jsCIMPointSymbol.angle = dotNetObject.angle;
    }
    if (hasValue(dotNetObject.angleAlignment)) {
        jsCIMPointSymbol.angleAlignment = dotNetObject.angleAlignment;
    }
    if (hasValue(dotNetObject.callout)) {
        jsCIMPointSymbol.callout = dotNetObject.callout;
    }
    if (hasValue(dotNetObject.effects)) {
        jsCIMPointSymbol.effects = dotNetObject.effects;
    }
    if (hasValue(dotNetObject.haloSize)) {
        jsCIMPointSymbol.haloSize = dotNetObject.haloSize;
    }
    if (hasValue(dotNetObject.primitiveName)) {
        jsCIMPointSymbol.primitiveName = dotNetObject.primitiveName;
    }
    if (hasValue(dotNetObject.scaleX)) {
        jsCIMPointSymbol.scaleX = dotNetObject.scaleX;
    }
    if (hasValue(dotNetObject.symbol3DProperties)) {
        jsCIMPointSymbol.symbol3DProperties = dotNetObject.symbol3DProperties;
    }
    if (hasValue(dotNetObject.thumbnailURI)) {
        jsCIMPointSymbol.thumbnailURI = dotNetObject.thumbnailURI;
    }
    if (hasValue(dotNetObject.useRealWorldSymbolSizes)) {
        jsCIMPointSymbol.useRealWorldSymbolSizes = dotNetObject.useRealWorldSymbolSizes;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCIMPointSymbol);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCIMPointSymbol;
    
    let dnInstantiatedObject = await buildDotNetCIMPointSymbol(jsCIMPointSymbol);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CIMPointSymbol', e);
    }
    
    return jsCIMPointSymbol;
}

export async function buildDotNetCIMPointSymbolGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCIMPointSymbol: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.haloSymbol)) {
            let { buildDotNetCIMPolygonSymbol } = await import('./cIMPolygonSymbol');
            dotNetCIMPointSymbol.haloSymbol = await buildDotNetCIMPolygonSymbol(jsObject.haloSymbol);
        }
    if (hasValue(jsObject.angle)) {
        dotNetCIMPointSymbol.angle = jsObject.angle;
    }
    if (hasValue(jsObject.angleAlignment)) {
        dotNetCIMPointSymbol.angleAlignment = jsObject.angleAlignment;
    }
    if (hasValue(jsObject.callout)) {
        dotNetCIMPointSymbol.callout = jsObject.callout;
    }
    if (hasValue(jsObject.effects)) {
        dotNetCIMPointSymbol.effects = jsObject.effects;
    }
    if (hasValue(jsObject.haloSize)) {
        dotNetCIMPointSymbol.haloSize = jsObject.haloSize;
    }
    if (hasValue(jsObject.primitiveName)) {
        dotNetCIMPointSymbol.primitiveName = jsObject.primitiveName;
    }
    if (hasValue(jsObject.scaleX)) {
        dotNetCIMPointSymbol.scaleX = jsObject.scaleX;
    }
    if (hasValue(jsObject.symbol3DProperties)) {
        dotNetCIMPointSymbol.symbol3DProperties = jsObject.symbol3DProperties;
    }
    if (hasValue(jsObject.thumbnailURI)) {
        dotNetCIMPointSymbol.thumbnailURI = jsObject.thumbnailURI;
    }
    if (hasValue(jsObject.type)) {
        dotNetCIMPointSymbol.type = jsObject.type;
    }
    if (hasValue(jsObject.useRealWorldSymbolSizes)) {
        dotNetCIMPointSymbol.useRealWorldSymbolSizes = jsObject.useRealWorldSymbolSizes;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCIMPointSymbol.id = k;
                break;
            }
        }
    }

    return dotNetCIMPointSymbol;
}

