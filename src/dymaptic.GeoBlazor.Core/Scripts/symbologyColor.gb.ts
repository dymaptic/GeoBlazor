// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import symbologyColor = __esri.symbologyColor;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SymbologyColorGenerated implements IPropertyWrapper {
    public component: symbologyColor;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: symbologyColor) {
        this.component = component;
    }

    // region methods

    unwrap() {
        return this.component;
    }

    async cloneScheme(scheme: any): Promise<any> {
        return this.component.cloneScheme(scheme);
    }

    async flipColors(scheme: any): Promise<any> {
        return this.component.flipColors(scheme);
    }

    async getMatchingSchemes(parameters: any): Promise<any> {
        let {buildJsColorGetMatchingSchemesParams} = await import('./colorGetMatchingSchemesParams');
        let jsparameters = await buildJsColorGetMatchingSchemesParams(parameters, this.layerId, this.viewId) as any;
        return this.component.getMatchingSchemes(jsparameters);
    }

    async getSchemeByName(parameters: any): Promise<any> {
        let {buildJsColorGetSchemeByNameParams} = await import('./colorGetSchemeByNameParams');
        let jsparameters = await buildJsColorGetSchemeByNameParams(parameters, this.layerId, this.viewId) as any;
        return this.component.getSchemeByName(jsparameters);
    }

    async getSchemes(parameters: any): Promise<any> {
        let {buildJsColorGetSchemesParams} = await import('./colorGetSchemesParams');
        let jsparameters = await buildJsColorGetSchemesParams(parameters, this.layerId, this.viewId) as any;
        return this.component.getSchemes(jsparameters);
    }

    async getSchemesByTag(parameters: any): Promise<any> {
        let {buildJsColorGetSchemesByTagParams} = await import('./colorGetSchemesByTagParams');
        let jsparameters = await buildJsColorGetSchemesByTagParams(parameters, this.layerId, this.viewId) as any;
        return this.component.getSchemesByTag(jsparameters);
    }

    async getThemes(basemap: any): Promise<any> {
        return this.component.getThemes(basemap);
    }

    // region properties

    getProperty(prop: string): any {
        return this.component[prop];
    }

    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsSymbologyColorGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jssymbologyColor: any = {}


    let {default: SymbologyColorWrapper} = await import('./symbologyColor');
    let symbologyColorWrapper = new SymbologyColorWrapper(jssymbologyColor);
    symbologyColorWrapper.geoBlazorId = dotNetObject.id;
    symbologyColorWrapper.viewId = viewId;
    symbologyColorWrapper.layerId = layerId;

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(symbologyColorWrapper);
    jsObjectRefs[dotNetObject.id] = symbologyColorWrapper;
    arcGisObjectRefs[dotNetObject.id] = jssymbologyColor;
    let {buildDotNetSymbologyColor} = await import('./symbologyColor');
    let dnInstantiatedObject = await buildDotNetSymbologyColor(jssymbologyColor);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SymbologyColor', e);
    }

    return jssymbologyColor;
}

export async function buildDotNetSymbologyColorGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetSymbologyColor: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSymbologyColor.id = k;
                break;
            }
        }
    }

    return dotNetSymbologyColor;
}

