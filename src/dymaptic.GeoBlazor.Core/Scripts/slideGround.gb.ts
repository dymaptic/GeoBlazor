// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetSlideGround } from './slideGround';

export async function buildJsSlideGroundGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsSlideGround: any = {};

    if (hasValue(dotNetObject.opacity)) {
        jsSlideGround.opacity = dotNetObject.opacity;
    }
    
    jsObjectRefs[dotNetObject.id] = jsSlideGround;
    arcGisObjectRefs[dotNetObject.id] = jsSlideGround;
    
    return jsSlideGround;
}


export async function buildDotNetSlideGroundGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSlideGround: any = {};
    
    if (hasValue(jsObject.opacity)) {
        dotNetSlideGround.opacity = jsObject.opacity;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSlideGround.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetSlideGround.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetSlideGround.id)) {
        jsObjectRefs[dotNetSlideGround.id] ??= jsObject;
        arcGisObjectRefs[dotNetSlideGround.id] ??= jsObject;
    }

    return dotNetSlideGround;
}

