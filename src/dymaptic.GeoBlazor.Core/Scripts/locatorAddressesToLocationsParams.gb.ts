import { buildDotNetLocatorAddressesToLocationsParams } from './locatorAddressesToLocationsParams';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import locatorAddressesToLocationsParams = __esri.locatorAddressesToLocationsParams;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsLocatorAddressesToLocationsParamsGenerated(dotNetObject: any): Promise<any> {
    let jslocatorAddressesToLocationsParams: any = {}
    if (hasValue(dotNetObject.outSpatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        jslocatorAddressesToLocationsParams.outSpatialReference = buildJsSpatialReference(dotNetObject.outSpatialReference) as any;
    }

    if (hasValue(dotNetObject.addresses)) {
        jslocatorAddressesToLocationsParams.addresses = dotNetObject.addresses;
    }
    if (hasValue(dotNetObject.categories)) {
        jslocatorAddressesToLocationsParams.categories = dotNetObject.categories;
    }
    if (hasValue(dotNetObject.countryCode)) {
        jslocatorAddressesToLocationsParams.countryCode = dotNetObject.countryCode;
    }
    if (hasValue(dotNetObject.locationType)) {
        jslocatorAddressesToLocationsParams.locationType = dotNetObject.locationType;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jslocatorAddressesToLocationsParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jslocatorAddressesToLocationsParams;
    
    let dnInstantiatedObject = await buildDotNetLocatorAddressesToLocationsParams(jslocatorAddressesToLocationsParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LocatorAddressesToLocationsParams', e);
    }
    
    return jslocatorAddressesToLocationsParams;
}
export async function buildDotNetLocatorAddressesToLocationsParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLocatorAddressesToLocationsParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.outSpatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetLocatorAddressesToLocationsParams.outSpatialReference = buildDotNetSpatialReference(jsObject.outSpatialReference);
        }
        if (hasValue(jsObject.addresses)) {
            dotNetLocatorAddressesToLocationsParams.addresses = jsObject.addresses;
        }
        if (hasValue(jsObject.categories)) {
            dotNetLocatorAddressesToLocationsParams.categories = jsObject.categories;
        }
        if (hasValue(jsObject.countryCode)) {
            dotNetLocatorAddressesToLocationsParams.countryCode = jsObject.countryCode;
        }
        if (hasValue(jsObject.locationType)) {
            dotNetLocatorAddressesToLocationsParams.locationType = jsObject.locationType;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLocatorAddressesToLocationsParams.id = k;
                break;
            }
        }
    }

    return dotNetLocatorAddressesToLocationsParams;
}

