// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import Home from '@arcgis/core/widgets/Home';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class HomeWidgetGenerated implements IPropertyWrapper {
    public widget: Home;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: Home) {
        this.widget = widget;
    }

    // region methods

    unwrap() {
        return this.widget;
    }

    async cancelGo(): Promise<void> {
        this.widget.cancelGo();
    }

    async go(): Promise<void> {
        this.widget.go();
    }

    // region properties

    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }

        let {buildDotNetHomeViewModel} = await import('./homeViewModel');
        return await buildDotNetHomeViewModel(this.widget.viewModel);
    }

    async setViewModel(value: any): Promise<void> {
        let {buildJsHomeViewModel} = await import('./homeViewModel');
        this.widget.viewModel = await buildJsHomeViewModel(value, this.layerId, this.viewId);
    }

    async getViewpoint(): Promise<any> {
        if (!hasValue(this.widget.viewpoint)) {
            return null;
        }

        let {buildDotNetViewpoint} = await import('./viewpoint');
        return buildDotNetViewpoint(this.widget.viewpoint);
    }

    async setViewpoint(value: any): Promise<void> {
        let {buildJsViewpoint} = await import('./viewpoint');
        this.widget.viewpoint = buildJsViewpoint(value);
    }

    getProperty(prop: string): any {
        return this.widget[prop];
    }

    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}

export async function buildJsHomeWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsHome = new Home();
    if (hasValue(dotNetObject.viewModel)) {
        let {buildJsHomeViewModel} = await import('./homeViewModel');
        jsHome.viewModel = await buildJsHomeViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.viewpoint)) {
        let {buildJsViewpoint} = await import('./viewpoint');
        jsHome.viewpoint = buildJsViewpoint(dotNetObject.viewpoint) as any;
    }

    if (hasValue(dotNetObject.goToOverride)) {
        jsHome.goToOverride = dotNetObject.goToOverride;
    }
    if (hasValue(dotNetObject.uiStrings)) {
        jsHome.uiStrings = dotNetObject.uiStrings;
    }
    if (hasValue(dotNetObject.view)) {
        jsHome.view = dotNetObject.view;
    }
    jsHome.on('go', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsGo', evt);
    });


    let {default: HomeWidgetWrapper} = await import('./homeWidget');
    let homeWidgetWrapper = new HomeWidgetWrapper(jsHome);
    homeWidgetWrapper.geoBlazorId = dotNetObject.id;
    homeWidgetWrapper.viewId = viewId;
    homeWidgetWrapper.layerId = layerId;

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(homeWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = homeWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsHome;
    let {buildDotNetHomeWidget} = await import('./homeWidget');
    let dnInstantiatedObject = await buildDotNetHomeWidget(jsHome);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for HomeWidget', e);
    }

    return jsHome;
}

export async function buildDotNetHomeWidgetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetHomeWidget: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.viewModel)) {
        let {buildDotNetHomeViewModel} = await import('./homeViewModel');
        dotNetHomeWidget.viewModel = await buildDotNetHomeViewModel(jsObject.viewModel);
    }
    if (hasValue(jsObject.viewpoint)) {
        let {buildDotNetViewpoint} = await import('./viewpoint');
        dotNetHomeWidget.viewpoint = buildDotNetViewpoint(jsObject.viewpoint);
    }
    if (hasValue(jsObject.goToOverride)) {
        dotNetHomeWidget.goToOverride = jsObject.goToOverride;
    }
    if (hasValue(jsObject.type)) {
        dotNetHomeWidget.type = jsObject.type;
    }
    if (hasValue(jsObject.uiStrings)) {
        dotNetHomeWidget.uiStrings = jsObject.uiStrings;
    }
    if (hasValue(jsObject.view)) {
        dotNetHomeWidget.view = jsObject.view;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetHomeWidget.id = k;
                break;
            }
        }
    }

    return dotNetHomeWidget;
}

