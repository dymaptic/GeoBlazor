// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Home from '@arcgis/core/widgets/Home';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, buildJsStreamReference } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class HomeWidgetGenerated implements IPropertyWrapper {
    public widget: Home;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: Home) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.goToOverride)) {
            let { buildJsGoToOverride } = await import('./goToOverride');
            this.widget.goToOverride = buildJsGoToOverride(dotNetObject.goToOverride, this.viewId) as any;
        }
        if (hasValue(dotNetObject.viewpoint)) {
            let { buildJsViewpoint } = await import('./viewpoint');
            this.widget.viewpoint = buildJsViewpoint(dotNetObject.viewpoint) as any;
        }

        if (hasValue(dotNetObject.icon)) {
            this.widget.icon = dotNetObject.icon;
        }
        if (hasValue(dotNetObject.label)) {
            this.widget.label = dotNetObject.label;
        }
        if (hasValue(dotNetObject.uiStrings)) {
            this.widget.uiStrings = dotNetObject.uiStrings;
        }
        if (hasValue(dotNetObject.visible)) {
            this.widget.visible = dotNetObject.visible;
        }
        if (hasValue(dotNetObject.widgetId)) {
            this.widget.id = dotNetObject.widgetId;
        }
    }
    
    async cancelGo(): Promise<void> {
        this.widget.cancelGo();
    }

    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async go(): Promise<void> {
        this.widget.go();
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async own(handleOrHandles: any): Promise<void> {
        let { buildJsWatchHandle } = await import('./watchHandle');
        let jsHandleOrHandles = await buildJsWatchHandle(handleOrHandles, this.layerId, this.viewId) as any;
        this.widget.own(jsHandleOrHandles);
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async render(): Promise<any> {
        return this.widget.render();
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async when(callback: any,
        errback: any): Promise<any> {
        return await this.widget.when(callback,
            errback);
    }

    // region properties
    
    async getGoToOverride(): Promise<any> {
        if (!hasValue(this.widget.goToOverride)) {
            return null;
        }
        
        let { buildDotNetGoToOverride } = await import('./goToOverride');
        return await buildDotNetGoToOverride(this.widget.goToOverride);
    }
    
    async setGoToOverride(value: any): Promise<void> {
        let { buildJsGoToOverride } = await import('./goToOverride');
        this.widget.goToOverride =  buildJsGoToOverride(value, this.viewId);
    }
    
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetHomeViewModel } = await import('./homeViewModel');
        return await buildDotNetHomeViewModel(this.widget.viewModel);
    }
    
    async setViewModel(value: any): Promise<void> {
        this.widget.viewModel?.destroy();
        let { buildJsHomeViewModel } = await import('./homeViewModel');
        this.widget.viewModel = await  buildJsHomeViewModel(value, this.viewId);
    }
    
    async getViewpoint(): Promise<any> {
        if (!hasValue(this.widget.viewpoint)) {
            return null;
        }
        
        let { buildDotNetViewpoint } = await import('./viewpoint');
        return buildDotNetViewpoint(this.widget.viewpoint);
    }
    
    async setViewpoint(value: any): Promise<void> {
        let { buildJsViewpoint } = await import('./viewpoint');
        this.widget.viewpoint =  buildJsViewpoint(value);
    }
    
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsHomeWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.goToOverride)) {
        let { buildJsGoToOverride } = await import('./goToOverride');
        properties.goToOverride = buildJsGoToOverride(dotNetObject.goToOverride, viewId) as any;
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsHomeViewModel } = await import('./homeViewModel');
        properties.viewModel = await buildJsHomeViewModel(dotNetObject.viewModel, viewId) as any;
    }
    if (hasValue(dotNetObject.viewpoint)) {
        let { buildJsViewpoint } = await import('./viewpoint');
        properties.viewpoint = buildJsViewpoint(dotNetObject.viewpoint) as any;
    }

    if (hasValue(dotNetObject.icon)) {
        properties.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.uiStrings)) {
        properties.uiStrings = dotNetObject.uiStrings;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    if (hasValue(dotNetObject.widgetId)) {
        properties.id = dotNetObject.widgetId;
    }
    let jsHome = new Home(properties);
    jsHome.on('go', async (evt: any) => {
        let streamRef = buildJsStreamReference(evt ?? {});
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsGo', streamRef);
    });
    

    let { default: HomeWidgetWrapper } = await import('./homeWidget');
    let homeWidgetWrapper = new HomeWidgetWrapper(jsHome);
    homeWidgetWrapper.geoBlazorId = dotNetObject.id;
    homeWidgetWrapper.viewId = viewId;
    homeWidgetWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(homeWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = homeWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsHome;
    
    try {
        let { buildDotNetHomeWidget } = await import('./homeWidget');
        let dnInstantiatedObject = await buildDotNetHomeWidget(jsHome);

        let seenObjects = new WeakMap();
        let dnJson = JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type HomeWidget detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            });
        let encoder = new TextEncoder();
        let encodedArray = encoder.encode(dnJson);
        let dnStream = DotNet.createJSStreamReference(encodedArray);
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, dnStream);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for HomeWidget', e);
    }
    
    return jsHome;
}


export async function buildDotNetHomeWidgetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetHomeWidget: any = {};
    
    if (hasValue(jsObject.viewModel)) {
        let { buildDotNetHomeViewModel } = await import('./homeViewModel');
        dotNetHomeWidget.viewModel = await buildDotNetHomeViewModel(jsObject.viewModel);
    }
    
    if (hasValue(jsObject.viewpoint)) {
        let { buildDotNetViewpoint } = await import('./viewpoint');
        dotNetHomeWidget.viewpoint = buildDotNetViewpoint(jsObject.viewpoint);
    }
    
    if (hasValue(jsObject.icon)) {
        dotNetHomeWidget.icon = jsObject.icon;
    }
    
    if (hasValue(jsObject.label)) {
        dotNetHomeWidget.label = jsObject.label;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetHomeWidget.type = removeCircularReferences(jsObject.type);
    }
    
    if (hasValue(jsObject.uiStrings)) {
        dotNetHomeWidget.uiStrings = jsObject.uiStrings;
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetHomeWidget.visible = jsObject.visible;
    }
    
    if (hasValue(jsObject.id)) {
        dotNetHomeWidget.widgetId = jsObject.id;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetHomeWidget.id = geoBlazorId;
    }

    return dotNetHomeWidget;
}

