// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import SpatialReference from '@arcgis/core/geometry/SpatialReference';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SpatialReferenceGenerated implements IPropertyWrapper {
    public component: SpatialReference;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: SpatialReference) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getWebMercator(): Promise<any> {
        if (!hasValue(this.component.WebMercator)) {
            return null;
        }
        
        let { buildDotNetSpatialReference } = await import('./spatialReference');
        return buildDotNetSpatialReference(this.component.WebMercator);
    }
    async setWebMercator(value: any): Promise<void> {
        let { buildJsSpatialReference } = await import('./spatialReference');
        this.component.WebMercator =  buildJsSpatialReference(value);
    }
    async getWgs84(): Promise<any> {
        if (!hasValue(this.component.WGS84)) {
            return null;
        }
        
        let { buildDotNetSpatialReference } = await import('./spatialReference');
        return buildDotNetSpatialReference(this.component.WGS84);
    }
    async setWgs84(value: any): Promise<void> {
        let { buildJsSpatialReference } = await import('./spatialReference');
        this.component.WGS84 =  buildJsSpatialReference(value);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsSpatialReferenceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSpatialReference = new SpatialReference();

    if (hasValue(dotNetObject.imageCoordinateSystem)) {
        jsSpatialReference.imageCoordinateSystem = dotNetObject.imageCoordinateSystem;
    }
    if (hasValue(dotNetObject.wkid)) {
        jsSpatialReference.wkid = dotNetObject.wkid;
    }
    if (hasValue(dotNetObject.wkt)) {
        jsSpatialReference.wkt = dotNetObject.wkt;
    }
    if (hasValue(dotNetObject.wkt2)) {
        jsSpatialReference.wkt2 = dotNetObject.wkt2;
    }
    let { default: SpatialReferenceWrapper } = await import('./spatialReference');
    let spatialReferenceWrapper = new SpatialReferenceWrapper(jsSpatialReference);
    spatialReferenceWrapper.geoBlazorId = dotNetObject.id;
    spatialReferenceWrapper.viewId = viewId;
    spatialReferenceWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(spatialReferenceWrapper);
    jsObjectRefs[dotNetObject.id] = spatialReferenceWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsSpatialReference;
    
    let dnInstantiatedObject = buildDotNetSpatialReference(jsSpatialReference);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SpatialReference', e);
    }
    
    return jsSpatialReference;
}

