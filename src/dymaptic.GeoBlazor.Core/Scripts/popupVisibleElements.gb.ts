// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetPopupVisibleElements } from './popupVisibleElements';

export async function buildJsPopupVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsPopupVisibleElements: any = {};

    if (hasValue(dotNetObject.actionBar)) {
        jsPopupVisibleElements.actionBar = dotNetObject.actionBar;
    }
    if (hasValue(dotNetObject.closeButton)) {
        jsPopupVisibleElements.closeButton = dotNetObject.closeButton;
    }
    if (hasValue(dotNetObject.collapseButton)) {
        jsPopupVisibleElements.collapseButton = dotNetObject.collapseButton;
    }
    if (hasValue(dotNetObject.featureListLayerTitle)) {
        jsPopupVisibleElements.featureListLayerTitle = dotNetObject.featureListLayerTitle;
    }
    if (hasValue(dotNetObject.featureMenuHeading)) {
        jsPopupVisibleElements.featureMenuHeading = dotNetObject.featureMenuHeading;
    }
    if (hasValue(dotNetObject.featureNavigation)) {
        jsPopupVisibleElements.featureNavigation = dotNetObject.featureNavigation;
    }
    if (hasValue(dotNetObject.heading)) {
        jsPopupVisibleElements.heading = dotNetObject.heading;
    }
    if (hasValue(dotNetObject.spinner)) {
        jsPopupVisibleElements.spinner = dotNetObject.spinner;
    }
    
    jsObjectRefs[dotNetObject.id] = jsPopupVisibleElements;
    arcGisObjectRefs[dotNetObject.id] = jsPopupVisibleElements;
    
    return jsPopupVisibleElements;
}


export async function buildDotNetPopupVisibleElementsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPopupVisibleElements: any = {};
    
    if (hasValue(jsObject.actionBar)) {
        dotNetPopupVisibleElements.actionBar = jsObject.actionBar;
    }
    
    if (hasValue(jsObject.closeButton)) {
        dotNetPopupVisibleElements.closeButton = jsObject.closeButton;
    }
    
    if (hasValue(jsObject.collapseButton)) {
        dotNetPopupVisibleElements.collapseButton = jsObject.collapseButton;
    }
    
    if (hasValue(jsObject.featureListLayerTitle)) {
        dotNetPopupVisibleElements.featureListLayerTitle = jsObject.featureListLayerTitle;
    }
    
    if (hasValue(jsObject.featureMenuHeading)) {
        dotNetPopupVisibleElements.featureMenuHeading = jsObject.featureMenuHeading;
    }
    
    if (hasValue(jsObject.featureNavigation)) {
        dotNetPopupVisibleElements.featureNavigation = jsObject.featureNavigation;
    }
    
    if (hasValue(jsObject.heading)) {
        dotNetPopupVisibleElements.heading = jsObject.heading;
    }
    
    if (hasValue(jsObject.spinner)) {
        dotNetPopupVisibleElements.spinner = jsObject.spinner;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetPopupVisibleElements.id = geoBlazorId;
    }

    return dotNetPopupVisibleElements;
}

