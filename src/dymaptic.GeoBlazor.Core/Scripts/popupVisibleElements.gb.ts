// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import PopupVisibleElements = __esri.PopupVisibleElements;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PopupVisibleElementsGenerated implements IPropertyWrapper {
    public component: PopupVisibleElements;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: PopupVisibleElements) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsPopupVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPopupVisibleElements: any = {}

    if (hasValue(dotNetObject.actionBar)) {
        jsPopupVisibleElements.actionBar = dotNetObject.actionBar;
    }
    if (hasValue(dotNetObject.closeButton)) {
        jsPopupVisibleElements.closeButton = dotNetObject.closeButton;
    }
    if (hasValue(dotNetObject.collapseButton)) {
        jsPopupVisibleElements.collapseButton = dotNetObject.collapseButton;
    }
    if (hasValue(dotNetObject.featureListLayerTitle)) {
        jsPopupVisibleElements.featureListLayerTitle = dotNetObject.featureListLayerTitle;
    }
    if (hasValue(dotNetObject.featureNavigation)) {
        jsPopupVisibleElements.featureNavigation = dotNetObject.featureNavigation;
    }
    if (hasValue(dotNetObject.heading)) {
        jsPopupVisibleElements.heading = dotNetObject.heading;
    }
    if (hasValue(dotNetObject.spinner)) {
        jsPopupVisibleElements.spinner = dotNetObject.spinner;
    }
    let { default: PopupVisibleElementsWrapper } = await import('./popupVisibleElements');
    let popupVisibleElementsWrapper = new PopupVisibleElementsWrapper(jsPopupVisibleElements);
    popupVisibleElementsWrapper.geoBlazorId = dotNetObject.id;
    popupVisibleElementsWrapper.viewId = viewId;
    popupVisibleElementsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(popupVisibleElementsWrapper);
    jsObjectRefs[dotNetObject.id] = popupVisibleElementsWrapper;

    arcGisObjectRefs[dotNetObject.id] = jsPopupVisibleElements;
    let { buildDotNetPopupVisibleElements } = await import('./popupVisibleElements');
    let dnInstantiatedObject = await buildDotNetPopupVisibleElements(jsPopupVisibleElements, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PopupVisibleElements', e);
    }
    
    return jsPopupVisibleElements;
}

export async function buildDotNetPopupVisibleElementsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPopupVisibleElements: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.actionBar)) {
            dotNetPopupVisibleElements.actionBar = jsObject.actionBar;
        }
        if (hasValue(jsObject.closeButton)) {
            dotNetPopupVisibleElements.closeButton = jsObject.closeButton;
        }
        if (hasValue(jsObject.collapseButton)) {
            dotNetPopupVisibleElements.collapseButton = jsObject.collapseButton;
        }
        if (hasValue(jsObject.featureListLayerTitle)) {
            dotNetPopupVisibleElements.featureListLayerTitle = jsObject.featureListLayerTitle;
        }
        if (hasValue(jsObject.featureNavigation)) {
            dotNetPopupVisibleElements.featureNavigation = jsObject.featureNavigation;
        }
        if (hasValue(jsObject.heading)) {
            dotNetPopupVisibleElements.heading = jsObject.heading;
        }
        if (hasValue(jsObject.spinner)) {
            dotNetPopupVisibleElements.spinner = jsObject.spinner;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPopupVisibleElements.id = k;
                break;
            }
        }
    }

    return dotNetPopupVisibleElements;
}

