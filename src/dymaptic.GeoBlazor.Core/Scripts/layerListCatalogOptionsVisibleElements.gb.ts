// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetLayerListCatalogOptionsVisibleElements } from './layerListCatalogOptionsVisibleElements';

export async function buildJsLayerListCatalogOptionsVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsLayerListCatalogOptionsVisibleElements: any = {};

    if (hasValue(dotNetObject.errors)) {
        jsLayerListCatalogOptionsVisibleElements.errors = dotNetObject.errors;
    }
    if (hasValue(dotNetObject.filter)) {
        jsLayerListCatalogOptionsVisibleElements.filter = dotNetObject.filter;
    }
    if (hasValue(dotNetObject.statusIndicators)) {
        jsLayerListCatalogOptionsVisibleElements.statusIndicators = dotNetObject.statusIndicators;
    }
    if (hasValue(dotNetObject.temporaryLayerIndicators)) {
        jsLayerListCatalogOptionsVisibleElements.temporaryLayerIndicators = dotNetObject.temporaryLayerIndicators;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsLayerListCatalogOptionsVisibleElements);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLayerListCatalogOptionsVisibleElements;
    
    let { buildDotNetLayerListCatalogOptionsVisibleElements } = await import('./layerListCatalogOptionsVisibleElements');
    let dnInstantiatedObject = await buildDotNetLayerListCatalogOptionsVisibleElements(jsLayerListCatalogOptionsVisibleElements, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type LayerListCatalogOptionsVisibleElements detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LayerListCatalogOptionsVisibleElements', e);
    }
    
    return jsLayerListCatalogOptionsVisibleElements;
}


export async function buildDotNetLayerListCatalogOptionsVisibleElementsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsLayerListCatalogOptionsVisibleElements } = await import('./layerListCatalogOptionsVisibleElements');
        jsComponentRef = await buildJsLayerListCatalogOptionsVisibleElements(jsObject, layerId, viewId);
    }
    
    let dotNetLayerListCatalogOptionsVisibleElements: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.errors)) {
        dotNetLayerListCatalogOptionsVisibleElements.errors = jsObject.errors;
    }
    if (hasValue(jsObject.filter)) {
        dotNetLayerListCatalogOptionsVisibleElements.filter = jsObject.filter;
    }
    if (hasValue(jsObject.statusIndicators)) {
        dotNetLayerListCatalogOptionsVisibleElements.statusIndicators = jsObject.statusIndicators;
    }
    if (hasValue(jsObject.temporaryLayerIndicators)) {
        dotNetLayerListCatalogOptionsVisibleElements.temporaryLayerIndicators = jsObject.temporaryLayerIndicators;
    }


    if (hasValue(geoBlazorId)) {
        dotNetLayerListCatalogOptionsVisibleElements.id = geoBlazorId;
    }

    return dotNetLayerListCatalogOptionsVisibleElements;
}

