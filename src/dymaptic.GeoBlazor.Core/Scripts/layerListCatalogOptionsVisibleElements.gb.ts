// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetLayerListCatalogOptionsVisibleElements } from './layerListCatalogOptionsVisibleElements';

export async function buildJsLayerListCatalogOptionsVisibleElementsGenerated(dotNetObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsLayerListCatalogOptionsVisibleElements: any = {};

    if (hasValue(dotNetObject.errors)) {
        jsLayerListCatalogOptionsVisibleElements.errors = dotNetObject.errors;
    }
    if (hasValue(dotNetObject.filter)) {
        jsLayerListCatalogOptionsVisibleElements.filter = dotNetObject.filter;
    }
    if (hasValue(dotNetObject.statusIndicators)) {
        jsLayerListCatalogOptionsVisibleElements.statusIndicators = dotNetObject.statusIndicators;
    }
    if (hasValue(dotNetObject.temporaryLayerIndicators)) {
        jsLayerListCatalogOptionsVisibleElements.temporaryLayerIndicators = dotNetObject.temporaryLayerIndicators;
    }
    
    jsObjectRefs[dotNetObject.id] = jsLayerListCatalogOptionsVisibleElements;
    arcGisObjectRefs[dotNetObject.id] = jsLayerListCatalogOptionsVisibleElements;
    
    return jsLayerListCatalogOptionsVisibleElements;
}


export async function buildDotNetLayerListCatalogOptionsVisibleElementsGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLayerListCatalogOptionsVisibleElements: any = {};
    
    if (hasValue(jsObject.errors)) {
        dotNetLayerListCatalogOptionsVisibleElements.errors = jsObject.errors;
    }
    
    if (hasValue(jsObject.filter)) {
        dotNetLayerListCatalogOptionsVisibleElements.filter = jsObject.filter;
    }
    
    if (hasValue(jsObject.statusIndicators)) {
        dotNetLayerListCatalogOptionsVisibleElements.statusIndicators = jsObject.statusIndicators;
    }
    
    if (hasValue(jsObject.temporaryLayerIndicators)) {
        dotNetLayerListCatalogOptionsVisibleElements.temporaryLayerIndicators = jsObject.temporaryLayerIndicators;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetLayerListCatalogOptionsVisibleElements.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetLayerListCatalogOptionsVisibleElements.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetLayerListCatalogOptionsVisibleElements.id)) {
        jsObjectRefs[dotNetLayerListCatalogOptionsVisibleElements.id] ??= jsObject;
        arcGisObjectRefs[dotNetLayerListCatalogOptionsVisibleElements.id] ??= jsObject;
    }

    return dotNetLayerListCatalogOptionsVisibleElements;
}

