// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ClassBreakInfo from '@arcgis/core/renderers/support/ClassBreakInfo';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetClassBreakInfo } from './classBreakInfo';

export async function buildJsClassBreakInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsClassBreakInfo = new ClassBreakInfo();
    if (hasValue(dotNetObject.symbol)) {
        let { buildJsSymbol } = await import('./symbol');
        jsClassBreakInfo.symbol = buildJsSymbol(dotNetObject.symbol) as any;
    }

    if (hasValue(dotNetObject.label)) {
        jsClassBreakInfo.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.maxValue)) {
        jsClassBreakInfo.maxValue = dotNetObject.maxValue;
    }
    if (hasValue(dotNetObject.minValue)) {
        jsClassBreakInfo.minValue = dotNetObject.minValue;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsClassBreakInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsClassBreakInfo;
    
    let dnInstantiatedObject = await buildDotNetClassBreakInfo(jsClassBreakInfo);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ClassBreakInfo', e);
    }
    
    return jsClassBreakInfo;
}

export async function buildDotNetClassBreakInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetClassBreakInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.symbol)) {
            let { buildDotNetSymbol } = await import('./symbol');
            dotNetClassBreakInfo.symbol = buildDotNetSymbol(jsObject.symbol);
        }
        if (hasValue(jsObject.label)) {
            dotNetClassBreakInfo.label = jsObject.label;
        }
        if (hasValue(jsObject.maxValue)) {
            dotNetClassBreakInfo.maxValue = jsObject.maxValue;
        }
        if (hasValue(jsObject.minValue)) {
            dotNetClassBreakInfo.minValue = jsObject.minValue;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetClassBreakInfo.id = k;
                break;
            }
        }
    }

    return dotNetClassBreakInfo;
}

