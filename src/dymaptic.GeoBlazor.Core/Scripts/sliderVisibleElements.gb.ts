// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetSliderVisibleElements } from './sliderVisibleElements';

export async function buildJsSliderVisibleElementsGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsSliderVisibleElements: any = {};

    if (hasValue(dotNetObject.labels)) {
        jsSliderVisibleElements.labels = dotNetObject.labels;
    }
    if (hasValue(dotNetObject.rangeLabels)) {
        jsSliderVisibleElements.rangeLabels = dotNetObject.rangeLabels;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSliderVisibleElements);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSliderVisibleElements;
    
    return jsSliderVisibleElements;
}


export async function buildDotNetSliderVisibleElementsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSliderVisibleElements: any = {};
    
    if (hasValue(jsObject.labels)) {
        dotNetSliderVisibleElements.labels = jsObject.labels;
    }
    
    if (hasValue(jsObject.rangeLabels)) {
        dotNetSliderVisibleElements.rangeLabels = jsObject.rangeLabels;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSliderVisibleElements.id = geoBlazorId;
    }

    return dotNetSliderVisibleElements;
}

