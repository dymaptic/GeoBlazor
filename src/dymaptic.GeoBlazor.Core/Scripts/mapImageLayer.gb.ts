// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import MapImageLayer from '@arcgis/core/layers/MapImageLayer';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class MapImageLayerGenerated implements IPropertyWrapper {
    public layer: MapImageLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: MapImageLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    async createExportImageParameters(extent: any,
        width: any,
        height: any,
        options: any): Promise<any> {
        return this.layer.createExportImageParameters(extent,
            width,
            height,
            options);
    }

    async createLayerView(view: any,
        options: any): Promise<any> {
        let result = await this.layer.createLayerView(view,
            options);
        let { buildDotNetLayerView } = await import('./layerView');
        return await buildDotNetLayerView(result);
    }

    async createServiceSublayers(): Promise<any> {
        let result = this.layer.createServiceSublayers();
        let { buildDotNetSublayer } = await import('./sublayer');
        return result.map(async i => await buildDotNetSublayer(i));
    }

    async fetchAttributionData(): Promise<any> {
        return await this.layer.fetchAttributionData();
    }

    async fetchImage(extent: any,
        width: any,
        height: any,
        options: any): Promise<any> {
        return await this.layer.fetchImage(extent,
            width,
            height,
            options);
    }

    async findSublayerById(id: any): Promise<any> {
        let result = this.layer.findSublayerById(id);
        let { buildDotNetSublayer } = await import('./sublayer');
        return await buildDotNetSublayer(result);
    }

    async loadAll(): Promise<any> {
        let result = await this.layer.loadAll();
        let { buildDotNetSublayer } = await import('./sublayer');
        return await buildDotNetSublayer(result);
    }

    async refresh(): Promise<void> {
        this.layer.refresh();
    }

    // region properties
    
    async getAllSublayers(): Promise<any> {
        let { buildDotNetSublayer } = await import('./sublayer');
        return this.layer.allSublayers.map(async i => await buildDotNetSublayer(i));
    }
    
    async getPortalItem(): Promise<any> {
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(this.layer.portalItem);
    }
    async setPortalItem(value: any): Promise<void> {
        let { buildJsPortalItem } = await import('./portalItem');
        this.layer.portalItem = await  buildJsPortalItem(value, this.layerId, this.viewId);
    }
    async getSublayers(): Promise<any> {
        let { buildDotNetSublayer } = await import('./sublayer');
        return this.layer.sublayers.map(async i => await buildDotNetSublayer(i));
    }
    
    async setSublayers(value: any): Promise<void> {
        let { buildJsSublayer } = await import('./sublayer');
        this.layer.sublayers = value.map(i => buildJsSublayer(i));
    }
    
    async getSubtables(): Promise<any> {
        let { buildDotNetSublayer } = await import('./sublayer');
        return this.layer.subtables.map(async i => await buildDotNetSublayer(i));
    }
    
    async setSubtables(value: any): Promise<void> {
        let { buildJsSublayer } = await import('./sublayer');
        this.layer.subtables = value.map(i => buildJsSublayer(i));
    }
    
    async getTimeExtent(): Promise<any> {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.timeExtent);
    }
    async setTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.timeExtent = await  buildJsTimeExtent(value, this.layerId, this.viewId);
    }
    async getTimeInfo(): Promise<any> {
        let { buildDotNetTimeInfo } = await import('./timeInfo');
        return await buildDotNetTimeInfo(this.layer.timeInfo);
    }
    async setTimeInfo(value: any): Promise<void> {
        let { buildJsTimeInfo } = await import('./timeInfo');
        this.layer.timeInfo = await  buildJsTimeInfo(value, this.layerId, this.viewId);
    }
    async getTimeOffset(): Promise<any> {
        let { buildDotNetTimeInterval } = await import('./timeInterval');
        return await buildDotNetTimeInterval(this.layer.timeOffset);
    }
    async setTimeOffset(value: any): Promise<void> {
        let { buildJsTimeInterval } = await import('./timeInterval');
        this.layer.timeOffset = await  buildJsTimeInterval(value, this.layerId, this.viewId);
    }
    async getVisibilityTimeExtent(): Promise<any> {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.visibilityTimeExtent);
    }
    async setVisibilityTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.visibilityTimeExtent = await  buildJsTimeExtent(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}

export async function buildJsMapImageLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsMapImageLayer = new MapImageLayer();
    if (hasValue(dotNetObject.portalItem)) {
        let { buildJsPortalItem } = await import('./portalItem');
        jsMapImageLayer.portalItem = await buildJsPortalItem(dotNetObject.portalItem, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.sublayers)) {
        let { buildJsSublayer } = await import('./jsBuilder');
        jsMapImageLayer.sublayers = await Promise.all(dotNetObject.sublayers.map(async i => await buildJsSublayer(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.subtables)) {
        let { buildJsSublayer } = await import('./jsBuilder');
        jsMapImageLayer.subtables = await Promise.all(dotNetObject.subtables.map(async i => await buildJsSublayer(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        jsMapImageLayer.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.timeInfo)) {
        let { buildJsTimeInfo } = await import('./timeInfo');
        jsMapImageLayer.timeInfo = await buildJsTimeInfo(dotNetObject.timeInfo, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.timeOffset)) {
        let { buildJsTimeInterval } = await import('./timeInterval');
        jsMapImageLayer.timeOffset = await buildJsTimeInterval(dotNetObject.timeOffset, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.visibilityTimeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        jsMapImageLayer.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.arcGISLayerId)) {
        jsMapImageLayer.id = dotNetObject.arcGISLayerId;
    }
    if (hasValue(dotNetObject.blendMode)) {
        jsMapImageLayer.blendMode = dotNetObject.blendMode;
    }
    if (hasValue(dotNetObject.copyright)) {
        jsMapImageLayer.copyright = dotNetObject.copyright;
    }
    if (hasValue(dotNetObject.customParameters)) {
        jsMapImageLayer.customParameters = dotNetObject.customParameters;
    }
    if (hasValue(dotNetObject.dpi)) {
        jsMapImageLayer.dpi = dotNetObject.dpi;
    }
    if (hasValue(dotNetObject.effect)) {
        jsMapImageLayer.effect = dotNetObject.effect;
    }
    if (hasValue(dotNetObject.fullExtent)) {
        jsMapImageLayer.fullExtent = dotNetObject.fullExtent;
    }
    if (hasValue(dotNetObject.gdbVersion)) {
        jsMapImageLayer.gdbVersion = dotNetObject.gdbVersion;
    }
    if (hasValue(dotNetObject.imageFormat)) {
        jsMapImageLayer.imageFormat = dotNetObject.imageFormat;
    }
    if (hasValue(dotNetObject.imageMaxHeight)) {
        jsMapImageLayer.imageMaxHeight = dotNetObject.imageMaxHeight;
    }
    if (hasValue(dotNetObject.imageMaxWidth)) {
        jsMapImageLayer.imageMaxWidth = dotNetObject.imageMaxWidth;
    }
    if (hasValue(dotNetObject.imageTransparency)) {
        jsMapImageLayer.imageTransparency = dotNetObject.imageTransparency;
    }
    if (hasValue(dotNetObject.legendEnabled)) {
        jsMapImageLayer.legendEnabled = dotNetObject.legendEnabled;
    }
    if (hasValue(dotNetObject.listMode)) {
        jsMapImageLayer.listMode = dotNetObject.listMode;
    }
    if (hasValue(dotNetObject.maxScale)) {
        jsMapImageLayer.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.minScale)) {
        jsMapImageLayer.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.opacity)) {
        jsMapImageLayer.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.persistenceEnabled)) {
        jsMapImageLayer.persistenceEnabled = dotNetObject.persistenceEnabled;
    }
    if (hasValue(dotNetObject.refreshInterval)) {
        jsMapImageLayer.refreshInterval = dotNetObject.refreshInterval;
    }
    if (hasValue(dotNetObject.title)) {
        jsMapImageLayer.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.url)) {
        jsMapImageLayer.url = dotNetObject.url;
    }
    if (hasValue(dotNetObject.useViewTime)) {
        jsMapImageLayer.useViewTime = dotNetObject.useViewTime;
    }
    jsMapImageLayer.on('refresh', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsRefresh', evt);
    });
    
    let { default: MapImageLayerWrapper } = await import('./mapImageLayer');
    let mapImageLayerWrapper = new MapImageLayerWrapper(jsMapImageLayer);
    mapImageLayerWrapper.geoBlazorId = dotNetObject.id;
    mapImageLayerWrapper.viewId = viewId;
    mapImageLayerWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(mapImageLayerWrapper);
    jsObjectRefs[dotNetObject.id] = mapImageLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsMapImageLayer;
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for MapImageLayer', e);
    }
    
    return jsMapImageLayer;
}

export async function buildDotNetMapImageLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMapImageLayer: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.allSublayers)) {
            let { buildDotNetSublayer } = await import('./sublayer');
            dotNetMapImageLayer.allSublayers = await Promise.all(jsObject.allSublayers.map(async i => await buildDotNetSublayer(i)));
        }
        if (hasValue(jsObject.portalItem)) {
            let { buildDotNetPortalItem } = await import('./portalItem');
            dotNetMapImageLayer.portalItem = await buildDotNetPortalItem(jsObject.portalItem);
        }
        if (hasValue(jsObject.sublayers)) {
            let { buildDotNetSublayer } = await import('./sublayer');
            dotNetMapImageLayer.sublayers = await Promise.all(jsObject.sublayers.map(async i => await buildDotNetSublayer(i)));
        }
        if (hasValue(jsObject.subtables)) {
            let { buildDotNetSublayer } = await import('./sublayer');
            dotNetMapImageLayer.subtables = await Promise.all(jsObject.subtables.map(async i => await buildDotNetSublayer(i)));
        }
        if (hasValue(jsObject.timeExtent)) {
            let { buildDotNetTimeExtent } = await import('./timeExtent');
            dotNetMapImageLayer.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
        }
        if (hasValue(jsObject.timeInfo)) {
            let { buildDotNetTimeInfo } = await import('./timeInfo');
            dotNetMapImageLayer.timeInfo = await buildDotNetTimeInfo(jsObject.timeInfo);
        }
        if (hasValue(jsObject.timeOffset)) {
            let { buildDotNetTimeInterval } = await import('./timeInterval');
            dotNetMapImageLayer.timeOffset = await buildDotNetTimeInterval(jsObject.timeOffset);
        }
        if (hasValue(jsObject.visibilityTimeExtent)) {
            let { buildDotNetTimeExtent } = await import('./timeExtent');
            dotNetMapImageLayer.visibilityTimeExtent = buildDotNetTimeExtent(jsObject.visibilityTimeExtent);
        }
        if (hasValue(jsObject.id)) {
            dotNetMapImageLayer.arcGISLayerId = jsObject.id;
        }
        if (hasValue(jsObject.blendMode)) {
            dotNetMapImageLayer.blendMode = jsObject.blendMode;
        }
        if (hasValue(jsObject.capabilities)) {
            dotNetMapImageLayer.capabilities = jsObject.capabilities;
        }
        if (hasValue(jsObject.copyright)) {
            dotNetMapImageLayer.copyright = jsObject.copyright;
        }
        if (hasValue(jsObject.customParameters)) {
            dotNetMapImageLayer.customParameters = jsObject.customParameters;
        }
        if (hasValue(jsObject.dateFieldsTimeZone)) {
            dotNetMapImageLayer.dateFieldsTimeZone = jsObject.dateFieldsTimeZone;
        }
        if (hasValue(jsObject.datesInUnknownTimezone)) {
            dotNetMapImageLayer.datesInUnknownTimezone = jsObject.datesInUnknownTimezone;
        }
        if (hasValue(jsObject.dpi)) {
            dotNetMapImageLayer.dpi = jsObject.dpi;
        }
        if (hasValue(jsObject.effect)) {
            dotNetMapImageLayer.effect = jsObject.effect;
        }
        if (hasValue(jsObject.fullExtent)) {
            dotNetMapImageLayer.fullExtent = jsObject.fullExtent;
        }
        if (hasValue(jsObject.gdbVersion)) {
            dotNetMapImageLayer.gdbVersion = jsObject.gdbVersion;
        }
        if (hasValue(jsObject.imageFormat)) {
            dotNetMapImageLayer.imageFormat = jsObject.imageFormat;
        }
        if (hasValue(jsObject.imageMaxHeight)) {
            dotNetMapImageLayer.imageMaxHeight = jsObject.imageMaxHeight;
        }
        if (hasValue(jsObject.imageMaxWidth)) {
            dotNetMapImageLayer.imageMaxWidth = jsObject.imageMaxWidth;
        }
        if (hasValue(jsObject.imageTransparency)) {
            dotNetMapImageLayer.imageTransparency = jsObject.imageTransparency;
        }
        if (hasValue(jsObject.legendEnabled)) {
            dotNetMapImageLayer.legendEnabled = jsObject.legendEnabled;
        }
        if (hasValue(jsObject.listMode)) {
            dotNetMapImageLayer.listMode = jsObject.listMode;
        }
        if (hasValue(jsObject.loaded)) {
            dotNetMapImageLayer.loaded = jsObject.loaded;
        }
        if (hasValue(jsObject.maxScale)) {
            dotNetMapImageLayer.maxScale = jsObject.maxScale;
        }
        if (hasValue(jsObject.minScale)) {
            dotNetMapImageLayer.minScale = jsObject.minScale;
        }
        if (hasValue(jsObject.opacity)) {
            dotNetMapImageLayer.opacity = jsObject.opacity;
        }
        if (hasValue(jsObject.persistenceEnabled)) {
            dotNetMapImageLayer.persistenceEnabled = jsObject.persistenceEnabled;
        }
        if (hasValue(jsObject.preferredTimeZone)) {
            dotNetMapImageLayer.preferredTimeZone = jsObject.preferredTimeZone;
        }
        if (hasValue(jsObject.refreshInterval)) {
            dotNetMapImageLayer.refreshInterval = jsObject.refreshInterval;
        }
        if (hasValue(jsObject.sourceJSON)) {
            dotNetMapImageLayer.sourceJSON = jsObject.sourceJSON;
        }
        if (hasValue(jsObject.spatialReference)) {
            dotNetMapImageLayer.spatialReference = jsObject.spatialReference;
        }
        if (hasValue(jsObject.title)) {
            dotNetMapImageLayer.title = jsObject.title;
        }
        if (hasValue(jsObject.type)) {
            dotNetMapImageLayer.type = jsObject.type;
        }
        if (hasValue(jsObject.url)) {
            dotNetMapImageLayer.url = jsObject.url;
        }
        if (hasValue(jsObject.useViewTime)) {
            dotNetMapImageLayer.useViewTime = jsObject.useViewTime;
        }
        if (hasValue(jsObject.version)) {
            dotNetMapImageLayer.version = jsObject.version;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetMapImageLayer.id = k;
                break;
            }
        }
    }

    return dotNetMapImageLayer;
}

