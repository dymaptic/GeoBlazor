// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import CSVLayerElevationInfoFeatureExpressionInfo = __esri.CSVLayerElevationInfoFeatureExpressionInfo;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CSVLayerElevationInfoFeatureExpressionInfoGenerated implements IPropertyWrapper {
    public component: CSVLayerElevationInfoFeatureExpressionInfo;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: CSVLayerElevationInfoFeatureExpressionInfo) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsCSVLayerElevationInfoFeatureExpressionInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCSVLayerElevationInfoFeatureExpressionInfo: any = {}

    if (hasValue(dotNetObject.expression)) {
        jsCSVLayerElevationInfoFeatureExpressionInfo.expression = dotNetObject.expression;
    }
    if (hasValue(dotNetObject.title)) {
        jsCSVLayerElevationInfoFeatureExpressionInfo.title = dotNetObject.title;
    }
    let { default: CSVLayerElevationInfoFeatureExpressionInfoWrapper } = await import('./cSVLayerElevationInfoFeatureExpressionInfo');
    let cSVLayerElevationInfoFeatureExpressionInfoWrapper = new CSVLayerElevationInfoFeatureExpressionInfoWrapper(jsCSVLayerElevationInfoFeatureExpressionInfo);
    cSVLayerElevationInfoFeatureExpressionInfoWrapper.geoBlazorId = dotNetObject.id;
    cSVLayerElevationInfoFeatureExpressionInfoWrapper.viewId = viewId;
    cSVLayerElevationInfoFeatureExpressionInfoWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(cSVLayerElevationInfoFeatureExpressionInfoWrapper);
    jsObjectRefs[dotNetObject.id] = cSVLayerElevationInfoFeatureExpressionInfoWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsCSVLayerElevationInfoFeatureExpressionInfo;
    
    let dnInstantiatedObject = await buildDotNetCSVLayerElevationInfoFeatureExpressionInfo(jsCSVLayerElevationInfoFeatureExpressionInfo);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CSVLayerElevationInfoFeatureExpressionInfo', e);
    }
    
    return jsCSVLayerElevationInfoFeatureExpressionInfo;
}

export async function buildDotNetCSVLayerElevationInfoFeatureExpressionInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCSVLayerElevationInfoFeatureExpressionInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.expression)) {
            dotNetCSVLayerElevationInfoFeatureExpressionInfo.expression = jsObject.expression;
        }
        if (hasValue(jsObject.title)) {
            dotNetCSVLayerElevationInfoFeatureExpressionInfo.title = jsObject.title;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCSVLayerElevationInfoFeatureExpressionInfo.id = k;
                break;
            }
        }
    }

    return dotNetCSVLayerElevationInfoFeatureExpressionInfo;
}

