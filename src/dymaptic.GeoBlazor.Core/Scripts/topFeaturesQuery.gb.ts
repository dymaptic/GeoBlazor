import { buildDotNetTopFeaturesQuery } from './topFeaturesQuery';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import TopFeaturesQuery from '@arcgis/core/rest/support/TopFeaturesQuery';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsTopFeaturesQueryGenerated(dotNetObject: any): Promise<any> {
    let jsTopFeaturesQuery = new TopFeaturesQuery();
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsGeometry } = await import('./geometry');
        jsTopFeaturesQuery.geometry = buildJsGeometry(dotNetObject.geometry) as any;
    }
    if (hasValue(dotNetObject.outSpatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        jsTopFeaturesQuery.outSpatialReference = buildJsSpatialReference(dotNetObject.outSpatialReference) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        jsTopFeaturesQuery.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.cacheHint)) {
        jsTopFeaturesQuery.cacheHint = dotNetObject.cacheHint;
    }
    if (hasValue(dotNetObject.distance)) {
        jsTopFeaturesQuery.distance = dotNetObject.distance;
    }
    if (hasValue(dotNetObject.geometryPrecision)) {
        jsTopFeaturesQuery.geometryPrecision = dotNetObject.geometryPrecision;
    }
    if (hasValue(dotNetObject.maxAllowableOffset)) {
        jsTopFeaturesQuery.maxAllowableOffset = dotNetObject.maxAllowableOffset;
    }
    if (hasValue(dotNetObject.num)) {
        jsTopFeaturesQuery.num = dotNetObject.num;
    }
    if (hasValue(dotNetObject.objectIds)) {
        jsTopFeaturesQuery.objectIds = dotNetObject.objectIds;
    }
    if (hasValue(dotNetObject.orderByFields)) {
        jsTopFeaturesQuery.orderByFields = dotNetObject.orderByFields;
    }
    if (hasValue(dotNetObject.outFields)) {
        jsTopFeaturesQuery.outFields = dotNetObject.outFields;
    }
    if (hasValue(dotNetObject.returnGeometry)) {
        jsTopFeaturesQuery.returnGeometry = dotNetObject.returnGeometry;
    }
    if (hasValue(dotNetObject.returnM)) {
        jsTopFeaturesQuery.returnM = dotNetObject.returnM;
    }
    if (hasValue(dotNetObject.returnZ)) {
        jsTopFeaturesQuery.returnZ = dotNetObject.returnZ;
    }
    if (hasValue(dotNetObject.spatialRelationship)) {
        jsTopFeaturesQuery.spatialRelationship = dotNetObject.spatialRelationship;
    }
    if (hasValue(dotNetObject.start)) {
        jsTopFeaturesQuery.start = dotNetObject.start;
    }
    if (hasValue(dotNetObject.topFilter)) {
        jsTopFeaturesQuery.topFilter = dotNetObject.topFilter;
    }
    if (hasValue(dotNetObject.units)) {
        jsTopFeaturesQuery.units = dotNetObject.units;
    }
    if (hasValue(dotNetObject.where)) {
        jsTopFeaturesQuery.where = dotNetObject.where;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsTopFeaturesQuery);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTopFeaturesQuery;
    
    let dnInstantiatedObject = await buildDotNetTopFeaturesQuery(jsTopFeaturesQuery);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TopFeaturesQuery', e);
    }
    
    return jsTopFeaturesQuery;
}
export async function buildDotNetTopFeaturesQueryGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTopFeaturesQuery: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.geometry)) {
            let { buildDotNetGeometry } = await import('./geometry');
            dotNetTopFeaturesQuery.geometry = buildDotNetGeometry(jsObject.geometry);
        }
        if (hasValue(jsObject.outSpatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetTopFeaturesQuery.outSpatialReference = buildDotNetSpatialReference(jsObject.outSpatialReference);
        }
        if (hasValue(jsObject.timeExtent)) {
            let { buildDotNetTimeExtent } = await import('./timeExtent');
            dotNetTopFeaturesQuery.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
        }
        if (hasValue(jsObject.cacheHint)) {
            dotNetTopFeaturesQuery.cacheHint = jsObject.cacheHint;
        }
        if (hasValue(jsObject.distance)) {
            dotNetTopFeaturesQuery.distance = jsObject.distance;
        }
        if (hasValue(jsObject.geometryPrecision)) {
            dotNetTopFeaturesQuery.geometryPrecision = jsObject.geometryPrecision;
        }
        if (hasValue(jsObject.maxAllowableOffset)) {
            dotNetTopFeaturesQuery.maxAllowableOffset = jsObject.maxAllowableOffset;
        }
        if (hasValue(jsObject.num)) {
            dotNetTopFeaturesQuery.num = jsObject.num;
        }
        if (hasValue(jsObject.objectIds)) {
            dotNetTopFeaturesQuery.objectIds = jsObject.objectIds;
        }
        if (hasValue(jsObject.orderByFields)) {
            dotNetTopFeaturesQuery.orderByFields = jsObject.orderByFields;
        }
        if (hasValue(jsObject.outFields)) {
            dotNetTopFeaturesQuery.outFields = jsObject.outFields;
        }
        if (hasValue(jsObject.returnGeometry)) {
            dotNetTopFeaturesQuery.returnGeometry = jsObject.returnGeometry;
        }
        if (hasValue(jsObject.returnM)) {
            dotNetTopFeaturesQuery.returnM = jsObject.returnM;
        }
        if (hasValue(jsObject.returnZ)) {
            dotNetTopFeaturesQuery.returnZ = jsObject.returnZ;
        }
        if (hasValue(jsObject.spatialRelationship)) {
            dotNetTopFeaturesQuery.spatialRelationship = jsObject.spatialRelationship;
        }
        if (hasValue(jsObject.start)) {
            dotNetTopFeaturesQuery.start = jsObject.start;
        }
        if (hasValue(jsObject.topFilter)) {
            dotNetTopFeaturesQuery.topFilter = jsObject.topFilter;
        }
        if (hasValue(jsObject.units)) {
            dotNetTopFeaturesQuery.units = jsObject.units;
        }
        if (hasValue(jsObject.where)) {
            dotNetTopFeaturesQuery.where = jsObject.where;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTopFeaturesQuery.id = k;
                break;
            }
        }
    }

    return dotNetTopFeaturesQuery;
}

