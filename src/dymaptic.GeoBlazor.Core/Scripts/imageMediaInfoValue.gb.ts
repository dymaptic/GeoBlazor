// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import ImageMediaInfoValue from '@arcgis/core/popup/content/support/ImageMediaInfoValue';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ImageMediaInfoValueGenerated implements IPropertyWrapper {
    public component: ImageMediaInfoValue;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ImageMediaInfoValue) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsImageMediaInfoValueGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsImageMediaInfoValue = new ImageMediaInfoValue();

    if (hasValue(dotNetObject.linkURL)) {
        jsImageMediaInfoValue.linkURL = dotNetObject.linkURL;
    }
    if (hasValue(dotNetObject.sourceURL)) {
        jsImageMediaInfoValue.sourceURL = dotNetObject.sourceURL;
    }
    let { default: ImageMediaInfoValueWrapper } = await import('./imageMediaInfoValue');
    let imageMediaInfoValueWrapper = new ImageMediaInfoValueWrapper(jsImageMediaInfoValue);
    imageMediaInfoValueWrapper.geoBlazorId = dotNetObject.id;
    imageMediaInfoValueWrapper.viewId = viewId;
    imageMediaInfoValueWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(imageMediaInfoValueWrapper);
    jsObjectRefs[dotNetObject.id] = imageMediaInfoValueWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsImageMediaInfoValue;
    
    let { buildDotNetImageMediaInfoValue } = await import('./imageMediaInfoValue');
    let dnInstantiatedObject = await buildDotNetImageMediaInfoValue(jsImageMediaInfoValue);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImageMediaInfoValue', e);
    }
    
    return jsImageMediaInfoValue;
}

export async function buildDotNetImageMediaInfoValueGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageMediaInfoValue: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.linkURL)) {
            dotNetImageMediaInfoValue.linkURL = jsObject.linkURL;
        }
        if (hasValue(jsObject.sourceURL)) {
            dotNetImageMediaInfoValue.sourceURL = jsObject.sourceURL;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImageMediaInfoValue.id = k;
                break;
            }
        }
    }

    return dotNetImageMediaInfoValue;
}

