// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import GraphQueryStreaming from '@arcgis/core/rest/knowledgeGraph/GraphQueryStreaming';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetGraphQueryStreaming } from './graphQueryStreaming';

export async function buildJsGraphQueryStreamingGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.outputQuantizationParameters)) {
        let { buildJsOutputQuantizationParameters } = await import('./outputQuantizationParameters');
        properties.outputQuantizationParameters = await buildJsOutputQuantizationParameters(dotNetObject.outputQuantizationParameters, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.bindGeometryQuantizationParameters)) {
        properties.bindGeometryQuantizationParameters = dotNetObject.bindGeometryQuantizationParameters;
    }
    if (hasValue(dotNetObject.bindParameters)) {
        properties.bindParameters = dotNetObject.bindParameters;
    }
    if (hasValue(dotNetObject.openCypherQuery)) {
        properties.openCypherQuery = dotNetObject.openCypherQuery;
    }
    if (hasValue(dotNetObject.provenanceBehavior)) {
        properties.provenanceBehavior = dotNetObject.provenanceBehavior;
    }
    let jsGraphQueryStreaming = new GraphQueryStreaming(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsGraphQueryStreaming);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsGraphQueryStreaming;
    
    return jsGraphQueryStreaming;
}


export async function buildDotNetGraphQueryStreamingGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGraphQueryStreaming: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.outputQuantizationParameters)) {
        let { buildDotNetOutputQuantizationParameters } = await import('./outputQuantizationParameters');
        dotNetGraphQueryStreaming.outputQuantizationParameters = await buildDotNetOutputQuantizationParameters(jsObject.outputQuantizationParameters);
    }
    if (hasValue(jsObject.bindGeometryQuantizationParameters)) {
        dotNetGraphQueryStreaming.bindGeometryQuantizationParameters = jsObject.bindGeometryQuantizationParameters;
    }
    if (hasValue(jsObject.bindParameters)) {
        dotNetGraphQueryStreaming.bindParameters = jsObject.bindParameters;
    }
    if (hasValue(jsObject.openCypherQuery)) {
        dotNetGraphQueryStreaming.openCypherQuery = jsObject.openCypherQuery;
    }
    if (hasValue(jsObject.provenanceBehavior)) {
        dotNetGraphQueryStreaming.provenanceBehavior = jsObject.provenanceBehavior;
    }

    return dotNetGraphQueryStreaming;
}

