// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import timeUtils = __esri.timeUtils;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class TimeUtilsGenerated implements IPropertyWrapper {
    public component: timeUtils;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: timeUtils) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async getTimeExtentFromLayers(layers: any,
        signal: any): Promise<any> {
        let { buildJsLayer } = await import('./layer');
        let jsLayers = await buildJsLayer(layers, this.layerId, this.viewId) as any;
        let result = await this.component.getTimeExtentFromLayers(jsLayers,
            signal);
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(result);
    }

    async getTimeSliderSettingsFromWebDocument(document: any,
        signal: any): Promise<any> {
        return await this.component.getTimeSliderSettingsFromWebDocument(document,
            signal);
    }

    async getTimeSliderSettingsFromWebMap(webMap: any,
        signal: any): Promise<any> {
        let { buildJsWebMap } = await import('./webMap');
        let jsWebMap = await buildJsWebMap(webMap, this.layerId, this.viewId) as any;
        return await this.component.getTimeSliderSettingsFromWebMap(jsWebMap,
            signal);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsTimeUtilsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jstimeUtils: any = {}


    let { default: TimeUtilsWrapper } = await import('./timeUtils');
    let timeUtilsWrapper = new TimeUtilsWrapper(jstimeUtils);
    timeUtilsWrapper.geoBlazorId = dotNetObject.id;
    timeUtilsWrapper.viewId = viewId;
    timeUtilsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(timeUtilsWrapper);
    jsObjectRefs[dotNetObject.id] = timeUtilsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jstimeUtils;
    let { buildDotNetTimeUtils } = await import('./timeUtils');
    let dnInstantiatedObject = await buildDotNetTimeUtils(jstimeUtils);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TimeUtils', e);
    }
    
    return jstimeUtils;
}

export async function buildDotNetTimeUtilsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTimeUtils: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTimeUtils.id = k;
                break;
            }
        }
    }

    return dotNetTimeUtils;
}

