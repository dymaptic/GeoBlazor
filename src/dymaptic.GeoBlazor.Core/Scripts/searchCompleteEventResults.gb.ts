// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSearchCompleteEventResults } from './searchCompleteEventResults';

export async function buildJsSearchCompleteEventResultsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSearchSearchCompleteEventResults: any = {};
    if (hasValue(dotNetObject.results)) {
        let { buildJsSearchResult } = await import('./searchResult');
        jsSearchSearchCompleteEventResults.results = await Promise.all(dotNetObject.results.map(async i => await buildJsSearchResult(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.source)) {
        jsSearchSearchCompleteEventResults.source = dotNetObject.source;
    }
    if (hasValue(dotNetObject.sourceIndex)) {
        jsSearchSearchCompleteEventResults.sourceIndex = dotNetObject.sourceIndex;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSearchSearchCompleteEventResults);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSearchSearchCompleteEventResults;
    
    let { buildDotNetSearchCompleteEventResults } = await import('./searchCompleteEventResults');
    let dnInstantiatedObject = await buildDotNetSearchCompleteEventResults(jsSearchSearchCompleteEventResults);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type SearchCompleteEventResults detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SearchCompleteEventResults', e);
    }
    
    return jsSearchSearchCompleteEventResults;
}


export async function buildDotNetSearchCompleteEventResultsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchCompleteEventResults: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.results)) {
        let { buildDotNetSearchResult } = await import('./searchResult');
        dotNetSearchCompleteEventResults.results = await Promise.all(jsObject.results.map(async i => await buildDotNetSearchResult(i)));
    }
    if (hasValue(jsObject.source)) {
        dotNetSearchCompleteEventResults.source = jsObject.source;
    }
    if (hasValue(jsObject.sourceIndex)) {
        dotNetSearchCompleteEventResults.sourceIndex = jsObject.sourceIndex;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSearchCompleteEventResults.id = k;
                break;
            }
        }
    }

    return dotNetSearchCompleteEventResults;
}

