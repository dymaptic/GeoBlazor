// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSearchCompleteEventResults } from './searchCompleteEventResults';

export async function buildJsSearchCompleteEventResultsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsSearchSearchCompleteEventResults: any = {};
    if (hasValue(dotNetObject.results) && dotNetObject.results.length > 0) {
        let { buildJsSearchResult } = await import('./searchResult');
        jsSearchSearchCompleteEventResults.results = await Promise.all(dotNetObject.results.map(async i => await buildJsSearchResult(i))) as any;
    }
    if (hasValue(dotNetObject.source)) {
        let { buildJsSearchSource } = await import('./searchSource');
        jsSearchSearchCompleteEventResults.source = await buildJsSearchSource(dotNetObject.source, viewId) as any;
    }

    if (hasValue(dotNetObject.sourceIndex)) {
        jsSearchSearchCompleteEventResults.sourceIndex = dotNetObject.sourceIndex;
    }
    
    jsObjectRefs[dotNetObject.id] = jsSearchSearchCompleteEventResults;
    arcGisObjectRefs[dotNetObject.id] = jsSearchSearchCompleteEventResults;
    
    return jsSearchSearchCompleteEventResults;
}


export async function buildDotNetSearchCompleteEventResultsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchCompleteEventResults: any = {};
    
    if (hasValue(jsObject.results)) {
        let { buildDotNetSearchResult } = await import('./searchResult');
        dotNetSearchCompleteEventResults.results = jsObject.results.map(i => buildDotNetSearchResult(i));
    }
    
    if (hasValue(jsObject.source)) {
        let { buildDotNetSearchSource } = await import('./searchSource');
        dotNetSearchCompleteEventResults.source = await buildDotNetSearchSource(jsObject.source);
    }
    
    if (hasValue(jsObject.sourceIndex)) {
        dotNetSearchCompleteEventResults.sourceIndex = jsObject.sourceIndex;
    }
    

    return dotNetSearchCompleteEventResults;
}

