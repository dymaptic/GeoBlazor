// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import knowledgeGraphService = __esri.knowledgeGraphService;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class KnowledgeGraphServiceGenerated implements IPropertyWrapper {
    public component: knowledgeGraphService;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: knowledgeGraphService) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async executeApplyEdits(graph: any,
        edits: any,
        requestOptions: any): Promise<any> {
        let { buildJsKnowledgeGraph } = await import('./knowledgeGraph');
        let jsGraph = await buildJsKnowledgeGraph(graph, this.layerId, this.viewId) as any;
        return await this.component.executeApplyEdits(jsGraph,
            edits,
            requestOptions);
    }

    async executeQuery(graph: any,
        queryArguments: any,
        requestOptions: any): Promise<any> {
        let { buildJsKnowledgeGraph } = await import('./knowledgeGraph');
        let jsGraph = await buildJsKnowledgeGraph(graph, this.layerId, this.viewId) as any;
        return await this.component.executeQuery(jsGraph,
            queryArguments,
            requestOptions);
    }

    async executeQueryStreaming(graph: any,
        queryArguments: any,
        requestOptions: any): Promise<any> {
        let { buildJsKnowledgeGraph } = await import('./knowledgeGraph');
        let jsGraph = await buildJsKnowledgeGraph(graph, this.layerId, this.viewId) as any;
        return await this.component.executeQueryStreaming(jsGraph,
            queryArguments,
            requestOptions);
    }

    async executeSearch(graph: any,
        searchArguments: any,
        requestOptions: any): Promise<any> {
        let { buildJsKnowledgeGraph } = await import('./knowledgeGraph');
        let jsGraph = await buildJsKnowledgeGraph(graph, this.layerId, this.viewId) as any;
        return await this.component.executeSearch(jsGraph,
            searchArguments,
            requestOptions);
    }

    async executeSearchStreaming(graph: any,
        searchArguments: any,
        requestOptions: any): Promise<any> {
        let { buildJsKnowledgeGraph } = await import('./knowledgeGraph');
        let jsGraph = await buildJsKnowledgeGraph(graph, this.layerId, this.viewId) as any;
        return await this.component.executeSearchStreaming(jsGraph,
            searchArguments,
            requestOptions);
    }

    async fetchKnowledgeGraph(url: any): Promise<any> {
        return await this.component.fetchKnowledgeGraph(url);
    }

    async refreshDataModel(graph: any): Promise<void> {
        let { buildJsKnowledgeGraph } = await import('./knowledgeGraph');
        let jsGraph = await buildJsKnowledgeGraph(graph, this.layerId, this.viewId) as any;
        this.component.refreshDataModel(jsGraph);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsKnowledgeGraphServiceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsknowledgeGraphService: any = {}


    let { default: KnowledgeGraphServiceWrapper } = await import('./knowledgeGraphService');
    let knowledgeGraphServiceWrapper = new KnowledgeGraphServiceWrapper(jsknowledgeGraphService);
    knowledgeGraphServiceWrapper.geoBlazorId = dotNetObject.id;
    knowledgeGraphServiceWrapper.viewId = viewId;
    knowledgeGraphServiceWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(knowledgeGraphServiceWrapper);
    jsObjectRefs[dotNetObject.id] = knowledgeGraphServiceWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsknowledgeGraphService;
    let { buildDotNetKnowledgeGraphService } = await import('./knowledgeGraphService');
    let dnInstantiatedObject = await buildDotNetKnowledgeGraphService(jsknowledgeGraphService);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for KnowledgeGraphService', e);
    }
    
    return jsknowledgeGraphService;
}
export async function buildDotNetKnowledgeGraphServiceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetKnowledgeGraphService: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetKnowledgeGraphService.id = k;
                break;
            }
        }
    }

    return dotNetKnowledgeGraphService;
}

