// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import CoverageDescriptionV201DomainSet = __esri.CoverageDescriptionV201DomainSet;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CoverageDescriptionV201DomainSetGenerated implements IPropertyWrapper {
    public component: CoverageDescriptionV201DomainSet;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: CoverageDescriptionV201DomainSet) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getResolution(): Promise<any> {
        if (!hasValue(this.component.resolution)) {
            return null;
        }
        
        let { buildDotNetCoverageDescriptionV201DomainSetResolution } = await import('./coverageDescriptionV201DomainSetResolution');
        return await buildDotNetCoverageDescriptionV201DomainSetResolution(this.component.resolution, this.layerId, this.viewId);
    }
    async setResolution(value: any): Promise<void> {
        let { buildJsCoverageDescriptionV201DomainSetResolution } = await import('./coverageDescriptionV201DomainSetResolution');
        this.component.resolution = await  buildJsCoverageDescriptionV201DomainSetResolution(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsCoverageDescriptionV201DomainSetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCoverageDescriptionV201DomainSet: any = {}
    if (hasValue(dotNetObject.resolution)) {
        let { buildJsCoverageDescriptionV201DomainSetResolution } = await import('./coverageDescriptionV201DomainSetResolution');
        jsCoverageDescriptionV201DomainSet.resolution = await buildJsCoverageDescriptionV201DomainSetResolution(dotNetObject.resolution, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.axisLabels)) {
        jsCoverageDescriptionV201DomainSet.axisLabels = dotNetObject.axisLabels;
    }
    if (hasValue(dotNetObject.columns)) {
        jsCoverageDescriptionV201DomainSet.columns = dotNetObject.columns;
    }
    if (hasValue(dotNetObject.gridSamples)) {
        jsCoverageDescriptionV201DomainSet.gridSamples = dotNetObject.gridSamples;
    }
    if (hasValue(dotNetObject.hasSameAxisLabelsAsBoundedBy)) {
        jsCoverageDescriptionV201DomainSet.hasSameAxisLabelsAsBoundedBy = dotNetObject.hasSameAxisLabelsAsBoundedBy;
    }
    if (hasValue(dotNetObject.offset)) {
        jsCoverageDescriptionV201DomainSet.offset = dotNetObject.offset;
    }
    if (hasValue(dotNetObject.origin)) {
        jsCoverageDescriptionV201DomainSet.origin = dotNetObject.origin;
    }
    if (hasValue(dotNetObject.rows)) {
        jsCoverageDescriptionV201DomainSet.rows = dotNetObject.rows;
    }
    let { default: CoverageDescriptionV201DomainSetWrapper } = await import('./coverageDescriptionV201DomainSet');
    let coverageDescriptionV201DomainSetWrapper = new CoverageDescriptionV201DomainSetWrapper(jsCoverageDescriptionV201DomainSet);
    coverageDescriptionV201DomainSetWrapper.geoBlazorId = dotNetObject.id;
    coverageDescriptionV201DomainSetWrapper.viewId = viewId;
    coverageDescriptionV201DomainSetWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(coverageDescriptionV201DomainSetWrapper);
    jsObjectRefs[dotNetObject.id] = coverageDescriptionV201DomainSetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsCoverageDescriptionV201DomainSet;
    
    let dnInstantiatedObject = await buildDotNetCoverageDescriptionV201DomainSet(jsCoverageDescriptionV201DomainSet, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CoverageDescriptionV201DomainSet', e);
    }
    
    return jsCoverageDescriptionV201DomainSet;
}

export async function buildDotNetCoverageDescriptionV201DomainSetGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCoverageDescriptionV201DomainSet: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.resolution)) {
            let { buildDotNetCoverageDescriptionV201DomainSetResolution } = await import('./coverageDescriptionV201DomainSetResolution');
            dotNetCoverageDescriptionV201DomainSet.resolution = await buildDotNetCoverageDescriptionV201DomainSetResolution(jsObject.resolution, layerId, viewId);
        }
        if (hasValue(jsObject.axisLabels)) {
            dotNetCoverageDescriptionV201DomainSet.axisLabels = jsObject.axisLabels;
        }
        if (hasValue(jsObject.columns)) {
            dotNetCoverageDescriptionV201DomainSet.columns = jsObject.columns;
        }
        if (hasValue(jsObject.gridSamples)) {
            dotNetCoverageDescriptionV201DomainSet.gridSamples = jsObject.gridSamples;
        }
        if (hasValue(jsObject.hasSameAxisLabelsAsBoundedBy)) {
            dotNetCoverageDescriptionV201DomainSet.hasSameAxisLabelsAsBoundedBy = jsObject.hasSameAxisLabelsAsBoundedBy;
        }
        if (hasValue(jsObject.offset)) {
            dotNetCoverageDescriptionV201DomainSet.offset = jsObject.offset;
        }
        if (hasValue(jsObject.origin)) {
            dotNetCoverageDescriptionV201DomainSet.origin = jsObject.origin;
        }
        if (hasValue(jsObject.rows)) {
            dotNetCoverageDescriptionV201DomainSet.rows = jsObject.rows;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCoverageDescriptionV201DomainSet.id = k;
                break;
            }
        }
    }

    return dotNetCoverageDescriptionV201DomainSet;
}

