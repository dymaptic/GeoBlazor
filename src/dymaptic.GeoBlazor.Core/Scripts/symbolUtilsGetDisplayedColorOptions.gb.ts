// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSymbolUtilsGetDisplayedColorOptions } from './symbolUtilsGetDisplayedColorOptions';

export async function buildJsSymbolUtilsGetDisplayedColorOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jssymbolUtilsGetDisplayedColorOptions: any = {}
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsRenderer } = await import('./renderer');
        jssymbolUtilsGetDisplayedColorOptions.renderer = await buildJsRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        jssymbolUtilsGetDisplayedColorOptions.spatialReference = buildJsSpatialReference(dotNetObject.spatialReference) as any;
    }

    if (hasValue(dotNetObject.resolution)) {
        jssymbolUtilsGetDisplayedColorOptions.resolution = dotNetObject.resolution;
    }
    if (hasValue(dotNetObject.scale)) {
        jssymbolUtilsGetDisplayedColorOptions.scale = dotNetObject.scale;
    }
    if (hasValue(dotNetObject.viewingMode)) {
        jssymbolUtilsGetDisplayedColorOptions.viewingMode = dotNetObject.viewingMode;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jssymbolUtilsGetDisplayedColorOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jssymbolUtilsGetDisplayedColorOptions;
    
    let dnInstantiatedObject = await buildDotNetSymbolUtilsGetDisplayedColorOptions(jssymbolUtilsGetDisplayedColorOptions);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SymbolUtilsGetDisplayedColorOptions', e);
    }
    
    return jssymbolUtilsGetDisplayedColorOptions;
}

export async function buildDotNetSymbolUtilsGetDisplayedColorOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSymbolUtilsGetDisplayedColorOptions: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.renderer)) {
            let { buildDotNetRenderer } = await import('./renderer');
            dotNetSymbolUtilsGetDisplayedColorOptions.renderer = await buildDotNetRenderer(jsObject.renderer);
        }
        if (hasValue(jsObject.spatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetSymbolUtilsGetDisplayedColorOptions.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference);
        }
        if (hasValue(jsObject.resolution)) {
            dotNetSymbolUtilsGetDisplayedColorOptions.resolution = jsObject.resolution;
        }
        if (hasValue(jsObject.scale)) {
            dotNetSymbolUtilsGetDisplayedColorOptions.scale = jsObject.scale;
        }
        if (hasValue(jsObject.viewingMode)) {
            dotNetSymbolUtilsGetDisplayedColorOptions.viewingMode = jsObject.viewingMode;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSymbolUtilsGetDisplayedColorOptions.id = k;
                break;
            }
        }
    }

    return dotNetSymbolUtilsGetDisplayedColorOptions;
}

