// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetSupportingWidgetDefaultsFeatureForm } from './supportingWidgetDefaultsFeatureForm';

export async function buildJsSupportingWidgetDefaultsFeatureFormGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsSupportingWidgetDefaultsFeatureForm: any = {};

    if (hasValue(dotNetObject.groupDisplay)) {
        jsSupportingWidgetDefaultsFeatureForm.groupDisplay = dotNetObject.groupDisplay;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSupportingWidgetDefaultsFeatureForm);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSupportingWidgetDefaultsFeatureForm;
    
    return jsSupportingWidgetDefaultsFeatureForm;
}


export async function buildDotNetSupportingWidgetDefaultsFeatureFormGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSupportingWidgetDefaultsFeatureForm: any = {};
    
    if (hasValue(jsObject.groupDisplay)) {
        dotNetSupportingWidgetDefaultsFeatureForm.groupDisplay = jsObject.groupDisplay;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSupportingWidgetDefaultsFeatureForm.id = geoBlazorId;
    }

    return dotNetSupportingWidgetDefaultsFeatureForm;
}

