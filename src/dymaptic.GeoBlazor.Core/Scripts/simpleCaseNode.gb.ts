// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSimpleCaseNode } from './simpleCaseNode';

export async function buildJsSimpleCaseNodeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSimpleCaseNode: any = {};
    if (hasValue(dotNetObject.clauses)) {
        let { buildJsWhenNode } = await import('./whenNode');
        jsSimpleCaseNode.clauses = await Promise.all(dotNetObject.clauses.map(async i => await buildJsWhenNode(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.else)) {
        jsSimpleCaseNode.else = dotNetObject.else;
    }
    if (hasValue(dotNetObject.format)) {
        jsSimpleCaseNode.format = dotNetObject.format;
    }
    if (hasValue(dotNetObject.operand)) {
        jsSimpleCaseNode.operand = dotNetObject.operand;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSimpleCaseNode);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSimpleCaseNode;
    
    return jsSimpleCaseNode;
}


export async function buildDotNetSimpleCaseNodeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSimpleCaseNode: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.clauses)) {
        let { buildDotNetWhenNode } = await import('./whenNode');
        dotNetSimpleCaseNode.clauses = await Promise.all(jsObject.clauses.map(async i => await buildDotNetWhenNode(i)));
    }
    if (hasValue(jsObject.else)) {
        dotNetSimpleCaseNode.else = jsObject.else;
    }
    if (hasValue(jsObject.format)) {
        dotNetSimpleCaseNode.format = jsObject.format;
    }
    if (hasValue(jsObject.operand)) {
        dotNetSimpleCaseNode.operand = jsObject.operand;
    }
    if (hasValue(jsObject.type)) {
        dotNetSimpleCaseNode.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSimpleCaseNode.id = k;
                break;
            }
        }
    }

    return dotNetSimpleCaseNode;
}

