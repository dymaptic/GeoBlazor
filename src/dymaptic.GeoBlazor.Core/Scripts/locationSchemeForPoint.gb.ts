// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetLocationSchemeForPoint } from './locationSchemeForPoint';

export async function buildJsLocationSchemeForPointGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsLocationSchemeForPoint: any = {}
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsLocationSchemeForPoint.color = buildJsMapColor(dotNetObject.color) as any;
    }
    if (hasValue(dotNetObject.outline)) {
        let { buildJsLocationSchemeForPointOutline } = await import('./locationSchemeForPointOutline');
        jsLocationSchemeForPoint.outline = await buildJsLocationSchemeForPointOutline(dotNetObject.outline, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.opacity)) {
        jsLocationSchemeForPoint.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.size)) {
        jsLocationSchemeForPoint.size = dotNetObject.size;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsLocationSchemeForPoint);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLocationSchemeForPoint;
    
    let dnInstantiatedObject = await buildDotNetLocationSchemeForPoint(jsLocationSchemeForPoint);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LocationSchemeForPoint', e);
    }
    
    return jsLocationSchemeForPoint;
}

export async function buildDotNetLocationSchemeForPointGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLocationSchemeForPoint: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.color)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetLocationSchemeForPoint.color = buildDotNetMapColor(jsObject.color);
        }
        if (hasValue(jsObject.outline)) {
            let { buildDotNetLocationSchemeForPointOutline } = await import('./locationSchemeForPointOutline');
            dotNetLocationSchemeForPoint.outline = await buildDotNetLocationSchemeForPointOutline(jsObject.outline);
        }
    if (hasValue(jsObject.opacity)) {
        dotNetLocationSchemeForPoint.opacity = jsObject.opacity;
    }
    if (hasValue(jsObject.size)) {
        dotNetLocationSchemeForPoint.size = jsObject.size;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLocationSchemeForPoint.id = k;
                break;
            }
        }
    }

    return dotNetLocationSchemeForPoint;
}

