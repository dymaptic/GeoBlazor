// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import BasemapGalleryItem from '@arcgis/core/widgets/BasemapGallery/support/BasemapGalleryItem';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class BasemapGalleryItemGenerated implements IPropertyWrapper {
    public component: BasemapGalleryItem;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: BasemapGalleryItem) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getBasemap(): Promise<any> {
        if (!hasValue(this.component.basemap)) {
            return null;
        }
        
        let { buildDotNetBasemap } = await import('./basemap');
        return await buildDotNetBasemap(this.component.basemap);
    }
    async setBasemap(value: any): Promise<void> {
        let { buildJsBasemap } = await import('./basemap');
        this.component.basemap = await  buildJsBasemap(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsBasemapGalleryItemGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsBasemapGalleryItem = new BasemapGalleryItem();
    if (hasValue(dotNetObject.basemap)) {
        let { buildJsBasemap } = await import('./basemap');
        jsBasemapGalleryItem.basemap = await buildJsBasemap(dotNetObject.basemap, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.view)) {
        jsBasemapGalleryItem.view = dotNetObject.view;
    }
    let { default: BasemapGalleryItemWrapper } = await import('./basemapGalleryItem');
    let basemapGalleryItemWrapper = new BasemapGalleryItemWrapper(jsBasemapGalleryItem);
    basemapGalleryItemWrapper.geoBlazorId = dotNetObject.id;
    basemapGalleryItemWrapper.viewId = viewId;
    basemapGalleryItemWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(basemapGalleryItemWrapper);
    jsObjectRefs[dotNetObject.id] = basemapGalleryItemWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsBasemapGalleryItem;
    
    let { buildDotNetBasemapGalleryItem } = await import('./basemapGalleryItem');
    let dnInstantiatedObject = await buildDotNetBasemapGalleryItem(jsBasemapGalleryItem, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BasemapGalleryItem', e);
    }
    
    return jsBasemapGalleryItem;
}

export async function buildDotNetBasemapGalleryItemGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBasemapGalleryItem: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.basemap)) {
            let { buildDotNetBasemap } = await import('./basemap');
            dotNetBasemapGalleryItem.basemap = await buildDotNetBasemap(jsObject.basemap);
        }
        if (hasValue(jsObject.error)) {
            dotNetBasemapGalleryItem.error = jsObject.error;
        }
        if (hasValue(jsObject.state)) {
            dotNetBasemapGalleryItem.state = jsObject.state;
        }
        if (hasValue(jsObject.view)) {
            dotNetBasemapGalleryItem.view = jsObject.view;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetBasemapGalleryItem.id = k;
                break;
            }
        }
    }

    return dotNetBasemapGalleryItem;
}

