// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import BasemapGalleryItem from '@arcgis/core/widgets/BasemapGallery/support/BasemapGalleryItem';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetBasemapGalleryItem } from './basemapGalleryItem';

export async function buildJsBasemapGalleryItemGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.basemap)) {
        let { buildJsBasemap } = await import('./basemap');
        properties.basemap = await buildJsBasemap(dotNetObject.basemap, layerId, viewId) as any;
    }

    let jsBasemapGalleryItem = new BasemapGalleryItem(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsBasemapGalleryItem);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsBasemapGalleryItem;
    
    let { buildDotNetBasemapGalleryItem } = await import('./basemapGalleryItem');
    let dnInstantiatedObject = await buildDotNetBasemapGalleryItem(jsBasemapGalleryItem);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type BasemapGalleryItem detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BasemapGalleryItem', e);
    }
    
    return jsBasemapGalleryItem;
}


export async function buildDotNetBasemapGalleryItemGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBasemapGalleryItem: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.basemap)) {
        let { buildDotNetBasemap } = await import('./basemap');
        dotNetBasemapGalleryItem.basemap = await buildDotNetBasemap(jsObject.basemap);
    }
    if (hasValue(jsObject.error)) {
        dotNetBasemapGalleryItem.error = jsObject.error;
    }
    if (hasValue(jsObject.state)) {
        dotNetBasemapGalleryItem.state = jsObject.state;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetBasemapGalleryItem.id = geoBlazorId;
    }

    return dotNetBasemapGalleryItem;
}

