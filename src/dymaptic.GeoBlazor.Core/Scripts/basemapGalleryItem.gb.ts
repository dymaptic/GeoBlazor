// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import BasemapGalleryItem from '@arcgis/core/widgets/BasemapGallery/support/BasemapGalleryItem';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetBasemapGalleryItem } from './basemapGalleryItem';

export async function buildJsBasemapGalleryItemGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.basemap)) {
        let { buildJsBasemap } = await import('./basemap');
        properties.basemap = await buildJsBasemap(dotNetObject.basemap, layerId, viewId) as any;
    }

    let jsBasemapGalleryItem = new BasemapGalleryItem(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsBasemapGalleryItem);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsBasemapGalleryItem;
    
    let dnInstantiatedObject = await buildDotNetBasemapGalleryItem(jsBasemapGalleryItem);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BasemapGalleryItem', e);
    }
    
    return jsBasemapGalleryItem;
}

export async function buildDotNetBasemapGalleryItemGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBasemapGalleryItem: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.basemap)) {
            let { buildDotNetBasemap } = await import('./basemap');
            dotNetBasemapGalleryItem.basemap = await buildDotNetBasemap(jsObject.basemap);
        }
    if (hasValue(jsObject.error)) {
        dotNetBasemapGalleryItem.error = jsObject.error;
    }
    if (hasValue(jsObject.state)) {
        dotNetBasemapGalleryItem.state = jsObject.state;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetBasemapGalleryItem.id = k;
                break;
            }
        }
    }

    return dotNetBasemapGalleryItem;
}

