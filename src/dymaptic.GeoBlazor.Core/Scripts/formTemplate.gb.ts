// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import FormTemplate from '@arcgis/core/form/FormTemplate';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FormTemplateGenerated implements IPropertyWrapper {
    public component: FormTemplate;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: FormTemplate) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getExpressionInfos(): Promise<any> {
        let { buildDotNetExpressionInfo } = await import('./expressionInfo');
        return this.component.expressionInfos.map(i => buildDotNetExpressionInfo(i));
    }
    
    async setExpressionInfos(value: any): Promise<void> {
        let { buildJsExpressionInfo } = await import('./expressionInfo');
        this.component.expressionInfos = value.map(async i => await buildJsExpressionInfo(i));
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsFormTemplateGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFormTemplate = new FormTemplate();
    if (hasValue(dotNetObject.elements)) {
        jsFormTemplate.elements = dotNetObject.formElement;
    }
    if (hasValue(dotNetObject.expressionInfos)) {
        let { buildJsExpressionInfo } = await import('./jsBuilder');
        jsFormTemplate.expressionInfos = dotNetObject.expressionInfos.map(async i => await buildJsExpressionInfo(i)) as any;
    }

    if (hasValue(dotNetObject.description)) {
        jsFormTemplate.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.preserveFieldValuesWhenHidden)) {
        jsFormTemplate.preserveFieldValuesWhenHidden = dotNetObject.preserveFieldValuesWhenHidden;
    }
    if (hasValue(dotNetObject.title)) {
        jsFormTemplate.title = dotNetObject.title;
    }
    let { default: FormTemplateWrapper } = await import('./formTemplate');
    let formTemplateWrapper = new FormTemplateWrapper(jsFormTemplate);
    formTemplateWrapper.geoBlazorId = dotNetObject.id;
    formTemplateWrapper.viewId = viewId;
    formTemplateWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(formTemplateWrapper);
    jsObjectRefs[dotNetObject.id] = formTemplateWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsFormTemplate;
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FormTemplate', e);
    }
    
    return jsFormTemplate;
}

export async function buildDotNetFormTemplateGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFormTemplate: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetFormTemplate.elements = jsObject.elements;
        if (hasValue(jsObject.expressionInfos)) {
            let { buildDotNetExpressionInfo } = await import('./dotNetBuilder');
            dotNetFormTemplate.expressionInfos = jsObject.expressionInfos.map(i => buildDotNetExpressionInfo(i));
        }
        if (hasValue(jsObject.description)) {
            dotNetFormTemplate.description = jsObject.description;
        }
        if (hasValue(jsObject.preserveFieldValuesWhenHidden)) {
            dotNetFormTemplate.preserveFieldValuesWhenHidden = jsObject.preserveFieldValuesWhenHidden;
        }
        if (hasValue(jsObject.title)) {
            dotNetFormTemplate.title = jsObject.title;
        }

    return dotNetFormTemplate;
}

