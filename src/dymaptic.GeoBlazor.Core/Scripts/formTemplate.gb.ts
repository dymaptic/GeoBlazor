import {buildDotNetFormTemplate} from './formTemplate';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import FormTemplate from '@arcgis/core/form/FormTemplate';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsFormTemplateGenerated(dotNetObject: any): Promise<any> {
    let jsFormTemplate = new FormTemplate();
    if (hasValue(dotNetObject.expressionInfos)) {
        let {buildJsExpressionInfo} = await import('./expressionInfo');
        jsFormTemplate.expressionInfos = dotNetObject.expressionInfos.map(i => buildJsExpressionInfo(i)) as any;
    }

    if (hasValue(dotNetObject.description)) {
        jsFormTemplate.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.elements)) {
        const {id, dotNetComponentReference, layerId, viewId, ...sanitizedElements} = dotNetObject.elements;
        jsFormTemplate.elements = sanitizedElements;
    }
    if (hasValue(dotNetObject.preserveFieldValuesWhenHidden)) {
        jsFormTemplate.preserveFieldValuesWhenHidden = dotNetObject.preserveFieldValuesWhenHidden;
    }
    if (hasValue(dotNetObject.title)) {
        jsFormTemplate.title = dotNetObject.title;
    }

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsFormTemplate);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFormTemplate;

    let dnInstantiatedObject = await buildDotNetFormTemplate(jsFormTemplate);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FormTemplate', e);
    }

    return jsFormTemplate;
}

export async function buildDotNetFormTemplateGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetFormTemplate: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.expressionInfos)) {
        let {buildDotNetExpressionInfo} = await import('./expressionInfo');
        dotNetFormTemplate.expressionInfos = jsObject.expressionInfos.map(i => buildDotNetExpressionInfo(i));
    }
    if (hasValue(jsObject.description)) {
        dotNetFormTemplate.description = jsObject.description;
    }
    if (hasValue(jsObject.elements)) {
        dotNetFormTemplate.elements = jsObject.elements;
    }
    if (hasValue(jsObject.preserveFieldValuesWhenHidden)) {
        dotNetFormTemplate.preserveFieldValuesWhenHidden = jsObject.preserveFieldValuesWhenHidden;
    }
    if (hasValue(jsObject.title)) {
        dotNetFormTemplate.title = jsObject.title;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFormTemplate.id = k;
                break;
            }
        }
    }

    return dotNetFormTemplate;
}

