// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetVersionAdapter } from './versionAdapter';

export async function buildJsVersionAdapterGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsVersionAdapter: any = {};

    if (hasValue(dotNetObject.featureServiceUrl)) {
        jsVersionAdapter.featureServiceUrl = dotNetObject.featureServiceUrl;
    }
    if (hasValue(dotNetObject.gdbVersion)) {
        jsVersionAdapter.gdbVersion = dotNetObject.gdbVersion;
    }
    if (hasValue(dotNetObject.historicMoment)) {
        jsVersionAdapter.historicMoment = dotNetObject.historicMoment;
    }
    if (hasValue(dotNetObject.versionableItem)) {
        jsVersionAdapter.versionableItem = dotNetObject.versionableItem;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsVersionAdapter);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsVersionAdapter;
    
    let dnInstantiatedObject = await buildDotNetVersionAdapter(jsVersionAdapter);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for VersionAdapter', e);
    }
    
    return jsVersionAdapter;
}

export async function buildDotNetVersionAdapterGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVersionAdapter: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.featureServiceUrl)) {
        dotNetVersionAdapter.featureServiceUrl = jsObject.featureServiceUrl;
    }
    if (hasValue(jsObject.gdbVersion)) {
        dotNetVersionAdapter.gdbVersion = jsObject.gdbVersion;
    }
    if (hasValue(jsObject.historicMoment)) {
        dotNetVersionAdapter.historicMoment = jsObject.historicMoment;
    }
    if (hasValue(jsObject.type)) {
        dotNetVersionAdapter.type = jsObject.type;
    }
    if (hasValue(jsObject.versionableItem)) {
        dotNetVersionAdapter.versionableItem = jsObject.versionableItem;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetVersionAdapter.id = k;
                break;
            }
        }
    }

    return dotNetVersionAdapter;
}

