import { buildDotNetSizeSchemeForPoint } from './sizeSchemeForPoint';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import SizeSchemeForPoint = __esri.SizeSchemeForPoint;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsSizeSchemeForPointGenerated(dotNetObject: any): Promise<any> {
    let jsSizeSchemeForPoint: any = {}
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsSizeSchemeForPoint.color = buildJsMapColor(dotNetObject.color) as any;
    }
    if (hasValue(dotNetObject.noDataColor)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsSizeSchemeForPoint.noDataColor = buildJsMapColor(dotNetObject.noDataColor) as any;
    }
    if (hasValue(dotNetObject.outline)) {
        let { buildJsSizeSchemeForPointOutline } = await import('./sizeSchemeForPointOutline');
        jsSizeSchemeForPoint.outline = await buildJsSizeSchemeForPointOutline(dotNetObject.outline, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.maxSize)) {
        jsSizeSchemeForPoint.maxSize = dotNetObject.maxSize;
    }
    if (hasValue(dotNetObject.minSize)) {
        jsSizeSchemeForPoint.minSize = dotNetObject.minSize;
    }
    if (hasValue(dotNetObject.noDataSize)) {
        jsSizeSchemeForPoint.noDataSize = dotNetObject.noDataSize;
    }
    if (hasValue(dotNetObject.opacity)) {
        jsSizeSchemeForPoint.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.size)) {
        jsSizeSchemeForPoint.size = dotNetObject.size;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsSizeSchemeForPoint);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSizeSchemeForPoint;
    
    let dnInstantiatedObject = await buildDotNetSizeSchemeForPoint(jsSizeSchemeForPoint);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SizeSchemeForPoint', e);
    }
    
    return jsSizeSchemeForPoint;
}
export async function buildDotNetSizeSchemeForPointGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSizeSchemeForPoint: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.color)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetSizeSchemeForPoint.color = buildDotNetMapColor(jsObject.color);
        }
        if (hasValue(jsObject.noDataColor)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetSizeSchemeForPoint.noDataColor = buildDotNetMapColor(jsObject.noDataColor);
        }
        if (hasValue(jsObject.outline)) {
            let { buildDotNetSizeSchemeForPointOutline } = await import('./sizeSchemeForPointOutline');
            dotNetSizeSchemeForPoint.outline = await buildDotNetSizeSchemeForPointOutline(jsObject.outline);
        }
        if (hasValue(jsObject.maxSize)) {
            dotNetSizeSchemeForPoint.maxSize = jsObject.maxSize;
        }
        if (hasValue(jsObject.minSize)) {
            dotNetSizeSchemeForPoint.minSize = jsObject.minSize;
        }
        if (hasValue(jsObject.noDataSize)) {
            dotNetSizeSchemeForPoint.noDataSize = jsObject.noDataSize;
        }
        if (hasValue(jsObject.opacity)) {
            dotNetSizeSchemeForPoint.opacity = jsObject.opacity;
        }
        if (hasValue(jsObject.size)) {
            dotNetSizeSchemeForPoint.size = jsObject.size;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSizeSchemeForPoint.id = k;
                break;
            }
        }
    }

    return dotNetSizeSchemeForPoint;
}

