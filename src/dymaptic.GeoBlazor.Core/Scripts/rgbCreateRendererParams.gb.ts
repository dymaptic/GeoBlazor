// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetRgbCreateRendererParams } from './rgbCreateRendererParams';

export async function buildJsRgbCreateRendererParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsrgbCreateRendererParams: any = {};
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsrgbCreateRendererParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.dynamicRangeAdjustment)) {
        jsrgbCreateRendererParams.dynamicRangeAdjustment = dotNetObject.dynamicRangeAdjustment;
    }
    if (hasValue(dotNetObject.estimateStatistics)) {
        jsrgbCreateRendererParams.estimateStatistics = dotNetObject.estimateStatistics;
    }
    if (hasValue(dotNetObject.gamma)) {
        jsrgbCreateRendererParams.gamma = dotNetObject.gamma;
    }
    if (hasValue(dotNetObject.rasterFunction)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedRasterFunction } = dotNetObject.rasterFunction;
        jsrgbCreateRendererParams.rasterFunction = sanitizedRasterFunction;
    }
    if (hasValue(dotNetObject.renderingRule)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedRenderingRule } = dotNetObject.renderingRule;
        jsrgbCreateRendererParams.renderingRule = sanitizedRenderingRule;
    }
    if (hasValue(dotNetObject.rgbBandIds)) {
        jsrgbCreateRendererParams.rgbBandIds = dotNetObject.rgbBandIds;
    }
    if (hasValue(dotNetObject.signal)) {
        jsrgbCreateRendererParams.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.stretchType)) {
        jsrgbCreateRendererParams.stretchType = dotNetObject.stretchType;
    }
    if (hasValue(dotNetObject.useGamma)) {
        jsrgbCreateRendererParams.useGamma = dotNetObject.useGamma;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsrgbCreateRendererParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsrgbCreateRendererParams;
    
    let dnInstantiatedObject = await buildDotNetRgbCreateRendererParams(jsrgbCreateRendererParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RgbCreateRendererParams', e);
    }
    
    return jsrgbCreateRendererParams;
}

export async function buildDotNetRgbCreateRendererParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRgbCreateRendererParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.dynamicRangeAdjustment)) {
        dotNetRgbCreateRendererParams.dynamicRangeAdjustment = jsObject.dynamicRangeAdjustment;
    }
    if (hasValue(jsObject.estimateStatistics)) {
        dotNetRgbCreateRendererParams.estimateStatistics = jsObject.estimateStatistics;
    }
    if (hasValue(jsObject.gamma)) {
        dotNetRgbCreateRendererParams.gamma = jsObject.gamma;
    }
    if (hasValue(jsObject.rasterFunction)) {
        dotNetRgbCreateRendererParams.rasterFunction = jsObject.rasterFunction;
    }
    if (hasValue(jsObject.renderingRule)) {
        dotNetRgbCreateRendererParams.renderingRule = jsObject.renderingRule;
    }
    if (hasValue(jsObject.rgbBandIds)) {
        dotNetRgbCreateRendererParams.rgbBandIds = jsObject.rgbBandIds;
    }
    if (hasValue(jsObject.signal)) {
        dotNetRgbCreateRendererParams.signal = jsObject.signal;
    }
    if (hasValue(jsObject.stretchType)) {
        dotNetRgbCreateRendererParams.stretchType = jsObject.stretchType;
    }
    if (hasValue(jsObject.useGamma)) {
        dotNetRgbCreateRendererParams.useGamma = jsObject.useGamma;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRgbCreateRendererParams.id = k;
                break;
            }
        }
    }

    return dotNetRgbCreateRendererParams;
}

