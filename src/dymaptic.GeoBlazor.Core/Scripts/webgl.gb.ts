// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import webgl = __esri.webgl;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class WebglGenerated implements IPropertyWrapper {
    public component: webgl;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: webgl) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async fromRenderCoordinates(__0: any,
        srcCoordinates: any,
        srcStart: any,
        destCoordinates: any,
        destStart: any,
        destSpatialReference: any,
        count: any): Promise<any> {
        let { buildJsSpatialReference } = await import('./spatialReference');
        let jsDestSpatialReference = buildJsSpatialReference(destSpatialReference) as any;
        return this.component.fromRenderCoordinates(__0,
            srcCoordinates,
            srcStart,
            destCoordinates,
            destStart,
            jsDestSpatialReference,
            count);
    }

    async renderCoordinateTransformAt(__0: any,
        origin: any,
        srcSpatialReference: any,
        dest: any): Promise<any> {
        let { buildJsSpatialReference } = await import('./spatialReference');
        let jsSrcSpatialReference = buildJsSpatialReference(srcSpatialReference) as any;
        return this.component.renderCoordinateTransformAt(__0,
            origin,
            jsSrcSpatialReference,
            dest);
    }

    async toRenderCoordinates(__0: any,
        srcCoordinates: any,
        srcStart: any,
        srcSpatialReference: any,
        destCoordinates: any,
        destStart: any,
        count: any): Promise<any> {
        let { buildJsSpatialReference } = await import('./spatialReference');
        let jsSrcSpatialReference = buildJsSpatialReference(srcSpatialReference) as any;
        return this.component.toRenderCoordinates(__0,
            srcCoordinates,
            srcStart,
            jsSrcSpatialReference,
            destCoordinates,
            destStart,
            count);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsWebglGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jswebgl: any = {}


    let { default: WebglWrapper } = await import('./webgl');
    let webglWrapper = new WebglWrapper(jswebgl);
    webglWrapper.geoBlazorId = dotNetObject.id;
    webglWrapper.viewId = viewId;
    webglWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(webglWrapper);
    jsObjectRefs[dotNetObject.id] = webglWrapper;
    arcGisObjectRefs[dotNetObject.id] = jswebgl;
    let { buildDotNetWebgl } = await import('./webgl');
    let dnInstantiatedObject = await buildDotNetWebgl(jswebgl);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Webgl', e);
    }
    
    return jswebgl;
}

export async function buildDotNetWebglGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWebgl: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetWebgl.id = k;
                break;
            }
        }
    }

    return dotNetWebgl;
}

