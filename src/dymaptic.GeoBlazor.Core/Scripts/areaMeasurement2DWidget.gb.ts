// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import AreaMeasurement2D from '@arcgis/core/widgets/AreaMeasurement2D';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class AreaMeasurement2DWidgetGenerated implements IPropertyWrapper {
    public widget: AreaMeasurement2D;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: AreaMeasurement2D) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    
    // region properties
    
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetAreaMeasurement2DViewModel } = await import('./areaMeasurement2DViewModel');
        return await buildDotNetAreaMeasurement2DViewModel(this.widget.viewModel);
    }
    async setViewModel(value: any): Promise<void> {
        let { buildJsAreaMeasurement2DViewModel } = await import('./areaMeasurement2DViewModel');
        this.widget.viewModel = await  buildJsAreaMeasurement2DViewModel(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsAreaMeasurement2DWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsAreaMeasurement2D = new AreaMeasurement2D();
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsAreaMeasurement2DViewModel } = await import('./areaMeasurement2DViewModel');
        jsAreaMeasurement2D.viewModel = await buildJsAreaMeasurement2DViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.unit)) {
        jsAreaMeasurement2D.unit = dotNetObject.unit;
    }
    if (hasValue(dotNetObject.unitOptions)) {
        jsAreaMeasurement2D.unitOptions = dotNetObject.unitOptions;
    }

    let { default: AreaMeasurement2DWidgetWrapper } = await import('./areaMeasurement2DWidget');
    let areaMeasurement2DWidgetWrapper = new AreaMeasurement2DWidgetWrapper(jsAreaMeasurement2D);
    areaMeasurement2DWidgetWrapper.geoBlazorId = dotNetObject.id;
    areaMeasurement2DWidgetWrapper.viewId = viewId;
    areaMeasurement2DWidgetWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(areaMeasurement2DWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = areaMeasurement2DWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsAreaMeasurement2D;
    let { buildDotNetAreaMeasurement2DWidget } = await import('./areaMeasurement2DWidget');
    let dnInstantiatedObject = await buildDotNetAreaMeasurement2DWidget(jsAreaMeasurement2D);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for AreaMeasurement2DWidget', e);
    }
    
    return jsAreaMeasurement2D;
}

export async function buildDotNetAreaMeasurement2DWidgetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAreaMeasurement2DWidget: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.viewModel)) {
            let { buildDotNetAreaMeasurement2DViewModel } = await import('./areaMeasurement2DViewModel');
            dotNetAreaMeasurement2DWidget.viewModel = await buildDotNetAreaMeasurement2DViewModel(jsObject.viewModel);
        }
    if (hasValue(jsObject.type)) {
        dotNetAreaMeasurement2DWidget.type = jsObject.type;
    }
    if (hasValue(jsObject.unit)) {
        dotNetAreaMeasurement2DWidget.unit = jsObject.unit;
    }
    if (hasValue(jsObject.unitOptions)) {
        dotNetAreaMeasurement2DWidget.unitOptions = jsObject.unitOptions;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetAreaMeasurement2DWidget.id = k;
                break;
            }
        }
    }

    return dotNetAreaMeasurement2DWidget;
}

