// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import PrintViewModel from '@arcgis/core/widgets/Print/PrintViewModel';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PrintViewModelGenerated implements IPropertyWrapper {
    public component: PrintViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: PrintViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async load(): Promise<any> {
        return await this.component.load();
    }

    async print(template: any): Promise<any> {
        let { buildJsPrintTemplate } = await import('./printTemplate');
        let jsTemplate = await buildJsPrintTemplate(template, this.layerId, this.viewId) as any;
        return await this.component.print(jsTemplate);
    }

    // region properties
    
    async getDefaultTemplates(): Promise<any> {
        if (!hasValue(this.component.defaultTemplates)) {
            return null;
        }
        
        let { buildDotNetCustomTemplate } = await import('./customTemplate');
        return await Promise.all(this.component.defaultTemplates.map(async i => await buildDotNetCustomTemplate(i)));
    }
    
    async getPortal(): Promise<any> {
        if (!hasValue(this.component.portal)) {
            return null;
        }
        
        let { buildDotNetPortal } = await import('./portal');
        return await buildDotNetPortal(this.component.portal);
    }
    async setPortal(value: any): Promise<void> {
        let { buildJsPortal } = await import('./portal');
        this.component.portal = await  buildJsPortal(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsPrintViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPrintViewModel = new PrintViewModel();
    if (hasValue(dotNetObject.portal)) {
        let { buildJsPortal } = await import('./portal');
        jsPrintViewModel.portal = await buildJsPortal(dotNetObject.portal, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.allowedFormats)) {
        jsPrintViewModel.allowedFormats = dotNetObject.allowedFormats;
    }
    if (hasValue(dotNetObject.allowedLayouts)) {
        jsPrintViewModel.allowedLayouts = dotNetObject.allowedLayouts;
    }
    if (hasValue(dotNetObject.extraParameters)) {
        jsPrintViewModel.extraParameters = dotNetObject.extraParameters;
    }
    if (hasValue(dotNetObject.includeDefaultTemplates)) {
        jsPrintViewModel.includeDefaultTemplates = dotNetObject.includeDefaultTemplates;
    }
    if (hasValue(dotNetObject.printServiceUrl)) {
        jsPrintViewModel.printServiceUrl = dotNetObject.printServiceUrl;
    }
    if (hasValue(dotNetObject.printTimeout)) {
        jsPrintViewModel.printTimeout = dotNetObject.printTimeout;
    }
    if (hasValue(dotNetObject.showPrintAreaEnabled)) {
        jsPrintViewModel.showPrintAreaEnabled = dotNetObject.showPrintAreaEnabled;
    }
    if (hasValue(dotNetObject.templateCustomTextElements)) {
        jsPrintViewModel.templateCustomTextElements = dotNetObject.templateCustomTextElements;
    }
    if (hasValue(dotNetObject.updateDelay)) {
        jsPrintViewModel.updateDelay = dotNetObject.updateDelay;
    }
    if (hasValue(dotNetObject.view)) {
        jsPrintViewModel.view = dotNetObject.view;
    }

    let { default: PrintViewModelWrapper } = await import('./printViewModel');
    let printViewModelWrapper = new PrintViewModelWrapper(jsPrintViewModel);
    printViewModelWrapper.geoBlazorId = dotNetObject.id;
    printViewModelWrapper.viewId = viewId;
    printViewModelWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(printViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = printViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsPrintViewModel;
    let { buildDotNetPrintViewModel } = await import('./printViewModel');
    let dnInstantiatedObject = await buildDotNetPrintViewModel(jsPrintViewModel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PrintViewModel', e);
    }
    
    return jsPrintViewModel;
}
export async function buildDotNetPrintViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPrintViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.defaultTemplates)) {
            let { buildDotNetCustomTemplate } = await import('./customTemplate');
            dotNetPrintViewModel.defaultTemplates = await Promise.all(jsObject.defaultTemplates.map(async i => await buildDotNetCustomTemplate(i)));
        }
        if (hasValue(jsObject.portal)) {
            let { buildDotNetPortal } = await import('./portal');
            dotNetPrintViewModel.portal = await buildDotNetPortal(jsObject.portal);
        }
        if (hasValue(jsObject.allowedFormats)) {
            dotNetPrintViewModel.allowedFormats = jsObject.allowedFormats;
        }
        if (hasValue(jsObject.allowedLayouts)) {
            dotNetPrintViewModel.allowedLayouts = jsObject.allowedLayouts;
        }
        if (hasValue(jsObject.effectivePrintServiceUrl)) {
            dotNetPrintViewModel.effectivePrintServiceUrl = jsObject.effectivePrintServiceUrl;
        }
        if (hasValue(jsObject.effectiveTemplateCustomTextElements)) {
            dotNetPrintViewModel.effectiveTemplateCustomTextElements = jsObject.effectiveTemplateCustomTextElements;
        }
        if (hasValue(jsObject.extraParameters)) {
            dotNetPrintViewModel.extraParameters = jsObject.extraParameters;
        }
        if (hasValue(jsObject.includeDefaultTemplates)) {
            dotNetPrintViewModel.includeDefaultTemplates = jsObject.includeDefaultTemplates;
        }
        if (hasValue(jsObject.layoutTemplateInfo)) {
            dotNetPrintViewModel.layoutTemplateInfo = jsObject.layoutTemplateInfo;
        }
        if (hasValue(jsObject.layoutTemplateNorthArrowInfo)) {
            dotNetPrintViewModel.layoutTemplateNorthArrowInfo = jsObject.layoutTemplateNorthArrowInfo;
        }
        if (hasValue(jsObject.printServiceUrl)) {
            dotNetPrintViewModel.printServiceUrl = jsObject.printServiceUrl;
        }
        if (hasValue(jsObject.printTimeout)) {
            dotNetPrintViewModel.printTimeout = jsObject.printTimeout;
        }
        if (hasValue(jsObject.showPrintAreaEnabled)) {
            dotNetPrintViewModel.showPrintAreaEnabled = jsObject.showPrintAreaEnabled;
        }
        if (hasValue(jsObject.state)) {
            dotNetPrintViewModel.state = jsObject.state;
        }
        if (hasValue(jsObject.templateCustomTextElements)) {
            dotNetPrintViewModel.templateCustomTextElements = jsObject.templateCustomTextElements;
        }
        if (hasValue(jsObject.templatesInfo)) {
            dotNetPrintViewModel.templatesInfo = jsObject.templatesInfo;
        }
        if (hasValue(jsObject.updateDelay)) {
            dotNetPrintViewModel.updateDelay = jsObject.updateDelay;
        }
        if (hasValue(jsObject.view)) {
            dotNetPrintViewModel.view = jsObject.view;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPrintViewModel.id = k;
                break;
            }
        }
    }

    return dotNetPrintViewModel;
}

