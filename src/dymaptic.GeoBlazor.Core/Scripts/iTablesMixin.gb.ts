// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetITablesMixin } from './iTablesMixin';

export async function buildJsITablesMixinGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsTablesMixin: any = {};
    if (hasValue(dotNetObject.tables) && dotNetObject.tables.length > 0) {
        let { buildJsLayer } = await import('./layer');
        jsTablesMixin.tables = await Promise.all(dotNetObject.tables.map(async i => await buildJsLayer(i, layerId, viewId))) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsTablesMixin);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTablesMixin;
    
    return jsTablesMixin;
}


export async function buildDotNetITablesMixinGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetITablesMixin: any = {};
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetITablesMixin.id = geoBlazorId;
    }

    return dotNetITablesMixin;
}

