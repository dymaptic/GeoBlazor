import {buildDotNetLengthDimensionResult} from './lengthDimensionResult';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import LengthDimensionResult from '@arcgis/core/views/analysis/LengthDimensionResult';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsLengthDimensionResultGenerated(dotNetObject: any): Promise<any> {
    let jsLengthDimensionResult = new LengthDimensionResult();
    if (hasValue(dotNetObject.dimension)) {
        let {buildJsLengthDimension} = await import('./lengthDimension');
        jsLengthDimensionResult.dimension = await buildJsLengthDimension(dotNetObject.dimension, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.length)) {
        const {id, dotNetComponentReference, layerId, viewId, ...sanitizedLength} = dotNetObject.length;
        jsLengthDimensionResult.length = sanitizedLength;
    }

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsLengthDimensionResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLengthDimensionResult;

    let dnInstantiatedObject = await buildDotNetLengthDimensionResult(jsLengthDimensionResult);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LengthDimensionResult', e);
    }

    return jsLengthDimensionResult;
}

export async function buildDotNetLengthDimensionResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetLengthDimensionResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.dimension)) {
        let {buildDotNetLengthDimension} = await import('./lengthDimension');
        dotNetLengthDimensionResult.dimension = await buildDotNetLengthDimension(jsObject.dimension);
    }
    if (hasValue(jsObject.length)) {
        dotNetLengthDimensionResult.length = jsObject.length;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLengthDimensionResult.id = k;
                break;
            }
        }
    }

    return dotNetLengthDimensionResult;
}

