// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import DateBinParameters from '@arcgis/core/rest/support/DateBinParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetDateBinParameters } from './dateBinParameters';

export async function buildJsDateBinParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.interval)) {
        let { buildJsDateBinTimeInterval } = await import('./dateBinTimeInterval');
        properties.interval = await buildJsDateBinTimeInterval(dotNetObject.interval, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.offset)) {
        let { buildJsDateBinTimeInterval } = await import('./dateBinTimeInterval');
        properties.offset = await buildJsDateBinTimeInterval(dotNetObject.offset, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.splitBy)) {
        let { buildJsAttributeBinsGrouping } = await import('./attributeBinsGrouping');
        properties.splitBy = await buildJsAttributeBinsGrouping(dotNetObject.splitBy, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.stackBy)) {
        let { buildJsAttributeBinsGrouping } = await import('./attributeBinsGrouping');
        properties.stackBy = await buildJsAttributeBinsGrouping(dotNetObject.stackBy, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.end)) {
        properties.end = dotNetObject.end;
    }
    if (hasValue(dotNetObject.expression)) {
        properties.expression = dotNetObject.expression;
    }
    if (hasValue(dotNetObject.expressionValueType)) {
        properties.expressionValueType = dotNetObject.expressionValueType;
    }
    if (hasValue(dotNetObject.field)) {
        properties.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.firstDayOfWeek)) {
        properties.firstDayOfWeek = dotNetObject.firstDayOfWeek;
    }
    if (hasValue(dotNetObject.hideUpperBound)) {
        properties.hideUpperBound = dotNetObject.hideUpperBound;
    }
    if (hasValue(dotNetObject.returnFullIntervalBin)) {
        properties.returnFullIntervalBin = dotNetObject.returnFullIntervalBin;
    }
    if (hasValue(dotNetObject.snapToData)) {
        properties.snapToData = dotNetObject.snapToData;
    }
    if (hasValue(dotNetObject.start)) {
        properties.start = dotNetObject.start;
    }
    let jsDateBinParameters = new DateBinParameters(properties);
    
    jsObjectRefs[dotNetObject.id] = jsDateBinParameters;
    arcGisObjectRefs[dotNetObject.id] = jsDateBinParameters;
    
    return jsDateBinParameters;
}


export async function buildDotNetDateBinParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDateBinParameters: any = {};
    
    if (hasValue(jsObject.interval)) {
        let { buildDotNetDateBinTimeInterval } = await import('./dateBinTimeInterval');
        dotNetDateBinParameters.interval = await buildDotNetDateBinTimeInterval(jsObject.interval);
    }
    
    if (hasValue(jsObject.offset)) {
        let { buildDotNetDateBinTimeInterval } = await import('./dateBinTimeInterval');
        dotNetDateBinParameters.offset = await buildDotNetDateBinTimeInterval(jsObject.offset);
    }
    
    if (hasValue(jsObject.splitBy)) {
        let { buildDotNetAttributeBinsGrouping } = await import('./attributeBinsGrouping');
        dotNetDateBinParameters.splitBy = await buildDotNetAttributeBinsGrouping(jsObject.splitBy);
    }
    
    if (hasValue(jsObject.stackBy)) {
        let { buildDotNetAttributeBinsGrouping } = await import('./attributeBinsGrouping');
        dotNetDateBinParameters.stackBy = await buildDotNetAttributeBinsGrouping(jsObject.stackBy);
    }
    
    if (hasValue(jsObject.end)) {
        dotNetDateBinParameters.end = jsObject.end;
    }
    
    if (hasValue(jsObject.expression)) {
        dotNetDateBinParameters.expression = jsObject.expression;
    }
    
    if (hasValue(jsObject.expressionValueType)) {
        dotNetDateBinParameters.expressionValueType = removeCircularReferences(jsObject.expressionValueType);
    }
    
    if (hasValue(jsObject.field)) {
        dotNetDateBinParameters.field = jsObject.field;
    }
    
    if (hasValue(jsObject.firstDayOfWeek)) {
        dotNetDateBinParameters.firstDayOfWeek = jsObject.firstDayOfWeek;
    }
    
    if (hasValue(jsObject.hideUpperBound)) {
        dotNetDateBinParameters.hideUpperBound = jsObject.hideUpperBound;
    }
    
    if (hasValue(jsObject.returnFullIntervalBin)) {
        dotNetDateBinParameters.returnFullIntervalBin = jsObject.returnFullIntervalBin;
    }
    
    if (hasValue(jsObject.snapToData)) {
        dotNetDateBinParameters.snapToData = removeCircularReferences(jsObject.snapToData);
    }
    
    if (hasValue(jsObject.start)) {
        dotNetDateBinParameters.start = jsObject.start;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetDateBinParameters.type = removeCircularReferences(jsObject.type);
    }
    

    return dotNetDateBinParameters;
}

