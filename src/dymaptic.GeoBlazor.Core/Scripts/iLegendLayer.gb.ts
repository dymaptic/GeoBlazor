// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import LegendLayer from '@arcgis/core/rest/support/LegendLayer';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ILegendLayerGenerated implements IPropertyWrapper {
    public layer: LegendLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: LegendLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}


export async function buildJsILegendLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.layerId)) {
        properties.layerId = dotNetObject.layerId;
    }
    if (hasValue(dotNetObject.subLayerIds)) {
        properties.subLayerIds = dotNetObject.subLayerIds;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    let jsLegendLayer = new LegendLayer(properties);

    let { default: ILegendLayerWrapper } = await import('./iLegendLayer');
    let iLegendLayerWrapper = new ILegendLayerWrapper(jsLegendLayer);
    iLegendLayerWrapper.geoBlazorId = dotNetObject.id;
    iLegendLayerWrapper.viewId = viewId;
    iLegendLayerWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(iLegendLayerWrapper);
    jsObjectRefs[dotNetObject.id] = iLegendLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsLegendLayer;
    let { buildDotNetILegendLayer } = await import('./iLegendLayer');
    let dnInstantiatedObject = await buildDotNetILegendLayer(jsLegendLayer);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ILegendLayer', e);
    }
    
    return iLegendLayerWrapper;
}

export async function buildDotNetILegendLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetILegendLayer: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.layerId)) {
        dotNetILegendLayer.layerId = jsObject.layerId;
    }
    if (hasValue(jsObject.subLayerIds)) {
        dotNetILegendLayer.subLayerIds = jsObject.subLayerIds;
    }
    if (hasValue(jsObject.title)) {
        dotNetILegendLayer.title = jsObject.title;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetILegendLayer.id = k;
                break;
            }
        }
    }

    return dotNetILegendLayer;
}

