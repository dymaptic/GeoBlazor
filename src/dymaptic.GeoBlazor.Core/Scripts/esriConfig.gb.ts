// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import config from '@arcgis/core/config';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetEsriConfig } from './esriConfig';

export async function buildJsEsriConfigGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsconfig: any = {};
    if (hasValue(dotNetObject.log)) {
        let { buildJsConfigLog } = await import('./configLog');
        jsconfig.log = await buildJsConfigLog(dotNetObject.log, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.request)) {
        let { buildJsConfigRequest } = await import('./configRequest');
        jsconfig.request = await buildJsConfigRequest(dotNetObject.request, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.workers)) {
        let { buildJsConfigWorkers } = await import('./configWorkers');
        jsconfig.workers = await buildJsConfigWorkers(dotNetObject.workers, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.apiKey)) {
        jsconfig.apiKey = dotNetObject.apiKey;
    }
    if (hasValue(dotNetObject.applicationName)) {
        jsconfig.applicationName = dotNetObject.applicationName;
    }
    if (hasValue(dotNetObject.assetsPath)) {
        jsconfig.assetsPath = dotNetObject.assetsPath;
    }
    if (hasValue(dotNetObject.fontsUrl)) {
        jsconfig.fontsUrl = dotNetObject.fontsUrl;
    }
    if (hasValue(dotNetObject.geometryServiceUrl)) {
        jsconfig.geometryServiceUrl = dotNetObject.geometryServiceUrl;
    }
    if (hasValue(dotNetObject.geoRSSServiceUrl)) {
        jsconfig.geoRSSServiceUrl = dotNetObject.geoRSSServiceUrl;
    }
    if (hasValue(dotNetObject.kmlServiceUrl)) {
        jsconfig.kmlServiceUrl = dotNetObject.kmlServiceUrl;
    }
    if (hasValue(dotNetObject.portalUrl)) {
        jsconfig.portalUrl = dotNetObject.portalUrl;
    }
    if (hasValue(dotNetObject.respectPrefersReducedMotion)) {
        jsconfig.respectPrefersReducedMotion = dotNetObject.respectPrefersReducedMotion;
    }
    if (hasValue(dotNetObject.routeServiceUrl)) {
        jsconfig.routeServiceUrl = dotNetObject.routeServiceUrl;
    }
    if (hasValue(dotNetObject.userPrivilegesApplied)) {
        jsconfig.userPrivilegesApplied = dotNetObject.userPrivilegesApplied;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsconfig);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsconfig;
    
    let { buildDotNetEsriConfig } = await import('./esriConfig');
    let dnInstantiatedObject = await buildDotNetEsriConfig(jsconfig, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type EsriConfig detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for EsriConfig', e);
    }
    
    return jsconfig;
}


export async function buildDotNetEsriConfigGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetEsriConfig: any = {};
    
    if (hasValue(jsObject.log)) {
        let { buildDotNetConfigLog } = await import('./configLog');
        dotNetEsriConfig.log = await buildDotNetConfigLog(jsObject.log, layerId, viewId);
    }
    
    if (hasValue(jsObject.request)) {
        let { buildDotNetConfigRequest } = await import('./configRequest');
        dotNetEsriConfig.request = await buildDotNetConfigRequest(jsObject.request, layerId, viewId);
    }
    
    if (hasValue(jsObject.workers)) {
        let { buildDotNetConfigWorkers } = await import('./configWorkers');
        dotNetEsriConfig.workers = await buildDotNetConfigWorkers(jsObject.workers, layerId, viewId);
    }
    
    if (hasValue(jsObject.apiKey)) {
        dotNetEsriConfig.apiKey = jsObject.apiKey;
    }
    
    if (hasValue(jsObject.applicationName)) {
        dotNetEsriConfig.applicationName = jsObject.applicationName;
    }
    
    if (hasValue(jsObject.assetsPath)) {
        dotNetEsriConfig.assetsPath = jsObject.assetsPath;
    }
    
    if (hasValue(jsObject.fontsUrl)) {
        dotNetEsriConfig.fontsUrl = jsObject.fontsUrl;
    }
    
    if (hasValue(jsObject.geometryServiceUrl)) {
        dotNetEsriConfig.geometryServiceUrl = jsObject.geometryServiceUrl;
    }
    
    if (hasValue(jsObject.geoRSSServiceUrl)) {
        dotNetEsriConfig.geoRSSServiceUrl = jsObject.geoRSSServiceUrl;
    }
    
    if (hasValue(jsObject.kmlServiceUrl)) {
        dotNetEsriConfig.kmlServiceUrl = jsObject.kmlServiceUrl;
    }
    
    if (hasValue(jsObject.portalUrl)) {
        dotNetEsriConfig.portalUrl = jsObject.portalUrl;
    }
    
    if (hasValue(jsObject.respectPrefersReducedMotion)) {
        dotNetEsriConfig.respectPrefersReducedMotion = jsObject.respectPrefersReducedMotion;
    }
    
    if (hasValue(jsObject.routeServiceUrl)) {
        dotNetEsriConfig.routeServiceUrl = jsObject.routeServiceUrl;
    }
    
    if (hasValue(jsObject.userPrivilegesApplied)) {
        dotNetEsriConfig.userPrivilegesApplied = jsObject.userPrivilegesApplied;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetEsriConfig.id = geoBlazorId;
    }

    return dotNetEsriConfig;
}

