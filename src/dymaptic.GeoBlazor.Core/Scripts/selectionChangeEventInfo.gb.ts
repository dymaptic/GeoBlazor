// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetSelectionChangeEventInfo } from './selectionChangeEventInfo';
import SelectionChangeEventInfo = __esri.SelectionChangeEventInfo;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsSelectionChangeEventInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSelectionChangeEventInfo: any = {}
    if (hasValue(dotNetObject.added)) {
        let { buildJsGraphic } = await import('./graphic');
        jsSelectionChangeEventInfo.added = dotNetObject.added.map(i => buildJsGraphic(i)) as any;
    }
    if (hasValue(dotNetObject.removed)) {
        let { buildJsGraphic } = await import('./graphic');
        jsSelectionChangeEventInfo.removed = dotNetObject.removed.map(i => buildJsGraphic(i)) as any;
    }

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsSelectionChangeEventInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSelectionChangeEventInfo;
    
    let dnInstantiatedObject = await buildDotNetSelectionChangeEventInfo(jsSelectionChangeEventInfo);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SelectionChangeEventInfo', e);
    }
    
    return jsSelectionChangeEventInfo;
}

export async function buildDotNetSelectionChangeEventInfoGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSelectionChangeEventInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.added)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetSelectionChangeEventInfo.added = jsObject.added.map(i => buildDotNetGraphic(i, layerId, viewId));
        }
        if (hasValue(jsObject.removed)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetSelectionChangeEventInfo.removed = jsObject.removed.map(i => buildDotNetGraphic(i, layerId, viewId));
        }
        if (hasValue(jsObject.type)) {
            dotNetSelectionChangeEventInfo.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSelectionChangeEventInfo.id = k;
                break;
            }
        }
    }

    return dotNetSelectionChangeEventInfo;
}

