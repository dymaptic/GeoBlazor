// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetProfile } from './profile';

export async function buildJsProfileGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsProfile: any = {};
    if (hasValue(dotNetObject.variables) && dotNetObject.variables.length > 0) {
        let { buildJsIProfileVariable } = await import('./iProfileVariable');
        jsProfile.variables = dotNetObject.variables.map(i => buildJsIProfileVariable(i)) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsProfile);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsProfile;
    
    return jsProfile;
}


export async function buildDotNetProfileGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetProfile: any = {};
    
    if (hasValue(jsObject.variables)) {
        let { buildDotNetIProfileVariable } = await import('./iProfileVariable');
        dotNetProfile.variables = jsObject.variables.map(i => buildDotNetIProfileVariable(i));
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetProfile.id = geoBlazorId;
    }

    return dotNetProfile;
}

