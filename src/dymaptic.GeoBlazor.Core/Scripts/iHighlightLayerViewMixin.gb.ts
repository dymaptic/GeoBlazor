// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import HighlightLayerViewMixin from '@arcgis/core/views/layers/HighlightLayerViewMixin';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetIHighlightLayerViewMixin } from './iHighlightLayerViewMixin';

export async function buildJsIHighlightLayerViewMixinGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.highlightOptions)) {
        let { buildJsHighlightOptions } = await import('./highlightOptions');
        properties.highlightOptions = await buildJsHighlightOptions(dotNetObject.highlightOptions, layerId, viewId) as any;
    }

    let jsHighlightLayerViewMixin = new HighlightLayerViewMixin(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsHighlightLayerViewMixin);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsHighlightLayerViewMixin;
    
    let dnInstantiatedObject = await buildDotNetIHighlightLayerViewMixin(jsHighlightLayerViewMixin);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for IHighlightLayerViewMixin', e);
    }
    
    return jsHighlightLayerViewMixin;
}

export async function buildDotNetIHighlightLayerViewMixinGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIHighlightLayerViewMixin: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.highlightOptions)) {
            let { buildDotNetHighlightOptions } = await import('./highlightOptions');
            dotNetIHighlightLayerViewMixin.highlightOptions = await buildDotNetHighlightOptions(jsObject.highlightOptions);
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetIHighlightLayerViewMixin.id = k;
                break;
            }
        }
    }

    return dotNetIHighlightLayerViewMixin;
}

