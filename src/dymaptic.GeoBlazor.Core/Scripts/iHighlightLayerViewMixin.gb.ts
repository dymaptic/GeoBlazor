// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import HighlightLayerViewMixin from '@arcgis/core/views/layers/HighlightLayerViewMixin';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class IHighlightLayerViewMixinGenerated implements IPropertyWrapper {
    public component: HighlightLayerViewMixin;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: HighlightLayerViewMixin) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async highlight(target: any): Promise<any> {
        let { buildJsGraphic } = await import('./graphic');
        let jsTarget = buildJsGraphic(target) as any;
        let result = this.component.highlight(jsTarget);
        let { buildDotNetHighlightHandle } = await import('./highlightHandle');
        return await buildDotNetHighlightHandle(result);
    }

    // region properties
    
    async getHighlightOptions(): Promise<any> {
        if (!hasValue(this.component.highlightOptions)) {
            return null;
        }
        
        let { buildDotNetHighlightOptions } = await import('./highlightOptions');
        return await buildDotNetHighlightOptions(this.component.highlightOptions);
    }
    async setHighlightOptions(value: any): Promise<void> {
        let { buildJsHighlightOptions } = await import('./highlightOptions');
        this.component.highlightOptions = await  buildJsHighlightOptions(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsIHighlightLayerViewMixinGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsHighlightLayerViewMixin = new HighlightLayerViewMixin();
    if (hasValue(dotNetObject.highlightOptions)) {
        let { buildJsHighlightOptions } = await import('./highlightOptions');
        jsHighlightLayerViewMixin.highlightOptions = await buildJsHighlightOptions(dotNetObject.highlightOptions, layerId, viewId) as any;
    }


    let { default: IHighlightLayerViewMixinWrapper } = await import('./iHighlightLayerViewMixin');
    let iHighlightLayerViewMixinWrapper = new IHighlightLayerViewMixinWrapper(jsHighlightLayerViewMixin);
    iHighlightLayerViewMixinWrapper.geoBlazorId = dotNetObject.id;
    iHighlightLayerViewMixinWrapper.viewId = viewId;
    iHighlightLayerViewMixinWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(iHighlightLayerViewMixinWrapper);
    jsObjectRefs[dotNetObject.id] = iHighlightLayerViewMixinWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsHighlightLayerViewMixin;
    let { buildDotNetIHighlightLayerViewMixin } = await import('./iHighlightLayerViewMixin');
    let dnInstantiatedObject = await buildDotNetIHighlightLayerViewMixin(jsHighlightLayerViewMixin);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for IHighlightLayerViewMixin', e);
    }
    
    return jsHighlightLayerViewMixin;
}

export async function buildDotNetIHighlightLayerViewMixinGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIHighlightLayerViewMixin: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.highlightOptions)) {
            let { buildDotNetHighlightOptions } = await import('./highlightOptions');
            dotNetIHighlightLayerViewMixin.highlightOptions = await buildDotNetHighlightOptions(jsObject.highlightOptions);
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetIHighlightLayerViewMixin.id = k;
                break;
            }
        }
    }

    return dotNetIHighlightLayerViewMixin;
}

