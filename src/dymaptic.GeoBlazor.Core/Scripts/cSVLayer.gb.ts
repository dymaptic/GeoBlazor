// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import CSVLayer from '@arcgis/core/layers/CSVLayer';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CSVLayerGenerated implements IPropertyWrapper {
    public layer: CSVLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: CSVLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    async createLayerView(view: any,
        options: any): Promise<any> {
        return await this.layer.createLayerView(view,
            options);
    }

    async createPopupTemplate(options: any): Promise<any> {
        return this.layer.createPopupTemplate(options);
    }

    async createQuery(): Promise<any> {
        return this.layer.createQuery();
    }

    async fetchAttributionData(): Promise<any> {
        return await this.layer.fetchAttributionData();
    }

    async getField(fieldName: any): Promise<any> {
        return this.layer.getField(fieldName);
    }

    async getFieldDomain(fieldName: any,
        options: any): Promise<any> {
        let { buildJsCSVLayerGetFieldDomainOptions } = await import('./cSVLayerGetFieldDomainOptions');
        let jsOptions = await buildJsCSVLayerGetFieldDomainOptions(options, this.layerId, this.viewId) as any;
        return this.layer.getFieldDomain(fieldName,
            jsOptions);
    }

    async queryExtent(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.layer.queryExtent(jsQuery,
            options);
    }

    async queryFeatureCount(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.layer.queryFeatureCount(jsQuery,
            options);
    }

    async queryFeatures(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.layer.queryFeatures(jsQuery,
            options);
    }

    async queryObjectIds(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.layer.queryObjectIds(jsQuery,
            options);
    }

    async refresh(): Promise<void> {
        this.layer.refresh();
    }

    // region properties
    
    async getEffect(): Promise<any> {
        if (!hasValue(this.layer.effect)) {
            return null;
        }
        
        let { buildDotNetEffect } = await import('./effect');
        return buildDotNetEffect(this.layer.effect);
    }
    
    async setEffect(value: any): Promise<void> {
        let { buildJsEffect } = await import('./effect');
        this.layer.effect =  buildJsEffect(value);
    }
    
    async getElevationInfo(): Promise<any> {
        if (!hasValue(this.layer.elevationInfo)) {
            return null;
        }
        
        let { buildDotNetCSVLayerElevationInfo } = await import('./cSVLayerElevationInfo');
        return await buildDotNetCSVLayerElevationInfo(this.layer.elevationInfo);
    }
    
    async setElevationInfo(value: any): Promise<void> {
        let { buildJsCSVLayerElevationInfo } = await import('./cSVLayerElevationInfo');
        this.layer.elevationInfo = await  buildJsCSVLayerElevationInfo(value, this.layerId, this.viewId);
    }
    
    async getFeatureEffect(): Promise<any> {
        if (!hasValue(this.layer.featureEffect)) {
            return null;
        }
        
        let { buildDotNetFeatureEffect } = await import('./featureEffect');
        return await buildDotNetFeatureEffect(this.layer.featureEffect);
    }
    
    async setFeatureEffect(value: any): Promise<void> {
        let { buildJsFeatureEffect } = await import('./featureEffect');
        this.layer.featureEffect = await  buildJsFeatureEffect(value, this.layerId, this.viewId);
    }
    
    async getFields(): Promise<any> {
        if (!hasValue(this.layer.fields)) {
            return null;
        }
        
        let { buildDotNetField } = await import('./field');
        return this.layer.fields!.map(i => buildDotNetField(i));
    }
    
    async setFields(value: any): Promise<void> {
        let { buildJsField } = await import('./field');
        this.layer.fields = value.map(i => buildJsField(i)) as any;
    }
    
    async getFieldsIndex(): Promise<any> {
        if (!hasValue(this.layer.fieldsIndex)) {
            return null;
        }
        
        let { buildDotNetFieldsIndex } = await import('./fieldsIndex');
        return await buildDotNetFieldsIndex(this.layer.fieldsIndex);
    }
    
    async getFullExtent(): Promise<any> {
        if (!hasValue(this.layer.fullExtent)) {
            return null;
        }
        
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(this.layer.fullExtent);
    }
    
    async setFullExtent(value: any): Promise<void> {
        let { buildJsExtent } = await import('./extent');
        this.layer.fullExtent =  buildJsExtent(value);
    }
    
    async getLabelingInfo(): Promise<any> {
        if (!hasValue(this.layer.labelingInfo)) {
            return null;
        }
        
        let { buildDotNetLabel } = await import('./label');
        return await Promise.all(this.layer.labelingInfo.map(async i => await buildDotNetLabel(i)));
    }
    
    async setLabelingInfo(value: any): Promise<void> {
        let { buildJsLabel } = await import('./label');
        this.layer.labelingInfo = await Promise.all(value.map(async i => await buildJsLabel(i))) as any;
    }
    
    async getOrderBy(): Promise<any> {
        if (!hasValue(this.layer.orderBy)) {
            return null;
        }
        
        let { buildDotNetOrderedLayerOrderBy } = await import('./orderedLayerOrderBy');
        return await Promise.all(this.layer.orderBy.map(async i => await buildDotNetOrderedLayerOrderBy(i)));
    }
    
    async setOrderBy(value: any): Promise<void> {
        let { buildJsOrderedLayerOrderBy } = await import('./orderedLayerOrderBy');
        this.layer.orderBy = await Promise.all(value.map(async i => await buildJsOrderedLayerOrderBy(i, this.layerId, this.viewId))) as any;
    }
    
    async getPopupTemplate(): Promise<any> {
        if (!hasValue(this.layer.popupTemplate)) {
            return null;
        }
        
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        return await buildDotNetPopupTemplate(this.layer.popupTemplate);
    }
    
    async setPopupTemplate(value: any): Promise<void> {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        this.layer.popupTemplate =  buildJsPopupTemplate(value, this.layerId, this.viewId);
    }
    
    async getPortalItem(): Promise<any> {
        if (!hasValue(this.layer.portalItem)) {
            return null;
        }
        
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(this.layer.portalItem);
    }
    
    async setPortalItem(value: any): Promise<void> {
        let { buildJsPortalItem } = await import('./portalItem');
        this.layer.portalItem = await  buildJsPortalItem(value, this.layerId, this.viewId);
    }
    
    async getRenderer(): Promise<any> {
        if (!hasValue(this.layer.renderer)) {
            return null;
        }
        
        let { buildDotNetRenderer } = await import('./renderer');
        return await buildDotNetRenderer(this.layer.renderer);
    }
    
    async setRenderer(value: any): Promise<void> {
        let { buildJsRenderer } = await import('./renderer');
        this.layer.renderer = await  buildJsRenderer(value, this.layerId, this.viewId);
    }
    
    async getTimeExtent(): Promise<any> {
        if (!hasValue(this.layer.timeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.timeExtent);
    }
    
    async setTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.timeExtent = await  buildJsTimeExtent(value, this.layerId, this.viewId);
    }
    
    async getTimeInfo(): Promise<any> {
        if (!hasValue(this.layer.timeInfo)) {
            return null;
        }
        
        let { buildDotNetTimeInfo } = await import('./timeInfo');
        return await buildDotNetTimeInfo(this.layer.timeInfo);
    }
    
    async setTimeInfo(value: any): Promise<void> {
        let { buildJsTimeInfo } = await import('./timeInfo');
        this.layer.timeInfo = await  buildJsTimeInfo(value, this.layerId, this.viewId);
    }
    
    async getTimeOffset(): Promise<any> {
        if (!hasValue(this.layer.timeOffset)) {
            return null;
        }
        
        let { buildDotNetTimeInterval } = await import('./timeInterval');
        return await buildDotNetTimeInterval(this.layer.timeOffset);
    }
    
    async setTimeOffset(value: any): Promise<void> {
        let { buildJsTimeInterval } = await import('./timeInterval');
        this.layer.timeOffset = await  buildJsTimeInterval(value, this.layerId, this.viewId);
    }
    
    async getVisibilityTimeExtent(): Promise<any> {
        if (!hasValue(this.layer.visibilityTimeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.visibilityTimeExtent);
    }
    
    async setVisibilityTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.visibilityTimeExtent = await  buildJsTimeExtent(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}


export async function buildJsCSVLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.effect)) {
        let { buildJsEffect } = await import('./effect');
        properties.effect = buildJsEffect(dotNetObject.effect) as any;
    }
    if (hasValue(dotNetObject.elevationInfo)) {
        let { buildJsCSVLayerElevationInfo } = await import('./cSVLayerElevationInfo');
        properties.elevationInfo = await buildJsCSVLayerElevationInfo(dotNetObject.elevationInfo, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.featureEffect)) {
        let { buildJsFeatureEffect } = await import('./featureEffect');
        properties.featureEffect = await buildJsFeatureEffect(dotNetObject.featureEffect, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.fields)) {
        let { buildJsField } = await import('./field');
        properties.fields = dotNetObject.fields.map(i => buildJsField(i)) as any;
    }
    if (hasValue(dotNetObject.fullExtent)) {
        let { buildJsExtent } = await import('./extent');
        properties.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;
    }
    if (hasValue(dotNetObject.labelingInfo)) {
        let { buildJsLabel } = await import('./label');
        properties.labelingInfo = await Promise.all(dotNetObject.labelingInfo.map(async i => await buildJsLabel(i))) as any;
    }
    if (hasValue(dotNetObject.orderBy)) {
        let { buildJsOrderedLayerOrderBy } = await import('./orderedLayerOrderBy');
        properties.orderBy = await Promise.all(dotNetObject.orderBy.map(async i => await buildJsOrderedLayerOrderBy(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.popupTemplate)) {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        properties.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.portalItem)) {
        let { buildJsPortalItem } = await import('./portalItem');
        properties.portalItem = await buildJsPortalItem(dotNetObject.portalItem, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsRenderer } = await import('./renderer');
        properties.renderer = await buildJsRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.timeInfo)) {
        let { buildJsTimeInfo } = await import('./timeInfo');
        properties.timeInfo = await buildJsTimeInfo(dotNetObject.timeInfo, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.timeOffset)) {
        let { buildJsTimeInterval } = await import('./timeInterval');
        properties.timeOffset = await buildJsTimeInterval(dotNetObject.timeOffset, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.visibilityTimeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.arcGISLayerId)) {
        properties.id = dotNetObject.arcGISLayerId;
    }
    if (hasValue(dotNetObject.blendMode)) {
        properties.blendMode = dotNetObject.blendMode;
    }
    if (hasValue(dotNetObject.copyright)) {
        properties.copyright = dotNetObject.copyright;
    }
    if (hasValue(dotNetObject.customParameters)) {
        properties.customParameters = dotNetObject.customParameters;
    }
    if (hasValue(dotNetObject.definitionExpression)) {
        properties.definitionExpression = dotNetObject.definitionExpression;
    }
    if (hasValue(dotNetObject.delimiter)) {
        properties.delimiter = dotNetObject.delimiter;
    }
    if (hasValue(dotNetObject.displayField)) {
        properties.displayField = dotNetObject.displayField;
    }
    if (hasValue(dotNetObject.featureReduction)) {
        properties.featureReduction = dotNetObject.featureReduction;
    }
    if (hasValue(dotNetObject.geometryType)) {
        properties.geometryType = dotNetObject.geometryType;
    }
    if (hasValue(dotNetObject.labelsVisible)) {
        properties.labelsVisible = dotNetObject.labelsVisible;
    }
    if (hasValue(dotNetObject.latitudeField)) {
        properties.latitudeField = dotNetObject.latitudeField;
    }
    if (hasValue(dotNetObject.legendEnabled)) {
        properties.legendEnabled = dotNetObject.legendEnabled;
    }
    if (hasValue(dotNetObject.listMode)) {
        properties.listMode = dotNetObject.listMode;
    }
    if (hasValue(dotNetObject.longitudeField)) {
        properties.longitudeField = dotNetObject.longitudeField;
    }
    if (hasValue(dotNetObject.maxScale)) {
        properties.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.minScale)) {
        properties.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.objectIdField)) {
        properties.objectIdField = dotNetObject.objectIdField;
    }
    if (hasValue(dotNetObject.opacity)) {
        properties.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.outFields)) {
        properties.outFields = dotNetObject.outFields;
    }
    if (hasValue(dotNetObject.persistenceEnabled)) {
        properties.persistenceEnabled = dotNetObject.persistenceEnabled;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        properties.popupEnabled = dotNetObject.popupEnabled;
    }
    if (hasValue(dotNetObject.refreshInterval)) {
        properties.refreshInterval = dotNetObject.refreshInterval;
    }
    if (hasValue(dotNetObject.screenSizePerspectiveEnabled)) {
        properties.screenSizePerspectiveEnabled = dotNetObject.screenSizePerspectiveEnabled;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        const { id, dotNetComponentReference, ...sanitizedSpatialReference } = dotNetObject.spatialReference;
        properties.spatialReference = sanitizedSpatialReference;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.url)) {
        properties.url = dotNetObject.url;
    }
    if (hasValue(dotNetObject.useViewTime)) {
        properties.useViewTime = dotNetObject.useViewTime;
    }
    let jsCSVLayer = new CSVLayer(properties);
    jsCSVLayer.on('layerview-create', async (evt: any) => {
        let { buildDotNetLayerViewCreateEvent } = await import('./layerViewCreateEvent');
        let dnEvent = await buildDotNetLayerViewCreateEvent(evt);
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreate', dnEvent);
    });
    
    jsCSVLayer.on('layerview-create-error', async (evt: any) => {
        let { buildDotNetLayerViewCreateErrorEvent } = await import('./layerViewCreateErrorEvent');
        let dnEvent = await buildDotNetLayerViewCreateErrorEvent(evt);
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreateError', dnEvent);
    });
    
    jsCSVLayer.on('layerview-destroy', async (evt: any) => {
        let { buildDotNetLayerViewDestroyEvent } = await import('./layerViewDestroyEvent');
        let dnEvent = await buildDotNetLayerViewDestroyEvent(evt);
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsDestroy', dnEvent);
    });
    
    jsCSVLayer.on('refresh', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsRefresh', evt);
    });
    

    let { default: CSVLayerWrapper } = await import('./cSVLayer');
    let cSVLayerWrapper = new CSVLayerWrapper(jsCSVLayer);
    cSVLayerWrapper.geoBlazorId = dotNetObject.id;
    cSVLayerWrapper.viewId = viewId;
    cSVLayerWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(cSVLayerWrapper);
    jsObjectRefs[dotNetObject.id] = cSVLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsCSVLayer;
    
    let { buildDotNetCSVLayer } = await import('./cSVLayer');
    let dnInstantiatedObject = await buildDotNetCSVLayer(jsCSVLayer);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type CSVLayer detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CSVLayer', e);
    }
    
    return jsCSVLayer;
}


export async function buildDotNetCSVLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCSVLayer: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.effect)) {
        let { buildDotNetEffect } = await import('./effect');
        dotNetCSVLayer.effect = buildDotNetEffect(jsObject.effect);
    }
    if (hasValue(jsObject.elevationInfo)) {
        let { buildDotNetCSVLayerElevationInfo } = await import('./cSVLayerElevationInfo');
        dotNetCSVLayer.elevationInfo = await buildDotNetCSVLayerElevationInfo(jsObject.elevationInfo);
    }
    if (hasValue(jsObject.featureEffect)) {
        let { buildDotNetFeatureEffect } = await import('./featureEffect');
        dotNetCSVLayer.featureEffect = await buildDotNetFeatureEffect(jsObject.featureEffect);
    }
    if (hasValue(jsObject.fields)) {
        let { buildDotNetField } = await import('./field');
        dotNetCSVLayer.fields = jsObject.fields.map(i => buildDotNetField(i));
    }
    if (hasValue(jsObject.fieldsIndex)) {
        let { buildDotNetFieldsIndex } = await import('./fieldsIndex');
        dotNetCSVLayer.fieldsIndex = await buildDotNetFieldsIndex(jsObject.fieldsIndex);
    }
    if (hasValue(jsObject.fullExtent)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetCSVLayer.fullExtent = buildDotNetExtent(jsObject.fullExtent);
    }
    if (hasValue(jsObject.labelingInfo)) {
        let { buildDotNetLabel } = await import('./label');
        dotNetCSVLayer.labelingInfo = await Promise.all(jsObject.labelingInfo.map(async i => await buildDotNetLabel(i)));
    }
    if (hasValue(jsObject.orderBy)) {
        let { buildDotNetOrderedLayerOrderBy } = await import('./orderedLayerOrderBy');
        dotNetCSVLayer.orderBy = await Promise.all(jsObject.orderBy.map(async i => await buildDotNetOrderedLayerOrderBy(i)));
    }
    if (hasValue(jsObject.popupTemplate)) {
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        dotNetCSVLayer.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
    }
    if (hasValue(jsObject.portalItem)) {
        let { buildDotNetPortalItem } = await import('./portalItem');
        dotNetCSVLayer.portalItem = await buildDotNetPortalItem(jsObject.portalItem);
    }
    if (hasValue(jsObject.renderer)) {
        let { buildDotNetRenderer } = await import('./renderer');
        dotNetCSVLayer.renderer = await buildDotNetRenderer(jsObject.renderer);
    }
    if (hasValue(jsObject.timeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetCSVLayer.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
    }
    if (hasValue(jsObject.timeInfo)) {
        let { buildDotNetTimeInfo } = await import('./timeInfo');
        dotNetCSVLayer.timeInfo = await buildDotNetTimeInfo(jsObject.timeInfo);
    }
    if (hasValue(jsObject.timeOffset)) {
        let { buildDotNetTimeInterval } = await import('./timeInterval');
        dotNetCSVLayer.timeOffset = await buildDotNetTimeInterval(jsObject.timeOffset);
    }
    if (hasValue(jsObject.visibilityTimeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetCSVLayer.visibilityTimeExtent = buildDotNetTimeExtent(jsObject.visibilityTimeExtent);
    }
    if (hasValue(jsObject.id)) {
        dotNetCSVLayer.arcGISLayerId = jsObject.id;
    }
    if (hasValue(jsObject.blendMode)) {
        dotNetCSVLayer.blendMode = jsObject.blendMode;
    }
    if (hasValue(jsObject.capabilities)) {
        dotNetCSVLayer.capabilities = jsObject.capabilities;
    }
    if (hasValue(jsObject.copyright)) {
        dotNetCSVLayer.copyright = jsObject.copyright;
    }
    if (hasValue(jsObject.customParameters)) {
        dotNetCSVLayer.customParameters = jsObject.customParameters;
    }
    if (hasValue(jsObject.dateFieldsTimeZone)) {
        dotNetCSVLayer.dateFieldsTimeZone = jsObject.dateFieldsTimeZone;
    }
    if (hasValue(jsObject.definitionExpression)) {
        dotNetCSVLayer.definitionExpression = jsObject.definitionExpression;
    }
    if (hasValue(jsObject.delimiter)) {
        dotNetCSVLayer.delimiter = jsObject.delimiter;
    }
    if (hasValue(jsObject.displayField)) {
        dotNetCSVLayer.displayField = jsObject.displayField;
    }
    if (hasValue(jsObject.featureReduction)) {
        dotNetCSVLayer.featureReduction = jsObject.featureReduction;
    }
    if (hasValue(jsObject.geometryType)) {
        dotNetCSVLayer.geometryType = jsObject.geometryType;
    }
    if (hasValue(jsObject.isTable)) {
        dotNetCSVLayer.isTable = jsObject.isTable;
    }
    if (hasValue(jsObject.labelsVisible)) {
        dotNetCSVLayer.labelsVisible = jsObject.labelsVisible;
    }
    if (hasValue(jsObject.latitudeField)) {
        dotNetCSVLayer.latitudeField = jsObject.latitudeField;
    }
    if (hasValue(jsObject.legendEnabled)) {
        dotNetCSVLayer.legendEnabled = jsObject.legendEnabled;
    }
    if (hasValue(jsObject.listMode)) {
        dotNetCSVLayer.listMode = jsObject.listMode;
    }
    if (hasValue(jsObject.loaded)) {
        dotNetCSVLayer.loaded = jsObject.loaded;
    }
    if (hasValue(jsObject.longitudeField)) {
        dotNetCSVLayer.longitudeField = jsObject.longitudeField;
    }
    if (hasValue(jsObject.maxScale)) {
        dotNetCSVLayer.maxScale = jsObject.maxScale;
    }
    if (hasValue(jsObject.minScale)) {
        dotNetCSVLayer.minScale = jsObject.minScale;
    }
    if (hasValue(jsObject.objectIdField)) {
        dotNetCSVLayer.objectIdField = jsObject.objectIdField;
    }
    if (hasValue(jsObject.opacity)) {
        dotNetCSVLayer.opacity = jsObject.opacity;
    }
    if (hasValue(jsObject.outFields)) {
        dotNetCSVLayer.outFields = jsObject.outFields;
    }
    if (hasValue(jsObject.persistenceEnabled)) {
        dotNetCSVLayer.persistenceEnabled = jsObject.persistenceEnabled;
    }
    if (hasValue(jsObject.popupEnabled)) {
        dotNetCSVLayer.popupEnabled = jsObject.popupEnabled;
    }
    if (hasValue(jsObject.refreshInterval)) {
        dotNetCSVLayer.refreshInterval = jsObject.refreshInterval;
    }
    if (hasValue(jsObject.screenSizePerspectiveEnabled)) {
        dotNetCSVLayer.screenSizePerspectiveEnabled = jsObject.screenSizePerspectiveEnabled;
    }
    if (hasValue(jsObject.spatialReference)) {
        dotNetCSVLayer.spatialReference = jsObject.spatialReference;
    }
    if (hasValue(jsObject.title)) {
        dotNetCSVLayer.title = jsObject.title;
    }
    if (hasValue(jsObject.type)) {
        dotNetCSVLayer.type = jsObject.type;
    }
    if (hasValue(jsObject.url)) {
        dotNetCSVLayer.url = jsObject.url;
    }
    if (hasValue(jsObject.useViewTime)) {
        dotNetCSVLayer.useViewTime = jsObject.useViewTime;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCSVLayer.id = k;
                break;
            }
        }
    }

    return dotNetCSVLayer;
}

