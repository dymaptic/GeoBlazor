// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';

export async function buildJsGeoJSONLayerApplyEditsEditsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsGeoJSONLayerApplyEditsEdits: any = {};
    if (hasValue(dotNetObject.addFeatures) && dotNetObject.addFeatures.length > 0) {
        let { buildJsGraphic } = await import('./graphic');
        jsGeoJSONLayerApplyEditsEdits.addFeatures = dotNetObject.addFeatures.map(i => buildJsGraphic(i)) as any;
    }
    if (hasValue(dotNetObject.graphicCollectionDeleteFeatures) && dotNetObject.graphicCollectionDeleteFeatures.length > 0) {
        let { buildJsGraphic } = await import('./graphic');
        jsGeoJSONLayerApplyEditsEdits.deleteFeatures = dotNetObject.graphicCollectionDeleteFeatures.map(i => buildJsGraphic(i)) as any;
    }
    else if (hasValue(dotNetObject.stringCollectionDeleteFeatures) && dotNetObject.stringCollectionDeleteFeatures.length > 0) {
        jsGeoJSONLayerApplyEditsEdits.deleteFeatures = dotNetObject.stringCollectionDeleteFeatures;
    }
    if (hasValue(dotNetObject.updateFeatures) && dotNetObject.updateFeatures.length > 0) {
        let { buildJsGraphic } = await import('./graphic');
        jsGeoJSONLayerApplyEditsEdits.updateFeatures = dotNetObject.updateFeatures.map(i => buildJsGraphic(i)) as any;
    }

    
    jsObjectRefs[dotNetObject.id] = jsGeoJSONLayerApplyEditsEdits;
    arcGisObjectRefs[dotNetObject.id] = jsGeoJSONLayerApplyEditsEdits;
    
    return jsGeoJSONLayerApplyEditsEdits;
}


export async function buildDotNetGeoJSONLayerApplyEditsEditsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGeoJSONLayerApplyEditsEdits: any = {};
    
    if (hasValue(jsObject.addFeatures)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetGeoJSONLayerApplyEditsEdits.addFeatures = jsObject.addFeatures.map(i => buildDotNetGraphic(i, layerId, viewId));
    }
    
    if (hasValue(jsObject.deleteFeatures)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetGeoJSONLayerApplyEditsEdits.deleteFeatures = jsObject.deleteFeatures.map(i => buildDotNetGraphic(i, layerId, viewId));
    }
    
    if (hasValue(jsObject.updateFeatures)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetGeoJSONLayerApplyEditsEdits.updateFeatures = jsObject.updateFeatures.map(i => buildDotNetGraphic(i, layerId, viewId));
    }
    

    return dotNetGeoJSONLayerApplyEditsEdits;
}

