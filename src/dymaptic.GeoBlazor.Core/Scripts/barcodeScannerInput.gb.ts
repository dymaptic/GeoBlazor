// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import BarcodeScannerInput from '@arcgis/core/form/elements/inputs/BarcodeScannerInput';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetBarcodeScannerInput } from './barcodeScannerInput';

export async function buildJsBarcodeScannerInputGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.maxLength)) {
        properties.maxLength = dotNetObject.maxLength;
    }
    if (hasValue(dotNetObject.maxLength)) {
        properties.maxLength = dotNetObject.maxLength;
    }
    if (hasValue(dotNetObject.minLength)) {
        properties.minLength = dotNetObject.minLength;
    }
    if (hasValue(dotNetObject.minLength)) {
        properties.minLength = dotNetObject.minLength;
    }
    let jsBarcodeScannerInput = new BarcodeScannerInput(properties);
    
    jsObjectRefs[dotNetObject.id] = jsBarcodeScannerInput;
    arcGisObjectRefs[dotNetObject.id] = jsBarcodeScannerInput;
    
    return jsBarcodeScannerInput;
}


export async function buildDotNetBarcodeScannerInputGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBarcodeScannerInput: any = {};
    
    if (hasValue(jsObject.maxLength)) {
        dotNetBarcodeScannerInput.maxLength = jsObject.maxLength;
    }
    
    if (hasValue(jsObject.maxLength)) {
        dotNetBarcodeScannerInput.maxLength = jsObject.maxLength;
    }
    
    if (hasValue(jsObject.minLength)) {
        dotNetBarcodeScannerInput.minLength = jsObject.minLength;
    }
    
    if (hasValue(jsObject.minLength)) {
        dotNetBarcodeScannerInput.minLength = jsObject.minLength;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetBarcodeScannerInput.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetBarcodeScannerInput.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetBarcodeScannerInput.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetBarcodeScannerInput.id)) {
        jsObjectRefs[dotNetBarcodeScannerInput.id] ??= jsObject;
        arcGisObjectRefs[dotNetBarcodeScannerInput.id] ??= jsObject;
    }

    return dotNetBarcodeScannerInput;
}

