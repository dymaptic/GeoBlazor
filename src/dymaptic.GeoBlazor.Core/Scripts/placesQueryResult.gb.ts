// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import PlacesQueryResult from '@arcgis/core/rest/support/PlacesQueryResult';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetPlacesQueryResult } from './placesQueryResult';

export async function buildJsPlacesQueryResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPlacesQueryResult = new PlacesQueryResult();
    if (hasValue(dotNetObject.nextQueryParams)) {
        let { buildJsPlacesQueryParameters } = await import('./placesQueryParameters');
        jsPlacesQueryResult.nextQueryParams = await buildJsPlacesQueryParameters(dotNetObject.nextQueryParams, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.previousQueryParams)) {
        let { buildJsPlacesQueryParameters } = await import('./placesQueryParameters');
        jsPlacesQueryResult.previousQueryParams = await buildJsPlacesQueryParameters(dotNetObject.previousQueryParams, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.results)) {
        let { buildJsPlaceResult } = await import('./placeResult');
        jsPlacesQueryResult.results = await Promise.all(dotNetObject.results.map(async i => await buildJsPlaceResult(i, layerId, viewId))) as any;
    }

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsPlacesQueryResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPlacesQueryResult;
    
    let dnInstantiatedObject = await buildDotNetPlacesQueryResult(jsPlacesQueryResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PlacesQueryResult', e);
    }
    
    return jsPlacesQueryResult;
}

export async function buildDotNetPlacesQueryResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPlacesQueryResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.nextQueryParams)) {
            let { buildDotNetPlacesQueryParameters } = await import('./placesQueryParameters');
            dotNetPlacesQueryResult.nextQueryParams = await buildDotNetPlacesQueryParameters(jsObject.nextQueryParams);
        }
        if (hasValue(jsObject.previousQueryParams)) {
            let { buildDotNetPlacesQueryParameters } = await import('./placesQueryParameters');
            dotNetPlacesQueryResult.previousQueryParams = await buildDotNetPlacesQueryParameters(jsObject.previousQueryParams);
        }
        if (hasValue(jsObject.results)) {
            let { buildDotNetPlaceResult } = await import('./placeResult');
            dotNetPlacesQueryResult.results = await Promise.all(jsObject.results.map(async i => await buildDotNetPlaceResult(i)));
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPlacesQueryResult.id = k;
                break;
            }
        }
    }

    return dotNetPlacesQueryResult;
}

