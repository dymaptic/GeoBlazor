// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCIMGradientStroke } from './cIMGradientStroke';

export async function buildJsCIMGradientStrokeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCIMGradientStroke: any = {};
    if (hasValue(dotNetObject.effects)) {
        let { buildJsICIMGeometricEffectType } = await import('./iCIMGeometricEffectType');
        jsCIMGradientStroke.effects = dotNetObject.effects.map(i => buildJsICIMGeometricEffectType(i)) as any;
    }

    if (hasValue(dotNetObject.capStyle)) {
        jsCIMGradientStroke.capStyle = dotNetObject.capStyle;
    }
    if (hasValue(dotNetObject.closeCaps3D)) {
        jsCIMGradientStroke.closeCaps3D = dotNetObject.closeCaps3D;
    }
    if (hasValue(dotNetObject.colorLocked)) {
        jsCIMGradientStroke.colorLocked = dotNetObject.colorLocked;
    }
    if (hasValue(dotNetObject.colorRamp)) {
        jsCIMGradientStroke.colorRamp = dotNetObject.colorRamp;
    }
    if (hasValue(dotNetObject.enable)) {
        jsCIMGradientStroke.enable = dotNetObject.enable;
    }
    if (hasValue(dotNetObject.gradientMethod)) {
        jsCIMGradientStroke.gradientMethod = dotNetObject.gradientMethod;
    }
    if (hasValue(dotNetObject.gradientSize)) {
        jsCIMGradientStroke.gradientSize = dotNetObject.gradientSize;
    }
    if (hasValue(dotNetObject.gradientSizeUnits)) {
        jsCIMGradientStroke.gradientSizeUnits = dotNetObject.gradientSizeUnits;
    }
    if (hasValue(dotNetObject.gradientType)) {
        jsCIMGradientStroke.gradientType = dotNetObject.gradientType;
    }
    if (hasValue(dotNetObject.interval)) {
        jsCIMGradientStroke.interval = dotNetObject.interval;
    }
    if (hasValue(dotNetObject.joinStyle)) {
        jsCIMGradientStroke.joinStyle = dotNetObject.joinStyle;
    }
    if (hasValue(dotNetObject.lineStyle3D)) {
        jsCIMGradientStroke.lineStyle3D = dotNetObject.lineStyle3D;
    }
    if (hasValue(dotNetObject.miterLimit)) {
        jsCIMGradientStroke.miterLimit = dotNetObject.miterLimit;
    }
    if (hasValue(dotNetObject.name)) {
        jsCIMGradientStroke.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.overprint)) {
        jsCIMGradientStroke.overprint = dotNetObject.overprint;
    }
    if (hasValue(dotNetObject.primitiveName)) {
        jsCIMGradientStroke.primitiveName = dotNetObject.primitiveName;
    }
    if (hasValue(dotNetObject.width)) {
        jsCIMGradientStroke.width = dotNetObject.width;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCIMGradientStroke);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCIMGradientStroke;
    
    let { buildDotNetCIMGradientStroke } = await import('./cIMGradientStroke');
    let dnInstantiatedObject = await buildDotNetCIMGradientStroke(jsCIMGradientStroke);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type CIMGradientStroke detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CIMGradientStroke', e);
    }
    
    return jsCIMGradientStroke;
}


export async function buildDotNetCIMGradientStrokeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCIMGradientStroke: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.effects)) {
        let { buildDotNetICIMGeometricEffectType } = await import('./iCIMGeometricEffectType');
        dotNetCIMGradientStroke.effects = jsObject.effects.map(i => buildDotNetICIMGeometricEffectType(i));
    }
    if (hasValue(jsObject.capStyle)) {
        dotNetCIMGradientStroke.capStyle = jsObject.capStyle;
    }
    if (hasValue(jsObject.closeCaps3D)) {
        dotNetCIMGradientStroke.closeCaps3D = jsObject.closeCaps3D;
    }
    if (hasValue(jsObject.colorLocked)) {
        dotNetCIMGradientStroke.colorLocked = jsObject.colorLocked;
    }
    if (hasValue(jsObject.colorRamp)) {
        dotNetCIMGradientStroke.colorRamp = jsObject.colorRamp;
    }
    if (hasValue(jsObject.enable)) {
        dotNetCIMGradientStroke.enable = jsObject.enable;
    }
    if (hasValue(jsObject.gradientMethod)) {
        dotNetCIMGradientStroke.gradientMethod = jsObject.gradientMethod;
    }
    if (hasValue(jsObject.gradientSize)) {
        dotNetCIMGradientStroke.gradientSize = jsObject.gradientSize;
    }
    if (hasValue(jsObject.gradientSizeUnits)) {
        dotNetCIMGradientStroke.gradientSizeUnits = jsObject.gradientSizeUnits;
    }
    if (hasValue(jsObject.gradientType)) {
        dotNetCIMGradientStroke.gradientType = jsObject.gradientType;
    }
    if (hasValue(jsObject.interval)) {
        dotNetCIMGradientStroke.interval = jsObject.interval;
    }
    if (hasValue(jsObject.joinStyle)) {
        dotNetCIMGradientStroke.joinStyle = jsObject.joinStyle;
    }
    if (hasValue(jsObject.lineStyle3D)) {
        dotNetCIMGradientStroke.lineStyle3D = jsObject.lineStyle3D;
    }
    if (hasValue(jsObject.miterLimit)) {
        dotNetCIMGradientStroke.miterLimit = jsObject.miterLimit;
    }
    if (hasValue(jsObject.name)) {
        dotNetCIMGradientStroke.name = jsObject.name;
    }
    if (hasValue(jsObject.overprint)) {
        dotNetCIMGradientStroke.overprint = jsObject.overprint;
    }
    if (hasValue(jsObject.primitiveName)) {
        dotNetCIMGradientStroke.primitiveName = jsObject.primitiveName;
    }
    if (hasValue(jsObject.type)) {
        dotNetCIMGradientStroke.type = jsObject.type;
    }
    if (hasValue(jsObject.width)) {
        dotNetCIMGradientStroke.width = jsObject.width;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCIMGradientStroke.id = geoBlazorId;
    }

    return dotNetCIMGradientStroke;
}

