// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetPieChartScheme } from './pieChartScheme';

export async function buildJsPieChartSchemeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPieChartScheme: any = {};
    if (hasValue(dotNetObject.colorForOthersCategory)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsPieChartScheme.colorForOthersCategory = buildJsMapColor(dotNetObject.colorForOthersCategory) as any;
    }
    if (hasValue(dotNetObject.colors)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsPieChartScheme.colors = dotNetObject.colors.map(i => buildJsMapColor(i)) as any;
    }
    if (hasValue(dotNetObject.outline)) {
        let { buildJsPieChartSchemeOutline } = await import('./pieChartSchemeOutline');
        jsPieChartScheme.outline = await buildJsPieChartSchemeOutline(dotNetObject.outline, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.name)) {
        jsPieChartScheme.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.size)) {
        jsPieChartScheme.size = dotNetObject.size;
    }
    if (hasValue(dotNetObject.sizeScheme)) {
        jsPieChartScheme.sizeScheme = dotNetObject.sizeScheme;
    }
    if (hasValue(dotNetObject.tags)) {
        jsPieChartScheme.tags = dotNetObject.tags;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsPieChartScheme);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPieChartScheme;
    
    let dnInstantiatedObject = await buildDotNetPieChartScheme(jsPieChartScheme);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PieChartScheme', e);
    }
    
    return jsPieChartScheme;
}

export async function buildDotNetPieChartSchemeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPieChartScheme: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.colorForOthersCategory)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetPieChartScheme.colorForOthersCategory = buildDotNetMapColor(jsObject.colorForOthersCategory);
        }
        if (hasValue(jsObject.colors)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetPieChartScheme.colors = jsObject.colors.map(i => buildDotNetMapColor(i));
        }
        if (hasValue(jsObject.outline)) {
            let { buildDotNetPieChartSchemeOutline } = await import('./pieChartSchemeOutline');
            dotNetPieChartScheme.outline = await buildDotNetPieChartSchemeOutline(jsObject.outline);
        }
    if (hasValue(jsObject.name)) {
        dotNetPieChartScheme.name = jsObject.name;
    }
    if (hasValue(jsObject.size)) {
        dotNetPieChartScheme.size = jsObject.size;
    }
    if (hasValue(jsObject.sizeScheme)) {
        dotNetPieChartScheme.sizeScheme = jsObject.sizeScheme;
    }
    if (hasValue(jsObject.tags)) {
        dotNetPieChartScheme.tags = jsObject.tags;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPieChartScheme.id = k;
                break;
            }
        }
    }

    return dotNetPieChartScheme;
}

