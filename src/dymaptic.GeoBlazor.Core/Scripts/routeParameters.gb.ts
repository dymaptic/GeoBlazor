// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import RouteParameters from '@arcgis/core/rest/support/RouteParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetRouteParameters } from './routeParameters';

export async function buildJsRouteParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.outSpatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        properties.outSpatialReference = buildJsSpatialReference(dotNetObject.outSpatialReference) as any;
    }
    if (hasValue(dotNetObject.pointBarrierCollectionPointBarriers)) {
        let { buildJsPointBarrier } = await import('./pointBarrier');
        properties.pointBarriers = await Promise.all(dotNetObject.pointBarrierCollectionPointBarriers.map(async i => await buildJsPointBarrier(i, layerId, viewId))) as any;
    }
    else if (hasValue(dotNetObject.dataLayerPointBarriers)) {
        let { buildJsDataLayer } = await import('./pointBarrier');
        properties.pointBarriers = await Promise.all(dotNetObject.dataLayerPointBarriers.map(async i => await buildJsDataLayer(i, layerId, viewId))) as any;
    }
    else if (hasValue(dotNetObject.featureSetPointBarriers)) {
        let { buildJsFeatureSet } = await import('./pointBarrier');
        properties.pointBarriers = dotNetObject.featureSetPointBarriers.map(i => buildJsFeatureSet(i)) as any;
    }
    else if (hasValue(dotNetObject.networkFeatureSetPointBarriers)) {
        properties.pointBarriers = dotNetObject.pointBarrier;
    }
    if (hasValue(dotNetObject.polygonBarrierCollectionPolygonBarriers)) {
        let { buildJsPolygonBarrier } = await import('./polygonBarrier');
        properties.polygonBarriers = await Promise.all(dotNetObject.polygonBarrierCollectionPolygonBarriers.map(async i => await buildJsPolygonBarrier(i, layerId, viewId))) as any;
    }
    else if (hasValue(dotNetObject.dataLayerPolygonBarriers)) {
        let { buildJsDataLayer } = await import('./polygonBarrier');
        properties.polygonBarriers = await Promise.all(dotNetObject.dataLayerPolygonBarriers.map(async i => await buildJsDataLayer(i, layerId, viewId))) as any;
    }
    else if (hasValue(dotNetObject.featureSetPolygonBarriers)) {
        let { buildJsFeatureSet } = await import('./polygonBarrier');
        properties.polygonBarriers = dotNetObject.featureSetPolygonBarriers.map(i => buildJsFeatureSet(i)) as any;
    }
    else if (hasValue(dotNetObject.networkFeatureSetPolygonBarriers)) {
        properties.polygonBarriers = dotNetObject.polygonBarrier;
    }
    if (hasValue(dotNetObject.polylineBarrierCollectionPolylineBarriers)) {
        let { buildJsPolylineBarrier } = await import('./polylineBarrier');
        properties.polylineBarriers = await Promise.all(dotNetObject.polylineBarrierCollectionPolylineBarriers.map(async i => await buildJsPolylineBarrier(i, layerId, viewId))) as any;
    }
    else if (hasValue(dotNetObject.dataLayerPolylineBarriers)) {
        let { buildJsDataLayer } = await import('./polylineBarrier');
        properties.polylineBarriers = await Promise.all(dotNetObject.dataLayerPolylineBarriers.map(async i => await buildJsDataLayer(i, layerId, viewId))) as any;
    }
    else if (hasValue(dotNetObject.featureSetPolylineBarriers)) {
        let { buildJsFeatureSet } = await import('./polylineBarrier');
        properties.polylineBarriers = dotNetObject.featureSetPolylineBarriers.map(i => buildJsFeatureSet(i)) as any;
    }
    else if (hasValue(dotNetObject.networkFeatureSetPolylineBarriers)) {
        properties.polylineBarriers = dotNetObject.polylineBarrier;
    }
    if (hasValue(dotNetObject.stopCollectionStops)) {
        let { buildJsStop } = await import('./stop');
        properties.stops = await Promise.all(dotNetObject.stopCollectionStops.map(async i => await buildJsStop(i, layerId, viewId))) as any;
    }
    else if (hasValue(dotNetObject.dataLayerStops)) {
        let { buildJsDataLayer } = await import('./stop');
        properties.stops = await Promise.all(dotNetObject.dataLayerStops.map(async i => await buildJsDataLayer(i, layerId, viewId))) as any;
    }
    else if (hasValue(dotNetObject.featureSetStops)) {
        let { buildJsFeatureSet } = await import('./stop');
        properties.stops = dotNetObject.featureSetStops.map(i => buildJsFeatureSet(i)) as any;
    }
    else if (hasValue(dotNetObject.networkFeatureSetStops)) {
        properties.stops = dotNetObject.stop;
    }

    if (hasValue(dotNetObject.accumulateAttributes)) {
        properties.accumulateAttributes = dotNetObject.accumulateAttributes;
    }
    if (hasValue(dotNetObject.apiKey)) {
        properties.apiKey = dotNetObject.apiKey;
    }
    if (hasValue(dotNetObject.attributeParameterValues)) {
        properties.attributeParameterValues = dotNetObject.attributeParameterValues;
    }
    if (hasValue(dotNetObject.directionsLanguage)) {
        properties.directionsLanguage = dotNetObject.directionsLanguage;
    }
    if (hasValue(dotNetObject.directionsLengthUnits)) {
        properties.directionsLengthUnits = dotNetObject.directionsLengthUnits;
    }
    if (hasValue(dotNetObject.directionsOutputType)) {
        properties.directionsOutputType = dotNetObject.directionsOutputType;
    }
    if (hasValue(dotNetObject.directionsStyleName)) {
        properties.directionsStyleName = dotNetObject.directionsStyleName;
    }
    if (hasValue(dotNetObject.directionsTimeAttribute)) {
        properties.directionsTimeAttribute = dotNetObject.directionsTimeAttribute;
    }
    if (hasValue(dotNetObject.findBestSequence)) {
        properties.findBestSequence = dotNetObject.findBestSequence;
    }
    if (hasValue(dotNetObject.geometryPrecision)) {
        properties.geometryPrecision = dotNetObject.geometryPrecision;
    }
    if (hasValue(dotNetObject.geometryPrecisionM)) {
        properties.geometryPrecisionM = dotNetObject.geometryPrecisionM;
    }
    if (hasValue(dotNetObject.geometryPrecisionZ)) {
        properties.geometryPrecisionZ = dotNetObject.geometryPrecisionZ;
    }
    if (hasValue(dotNetObject.ignoreInvalidLocations)) {
        properties.ignoreInvalidLocations = dotNetObject.ignoreInvalidLocations;
    }
    if (hasValue(dotNetObject.impedanceAttribute)) {
        properties.impedanceAttribute = dotNetObject.impedanceAttribute;
    }
    if (hasValue(dotNetObject.outputGeometryPrecision)) {
        properties.outputGeometryPrecision = dotNetObject.outputGeometryPrecision;
    }
    if (hasValue(dotNetObject.outputGeometryPrecisionUnits)) {
        properties.outputGeometryPrecisionUnits = dotNetObject.outputGeometryPrecisionUnits;
    }
    if (hasValue(dotNetObject.outputLines)) {
        properties.outputLines = dotNetObject.outputLines;
    }
    if (hasValue(dotNetObject.overrides)) {
        properties.overrides = dotNetObject.overrides;
    }
    if (hasValue(dotNetObject.preserveFirstStop)) {
        properties.preserveFirstStop = dotNetObject.preserveFirstStop;
    }
    if (hasValue(dotNetObject.preserveLastStop)) {
        properties.preserveLastStop = dotNetObject.preserveLastStop;
    }
    if (hasValue(dotNetObject.preserveObjectID)) {
        properties.preserveObjectID = dotNetObject.preserveObjectID;
    }
    if (hasValue(dotNetObject.restrictionAttributes)) {
        properties.restrictionAttributes = dotNetObject.restrictionAttributes;
    }
    if (hasValue(dotNetObject.restrictUTurns)) {
        properties.restrictUTurns = dotNetObject.restrictUTurns;
    }
    if (hasValue(dotNetObject.returnBarriers)) {
        properties.returnBarriers = dotNetObject.returnBarriers;
    }
    if (hasValue(dotNetObject.returnDirections)) {
        properties.returnDirections = dotNetObject.returnDirections;
    }
    if (hasValue(dotNetObject.returnPolygonBarriers)) {
        properties.returnPolygonBarriers = dotNetObject.returnPolygonBarriers;
    }
    if (hasValue(dotNetObject.returnPolylineBarriers)) {
        properties.returnPolylineBarriers = dotNetObject.returnPolylineBarriers;
    }
    if (hasValue(dotNetObject.returnRoutes)) {
        properties.returnRoutes = dotNetObject.returnRoutes;
    }
    if (hasValue(dotNetObject.returnStops)) {
        properties.returnStops = dotNetObject.returnStops;
    }
    if (hasValue(dotNetObject.returnTraversedEdges)) {
        properties.returnTraversedEdges = dotNetObject.returnTraversedEdges;
    }
    if (hasValue(dotNetObject.returnTraversedJunctions)) {
        properties.returnTraversedJunctions = dotNetObject.returnTraversedJunctions;
    }
    if (hasValue(dotNetObject.returnTraversedTurns)) {
        properties.returnTraversedTurns = dotNetObject.returnTraversedTurns;
    }
    if (hasValue(dotNetObject.returnZ)) {
        properties.returnZ = dotNetObject.returnZ;
    }
    if (hasValue(dotNetObject.startTime)) {
        properties.startTime = dotNetObject.startTime;
    }
    if (hasValue(dotNetObject.startTimeIsUTC)) {
        properties.startTimeIsUTC = dotNetObject.startTimeIsUTC;
    }
    if (hasValue(dotNetObject.timeWindowsAreUTC)) {
        properties.timeWindowsAreUTC = dotNetObject.timeWindowsAreUTC;
    }
    if (hasValue(dotNetObject.travelMode)) {
        properties.travelMode = dotNetObject.travelMode;
    }
    if (hasValue(dotNetObject.useHierarchy)) {
        properties.useHierarchy = dotNetObject.useHierarchy;
    }
    if (hasValue(dotNetObject.useTimeWindows)) {
        properties.useTimeWindows = dotNetObject.useTimeWindows;
    }
    let jsRouteParameters = new RouteParameters(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsRouteParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRouteParameters;
    
    let dnInstantiatedObject = await buildDotNetRouteParameters(jsRouteParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RouteParameters', e);
    }
    
    return jsRouteParameters;
}

export async function buildDotNetRouteParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRouteParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.outSpatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetRouteParameters.outSpatialReference = buildDotNetSpatialReference(jsObject.outSpatialReference);
        }
        if (hasValue(jsObject.pointBarriers)) {
            let { buildDotNetPointBarrier } = await import('./pointBarrier');
            dotNetRouteParameters.pointBarriers = await Promise.all(jsObject.pointBarriers.map(async i => await buildDotNetPointBarrier(i)));
        }
        if (hasValue(jsObject.polygonBarriers)) {
            let { buildDotNetPolygonBarrier } = await import('./polygonBarrier');
            dotNetRouteParameters.polygonBarriers = await Promise.all(jsObject.polygonBarriers.map(async i => await buildDotNetPolygonBarrier(i)));
        }
        if (hasValue(jsObject.polylineBarriers)) {
            let { buildDotNetPolylineBarrier } = await import('./polylineBarrier');
            dotNetRouteParameters.polylineBarriers = await Promise.all(jsObject.polylineBarriers.map(async i => await buildDotNetPolylineBarrier(i)));
        }
        if (hasValue(jsObject.stops)) {
            let { buildDotNetStop } = await import('./stop');
            dotNetRouteParameters.stops = await Promise.all(jsObject.stops.map(async i => await buildDotNetStop(i)));
        }
    if (hasValue(jsObject.accumulateAttributes)) {
        dotNetRouteParameters.accumulateAttributes = jsObject.accumulateAttributes;
    }
    if (hasValue(jsObject.apiKey)) {
        dotNetRouteParameters.apiKey = jsObject.apiKey;
    }
    if (hasValue(jsObject.attributeParameterValues)) {
        dotNetRouteParameters.attributeParameterValues = jsObject.attributeParameterValues;
    }
    if (hasValue(jsObject.directionsLanguage)) {
        dotNetRouteParameters.directionsLanguage = jsObject.directionsLanguage;
    }
    if (hasValue(jsObject.directionsLengthUnits)) {
        dotNetRouteParameters.directionsLengthUnits = jsObject.directionsLengthUnits;
    }
    if (hasValue(jsObject.directionsOutputType)) {
        dotNetRouteParameters.directionsOutputType = jsObject.directionsOutputType;
    }
    if (hasValue(jsObject.directionsStyleName)) {
        dotNetRouteParameters.directionsStyleName = jsObject.directionsStyleName;
    }
    if (hasValue(jsObject.directionsTimeAttribute)) {
        dotNetRouteParameters.directionsTimeAttribute = jsObject.directionsTimeAttribute;
    }
    if (hasValue(jsObject.findBestSequence)) {
        dotNetRouteParameters.findBestSequence = jsObject.findBestSequence;
    }
    if (hasValue(jsObject.geometryPrecision)) {
        dotNetRouteParameters.geometryPrecision = jsObject.geometryPrecision;
    }
    if (hasValue(jsObject.geometryPrecisionM)) {
        dotNetRouteParameters.geometryPrecisionM = jsObject.geometryPrecisionM;
    }
    if (hasValue(jsObject.geometryPrecisionZ)) {
        dotNetRouteParameters.geometryPrecisionZ = jsObject.geometryPrecisionZ;
    }
    if (hasValue(jsObject.ignoreInvalidLocations)) {
        dotNetRouteParameters.ignoreInvalidLocations = jsObject.ignoreInvalidLocations;
    }
    if (hasValue(jsObject.impedanceAttribute)) {
        dotNetRouteParameters.impedanceAttribute = jsObject.impedanceAttribute;
    }
    if (hasValue(jsObject.outputGeometryPrecision)) {
        dotNetRouteParameters.outputGeometryPrecision = jsObject.outputGeometryPrecision;
    }
    if (hasValue(jsObject.outputGeometryPrecisionUnits)) {
        dotNetRouteParameters.outputGeometryPrecisionUnits = jsObject.outputGeometryPrecisionUnits;
    }
    if (hasValue(jsObject.outputLines)) {
        dotNetRouteParameters.outputLines = jsObject.outputLines;
    }
    if (hasValue(jsObject.overrides)) {
        dotNetRouteParameters.overrides = jsObject.overrides;
    }
    if (hasValue(jsObject.preserveFirstStop)) {
        dotNetRouteParameters.preserveFirstStop = jsObject.preserveFirstStop;
    }
    if (hasValue(jsObject.preserveLastStop)) {
        dotNetRouteParameters.preserveLastStop = jsObject.preserveLastStop;
    }
    if (hasValue(jsObject.preserveObjectID)) {
        dotNetRouteParameters.preserveObjectID = jsObject.preserveObjectID;
    }
    if (hasValue(jsObject.restrictionAttributes)) {
        dotNetRouteParameters.restrictionAttributes = jsObject.restrictionAttributes;
    }
    if (hasValue(jsObject.restrictUTurns)) {
        dotNetRouteParameters.restrictUTurns = jsObject.restrictUTurns;
    }
    if (hasValue(jsObject.returnBarriers)) {
        dotNetRouteParameters.returnBarriers = jsObject.returnBarriers;
    }
    if (hasValue(jsObject.returnDirections)) {
        dotNetRouteParameters.returnDirections = jsObject.returnDirections;
    }
    if (hasValue(jsObject.returnPolygonBarriers)) {
        dotNetRouteParameters.returnPolygonBarriers = jsObject.returnPolygonBarriers;
    }
    if (hasValue(jsObject.returnPolylineBarriers)) {
        dotNetRouteParameters.returnPolylineBarriers = jsObject.returnPolylineBarriers;
    }
    if (hasValue(jsObject.returnRoutes)) {
        dotNetRouteParameters.returnRoutes = jsObject.returnRoutes;
    }
    if (hasValue(jsObject.returnStops)) {
        dotNetRouteParameters.returnStops = jsObject.returnStops;
    }
    if (hasValue(jsObject.returnTraversedEdges)) {
        dotNetRouteParameters.returnTraversedEdges = jsObject.returnTraversedEdges;
    }
    if (hasValue(jsObject.returnTraversedJunctions)) {
        dotNetRouteParameters.returnTraversedJunctions = jsObject.returnTraversedJunctions;
    }
    if (hasValue(jsObject.returnTraversedTurns)) {
        dotNetRouteParameters.returnTraversedTurns = jsObject.returnTraversedTurns;
    }
    if (hasValue(jsObject.returnZ)) {
        dotNetRouteParameters.returnZ = jsObject.returnZ;
    }
    if (hasValue(jsObject.startTime)) {
        dotNetRouteParameters.startTime = jsObject.startTime;
    }
    if (hasValue(jsObject.startTimeIsUTC)) {
        dotNetRouteParameters.startTimeIsUTC = jsObject.startTimeIsUTC;
    }
    if (hasValue(jsObject.timeWindowsAreUTC)) {
        dotNetRouteParameters.timeWindowsAreUTC = jsObject.timeWindowsAreUTC;
    }
    if (hasValue(jsObject.travelMode)) {
        dotNetRouteParameters.travelMode = jsObject.travelMode;
    }
    if (hasValue(jsObject.useHierarchy)) {
        dotNetRouteParameters.useHierarchy = jsObject.useHierarchy;
    }
    if (hasValue(jsObject.useTimeWindows)) {
        dotNetRouteParameters.useTimeWindows = jsObject.useTimeWindows;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRouteParameters.id = k;
                break;
            }
        }
    }

    return dotNetRouteParameters;
}

