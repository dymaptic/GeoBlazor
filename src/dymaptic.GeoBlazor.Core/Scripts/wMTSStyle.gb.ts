// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import WMTSStyle from '@arcgis/core/layers/support/WMTSStyle';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetWMTSStyle } from './wMTSStyle';

export async function buildJsWMTSStyleGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.description)) {
        properties.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.legendUrl)) {
        properties.legendUrl = dotNetObject.legendUrl;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.wMTSStyleId)) {
        properties.id = dotNetObject.wMTSStyleId;
    }
    let jsWMTSStyle = new WMTSStyle(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsWMTSStyle);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsWMTSStyle;
    
    let { buildDotNetWMTSStyle } = await import('./wMTSStyle');
    let dnInstantiatedObject = await buildDotNetWMTSStyle(jsWMTSStyle, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type WMTSStyle detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for WMTSStyle', e);
    }
    
    return jsWMTSStyle;
}


export async function buildDotNetWMTSStyleGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWMTSStyle: any = {};
    
    if (hasValue(jsObject.description)) {
        dotNetWMTSStyle.description = jsObject.description;
    }
    
    if (hasValue(jsObject.legendUrl)) {
        dotNetWMTSStyle.legendUrl = jsObject.legendUrl;
    }
    
    if (hasValue(jsObject.title)) {
        dotNetWMTSStyle.title = jsObject.title;
    }
    
    if (hasValue(jsObject.id)) {
        dotNetWMTSStyle.wMTSStyleId = jsObject.id;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetWMTSStyle.id = geoBlazorId;
    }

    return dotNetWMTSStyle;
}

