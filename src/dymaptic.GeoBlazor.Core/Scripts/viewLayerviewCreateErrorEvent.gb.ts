// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetViewLayerviewCreateErrorEvent } from './viewLayerviewCreateErrorEvent';

export async function buildJsViewLayerviewCreateErrorEventGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsViewLayerviewCreateErrorEvent: any = {};
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsViewLayerviewCreateErrorEvent.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.error)) {
        jsViewLayerviewCreateErrorEvent.error = dotNetObject.error;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsViewLayerviewCreateErrorEvent);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsViewLayerviewCreateErrorEvent;
    
    return jsViewLayerviewCreateErrorEvent;
}


export async function buildDotNetViewLayerviewCreateErrorEventGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetViewLayerviewCreateErrorEvent: any = {};
    
    if (hasValue(jsObject.error)) {
        dotNetViewLayerviewCreateErrorEvent.error = jsObject.error;
    }
    

    return dotNetViewLayerviewCreateErrorEvent;
}

