// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import AttachmentsContent from '@arcgis/core/popup/content/AttachmentsContent';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class AttachmentsPopupContentGenerated implements IPropertyWrapper {
    public component: AttachmentsContent;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: AttachmentsContent) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsAttachmentsPopupContentGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsAttachmentsContent = new AttachmentsContent();

    if (hasValue(dotNetObject.description)) {
        jsAttachmentsContent.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.displayType)) {
        jsAttachmentsContent.displayType = dotNetObject.displayType;
    }
    if (hasValue(dotNetObject.title)) {
        jsAttachmentsContent.title = dotNetObject.title;
    }
    let { default: AttachmentsPopupContentWrapper } = await import('./attachmentsPopupContent');
    let attachmentsPopupContentWrapper = new AttachmentsPopupContentWrapper(jsAttachmentsContent);
    attachmentsPopupContentWrapper.geoBlazorId = dotNetObject.id;
    attachmentsPopupContentWrapper.viewId = viewId;
    attachmentsPopupContentWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(attachmentsPopupContentWrapper);
    jsObjectRefs[dotNetObject.id] = attachmentsPopupContentWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsAttachmentsContent;
    
    let dnInstantiatedObject = await buildDotNetAttachmentsPopupContent(jsAttachmentsContent);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for AttachmentsPopupContent', e);
    }
    
    return jsAttachmentsContent;
}

export async function buildDotNetAttachmentsPopupContentGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAttachmentsPopupContent: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.description)) {
            dotNetAttachmentsPopupContent.description = jsObject.description;
        }
        if (hasValue(jsObject.displayType)) {
            dotNetAttachmentsPopupContent.displayType = jsObject.displayType;
        }
        if (hasValue(jsObject.title)) {
            dotNetAttachmentsPopupContent.title = jsObject.title;
        }
        if (hasValue(jsObject.type)) {
            dotNetAttachmentsPopupContent.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetAttachmentsPopupContent.id = k;
                break;
            }
        }
    }

    return dotNetAttachmentsPopupContent;
}

