import { buildDotNetRasterShadedReliefResult } from './rasterShadedReliefResult';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import RasterShadedReliefResult = __esri.RasterShadedReliefResult;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsRasterShadedReliefResultGenerated(dotNetObject: any): Promise<any> {
    let jsRasterShadedReliefResult: any = {}
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsRasterShadedReliefRenderer } = await import('./rasterShadedReliefRenderer');
        jsRasterShadedReliefResult.renderer = await buildJsRasterShadedReliefRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsRasterShadedReliefResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRasterShadedReliefResult;
    
    let dnInstantiatedObject = await buildDotNetRasterShadedReliefResult(jsRasterShadedReliefResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RasterShadedReliefResult', e);
    }
    
    return jsRasterShadedReliefResult;
}
export async function buildDotNetRasterShadedReliefResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRasterShadedReliefResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.renderer)) {
            let { buildDotNetRasterShadedReliefRenderer } = await import('./rasterShadedReliefRenderer');
            dotNetRasterShadedReliefResult.renderer = await buildDotNetRasterShadedReliefRenderer(jsObject.renderer);
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRasterShadedReliefResult.id = k;
                break;
            }
        }
    }

    return dotNetRasterShadedReliefResult;
}

