// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import GroupInput from '@arcgis/core/widgets/FeatureForm/GroupInput';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetGroupInput } from './groupInput';

export async function buildJsGroupInputGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsGroupInput = new GroupInput();

    if (hasValue(dotNetObject.open)) {
        jsGroupInput.open = dotNetObject.open;
    }
    if (hasValue(dotNetObject.state)) {
        jsGroupInput.state = dotNetObject.state;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsGroupInput);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsGroupInput;
    
    let dnInstantiatedObject = await buildDotNetGroupInput(jsGroupInput);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for GroupInput', e);
    }
    
    return jsGroupInput;
}

export async function buildDotNetGroupInputGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGroupInput: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.inputs)) {
            let { buildDotNetFieldInput } = await import('./fieldInput');
            dotNetGroupInput.inputs = await Promise.all(jsObject.inputs.map(async i => await buildDotNetFieldInput(i)));
        }
        if (hasValue(jsObject.description)) {
            dotNetGroupInput.description = jsObject.description;
        }
        if (hasValue(jsObject.initialState)) {
            dotNetGroupInput.initialState = jsObject.initialState;
        }
        if (hasValue(jsObject.label)) {
            dotNetGroupInput.label = jsObject.label;
        }
        if (hasValue(jsObject.open)) {
            dotNetGroupInput.open = jsObject.open;
        }
        if (hasValue(jsObject.state)) {
            dotNetGroupInput.state = jsObject.state;
        }
        if (hasValue(jsObject.type)) {
            dotNetGroupInput.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetGroupInput.id = k;
                break;
            }
        }
    }

    return dotNetGroupInput;
}

