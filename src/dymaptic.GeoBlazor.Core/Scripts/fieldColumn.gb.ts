// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import FieldColumn from '@arcgis/core/widgets/FeatureTable/FieldColumn';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FieldColumnGenerated implements IPropertyWrapper {
    public component: FieldColumn;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: FieldColumn) {
        this.component = component;
    }

    // region methods

    unwrap() {
        return this.component;
    }

    async closeMenu(): Promise<void> {
        this.component.closeMenu();
    }

    async openMenu(): Promise<void> {
        this.component.openMenu();
    }

    async sort(): Promise<void> {
        this.component.sort();
    }

    // region properties

    async getField(): Promise<any> {
        if (!hasValue(this.component.field)) {
            return null;
        }

        let {buildDotNetField} = await import('./field');
        return buildDotNetField(this.component.field);
    }

    async setField(value: any): Promise<void> {
        let {buildJsField} = await import('./field');
        this.component.field = buildJsField(value);
    }

    async getLayer(): Promise<any> {
        if (!hasValue(this.component.layer)) {
            return null;
        }

        let {buildDotNetLayer} = await import('./layer');
        return await buildDotNetLayer(this.component.layer);
    }

    async setLayer(value: any): Promise<void> {
        let {buildJsLayer} = await import('./layer');
        this.component.layer = await buildJsLayer(value, this.layerId, this.viewId);
    }

    async getMenuConfig(): Promise<any> {
        if (!hasValue(this.component.menuConfig)) {
            return null;
        }

        let {buildDotNetColumnTableMenuConfig} = await import('./columnTableMenuConfig');
        return await buildDotNetColumnTableMenuConfig(this.component.menuConfig);
    }

    getProperty(prop: string): any {
        return this.component[prop];
    }

    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsFieldColumnGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFieldColumn = new FieldColumn();
    if (hasValue(dotNetObject.field)) {
        let {buildJsField} = await import('./field');
        jsFieldColumn.field = buildJsField(dotNetObject.field) as any;
    }
    if (hasValue(dotNetObject.formatFunction)) {
        jsFieldColumn.formatFunction = dotNetObject.fieldValueFormatFunction;
    }
    if (hasValue(dotNetObject.layer)) {
        let {buildJsLayer} = await import('./layer');
        jsFieldColumn.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.autoWidth)) {
        jsFieldColumn.autoWidth = dotNetObject.autoWidth;
    }
    if (hasValue(dotNetObject.direction)) {
        jsFieldColumn.direction = dotNetObject.direction;
    }
    if (hasValue(dotNetObject.editable)) {
        jsFieldColumn.editable = dotNetObject.editable;
    }
    if (hasValue(dotNetObject.effectiveLabel)) {
        jsFieldColumn.effectiveLabel = dotNetObject.effectiveLabel;
    }
    if (hasValue(dotNetObject.flexGrow)) {
        jsFieldColumn.flexGrow = dotNetObject.flexGrow;
    }
    if (hasValue(dotNetObject.icon)) {
        jsFieldColumn.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.invalid)) {
        jsFieldColumn.invalid = dotNetObject.invalid;
    }
    if (hasValue(dotNetObject.label)) {
        jsFieldColumn.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.required)) {
        jsFieldColumn.required = dotNetObject.required;
    }
    if (hasValue(dotNetObject.sortable)) {
        jsFieldColumn.sortable = dotNetObject.sortable;
    }
    if (hasValue(dotNetObject.template)) {
        jsFieldColumn.template = dotNetObject.template;
    }
    if (hasValue(dotNetObject.textAlign)) {
        jsFieldColumn.textAlign = dotNetObject.textAlign;
    }
    if (hasValue(dotNetObject.textWrap)) {
        jsFieldColumn.textWrap = dotNetObject.textWrap;
    }
    if (hasValue(dotNetObject.visibleElements)) {
        const {
            id,
            dotNetComponentReference,
            layerId,
            viewId,
            ...sanitizedVisibleElements
        } = dotNetObject.visibleElements;
        jsFieldColumn.visibleElements = sanitizedVisibleElements;
    }
    if (hasValue(dotNetObject.width)) {
        jsFieldColumn.width = dotNetObject.width;
    }

    let {default: FieldColumnWrapper} = await import('./fieldColumn');
    let fieldColumnWrapper = new FieldColumnWrapper(jsFieldColumn);
    fieldColumnWrapper.geoBlazorId = dotNetObject.id;
    fieldColumnWrapper.viewId = viewId;
    fieldColumnWrapper.layerId = layerId;

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(fieldColumnWrapper);
    jsObjectRefs[dotNetObject.id] = fieldColumnWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsFieldColumn;
    let {buildDotNetFieldColumn} = await import('./fieldColumn');
    let dnInstantiatedObject = await buildDotNetFieldColumn(jsFieldColumn);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FieldColumn', e);
    }

    return jsFieldColumn;
}

export async function buildDotNetFieldColumnGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetFieldColumn: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.field)) {
        let {buildDotNetField} = await import('./field');
        dotNetFieldColumn.field = buildDotNetField(jsObject.field);
    }
    if (hasValue(jsObject.menuConfig)) {
        let {buildDotNetColumnTableMenuConfig} = await import('./columnTableMenuConfig');
        dotNetFieldColumn.menuConfig = await buildDotNetColumnTableMenuConfig(jsObject.menuConfig);
    }
    if (hasValue(jsObject.alias)) {
        dotNetFieldColumn.alias = jsObject.alias;
    }
    if (hasValue(jsObject.autoWidth)) {
        dotNetFieldColumn.autoWidth = jsObject.autoWidth;
    }
    if (hasValue(jsObject.defaultValue)) {
        dotNetFieldColumn.defaultValue = jsObject.defaultValue;
    }
    if (hasValue(jsObject.description)) {
        dotNetFieldColumn.description = jsObject.description;
    }
    if (hasValue(jsObject.direction)) {
        dotNetFieldColumn.direction = jsObject.direction;
    }
    if (hasValue(jsObject.editable)) {
        dotNetFieldColumn.editable = jsObject.editable;
    }
    if (hasValue(jsObject.effectiveLabel)) {
        dotNetFieldColumn.effectiveLabel = jsObject.effectiveLabel;
    }
    if (hasValue(jsObject.fieldName)) {
        dotNetFieldColumn.fieldName = jsObject.fieldName;
    }
    if (hasValue(jsObject.flexGrow)) {
        dotNetFieldColumn.flexGrow = jsObject.flexGrow;
    }
    if (hasValue(jsObject.formatFunction)) {
        dotNetFieldColumn.formatFunction = jsObject.formatFunction;
    }
    if (hasValue(jsObject.frozen)) {
        dotNetFieldColumn.frozen = jsObject.frozen;
    }
    if (hasValue(jsObject.frozenToEnd)) {
        dotNetFieldColumn.frozenToEnd = jsObject.frozenToEnd;
    }
    if (hasValue(jsObject.icon)) {
        dotNetFieldColumn.icon = jsObject.icon;
    }
    if (hasValue(jsObject.initialSortPriority)) {
        dotNetFieldColumn.initialSortPriority = jsObject.initialSortPriority;
    }
    if (hasValue(jsObject.invalid)) {
        dotNetFieldColumn.invalid = jsObject.invalid;
    }
    if (hasValue(jsObject.label)) {
        dotNetFieldColumn.label = jsObject.label;
    }
    if (hasValue(jsObject.maxLength)) {
        dotNetFieldColumn.maxLength = jsObject.maxLength;
    }
    if (hasValue(jsObject.menu)) {
        dotNetFieldColumn.menu = jsObject.menu;
    }
    if (hasValue(jsObject.menuIsOpen)) {
        dotNetFieldColumn.menuIsOpen = jsObject.menuIsOpen;
    }
    if (hasValue(jsObject.menuIsVisible)) {
        dotNetFieldColumn.menuIsVisible = jsObject.menuIsVisible;
    }
    if (hasValue(jsObject.minLength)) {
        dotNetFieldColumn.minLength = jsObject.minLength;
    }
    if (hasValue(jsObject.name)) {
        dotNetFieldColumn.name = jsObject.name;
    }
    if (hasValue(jsObject.nullable)) {
        dotNetFieldColumn.nullable = jsObject.nullable;
    }
    if (hasValue(jsObject.required)) {
        dotNetFieldColumn.required = jsObject.required;
    }
    if (hasValue(jsObject.resizable)) {
        dotNetFieldColumn.resizable = jsObject.resizable;
    }
    if (hasValue(jsObject.sortable)) {
        dotNetFieldColumn.sortable = jsObject.sortable;
    }
    if (hasValue(jsObject.template)) {
        dotNetFieldColumn.template = jsObject.template;
    }
    if (hasValue(jsObject.textAlign)) {
        dotNetFieldColumn.textAlign = jsObject.textAlign;
    }
    if (hasValue(jsObject.textWrap)) {
        dotNetFieldColumn.textWrap = jsObject.textWrap;
    }
    if (hasValue(jsObject.timeZone)) {
        dotNetFieldColumn.timeZone = jsObject.timeZone;
    }
    if (hasValue(jsObject.visibleElements)) {
        dotNetFieldColumn.visibleElements = jsObject.visibleElements;
    }
    if (hasValue(jsObject.width)) {
        dotNetFieldColumn.width = jsObject.width;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFieldColumn.id = k;
                break;
            }
        }
    }

    return dotNetFieldColumn;
}

