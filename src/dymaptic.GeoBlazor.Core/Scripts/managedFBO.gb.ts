// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import ManagedFBO from '@arcgis/core/views/3d/webgl/ManagedFBO';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ManagedFBOGenerated implements IPropertyWrapper {
    public component: ManagedFBO;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ManagedFBO) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async acquireColor(attachment: any): Promise<any> {
        let result = this.component.acquireColor(attachment);
        let { buildDotNetManagedFBO } = await import('./managedFBO');
        return await buildDotNetManagedFBO(result);
    }

    async acquireDepth(): Promise<any> {
        let result = this.component.acquireDepth();
        let { buildDotNetManagedFBO } = await import('./managedFBO');
        return await buildDotNetManagedFBO(result);
    }

    async attachColor(color: any,
        attachment: any): Promise<any> {
        let { buildJsManagedColorAttachment } = await import('./managedColorAttachment');
        let jsColor = await buildJsManagedColorAttachment(color, this.layerId, this.viewId) as any;
        let result = this.component.attachColor(jsColor,
            attachment);
        let { buildDotNetManagedFBO } = await import('./managedFBO');
        return await buildDotNetManagedFBO(result);
    }

    async attachDepth(depth: any): Promise<any> {
        let { buildJsManagedDepthAttachment } = await import('./managedDepthAttachment');
        let jsDepth = await buildJsManagedDepthAttachment(depth, this.layerId, this.viewId) as any;
        let result = this.component.attachDepth(jsDepth);
        let { buildDotNetManagedFBO } = await import('./managedFBO');
        return await buildDotNetManagedFBO(result);
    }

    async getAttachment(attachment: any): Promise<any> {
        return this.component.getAttachment(attachment);
    }

    async getTexture(attachment: any): Promise<any> {
        return this.component.getTexture(attachment);
    }

    async release(): Promise<void> {
        this.component.release();
    }

    async retain(): Promise<void> {
        this.component.retain();
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsManagedFBOGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsManagedFBO = new ManagedFBO();


    let { default: ManagedFBOWrapper } = await import('./managedFBO');
    let managedFBOWrapper = new ManagedFBOWrapper(jsManagedFBO);
    managedFBOWrapper.geoBlazorId = dotNetObject.id;
    managedFBOWrapper.viewId = viewId;
    managedFBOWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(managedFBOWrapper);
    jsObjectRefs[dotNetObject.id] = managedFBOWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsManagedFBO;
    let { buildDotNetManagedFBO } = await import('./managedFBO');
    let dnInstantiatedObject = await buildDotNetManagedFBO(jsManagedFBO);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ManagedFBO', e);
    }
    
    return jsManagedFBO;
}
export async function buildDotNetManagedFBOGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetManagedFBO: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.name)) {
            dotNetManagedFBO.name = jsObject.name;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetManagedFBO.id = k;
                break;
            }
        }
    }

    return dotNetManagedFBO;
}

