// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import PointCloudLayerView from '@arcgis/core/views/layers/PointCloudLayerView';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PointCloudLayerViewGenerated implements IPropertyWrapper {
    public component: PointCloudLayerView;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: PointCloudLayerView) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async highlight(target: any): Promise<any> {
        let { buildJsGraphic } = await import('./graphic');
        let jsTarget = buildJsGraphic(target) as any;
        let result = this.component.highlight(jsTarget);
        let { buildDotNetHighlightHandle } = await import('./highlightHandle');
        return await buildDotNetHighlightHandle(result);
    }

    // region properties
    
    async getLayer(): Promise<any> {
        if (!hasValue(this.component.layer)) {
            return null;
        }
        
        let { buildDotNetLayer } = await import('./layer');
        return await buildDotNetLayer(this.component.layer);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsPointCloudLayerViewGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPointCloudLayerView = new PointCloudLayerView();


    let { default: PointCloudLayerViewWrapper } = await import('./pointCloudLayerView');
    let pointCloudLayerViewWrapper = new PointCloudLayerViewWrapper(jsPointCloudLayerView);
    pointCloudLayerViewWrapper.geoBlazorId = dotNetObject.id;
    pointCloudLayerViewWrapper.viewId = viewId;
    pointCloudLayerViewWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(pointCloudLayerViewWrapper);
    jsObjectRefs[dotNetObject.id] = pointCloudLayerViewWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsPointCloudLayerView;
    let { buildDotNetPointCloudLayerView } = await import('./pointCloudLayerView');
    let dnInstantiatedObject = await buildDotNetPointCloudLayerView(jsPointCloudLayerView);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PointCloudLayerView', e);
    }
    
    return jsPointCloudLayerView;
}
export async function buildDotNetPointCloudLayerViewGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPointCloudLayerView: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.availableFields)) {
            dotNetPointCloudLayerView.availableFields = jsObject.availableFields;
        }
        if (hasValue(jsObject.spatialReferenceSupported)) {
            dotNetPointCloudLayerView.spatialReferenceSupported = jsObject.spatialReferenceSupported;
        }
        if (hasValue(jsObject.suspended)) {
            dotNetPointCloudLayerView.suspended = jsObject.suspended;
        }
        if (hasValue(jsObject.updating)) {
            dotNetPointCloudLayerView.updating = jsObject.updating;
        }
        if (hasValue(jsObject.view)) {
            dotNetPointCloudLayerView.view = jsObject.view;
        }
        if (hasValue(jsObject.visibleAtCurrentScale)) {
            dotNetPointCloudLayerView.visibleAtCurrentScale = jsObject.visibleAtCurrentScale;
        }
        if (hasValue(jsObject.visibleAtCurrentTimeExtent)) {
            dotNetPointCloudLayerView.visibleAtCurrentTimeExtent = jsObject.visibleAtCurrentTimeExtent;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPointCloudLayerView.id = k;
                break;
            }
        }
    }

    return dotNetPointCloudLayerView;
}

