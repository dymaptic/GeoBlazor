// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import QueryMixin from '@arcgis/core/rest/support/QueryMixin';
import { arcGisObjectRefs, jsObjectRefs, hasValue, sanitize, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetIQueryMixin } from './iQueryMixin';

export async function buildJsIQueryMixinGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsGeometry } = await import('./geometry');
        properties.geometry = buildJsGeometry(dotNetObject.geometry) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent) as any;
    }

    if (hasValue(dotNetObject.cacheHint)) {
        properties.cacheHint = dotNetObject.cacheHint;
    }
    if (hasValue(dotNetObject.distance)) {
        properties.distance = dotNetObject.distance;
    }
    if (hasValue(dotNetObject.outSpatialReference)) {
        properties.outSpatialReference = sanitize(dotNetObject.outSpatialReference);
    }
    if (hasValue(dotNetObject.spatialRelationship)) {
        properties.spatialRelationship = dotNetObject.spatialRelationship;
    }
    if (hasValue(dotNetObject.units)) {
        properties.units = dotNetObject.units;
    }
    if (hasValue(dotNetObject.where)) {
        properties.where = dotNetObject.where;
    }
    let jsQueryMixin = new QueryMixin(properties);
    
    jsObjectRefs[dotNetObject.id] = jsQueryMixin;
    arcGisObjectRefs[dotNetObject.id] = jsQueryMixin;
    
    return jsQueryMixin;
}


export async function buildDotNetIQueryMixinGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIQueryMixin: any = {};
    
    if (hasValue(jsObject.geometry)) {
        let { buildDotNetGeometry } = await import('./geometry');
        dotNetIQueryMixin.geometry = buildDotNetGeometry(jsObject.geometry);
    }
    
    if (hasValue(jsObject.timeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetIQueryMixin.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
    }
    
    if (hasValue(jsObject.cacheHint)) {
        dotNetIQueryMixin.cacheHint = jsObject.cacheHint;
    }
    
    if (hasValue(jsObject.distance)) {
        dotNetIQueryMixin.distance = jsObject.distance;
    }
    
    if (hasValue(jsObject.outSpatialReference)) {
        dotNetIQueryMixin.outSpatialReference = removeCircularReferences(jsObject.outSpatialReference);
    }
    
    if (hasValue(jsObject.spatialRelationship)) {
        dotNetIQueryMixin.spatialRelationship = removeCircularReferences(jsObject.spatialRelationship);
    }
    
    if (hasValue(jsObject.units)) {
        dotNetIQueryMixin.units = removeCircularReferences(jsObject.units);
    }
    
    if (hasValue(jsObject.where)) {
        dotNetIQueryMixin.where = jsObject.where;
    }
    

    return dotNetIQueryMixin;
}

