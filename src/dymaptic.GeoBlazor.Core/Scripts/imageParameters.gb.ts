// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageParameters from '@arcgis/core/rest/support/ImageParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetImageParameters } from './imageParameters';

export async function buildJsImageParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.extent)) {
        let { buildJsExtent } = await import('./extent');
        properties.extent = buildJsExtent(dotNetObject.extent) as any;
    }
    if (hasValue(dotNetObject.format)) {
        let { buildJsFormat } = await import('./format');
        properties.format = await buildJsFormat(dotNetObject.format, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.dpi)) {
        properties.dpi = dotNetObject.dpi;
    }
    if (hasValue(dotNetObject.height)) {
        properties.height = dotNetObject.height;
    }
    if (hasValue(dotNetObject.imageSpatialReference)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedImageSpatialReference } = dotNetObject.imageSpatialReference;
        properties.imageSpatialReference = sanitizedImageSpatialReference;
    }
    if (hasValue(dotNetObject.layerDefinitions)) {
        properties.layerDefinitions = dotNetObject.layerDefinitions;
    }
    if (hasValue(dotNetObject.layerIds)) {
        properties.layerIds = dotNetObject.layerIds;
    }
    if (hasValue(dotNetObject.layerOption)) {
        properties.layerOption = dotNetObject.layerOption;
    }
    if (hasValue(dotNetObject.transparent)) {
        properties.transparent = dotNetObject.transparent;
    }
    if (hasValue(dotNetObject.width)) {
        properties.width = dotNetObject.width;
    }
    let jsImageParameters = new ImageParameters(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsImageParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageParameters;
    
    return jsImageParameters;
}


export async function buildDotNetImageParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageParameters: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.extent)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetImageParameters.extent = buildDotNetExtent(jsObject.extent);
    }
    if (hasValue(jsObject.format)) {
        let { buildDotNetFormat } = await import('./format');
        dotNetImageParameters.format = await buildDotNetFormat(jsObject.format);
    }
    if (hasValue(jsObject.dpi)) {
        dotNetImageParameters.dpi = jsObject.dpi;
    }
    if (hasValue(jsObject.height)) {
        dotNetImageParameters.height = jsObject.height;
    }
    if (hasValue(jsObject.imageSpatialReference)) {
        dotNetImageParameters.imageSpatialReference = jsObject.imageSpatialReference;
    }
    if (hasValue(jsObject.layerDefinitions)) {
        dotNetImageParameters.layerDefinitions = jsObject.layerDefinitions;
    }
    if (hasValue(jsObject.layerIds)) {
        dotNetImageParameters.layerIds = jsObject.layerIds;
    }
    if (hasValue(jsObject.layerOption)) {
        dotNetImageParameters.layerOption = jsObject.layerOption;
    }
    if (hasValue(jsObject.transparent)) {
        dotNetImageParameters.transparent = jsObject.transparent;
    }
    if (hasValue(jsObject.width)) {
        dotNetImageParameters.width = jsObject.width;
    }

    return dotNetImageParameters;
}

