// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetImageParameters } from './imageParameters';
import ImageParameters from '@arcgis/core/rest/support/ImageParameters';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsImageParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsImageParameters = new ImageParameters();
    if (hasValue(dotNetObject.extent)) {
        let { buildJsExtent } = await import('./extent');
        jsImageParameters.extent = buildJsExtent(dotNetObject.extent) as any;
    }
    if (hasValue(dotNetObject.format)) {
        let { buildJsFormat } = await import('./format');
        jsImageParameters.format = await buildJsFormat(dotNetObject.format, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.imageSpatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        jsImageParameters.imageSpatialReference = buildJsSpatialReference(dotNetObject.imageSpatialReference) as any;
    }

    if (hasValue(dotNetObject.dpi)) {
        jsImageParameters.dpi = dotNetObject.dpi;
    }
    if (hasValue(dotNetObject.height)) {
        jsImageParameters.height = dotNetObject.height;
    }
    if (hasValue(dotNetObject.layerDefinitions)) {
        jsImageParameters.layerDefinitions = dotNetObject.layerDefinitions;
    }
    if (hasValue(dotNetObject.layerIds)) {
        jsImageParameters.layerIds = dotNetObject.layerIds;
    }
    if (hasValue(dotNetObject.layerOption)) {
        jsImageParameters.layerOption = dotNetObject.layerOption;
    }
    if (hasValue(dotNetObject.transparent)) {
        jsImageParameters.transparent = dotNetObject.transparent;
    }
    if (hasValue(dotNetObject.width)) {
        jsImageParameters.width = dotNetObject.width;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsImageParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageParameters;
    
    let dnInstantiatedObject = await buildDotNetImageParameters(jsImageParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImageParameters', e);
    }
    
    return jsImageParameters;
}

export async function buildDotNetImageParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.extent)) {
            let { buildDotNetExtent } = await import('./extent');
            dotNetImageParameters.extent = buildDotNetExtent(jsObject.extent);
        }
        if (hasValue(jsObject.format)) {
            let { buildDotNetFormat } = await import('./format');
            dotNetImageParameters.format = await buildDotNetFormat(jsObject.format);
        }
        if (hasValue(jsObject.imageSpatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetImageParameters.imageSpatialReference = buildDotNetSpatialReference(jsObject.imageSpatialReference);
        }
        if (hasValue(jsObject.dpi)) {
            dotNetImageParameters.dpi = jsObject.dpi;
        }
        if (hasValue(jsObject.height)) {
            dotNetImageParameters.height = jsObject.height;
        }
        if (hasValue(jsObject.layerDefinitions)) {
            dotNetImageParameters.layerDefinitions = jsObject.layerDefinitions;
        }
        if (hasValue(jsObject.layerIds)) {
            dotNetImageParameters.layerIds = jsObject.layerIds;
        }
        if (hasValue(jsObject.layerOption)) {
            dotNetImageParameters.layerOption = jsObject.layerOption;
        }
        if (hasValue(jsObject.transparent)) {
            dotNetImageParameters.transparent = jsObject.transparent;
        }
        if (hasValue(jsObject.width)) {
            dotNetImageParameters.width = jsObject.width;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImageParameters.id = k;
                break;
            }
        }
    }

    return dotNetImageParameters;
}

