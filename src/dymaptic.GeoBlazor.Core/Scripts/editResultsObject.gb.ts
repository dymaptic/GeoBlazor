// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetEditResultsObject } from './editResultsObject';

export async function buildJsEditResultsObjectGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsEditResultsObject: any = {};
    if (hasValue(dotNetObject.adds)) {
        let { buildJsNamedObjectEditResults } = await import('./namedObjectEditResults');
        jsEditResultsObject.adds = await Promise.all(dotNetObject.adds.map(async i => await buildJsNamedObjectEditResults(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.deletes)) {
        let { buildJsNamedObjectEditResults } = await import('./namedObjectEditResults');
        jsEditResultsObject.deletes = await Promise.all(dotNetObject.deletes.map(async i => await buildJsNamedObjectEditResults(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.updates)) {
        let { buildJsNamedObjectEditResults } = await import('./namedObjectEditResults');
        jsEditResultsObject.updates = await Promise.all(dotNetObject.updates.map(async i => await buildJsNamedObjectEditResults(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.typeName)) {
        jsEditResultsObject.typeName = dotNetObject.typeName;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsEditResultsObject);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsEditResultsObject;
    
    let { buildDotNetEditResultsObject } = await import('./editResultsObject');
    let dnInstantiatedObject = await buildDotNetEditResultsObject(jsEditResultsObject, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type EditResultsObject detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for EditResultsObject', e);
    }
    
    return jsEditResultsObject;
}


export async function buildDotNetEditResultsObjectGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsEditResultsObject } = await import('./editResultsObject');
        jsComponentRef = await buildJsEditResultsObject(jsObject, layerId, viewId);
    }
    
    let dotNetEditResultsObject: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.adds)) {
        let { buildDotNetNamedObjectEditResults } = await import('./namedObjectEditResults');
        dotNetEditResultsObject.adds = await Promise.all(jsObject.adds.map(async i => await buildDotNetNamedObjectEditResults(i, layerId, viewId)));
    }
    if (hasValue(jsObject.deletes)) {
        let { buildDotNetNamedObjectEditResults } = await import('./namedObjectEditResults');
        dotNetEditResultsObject.deletes = await Promise.all(jsObject.deletes.map(async i => await buildDotNetNamedObjectEditResults(i, layerId, viewId)));
    }
    if (hasValue(jsObject.updates)) {
        let { buildDotNetNamedObjectEditResults } = await import('./namedObjectEditResults');
        dotNetEditResultsObject.updates = await Promise.all(jsObject.updates.map(async i => await buildDotNetNamedObjectEditResults(i, layerId, viewId)));
    }
    if (hasValue(jsObject.typeName)) {
        dotNetEditResultsObject.typeName = jsObject.typeName;
    }


    if (hasValue(geoBlazorId)) {
        dotNetEditResultsObject.id = geoBlazorId;
    }

    return dotNetEditResultsObject;
}

