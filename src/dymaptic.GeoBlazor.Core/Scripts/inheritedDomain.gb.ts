// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import InheritedDomain from '@arcgis/core/layers/support/InheritedDomain';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetInheritedDomain } from './inheritedDomain';

export async function buildJsInheritedDomainGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.name)) {
        properties.name = dotNetObject.name;
    }
    let jsInheritedDomain = new InheritedDomain(properties);
    
    jsObjectRefs[dotNetObject.id] = jsInheritedDomain;
    arcGisObjectRefs[dotNetObject.id] = jsInheritedDomain;
    
    return jsInheritedDomain;
}


export async function buildDotNetInheritedDomainGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetInheritedDomain: any = {};
    
    if (hasValue(jsObject.name)) {
        dotNetInheritedDomain.name = jsObject.name;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetInheritedDomain.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetInheritedDomain.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetInheritedDomain.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetInheritedDomain.id)) {
        jsObjectRefs[dotNetInheritedDomain.id] ??= jsObject;
        arcGisObjectRefs[dotNetInheritedDomain.id] ??= jsObject;
    }

    return dotNetInheritedDomain;
}

