// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import InheritedDomain from '@arcgis/core/layers/support/InheritedDomain';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetInheritedDomain } from './inheritedDomain';

export async function buildJsInheritedDomainGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.name)) {
        properties.name = dotNetObject.name;
    }
    let jsInheritedDomain = new InheritedDomain(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsInheritedDomain);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsInheritedDomain;
    
    return jsInheritedDomain;
}


export async function buildDotNetInheritedDomainGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsInheritedDomain } = await import('./inheritedDomain');
        jsComponentRef = await buildJsInheritedDomain(jsObject, layerId, viewId);
    }
    
    let dotNetInheritedDomain: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.name)) {
        dotNetInheritedDomain.name = jsObject.name;
    }
    if (hasValue(jsObject.type)) {
        dotNetInheritedDomain.type = jsObject.type;
    }

    return dotNetInheritedDomain;
}

