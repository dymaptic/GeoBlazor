// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import WMSSublayer from '@arcgis/core/layers/support/WMSSublayer';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetWMSSublayer } from './wMSSublayer';

export async function buildJsWMSSublayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsWMSSublayer = new WMSSublayer();
    if (hasValue(dotNetObject.fullExtent)) {
        let { buildJsExtent } = await import('./extent');
        jsWMSSublayer.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;
    }

    if (hasValue(dotNetObject.description)) {
        jsWMSSublayer.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.legendEnabled)) {
        jsWMSSublayer.legendEnabled = dotNetObject.legendEnabled;
    }
    if (hasValue(dotNetObject.legendUrl)) {
        jsWMSSublayer.legendUrl = dotNetObject.legendUrl;
    }
    if (hasValue(dotNetObject.maxScale)) {
        jsWMSSublayer.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.minScale)) {
        jsWMSSublayer.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.name)) {
        jsWMSSublayer.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        jsWMSSublayer.popupEnabled = dotNetObject.popupEnabled;
    }
    if (hasValue(dotNetObject.queryable)) {
        jsWMSSublayer.queryable = dotNetObject.queryable;
    }
    if (hasValue(dotNetObject.spatialReferences)) {
        jsWMSSublayer.spatialReferences = dotNetObject.spatialReferences;
    }
    if (hasValue(dotNetObject.title)) {
        jsWMSSublayer.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.wMSSublayerId)) {
        jsWMSSublayer.id = dotNetObject.wMSSublayerId;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsWMSSublayer);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsWMSSublayer;
    
    let dnInstantiatedObject = await buildDotNetWMSSublayer(jsWMSSublayer);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for WMSSublayer', e);
    }
    
    return jsWMSSublayer;
}

export async function buildDotNetWMSSublayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWMSSublayer: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.fullExtent)) {
            let { buildDotNetExtent } = await import('./extent');
            dotNetWMSSublayer.fullExtent = buildDotNetExtent(jsObject.fullExtent);
        }
        if (hasValue(jsObject.description)) {
            dotNetWMSSublayer.description = jsObject.description;
        }
        if (hasValue(jsObject.dimensions)) {
            dotNetWMSSublayer.dimensions = jsObject.dimensions;
        }
        if (hasValue(jsObject.legendEnabled)) {
            dotNetWMSSublayer.legendEnabled = jsObject.legendEnabled;
        }
        if (hasValue(jsObject.legendUrl)) {
            dotNetWMSSublayer.legendUrl = jsObject.legendUrl;
        }
        if (hasValue(jsObject.maxScale)) {
            dotNetWMSSublayer.maxScale = jsObject.maxScale;
        }
        if (hasValue(jsObject.minScale)) {
            dotNetWMSSublayer.minScale = jsObject.minScale;
        }
        if (hasValue(jsObject.name)) {
            dotNetWMSSublayer.name = jsObject.name;
        }
        if (hasValue(jsObject.popupEnabled)) {
            dotNetWMSSublayer.popupEnabled = jsObject.popupEnabled;
        }
        if (hasValue(jsObject.queryable)) {
            dotNetWMSSublayer.queryable = jsObject.queryable;
        }
        if (hasValue(jsObject.spatialReferences)) {
            dotNetWMSSublayer.spatialReferences = jsObject.spatialReferences;
        }
        if (hasValue(jsObject.title)) {
            dotNetWMSSublayer.title = jsObject.title;
        }
        if (hasValue(jsObject.id)) {
            dotNetWMSSublayer.wMSSublayerId = jsObject.id;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetWMSSublayer.id = k;
                break;
            }
        }
    }

    return dotNetWMSSublayer;
}

