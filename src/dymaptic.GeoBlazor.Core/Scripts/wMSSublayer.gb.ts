// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import WMSSublayer from '@arcgis/core/layers/support/WMSSublayer';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetWMSSublayer } from './wMSSublayer';

export async function buildJsWMSSublayerGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.fullExtent)) {
        let { buildJsExtent } = await import('./extent');
        properties.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;
    }

    if (hasValue(dotNetObject.description)) {
        properties.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.legendEnabled)) {
        properties.legendEnabled = dotNetObject.legendEnabled;
    }
    if (hasValue(dotNetObject.legendUrl)) {
        properties.legendUrl = dotNetObject.legendUrl;
    }
    if (hasValue(dotNetObject.maxScale)) {
        properties.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.minScale)) {
        properties.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.name)) {
        properties.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        properties.popupEnabled = dotNetObject.popupEnabled;
    }
    if (hasValue(dotNetObject.queryable)) {
        properties.queryable = dotNetObject.queryable;
    }
    if (hasValue(dotNetObject.spatialReferences) && dotNetObject.spatialReferences.length > 0) {
        properties.spatialReferences = dotNetObject.spatialReferences;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    if (hasValue(dotNetObject.wMSSublayerId)) {
        properties.id = dotNetObject.wMSSublayerId;
    }
    let jsWMSSublayer = new WMSSublayer(properties);
    
    jsObjectRefs[dotNetObject.id] = jsWMSSublayer;
    arcGisObjectRefs[dotNetObject.id] = jsWMSSublayer;
    
    return jsWMSSublayer;
}


export async function buildDotNetWMSSublayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWMSSublayer: any = {};
    
    if (hasValue(jsObject.fullExtent)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetWMSSublayer.fullExtent = buildDotNetExtent(jsObject.fullExtent);
    }
    
    if (hasValue(jsObject.description)) {
        dotNetWMSSublayer.description = jsObject.description;
    }
    
    if (hasValue(jsObject.dimensions)) {
        dotNetWMSSublayer.dimensions = removeCircularReferences(jsObject.dimensions);
    }
    
    if (hasValue(jsObject.legendEnabled)) {
        dotNetWMSSublayer.legendEnabled = jsObject.legendEnabled;
    }
    
    if (hasValue(jsObject.legendUrl)) {
        dotNetWMSSublayer.legendUrl = jsObject.legendUrl;
    }
    
    if (hasValue(jsObject.maxScale)) {
        dotNetWMSSublayer.maxScale = jsObject.maxScale;
    }
    
    if (hasValue(jsObject.minScale)) {
        dotNetWMSSublayer.minScale = jsObject.minScale;
    }
    
    if (hasValue(jsObject.name)) {
        dotNetWMSSublayer.name = jsObject.name;
    }
    
    if (hasValue(jsObject.popupEnabled)) {
        dotNetWMSSublayer.popupEnabled = jsObject.popupEnabled;
    }
    
    if (hasValue(jsObject.queryable)) {
        dotNetWMSSublayer.queryable = jsObject.queryable;
    }
    
    if (hasValue(jsObject.spatialReferences)) {
        dotNetWMSSublayer.spatialReferences = jsObject.spatialReferences;
    }
    
    if (hasValue(jsObject.title)) {
        dotNetWMSSublayer.title = jsObject.title;
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetWMSSublayer.visible = jsObject.visible;
    }
    
    if (hasValue(jsObject.id)) {
        dotNetWMSSublayer.wMSSublayerId = jsObject.id;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetWMSSublayer.id = geoBlazorId;
    }

    return dotNetWMSSublayer;
}

