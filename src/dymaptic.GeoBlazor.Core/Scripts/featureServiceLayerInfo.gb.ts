// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetFeatureServiceLayerInfo } from './featureServiceLayerInfo';

export async function buildJsFeatureServiceLayerInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsFeatureServiceLayerInfo: any = {};

    if (hasValue(dotNetObject.featureServiceLayerInfoId)) {
        jsFeatureServiceLayerInfo.id = dotNetObject.featureServiceLayerInfoId;
    }
    if (hasValue(dotNetObject.geometryType)) {
        jsFeatureServiceLayerInfo.geometryType = dotNetObject.geometryType;
    }
    if (hasValue(dotNetObject.name)) {
        jsFeatureServiceLayerInfo.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.url)) {
        jsFeatureServiceLayerInfo.url = dotNetObject.url;
    }
    
    jsObjectRefs[dotNetObject.id] = jsFeatureServiceLayerInfo;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureServiceLayerInfo;
    
    return jsFeatureServiceLayerInfo;
}


export async function buildDotNetFeatureServiceLayerInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureServiceLayerInfo: any = {};
    
    if (hasValue(jsObject.id)) {
        dotNetFeatureServiceLayerInfo.featureServiceLayerInfoId = jsObject.id;
    }
    
    if (hasValue(jsObject.geometryType)) {
        dotNetFeatureServiceLayerInfo.geometryType = removeCircularReferences(jsObject.geometryType);
    }
    
    if (hasValue(jsObject.name)) {
        dotNetFeatureServiceLayerInfo.name = jsObject.name;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetFeatureServiceLayerInfo.type = jsObject.type;
    }
    
    if (hasValue(jsObject.url)) {
        dotNetFeatureServiceLayerInfo.url = jsObject.url;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetFeatureServiceLayerInfo.id = geoBlazorId;
    }

    return dotNetFeatureServiceLayerInfo;
}

