// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetFeatureLayerEditsEvent } from './featureLayerEditsEvent';

export async function buildJsFeatureLayerEditsEventGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureLayerEditsEvent: any = {};
    if (hasValue(dotNetObject.editedFeatures)) {
        let { buildJsEditedFeatureResult } = await import('./editedFeatureResult');
        jsFeatureLayerEditsEvent.editedFeatures = await buildJsEditedFeatureResult(dotNetObject.editedFeatures, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.addedAttachments) && dotNetObject.addedAttachments.length > 0) {
        jsFeatureLayerEditsEvent.addedAttachments = dotNetObject.addedAttachments;
    }
    if (hasValue(dotNetObject.addedFeatures) && dotNetObject.addedFeatures.length > 0) {
        jsFeatureLayerEditsEvent.addedFeatures = dotNetObject.addedFeatures;
    }
    if (hasValue(dotNetObject.deletedAttachments) && dotNetObject.deletedAttachments.length > 0) {
        jsFeatureLayerEditsEvent.deletedAttachments = dotNetObject.deletedAttachments;
    }
    if (hasValue(dotNetObject.deletedFeatures) && dotNetObject.deletedFeatures.length > 0) {
        jsFeatureLayerEditsEvent.deletedFeatures = dotNetObject.deletedFeatures;
    }
    if (hasValue(dotNetObject.exceededTransferLimit)) {
        jsFeatureLayerEditsEvent.exceededTransferLimit = dotNetObject.exceededTransferLimit;
    }
    if (hasValue(dotNetObject.updatedAttachments) && dotNetObject.updatedAttachments.length > 0) {
        jsFeatureLayerEditsEvent.updatedAttachments = dotNetObject.updatedAttachments;
    }
    if (hasValue(dotNetObject.updatedFeatures) && dotNetObject.updatedFeatures.length > 0) {
        jsFeatureLayerEditsEvent.updatedFeatures = dotNetObject.updatedFeatures;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureLayerEditsEvent);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureLayerEditsEvent;
    
    return jsFeatureLayerEditsEvent;
}


export async function buildDotNetFeatureLayerEditsEventGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureLayerEditsEvent: any = {};
    
    if (hasValue(jsObject.editedFeatures)) {
        let { buildDotNetEditedFeatureResult } = await import('./editedFeatureResult');
        dotNetFeatureLayerEditsEvent.editedFeatures = await buildDotNetEditedFeatureResult(jsObject.editedFeatures, layerId, viewId);
    }
    
    if (hasValue(jsObject.addedAttachments)) {
        dotNetFeatureLayerEditsEvent.addedAttachments = removeCircularReferences(jsObject.addedAttachments);
    }
    
    if (hasValue(jsObject.addedFeatures)) {
        dotNetFeatureLayerEditsEvent.addedFeatures = removeCircularReferences(jsObject.addedFeatures);
    }
    
    if (hasValue(jsObject.deletedAttachments)) {
        dotNetFeatureLayerEditsEvent.deletedAttachments = removeCircularReferences(jsObject.deletedAttachments);
    }
    
    if (hasValue(jsObject.deletedFeatures)) {
        dotNetFeatureLayerEditsEvent.deletedFeatures = removeCircularReferences(jsObject.deletedFeatures);
    }
    
    if (hasValue(jsObject.exceededTransferLimit)) {
        dotNetFeatureLayerEditsEvent.exceededTransferLimit = jsObject.exceededTransferLimit;
    }
    
    if (hasValue(jsObject.updatedAttachments)) {
        dotNetFeatureLayerEditsEvent.updatedAttachments = removeCircularReferences(jsObject.updatedAttachments);
    }
    
    if (hasValue(jsObject.updatedFeatures)) {
        dotNetFeatureLayerEditsEvent.updatedFeatures = removeCircularReferences(jsObject.updatedFeatures);
    }
    

    return dotNetFeatureLayerEditsEvent;
}

