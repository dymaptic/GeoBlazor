// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetFeatureLayerEditsEvent } from './featureLayerEditsEvent';

export async function buildJsFeatureLayerEditsEventGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureLayerEditsEvent: any = {};
    if (hasValue(dotNetObject.editedFeatures)) {
        let { buildJsEditedFeatureResult } = await import('./editedFeatureResult');
        jsFeatureLayerEditsEvent.editedFeatures = await buildJsEditedFeatureResult(dotNetObject.editedFeatures, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.addedAttachments)) {
        jsFeatureLayerEditsEvent.addedAttachments = dotNetObject.addedAttachments;
    }
    if (hasValue(dotNetObject.addedFeatures)) {
        jsFeatureLayerEditsEvent.addedFeatures = dotNetObject.addedFeatures;
    }
    if (hasValue(dotNetObject.deletedAttachments)) {
        jsFeatureLayerEditsEvent.deletedAttachments = dotNetObject.deletedAttachments;
    }
    if (hasValue(dotNetObject.deletedFeatures)) {
        jsFeatureLayerEditsEvent.deletedFeatures = dotNetObject.deletedFeatures;
    }
    if (hasValue(dotNetObject.exceededTransferLimit)) {
        jsFeatureLayerEditsEvent.exceededTransferLimit = dotNetObject.exceededTransferLimit;
    }
    if (hasValue(dotNetObject.updatedAttachments)) {
        jsFeatureLayerEditsEvent.updatedAttachments = dotNetObject.updatedAttachments;
    }
    if (hasValue(dotNetObject.updatedFeatures)) {
        jsFeatureLayerEditsEvent.updatedFeatures = dotNetObject.updatedFeatures;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureLayerEditsEvent);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureLayerEditsEvent;
    
    let dnInstantiatedObject = await buildDotNetFeatureLayerEditsEvent(jsFeatureLayerEditsEvent);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureLayerEditsEvent', e);
    }
    
    return jsFeatureLayerEditsEvent;
}

export async function buildDotNetFeatureLayerEditsEventGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureLayerEditsEvent: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.editedFeatures)) {
            let { buildDotNetEditedFeatureResult } = await import('./editedFeatureResult');
            dotNetFeatureLayerEditsEvent.editedFeatures = await buildDotNetEditedFeatureResult(jsObject.editedFeatures);
        }
    if (hasValue(jsObject.addedAttachments)) {
        dotNetFeatureLayerEditsEvent.addedAttachments = jsObject.addedAttachments;
    }
    if (hasValue(jsObject.addedFeatures)) {
        dotNetFeatureLayerEditsEvent.addedFeatures = jsObject.addedFeatures;
    }
    if (hasValue(jsObject.deletedAttachments)) {
        dotNetFeatureLayerEditsEvent.deletedAttachments = jsObject.deletedAttachments;
    }
    if (hasValue(jsObject.deletedFeatures)) {
        dotNetFeatureLayerEditsEvent.deletedFeatures = jsObject.deletedFeatures;
    }
    if (hasValue(jsObject.exceededTransferLimit)) {
        dotNetFeatureLayerEditsEvent.exceededTransferLimit = jsObject.exceededTransferLimit;
    }
    if (hasValue(jsObject.updatedAttachments)) {
        dotNetFeatureLayerEditsEvent.updatedAttachments = jsObject.updatedAttachments;
    }
    if (hasValue(jsObject.updatedFeatures)) {
        dotNetFeatureLayerEditsEvent.updatedFeatures = jsObject.updatedFeatures;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFeatureLayerEditsEvent.id = k;
                break;
            }
        }
    }

    return dotNetFeatureLayerEditsEvent;
}

