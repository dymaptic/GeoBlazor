// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';

export async function buildJsWebMapWidgetsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsWidgets: any = {};
    if (hasValue(dotNetObject.floorFilter)) {
        let { buildJsWebMapFloorFilter } = await import('./webMapFloorFilter');
        jsWidgets.floorFilter = await buildJsWebMapFloorFilter(dotNetObject.floorFilter, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.timeSlider)) {
        let { buildJsWebDocTimeSlider } = await import('./webDocTimeSlider');
        jsWidgets.timeSlider = await buildJsWebDocTimeSlider(dotNetObject.timeSlider, layerId, viewId) as any;
    }

    
    jsObjectRefs[dotNetObject.id] = jsWidgets;
    arcGisObjectRefs[dotNetObject.id] = jsWidgets;
    
    return jsWidgets;
}


export async function buildDotNetWebMapWidgetsGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWebMapWidgets: any = {};
    
    if (hasValue(jsObject.floorFilter)) {
        let { buildDotNetWebMapFloorFilter } = await import('./webMapFloorFilter');
        dotNetWebMapWidgets.floorFilter = await buildDotNetWebMapFloorFilter(jsObject.floorFilter, viewId);
    }
    
    if (hasValue(jsObject.timeSlider)) {
        let { buildDotNetWebDocTimeSlider } = await import('./webDocTimeSlider');
        dotNetWebMapWidgets.timeSlider = await buildDotNetWebDocTimeSlider(jsObject.timeSlider, viewId);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetWebMapWidgets.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetWebMapWidgets.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetWebMapWidgets.id)) {
        jsObjectRefs[dotNetWebMapWidgets.id] ??= jsObject;
        arcGisObjectRefs[dotNetWebMapWidgets.id] ??= jsObject;
    }

    return dotNetWebMapWidgets;
}

