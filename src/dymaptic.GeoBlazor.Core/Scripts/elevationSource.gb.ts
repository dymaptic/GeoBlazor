// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetElevationSource } from './elevationSource';

export async function buildJsElevationSourceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsElevationSource: any = {};

    if (hasValue(dotNetObject.lod)) {
        jsElevationSource.lod = dotNetObject.lod;
    }
    if (hasValue(dotNetObject.rasterFunction)) {
        jsElevationSource.rasterFunction = dotNetObject.rasterFunction;
    }
    if (hasValue(dotNetObject.url)) {
        jsElevationSource.url = dotNetObject.url;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsElevationSource);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsElevationSource;
    
    let { buildDotNetElevationSource } = await import('./elevationSource');
    let dnInstantiatedObject = await buildDotNetElevationSource(jsElevationSource);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type ElevationSource detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ElevationSource', e);
    }
    
    return jsElevationSource;
}


export async function buildDotNetElevationSourceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetElevationSource: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.lod)) {
        dotNetElevationSource.lod = jsObject.lod;
    }
    if (hasValue(jsObject.rasterFunction)) {
        dotNetElevationSource.rasterFunction = jsObject.rasterFunction;
    }
    if (hasValue(jsObject.url)) {
        dotNetElevationSource.url = jsObject.url;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetElevationSource.id = geoBlazorId;
    }

    return dotNetElevationSource;
}

