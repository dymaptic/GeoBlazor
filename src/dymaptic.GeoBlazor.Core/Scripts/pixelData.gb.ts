// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import PixelData = __esri.PixelData;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PixelDataGenerated implements IPropertyWrapper {
    public component: PixelData;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: PixelData) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getPixelBlock(): Promise<any> {
        let { buildDotNetPixelBlock } = await import('./pixelBlock');
        return await buildDotNetPixelBlock(this.component.pixelBlock);
    }
    async setPixelBlock(value: any): Promise<void> {
        let { buildJsPixelBlock } = await import('./pixelBlock');
        this.component.pixelBlock = await  buildJsPixelBlock(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsPixelDataGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPixelData: any = {}
    if (hasValue(dotNetObject.extent)) {
        jsPixelData.extent = dotNetObject.extent;
    }
    if (hasValue(dotNetObject.pixelBlock)) {
        let { buildJsPixelBlock } = await import('./pixelBlock');
        jsPixelData.pixelBlock = await buildJsPixelBlock(dotNetObject.pixelBlock, layerId, viewId) as any;
    }

    let { default: PixelDataWrapper } = await import('./pixelData');
    let pixelDataWrapper = new PixelDataWrapper(jsPixelData);
    pixelDataWrapper.geoBlazorId = dotNetObject.id;
    pixelDataWrapper.viewId = viewId;
    pixelDataWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(pixelDataWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = pixelDataWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsPixelData;
    
    return jsPixelData;
}

export async function buildDotNetPixelDataGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPixelData: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.pixelBlock)) {
            let { buildDotNetPixelBlock } = await import('./pixelBlock');
            dotNetPixelData.pixelBlock = await buildDotNetPixelBlock(jsObject.pixelBlock);
        }
        dotNetPixelData.extent = jsObject.extent;

    return dotNetPixelData;
}

