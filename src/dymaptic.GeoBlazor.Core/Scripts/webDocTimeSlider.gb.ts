// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import TimeSlider from '@arcgis/core/webdoc/widgets/TimeSlider';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class WebDocTimeSliderGenerated implements IPropertyWrapper {
    public component: TimeSlider;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: TimeSlider) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getCurrentTimeExtent(): Promise<any> {
        if (!hasValue(this.component.currentTimeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.component.currentTimeExtent);
    }
    async setCurrentTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.component.currentTimeExtent = await  buildJsTimeExtent(value, this.layerId, this.viewId);
    }
    async getFullTimeExtent(): Promise<any> {
        if (!hasValue(this.component.fullTimeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.component.fullTimeExtent);
    }
    async setFullTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.component.fullTimeExtent = await  buildJsTimeExtent(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsWebDocTimeSliderGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTimeSlider = new TimeSlider();
    if (hasValue(dotNetObject.currentTimeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        jsTimeSlider.currentTimeExtent = await buildJsTimeExtent(dotNetObject.currentTimeExtent, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.fullTimeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        jsTimeSlider.fullTimeExtent = await buildJsTimeExtent(dotNetObject.fullTimeExtent, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.stopInterval)) {
        jsTimeSlider.stopInterval = dotNetObject.timeInterval;
    }

    if (hasValue(dotNetObject.loop)) {
        jsTimeSlider.loop = dotNetObject.loop;
    }
    if (hasValue(dotNetObject.numStops)) {
        jsTimeSlider.numStops = dotNetObject.numStops;
    }
    if (hasValue(dotNetObject.numThumbs)) {
        jsTimeSlider.numThumbs = dotNetObject.numThumbs;
    }
    if (hasValue(dotNetObject.stopDelay)) {
        jsTimeSlider.stopDelay = dotNetObject.stopDelay;
    }
    if (hasValue(dotNetObject.stops)) {
        jsTimeSlider.stops = dotNetObject.stops;
    }

    let { default: WebDocTimeSliderWrapper } = await import('./webDocTimeSlider');
    let webDocTimeSliderWrapper = new WebDocTimeSliderWrapper(jsTimeSlider);
    webDocTimeSliderWrapper.geoBlazorId = dotNetObject.id;
    webDocTimeSliderWrapper.viewId = viewId;
    webDocTimeSliderWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(webDocTimeSliderWrapper);
    jsObjectRefs[dotNetObject.id] = webDocTimeSliderWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsTimeSlider;
    let { buildDotNetWebDocTimeSlider } = await import('./webDocTimeSlider');
    let dnInstantiatedObject = await buildDotNetWebDocTimeSlider(jsTimeSlider);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for WebDocTimeSlider', e);
    }
    
    return jsTimeSlider;
}
export async function buildDotNetWebDocTimeSliderGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWebDocTimeSlider: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.currentTimeExtent)) {
            let { buildDotNetTimeExtent } = await import('./timeExtent');
            dotNetWebDocTimeSlider.currentTimeExtent = buildDotNetTimeExtent(jsObject.currentTimeExtent);
        }
        if (hasValue(jsObject.fullTimeExtent)) {
            let { buildDotNetTimeExtent } = await import('./timeExtent');
            dotNetWebDocTimeSlider.fullTimeExtent = buildDotNetTimeExtent(jsObject.fullTimeExtent);
        }
        dotNetWebDocTimeSlider.stopInterval = jsObject.stopInterval;
        if (hasValue(jsObject.loop)) {
            dotNetWebDocTimeSlider.loop = jsObject.loop;
        }
        if (hasValue(jsObject.numStops)) {
            dotNetWebDocTimeSlider.numStops = jsObject.numStops;
        }
        if (hasValue(jsObject.numThumbs)) {
            dotNetWebDocTimeSlider.numThumbs = jsObject.numThumbs;
        }
        if (hasValue(jsObject.stopDelay)) {
            dotNetWebDocTimeSlider.stopDelay = jsObject.stopDelay;
        }
        if (hasValue(jsObject.stops)) {
            dotNetWebDocTimeSlider.stops = jsObject.stops;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetWebDocTimeSlider.id = k;
                break;
            }
        }
    }

    return dotNetWebDocTimeSlider;
}

