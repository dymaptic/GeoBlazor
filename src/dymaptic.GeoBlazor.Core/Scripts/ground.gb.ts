// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Ground from '@arcgis/core/Ground';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, generateSerializableJson } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class GroundGenerated implements IPropertyWrapper {
    public component: Ground;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: Ground) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.layers) && dotNetObject.layers.length > 0) {
            let { buildJsLayer } = await import('./layer');
            this.component.layers = await Promise.all(dotNetObject.layers.map(async i => await buildJsLayer(i, this.layerId, this.viewId))) as any;
        }
        if (hasValue(dotNetObject.navigationConstraint)) {
            let { buildJsGroundNavigationConstraint } = await import('./groundNavigationConstraint');
            this.component.navigationConstraint = await buildJsGroundNavigationConstraint(dotNetObject.navigationConstraint, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.surfaceColor)) {
            let { buildJsMapColor } = await import('./mapColor');
            this.component.surfaceColor = buildJsMapColor(dotNetObject.surfaceColor) as any;
        }

        if (hasValue(dotNetObject.opacity)) {
            this.component.opacity = dotNetObject.opacity;
        }
    }
    
    async cancelLoad(): Promise<void> {
        this.component.cancelLoad();
    }

    async createElevationSampler(extent: any,
        options: any): Promise<any> {
        let { buildJsExtent } = await import('./extent');
        let jsExtent = buildJsExtent(extent) as any;
        return await this.component.createElevationSampler(jsExtent,
            options);
    }

    async isFulfilled(): Promise<any> {
        return this.component.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.component.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.component.isResolved();
    }

    async load(options: any): Promise<any> {
        let result = await this.component.load(options);
        
        return generateSerializableJson(result);
    }

    async loadAll(): Promise<any> {
        let result = await this.component.loadAll();
        let { buildDotNetGround } = await import('./ground');
        return await buildDotNetGround(result, this.layerId, this.viewId);
    }

    async queryElevation(geometry: any,
        options: any): Promise<any> {
        let { buildJsGeometry } = await import('./geometry');
        let jsGeometry = buildJsGeometry(geometry) as any;
        return await this.component.queryElevation(jsGeometry,
            options);
    }

    async when(callback: any,
        errback: any): Promise<any> {
        let result = await this.component.when(callback,
            errback);
        
        return generateSerializableJson(result);
    }

    // region properties
    
    async getLayers(): Promise<any> {
        if (!hasValue(this.component.layers)) {
            return null;
        }
        
        let { buildDotNetLayer } = await import('./layer');
        return await Promise.all(this.component.layers!.map(async i => await buildDotNetLayer(i)));
    }
    
    async setLayers(value: any): Promise<void> {
        if (!hasValue(value)) {
            this.component.layers = [];
        }
        let { buildJsLayer } = await import('./layer');
        this.component.layers = await Promise.all(value.map(async i => await buildJsLayer(i, this.layerId, this.viewId))) as any;
    }
    
    async getNavigationConstraint(): Promise<any> {
        if (!hasValue(this.component.navigationConstraint)) {
            return null;
        }
        
        let { buildDotNetGroundNavigationConstraint } = await import('./groundNavigationConstraint');
        return await buildDotNetGroundNavigationConstraint(this.component.navigationConstraint, this.layerId, this.viewId);
    }
    
    async setNavigationConstraint(value: any): Promise<void> {
        let { buildJsGroundNavigationConstraint } = await import('./groundNavigationConstraint');
        this.component.navigationConstraint = await  buildJsGroundNavigationConstraint(value, this.layerId, this.viewId);
    }
    
    async getSurfaceColor(): Promise<any> {
        if (!hasValue(this.component.surfaceColor)) {
            return null;
        }
        
        let { buildDotNetMapColor } = await import('./mapColor');
        return buildDotNetMapColor(this.component.surfaceColor);
    }
    
    async setSurfaceColor(value: any): Promise<void> {
        let { buildJsMapColor } = await import('./mapColor');
        this.component.surfaceColor =  buildJsMapColor(value);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsGroundGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.layers) && dotNetObject.layers.length > 0) {
        let { buildJsLayer } = await import('./layer');
        properties.layers = await Promise.all(dotNetObject.layers.map(async i => await buildJsLayer(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.navigationConstraint)) {
        let { buildJsGroundNavigationConstraint } = await import('./groundNavigationConstraint');
        properties.navigationConstraint = await buildJsGroundNavigationConstraint(dotNetObject.navigationConstraint, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.surfaceColor)) {
        let { buildJsMapColor } = await import('./mapColor');
        properties.surfaceColor = buildJsMapColor(dotNetObject.surfaceColor) as any;
    }

    if (hasValue(dotNetObject.opacity)) {
        properties.opacity = dotNetObject.opacity;
    }
    let jsGround = new Ground(properties);

    let { default: GroundWrapper } = await import('./ground');
    let groundWrapper = new GroundWrapper(jsGround);
    groundWrapper.geoBlazorId = dotNetObject.id;
    groundWrapper.viewId = viewId;
    groundWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = groundWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsGround;
    
    return jsGround;
}


export async function buildDotNetGroundGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGround: any = {};
    
    if (hasValue(jsObject.navigationConstraint)) {
        let { buildDotNetGroundNavigationConstraint } = await import('./groundNavigationConstraint');
        dotNetGround.navigationConstraint = await buildDotNetGroundNavigationConstraint(jsObject.navigationConstraint, layerId, viewId);
    }
    
    if (hasValue(jsObject.surfaceColor)) {
        let { buildDotNetMapColor } = await import('./mapColor');
        dotNetGround.surfaceColor = buildDotNetMapColor(jsObject.surfaceColor);
    }
    
    if (hasValue(jsObject.loaded)) {
        dotNetGround.loaded = jsObject.loaded;
    }
    
    if (hasValue(jsObject.opacity)) {
        dotNetGround.opacity = jsObject.opacity;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetGround.id = geoBlazorId;
    }

    return dotNetGround;
}

