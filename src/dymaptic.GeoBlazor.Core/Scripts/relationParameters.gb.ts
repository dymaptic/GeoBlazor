// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import RelationParameters from '@arcgis/core/rest/support/RelationParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetRelationParameters } from './relationParameters';

export async function buildJsRelationParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsRelationParameters = new RelationParameters();
    if (hasValue(dotNetObject.geometries1)) {
        let { buildJsGeometry } = await import('./geometry');
        jsRelationParameters.geometries1 = dotNetObject.geometries1.map(i => buildJsGeometry(i)) as any;
    }
    if (hasValue(dotNetObject.geometries2)) {
        let { buildJsGeometry } = await import('./geometry');
        jsRelationParameters.geometries2 = dotNetObject.geometries2.map(i => buildJsGeometry(i)) as any;
    }

    if (hasValue(dotNetObject.relation)) {
        jsRelationParameters.relation = dotNetObject.relation;
    }
    if (hasValue(dotNetObject.relationParameter)) {
        jsRelationParameters.relationParameter = dotNetObject.relationParameter;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsRelationParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRelationParameters;
    
    let dnInstantiatedObject = await buildDotNetRelationParameters(jsRelationParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RelationParameters', e);
    }
    
    return jsRelationParameters;
}

export async function buildDotNetRelationParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRelationParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.geometries1)) {
            let { buildDotNetGeometry } = await import('./geometry');
            dotNetRelationParameters.geometries1 = jsObject.geometries1.map(i => buildDotNetGeometry(i));
        }
        if (hasValue(jsObject.geometries2)) {
            let { buildDotNetGeometry } = await import('./geometry');
            dotNetRelationParameters.geometries2 = jsObject.geometries2.map(i => buildDotNetGeometry(i));
        }
        if (hasValue(jsObject.relation)) {
            dotNetRelationParameters.relation = jsObject.relation;
        }
        if (hasValue(jsObject.relationParameter)) {
            dotNetRelationParameters.relationParameter = jsObject.relationParameter;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRelationParameters.id = k;
                break;
            }
        }
    }

    return dotNetRelationParameters;
}

