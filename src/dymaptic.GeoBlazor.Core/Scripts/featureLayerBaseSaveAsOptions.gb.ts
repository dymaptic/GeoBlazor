// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetFeatureLayerBaseSaveAsOptions } from './featureLayerBaseSaveAsOptions';

export async function buildJsFeatureLayerBaseSaveAsOptionsGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsFeatureLayerBaseSaveAsOptions: any = {};
    if (hasValue(dotNetObject.folder)) {
        let { buildJsPortalFolder } = await import('./portalFolder');
        jsFeatureLayerBaseSaveAsOptions.folder = await buildJsPortalFolder(dotNetObject.folder) as any;
    }

    if (hasValue(dotNetObject.validationOptions)) {
        jsFeatureLayerBaseSaveAsOptions.validationOptions = dotNetObject.validationOptions;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureLayerBaseSaveAsOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureLayerBaseSaveAsOptions;
    
    return jsFeatureLayerBaseSaveAsOptions;
}


export async function buildDotNetFeatureLayerBaseSaveAsOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureLayerBaseSaveAsOptions: any = {};
    
    if (hasValue(jsObject.folder)) {
        let { buildDotNetPortalFolder } = await import('./portalFolder');
        dotNetFeatureLayerBaseSaveAsOptions.folder = await buildDotNetPortalFolder(jsObject.folder);
    }
    
    if (hasValue(jsObject.validationOptions)) {
        dotNetFeatureLayerBaseSaveAsOptions.validationOptions = removeCircularReferences(jsObject.validationOptions);
    }
    

    return dotNetFeatureLayerBaseSaveAsOptions;
}

