// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetPredominantCategoriesResult } from './predominantCategoriesResult';

export async function buildJsPredominantCategoriesResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPredominantCategoriesResult: any = {};
    if (hasValue(dotNetObject.predominantCategoryInfos)) {
        let { buildJsPredominantCategoriesResultPredominantCategoryInfos } = await import('./predominantCategoriesResultPredominantCategoryInfos');
        jsPredominantCategoriesResult.predominantCategoryInfos = await Promise.all(dotNetObject.predominantCategoryInfos.map(async i => await buildJsPredominantCategoriesResultPredominantCategoryInfos(i, layerId, viewId))) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsPredominantCategoriesResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPredominantCategoriesResult;
    
    return jsPredominantCategoriesResult;
}


export async function buildDotNetPredominantCategoriesResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsPredominantCategoriesResult } = await import('./predominantCategoriesResult');
        jsComponentRef = await buildJsPredominantCategoriesResult(jsObject, layerId, viewId);
    }
    
    let dotNetPredominantCategoriesResult: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.predominantCategoryInfos)) {
        let { buildDotNetPredominantCategoriesResultPredominantCategoryInfos } = await import('./predominantCategoriesResultPredominantCategoryInfos');
        dotNetPredominantCategoriesResult.predominantCategoryInfos = await Promise.all(jsObject.predominantCategoryInfos.map(async i => await buildDotNetPredominantCategoriesResultPredominantCategoryInfos(i, layerId, viewId)));
    }

    return dotNetPredominantCategoriesResult;
}

