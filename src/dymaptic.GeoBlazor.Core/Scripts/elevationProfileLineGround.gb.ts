// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ElevationProfileLineGround from '@arcgis/core/widgets/ElevationProfile/ElevationProfileLineGround';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetElevationProfileLineGround } from './elevationProfileLineGround';

export async function buildJsElevationProfileLineGroundGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        properties.color = buildJsMapColor(dotNetObject.color) as any;
    }

    if (hasValue(dotNetObject.elevationProfileLineId)) {
        properties.id = dotNetObject.elevationProfileLineId;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.viewVisualizationEnabled)) {
        properties.viewVisualizationEnabled = dotNetObject.viewVisualizationEnabled;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    let jsElevationProfileLineGround = new ElevationProfileLineGround(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsElevationProfileLineGround);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsElevationProfileLineGround;
    
    let { buildDotNetElevationProfileLineGround } = await import('./elevationProfileLineGround');
    let dnInstantiatedObject = await buildDotNetElevationProfileLineGround(jsElevationProfileLineGround, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type ElevationProfileLineGround detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ElevationProfileLineGround', e);
    }
    
    return jsElevationProfileLineGround;
}


export async function buildDotNetElevationProfileLineGroundGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetElevationProfileLineGround: any = {};
    
    if (hasValue(jsObject.color)) {
        let { buildDotNetMapColor } = await import('./mapColor');
        dotNetElevationProfileLineGround.color = buildDotNetMapColor(jsObject.color);
    }
    
    if (hasValue(jsObject.hoveredPoint)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetElevationProfileLineGround.hoveredPoint = buildDotNetPoint(jsObject.hoveredPoint);
    }
    
    if (hasValue(jsObject.id)) {
        dotNetElevationProfileLineGround.elevationProfileLineId = jsObject.id;
    }
    
    if (hasValue(jsObject.progress)) {
        dotNetElevationProfileLineGround.progress = jsObject.progress;
    }
    
    if (hasValue(jsObject.samples)) {
        dotNetElevationProfileLineGround.samples = jsObject.samples;
    }
    
    if (hasValue(jsObject.statistics)) {
        dotNetElevationProfileLineGround.statistics = jsObject.statistics;
    }
    
    if (hasValue(jsObject.title)) {
        dotNetElevationProfileLineGround.title = jsObject.title;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetElevationProfileLineGround.type = jsObject.type;
    }
    
    if (hasValue(jsObject.viewVisualizationEnabled)) {
        dotNetElevationProfileLineGround.viewVisualizationEnabled = jsObject.viewVisualizationEnabled;
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetElevationProfileLineGround.visible = jsObject.visible;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetElevationProfileLineGround.id = geoBlazorId;
    }

    return dotNetElevationProfileLineGround;
}

