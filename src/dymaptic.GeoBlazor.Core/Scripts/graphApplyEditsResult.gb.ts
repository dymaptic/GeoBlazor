// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import GraphApplyEditsResult from '@arcgis/core/rest/knowledgeGraph/GraphApplyEditsResult';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetGraphApplyEditsResult } from './graphApplyEditsResult';

export async function buildJsGraphApplyEditsResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.editResults) && dotNetObject.editResults.length > 0) {
        let { buildJsEditResultsObject } = await import('./editResultsObject');
        properties.editResults = await Promise.all(dotNetObject.editResults.map(async i => await buildJsEditResultsObject(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.error)) {
        properties.error = dotNetObject.error;
    }
    if (hasValue(dotNetObject.hasError)) {
        properties.hasError = dotNetObject.hasError;
    }
    let jsGraphApplyEditsResult = new GraphApplyEditsResult(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsGraphApplyEditsResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsGraphApplyEditsResult;
    
    return jsGraphApplyEditsResult;
}


export async function buildDotNetGraphApplyEditsResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGraphApplyEditsResult: any = {};
    
    if (hasValue(jsObject.editResults)) {
        let { buildDotNetEditResultsObject } = await import('./editResultsObject');
        dotNetGraphApplyEditsResult.editResults = await Promise.all(jsObject.editResults.map(async i => await buildDotNetEditResultsObject(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.error)) {
        dotNetGraphApplyEditsResult.error = jsObject.error;
    }
    
    if (hasValue(jsObject.hasError)) {
        dotNetGraphApplyEditsResult.hasError = jsObject.hasError;
    }
    

    return dotNetGraphApplyEditsResult;
}

