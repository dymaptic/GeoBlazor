// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import AttributeTableElement from '@arcgis/core/tables/elements/AttributeTableElement';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, sanitize, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetAttributeTableElement } from './attributeTableElement';
export async function buildJsAttributeTableElementGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }
    
    switch (dotNetObject.type) {
        case 'AttributeTableElementType':
            if (!hasValue(dotNetObject)) {
                return null;
            }

            let properties: any = {};

            if (hasValue(dotNetObject.description)) {
                properties.description = dotNetObject.description;
            }
            if (hasValue(dotNetObject.label)) {
                properties.label = dotNetObject.label;
            }
            let jsAttributeTableElement = new AttributeTableElement(properties);
    
            jsObjectRefs[dotNetObject.id] = jsAttributeTableElement;
            arcGisObjectRefs[dotNetObject.id] = jsAttributeTableElement;
    
            return jsAttributeTableElement;

        case 'field': 
            let { buildJsAttributeTableFieldElement } = await import('./attributeTableFieldElement');
            return await buildJsAttributeTableFieldElement(dotNetObject, layerId, viewId);
        case 'attachment': 
            let { buildJsAttributeTableAttachmentElement } = await import('./attributeTableAttachmentElement');
            return await buildJsAttributeTableAttachmentElement(dotNetObject, layerId, viewId);
        case 'group': 
            let { buildJsAttributeTableGroupElement } = await import('./attributeTableGroupElement');
            return await buildJsAttributeTableGroupElement(dotNetObject, layerId, viewId);
        case 'RelationshipRendererGenerator': 
            let { buildJsAttributeTableRelationshipElement } = await import('./attributeTableRelationshipElement');
            return await buildJsAttributeTableRelationshipElement(dotNetObject, layerId, viewId);
        default: 
            return sanitize(dotNetObject);
    }
}     

export async function buildDotNetAttributeTableElementGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    switch (jsObject.type) {
        case 'AttributeTableElementType': 
            let dotNetAttributeTableElement: any = {};
            if (hasValue(jsObject.description)) {
                dotNetAttributeTableElement.description = jsObject.description;
            }
    
            if (hasValue(jsObject.label)) {
                dotNetAttributeTableElement.label = jsObject.label;
            }
    
            if (hasValue(jsObject.type)) {
                dotNetAttributeTableElement.type = removeCircularReferences(jsObject.type);
            }
    

            let geoBlazorId = lookupGeoBlazorId(jsObject);
            if (hasValue(geoBlazorId)) {
                dotNetAttributeTableElement.id = geoBlazorId;
            }

            return dotNetAttributeTableElement;

        case 'field': 
            let { buildDotNetAttributeTableFieldElement } = await import('./attributeTableFieldElement');
            return await buildDotNetAttributeTableFieldElement(jsObject);
        case 'attachment': 
            let { buildDotNetAttributeTableAttachmentElement } = await import('./attributeTableAttachmentElement');
            return await buildDotNetAttributeTableAttachmentElement(jsObject);
        case 'group': 
            let { buildDotNetAttributeTableGroupElement } = await import('./attributeTableGroupElement');
            return await buildDotNetAttributeTableGroupElement(jsObject);
        case 'RelationshipRendererGenerator': 
            let { buildDotNetAttributeTableRelationshipElement } = await import('./attributeTableRelationshipElement');
            return await buildDotNetAttributeTableRelationshipElement(jsObject);
        default: 
            return removeCircularReferences(jsObject);
    }
}     

