// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetLength } from './length';

export async function buildJsLengthGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsLength: any = {};

    if (hasValue(dotNetObject.unit)) {
        jsLength.unit = dotNetObject.unit;
    }
    if (hasValue(dotNetObject.value)) {
        jsLength.value = dotNetObject.value;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsLength);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLength;
    
    return jsLength;
}


export async function buildDotNetLengthGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLength: any = {};
    
    if (hasValue(jsObject.type)) {
        dotNetLength.type = jsObject.type;
    }
    
    if (hasValue(jsObject.unit)) {
        dotNetLength.unit = removeCircularReferences(jsObject.unit);
    }
    
    if (hasValue(jsObject.value)) {
        dotNetLength.value = jsObject.value;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetLength.id = geoBlazorId;
    }

    return dotNetLength;
}

