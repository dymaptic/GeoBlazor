// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import symbologyDotDensity = __esri.symbologyDotDensity;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SymbologyDotDensityGenerated implements IPropertyWrapper {
    public component: symbologyDotDensity;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: symbologyDotDensity) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async cloneScheme(scheme: any): Promise<any> {
        let { buildJsDotDensityScheme } = await import('./dotDensityScheme');
        let jsScheme = await buildJsDotDensityScheme(scheme, this.layerId, this.viewId) as any;
        return this.component.cloneScheme(jsScheme);
    }

    async getSchemeByName(parameters: any): Promise<any> {
        return this.component.getSchemeByName(parameters);
    }

    async getSchemes(parameters: any): Promise<any> {
        return this.component.getSchemes(parameters);
    }

    async getSchemesByTag(parameters: any): Promise<any> {
        return this.component.getSchemesByTag(parameters);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsSymbologyDotDensityGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jssymbologyDotDensity: any = {}


    let { default: SymbologyDotDensityWrapper } = await import('./symbologyDotDensity');
    let symbologyDotDensityWrapper = new SymbologyDotDensityWrapper(jssymbologyDotDensity);
    symbologyDotDensityWrapper.geoBlazorId = dotNetObject.id;
    symbologyDotDensityWrapper.viewId = viewId;
    symbologyDotDensityWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(symbologyDotDensityWrapper);
    jsObjectRefs[dotNetObject.id] = symbologyDotDensityWrapper;
    arcGisObjectRefs[dotNetObject.id] = jssymbologyDotDensity;
    let { buildDotNetSymbologyDotDensity } = await import('./symbologyDotDensity');
    let dnInstantiatedObject = await buildDotNetSymbologyDotDensity(jssymbologyDotDensity);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SymbologyDotDensity', e);
    }
    
    return jssymbologyDotDensity;
}

export async function buildDotNetSymbologyDotDensityGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSymbologyDotDensity: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSymbologyDotDensity.id = k;
                break;
            }
        }
    }

    return dotNetSymbologyDotDensity;
}

