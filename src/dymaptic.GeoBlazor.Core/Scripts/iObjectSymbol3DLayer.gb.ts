// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ObjectSymbol3DLayer from '@arcgis/core/symbols/ObjectSymbol3DLayer';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class IObjectSymbol3DLayerGenerated implements IPropertyWrapper {
    public layer: ObjectSymbol3DLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: ObjectSymbol3DLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    // region properties
    
    async getMaterial(): Promise<any> {
        if (!hasValue(this.layer.material)) {
            return null;
        }
        
        let { buildDotNetObjectSymbol3DLayerMaterial } = await import('./objectSymbol3DLayerMaterial');
        return await buildDotNetObjectSymbol3DLayerMaterial(this.layer.material);
    }
    async setMaterial(value: any): Promise<void> {
        let { buildJsObjectSymbol3DLayerMaterial } = await import('./objectSymbol3DLayerMaterial');
        this.layer.material = await  buildJsObjectSymbol3DLayerMaterial(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}


export async function buildJsIObjectSymbol3DLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsObjectSymbol3DLayer = new ObjectSymbol3DLayer();
    if (hasValue(dotNetObject.material)) {
        let { buildJsObjectSymbol3DLayerMaterial } = await import('./objectSymbol3DLayerMaterial');
        jsObjectSymbol3DLayer.material = await buildJsObjectSymbol3DLayerMaterial(dotNetObject.material, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.anchor)) {
        jsObjectSymbol3DLayer.anchor = dotNetObject.anchor;
    }
    if (hasValue(dotNetObject.anchorPosition)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedAnchorPosition } = dotNetObject.anchorPosition;
        jsObjectSymbol3DLayer.anchorPosition = sanitizedAnchorPosition;
    }
    if (hasValue(dotNetObject.castShadows)) {
        jsObjectSymbol3DLayer.castShadows = dotNetObject.castShadows;
    }
    if (hasValue(dotNetObject.depth)) {
        jsObjectSymbol3DLayer.depth = dotNetObject.depth;
    }
    if (hasValue(dotNetObject.heading)) {
        jsObjectSymbol3DLayer.heading = dotNetObject.heading;
    }
    if (hasValue(dotNetObject.height)) {
        jsObjectSymbol3DLayer.height = dotNetObject.height;
    }
    if (hasValue(dotNetObject.resource)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedResource } = dotNetObject.resource;
        jsObjectSymbol3DLayer.resource = sanitizedResource;
    }
    if (hasValue(dotNetObject.roll)) {
        jsObjectSymbol3DLayer.roll = dotNetObject.roll;
    }
    if (hasValue(dotNetObject.tilt)) {
        jsObjectSymbol3DLayer.tilt = dotNetObject.tilt;
    }
    if (hasValue(dotNetObject.width)) {
        jsObjectSymbol3DLayer.width = dotNetObject.width;
    }

    let { default: IObjectSymbol3DLayerWrapper } = await import('./iObjectSymbol3DLayer');
    let iObjectSymbol3DLayerWrapper = new IObjectSymbol3DLayerWrapper(jsObjectSymbol3DLayer);
    iObjectSymbol3DLayerWrapper.geoBlazorId = dotNetObject.id;
    iObjectSymbol3DLayerWrapper.viewId = viewId;
    iObjectSymbol3DLayerWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(iObjectSymbol3DLayerWrapper);
    jsObjectRefs[dotNetObject.id] = iObjectSymbol3DLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsObjectSymbol3DLayer;
    let { buildDotNetIObjectSymbol3DLayer } = await import('./iObjectSymbol3DLayer');
    let dnInstantiatedObject = await buildDotNetIObjectSymbol3DLayer(jsObjectSymbol3DLayer);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for IObjectSymbol3DLayer', e);
    }
    
    return jsObjectSymbol3DLayer;
}

export async function buildDotNetIObjectSymbol3DLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIObjectSymbol3DLayer: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.material)) {
            let { buildDotNetObjectSymbol3DLayerMaterial } = await import('./objectSymbol3DLayerMaterial');
            dotNetIObjectSymbol3DLayer.material = await buildDotNetObjectSymbol3DLayerMaterial(jsObject.material);
        }
        if (hasValue(jsObject.anchor)) {
            dotNetIObjectSymbol3DLayer.anchor = jsObject.anchor;
        }
        if (hasValue(jsObject.anchorPosition)) {
            dotNetIObjectSymbol3DLayer.anchorPosition = jsObject.anchorPosition;
        }
        if (hasValue(jsObject.castShadows)) {
            dotNetIObjectSymbol3DLayer.castShadows = jsObject.castShadows;
        }
        if (hasValue(jsObject.depth)) {
            dotNetIObjectSymbol3DLayer.depth = jsObject.depth;
        }
        if (hasValue(jsObject.heading)) {
            dotNetIObjectSymbol3DLayer.heading = jsObject.heading;
        }
        if (hasValue(jsObject.height)) {
            dotNetIObjectSymbol3DLayer.height = jsObject.height;
        }
        if (hasValue(jsObject.resource)) {
            dotNetIObjectSymbol3DLayer.resource = jsObject.resource;
        }
        if (hasValue(jsObject.roll)) {
            dotNetIObjectSymbol3DLayer.roll = jsObject.roll;
        }
        if (hasValue(jsObject.tilt)) {
            dotNetIObjectSymbol3DLayer.tilt = jsObject.tilt;
        }
        if (hasValue(jsObject.type)) {
            dotNetIObjectSymbol3DLayer.type = jsObject.type;
        }
        if (hasValue(jsObject.width)) {
            dotNetIObjectSymbol3DLayer.width = jsObject.width;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetIObjectSymbol3DLayer.id = k;
                break;
            }
        }
    }

    return dotNetIObjectSymbol3DLayer;
}

