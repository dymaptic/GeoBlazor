// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import LayerListViewModel from '@arcgis/core/widgets/LayerList/LayerListViewModel';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, buildJsStreamReference } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class LayerListViewModelGenerated implements IPropertyWrapper {
    public component: LayerListViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: LayerListViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {

        if (hasValue(dotNetObject.checkPublishStatusEnabled)) {
            this.component.checkPublishStatusEnabled = dotNetObject.checkPublishStatusEnabled;
        }
        if (hasValue(dotNetObject.listModeDisabled)) {
            this.component.listModeDisabled = dotNetObject.listModeDisabled;
        }
    }
    
    async moveListItem(targetItem: any,
        fromParentItem: any,
        toParentItem: any,
        newIndex: any): Promise<void> {
        let { buildJsListItem } = await import('./listItem');
        let jsTargetItem = await buildJsListItem(targetItem, this.layerId, this.viewId) as any;
        let jsFromParentItem = await buildJsListItem(fromParentItem, this.layerId, this.viewId) as any;
        let jsToParentItem = await buildJsListItem(toParentItem, this.layerId, this.viewId) as any;
        this.component.moveListItem(jsTargetItem,
            jsFromParentItem,
            jsToParentItem,
            newIndex);
    }

    async triggerAction(action: any,
        item: any): Promise<void> {
        let { buildJsActionBase } = await import('./actionBase');
        let jsAction = buildJsActionBase(action) as any;
        let { buildJsListItem } = await import('./listItem');
        let jsItem = await buildJsListItem(item, this.layerId, this.viewId) as any;
        this.component.triggerAction(jsAction,
            jsItem);
    }

    // region properties
    
    async getOperationalItems(): Promise<any> {
        if (!hasValue(this.component.operationalItems)) {
            return null;
        }
        
        let { buildDotNetListItem } = await import('./listItem');
        return await Promise.all(this.component.operationalItems!.map(async i => await buildDotNetListItem(i, this.viewId)));
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsLayerListViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.hasListItemCreatedFunction) && dotNetObject.hasListItemCreatedFunction) {
        properties.listItemCreatedFunction = async (event) => {

            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsListItemCreatedFunction', event);
        };
    }

    if (hasValue(dotNetObject.checkPublishStatusEnabled)) {
        properties.checkPublishStatusEnabled = dotNetObject.checkPublishStatusEnabled;
    }
    if (hasValue(dotNetObject.listModeDisabled)) {
        properties.listModeDisabled = dotNetObject.listModeDisabled;
    }
    let jsLayerListViewModel = new LayerListViewModel(properties);
    if (hasValue(dotNetObject.hasTriggerActionListener) && dotNetObject.hasTriggerActionListener) {
        jsLayerListViewModel.on('trigger-action', async (evt: any) => {
            requestAnimationFrame(async () => {
                let { buildDotNetLayerListViewModelTriggerActionEvent } = await import('./layerListViewModelTriggerActionEvent');
                let dnEvent = await buildDotNetLayerListViewModelTriggerActionEvent(evt, layerId, viewId);
                let streamRef = buildJsStreamReference(dnEvent ?? {});
                await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsTriggerAction', streamRef);
            });
        });
    }
    

    let { default: LayerListViewModelWrapper } = await import('./layerListViewModel');
    let layerListViewModelWrapper = new LayerListViewModelWrapper(jsLayerListViewModel);
    layerListViewModelWrapper.geoBlazorId = dotNetObject.id;
    layerListViewModelWrapper.viewId = viewId;
    layerListViewModelWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = layerListViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsLayerListViewModel;
    
    return jsLayerListViewModel;
}


export async function buildDotNetLayerListViewModelGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLayerListViewModel: any = {};
    
    if (hasValue(jsObject.operationalItems)) {
        let { buildDotNetListItem } = await import('./listItem');
        dotNetLayerListViewModel.operationalItems = await Promise.all(jsObject.operationalItems.map(async i => await buildDotNetListItem(i, viewId)));
    }
    
    if (hasValue(jsObject.checkPublishStatusEnabled)) {
        dotNetLayerListViewModel.checkPublishStatusEnabled = jsObject.checkPublishStatusEnabled;
    }
    
    if (hasValue(jsObject.listModeDisabled)) {
        dotNetLayerListViewModel.listModeDisabled = jsObject.listModeDisabled;
    }
    
    if (hasValue(jsObject.state)) {
        dotNetLayerListViewModel.state = removeCircularReferences(jsObject.state);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetLayerListViewModel.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        if (hasValue(dotNetRef)) {
            try {
                dotNetLayerListViewModel.id = await dotNetRef.invokeMethodAsync('GetId');
            } catch (e) {
                console.error('Error invoking GetId for LayerListViewModel', e);
            }
        }
    }
    if (hasValue(dotNetLayerListViewModel.id)) {
        jsObjectRefs[dotNetLayerListViewModel.id] ??= jsObject;
        arcGisObjectRefs[dotNetLayerListViewModel.id] ??= jsObject;
    }

    return dotNetLayerListViewModel;
}

