// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetFeatureServiceResourcesBundle } from './featureServiceResourcesBundle';

export async function buildJsFeatureServiceResourcesBundleGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureServiceResourcesBundle: any = {}
    if (hasValue(dotNetObject.featureService)) {
        let { buildJsFeatureService } = await import('./featureService');
        jsFeatureServiceResourcesBundle.featureService = await buildJsFeatureService(dotNetObject.featureService, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.layers)) {
        let { buildJsFeatureLayer } = await import('./featureLayer');
        jsFeatureServiceResourcesBundle.layers = await Promise.all(dotNetObject.layers.map(async i => await buildJsFeatureLayer(i, layerId, viewId))) as any;
    }

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureServiceResourcesBundle);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureServiceResourcesBundle;
    
    let dnInstantiatedObject = await buildDotNetFeatureServiceResourcesBundle(jsFeatureServiceResourcesBundle);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureServiceResourcesBundle', e);
    }
    
    return jsFeatureServiceResourcesBundle;
}

export async function buildDotNetFeatureServiceResourcesBundleGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureServiceResourcesBundle: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.featureService)) {
            let { buildDotNetFeatureService } = await import('./featureService');
            dotNetFeatureServiceResourcesBundle.featureService = await buildDotNetFeatureService(jsObject.featureService);
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFeatureServiceResourcesBundle.id = k;
                break;
            }
        }
    }

    return dotNetFeatureServiceResourcesBundle;
}

