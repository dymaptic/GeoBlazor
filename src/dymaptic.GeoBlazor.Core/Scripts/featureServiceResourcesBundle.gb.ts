// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import FeatureServiceResourcesBundle = __esri.FeatureServiceResourcesBundle;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FeatureServiceResourcesBundleGenerated implements IPropertyWrapper {
    public component: FeatureServiceResourcesBundle;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: FeatureServiceResourcesBundle) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getFeatureService(): Promise<any> {
        if (!hasValue(this.component.featureService)) {
            return null;
        }
        
        let { buildDotNetFeatureService } = await import('./featureService');
        return await buildDotNetFeatureService(this.component.featureService);
    }
    async setFeatureService(value: any): Promise<void> {
        let { buildJsFeatureService } = await import('./featureService');
        this.component.featureService = await  buildJsFeatureService(value, this.layerId, this.viewId);
    }
    async getLayers(): Promise<any> {
        if (!hasValue(this.component.layers)) {
            return null;
        }
        
        let { buildDotNetFeatureLayer } = await import('./featureLayer');
        return await Promise.all(this.component.layers.map(async i => await buildDotNetFeatureLayer(i)));
    }
    
    async setLayers(value: any): Promise<void> {
        let { buildJsFeatureLayer } = await import('./featureLayer');
        this.component.layers = await Promise.all(value.map(async i => await buildJsFeatureLayer(i, this.layerId, this.viewId))) as any;
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsFeatureServiceResourcesBundleGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureServiceResourcesBundle: any = {}
    if (hasValue(dotNetObject.featureService)) {
        let { buildJsFeatureService } = await import('./featureService');
        jsFeatureServiceResourcesBundle.featureService = await buildJsFeatureService(dotNetObject.featureService, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.layers)) {
        let { buildJsFeatureLayer } = await import('./featureLayer');
        jsFeatureServiceResourcesBundle.layers = await Promise.all(dotNetObject.layers.map(async i => await buildJsFeatureLayer(i, layerId, viewId))) as any;
    }


    let { default: FeatureServiceResourcesBundleWrapper } = await import('./featureServiceResourcesBundle');
    let featureServiceResourcesBundleWrapper = new FeatureServiceResourcesBundleWrapper(jsFeatureServiceResourcesBundle);
    featureServiceResourcesBundleWrapper.geoBlazorId = dotNetObject.id;
    featureServiceResourcesBundleWrapper.viewId = viewId;
    featureServiceResourcesBundleWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(featureServiceResourcesBundleWrapper);
    jsObjectRefs[dotNetObject.id] = featureServiceResourcesBundleWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureServiceResourcesBundle;
    let { buildDotNetFeatureServiceResourcesBundle } = await import('./featureServiceResourcesBundle');
    let dnInstantiatedObject = await buildDotNetFeatureServiceResourcesBundle(jsFeatureServiceResourcesBundle);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureServiceResourcesBundle', e);
    }
    
    return jsFeatureServiceResourcesBundle;
}
export async function buildDotNetFeatureServiceResourcesBundleGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureServiceResourcesBundle: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.featureService)) {
            let { buildDotNetFeatureService } = await import('./featureService');
            dotNetFeatureServiceResourcesBundle.featureService = await buildDotNetFeatureService(jsObject.featureService);
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFeatureServiceResourcesBundle.id = k;
                break;
            }
        }
    }

    return dotNetFeatureServiceResourcesBundle;
}

