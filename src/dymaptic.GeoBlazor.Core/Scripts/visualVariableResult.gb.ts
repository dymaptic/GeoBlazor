// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetVisualVariableResult } from './visualVariableResult';

export async function buildJsVisualVariableResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsVisualVariableResult: any = {};
    if (hasValue(dotNetObject.authoringInfo)) {
        let { buildJsAuthoringInfo } = await import('./authoringInfo');
        jsVisualVariableResult.authoringInfo = await buildJsAuthoringInfo(dotNetObject.authoringInfo, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.visualVariable)) {
        let { buildJsColorVariable } = await import('./colorVariable');
        jsVisualVariableResult.visualVariable = await buildJsColorVariable(dotNetObject.visualVariable, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.basemapId)) {
        jsVisualVariableResult.basemapId = dotNetObject.basemapId;
    }
    if (hasValue(dotNetObject.basemapTheme)) {
        jsVisualVariableResult.basemapTheme = dotNetObject.basemapTheme;
    }
    if (hasValue(dotNetObject.colorScheme)) {
        jsVisualVariableResult.colorScheme = dotNetObject.colorScheme;
    }
    if (hasValue(dotNetObject.defaultValuesUsed)) {
        jsVisualVariableResult.defaultValuesUsed = dotNetObject.defaultValuesUsed;
    }
    if (hasValue(dotNetObject.statistics)) {
        jsVisualVariableResult.statistics = dotNetObject.statistics;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsVisualVariableResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsVisualVariableResult;
    
    let dnInstantiatedObject = await buildDotNetVisualVariableResult(jsVisualVariableResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for VisualVariableResult', e);
    }
    
    return jsVisualVariableResult;
}

export async function buildDotNetVisualVariableResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVisualVariableResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.authoringInfo)) {
            let { buildDotNetAuthoringInfo } = await import('./authoringInfo');
            dotNetVisualVariableResult.authoringInfo = await buildDotNetAuthoringInfo(jsObject.authoringInfo);
        }
        if (hasValue(jsObject.visualVariable)) {
            let { buildDotNetColorVariable } = await import('./colorVariable');
            dotNetVisualVariableResult.visualVariable = await buildDotNetColorVariable(jsObject.visualVariable);
        }
    if (hasValue(jsObject.basemapId)) {
        dotNetVisualVariableResult.basemapId = jsObject.basemapId;
    }
    if (hasValue(jsObject.basemapTheme)) {
        dotNetVisualVariableResult.basemapTheme = jsObject.basemapTheme;
    }
    if (hasValue(jsObject.colorScheme)) {
        dotNetVisualVariableResult.colorScheme = jsObject.colorScheme;
    }
    if (hasValue(jsObject.defaultValuesUsed)) {
        dotNetVisualVariableResult.defaultValuesUsed = jsObject.defaultValuesUsed;
    }
    if (hasValue(jsObject.statistics)) {
        dotNetVisualVariableResult.statistics = jsObject.statistics;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetVisualVariableResult.id = k;
                break;
            }
        }
    }

    return dotNetVisualVariableResult;
}

