// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Search from '@arcgis/core/webdoc/applicationProperties/Search';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSearch } from './search';

export async function buildJsSearchGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.addressSearchEnabled)) {
        properties.addressSearchEnabled = dotNetObject.addressSearchEnabled;
    }
    if (hasValue(dotNetObject.enabled)) {
        properties.enabled = dotNetObject.enabled;
    }
    if (hasValue(dotNetObject.hintText)) {
        properties.hintText = dotNetObject.hintText;
    }
    if (hasValue(dotNetObject.layers)) {
        const { id, dotNetComponentReference, ...sanitizedLayers } = dotNetObject.layers;
        properties.layers = sanitizedLayers;
    }
    if (hasValue(dotNetObject.tables)) {
        const { id, dotNetComponentReference, ...sanitizedTables } = dotNetObject.tables;
        properties.tables = sanitizedTables;
    }
    let jsSearch = new Search(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSearch);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSearch;
    
    let { buildDotNetSearch } = await import('./search');
    let dnInstantiatedObject = await buildDotNetSearch(jsSearch);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type Search detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Search', e);
    }
    
    return jsSearch;
}


export async function buildDotNetSearchGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearch: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.addressSearchEnabled)) {
        dotNetSearch.addressSearchEnabled = jsObject.addressSearchEnabled;
    }
    if (hasValue(jsObject.enabled)) {
        dotNetSearch.enabled = jsObject.enabled;
    }
    if (hasValue(jsObject.hintText)) {
        dotNetSearch.hintText = jsObject.hintText;
    }
    if (hasValue(jsObject.layers)) {
        dotNetSearch.layers = jsObject.layers;
    }
    if (hasValue(jsObject.tables)) {
        dotNetSearch.tables = jsObject.tables;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSearch.id = k;
                break;
            }
        }
    }

    return dotNetSearch;
}

