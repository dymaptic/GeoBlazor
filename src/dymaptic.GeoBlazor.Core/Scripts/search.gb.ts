// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Search from '@arcgis/core/webdoc/applicationProperties/Search';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetSearch } from './search';

export async function buildJsSearchGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.layers) && dotNetObject.layers.length > 0) {
        let { buildJsSearchLayer } = await import('./searchLayer');
        properties.layers = await Promise.all(dotNetObject.layers.map(async i => await buildJsSearchLayer(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.tables) && dotNetObject.tables.length > 0) {
        let { buildJsSearchTable } = await import('./searchTable');
        properties.tables = await Promise.all(dotNetObject.tables.map(async i => await buildJsSearchTable(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.addressSearchEnabled)) {
        properties.addressSearchEnabled = dotNetObject.addressSearchEnabled;
    }
    if (hasValue(dotNetObject.enabled)) {
        properties.enabled = dotNetObject.enabled;
    }
    if (hasValue(dotNetObject.hintText)) {
        properties.hintText = dotNetObject.hintText;
    }
    let jsSearch = new Search(properties);
    
    jsObjectRefs[dotNetObject.id] = jsSearch;
    arcGisObjectRefs[dotNetObject.id] = jsSearch;
    
    return jsSearch;
}


export async function buildDotNetSearchGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearch: any = {};
    
    if (hasValue(jsObject.layers)) {
        let { buildDotNetSearchLayer } = await import('./searchLayer');
        dotNetSearch.layers = await Promise.all(jsObject.layers.map(async i => await buildDotNetSearchLayer(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.tables)) {
        let { buildDotNetSearchTable } = await import('./searchTable');
        dotNetSearch.tables = await Promise.all(jsObject.tables.map(async i => await buildDotNetSearchTable(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.addressSearchEnabled)) {
        dotNetSearch.addressSearchEnabled = jsObject.addressSearchEnabled;
    }
    
    if (hasValue(jsObject.enabled)) {
        dotNetSearch.enabled = jsObject.enabled;
    }
    
    if (hasValue(jsObject.hintText)) {
        dotNetSearch.hintText = jsObject.hintText;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSearch.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetSearch.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetSearch.id)) {
        jsObjectRefs[dotNetSearch.id] ??= jsObject;
        arcGisObjectRefs[dotNetSearch.id] ??= jsObject;
    }

    return dotNetSearch;
}

