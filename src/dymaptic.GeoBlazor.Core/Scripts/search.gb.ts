// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Search from '@arcgis/core/webdoc/applicationProperties/Search';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSearch } from './search';

export async function buildJsSearchGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSearch = new Search();
    if (hasValue(dotNetObject.layers)) {
        let { buildJsISearchLayer } = await import('./iSearchLayer');
        jsSearch.layers = await Promise.all(dotNetObject.layers.map(async i => await buildJsISearchLayer(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.addressSearchEnabled)) {
        jsSearch.addressSearchEnabled = dotNetObject.addressSearchEnabled;
    }
    if (hasValue(dotNetObject.enabled)) {
        jsSearch.enabled = dotNetObject.enabled;
    }
    if (hasValue(dotNetObject.hintText)) {
        jsSearch.hintText = dotNetObject.hintText;
    }
    if (hasValue(dotNetObject.tables)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedTables } = dotNetObject.tables;
        jsSearch.tables = sanitizedTables;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsSearch);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSearch;
    
    let dnInstantiatedObject = await buildDotNetSearch(jsSearch);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Search', e);
    }
    
    return jsSearch;
}

export async function buildDotNetSearchGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearch: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.addressSearchEnabled)) {
            dotNetSearch.addressSearchEnabled = jsObject.addressSearchEnabled;
        }
        if (hasValue(jsObject.enabled)) {
            dotNetSearch.enabled = jsObject.enabled;
        }
        if (hasValue(jsObject.hintText)) {
            dotNetSearch.hintText = jsObject.hintText;
        }
        if (hasValue(jsObject.tables)) {
            dotNetSearch.tables = jsObject.tables;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSearch.id = k;
                break;
            }
        }
    }

    return dotNetSearch;
}

