// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Search from '@arcgis/core/webdoc/applicationProperties/Search';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetSearch } from './search';

export async function buildJsSearchGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.layers)) {
        let { buildJsSearchLayer } = await import('./searchLayer');
        properties.layers = await Promise.all(dotNetObject.layers.map(async i => await buildJsSearchLayer(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.tables)) {
        let { buildJsSearchTable } = await import('./searchTable');
        properties.tables = await Promise.all(dotNetObject.tables.map(async i => await buildJsSearchTable(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.addressSearchEnabled)) {
        properties.addressSearchEnabled = dotNetObject.addressSearchEnabled;
    }
    if (hasValue(dotNetObject.enabled)) {
        properties.enabled = dotNetObject.enabled;
    }
    if (hasValue(dotNetObject.hintText)) {
        properties.hintText = dotNetObject.hintText;
    }
    let jsSearch = new Search(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSearch);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSearch;
    
    let { buildDotNetSearch } = await import('./search');
    let dnInstantiatedObject = await buildDotNetSearch(jsSearch);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type Search detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Search', e);
    }
    
    return jsSearch;
}


export async function buildDotNetSearchGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearch: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.layers)) {
        let { buildDotNetSearchLayer } = await import('./searchLayer');
        dotNetSearch.layers = await Promise.all(jsObject.layers.map(async i => await buildDotNetSearchLayer(i)));
    }
    if (hasValue(jsObject.tables)) {
        let { buildDotNetSearchTable } = await import('./searchTable');
        dotNetSearch.tables = await Promise.all(jsObject.tables.map(async i => await buildDotNetSearchTable(i)));
    }
    if (hasValue(jsObject.addressSearchEnabled)) {
        dotNetSearch.addressSearchEnabled = jsObject.addressSearchEnabled;
    }
    if (hasValue(jsObject.enabled)) {
        dotNetSearch.enabled = jsObject.enabled;
    }
    if (hasValue(jsObject.hintText)) {
        dotNetSearch.hintText = jsObject.hintText;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSearch.id = geoBlazorId;
    }

    return dotNetSearch;
}

