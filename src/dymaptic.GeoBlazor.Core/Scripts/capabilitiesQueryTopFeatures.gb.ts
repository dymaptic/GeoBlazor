// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCapabilitiesQueryTopFeatures } from './capabilitiesQueryTopFeatures';

export async function buildJsCapabilitiesQueryTopFeaturesGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsCapabilitiesQueryTopFeatures: any = {};

    if (hasValue(dotNetObject.supportsCacheHint)) {
        jsCapabilitiesQueryTopFeatures.supportsCacheHint = dotNetObject.supportsCacheHint;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCapabilitiesQueryTopFeatures);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCapabilitiesQueryTopFeatures;
    
    return jsCapabilitiesQueryTopFeatures;
}


export async function buildDotNetCapabilitiesQueryTopFeaturesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCapabilitiesQueryTopFeatures: any = {};
    
    if (hasValue(jsObject.supportsCacheHint)) {
        dotNetCapabilitiesQueryTopFeatures.supportsCacheHint = jsObject.supportsCacheHint;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCapabilitiesQueryTopFeatures.id = geoBlazorId;
    }

    return dotNetCapabilitiesQueryTopFeatures;
}

