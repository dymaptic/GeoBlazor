// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCapabilitiesQueryAttributeBins } from './capabilitiesQueryAttributeBins';

export async function buildJsCapabilitiesQueryAttributeBinsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsCapabilitiesQueryAttributeBins: any = {};
    if (hasValue(dotNetObject.supportedNormalizationTypes)) {
        let { buildJsCapabilitiesQueryAttributeBinsSupportedNormalizationTypes } = await import('./capabilitiesQueryAttributeBinsSupportedNormalizationTypes');
        jsCapabilitiesQueryAttributeBins.supportedNormalizationTypes = await buildJsCapabilitiesQueryAttributeBinsSupportedNormalizationTypes(dotNetObject.supportedNormalizationTypes, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.supportedStatistics)) {
        let { buildJsCapabilitiesQueryAttributeBinsSupportedStatistics } = await import('./capabilitiesQueryAttributeBinsSupportedStatistics');
        jsCapabilitiesQueryAttributeBins.supportedStatistics = await buildJsCapabilitiesQueryAttributeBinsSupportedStatistics(dotNetObject.supportedStatistics, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.supportsAutoInterval)) {
        jsCapabilitiesQueryAttributeBins.supportsAutoInterval = dotNetObject.supportsAutoInterval;
    }
    if (hasValue(dotNetObject.supportsDate)) {
        jsCapabilitiesQueryAttributeBins.supportsDate = dotNetObject.supportsDate;
    }
    if (hasValue(dotNetObject.supportsFirstDayOfWeek)) {
        jsCapabilitiesQueryAttributeBins.supportsFirstDayOfWeek = dotNetObject.supportsFirstDayOfWeek;
    }
    if (hasValue(dotNetObject.supportsFixedBoundaries)) {
        jsCapabilitiesQueryAttributeBins.supportsFixedBoundaries = dotNetObject.supportsFixedBoundaries;
    }
    if (hasValue(dotNetObject.supportsFixedInterval)) {
        jsCapabilitiesQueryAttributeBins.supportsFixedInterval = dotNetObject.supportsFixedInterval;
    }
    if (hasValue(dotNetObject.supportsNormalization)) {
        jsCapabilitiesQueryAttributeBins.supportsNormalization = dotNetObject.supportsNormalization;
    }
    if (hasValue(dotNetObject.supportsReturnFullIntervalBin)) {
        jsCapabilitiesQueryAttributeBins.supportsReturnFullIntervalBin = dotNetObject.supportsReturnFullIntervalBin;
    }
    if (hasValue(dotNetObject.supportsSnapToData)) {
        jsCapabilitiesQueryAttributeBins.supportsSnapToData = dotNetObject.supportsSnapToData;
    }
    if (hasValue(dotNetObject.supportsSplitBy)) {
        jsCapabilitiesQueryAttributeBins.supportsSplitBy = dotNetObject.supportsSplitBy;
    }
    if (hasValue(dotNetObject.supportsStackBy)) {
        jsCapabilitiesQueryAttributeBins.supportsStackBy = dotNetObject.supportsStackBy;
    }
    
    jsObjectRefs[dotNetObject.id] = jsCapabilitiesQueryAttributeBins;
    arcGisObjectRefs[dotNetObject.id] = jsCapabilitiesQueryAttributeBins;
    
    return jsCapabilitiesQueryAttributeBins;
}


export async function buildDotNetCapabilitiesQueryAttributeBinsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCapabilitiesQueryAttributeBins: any = {};
    
    if (hasValue(jsObject.supportedNormalizationTypes)) {
        let { buildDotNetCapabilitiesQueryAttributeBinsSupportedNormalizationTypes } = await import('./capabilitiesQueryAttributeBinsSupportedNormalizationTypes');
        dotNetCapabilitiesQueryAttributeBins.supportedNormalizationTypes = await buildDotNetCapabilitiesQueryAttributeBinsSupportedNormalizationTypes(jsObject.supportedNormalizationTypes);
    }
    
    if (hasValue(jsObject.supportedStatistics)) {
        let { buildDotNetCapabilitiesQueryAttributeBinsSupportedStatistics } = await import('./capabilitiesQueryAttributeBinsSupportedStatistics');
        dotNetCapabilitiesQueryAttributeBins.supportedStatistics = await buildDotNetCapabilitiesQueryAttributeBinsSupportedStatistics(jsObject.supportedStatistics);
    }
    
    if (hasValue(jsObject.supportsAutoInterval)) {
        dotNetCapabilitiesQueryAttributeBins.supportsAutoInterval = jsObject.supportsAutoInterval;
    }
    
    if (hasValue(jsObject.supportsDate)) {
        dotNetCapabilitiesQueryAttributeBins.supportsDate = jsObject.supportsDate;
    }
    
    if (hasValue(jsObject.supportsFirstDayOfWeek)) {
        dotNetCapabilitiesQueryAttributeBins.supportsFirstDayOfWeek = jsObject.supportsFirstDayOfWeek;
    }
    
    if (hasValue(jsObject.supportsFixedBoundaries)) {
        dotNetCapabilitiesQueryAttributeBins.supportsFixedBoundaries = jsObject.supportsFixedBoundaries;
    }
    
    if (hasValue(jsObject.supportsFixedInterval)) {
        dotNetCapabilitiesQueryAttributeBins.supportsFixedInterval = jsObject.supportsFixedInterval;
    }
    
    if (hasValue(jsObject.supportsNormalization)) {
        dotNetCapabilitiesQueryAttributeBins.supportsNormalization = jsObject.supportsNormalization;
    }
    
    if (hasValue(jsObject.supportsReturnFullIntervalBin)) {
        dotNetCapabilitiesQueryAttributeBins.supportsReturnFullIntervalBin = jsObject.supportsReturnFullIntervalBin;
    }
    
    if (hasValue(jsObject.supportsSnapToData)) {
        dotNetCapabilitiesQueryAttributeBins.supportsSnapToData = jsObject.supportsSnapToData;
    }
    
    if (hasValue(jsObject.supportsSplitBy)) {
        dotNetCapabilitiesQueryAttributeBins.supportsSplitBy = jsObject.supportsSplitBy;
    }
    
    if (hasValue(jsObject.supportsStackBy)) {
        dotNetCapabilitiesQueryAttributeBins.supportsStackBy = jsObject.supportsStackBy;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCapabilitiesQueryAttributeBins.id = geoBlazorId;
    }

    return dotNetCapabilitiesQueryAttributeBins;
}

