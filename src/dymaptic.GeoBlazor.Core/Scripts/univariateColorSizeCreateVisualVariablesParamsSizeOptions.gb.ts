import { buildDotNetUnivariateColorSizeCreateVisualVariablesParamsSizeOptions } from './univariateColorSizeCreateVisualVariablesParamsSizeOptions';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import univariateColorSizeCreateVisualVariablesParamsSizeOptions = __esri.univariateColorSizeCreateVisualVariablesParamsSizeOptions;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsUnivariateColorSizeCreateVisualVariablesParamsSizeOptionsGenerated(dotNetObject: any): Promise<any> {
    let jsunivariateColorSizeCreateVisualVariablesParamsSizeOptions: any = {}

    if (hasValue(dotNetObject.axis)) {
        jsunivariateColorSizeCreateVisualVariablesParamsSizeOptions.axis = dotNetObject.axis;
    }
    if (hasValue(dotNetObject.legendOptions)) {
        jsunivariateColorSizeCreateVisualVariablesParamsSizeOptions.legendOptions = dotNetObject.legendOptions;
    }
    if (hasValue(dotNetObject.sizeScheme)) {
        jsunivariateColorSizeCreateVisualVariablesParamsSizeOptions.sizeScheme = dotNetObject.sizeScheme;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsunivariateColorSizeCreateVisualVariablesParamsSizeOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsunivariateColorSizeCreateVisualVariablesParamsSizeOptions;
    
    let dnInstantiatedObject = await buildDotNetUnivariateColorSizeCreateVisualVariablesParamsSizeOptions(jsunivariateColorSizeCreateVisualVariablesParamsSizeOptions);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for UnivariateColorSizeCreateVisualVariablesParamsSizeOptions', e);
    }
    
    return jsunivariateColorSizeCreateVisualVariablesParamsSizeOptions;
}
export async function buildDotNetUnivariateColorSizeCreateVisualVariablesParamsSizeOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUnivariateColorSizeCreateVisualVariablesParamsSizeOptions: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.axis)) {
            dotNetUnivariateColorSizeCreateVisualVariablesParamsSizeOptions.axis = jsObject.axis;
        }
        if (hasValue(jsObject.legendOptions)) {
            dotNetUnivariateColorSizeCreateVisualVariablesParamsSizeOptions.legendOptions = jsObject.legendOptions;
        }
        if (hasValue(jsObject.sizeScheme)) {
            dotNetUnivariateColorSizeCreateVisualVariablesParamsSizeOptions.sizeScheme = jsObject.sizeScheme;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetUnivariateColorSizeCreateVisualVariablesParamsSizeOptions.id = k;
                break;
            }
        }
    }

    return dotNetUnivariateColorSizeCreateVisualVariablesParamsSizeOptions;
}

