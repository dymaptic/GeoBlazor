// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetDotDensityCreateRendererParams } from './dotDensityCreateRendererParams';

export async function buildJsDotDensityCreateRendererParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsdotDensityCreateRendererParams: any = {}
    if (hasValue(dotNetObject.dotDensityScheme)) {
        let { buildJsDotDensityScheme } = await import('./dotDensityScheme');
        jsdotDensityCreateRendererParams.dotDensityScheme = await buildJsDotDensityScheme(dotNetObject.dotDensityScheme, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsdotDensityCreateRendererParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.attributes)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedAttributes } = dotNetObject.attributes;
        jsdotDensityCreateRendererParams.attributes = sanitizedAttributes;
    }
    if (hasValue(dotNetObject.dotBlendingEnabled)) {
        jsdotDensityCreateRendererParams.dotBlendingEnabled = dotNetObject.dotBlendingEnabled;
    }
    if (hasValue(dotNetObject.dotValueOptimizationEnabled)) {
        jsdotDensityCreateRendererParams.dotValueOptimizationEnabled = dotNetObject.dotValueOptimizationEnabled;
    }
    if (hasValue(dotNetObject.forBinning)) {
        jsdotDensityCreateRendererParams.forBinning = dotNetObject.forBinning;
    }
    if (hasValue(dotNetObject.legendOptions)) {
        jsdotDensityCreateRendererParams.legendOptions = dotNetObject.legendOptions;
    }
    if (hasValue(dotNetObject.outlineOptimizationEnabled)) {
        jsdotDensityCreateRendererParams.outlineOptimizationEnabled = dotNetObject.outlineOptimizationEnabled;
    }
    if (hasValue(dotNetObject.signal)) {
        jsdotDensityCreateRendererParams.signal = dotNetObject.signal;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsdotDensityCreateRendererParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsdotDensityCreateRendererParams;
    
    let dnInstantiatedObject = await buildDotNetDotDensityCreateRendererParams(jsdotDensityCreateRendererParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DotDensityCreateRendererParams', e);
    }
    
    return jsdotDensityCreateRendererParams;
}

export async function buildDotNetDotDensityCreateRendererParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDotDensityCreateRendererParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.dotDensityScheme)) {
            let { buildDotNetDotDensityScheme } = await import('./dotDensityScheme');
            dotNetDotDensityCreateRendererParams.dotDensityScheme = await buildDotNetDotDensityScheme(jsObject.dotDensityScheme);
        }
    if (hasValue(jsObject.attributes)) {
        dotNetDotDensityCreateRendererParams.attributes = jsObject.attributes;
    }
    if (hasValue(jsObject.dotBlendingEnabled)) {
        dotNetDotDensityCreateRendererParams.dotBlendingEnabled = jsObject.dotBlendingEnabled;
    }
    if (hasValue(jsObject.dotValueOptimizationEnabled)) {
        dotNetDotDensityCreateRendererParams.dotValueOptimizationEnabled = jsObject.dotValueOptimizationEnabled;
    }
    if (hasValue(jsObject.forBinning)) {
        dotNetDotDensityCreateRendererParams.forBinning = jsObject.forBinning;
    }
    if (hasValue(jsObject.legendOptions)) {
        dotNetDotDensityCreateRendererParams.legendOptions = jsObject.legendOptions;
    }
    if (hasValue(jsObject.outlineOptimizationEnabled)) {
        dotNetDotDensityCreateRendererParams.outlineOptimizationEnabled = jsObject.outlineOptimizationEnabled;
    }
    if (hasValue(jsObject.signal)) {
        dotNetDotDensityCreateRendererParams.signal = jsObject.signal;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetDotDensityCreateRendererParams.id = k;
                break;
            }
        }
    }

    return dotNetDotDensityCreateRendererParams;
}

