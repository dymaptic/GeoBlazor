// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetLayerViewDestroyEvent } from './layerViewDestroyEvent';

export async function buildJsLayerViewDestroyEventGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureLayerLayerviewDestroyEvent: any = {};
    if (hasValue(viewId)) {
        jsFeatureLayerLayerviewDestroyEvent.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.layerView)) {
        let { buildJsLayerView } = await import('./layerView');
        jsFeatureLayerLayerviewDestroyEvent.layerView = await buildJsLayerView(dotNetObject.layerView, layerId, viewId) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureLayerLayerviewDestroyEvent);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureLayerLayerviewDestroyEvent;
    
    return jsFeatureLayerLayerviewDestroyEvent;
}


export async function buildDotNetLayerViewDestroyEventGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsLayerViewDestroyEvent } = await import('./layerViewDestroyEvent');
        jsComponentRef = await buildJsLayerViewDestroyEvent(jsObject, layerId, viewId);
    }
    
    let dotNetLayerViewDestroyEvent: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.layerView)) {
        let { buildDotNetLayerView } = await import('./layerView');
        dotNetLayerViewDestroyEvent.layerView = await buildDotNetLayerView(jsObject.layerView);
    }

    return dotNetLayerViewDestroyEvent;
}

