// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetScaleRangeScaleRangeParams } from './scaleRangeScaleRangeParams';

export async function buildJsScaleRangeScaleRangeParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsscaleRangeScaleRangeParams: any = {};
    if (hasValue(viewId)) {
        jsscaleRangeScaleRangeParams.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsscaleRangeScaleRangeParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.forBinning)) {
        jsscaleRangeScaleRangeParams.forBinning = dotNetObject.forBinning;
    }
    if (hasValue(dotNetObject.sampleSize)) {
        jsscaleRangeScaleRangeParams.sampleSize = dotNetObject.sampleSize;
    }
    if (hasValue(dotNetObject.signal)) {
        jsscaleRangeScaleRangeParams.signal = dotNetObject.signal;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsscaleRangeScaleRangeParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsscaleRangeScaleRangeParams;
    
    return jsscaleRangeScaleRangeParams;
}


export async function buildDotNetScaleRangeScaleRangeParamsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsScaleRangeScaleRangeParams } = await import('./scaleRangeScaleRangeParams');
        jsComponentRef = await buildJsScaleRangeScaleRangeParams(jsObject, layerId, viewId);
    }
    
    let dotNetScaleRangeScaleRangeParams: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.forBinning)) {
        dotNetScaleRangeScaleRangeParams.forBinning = jsObject.forBinning;
    }
    if (hasValue(jsObject.sampleSize)) {
        dotNetScaleRangeScaleRangeParams.sampleSize = jsObject.sampleSize;
    }
    if (hasValue(jsObject.signal)) {
        dotNetScaleRangeScaleRangeParams.signal = jsObject.signal;
    }

    return dotNetScaleRangeScaleRangeParams;
}

