import { buildDotNetScaleRangeScaleRangeParams } from './scaleRangeScaleRangeParams';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import scaleRangeScaleRangeParams = __esri.scaleRangeScaleRangeParams;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsScaleRangeScaleRangeParamsGenerated(dotNetObject: any): Promise<any> {
    let jsscaleRangeScaleRangeParams: any = {}
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsscaleRangeScaleRangeParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.forBinning)) {
        jsscaleRangeScaleRangeParams.forBinning = dotNetObject.forBinning;
    }
    if (hasValue(dotNetObject.sampleSize)) {
        jsscaleRangeScaleRangeParams.sampleSize = dotNetObject.sampleSize;
    }
    if (hasValue(dotNetObject.signal)) {
        jsscaleRangeScaleRangeParams.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.view)) {
        jsscaleRangeScaleRangeParams.view = dotNetObject.view;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsscaleRangeScaleRangeParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsscaleRangeScaleRangeParams;
    
    let dnInstantiatedObject = await buildDotNetScaleRangeScaleRangeParams(jsscaleRangeScaleRangeParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ScaleRangeScaleRangeParams', e);
    }
    
    return jsscaleRangeScaleRangeParams;
}
export async function buildDotNetScaleRangeScaleRangeParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetScaleRangeScaleRangeParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.forBinning)) {
            dotNetScaleRangeScaleRangeParams.forBinning = jsObject.forBinning;
        }
        if (hasValue(jsObject.sampleSize)) {
            dotNetScaleRangeScaleRangeParams.sampleSize = jsObject.sampleSize;
        }
        if (hasValue(jsObject.signal)) {
            dotNetScaleRangeScaleRangeParams.signal = jsObject.signal;
        }
        if (hasValue(jsObject.view)) {
            dotNetScaleRangeScaleRangeParams.view = jsObject.view;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetScaleRangeScaleRangeParams.id = k;
                break;
            }
        }
    }

    return dotNetScaleRangeScaleRangeParams;
}

