// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetSceneViewConstraintsClipDistance } from './sceneViewConstraintsClipDistance';

export async function buildJsSceneViewConstraintsClipDistanceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsSceneViewConstraintsClipDistance: any = {};

    if (hasValue(dotNetObject.far)) {
        jsSceneViewConstraintsClipDistance.far = dotNetObject.far;
    }
    if (hasValue(dotNetObject.mode)) {
        jsSceneViewConstraintsClipDistance.mode = dotNetObject.mode;
    }
    if (hasValue(dotNetObject.near)) {
        jsSceneViewConstraintsClipDistance.near = dotNetObject.near;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSceneViewConstraintsClipDistance);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSceneViewConstraintsClipDistance;
    
    return jsSceneViewConstraintsClipDistance;
}


export async function buildDotNetSceneViewConstraintsClipDistanceGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSceneViewConstraintsClipDistance: any = {};
    
    if (hasValue(jsObject.far)) {
        dotNetSceneViewConstraintsClipDistance.far = jsObject.far;
    }
    
    if (hasValue(jsObject.mode)) {
        dotNetSceneViewConstraintsClipDistance.mode = removeCircularReferences(jsObject.mode);
    }
    
    if (hasValue(jsObject.near)) {
        dotNetSceneViewConstraintsClipDistance.near = jsObject.near;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSceneViewConstraintsClipDistance.id = geoBlazorId;
    }

    return dotNetSceneViewConstraintsClipDistance;
}

