// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import PortalFolder from '@arcgis/core/portal/PortalFolder';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetPortalFolder } from './portalFolder';

export async function buildJsPortalFolderGenerated(dotNetObject: any): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.created)) {
        properties.created = dotNetObject.created;
    }
    if (hasValue(dotNetObject.portalFolderId)) {
        properties.id = dotNetObject.portalFolderId;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    let jsPortalFolder = new PortalFolder(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsPortalFolder);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPortalFolder;
    
    try {
        let { buildDotNetPortalFolder } = await import('./portalFolder');
        let dnInstantiatedObject = await buildDotNetPortalFolder(jsPortalFolder);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type PortalFolder detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PortalFolder', e);
    }
    
    return jsPortalFolder;
}


export async function buildDotNetPortalFolderGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPortalFolder: any = {};
    
    if (hasValue(jsObject.created)) {
        dotNetPortalFolder.created = jsObject.created;
    }
    
    if (hasValue(jsObject.id)) {
        dotNetPortalFolder.portalFolderId = jsObject.id;
    }
    
    if (hasValue(jsObject.title)) {
        dotNetPortalFolder.title = jsObject.title;
    }
    
    if (hasValue(jsObject.url)) {
        dotNetPortalFolder.url = jsObject.url;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetPortalFolder.id = geoBlazorId;
    }

    return dotNetPortalFolder;
}

