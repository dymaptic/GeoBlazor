// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSlideEnvironment } from './slideEnvironment';

export async function buildJsSlideEnvironmentGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSlideEnvironment: any = {}

    if (hasValue(dotNetObject.lighting)) {
        jsSlideEnvironment.lighting = dotNetObject.lighting;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsSlideEnvironment);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSlideEnvironment;
    
    let dnInstantiatedObject = await buildDotNetSlideEnvironment(jsSlideEnvironment);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SlideEnvironment', e);
    }
    
    return jsSlideEnvironment;
}

export async function buildDotNetSlideEnvironmentGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSlideEnvironment: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.lighting)) {
            dotNetSlideEnvironment.lighting = jsObject.lighting;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSlideEnvironment.id = k;
                break;
            }
        }
    }

    return dotNetSlideEnvironment;
}

