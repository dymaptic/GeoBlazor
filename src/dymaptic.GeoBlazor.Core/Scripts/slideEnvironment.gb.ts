// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSlideEnvironment } from './slideEnvironment';

export async function buildJsSlideEnvironmentGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsSlideEnvironment: any = {};
    if (hasValue(dotNetObject.websceneSunLighting)) {
        let { buildJsWebsceneSunLighting } = await import('./websceneSunLighting');
        jsSlideEnvironment.lighting = await buildJsWebsceneSunLighting(dotNetObject.websceneSunLighting, layerId, viewId) as any;
    }
    else if (hasValue(dotNetObject.websceneVirtualLighting)) {
        let { buildJsWebsceneVirtualLighting } = await import('./websceneSunLighting');
        jsSlideEnvironment.lighting = await buildJsWebsceneVirtualLighting(dotNetObject.websceneVirtualLighting, layerId, viewId) as any;
    }

    
    jsObjectRefs[dotNetObject.id] = jsSlideEnvironment;
    arcGisObjectRefs[dotNetObject.id] = jsSlideEnvironment;
    
    return jsSlideEnvironment;
}


export async function buildDotNetSlideEnvironmentGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSlideEnvironment: any = {};
    
    if (hasValue(jsObject.lighting)) {
        let { buildDotNetWebsceneSunLighting } = await import('./websceneSunLighting');
        dotNetSlideEnvironment.lighting = await buildDotNetWebsceneSunLighting(jsObject.lighting, layerId, viewId);
    }
    

    return dotNetSlideEnvironment;
}

