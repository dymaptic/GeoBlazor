// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import DimensionLayerView from '@arcgis/core/views/layers/DimensionLayerView';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class DimensionLayerViewGenerated implements IPropertyWrapper {
    public component: DimensionLayerView;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: DimensionLayerView) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async createLengthDimensions(options: any): Promise<any> {
        return await this.component.createLengthDimensions(options);
    }

    // region properties
    
    async getLayer(): Promise<any> {
        if (!hasValue(this.component.layer)) {
            return null;
        }
        
        let { buildDotNetDimensionLayer } = await import('./dimensionLayer');
        return await buildDotNetDimensionLayer(this.component.layer);
    }
    async getResults(): Promise<any> {
        if (!hasValue(this.component.results)) {
            return null;
        }
        
        let { buildDotNetLengthDimensionResult } = await import('./lengthDimensionResult');
        return await Promise.all(this.component.results.map(async i => await buildDotNetLengthDimensionResult(i)));
    }
    
    async getSelectedDimension(): Promise<any> {
        if (!hasValue(this.component.selectedDimension)) {
            return null;
        }
        
        let { buildDotNetLengthDimension } = await import('./lengthDimension');
        return await buildDotNetLengthDimension(this.component.selectedDimension);
    }
    async setSelectedDimension(value: any): Promise<void> {
        let { buildJsLengthDimension } = await import('./lengthDimension');
        this.component.selectedDimension = await  buildJsLengthDimension(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsDimensionLayerViewGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.selectedDimension)) {
        let { buildJsLengthDimension } = await import('./lengthDimension');
        properties.selectedDimension = await buildJsLengthDimension(dotNetObject.selectedDimension, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.interactive)) {
        properties.interactive = dotNetObject.interactive;
    }
    let jsDimensionLayerView = new DimensionLayerView(properties);

    let { default: DimensionLayerViewWrapper } = await import('./dimensionLayerView');
    let dimensionLayerViewWrapper = new DimensionLayerViewWrapper(jsDimensionLayerView);
    dimensionLayerViewWrapper.geoBlazorId = dotNetObject.id;
    dimensionLayerViewWrapper.viewId = viewId;
    dimensionLayerViewWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(dimensionLayerViewWrapper);
    jsObjectRefs[dotNetObject.id] = dimensionLayerViewWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsDimensionLayerView;
    let { buildDotNetDimensionLayerView } = await import('./dimensionLayerView');
    let dnInstantiatedObject = await buildDotNetDimensionLayerView(jsDimensionLayerView);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DimensionLayerView', e);
    }
    
    return jsDimensionLayerView;
}

export async function buildDotNetDimensionLayerViewGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDimensionLayerView: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.results)) {
            let { buildDotNetLengthDimensionResult } = await import('./lengthDimensionResult');
            dotNetDimensionLayerView.results = await Promise.all(jsObject.results.map(async i => await buildDotNetLengthDimensionResult(i)));
        }
        if (hasValue(jsObject.selectedDimension)) {
            let { buildDotNetLengthDimension } = await import('./lengthDimension');
            dotNetDimensionLayerView.selectedDimension = await buildDotNetLengthDimension(jsObject.selectedDimension);
        }
    if (hasValue(jsObject.interactive)) {
        dotNetDimensionLayerView.interactive = jsObject.interactive;
    }
    if (hasValue(jsObject.spatialReferenceSupported)) {
        dotNetDimensionLayerView.spatialReferenceSupported = jsObject.spatialReferenceSupported;
    }
    if (hasValue(jsObject.suspended)) {
        dotNetDimensionLayerView.suspended = jsObject.suspended;
    }
    if (hasValue(jsObject.updating)) {
        dotNetDimensionLayerView.updating = jsObject.updating;
    }
    if (hasValue(jsObject.visibleAtCurrentScale)) {
        dotNetDimensionLayerView.visibleAtCurrentScale = jsObject.visibleAtCurrentScale;
    }
    if (hasValue(jsObject.visibleAtCurrentTimeExtent)) {
        dotNetDimensionLayerView.visibleAtCurrentTimeExtent = jsObject.visibleAtCurrentTimeExtent;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetDimensionLayerView.id = k;
                break;
            }
        }
    }

    return dotNetDimensionLayerView;
}

