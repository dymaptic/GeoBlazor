// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import LineCallout3D from '@arcgis/core/symbols/callouts/LineCallout3D';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetLineCallout3D } from './lineCallout3D';

export async function buildJsLineCallout3DGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsLineCallout3D = new LineCallout3D();
    if (hasValue(dotNetObject.border)) {
        let { buildJsLineCallout3DBorder } = await import('./lineCallout3DBorder');
        jsLineCallout3D.border = await buildJsLineCallout3DBorder(dotNetObject.border, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsLineCallout3D.color = buildJsMapColor(dotNetObject.color) as any;
    }

    if (hasValue(dotNetObject.size)) {
        jsLineCallout3D.size = dotNetObject.size;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsLineCallout3D);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLineCallout3D;
    
    let dnInstantiatedObject = await buildDotNetLineCallout3D(jsLineCallout3D);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LineCallout3D', e);
    }
    
    return jsLineCallout3D;
}

export async function buildDotNetLineCallout3DGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLineCallout3D: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.border)) {
            let { buildDotNetLineCallout3DBorder } = await import('./lineCallout3DBorder');
            dotNetLineCallout3D.border = await buildDotNetLineCallout3DBorder(jsObject.border);
        }
        if (hasValue(jsObject.color)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetLineCallout3D.color = buildDotNetMapColor(jsObject.color);
        }
        if (hasValue(jsObject.size)) {
            dotNetLineCallout3D.size = jsObject.size;
        }
        if (hasValue(jsObject.type)) {
            dotNetLineCallout3D.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLineCallout3D.id = k;
                break;
            }
        }
    }

    return dotNetLineCallout3D;
}

