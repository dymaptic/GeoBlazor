// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Fullscreen from '@arcgis/core/widgets/Fullscreen';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FullscreenWidgetGenerated implements IPropertyWrapper {
    public widget: Fullscreen;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: Fullscreen) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    
    // region properties
    
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetFullscreenViewModel } = await import('./fullscreenViewModel');
        return await buildDotNetFullscreenViewModel(this.widget.viewModel);
    }
    async setViewModel(value: any): Promise<void> {
        let { buildJsFullscreenViewModel } = await import('./fullscreenViewModel');
        this.widget.viewModel = await  buildJsFullscreenViewModel(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsFullscreenWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsFullscreenViewModel } = await import('./fullscreenViewModel');
        properties.viewModel = await buildJsFullscreenViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.element)) {
        properties.element = dotNetObject.element;
    }
    let jsFullscreen = new Fullscreen(properties);

    let { default: FullscreenWidgetWrapper } = await import('./fullscreenWidget');
    let fullscreenWidgetWrapper = new FullscreenWidgetWrapper(jsFullscreen);
    fullscreenWidgetWrapper.geoBlazorId = dotNetObject.id;
    fullscreenWidgetWrapper.viewId = viewId;
    fullscreenWidgetWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(fullscreenWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = fullscreenWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsFullscreen;
    let { buildDotNetFullscreenWidget } = await import('./fullscreenWidget');
    let dnInstantiatedObject = await buildDotNetFullscreenWidget(jsFullscreen);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FullscreenWidget', e);
    }
    
    return jsFullscreen;
}

export async function buildDotNetFullscreenWidgetGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFullscreenWidget: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.viewModel)) {
            let { buildDotNetFullscreenViewModel } = await import('./fullscreenViewModel');
            dotNetFullscreenWidget.viewModel = await buildDotNetFullscreenViewModel(jsObject.viewModel);
        }
    if (hasValue(jsObject.element)) {
        dotNetFullscreenWidget.element = jsObject.element;
    }
    if (hasValue(jsObject.type)) {
        dotNetFullscreenWidget.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFullscreenWidget.id = k;
                break;
            }
        }
    }

    return dotNetFullscreenWidget;
}

