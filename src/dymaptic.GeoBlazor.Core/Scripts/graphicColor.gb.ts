// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetGraphicColor } from './graphicColor';

export async function buildJsGraphicColorGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsGraphicColor: any = {};

    if (hasValue(dotNetObject.color) && dotNetObject.color.length > 0) {
        jsGraphicColor.color = dotNetObject.color;
    }
    if (hasValue(dotNetObject.haloOpacity)) {
        jsGraphicColor.haloOpacity = dotNetObject.haloOpacity;
    }
    if (hasValue(dotNetObject.hex)) {
        jsGraphicColor.hex = dotNetObject.hex;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsGraphicColor);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsGraphicColor;
    
    return jsGraphicColor;
}


export async function buildDotNetGraphicColorGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGraphicColor: any = {};
    
    if (hasValue(jsObject.color)) {
        dotNetGraphicColor.color = jsObject.color;
    }
    
    if (hasValue(jsObject.haloOpacity)) {
        dotNetGraphicColor.haloOpacity = jsObject.haloOpacity;
    }
    
    if (hasValue(jsObject.hex)) {
        dotNetGraphicColor.hex = jsObject.hex;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetGraphicColor.id = geoBlazorId;
    }

    return dotNetGraphicColor;
}

