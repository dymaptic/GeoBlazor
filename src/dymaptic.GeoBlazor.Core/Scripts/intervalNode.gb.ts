// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetIntervalNode } from './intervalNode';

export async function buildJsIntervalNodeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsIntervalNode: any = {};

    if (hasValue(dotNetObject.op)) {
        jsIntervalNode.op = dotNetObject.op;
    }
    if (hasValue(dotNetObject.qualifier)) {
        jsIntervalNode.qualifier = dotNetObject.qualifier;
    }
    if (hasValue(dotNetObject.value)) {
        jsIntervalNode.value = dotNetObject.value;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsIntervalNode);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsIntervalNode;
    
    return jsIntervalNode;
}


export async function buildDotNetIntervalNodeGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIntervalNode: any = {};
    
    if (hasValue(jsObject.op)) {
        dotNetIntervalNode.op = jsObject.op;
    }
    
    if (hasValue(jsObject.qualifier)) {
        dotNetIntervalNode.qualifier = jsObject.qualifier;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetIntervalNode.type = jsObject.type;
    }
    
    if (hasValue(jsObject.value)) {
        dotNetIntervalNode.value = jsObject.value;
    }
    

    return dotNetIntervalNode;
}

