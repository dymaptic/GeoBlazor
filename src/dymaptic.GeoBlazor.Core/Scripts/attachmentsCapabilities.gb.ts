// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetAttachmentsCapabilities } from './attachmentsCapabilities';

export async function buildJsAttachmentsCapabilitiesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsAttachmentsCapabilities: any = {};
    if (hasValue(dotNetObject.operations) && dotNetObject.operations.length > 0) {
        let { buildJsAttachmentsCapabilitiesOperations } = await import('./attachmentsCapabilitiesOperations');
        jsAttachmentsCapabilities.operations = await Promise.all(dotNetObject.operations.map(async i => await buildJsAttachmentsCapabilitiesOperations(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.editing)) {
        jsAttachmentsCapabilities.editing = dotNetObject.editing;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsAttachmentsCapabilities);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsAttachmentsCapabilities;
    
    let { buildDotNetAttachmentsCapabilities } = await import('./attachmentsCapabilities');
    let dnInstantiatedObject = await buildDotNetAttachmentsCapabilities(jsAttachmentsCapabilities);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type AttachmentsCapabilities detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for AttachmentsCapabilities', e);
    }
    
    return jsAttachmentsCapabilities;
}


export async function buildDotNetAttachmentsCapabilitiesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAttachmentsCapabilities: any = {};
    
    if (hasValue(jsObject.editing)) {
        dotNetAttachmentsCapabilities.editing = jsObject.editing;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetAttachmentsCapabilities.id = geoBlazorId;
    }

    return dotNetAttachmentsCapabilities;
}

