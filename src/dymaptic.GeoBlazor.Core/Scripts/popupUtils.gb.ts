// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import popupUtils = __esri.popupUtils;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PopupUtilsGenerated implements IPropertyWrapper {
    public component: popupUtils;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: popupUtils) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async createFieldInfos(config: any,
        options: any): Promise<any> {
        let { buildJsFieldInfosConfig } = await import('./fieldInfosConfig');
        let jsConfig = await buildJsFieldInfosConfig(config, this.layerId, this.viewId) as any;
        return this.component.createFieldInfos(jsConfig,
            options);
    }

    async createFieldsContent(config: any,
        options: any): Promise<any> {
        let { buildJsFieldInfosConfig } = await import('./fieldInfosConfig');
        let jsConfig = await buildJsFieldInfosConfig(config, this.layerId, this.viewId) as any;
        return this.component.createFieldsContent(jsConfig,
            options);
    }

    async createPopupTemplate(config: any,
        options: any): Promise<any> {
        let { buildJsConfig } = await import('./config');
        let jsConfig = await buildJsConfig(config, this.layerId, this.viewId) as any;
        return this.component.createPopupTemplate(jsConfig,
            options);
    }

    async createPopupTemplateForFeatureReduction(parameters: any): Promise<any> {
        let { buildJsPopupUtilsCreatePopupTemplateForFeatureReductionParams } = await import('./popupUtilsCreatePopupTemplateForFeatureReductionParams');
        let jsparameters = await buildJsPopupUtilsCreatePopupTemplateForFeatureReductionParams(parameters, this.layerId, this.viewId) as any;
        return this.component.createPopupTemplateForFeatureReduction(jsparameters);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsPopupUtilsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jspopupUtils: any = {}


    let { default: PopupUtilsWrapper } = await import('./popupUtils');
    let popupUtilsWrapper = new PopupUtilsWrapper(jspopupUtils);
    popupUtilsWrapper.geoBlazorId = dotNetObject.id;
    popupUtilsWrapper.viewId = viewId;
    popupUtilsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(popupUtilsWrapper);
    jsObjectRefs[dotNetObject.id] = popupUtilsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jspopupUtils;
    let { buildDotNetPopupUtils } = await import('./popupUtils');
    let dnInstantiatedObject = await buildDotNetPopupUtils(jspopupUtils);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PopupUtils', e);
    }
    
    return jspopupUtils;
}
export async function buildDotNetPopupUtilsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPopupUtils: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPopupUtils.id = k;
                break;
            }
        }
    }

    return dotNetPopupUtils;
}

