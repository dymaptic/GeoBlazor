// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import imageService = __esri.imageService;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ImageServiceGenerated implements IPropertyWrapper {
    public component: imageService;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: imageService) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async computeAngles(url: any,
        parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImageAngleParameters } = await import('./imageAngleParameters');
        let jsParameters = await buildJsImageAngleParameters(parameters, this.layerId, this.viewId) as any;
        return await this.component.computeAngles(url,
            jsParameters,
            requestOptions);
    }

    async computeHistograms(url: any,
        parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImageHistogramParameters } = await import('./imageHistogramParameters');
        let jsParameters = await buildJsImageHistogramParameters(parameters, this.layerId, this.viewId) as any;
        return await this.component.computeHistograms(url,
            jsParameters,
            requestOptions);
    }

    async computePixelSpaceLocations(url: any,
        parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImagePixelLocationParameters } = await import('./imagePixelLocationParameters');
        let jsParameters = await buildJsImagePixelLocationParameters(parameters, this.layerId, this.viewId) as any;
        return await this.component.computePixelSpaceLocations(url,
            jsParameters,
            requestOptions);
    }

    async computeStatisticsHistograms(url: any,
        parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImageHistogramParameters } = await import('./imageHistogramParameters');
        let jsParameters = await buildJsImageHistogramParameters(parameters, this.layerId, this.viewId) as any;
        return await this.component.computeStatisticsHistograms(url,
            jsParameters,
            requestOptions);
    }

    async findImages(url: any,
        parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsFindImagesParameters } = await import('./findImagesParameters');
        let jsParameters = await buildJsFindImagesParameters(parameters, this.layerId, this.viewId) as any;
        return await this.component.findImages(url,
            jsParameters,
            requestOptions);
    }

    async getImageUrl(url: any,
        parameters: any,
        requestOptions: any): Promise<any> {
        return await this.component.getImageUrl(url,
            parameters,
            requestOptions);
    }

    async getSamples(url: any,
        parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImageSampleParameters } = await import('./imageSampleParameters');
        let jsParameters = await buildJsImageSampleParameters(parameters, this.layerId, this.viewId) as any;
        return await this.component.getSamples(url,
            jsParameters,
            requestOptions);
    }

    async identify(url: any,
        parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImageIdentifyParameters } = await import('./imageIdentifyParameters');
        let jsparameters = await buildJsImageIdentifyParameters(parameters, this.layerId, this.viewId) as any;
        return await this.component.identify(url,
            jsparameters,
            requestOptions);
    }

    async imageToMap(url: any,
        parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImageToMapParameters } = await import('./imageToMapParameters');
        let jsParameters = await buildJsImageToMapParameters(parameters, this.layerId, this.viewId) as any;
        return await this.component.imageToMap(url,
            jsParameters,
            requestOptions);
    }

    async imageToMapMultiray(url: any,
        parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImageToMapMultirayParameters } = await import('./imageToMapMultirayParameters');
        let jsParameters = await buildJsImageToMapMultirayParameters(parameters, this.layerId, this.viewId) as any;
        return await this.component.imageToMapMultiray(url,
            jsParameters,
            requestOptions);
    }

    async mapToImage(url: any,
        parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsMapToImageParameters } = await import('./mapToImageParameters');
        let jsParameters = await buildJsMapToImageParameters(parameters, this.layerId, this.viewId) as any;
        return await this.component.mapToImage(url,
            jsParameters,
            requestOptions);
    }

    async measureAreaAndPerimeter(url: any,
        parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImageAreaParameters } = await import('./imageAreaParameters');
        let jsParameters = await buildJsImageAreaParameters(parameters, this.layerId, this.viewId) as any;
        return await this.component.measureAreaAndPerimeter(url,
            jsParameters,
            requestOptions);
    }

    async measureAreaFromImage(url: any,
        parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsMeasureFromImageParameters } = await import('./measureFromImageParameters');
        let jsParameters = await buildJsMeasureFromImageParameters(parameters, this.layerId, this.viewId) as any;
        return await this.component.measureAreaFromImage(url,
            jsParameters,
            requestOptions);
    }

    async measureDistanceAndAngle(url: any,
        parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImageDistanceParameters } = await import('./imageDistanceParameters');
        let jsParameters = await buildJsImageDistanceParameters(parameters, this.layerId, this.viewId) as any;
        return await this.component.measureDistanceAndAngle(url,
            jsParameters,
            requestOptions);
    }

    async measureHeight(url: any,
        parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImageHeightParameters } = await import('./imageHeightParameters');
        let jsParameters = await buildJsImageHeightParameters(parameters, this.layerId, this.viewId) as any;
        return await this.component.measureHeight(url,
            jsParameters,
            requestOptions);
    }

    async measureLengthFromImage(url: any,
        parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsMeasureFromImageParameters } = await import('./measureFromImageParameters');
        let jsParameters = await buildJsMeasureFromImageParameters(parameters, this.layerId, this.viewId) as any;
        return await this.component.measureLengthFromImage(url,
            jsParameters,
            requestOptions);
    }

    async measurePointOrCentroid(parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImagePointParameters } = await import('./imagePointParameters');
        let jsParameters = await buildJsImagePointParameters(parameters, this.layerId, this.viewId) as any;
        return await this.component.measurePointOrCentroid(jsParameters,
            requestOptions);
    }

    async queryBoundary(url: any,
        parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImageBoundaryParameters } = await import('./imageBoundaryParameters');
        let jsParameters = await buildJsImageBoundaryParameters(parameters, this.layerId, this.viewId) as any;
        return await this.component.queryBoundary(url,
            jsParameters,
            requestOptions);
    }

    async queryGPSInfo(url: any,
        parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImageGPSInfoParameters } = await import('./imageGPSInfoParameters');
        let jsParameters = await buildJsImageGPSInfoParameters(parameters, this.layerId, this.viewId) as any;
        return await this.component.queryGPSInfo(url,
            jsParameters,
            requestOptions);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsImageServiceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsimageService: any = {}


    let { default: ImageServiceWrapper } = await import('./imageService');
    let imageServiceWrapper = new ImageServiceWrapper(jsimageService);
    imageServiceWrapper.geoBlazorId = dotNetObject.id;
    imageServiceWrapper.viewId = viewId;
    imageServiceWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(imageServiceWrapper);
    jsObjectRefs[dotNetObject.id] = imageServiceWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsimageService;
    let { buildDotNetImageService } = await import('./imageService');
    let dnInstantiatedObject = await buildDotNetImageService(jsimageService);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImageService', e);
    }
    
    return jsimageService;
}
export async function buildDotNetImageServiceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageService: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImageService.id = k;
                break;
            }
        }
    }

    return dotNetImageService;
}

