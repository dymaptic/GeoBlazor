// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import Symbol from '@arcgis/core/symbols/Symbol';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SymbolGenerated implements IPropertyWrapper {
    public component: Symbol;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: Symbol) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getColor(layerId: string | null, viewId: string | null): Promise<any> {
        let { buildDotNetMapColor } = await import('./mapColor');
        return await buildDotNetMapColor(this.component.color, layerId, viewId);
    }
    async setColor(value: any, layerId: string | null, viewId: string | null): Promise<void> {
        let { buildJsMapColor } = await import('./mapColor');
        this.component.color = await buildJsMapColor(value, layerId, viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsSymbolGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let { default: Symbol } = await import('@arcgis/core/symbols/Symbol');
    let jsSymbol = new Symbol();
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsSymbol.color = await buildJsMapColor(dotNetObject.color, layerId, viewId) as any;
    }
    let { default: SymbolWrapper } = await import('./symbol');
    let symbolWrapper = new SymbolWrapper(jsSymbol);
    symbolWrapper.geoBlazorId = dotNetObject.id;
    symbolWrapper.viewId = viewId;
    symbolWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(symbolWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = symbolWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsSymbol;
    
    return jsSymbol;
}

export async function buildDotNetSymbolGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSymbol: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.color)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetSymbol.color = await buildDotNetMapColor(jsObject.color, layerId, viewId);
        }
        dotNetSymbol.type = jsObject.type;
    return dotNetSymbol;
}

