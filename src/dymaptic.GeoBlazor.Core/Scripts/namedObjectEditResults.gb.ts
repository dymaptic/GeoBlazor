// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetNamedObjectEditResults } from './namedObjectEditResults';

export async function buildJsNamedObjectEditResultsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsNamedObjectEditResults: any = {};

    if (hasValue(dotNetObject.error)) {
        jsNamedObjectEditResults.error = dotNetObject.error;
    }
    if (hasValue(dotNetObject.namedObjectEditResultsId)) {
        jsNamedObjectEditResults.id = dotNetObject.namedObjectEditResultsId;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsNamedObjectEditResults);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsNamedObjectEditResults;
    
    return jsNamedObjectEditResults;
}


export async function buildDotNetNamedObjectEditResultsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetNamedObjectEditResults: any = {};
    
    if (hasValue(jsObject.error)) {
        dotNetNamedObjectEditResults.error = removeCircularReferences(jsObject.error);
    }
    
    if (hasValue(jsObject.id)) {
        dotNetNamedObjectEditResults.namedObjectEditResultsId = jsObject.id;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetNamedObjectEditResults.id = geoBlazorId;
    }

    return dotNetNamedObjectEditResults;
}

