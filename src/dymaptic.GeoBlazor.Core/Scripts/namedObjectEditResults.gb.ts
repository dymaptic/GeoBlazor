// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetNamedObjectEditResults } from './namedObjectEditResults';

export async function buildJsNamedObjectEditResultsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsNamedObjectEditResults: any = {};

    if (hasValue(dotNetObject.error)) {
        jsNamedObjectEditResults.error = dotNetObject.error;
    }
    if (hasValue(dotNetObject.namedObjectEditResultsId)) {
        jsNamedObjectEditResults.id = dotNetObject.namedObjectEditResultsId;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsNamedObjectEditResults);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsNamedObjectEditResults;
    
    try {
        let { buildDotNetNamedObjectEditResults } = await import('./namedObjectEditResults');
        let dnInstantiatedObject = await buildDotNetNamedObjectEditResults(jsNamedObjectEditResults, layerId, viewId);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type NamedObjectEditResults detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for NamedObjectEditResults', e);
    }
    
    return jsNamedObjectEditResults;
}


export async function buildDotNetNamedObjectEditResultsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetNamedObjectEditResults: any = {};
    
    if (hasValue(jsObject.error)) {
        dotNetNamedObjectEditResults.error = removeCircularReferences(jsObject.error);
    }
    
    if (hasValue(jsObject.id)) {
        dotNetNamedObjectEditResults.namedObjectEditResultsId = jsObject.id;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetNamedObjectEditResults.id = geoBlazorId;
    }

    return dotNetNamedObjectEditResults;
}

