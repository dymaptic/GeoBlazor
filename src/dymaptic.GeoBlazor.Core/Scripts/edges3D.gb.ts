// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Edges3D from '@arcgis/core/symbols/edges/Edges3D';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetEdges3D } from './edges3D';

export async function buildJsEdges3DGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        properties.color = buildJsMapColor(dotNetObject.color) as any;
    }

    if (hasValue(dotNetObject.extensionLength)) {
        properties.extensionLength = dotNetObject.extensionLength;
    }
    if (hasValue(dotNetObject.size)) {
        properties.size = dotNetObject.size;
    }
    let jsEdges3D = new Edges3D(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsEdges3D);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsEdges3D;
    
    let dnInstantiatedObject = await buildDotNetEdges3D(jsEdges3D);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Edges3D', e);
    }
    
    return jsEdges3D;
}

export async function buildDotNetEdges3DGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetEdges3D: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.color)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetEdges3D.color = buildDotNetMapColor(jsObject.color);
        }
    if (hasValue(jsObject.extensionLength)) {
        dotNetEdges3D.extensionLength = jsObject.extensionLength;
    }
    if (hasValue(jsObject.size)) {
        dotNetEdges3D.size = jsObject.size;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetEdges3D.id = k;
                break;
            }
        }
    }

    return dotNetEdges3D;
}

