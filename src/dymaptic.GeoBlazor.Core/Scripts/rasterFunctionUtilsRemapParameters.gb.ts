// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetRasterFunctionUtilsRemapParameters } from './rasterFunctionUtilsRemapParameters';

export async function buildJsRasterFunctionUtilsRemapParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsrasterFunctionUtilsRemapParameters: any = {};
    if (hasValue(dotNetObject.rangeMaps)) {
        let { buildJsPixelValueRangeMap } = await import('./pixelValueRangeMap');
        jsrasterFunctionUtilsRemapParameters.rangeMaps = await Promise.all(dotNetObject.rangeMaps.map(async i => await buildJsPixelValueRangeMap(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.allowUnmatched)) {
        jsrasterFunctionUtilsRemapParameters.allowUnmatched = dotNetObject.allowUnmatched;
    }
    if (hasValue(dotNetObject.outputPixelType)) {
        jsrasterFunctionUtilsRemapParameters.outputPixelType = dotNetObject.outputPixelType;
    }
    if (hasValue(dotNetObject.raster)) {
        jsrasterFunctionUtilsRemapParameters.raster = dotNetObject.raster;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsrasterFunctionUtilsRemapParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsrasterFunctionUtilsRemapParameters;
    
    return jsrasterFunctionUtilsRemapParameters;
}


export async function buildDotNetRasterFunctionUtilsRemapParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRasterFunctionUtilsRemapParameters: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.rangeMaps)) {
        let { buildDotNetPixelValueRangeMap } = await import('./pixelValueRangeMap');
        dotNetRasterFunctionUtilsRemapParameters.rangeMaps = await Promise.all(jsObject.rangeMaps.map(async i => await buildDotNetPixelValueRangeMap(i)));
    }
    if (hasValue(jsObject.allowUnmatched)) {
        dotNetRasterFunctionUtilsRemapParameters.allowUnmatched = jsObject.allowUnmatched;
    }
    if (hasValue(jsObject.outputPixelType)) {
        dotNetRasterFunctionUtilsRemapParameters.outputPixelType = jsObject.outputPixelType;
    }
    if (hasValue(jsObject.raster)) {
        dotNetRasterFunctionUtilsRemapParameters.raster = jsObject.raster;
    }

    return dotNetRasterFunctionUtilsRemapParameters;
}

