// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import SearchViewModel from '@arcgis/core/widgets/Search/SearchViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SearchViewModelGenerated implements IPropertyWrapper {
    public component: SearchViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: SearchViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async clear(): Promise<void> {
        this.component.clear();
    }

    async search(searchTerm: any): Promise<any> {
        return await this.component.search(searchTerm);
    }

    async searchNearby(): Promise<any> {
        return await this.component.searchNearby();
    }

    async suggest(value: any): Promise<any> {
        return await this.component.suggest(value);
    }

    // region properties
    
    async getActiveSource(): Promise<any> {
        if (!hasValue(this.component.activeSource)) {
            return null;
        }
        
        let { buildDotNetSearchSource } = await import('./searchSource');
        return await buildDotNetSearchSource(this.component.activeSource);
    }
    async getAllSources(): Promise<any> {
        if (!hasValue(this.component.allSources)) {
            return null;
        }
        
        let { buildDotNetSearchSource } = await import('./searchSource');
        return await Promise.all(this.component.allSources.map(async i => await buildDotNetSearchSource(i)));
    }
    
    async getDefaultSources(): Promise<any> {
        if (!hasValue(this.component.defaultSources)) {
            return null;
        }
        
        let { buildDotNetSearchSource } = await import('./searchSource');
        return await Promise.all(this.component.defaultSources.map(async i => await buildDotNetSearchSource(i)));
    }
    
    async getDefaultSymbols(): Promise<any> {
        if (!hasValue(this.component.defaultSymbols)) {
            return null;
        }
        
        let { buildDotNetSearchViewModelDefaultSymbols } = await import('./searchViewModelDefaultSymbols');
        return await buildDotNetSearchViewModelDefaultSymbols(this.component.defaultSymbols);
    }
    async setDefaultSymbols(value: any): Promise<void> {
        let { buildJsSearchViewModelDefaultSymbols } = await import('./searchViewModelDefaultSymbols');
        this.component.defaultSymbols = await  buildJsSearchViewModelDefaultSymbols(value, this.layerId, this.viewId);
    }
    async getGoToOverride(): Promise<any> {
        if (!hasValue(this.component.goToOverride)) {
            return null;
        }
        
        let { buildDotNetGoToOverride } = await import('./goToOverride');
        return await buildDotNetGoToOverride(this.component.goToOverride);
    }
    async setGoToOverride(value: any): Promise<void> {
        let { buildJsGoToOverride } = await import('./goToOverride');
        this.component.goToOverride =  buildJsGoToOverride(value, this.viewId);
    }
    async getPopupTemplate(): Promise<any> {
        if (!hasValue(this.component.popupTemplate)) {
            return null;
        }
        
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        return await buildDotNetPopupTemplate(this.component.popupTemplate);
    }
    async setPopupTemplate(value: any): Promise<void> {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        this.component.popupTemplate =  buildJsPopupTemplate(value, this.layerId, this.viewId);
    }
    async getPortal(): Promise<any> {
        if (!hasValue(this.component.portal)) {
            return null;
        }
        
        let { buildDotNetPortal } = await import('./portal');
        return await buildDotNetPortal(this.component.portal);
    }
    async setPortal(value: any): Promise<void> {
        let { buildJsPortal } = await import('./portal');
        this.component.portal = await  buildJsPortal(value, this.layerId, this.viewId);
    }
    async getResultGraphic(): Promise<any> {
        if (!hasValue(this.component.resultGraphic)) {
            return null;
        }
        
        let { buildDotNetGraphic } = await import('./graphic');
        return buildDotNetGraphic(this.component.resultGraphic, this.layerId, this.viewId);
    }
    async getSources(): Promise<any> {
        if (!hasValue(this.component.sources)) {
            return null;
        }
        
        let { buildDotNetSearchSource } = await import('./searchSource');
        return await Promise.all(this.component.sources.map(async i => await buildDotNetSearchSource(i)));
    }
    
    async setSources(value: any): Promise<void> {
        let { buildJsSearchSource } = await import('./searchSource');
        this.component.sources = await Promise.all(value.map(async i => await buildJsSearchSource(i, this.viewId))) as any;
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsSearchViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSearchViewModel = new SearchViewModel();
    if (hasValue(dotNetObject.defaultSymbols)) {
        let { buildJsSearchViewModelDefaultSymbols } = await import('./searchViewModelDefaultSymbols');
        jsSearchViewModel.defaultSymbols = await buildJsSearchViewModelDefaultSymbols(dotNetObject.defaultSymbols, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.goToOverride)) {
        let { buildJsGoToOverride } = await import('./goToOverride');
        jsSearchViewModel.goToOverride = buildJsGoToOverride(dotNetObject.goToOverride, viewId) as any;
    }
    if (hasValue(dotNetObject.popupTemplate)) {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        jsSearchViewModel.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.portal)) {
        let { buildJsPortal } = await import('./portal');
        jsSearchViewModel.portal = await buildJsPortal(dotNetObject.portal, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.sources)) {
        let { buildJsSearchSource } = await import('./searchSource');
        jsSearchViewModel.sources = await Promise.all(dotNetObject.sources.map(async i => await buildJsSearchSource(i, viewId))) as any;
    }

    if (hasValue(dotNetObject.activeSourceIndex)) {
        jsSearchViewModel.activeSourceIndex = dotNetObject.activeSourceIndex;
    }
    if (hasValue(dotNetObject.allPlaceholder)) {
        jsSearchViewModel.allPlaceholder = dotNetObject.allPlaceholder;
    }
    if (hasValue(dotNetObject.autoSelect)) {
        jsSearchViewModel.autoSelect = dotNetObject.autoSelect;
    }
    if (hasValue(dotNetObject.includeDefaultSources)) {
        jsSearchViewModel.includeDefaultSources = dotNetObject.includeDefaultSources;
    }
    if (hasValue(dotNetObject.locationEnabled)) {
        jsSearchViewModel.locationEnabled = dotNetObject.locationEnabled;
    }
    if (hasValue(dotNetObject.maxInputLength)) {
        jsSearchViewModel.maxInputLength = dotNetObject.maxInputLength;
    }
    if (hasValue(dotNetObject.maxResults)) {
        jsSearchViewModel.maxResults = dotNetObject.maxResults;
    }
    if (hasValue(dotNetObject.maxSuggestions)) {
        jsSearchViewModel.maxSuggestions = dotNetObject.maxSuggestions;
    }
    if (hasValue(dotNetObject.minSuggestCharacters)) {
        jsSearchViewModel.minSuggestCharacters = dotNetObject.minSuggestCharacters;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        jsSearchViewModel.popupEnabled = dotNetObject.popupEnabled;
    }
    if (hasValue(dotNetObject.resultGraphicEnabled)) {
        jsSearchViewModel.resultGraphicEnabled = dotNetObject.resultGraphicEnabled;
    }
    if (hasValue(dotNetObject.searchAllEnabled)) {
        jsSearchViewModel.searchAllEnabled = dotNetObject.searchAllEnabled;
    }
    if (hasValue(dotNetObject.searchTerm)) {
        jsSearchViewModel.searchTerm = dotNetObject.searchTerm;
    }
    if (hasValue(dotNetObject.suggestionDelay)) {
        jsSearchViewModel.suggestionDelay = dotNetObject.suggestionDelay;
    }
    if (hasValue(dotNetObject.suggestionsEnabled)) {
        jsSearchViewModel.suggestionsEnabled = dotNetObject.suggestionsEnabled;
    }
    if (hasValue(dotNetObject.view)) {
        jsSearchViewModel.view = dotNetObject.view;
    }
    jsSearchViewModel.on('search-clear', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSearchClear', evt);
    });
    
    jsSearchViewModel.on('search-complete', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSearchComplete', evt);
    });
    
    jsSearchViewModel.on('search-start', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSearchStart', evt);
    });
    
    jsSearchViewModel.on('select-result', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSelectResult', evt);
    });
    
    jsSearchViewModel.on('suggest-complete', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSuggestComplete', evt);
    });
    
    jsSearchViewModel.on('suggest-start', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSuggestStart', evt);
    });
    

    let { default: SearchViewModelWrapper } = await import('./searchViewModel');
    let searchViewModelWrapper = new SearchViewModelWrapper(jsSearchViewModel);
    searchViewModelWrapper.geoBlazorId = dotNetObject.id;
    searchViewModelWrapper.viewId = viewId;
    searchViewModelWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(searchViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = searchViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsSearchViewModel;
    let { buildDotNetSearchViewModel } = await import('./searchViewModel');
    let dnInstantiatedObject = await buildDotNetSearchViewModel(jsSearchViewModel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SearchViewModel', e);
    }
    
    return jsSearchViewModel;
}

export async function buildDotNetSearchViewModelGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.activeSource)) {
            let { buildDotNetSearchSource } = await import('./searchSource');
            dotNetSearchViewModel.activeSource = await buildDotNetSearchSource(jsObject.activeSource);
        }
        if (hasValue(jsObject.allSources)) {
            let { buildDotNetSearchSource } = await import('./searchSource');
            dotNetSearchViewModel.allSources = await Promise.all(jsObject.allSources.map(async i => await buildDotNetSearchSource(i)));
        }
        if (hasValue(jsObject.defaultSources)) {
            let { buildDotNetSearchSource } = await import('./searchSource');
            dotNetSearchViewModel.defaultSources = await Promise.all(jsObject.defaultSources.map(async i => await buildDotNetSearchSource(i)));
        }
        if (hasValue(jsObject.defaultSymbols)) {
            let { buildDotNetSearchViewModelDefaultSymbols } = await import('./searchViewModelDefaultSymbols');
            dotNetSearchViewModel.defaultSymbols = await buildDotNetSearchViewModelDefaultSymbols(jsObject.defaultSymbols);
        }
        if (hasValue(jsObject.goToOverride)) {
            let { buildDotNetGoToOverride } = await import('./goToOverride');
            dotNetSearchViewModel.goToOverride = await buildDotNetGoToOverride(jsObject.goToOverride);
        }
        if (hasValue(jsObject.popupTemplate)) {
            let { buildDotNetPopupTemplate } = await import('./popupTemplate');
            dotNetSearchViewModel.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
        }
        if (hasValue(jsObject.portal)) {
            let { buildDotNetPortal } = await import('./portal');
            dotNetSearchViewModel.portal = await buildDotNetPortal(jsObject.portal);
        }
        if (hasValue(jsObject.resultGraphic)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetSearchViewModel.resultGraphic = buildDotNetGraphic(jsObject.resultGraphic, layerId, viewId);
        }
        if (hasValue(jsObject.sources)) {
            let { buildDotNetSearchSource } = await import('./searchSource');
            dotNetSearchViewModel.sources = await Promise.all(jsObject.sources.map(async i => await buildDotNetSearchSource(i)));
        }
    if (hasValue(jsObject.activeSourceIndex)) {
        dotNetSearchViewModel.activeSourceIndex = jsObject.activeSourceIndex;
    }
    if (hasValue(jsObject.allPlaceholder)) {
        dotNetSearchViewModel.allPlaceholder = jsObject.allPlaceholder;
    }
    if (hasValue(jsObject.autoSelect)) {
        dotNetSearchViewModel.autoSelect = jsObject.autoSelect;
    }
    if (hasValue(jsObject.includeDefaultSources)) {
        dotNetSearchViewModel.includeDefaultSources = jsObject.includeDefaultSources;
    }
    if (hasValue(jsObject.locationEnabled)) {
        dotNetSearchViewModel.locationEnabled = jsObject.locationEnabled;
    }
    if (hasValue(jsObject.maxInputLength)) {
        dotNetSearchViewModel.maxInputLength = jsObject.maxInputLength;
    }
    if (hasValue(jsObject.maxResults)) {
        dotNetSearchViewModel.maxResults = jsObject.maxResults;
    }
    if (hasValue(jsObject.maxSuggestions)) {
        dotNetSearchViewModel.maxSuggestions = jsObject.maxSuggestions;
    }
    if (hasValue(jsObject.minSuggestCharacters)) {
        dotNetSearchViewModel.minSuggestCharacters = jsObject.minSuggestCharacters;
    }
    if (hasValue(jsObject.placeholder)) {
        dotNetSearchViewModel.placeholder = jsObject.placeholder;
    }
    if (hasValue(jsObject.popupEnabled)) {
        dotNetSearchViewModel.popupEnabled = jsObject.popupEnabled;
    }
    if (hasValue(jsObject.resultGraphicEnabled)) {
        dotNetSearchViewModel.resultGraphicEnabled = jsObject.resultGraphicEnabled;
    }
    if (hasValue(jsObject.results)) {
        dotNetSearchViewModel.results = jsObject.results;
    }
    if (hasValue(jsObject.searchAllEnabled)) {
        dotNetSearchViewModel.searchAllEnabled = jsObject.searchAllEnabled;
    }
    if (hasValue(jsObject.searchTerm)) {
        dotNetSearchViewModel.searchTerm = jsObject.searchTerm;
    }
    if (hasValue(jsObject.selectedResult)) {
        dotNetSearchViewModel.selectedResult = jsObject.selectedResult;
    }
    if (hasValue(jsObject.selectedSuggestion)) {
        dotNetSearchViewModel.selectedSuggestion = jsObject.selectedSuggestion;
    }
    if (hasValue(jsObject.state)) {
        dotNetSearchViewModel.state = jsObject.state;
    }
    if (hasValue(jsObject.suggestionDelay)) {
        dotNetSearchViewModel.suggestionDelay = jsObject.suggestionDelay;
    }
    if (hasValue(jsObject.suggestions)) {
        dotNetSearchViewModel.suggestions = jsObject.suggestions;
    }
    if (hasValue(jsObject.suggestionsEnabled)) {
        dotNetSearchViewModel.suggestionsEnabled = jsObject.suggestionsEnabled;
    }
    if (hasValue(jsObject.updating)) {
        dotNetSearchViewModel.updating = jsObject.updating;
    }
    if (hasValue(jsObject.view)) {
        dotNetSearchViewModel.view = jsObject.view;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSearchViewModel.id = k;
                break;
            }
        }
    }

    return dotNetSearchViewModel;
}

