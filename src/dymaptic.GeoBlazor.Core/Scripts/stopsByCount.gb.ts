// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import StopsByCount = __esri.StopsByCount;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class StopsByCountGenerated implements IPropertyWrapper {
    public component: StopsByCount;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: StopsByCount) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getTimeExtent(): Promise<any> {
        if (!hasValue(this.component.timeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.component.timeExtent);
    }
    async setTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.component.timeExtent = await  buildJsTimeExtent(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsStopsByCountGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsStopsByCount: any = {}
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        jsStopsByCount.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.count)) {
        jsStopsByCount.count = dotNetObject.count;
    }

    let { default: StopsByCountWrapper } = await import('./stopsByCount');
    let stopsByCountWrapper = new StopsByCountWrapper(jsStopsByCount);
    stopsByCountWrapper.geoBlazorId = dotNetObject.id;
    stopsByCountWrapper.viewId = viewId;
    stopsByCountWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(stopsByCountWrapper);
    jsObjectRefs[dotNetObject.id] = stopsByCountWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsStopsByCount;
    let { buildDotNetStopsByCount } = await import('./stopsByCount');
    let dnInstantiatedObject = await buildDotNetStopsByCount(jsStopsByCount);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for StopsByCount', e);
    }
    
    return jsStopsByCount;
}
export async function buildDotNetStopsByCountGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetStopsByCount: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.timeExtent)) {
            let { buildDotNetTimeExtent } = await import('./timeExtent');
            dotNetStopsByCount.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
        }
        if (hasValue(jsObject.count)) {
            dotNetStopsByCount.count = jsObject.count;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetStopsByCount.id = k;
                break;
            }
        }
    }

    return dotNetStopsByCount;
}

