// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetProjectParametersTransformation } from './projectParametersTransformation';

export async function buildJsProjectParametersTransformationGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsProjectParametersTransformation: any = {};

    if (hasValue(dotNetObject.wkid)) {
        jsProjectParametersTransformation.wkid = dotNetObject.wkid;
    }
    if (hasValue(dotNetObject.wkt)) {
        jsProjectParametersTransformation.wkt = dotNetObject.wkt;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsProjectParametersTransformation);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsProjectParametersTransformation;
    
    return jsProjectParametersTransformation;
}


export async function buildDotNetProjectParametersTransformationGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetProjectParametersTransformation: any = {};
    
    if (hasValue(jsObject.wkid)) {
        dotNetProjectParametersTransformation.wkid = jsObject.wkid;
    }
    
    if (hasValue(jsObject.wkt)) {
        dotNetProjectParametersTransformation.wkt = jsObject.wkt;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetProjectParametersTransformation.id = geoBlazorId;
    }

    return dotNetProjectParametersTransformation;
}

