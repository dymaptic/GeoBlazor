import { buildDotNetFieldInfosConfig } from './fieldInfosConfig';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import FieldInfosConfig = __esri.FieldInfosConfig;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsFieldInfosConfigGenerated(dotNetObject: any): Promise<any> {
    let jsFieldInfosConfig: any = {}
    if (hasValue(dotNetObject.fields)) {
        let { buildJsField } = await import('./field');
        jsFieldInfosConfig.fields = dotNetObject.fields.map(i => buildJsField(i)) as any;
    }

    if (hasValue(dotNetObject.editFieldsInfo)) {
        jsFieldInfosConfig.editFieldsInfo = dotNetObject.editFieldsInfo;
    }
    if (hasValue(dotNetObject.objectIdField)) {
        jsFieldInfosConfig.objectIdField = dotNetObject.objectIdField;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsFieldInfosConfig);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFieldInfosConfig;
    
    let dnInstantiatedObject = await buildDotNetFieldInfosConfig(jsFieldInfosConfig);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FieldInfosConfig', e);
    }
    
    return jsFieldInfosConfig;
}
export async function buildDotNetFieldInfosConfigGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFieldInfosConfig: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.fields)) {
            let { buildDotNetField } = await import('./field');
            dotNetFieldInfosConfig.fields = jsObject.fields.map(i => buildDotNetField(i));
        }
        if (hasValue(jsObject.editFieldsInfo)) {
            dotNetFieldInfosConfig.editFieldsInfo = jsObject.editFieldsInfo;
        }
        if (hasValue(jsObject.objectIdField)) {
            dotNetFieldInfosConfig.objectIdField = jsObject.objectIdField;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFieldInfosConfig.id = k;
                break;
            }
        }
    }

    return dotNetFieldInfosConfig;
}

