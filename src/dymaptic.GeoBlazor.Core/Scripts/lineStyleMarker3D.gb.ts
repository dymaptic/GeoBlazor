import {buildDotNetLineStyleMarker3D} from './lineStyleMarker3D';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import LineStyleMarker3D from '@arcgis/core/symbols/LineStyleMarker3D';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsLineStyleMarker3DGenerated(dotNetObject: any): Promise<any> {
    let jsLineStyleMarker3D = new LineStyleMarker3D();
    if (hasValue(dotNetObject.color)) {
        let {buildJsMapColor} = await import('./mapColor');
        jsLineStyleMarker3D.color = buildJsMapColor(dotNetObject.color) as any;
    }

    if (hasValue(dotNetObject.placement)) {
        jsLineStyleMarker3D.placement = dotNetObject.placement;
    }
    if (hasValue(dotNetObject.style)) {
        jsLineStyleMarker3D.style = dotNetObject.style;
    }

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsLineStyleMarker3D);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLineStyleMarker3D;

    let dnInstantiatedObject = await buildDotNetLineStyleMarker3D(jsLineStyleMarker3D);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LineStyleMarker3D', e);
    }

    return jsLineStyleMarker3D;
}

export async function buildDotNetLineStyleMarker3DGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetLineStyleMarker3D: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.color)) {
        let {buildDotNetMapColor} = await import('./mapColor');
        dotNetLineStyleMarker3D.color = buildDotNetMapColor(jsObject.color);
    }
    if (hasValue(jsObject.placement)) {
        dotNetLineStyleMarker3D.placement = jsObject.placement;
    }
    if (hasValue(jsObject.style)) {
        dotNetLineStyleMarker3D.style = jsObject.style;
    }
    if (hasValue(jsObject.type)) {
        dotNetLineStyleMarker3D.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLineStyleMarker3D.id = k;
                break;
            }
        }
    }

    return dotNetLineStyleMarker3D;
}

