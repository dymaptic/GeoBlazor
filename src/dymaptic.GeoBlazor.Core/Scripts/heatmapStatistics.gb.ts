// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import heatmapStatistics from '@arcgis/core/smartMapping/statistics/heatmapStatistics';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class HeatmapStatisticsGenerated implements IPropertyWrapper {
    public component: heatmapStatistics;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: heatmapStatistics) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async heatmapStatistics(parameters: any): Promise<any> {
        let { buildJsHeatmapStatisticsHeatmapStatisticsParams } = await import('./heatmapStatisticsHeatmapStatisticsParams');
        let jsparameters = await buildJsHeatmapStatisticsHeatmapStatisticsParams(parameters, this.layerId, this.viewId) as any;
        return await this.component.heatmapStatistics(jsparameters);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsHeatmapStatisticsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsheatmapStatistics = new heatmapStatistics();


    let { default: HeatmapStatisticsWrapper } = await import('./heatmapStatistics');
    let heatmapStatisticsWrapper = new HeatmapStatisticsWrapper(jsheatmapStatistics);
    heatmapStatisticsWrapper.geoBlazorId = dotNetObject.id;
    heatmapStatisticsWrapper.viewId = viewId;
    heatmapStatisticsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(heatmapStatisticsWrapper);
    jsObjectRefs[dotNetObject.id] = heatmapStatisticsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsheatmapStatistics;
    let { buildDotNetHeatmapStatistics } = await import('./heatmapStatistics');
    let dnInstantiatedObject = await buildDotNetHeatmapStatistics(jsheatmapStatistics);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for HeatmapStatistics', e);
    }
    
    return jsheatmapStatistics;
}
export async function buildDotNetHeatmapStatisticsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetHeatmapStatistics: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetHeatmapStatistics.id = k;
                break;
            }
        }
    }

    return dotNetHeatmapStatistics;
}

