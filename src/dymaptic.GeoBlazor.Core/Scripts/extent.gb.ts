// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import Extent from '@arcgis/core/geometry/Extent';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ExtentGenerated implements IPropertyWrapper {
    public component: Extent;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: Extent) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async centerAt(point: any): Promise<any> {
        let { buildJsPoint } = await import('./point');
        let jsPoint = buildJsPoint(point) as any;
        let result = this.component.centerAt(jsPoint);
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(result);
    }

    async contains(geometry: any): Promise<any> {
        let { buildJsGeometry } = await import('./geometry');
        let jsGeometry = buildJsGeometry(geometry) as any;
        return this.component.contains(jsGeometry);
    }

    async expand(factor: any): Promise<any> {
        let result = this.component.expand(factor);
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(result);
    }

    async intersection(extent: any): Promise<any> {
        let { buildJsExtent } = await import('./extent');
        let jsExtent = buildJsExtent(extent) as any;
        let result = this.component.intersection(jsExtent);
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(result);
    }

    async intersects(geometry: any): Promise<any> {
        let { buildJsGeometry } = await import('./geometry');
        let jsGeometry = buildJsGeometry(geometry) as any;
        return this.component.intersects(jsGeometry);
    }

    async normalize(): Promise<any> {
        let result = this.component.normalize();
        let { buildDotNetExtent } = await import('./extent');
        return result.map(i => buildDotNetExtent(i));
    }

    async offset(dx: any,
        dy: any,
        dz: any): Promise<any> {
        let result = this.component.offset(dx,
            dy,
            dz);
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(result);
    }

    async union(extent: any): Promise<any> {
        let { buildJsExtent } = await import('./extent');
        let jsExtent = buildJsExtent(extent) as any;
        let result = this.component.union(jsExtent);
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(result);
    }

    // region properties
    
    async getCenter(): Promise<any> {
        if (!hasValue(this.component.center)) {
            return null;
        }
        
        let { buildDotNetPoint } = await import('./point');
        return buildDotNetPoint(this.component.center);
    }
    async getExtent(): Promise<any> {
        if (!hasValue(this.component.extent)) {
            return null;
        }
        
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(this.component.extent);
    }
    async getSpatialReference(): Promise<any> {
        if (!hasValue(this.component.spatialReference)) {
            return null;
        }
        
        let { buildDotNetSpatialReference } = await import('./spatialReference');
        return buildDotNetSpatialReference(this.component.spatialReference);
    }
    async setSpatialReference(value: any): Promise<void> {
        let { buildJsSpatialReference } = await import('./spatialReference');
        this.component.spatialReference = await  buildJsSpatialReference(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

