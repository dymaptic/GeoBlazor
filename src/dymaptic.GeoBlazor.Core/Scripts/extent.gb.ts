// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Extent from '@arcgis/core/geometry/Extent';
import { hasValue, sanitize, Pro } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ExtentGenerated implements IPropertyWrapper {
    public component: Extent;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: Extent) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {

        if (hasValue(dotNetObject.hasM)) {
            this.component.hasM = dotNetObject.hasM;
        }
        if (hasValue(dotNetObject.hasZ)) {
            this.component.hasZ = dotNetObject.hasZ;
        }
        if (hasValue(dotNetObject.mmax)) {
            this.component.mmax = dotNetObject.mmax;
        }
        if (hasValue(dotNetObject.mmin)) {
            this.component.mmin = dotNetObject.mmin;
        }
        if (hasValue(dotNetObject.spatialReference)) {
            this.component.spatialReference = sanitize(dotNetObject.spatialReference);
        }
        if (hasValue(dotNetObject.xmax)) {
            this.component.xmax = dotNetObject.xmax;
        }
        if (hasValue(dotNetObject.xmin)) {
            this.component.xmin = dotNetObject.xmin;
        }
        if (hasValue(dotNetObject.ymax)) {
            this.component.ymax = dotNetObject.ymax;
        }
        if (hasValue(dotNetObject.ymin)) {
            this.component.ymin = dotNetObject.ymin;
        }
        if (hasValue(dotNetObject.zmax)) {
            this.component.zmax = dotNetObject.zmax;
        }
        if (hasValue(dotNetObject.zmin)) {
            this.component.zmin = dotNetObject.zmin;
        }
    }
    
    async centerAt(point: any): Promise<any> {
        let { buildJsPoint } = await import('./point');
        let jsPoint = buildJsPoint(point) as any;
        let result = this.component.centerAt(jsPoint);
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(result);
    }

    async contains(geometry: any): Promise<any> {
        let jsGeometry: any;
        if (!Pro) {
            jsGeometry = null;
        } else {
            try {
                // @ts-ignore GeoBlazor Pro only
                let { buildJsGeometry } = await import('./geometry');
                jsGeometry = buildJsGeometry(geometry) as any;
            } catch (e) {
                console.error(`Pro functionality not available in GeoBlazor Core. ${e}`);
                jsGeometry = null;
            }
        }
        return this.component.contains(jsGeometry);
    }

    async expand(factor: any): Promise<any> {
        let result = this.component.expand(factor);
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(result);
    }

    async intersection(extent: any): Promise<any> {
        let { buildJsExtent } = await import('./extent');
        let jsExtent = buildJsExtent(extent) as any;
        let result = this.component.intersection(jsExtent);
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(result);
    }

    async intersects(geometry: any): Promise<any> {
        let jsGeometry: any;
        if (!Pro) {
            jsGeometry = null;
        } else {
            try {
                // @ts-ignore GeoBlazor Pro only
                let { buildJsGeometry } = await import('./geometry');
                jsGeometry = buildJsGeometry(geometry) as any;
            } catch (e) {
                console.error(`Pro functionality not available in GeoBlazor Core. ${e}`);
                jsGeometry = null;
            }
        }
        return this.component.intersects(jsGeometry);
    }

    async normalize(): Promise<any> {
        let result = this.component.normalize();
        let { buildDotNetExtent } = await import('./extent');
        return result.map(i => buildDotNetExtent(i));
    }

    async offset(dx: any,
        dy: any,
        dz: any): Promise<any> {
        let result = this.component.offset(dx,
            dy,
            dz);
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(result);
    }

    async union(extent: any): Promise<any> {
        let { buildJsExtent } = await import('./extent');
        let jsExtent = buildJsExtent(extent) as any;
        let result = this.component.union(jsExtent);
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(result);
    }

    // region properties
    
    async getCenter(): Promise<any> {
        if (!hasValue(this.component.center)) {
            return null;
        }
        
        let { buildDotNetPoint } = await import('./point');
        return buildDotNetPoint(this.component.center);
    }
    
    async getExtent(): Promise<any> {
        if (!hasValue(this.component.extent)) {
            return null;
        }
        
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(this.component.extent);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

