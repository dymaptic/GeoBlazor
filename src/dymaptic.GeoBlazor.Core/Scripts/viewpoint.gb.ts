// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Viewpoint from '@arcgis/core/Viewpoint';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetViewpoint } from './viewpoint';

export async function buildJsViewpointGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.camera)) {
        let { buildJsCamera } = await import('./camera');
        properties.camera = await buildJsCamera(dotNetObject.camera, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.targetGeometry)) {
        let { buildJsGeometry } = await import('./geometry');
        properties.targetGeometry = buildJsGeometry(dotNetObject.targetGeometry) as any;
    }

    if (hasValue(dotNetObject.rotation)) {
        properties.rotation = dotNetObject.rotation;
    }
    if (hasValue(dotNetObject.scale)) {
        properties.scale = dotNetObject.scale;
    }
    let jsViewpoint = new Viewpoint(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsViewpoint);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsViewpoint;
    
    let { buildDotNetViewpoint } = await import('./viewpoint');
    let dnInstantiatedObject = await buildDotNetViewpoint(jsViewpoint);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type Viewpoint detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Viewpoint', e);
    }
    
    return jsViewpoint;
}


export async function buildDotNetViewpointGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetViewpoint: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.camera)) {
        let { buildDotNetCamera } = await import('./camera');
        dotNetViewpoint.camera = await buildDotNetCamera(jsObject.camera);
    }
    if (hasValue(jsObject.targetGeometry)) {
        let { buildDotNetGeometry } = await import('./geometry');
        dotNetViewpoint.targetGeometry = buildDotNetGeometry(jsObject.targetGeometry);
    }
    if (hasValue(jsObject.rotation)) {
        dotNetViewpoint.rotation = jsObject.rotation;
    }
    if (hasValue(jsObject.scale)) {
        dotNetViewpoint.scale = jsObject.scale;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetViewpoint.id = k;
                break;
            }
        }
    }

    return dotNetViewpoint;
}

