// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Viewpoint from '@arcgis/core/Viewpoint';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetViewpoint } from './viewpoint';

export async function buildJsViewpointGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.camera)) {
        let { buildJsCamera } = await import('./camera');
        properties.camera = await buildJsCamera(dotNetObject.camera, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.targetGeometry)) {
        properties.targetGeometry = dotNetObject.targetGeometry;
    }

    if (hasValue(dotNetObject.rotation)) {
        properties.rotation = dotNetObject.rotation;
    }
    if (hasValue(dotNetObject.scale)) {
        properties.scale = dotNetObject.scale;
    }
    let jsViewpoint = new Viewpoint(properties);
    
    jsObjectRefs[dotNetObject.id] = jsViewpoint;
    arcGisObjectRefs[dotNetObject.id] = jsViewpoint;
    
    return jsViewpoint;
}


export async function buildDotNetViewpointGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetViewpoint: any = {};
    
    if (hasValue(jsObject.camera)) {
        let { buildDotNetCamera } = await import('./camera');
        dotNetViewpoint.camera = await buildDotNetCamera(jsObject.camera, viewId);
    }
    
    if (hasValue(jsObject.rotation)) {
        dotNetViewpoint.rotation = jsObject.rotation;
    }
    
    if (hasValue(jsObject.scale)) {
        dotNetViewpoint.scale = jsObject.scale;
    }
    
    if (hasValue(jsObject.targetGeometry)) {
        dotNetViewpoint.targetGeometry = jsObject.targetGeometry;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetViewpoint.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetViewpoint.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetViewpoint.id)) {
        jsObjectRefs[dotNetViewpoint.id] ??= jsObject;
        arcGisObjectRefs[dotNetViewpoint.id] ??= jsObject;
    }

    return dotNetViewpoint;
}

