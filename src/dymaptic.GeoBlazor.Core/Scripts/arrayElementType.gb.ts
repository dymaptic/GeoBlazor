// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetArrayElementType } from './arrayElementType';

export async function buildJsArrayElementTypeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsArrayElementType: any = {};
    if (hasValue(dotNetObject.properties) && dotNetObject.properties.length > 0) {
        let { buildJsIProfileVariable } = await import('./iProfileVariable');
        jsArrayElementType.properties = dotNetObject.properties.map(i => buildJsIProfileVariable(i)) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsArrayElementType);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsArrayElementType;
    
    return jsArrayElementType;
}


export async function buildDotNetArrayElementTypeGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetArrayElementType: any = {};
    
    if (hasValue(jsObject.properties)) {
        let { buildDotNetIProfileVariable } = await import('./iProfileVariable');
        dotNetArrayElementType.properties = jsObject.properties.map(i => buildDotNetIProfileVariable(i));
    }
    
    if (hasValue(jsObject.type)) {
        dotNetArrayElementType.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetArrayElementType.id = geoBlazorId;
    }

    return dotNetArrayElementType;
}

