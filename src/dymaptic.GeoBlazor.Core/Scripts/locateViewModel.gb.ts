// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import LocateViewModel from '@arcgis/core/widgets/Locate/LocateViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue, buildJsStreamReference, generateSerializableJson } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class LocateViewModelGenerated implements IPropertyWrapper {
    public component: LocateViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: LocateViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.goToOverride)) {
            let { buildJsGoToOverride } = await import('./goToOverride');
            this.component.goToOverride = buildJsGoToOverride(dotNetObject.goToOverride, this.viewId) as any;
        }
        if (hasValue(dotNetObject.graphic)) {
            let { buildJsGraphic } = await import('./graphic');
            this.component.graphic = buildJsGraphic(dotNetObject.graphic) as any;
        }

        if (hasValue(dotNetObject.error)) {
            this.component.error = dotNetObject.error;
        }
        if (hasValue(dotNetObject.geolocationOptions)) {
            this.component.geolocationOptions = dotNetObject.geolocationOptions;
        }
        if (hasValue(dotNetObject.goToLocationEnabled)) {
            this.component.goToLocationEnabled = dotNetObject.goToLocationEnabled;
        }
        if (hasValue(dotNetObject.popupEnabled)) {
            this.component.popupEnabled = dotNetObject.popupEnabled;
        }
        if (hasValue(dotNetObject.scale)) {
            this.component.scale = dotNetObject.scale;
        }
    }
    
    async cancelLocate(): Promise<void> {
        this.component.cancelLocate();
    }

    async locate(): Promise<any> {
        let result = await this.component.locate();
        
        return generateSerializableJson(result);
    }

    // region properties
    
    getError(): any {
        if (!hasValue(this.component.error)) {
            return null;
        }
        
        return generateSerializableJson(this.component.error);
    }
    
    setError(value: any): void {
        this.component.error = JSON.parse(value);
    }
    
    async getGoToOverride(): Promise<any> {
        if (!hasValue(this.component.goToOverride)) {
            return null;
        }
        
        let { buildDotNetGoToOverride } = await import('./goToOverride');
        return await buildDotNetGoToOverride(this.component.goToOverride);
    }
    
    async setGoToOverride(value: any): Promise<void> {
        let { buildJsGoToOverride } = await import('./goToOverride');
        this.component.goToOverride =  buildJsGoToOverride(value, this.viewId);
    }
    
    async getGraphic(): Promise<any> {
        if (!hasValue(this.component.graphic)) {
            return null;
        }
        
        let { buildDotNetGraphic } = await import('./graphic');
        return buildDotNetGraphic(this.component.graphic, this.layerId, this.viewId);
    }
    
    async setGraphic(value: any): Promise<void> {
        let { buildJsGraphic } = await import('./graphic');
        this.component.graphic =  buildJsGraphic(value);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsLocateViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.goToOverride)) {
        let { buildJsGoToOverride } = await import('./goToOverride');
        properties.goToOverride = buildJsGoToOverride(dotNetObject.goToOverride, viewId) as any;
    }
    if (hasValue(dotNetObject.graphic)) {
        let { buildJsGraphic } = await import('./graphic');
        properties.graphic = buildJsGraphic(dotNetObject.graphic) as any;
    }

    if (hasValue(dotNetObject.error)) {
        properties.error = dotNetObject.error;
    }
    if (hasValue(dotNetObject.geolocationOptions)) {
        properties.geolocationOptions = dotNetObject.geolocationOptions;
    }
    if (hasValue(dotNetObject.goToLocationEnabled)) {
        properties.goToLocationEnabled = dotNetObject.goToLocationEnabled;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        properties.popupEnabled = dotNetObject.popupEnabled;
    }
    if (hasValue(dotNetObject.scale)) {
        properties.scale = dotNetObject.scale;
    }
    let jsLocateViewModel = new LocateViewModel(properties);
    if (hasValue(dotNetObject.hasLocateListener) && dotNetObject.hasLocateListener) {
        jsLocateViewModel.on('locate', async (evt: any) => {
            requestAnimationFrame(async () => {
                let streamRef = buildJsStreamReference(evt ?? {});
                await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsLocate', streamRef);
            });
        });
    }
    
    if (hasValue(dotNetObject.hasLocateErrorListener) && dotNetObject.hasLocateErrorListener) {
        jsLocateViewModel.on('locate-error', async (evt: any) => {
            requestAnimationFrame(async () => {
                let streamRef = buildJsStreamReference(evt ?? {});
                await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsLocateError', streamRef);
            });
        });
    }
    

    let { default: LocateViewModelWrapper } = await import('./locateViewModel');
    let locateViewModelWrapper = new LocateViewModelWrapper(jsLocateViewModel);
    locateViewModelWrapper.geoBlazorId = dotNetObject.id;
    locateViewModelWrapper.viewId = viewId;
    locateViewModelWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = locateViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsLocateViewModel;
    
    return jsLocateViewModel;
}

