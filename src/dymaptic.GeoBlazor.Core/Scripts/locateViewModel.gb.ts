// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import LocateViewModel from '@arcgis/core/widgets/Locate/LocateViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class LocateViewModelGenerated implements IPropertyWrapper {
    public component: LocateViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: LocateViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async cancelLocate(): Promise<void> {
        this.component.cancelLocate();
    }

    async locate(): Promise<any> {
        return await this.component.locate();
    }

    // region properties
    
    async getGoToOverride(): Promise<any> {
        if (!hasValue(this.component.goToOverride)) {
            return null;
        }
        
        let { buildDotNetGoToOverride } = await import('./goToOverride');
        return await buildDotNetGoToOverride(this.component.goToOverride);
    }
    async setGoToOverride(value: any): Promise<void> {
        let { buildJsGoToOverride } = await import('./goToOverride');
        this.component.goToOverride =  buildJsGoToOverride(value, this.viewId);
    }
    async getGraphic(): Promise<any> {
        if (!hasValue(this.component.graphic)) {
            return null;
        }
        
        let { buildDotNetGraphic } = await import('./graphic');
        return buildDotNetGraphic(this.component.graphic, this.layerId, this.viewId);
    }
    async setGraphic(value: any): Promise<void> {
        let { buildJsGraphic } = await import('./graphic');
        this.component.graphic =  buildJsGraphic(value);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsLocateViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsLocateViewModel = new LocateViewModel();
    if (hasValue(dotNetObject.goToOverride)) {
        let { buildJsGoToOverride } = await import('./goToOverride');
        jsLocateViewModel.goToOverride = buildJsGoToOverride(dotNetObject.goToOverride, viewId) as any;
    }
    if (hasValue(dotNetObject.graphic)) {
        let { buildJsGraphic } = await import('./graphic');
        jsLocateViewModel.graphic = buildJsGraphic(dotNetObject.graphic) as any;
    }

    if (hasValue(dotNetObject.error)) {
        jsLocateViewModel.error = dotNetObject.error;
    }
    if (hasValue(dotNetObject.geolocationOptions)) {
        jsLocateViewModel.geolocationOptions = dotNetObject.geolocationOptions;
    }
    if (hasValue(dotNetObject.goToLocationEnabled)) {
        jsLocateViewModel.goToLocationEnabled = dotNetObject.goToLocationEnabled;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        jsLocateViewModel.popupEnabled = dotNetObject.popupEnabled;
    }
    if (hasValue(dotNetObject.scale)) {
        jsLocateViewModel.scale = dotNetObject.scale;
    }
    if (hasValue(dotNetObject.view)) {
        jsLocateViewModel.view = dotNetObject.view;
    }
    jsLocateViewModel.on('locate', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsLocate', evt);
    });
    
    jsLocateViewModel.on('locate-error', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsLocateError', evt);
    });
    

    let { default: LocateViewModelWrapper } = await import('./locateViewModel');
    let locateViewModelWrapper = new LocateViewModelWrapper(jsLocateViewModel);
    locateViewModelWrapper.geoBlazorId = dotNetObject.id;
    locateViewModelWrapper.viewId = viewId;
    locateViewModelWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(locateViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = locateViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsLocateViewModel;
    let { buildDotNetLocateViewModel } = await import('./locateViewModel');
    let dnInstantiatedObject = await buildDotNetLocateViewModel(jsLocateViewModel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LocateViewModel', e);
    }
    
    return jsLocateViewModel;
}

export async function buildDotNetLocateViewModelGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLocateViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.goToOverride)) {
            let { buildDotNetGoToOverride } = await import('./goToOverride');
            dotNetLocateViewModel.goToOverride = await buildDotNetGoToOverride(jsObject.goToOverride);
        }
        if (hasValue(jsObject.graphic)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetLocateViewModel.graphic = buildDotNetGraphic(jsObject.graphic, layerId, viewId);
        }
    if (hasValue(jsObject.error)) {
        dotNetLocateViewModel.error = jsObject.error;
    }
    if (hasValue(jsObject.geolocationOptions)) {
        dotNetLocateViewModel.geolocationOptions = jsObject.geolocationOptions;
    }
    if (hasValue(jsObject.goToLocationEnabled)) {
        dotNetLocateViewModel.goToLocationEnabled = jsObject.goToLocationEnabled;
    }
    if (hasValue(jsObject.popupEnabled)) {
        dotNetLocateViewModel.popupEnabled = jsObject.popupEnabled;
    }
    if (hasValue(jsObject.scale)) {
        dotNetLocateViewModel.scale = jsObject.scale;
    }
    if (hasValue(jsObject.state)) {
        dotNetLocateViewModel.state = jsObject.state;
    }
    if (hasValue(jsObject.view)) {
        dotNetLocateViewModel.view = jsObject.view;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLocateViewModel.id = k;
                break;
            }
        }
    }

    return dotNetLocateViewModel;
}

