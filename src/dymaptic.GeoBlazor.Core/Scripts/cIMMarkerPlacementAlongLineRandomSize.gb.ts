// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCIMMarkerPlacementAlongLineRandomSize } from './cIMMarkerPlacementAlongLineRandomSize';

export async function buildJsCIMMarkerPlacementAlongLineRandomSizeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCIMMarkerPlacementAlongLineRandomSize: any = {};

    if (hasValue(dotNetObject.angleToLine)) {
        jsCIMMarkerPlacementAlongLineRandomSize.angleToLine = dotNetObject.angleToLine;
    }
    if (hasValue(dotNetObject.controlPointPlacement)) {
        jsCIMMarkerPlacementAlongLineRandomSize.controlPointPlacement = dotNetObject.controlPointPlacement;
    }
    if (hasValue(dotNetObject.customEndingOffset)) {
        jsCIMMarkerPlacementAlongLineRandomSize.customEndingOffset = dotNetObject.customEndingOffset;
    }
    if (hasValue(dotNetObject.endings)) {
        jsCIMMarkerPlacementAlongLineRandomSize.endings = dotNetObject.endings;
    }
    if (hasValue(dotNetObject.offset)) {
        jsCIMMarkerPlacementAlongLineRandomSize.offset = dotNetObject.offset;
    }
    if (hasValue(dotNetObject.offsetAlongLine)) {
        jsCIMMarkerPlacementAlongLineRandomSize.offsetAlongLine = dotNetObject.offsetAlongLine;
    }
    if (hasValue(dotNetObject.placementTemplate)) {
        jsCIMMarkerPlacementAlongLineRandomSize.placementTemplate = dotNetObject.placementTemplate;
    }
    if (hasValue(dotNetObject.primitiveName)) {
        jsCIMMarkerPlacementAlongLineRandomSize.primitiveName = dotNetObject.primitiveName;
    }
    if (hasValue(dotNetObject.randomization)) {
        jsCIMMarkerPlacementAlongLineRandomSize.randomization = dotNetObject.randomization;
    }
    if (hasValue(dotNetObject.seed)) {
        jsCIMMarkerPlacementAlongLineRandomSize.seed = dotNetObject.seed;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCIMMarkerPlacementAlongLineRandomSize);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCIMMarkerPlacementAlongLineRandomSize;
    
    let { buildDotNetCIMMarkerPlacementAlongLineRandomSize } = await import('./cIMMarkerPlacementAlongLineRandomSize');
    let dnInstantiatedObject = await buildDotNetCIMMarkerPlacementAlongLineRandomSize(jsCIMMarkerPlacementAlongLineRandomSize);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type CIMMarkerPlacementAlongLineRandomSize detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CIMMarkerPlacementAlongLineRandomSize', e);
    }
    
    return jsCIMMarkerPlacementAlongLineRandomSize;
}


export async function buildDotNetCIMMarkerPlacementAlongLineRandomSizeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCIMMarkerPlacementAlongLineRandomSize: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.angleToLine)) {
        dotNetCIMMarkerPlacementAlongLineRandomSize.angleToLine = jsObject.angleToLine;
    }
    if (hasValue(jsObject.controlPointPlacement)) {
        dotNetCIMMarkerPlacementAlongLineRandomSize.controlPointPlacement = jsObject.controlPointPlacement;
    }
    if (hasValue(jsObject.customEndingOffset)) {
        dotNetCIMMarkerPlacementAlongLineRandomSize.customEndingOffset = jsObject.customEndingOffset;
    }
    if (hasValue(jsObject.endings)) {
        dotNetCIMMarkerPlacementAlongLineRandomSize.endings = jsObject.endings;
    }
    if (hasValue(jsObject.offset)) {
        dotNetCIMMarkerPlacementAlongLineRandomSize.offset = jsObject.offset;
    }
    if (hasValue(jsObject.offsetAlongLine)) {
        dotNetCIMMarkerPlacementAlongLineRandomSize.offsetAlongLine = jsObject.offsetAlongLine;
    }
    if (hasValue(jsObject.placementTemplate)) {
        dotNetCIMMarkerPlacementAlongLineRandomSize.placementTemplate = jsObject.placementTemplate;
    }
    if (hasValue(jsObject.primitiveName)) {
        dotNetCIMMarkerPlacementAlongLineRandomSize.primitiveName = jsObject.primitiveName;
    }
    if (hasValue(jsObject.randomization)) {
        dotNetCIMMarkerPlacementAlongLineRandomSize.randomization = jsObject.randomization;
    }
    if (hasValue(jsObject.seed)) {
        dotNetCIMMarkerPlacementAlongLineRandomSize.seed = jsObject.seed;
    }
    if (hasValue(jsObject.type)) {
        dotNetCIMMarkerPlacementAlongLineRandomSize.type = jsObject.type;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCIMMarkerPlacementAlongLineRandomSize.id = geoBlazorId;
    }

    return dotNetCIMMarkerPlacementAlongLineRandomSize;
}

