// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import coordinateFormatter = __esri.coordinateFormatter;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CoordinateFormatterGenerated implements IPropertyWrapper {
    public component: coordinateFormatter;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: coordinateFormatter) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async fromLatitudeLongitude(coordinates: any,
        spatialReference: any): Promise<any> {
        let { buildJsSpatialReference } = await import('./spatialReference');
        let jsSpatialReference = buildJsSpatialReference(spatialReference) as any;
        return this.component.fromLatitudeLongitude(coordinates,
            jsSpatialReference);
    }

    async fromUsng(coordinates: any,
        spatialReference: any): Promise<any> {
        let { buildJsSpatialReference } = await import('./spatialReference');
        let jsSpatialReference = buildJsSpatialReference(spatialReference) as any;
        return this.component.fromUsng(coordinates,
            jsSpatialReference);
    }

    async fromUtm(coordinates: any,
        spatialReference: any,
        conversionMode: any): Promise<any> {
        let { buildJsSpatialReference } = await import('./spatialReference');
        let jsSpatialReference = buildJsSpatialReference(spatialReference) as any;
        return this.component.fromUtm(coordinates,
            jsSpatialReference,
            conversionMode);
    }

    async isLoaded(): Promise<any> {
        return this.component.isLoaded();
    }

    async isSupported(): Promise<any> {
        return this.component.isSupported();
    }

    async load(): Promise<any> {
        return await this.component.load();
    }

    async toLatitudeLongitude(point: any,
        format: any,
        decimalPlaces: any): Promise<any> {
        let { buildJsPoint } = await import('./point');
        let jsPoint = buildJsPoint(point) as any;
        let { buildJsFormat } = await import('./format');
        let jsFormat = await buildJsFormat(format, this.layerId, this.viewId) as any;
        return this.component.toLatitudeLongitude(jsPoint,
            jsFormat,
            decimalPlaces);
    }

    async toUsng(point: any,
        precision: any,
        addSpaces: any): Promise<any> {
        let { buildJsPoint } = await import('./point');
        let jsPoint = buildJsPoint(point) as any;
        return this.component.toUsng(jsPoint,
            precision,
            addSpaces);
    }

    async toUtm(point: any,
        conversionMode: any,
        addSpaces: any): Promise<any> {
        let { buildJsPoint } = await import('./point');
        let jsPoint = buildJsPoint(point) as any;
        return this.component.toUtm(jsPoint,
            conversionMode,
            addSpaces);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsCoordinateFormatterGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jscoordinateFormatter: any = {}


    let { default: CoordinateFormatterWrapper } = await import('./coordinateFormatter');
    let coordinateFormatterWrapper = new CoordinateFormatterWrapper(jscoordinateFormatter);
    coordinateFormatterWrapper.geoBlazorId = dotNetObject.id;
    coordinateFormatterWrapper.viewId = viewId;
    coordinateFormatterWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(coordinateFormatterWrapper);
    jsObjectRefs[dotNetObject.id] = coordinateFormatterWrapper;
    arcGisObjectRefs[dotNetObject.id] = jscoordinateFormatter;
    let { buildDotNetCoordinateFormatter } = await import('./coordinateFormatter');
    let dnInstantiatedObject = await buildDotNetCoordinateFormatter(jscoordinateFormatter);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CoordinateFormatter', e);
    }
    
    return jscoordinateFormatter;
}

export async function buildDotNetCoordinateFormatterGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCoordinateFormatter: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCoordinateFormatter.id = k;
                break;
            }
        }
    }

    return dotNetCoordinateFormatter;
}

