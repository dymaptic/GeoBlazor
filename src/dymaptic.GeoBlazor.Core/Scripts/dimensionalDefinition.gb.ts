// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import DimensionalDefinition from '@arcgis/core/layers/support/DimensionalDefinition';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class DimensionalDefinitionGenerated implements IPropertyWrapper {
    public component: DimensionalDefinition;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: DimensionalDefinition) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsDimensionalDefinitionGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsDimensionalDefinition = new DimensionalDefinition();

    if (hasValue(dotNetObject.dimensionName)) {
        jsDimensionalDefinition.dimensionName = dotNetObject.dimensionName;
    }
    if (hasValue(dotNetObject.isSlice)) {
        jsDimensionalDefinition.isSlice = dotNetObject.isSlice;
    }
    if (hasValue(dotNetObject.values)) {
        jsDimensionalDefinition.values = dotNetObject.values;
    }
    if (hasValue(dotNetObject.variableName)) {
        jsDimensionalDefinition.variableName = dotNetObject.variableName;
    }
    let { default: DimensionalDefinitionWrapper } = await import('./dimensionalDefinition');
    let dimensionalDefinitionWrapper = new DimensionalDefinitionWrapper(jsDimensionalDefinition);
    dimensionalDefinitionWrapper.geoBlazorId = dotNetObject.id;
    dimensionalDefinitionWrapper.viewId = viewId;
    dimensionalDefinitionWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(dimensionalDefinitionWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = dimensionalDefinitionWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsDimensionalDefinition;
    
    return jsDimensionalDefinition;
}

export async function buildDotNetDimensionalDefinitionGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDimensionalDefinition: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetDimensionalDefinition.dimensionName = jsObject.dimensionName;
        dotNetDimensionalDefinition.isSlice = jsObject.isSlice;
        dotNetDimensionalDefinition.values = jsObject.values;
        dotNetDimensionalDefinition.variableName = jsObject.variableName;

    return dotNetDimensionalDefinition;
}

