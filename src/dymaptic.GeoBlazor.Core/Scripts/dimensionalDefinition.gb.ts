// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import DimensionalDefinition from '@arcgis/core/layers/support/DimensionalDefinition';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetDimensionalDefinition } from './dimensionalDefinition';

export async function buildJsDimensionalDefinitionGenerated(dotNetObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.dimensionName)) {
        properties.dimensionName = dotNetObject.dimensionName;
    }
    if (hasValue(dotNetObject.isSlice)) {
        properties.isSlice = dotNetObject.isSlice;
    }
    if (hasValue(dotNetObject.values)) {
        properties.values = dotNetObject.values;
    }
    if (hasValue(dotNetObject.variableName)) {
        properties.variableName = dotNetObject.variableName;
    }
    let jsDimensionalDefinition = new DimensionalDefinition(properties);
    
    jsObjectRefs[dotNetObject.id] = jsDimensionalDefinition;
    arcGisObjectRefs[dotNetObject.id] = jsDimensionalDefinition;
    
    return jsDimensionalDefinition;
}


export async function buildDotNetDimensionalDefinitionGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDimensionalDefinition: any = {};
    
    if (hasValue(jsObject.dimensionName)) {
        dotNetDimensionalDefinition.dimensionName = jsObject.dimensionName;
    }
    
    if (hasValue(jsObject.isSlice)) {
        dotNetDimensionalDefinition.isSlice = jsObject.isSlice;
    }
    
    if (hasValue(jsObject.values)) {
        dotNetDimensionalDefinition.values = removeCircularReferences(jsObject.values);
    }
    
    if (hasValue(jsObject.variableName)) {
        dotNetDimensionalDefinition.variableName = jsObject.variableName;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetDimensionalDefinition.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetDimensionalDefinition.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetDimensionalDefinition.id)) {
        jsObjectRefs[dotNetDimensionalDefinition.id] ??= jsObject;
        arcGisObjectRefs[dotNetDimensionalDefinition.id] ??= jsObject;
    }

    return dotNetDimensionalDefinition;
}

