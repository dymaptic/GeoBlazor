// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetQueryCompositeTransformation } from './queryCompositeTransformation';

export async function buildJsQueryCompositeTransformationGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsQueryCompositeTransformation: any = {};
    if (hasValue(dotNetObject.geoTransforms) && dotNetObject.geoTransforms.length > 0) {
        let { buildJsCompositeTransformationGeoTransforms1 } = await import('./compositeTransformationGeoTransforms1');
        jsQueryCompositeTransformation.geoTransforms = await Promise.all(dotNetObject.geoTransforms.map(async i => await buildJsCompositeTransformationGeoTransforms1(i, layerId, viewId))) as any;
    }

    
    jsObjectRefs[dotNetObject.id] = jsQueryCompositeTransformation;
    arcGisObjectRefs[dotNetObject.id] = jsQueryCompositeTransformation;
    
    return jsQueryCompositeTransformation;
}


export async function buildDotNetQueryCompositeTransformationGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetQueryCompositeTransformation: any = {};
    
    if (hasValue(jsObject.geoTransforms)) {
        let { buildDotNetCompositeTransformationGeoTransforms1 } = await import('./compositeTransformationGeoTransforms1');
        dotNetQueryCompositeTransformation.geoTransforms = await Promise.all(jsObject.geoTransforms.map(async i => await buildDotNetCompositeTransformationGeoTransforms1(i)));
    }
    

    return dotNetQueryCompositeTransformation;
}

