// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetViewLayerviewDestroyEvent } from './viewLayerviewDestroyEvent';

export async function buildJsViewLayerviewDestroyEventGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsViewLayerviewDestroyEvent: any = {};
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsViewLayerviewDestroyEvent.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.layerView)) {
        let { buildJsLayerView } = await import('./layerView');
        jsViewLayerviewDestroyEvent.layerView = await buildJsLayerView(dotNetObject.layerView, layerId, viewId) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsViewLayerviewDestroyEvent);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsViewLayerviewDestroyEvent;
    
    return jsViewLayerviewDestroyEvent;
}


export async function buildDotNetViewLayerviewDestroyEventGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetViewLayerviewDestroyEvent: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.layerView)) {
        let { buildDotNetLayerView } = await import('./layerView');
        dotNetViewLayerviewDestroyEvent.layerView = await buildDotNetLayerView(jsObject.layerView);
    }

    return dotNetViewLayerviewDestroyEvent;
}

