// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import AttributeTableGroupElement from '@arcgis/core/tables/elements/AttributeTableGroupElement';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetAttributeTableGroupElement } from './attributeTableGroupElement';

export async function buildJsAttributeTableGroupElementGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.elements) && dotNetObject.elements.length > 0) {
        let { buildJsIAttributeTableGroupElementElements } = await import('./iAttributeTableGroupElementElements');
        properties.elements = dotNetObject.elements.map(i => buildJsIAttributeTableGroupElementElements(i)) as any;
    }

    if (hasValue(dotNetObject.description)) {
        properties.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    let jsAttributeTableGroupElement = new AttributeTableGroupElement(properties);
    
    jsObjectRefs[dotNetObject.id] = jsAttributeTableGroupElement;
    arcGisObjectRefs[dotNetObject.id] = jsAttributeTableGroupElement;
    
    return jsAttributeTableGroupElement;
}


export async function buildDotNetAttributeTableGroupElementGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAttributeTableGroupElement: any = {};
    
    if (hasValue(jsObject.elements)) {
        let { buildDotNetIAttributeTableGroupElementElements } = await import('./iAttributeTableGroupElementElements');
        dotNetAttributeTableGroupElement.elements = jsObject.elements.map(i => buildDotNetIAttributeTableGroupElementElements(i));
    }
    
    if (hasValue(jsObject.description)) {
        dotNetAttributeTableGroupElement.description = jsObject.description;
    }
    
    if (hasValue(jsObject.label)) {
        dotNetAttributeTableGroupElement.label = jsObject.label;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetAttributeTableGroupElement.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetAttributeTableGroupElement.id = geoBlazorId;
    }

    return dotNetAttributeTableGroupElement;
}

