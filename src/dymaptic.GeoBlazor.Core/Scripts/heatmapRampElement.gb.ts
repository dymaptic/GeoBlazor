// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetHeatmapRampElement } from './heatmapRampElement';

export async function buildJsHeatmapRampElementGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsHeatmapRampElement: any = {};
    if (hasValue(dotNetObject.infos) && dotNetObject.infos.length > 0) {
        let { buildJsHeatmapRampStop } = await import('./heatmapRampStop');
        jsHeatmapRampElement.infos = await Promise.all(dotNetObject.infos.map(async i => await buildJsHeatmapRampStop(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.title)) {
        jsHeatmapRampElement.title = dotNetObject.title;
    }
    
    jsObjectRefs[dotNetObject.id] = jsHeatmapRampElement;
    arcGisObjectRefs[dotNetObject.id] = jsHeatmapRampElement;
    
    return jsHeatmapRampElement;
}


export async function buildDotNetHeatmapRampElementGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetHeatmapRampElement: any = {};
    
    if (hasValue(jsObject.infos)) {
        let { buildDotNetHeatmapRampStop } = await import('./heatmapRampStop');
        dotNetHeatmapRampElement.infos = await Promise.all(jsObject.infos.map(async i => await buildDotNetHeatmapRampStop(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.title)) {
        dotNetHeatmapRampElement.title = jsObject.title;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetHeatmapRampElement.type = jsObject.type;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetHeatmapRampElement.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetHeatmapRampElement.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetHeatmapRampElement.id)) {
        jsObjectRefs[dotNetHeatmapRampElement.id] ??= jsObject;
        arcGisObjectRefs[dotNetHeatmapRampElement.id] ??= jsObject;
    }

    return dotNetHeatmapRampElement;
}

