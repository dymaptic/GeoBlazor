// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetVideoLayerCapabilities } from './videoLayerCapabilities';

export async function buildJsVideoLayerCapabilitiesGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsVideoLayerCapabilities: any = {};
    if (hasValue(dotNetObject.operations)) {
        let { buildJsVideoLayerCapabilitiesOperations } = await import('./videoLayerCapabilitiesOperations');
        jsVideoLayerCapabilities.operations = await buildJsVideoLayerCapabilitiesOperations(dotNetObject.operations) as any;
    }

    if (hasValue(dotNetObject.query)) {
        jsVideoLayerCapabilities.query = dotNetObject.query;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsVideoLayerCapabilities);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsVideoLayerCapabilities;
    
    return jsVideoLayerCapabilities;
}


export async function buildDotNetVideoLayerCapabilitiesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVideoLayerCapabilities: any = {};
    
    if (hasValue(jsObject.operations)) {
        let { buildDotNetVideoLayerCapabilitiesOperations } = await import('./videoLayerCapabilitiesOperations');
        dotNetVideoLayerCapabilities.operations = await buildDotNetVideoLayerCapabilitiesOperations(jsObject.operations);
    }
    
    if (hasValue(jsObject.query)) {
        dotNetVideoLayerCapabilities.query = removeCircularReferences(jsObject.query);
    }
    

    return dotNetVideoLayerCapabilities;
}

