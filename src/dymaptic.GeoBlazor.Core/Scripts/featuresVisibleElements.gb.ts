// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetFeaturesVisibleElements } from './featuresVisibleElements';

export async function buildJsFeaturesVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsFeaturesVisibleElements: any = {};

    if (hasValue(dotNetObject.actionBar)) {
        jsFeaturesVisibleElements.actionBar = dotNetObject.actionBar;
    }
    if (hasValue(dotNetObject.closeButton)) {
        jsFeaturesVisibleElements.closeButton = dotNetObject.closeButton;
    }
    if (hasValue(dotNetObject.collapseButton)) {
        jsFeaturesVisibleElements.collapseButton = dotNetObject.collapseButton;
    }
    if (hasValue(dotNetObject.featureListLayerTitle)) {
        jsFeaturesVisibleElements.featureListLayerTitle = dotNetObject.featureListLayerTitle;
    }
    if (hasValue(dotNetObject.featureNavigation)) {
        jsFeaturesVisibleElements.featureNavigation = dotNetObject.featureNavigation;
    }
    if (hasValue(dotNetObject.flow)) {
        jsFeaturesVisibleElements.flow = dotNetObject.flow;
    }
    if (hasValue(dotNetObject.heading)) {
        jsFeaturesVisibleElements.heading = dotNetObject.heading;
    }
    if (hasValue(dotNetObject.spinner)) {
        jsFeaturesVisibleElements.spinner = dotNetObject.spinner;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFeaturesVisibleElements);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeaturesVisibleElements;
    
    return jsFeaturesVisibleElements;
}


export async function buildDotNetFeaturesVisibleElementsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeaturesVisibleElements: any = {};
    
    if (hasValue(jsObject.actionBar)) {
        dotNetFeaturesVisibleElements.actionBar = jsObject.actionBar;
    }
    
    if (hasValue(jsObject.closeButton)) {
        dotNetFeaturesVisibleElements.closeButton = jsObject.closeButton;
    }
    
    if (hasValue(jsObject.collapseButton)) {
        dotNetFeaturesVisibleElements.collapseButton = jsObject.collapseButton;
    }
    
    if (hasValue(jsObject.featureListLayerTitle)) {
        dotNetFeaturesVisibleElements.featureListLayerTitle = jsObject.featureListLayerTitle;
    }
    
    if (hasValue(jsObject.featureNavigation)) {
        dotNetFeaturesVisibleElements.featureNavigation = jsObject.featureNavigation;
    }
    
    if (hasValue(jsObject.flow)) {
        dotNetFeaturesVisibleElements.flow = jsObject.flow;
    }
    
    if (hasValue(jsObject.heading)) {
        dotNetFeaturesVisibleElements.heading = jsObject.heading;
    }
    
    if (hasValue(jsObject.spinner)) {
        dotNetFeaturesVisibleElements.spinner = jsObject.spinner;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetFeaturesVisibleElements.id = geoBlazorId;
    }

    return dotNetFeaturesVisibleElements;
}

