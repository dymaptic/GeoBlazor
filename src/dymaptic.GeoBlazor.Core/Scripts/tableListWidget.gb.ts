// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import TableList from '@arcgis/core/widgets/TableList';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class TableListWidgetGenerated implements IPropertyWrapper {
    public widget: TableList;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: TableList) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    
    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async own(handleOrHandles: any): Promise<void> {
        this.widget.own(handleOrHandles);
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async render(): Promise<any> {
        return this.widget.render();
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async triggerAction(action: any,
        item: any): Promise<void> {
        this.widget.triggerAction(action,
            item);
    }

    async when(callback: any,
        errback: any): Promise<any> {
        return await this.widget.when(callback,
            errback);
    }

    // region properties
    
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetTableListViewModel } = await import('./tableListViewModel');
        return await buildDotNetTableListViewModel(this.widget.viewModel, this.layerId, this.viewId);
    }
    async setViewModel(value: any): Promise<void> {
        let { buildJsTableListViewModel } = await import('./tableListViewModel');
        this.widget.viewModel = await  buildJsTableListViewModel(value, this.layerId, this.viewId);
    }
    async getVisibleElements(): Promise<any> {
        if (!hasValue(this.widget.visibleElements)) {
            return null;
        }
        
        let { buildDotNetTableListVisibleElements } = await import('./tableListVisibleElements');
        return await buildDotNetTableListVisibleElements(this.widget.visibleElements, this.layerId, this.viewId);
    }
    async setVisibleElements(value: any): Promise<void> {
        let { buildJsTableListVisibleElements } = await import('./tableListVisibleElements');
        this.widget.visibleElements = await  buildJsTableListVisibleElements(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}

export async function buildJsTableListWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTableList = new TableList();
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsTableListViewModel } = await import('./tableListViewModel');
        jsTableList.viewModel = await buildJsTableListViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.visibleElements)) {
        let { buildJsTableListVisibleElements } = await import('./tableListVisibleElements');
        jsTableList.visibleElements = await buildJsTableListVisibleElements(dotNetObject.visibleElements, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.collapsed)) {
        jsTableList.collapsed = dotNetObject.collapsed;
    }
    if (hasValue(dotNetObject.container)) {
        jsTableList.container = dotNetObject.container;
    }
    if (hasValue(dotNetObject.dragEnabled)) {
        jsTableList.dragEnabled = dotNetObject.dragEnabled;
    }
    if (hasValue(dotNetObject.filterPlaceholder)) {
        jsTableList.filterPlaceholder = dotNetObject.filterPlaceholder;
    }
    if (hasValue(dotNetObject.filterText)) {
        jsTableList.filterText = dotNetObject.filterText;
    }
    if (hasValue(dotNetObject.headingLevel)) {
        jsTableList.headingLevel = dotNetObject.headingLevel;
    }
    if (hasValue(dotNetObject.icon)) {
        jsTableList.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.label)) {
        jsTableList.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.listItemCreatedFunction)) {
        jsTableList.listItemCreatedFunction = dotNetObject.listItemCreatedFunction;
    }
    if (hasValue(dotNetObject.map)) {
        jsTableList.map = dotNetObject.map;
    }
    if (hasValue(dotNetObject.minDragEnabledItems)) {
        jsTableList.minDragEnabledItems = dotNetObject.minDragEnabledItems;
    }
    if (hasValue(dotNetObject.minFilterItems)) {
        jsTableList.minFilterItems = dotNetObject.minFilterItems;
    }
    if (hasValue(dotNetObject.multipleSelectionEnabled)) {
        jsTableList.multipleSelectionEnabled = dotNetObject.multipleSelectionEnabled;
    }
    if (hasValue(dotNetObject.selectedItems)) {
        jsTableList.selectedItems = dotNetObject.selectedItems;
    }
    if (hasValue(dotNetObject.selectionEnabled)) {
        jsTableList.selectionEnabled = dotNetObject.selectionEnabled;
    }
    if (hasValue(dotNetObject.selectionMode)) {
        jsTableList.selectionMode = dotNetObject.selectionMode;
    }
    if (hasValue(dotNetObject.widgetId)) {
        jsTableList.id = dotNetObject.widgetId;
    }
    jsTableList.on('trigger-action', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsTriggerAction', evt);
    });
    
    let { default: TableListWidgetWrapper } = await import('./tableListWidget');
    let tableListWidgetWrapper = new TableListWidgetWrapper(jsTableList);
    tableListWidgetWrapper.geoBlazorId = dotNetObject.id;
    tableListWidgetWrapper.viewId = viewId;
    tableListWidgetWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(tableListWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = tableListWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsTableList;
    
    let dnInstantiatedObject = await buildDotNetTableListWidget(jsTableList, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TableListWidget', e);
    }
    
    return jsTableList;
}

export async function buildDotNetTableListWidgetGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTableListWidget: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.viewModel)) {
            let { buildDotNetTableListViewModel } = await import('./tableListViewModel');
            dotNetTableListWidget.viewModel = await buildDotNetTableListViewModel(jsObject.viewModel, layerId, viewId);
        }
        if (hasValue(jsObject.visibleElements)) {
            let { buildDotNetTableListVisibleElements } = await import('./tableListVisibleElements');
            dotNetTableListWidget.visibleElements = await buildDotNetTableListVisibleElements(jsObject.visibleElements, layerId, viewId);
        }
        if (hasValue(jsObject.collapsed)) {
            dotNetTableListWidget.collapsed = jsObject.collapsed;
        }
        if (hasValue(jsObject.container)) {
            dotNetTableListWidget.container = jsObject.container;
        }
        if (hasValue(jsObject.dragEnabled)) {
            dotNetTableListWidget.dragEnabled = jsObject.dragEnabled;
        }
        if (hasValue(jsObject.filterPlaceholder)) {
            dotNetTableListWidget.filterPlaceholder = jsObject.filterPlaceholder;
        }
        if (hasValue(jsObject.filterText)) {
            dotNetTableListWidget.filterText = jsObject.filterText;
        }
        if (hasValue(jsObject.headingLevel)) {
            dotNetTableListWidget.headingLevel = jsObject.headingLevel;
        }
        if (hasValue(jsObject.icon)) {
            dotNetTableListWidget.icon = jsObject.icon;
        }
        if (hasValue(jsObject.label)) {
            dotNetTableListWidget.label = jsObject.label;
        }
        if (hasValue(jsObject.listItemCreatedFunction)) {
            dotNetTableListWidget.listItemCreatedFunction = jsObject.listItemCreatedFunction;
        }
        if (hasValue(jsObject.map)) {
            dotNetTableListWidget.map = jsObject.map;
        }
        if (hasValue(jsObject.minDragEnabledItems)) {
            dotNetTableListWidget.minDragEnabledItems = jsObject.minDragEnabledItems;
        }
        if (hasValue(jsObject.minFilterItems)) {
            dotNetTableListWidget.minFilterItems = jsObject.minFilterItems;
        }
        if (hasValue(jsObject.multipleSelectionEnabled)) {
            dotNetTableListWidget.multipleSelectionEnabled = jsObject.multipleSelectionEnabled;
        }
        if (hasValue(jsObject.selectedItems)) {
            dotNetTableListWidget.selectedItems = jsObject.selectedItems;
        }
        if (hasValue(jsObject.selectionEnabled)) {
            dotNetTableListWidget.selectionEnabled = jsObject.selectionEnabled;
        }
        if (hasValue(jsObject.selectionMode)) {
            dotNetTableListWidget.selectionMode = jsObject.selectionMode;
        }
        if (hasValue(jsObject.tableItems)) {
            dotNetTableListWidget.tableItems = jsObject.tableItems;
        }
        if (hasValue(jsObject.type)) {
            dotNetTableListWidget.type = jsObject.type;
        }
        if (hasValue(jsObject.id)) {
            dotNetTableListWidget.widgetId = jsObject.id;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTableListWidget.id = k;
                break;
            }
        }
    }

    return dotNetTableListWidget;
}

