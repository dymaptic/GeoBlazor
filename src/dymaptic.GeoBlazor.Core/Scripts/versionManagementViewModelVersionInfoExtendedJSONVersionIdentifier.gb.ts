// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetVersionManagementViewModelVersionInfoExtendedJSONVersionIdentifier } from './versionManagementViewModelVersionInfoExtendedJSONVersionIdentifier';

export async function buildJsVersionManagementViewModelVersionInfoExtendedJSONVersionIdentifierGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsVersionManagementViewModelVersionInfoExtendedJSONVersionIdentifier: any = {};

    if (hasValue(dotNetObject.guid)) {
        jsVersionManagementViewModelVersionInfoExtendedJSONVersionIdentifier.guid = dotNetObject.guid;
    }
    if (hasValue(dotNetObject.name)) {
        jsVersionManagementViewModelVersionInfoExtendedJSONVersionIdentifier.name = dotNetObject.name;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsVersionManagementViewModelVersionInfoExtendedJSONVersionIdentifier);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsVersionManagementViewModelVersionInfoExtendedJSONVersionIdentifier;
    
    let { buildDotNetVersionManagementViewModelVersionInfoExtendedJSONVersionIdentifier } = await import('./versionManagementViewModelVersionInfoExtendedJSONVersionIdentifier');
    let dnInstantiatedObject = await buildDotNetVersionManagementViewModelVersionInfoExtendedJSONVersionIdentifier(jsVersionManagementViewModelVersionInfoExtendedJSONVersionIdentifier, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type VersionManagementViewModelVersionInfoExtendedJSONVersionIdentifier detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for VersionManagementViewModelVersionInfoExtendedJSONVersionIdentifier', e);
    }
    
    return jsVersionManagementViewModelVersionInfoExtendedJSONVersionIdentifier;
}


export async function buildDotNetVersionManagementViewModelVersionInfoExtendedJSONVersionIdentifierGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsVersionManagementViewModelVersionInfoExtendedJSONVersionIdentifier } = await import('./versionManagementViewModelVersionInfoExtendedJSONVersionIdentifier');
        jsComponentRef = await buildJsVersionManagementViewModelVersionInfoExtendedJSONVersionIdentifier(jsObject, layerId, viewId);
    }
    
    let dotNetVersionManagementViewModelVersionInfoExtendedJSONVersionIdentifier: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.guid)) {
        dotNetVersionManagementViewModelVersionInfoExtendedJSONVersionIdentifier.guid = jsObject.guid;
    }
    if (hasValue(jsObject.name)) {
        dotNetVersionManagementViewModelVersionInfoExtendedJSONVersionIdentifier.name = jsObject.name;
    }


    if (hasValue(geoBlazorId)) {
        dotNetVersionManagementViewModelVersionInfoExtendedJSONVersionIdentifier.id = geoBlazorId;
    }

    return dotNetVersionManagementViewModelVersionInfoExtendedJSONVersionIdentifier;
}

