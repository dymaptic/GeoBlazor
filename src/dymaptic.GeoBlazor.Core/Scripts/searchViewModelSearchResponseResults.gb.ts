// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSearchViewModelSearchResponseResults } from './searchViewModelSearchResponseResults';

export async function buildJsSearchViewModelSearchResponseResultsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSearchViewModelSearchResponseResults: any = {};
    if (hasValue(dotNetObject.results)) {
        let { buildJsSearchResult } = await import('./searchResult');
        jsSearchViewModelSearchResponseResults.results = await Promise.all(dotNetObject.results.map(async i => await buildJsSearchResult(i))) as any;
    }

    if (hasValue(dotNetObject.source)) {
        jsSearchViewModelSearchResponseResults.source = dotNetObject.source;
    }
    if (hasValue(dotNetObject.sourceIndex)) {
        jsSearchViewModelSearchResponseResults.sourceIndex = dotNetObject.sourceIndex;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSearchViewModelSearchResponseResults);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSearchViewModelSearchResponseResults;
    
    return jsSearchViewModelSearchResponseResults;
}


export async function buildDotNetSearchViewModelSearchResponseResultsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchViewModelSearchResponseResults: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.results)) {
        let { buildDotNetSearchResult } = await import('./searchResult');
        dotNetSearchViewModelSearchResponseResults.results = jsObject.results.map(i => buildDotNetSearchResult(i));
    }
    if (hasValue(jsObject.source)) {
        dotNetSearchViewModelSearchResponseResults.source = jsObject.source;
    }
    if (hasValue(jsObject.sourceIndex)) {
        dotNetSearchViewModelSearchResponseResults.sourceIndex = jsObject.sourceIndex;
    }

    return dotNetSearchViewModelSearchResponseResults;
}

