// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCIMMarkerPlacementInsidePolygon } from './cIMMarkerPlacementInsidePolygon';

export async function buildJsCIMMarkerPlacementInsidePolygonGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCIMMarkerPlacementInsidePolygon: any = {};

    if (hasValue(dotNetObject.clipping)) {
        jsCIMMarkerPlacementInsidePolygon.clipping = dotNetObject.clipping;
    }
    if (hasValue(dotNetObject.gridAngle)) {
        jsCIMMarkerPlacementInsidePolygon.gridAngle = dotNetObject.gridAngle;
    }
    if (hasValue(dotNetObject.gridType)) {
        jsCIMMarkerPlacementInsidePolygon.gridType = dotNetObject.gridType;
    }
    if (hasValue(dotNetObject.offsetX)) {
        jsCIMMarkerPlacementInsidePolygon.offsetX = dotNetObject.offsetX;
    }
    if (hasValue(dotNetObject.offsetY)) {
        jsCIMMarkerPlacementInsidePolygon.offsetY = dotNetObject.offsetY;
    }
    if (hasValue(dotNetObject.placePerPart)) {
        jsCIMMarkerPlacementInsidePolygon.placePerPart = dotNetObject.placePerPart;
    }
    if (hasValue(dotNetObject.primitiveName)) {
        jsCIMMarkerPlacementInsidePolygon.primitiveName = dotNetObject.primitiveName;
    }
    if (hasValue(dotNetObject.randomness)) {
        jsCIMMarkerPlacementInsidePolygon.randomness = dotNetObject.randomness;
    }
    if (hasValue(dotNetObject.seed)) {
        jsCIMMarkerPlacementInsidePolygon.seed = dotNetObject.seed;
    }
    if (hasValue(dotNetObject.shiftOddRows)) {
        jsCIMMarkerPlacementInsidePolygon.shiftOddRows = dotNetObject.shiftOddRows;
    }
    if (hasValue(dotNetObject.stepX)) {
        jsCIMMarkerPlacementInsidePolygon.stepX = dotNetObject.stepX;
    }
    if (hasValue(dotNetObject.stepY)) {
        jsCIMMarkerPlacementInsidePolygon.stepY = dotNetObject.stepY;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCIMMarkerPlacementInsidePolygon);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCIMMarkerPlacementInsidePolygon;
    
    let { buildDotNetCIMMarkerPlacementInsidePolygon } = await import('./cIMMarkerPlacementInsidePolygon');
    let dnInstantiatedObject = await buildDotNetCIMMarkerPlacementInsidePolygon(jsCIMMarkerPlacementInsidePolygon);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type CIMMarkerPlacementInsidePolygon detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CIMMarkerPlacementInsidePolygon', e);
    }
    
    return jsCIMMarkerPlacementInsidePolygon;
}


export async function buildDotNetCIMMarkerPlacementInsidePolygonGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCIMMarkerPlacementInsidePolygon: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.clipping)) {
        dotNetCIMMarkerPlacementInsidePolygon.clipping = jsObject.clipping;
    }
    if (hasValue(jsObject.gridAngle)) {
        dotNetCIMMarkerPlacementInsidePolygon.gridAngle = jsObject.gridAngle;
    }
    if (hasValue(jsObject.gridType)) {
        dotNetCIMMarkerPlacementInsidePolygon.gridType = jsObject.gridType;
    }
    if (hasValue(jsObject.offsetX)) {
        dotNetCIMMarkerPlacementInsidePolygon.offsetX = jsObject.offsetX;
    }
    if (hasValue(jsObject.offsetY)) {
        dotNetCIMMarkerPlacementInsidePolygon.offsetY = jsObject.offsetY;
    }
    if (hasValue(jsObject.placePerPart)) {
        dotNetCIMMarkerPlacementInsidePolygon.placePerPart = jsObject.placePerPart;
    }
    if (hasValue(jsObject.primitiveName)) {
        dotNetCIMMarkerPlacementInsidePolygon.primitiveName = jsObject.primitiveName;
    }
    if (hasValue(jsObject.randomness)) {
        dotNetCIMMarkerPlacementInsidePolygon.randomness = jsObject.randomness;
    }
    if (hasValue(jsObject.seed)) {
        dotNetCIMMarkerPlacementInsidePolygon.seed = jsObject.seed;
    }
    if (hasValue(jsObject.shiftOddRows)) {
        dotNetCIMMarkerPlacementInsidePolygon.shiftOddRows = jsObject.shiftOddRows;
    }
    if (hasValue(jsObject.stepX)) {
        dotNetCIMMarkerPlacementInsidePolygon.stepX = jsObject.stepX;
    }
    if (hasValue(jsObject.stepY)) {
        dotNetCIMMarkerPlacementInsidePolygon.stepY = jsObject.stepY;
    }
    if (hasValue(jsObject.type)) {
        dotNetCIMMarkerPlacementInsidePolygon.type = jsObject.type;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCIMMarkerPlacementInsidePolygon.id = geoBlazorId;
    }

    return dotNetCIMMarkerPlacementInsidePolygon;
}

