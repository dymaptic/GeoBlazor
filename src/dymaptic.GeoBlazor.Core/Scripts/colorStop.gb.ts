// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ColorStop from '@arcgis/core/renderers/visualVariables/support/ColorStop';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetColorStop } from './colorStop';

export async function buildJsColorStopGenerated(dotNetObject: any): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        properties.color = buildJsMapColor(dotNetObject.color) as any;
    }

    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.value)) {
        properties.value = dotNetObject.value;
    }
    let jsColorStop = new ColorStop(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsColorStop);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsColorStop;
    
    let { buildDotNetColorStop } = await import('./colorStop');
    let dnInstantiatedObject = await buildDotNetColorStop(jsColorStop);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type ColorStop detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ColorStop', e);
    }
    
    return jsColorStop;
}


export async function buildDotNetColorStopGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsColorStop } = await import('./colorStop');
        jsComponentRef = await buildJsColorStop(jsObject);
    }
    
    let dotNetColorStop: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.color)) {
        let { buildDotNetMapColor } = await import('./mapColor');
        dotNetColorStop.color = buildDotNetMapColor(jsObject.color);
    }
    if (hasValue(jsObject.label)) {
        dotNetColorStop.label = jsObject.label;
    }
    if (hasValue(jsObject.value)) {
        dotNetColorStop.value = jsObject.value;
    }


    if (hasValue(geoBlazorId)) {
        dotNetColorStop.id = geoBlazorId;
    }

    return dotNetColorStop;
}

