// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ColorStop from '@arcgis/core/renderers/visualVariables/support/ColorStop';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetColorStop } from './colorStop';

export async function buildJsColorStopGenerated(dotNetObject: any): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.color)) {
        properties.color = dotNetObject.color;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.value)) {
        properties.value = dotNetObject.value;
    }
    let jsColorStop = new ColorStop(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsColorStop);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsColorStop;
    
    let { buildDotNetColorStop } = await import('./colorStop');
    let dnInstantiatedObject = await buildDotNetColorStop(jsColorStop);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type ColorStop detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ColorStop', e);
    }
    
    return jsColorStop;
}


export async function buildDotNetColorStopGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetColorStop: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.color)) {
        dotNetColorStop.color = jsObject.color;
    }
    if (hasValue(jsObject.label)) {
        dotNetColorStop.label = jsObject.label;
    }
    if (hasValue(jsObject.value)) {
        dotNetColorStop.value = jsObject.value;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetColorStop.id = k;
                break;
            }
        }
    }

    return dotNetColorStop;
}

