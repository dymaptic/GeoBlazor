// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ColorStop from '@arcgis/core/renderers/visualVariables/support/ColorStop';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetColorStop } from './colorStop';

export async function buildJsColorStopGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        properties.color = buildJsMapColor(dotNetObject.color) as any;
    }

    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.value)) {
        properties.value = dotNetObject.value;
    }
    let jsColorStop = new ColorStop(properties);
    
    jsObjectRefs[dotNetObject.id] = jsColorStop;
    arcGisObjectRefs[dotNetObject.id] = jsColorStop;
    
    return jsColorStop;
}


export async function buildDotNetColorStopGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetColorStop: any = {};
    
    if (hasValue(jsObject.color)) {
        let { buildDotNetMapColor } = await import('./mapColor');
        dotNetColorStop.color = buildDotNetMapColor(jsObject.color);
    }
    
    if (hasValue(jsObject.label)) {
        dotNetColorStop.label = jsObject.label;
    }
    
    if (hasValue(jsObject.value)) {
        dotNetColorStop.value = jsObject.value;
    }

    return dotNetColorStop;
}

