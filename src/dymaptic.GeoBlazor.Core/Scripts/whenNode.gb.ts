// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetWhenNode } from './whenNode';

export async function buildJsWhenNodeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsWhenNode: any = {};

    if (hasValue(dotNetObject.operand)) {
        jsWhenNode.operand = dotNetObject.operand;
    }
    if (hasValue(dotNetObject.value)) {
        jsWhenNode.value = dotNetObject.value;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsWhenNode);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsWhenNode;
    
    return jsWhenNode;
}


export async function buildDotNetWhenNodeGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsWhenNode } = await import('./whenNode');
        jsComponentRef = await buildJsWhenNode(jsObject, layerId, viewId);
    }
    
    let dotNetWhenNode: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.operand)) {
        dotNetWhenNode.operand = jsObject.operand;
    }
    if (hasValue(jsObject.type)) {
        dotNetWhenNode.type = jsObject.type;
    }
    if (hasValue(jsObject.value)) {
        dotNetWhenNode.value = jsObject.value;
    }

    return dotNetWhenNode;
}

