// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetGraphicsLayerElevationInfoFeatureExpressionInfo } from './graphicsLayerElevationInfoFeatureExpressionInfo';

export async function buildJsGraphicsLayerElevationInfoFeatureExpressionInfoGenerated(dotNetObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsGraphicsLayerElevationInfoFeatureExpressionInfo: any = {};

    if (hasValue(dotNetObject.expression)) {
        jsGraphicsLayerElevationInfoFeatureExpressionInfo.expression = dotNetObject.expression;
    }
    if (hasValue(dotNetObject.title)) {
        jsGraphicsLayerElevationInfoFeatureExpressionInfo.title = dotNetObject.title;
    }
    
    jsObjectRefs[dotNetObject.id] = jsGraphicsLayerElevationInfoFeatureExpressionInfo;
    arcGisObjectRefs[dotNetObject.id] = jsGraphicsLayerElevationInfoFeatureExpressionInfo;
    
    return jsGraphicsLayerElevationInfoFeatureExpressionInfo;
}


export async function buildDotNetGraphicsLayerElevationInfoFeatureExpressionInfoGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGraphicsLayerElevationInfoFeatureExpressionInfo: any = {};
    
    if (hasValue(jsObject.expression)) {
        dotNetGraphicsLayerElevationInfoFeatureExpressionInfo.expression = jsObject.expression;
    }
    
    if (hasValue(jsObject.title)) {
        dotNetGraphicsLayerElevationInfoFeatureExpressionInfo.title = jsObject.title;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetGraphicsLayerElevationInfoFeatureExpressionInfo.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetGraphicsLayerElevationInfoFeatureExpressionInfo.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetGraphicsLayerElevationInfoFeatureExpressionInfo.id)) {
        jsObjectRefs[dotNetGraphicsLayerElevationInfoFeatureExpressionInfo.id] ??= jsObject;
        arcGisObjectRefs[dotNetGraphicsLayerElevationInfoFeatureExpressionInfo.id] ??= jsObject;
    }

    return dotNetGraphicsLayerElevationInfoFeatureExpressionInfo;
}

