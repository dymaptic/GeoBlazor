// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetArea } from './area';

export async function buildJsAreaGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsArea: any = {};

    if (hasValue(dotNetObject.unit)) {
        jsArea.unit = dotNetObject.unit;
    }
    if (hasValue(dotNetObject.value)) {
        jsArea.value = dotNetObject.value;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsArea);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsArea;
    
    return jsArea;
}


export async function buildDotNetAreaGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetArea: any = {};
    
    if (hasValue(jsObject.type)) {
        dotNetArea.type = jsObject.type;
    }
    
    if (hasValue(jsObject.unit)) {
        dotNetArea.unit = removeCircularReferences(jsObject.unit);
    }
    
    if (hasValue(jsObject.value)) {
        dotNetArea.value = jsObject.value;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetArea.id = geoBlazorId;
    }

    return dotNetArea;
}

