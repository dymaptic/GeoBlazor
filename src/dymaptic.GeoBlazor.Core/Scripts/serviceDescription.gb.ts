// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetServiceDescription } from './serviceDescription';

export async function buildJsServiceDescriptionGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsServiceDescription: any = {};

    if (hasValue(dotNetObject.currentVersion)) {
        jsServiceDescription.currentVersion = dotNetObject.currentVersion;
    }
    if (hasValue(dotNetObject.defaultTravelMode)) {
        jsServiceDescription.defaultTravelMode = dotNetObject.defaultTravelMode;
    }
    if (hasValue(dotNetObject.supportedTravelModes) && dotNetObject.supportedTravelModes.length > 0) {
        jsServiceDescription.supportedTravelModes = dotNetObject.supportedTravelModes;
    }
    
    jsObjectRefs[dotNetObject.id] = jsServiceDescription;
    arcGisObjectRefs[dotNetObject.id] = jsServiceDescription;
    
    return jsServiceDescription;
}


export async function buildDotNetServiceDescriptionGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetServiceDescription: any = {};
    
    if (hasValue(jsObject.currentVersion)) {
        dotNetServiceDescription.currentVersion = jsObject.currentVersion;
    }
    
    if (hasValue(jsObject.defaultTravelMode)) {
        dotNetServiceDescription.defaultTravelMode = removeCircularReferences(jsObject.defaultTravelMode);
    }
    
    if (hasValue(jsObject.supportedTravelModes)) {
        dotNetServiceDescription.supportedTravelModes = removeCircularReferences(jsObject.supportedTravelModes);
    }
    

    return dotNetServiceDescription;
}

