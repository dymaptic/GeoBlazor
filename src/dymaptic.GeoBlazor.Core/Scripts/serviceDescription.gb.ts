// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetServiceDescription } from './serviceDescription';

export async function buildJsServiceDescriptionGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsServiceDescription: any = {};
    if (hasValue(dotNetObject.defaultTravelMode)) {
        let { buildJsTravelMode } = await import('./travelMode');
        jsServiceDescription.defaultTravelMode = await buildJsTravelMode(dotNetObject.defaultTravelMode, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.supportedTravelModes)) {
        let { buildJsTravelMode } = await import('./travelMode');
        jsServiceDescription.supportedTravelModes = await Promise.all(dotNetObject.supportedTravelModes.map(async i => await buildJsTravelMode(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.currentVersion)) {
        jsServiceDescription.currentVersion = dotNetObject.currentVersion;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsServiceDescription);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsServiceDescription;
    
    return jsServiceDescription;
}


export async function buildDotNetServiceDescriptionGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsServiceDescription } = await import('./serviceDescription');
        jsComponentRef = await buildJsServiceDescription(jsObject, layerId, viewId);
    }
    
    let dotNetServiceDescription: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.defaultTravelMode)) {
        let { buildDotNetTravelMode } = await import('./travelMode');
        dotNetServiceDescription.defaultTravelMode = await buildDotNetTravelMode(jsObject.defaultTravelMode, layerId, viewId);
    }
    if (hasValue(jsObject.supportedTravelModes)) {
        let { buildDotNetTravelMode } = await import('./travelMode');
        dotNetServiceDescription.supportedTravelModes = await Promise.all(jsObject.supportedTravelModes.map(async i => await buildDotNetTravelMode(i, layerId, viewId)));
    }
    if (hasValue(jsObject.currentVersion)) {
        dotNetServiceDescription.currentVersion = jsObject.currentVersion;
    }

    return dotNetServiceDescription;
}

