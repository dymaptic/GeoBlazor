import { buildDotNetImageAngleResult } from './imageAngleResult';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import ImageAngleResult from '@arcgis/core/rest/support/ImageAngleResult';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsImageAngleResultGenerated(dotNetObject: any): Promise<any> {
    let jsImageAngleResult = new ImageAngleResult();
    if (hasValue(dotNetObject.spatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        jsImageAngleResult.spatialReference = buildJsSpatialReference(dotNetObject.spatialReference) as any;
    }

    if (hasValue(dotNetObject.north)) {
        jsImageAngleResult.north = dotNetObject.north;
    }
    if (hasValue(dotNetObject.up)) {
        jsImageAngleResult.up = dotNetObject.up;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsImageAngleResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageAngleResult;
    
    let dnInstantiatedObject = await buildDotNetImageAngleResult(jsImageAngleResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImageAngleResult', e);
    }
    
    return jsImageAngleResult;
}
export async function buildDotNetImageAngleResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageAngleResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.spatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetImageAngleResult.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference);
        }
        if (hasValue(jsObject.north)) {
            dotNetImageAngleResult.north = jsObject.north;
        }
        if (hasValue(jsObject.up)) {
            dotNetImageAngleResult.up = jsObject.up;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImageAngleResult.id = k;
                break;
            }
        }
    }

    return dotNetImageAngleResult;
}

