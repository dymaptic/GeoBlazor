// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageAngleResult from '@arcgis/core/rest/support/ImageAngleResult';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetImageAngleResult } from './imageAngleResult';

export async function buildJsImageAngleResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.north)) {
        properties.north = dotNetObject.north;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        const { id, dotNetComponentReference, ...sanitizedSpatialReference } = dotNetObject.spatialReference;
        properties.spatialReference = sanitizedSpatialReference;
    }
    if (hasValue(dotNetObject.up)) {
        properties.up = dotNetObject.up;
    }
    let jsImageAngleResult = new ImageAngleResult(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsImageAngleResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageAngleResult;
    
    let { buildDotNetImageAngleResult } = await import('./imageAngleResult');
    let dnInstantiatedObject = await buildDotNetImageAngleResult(jsImageAngleResult);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type ImageAngleResult detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImageAngleResult', e);
    }
    
    return jsImageAngleResult;
}


export async function buildDotNetImageAngleResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageAngleResult: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.north)) {
        dotNetImageAngleResult.north = jsObject.north;
    }
    if (hasValue(jsObject.spatialReference)) {
        dotNetImageAngleResult.spatialReference = jsObject.spatialReference;
    }
    if (hasValue(jsObject.up)) {
        dotNetImageAngleResult.up = jsObject.up;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImageAngleResult.id = k;
                break;
            }
        }
    }

    return dotNetImageAngleResult;
}

