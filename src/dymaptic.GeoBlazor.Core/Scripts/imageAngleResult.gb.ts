// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageAngleResult from '@arcgis/core/rest/support/ImageAngleResult';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, sanitize } from './arcGisJsInterop';
import { buildDotNetImageAngleResult } from './imageAngleResult';

export async function buildJsImageAngleResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.north)) {
        properties.north = dotNetObject.north;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        properties.spatialReference = sanitize(dotNetObject.spatialReference);
    }
    if (hasValue(dotNetObject.up)) {
        properties.up = dotNetObject.up;
    }
    let jsImageAngleResult = new ImageAngleResult(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsImageAngleResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageAngleResult;
    
    return jsImageAngleResult;
}


export async function buildDotNetImageAngleResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsImageAngleResult } = await import('./imageAngleResult');
        jsComponentRef = await buildJsImageAngleResult(jsObject, layerId, viewId);
    }
    
    let dotNetImageAngleResult: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.north)) {
        dotNetImageAngleResult.north = jsObject.north;
    }
    if (hasValue(jsObject.spatialReference)) {
        dotNetImageAngleResult.spatialReference = jsObject.spatialReference;
    }
    if (hasValue(jsObject.up)) {
        dotNetImageAngleResult.up = jsObject.up;
    }

    return dotNetImageAngleResult;
}

