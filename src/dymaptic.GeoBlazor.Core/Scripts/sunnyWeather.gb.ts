// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import SunnyWeather from '@arcgis/core/views/3d/environment/SunnyWeather';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetSunnyWeather } from './sunnyWeather';

export async function buildJsSunnyWeatherGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.cloudCover)) {
        properties.cloudCover = dotNetObject.cloudCover;
    }
    let jsSunnyWeather = new SunnyWeather(properties);
    
    jsObjectRefs[dotNetObject.id] = jsSunnyWeather;
    arcGisObjectRefs[dotNetObject.id] = jsSunnyWeather;
    
    return jsSunnyWeather;
}


export async function buildDotNetSunnyWeatherGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSunnyWeather: any = {};
    
    if (hasValue(jsObject.cloudCover)) {
        dotNetSunnyWeather.cloudCover = jsObject.cloudCover;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetSunnyWeather.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSunnyWeather.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetSunnyWeather.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetSunnyWeather.id)) {
        jsObjectRefs[dotNetSunnyWeather.id] ??= jsObject;
        arcGisObjectRefs[dotNetSunnyWeather.id] ??= jsObject;
    }

    return dotNetSunnyWeather;
}

