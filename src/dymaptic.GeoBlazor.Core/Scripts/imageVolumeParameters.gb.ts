// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageVolumeParameters from '@arcgis/core/rest/support/ImageVolumeParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetImageVolumeParameters } from './imageVolumeParameters';

export async function buildJsImageVolumeParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.geometries) && dotNetObject.geometries.length > 0) {
        let { buildJsGeometry } = await import('./geometry');
        properties.geometries = dotNetObject.geometries.map(i => buildJsGeometry(i)) as any;
    }
    if (hasValue(dotNetObject.mosaicRule)) {
        let { buildJsMosaicRule } = await import('./mosaicRule');
        properties.mosaicRule = await buildJsMosaicRule(dotNetObject.mosaicRule) as any;
    }
    if (hasValue(dotNetObject.pixelSize)) {
        let { buildJsPoint } = await import('./point');
        properties.pixelSize = buildJsPoint(dotNetObject.pixelSize) as any;
    }

    if (hasValue(dotNetObject.baseType)) {
        properties.baseType = dotNetObject.baseType;
    }
    if (hasValue(dotNetObject.constantZ)) {
        properties.constantZ = dotNetObject.constantZ;
    }
    let jsImageVolumeParameters = new ImageVolumeParameters(properties);
    
    jsObjectRefs[dotNetObject.id] = jsImageVolumeParameters;
    arcGisObjectRefs[dotNetObject.id] = jsImageVolumeParameters;
    
    return jsImageVolumeParameters;
}


export async function buildDotNetImageVolumeParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageVolumeParameters: any = {};
    
    if (hasValue(jsObject.geometries)) {
        let { buildDotNetGeometry } = await import('./geometry');
        dotNetImageVolumeParameters.geometries = jsObject.geometries.map(i => buildDotNetGeometry(i));
    }
    
    if (hasValue(jsObject.mosaicRule)) {
        let { buildDotNetMosaicRule } = await import('./mosaicRule');
        dotNetImageVolumeParameters.mosaicRule = await buildDotNetMosaicRule(jsObject.mosaicRule);
    }
    
    if (hasValue(jsObject.pixelSize)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetImageVolumeParameters.pixelSize = buildDotNetPoint(jsObject.pixelSize);
    }
    
    if (hasValue(jsObject.baseType)) {
        dotNetImageVolumeParameters.baseType = removeCircularReferences(jsObject.baseType);
    }
    
    if (hasValue(jsObject.constantZ)) {
        dotNetImageVolumeParameters.constantZ = jsObject.constantZ;
    }
    

    return dotNetImageVolumeParameters;
}

