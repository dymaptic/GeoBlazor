// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetLegendViewModelLayerInfos } from './legendViewModelLayerInfos';

export async function buildJsLegendViewModelLayerInfosGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsLegendViewModelLayerInfos: any = {};
    if (hasValue(dotNetObject.layerId) && arcGisObjectRefs.hasOwnProperty(dotNetObject.layerId)) {
        jsLegendViewModelLayerInfos.layer = arcGisObjectRefs[dotNetObject.layerId!];
    } else if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsLegendViewModelLayerInfos.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId);
    }

    if (hasValue(dotNetObject.title)) {
        jsLegendViewModelLayerInfos.title = dotNetObject.title;
    }
    
    jsObjectRefs[dotNetObject.id] = jsLegendViewModelLayerInfos;
    arcGisObjectRefs[dotNetObject.id] = jsLegendViewModelLayerInfos;
    
    return jsLegendViewModelLayerInfos;
}


export async function buildDotNetLegendViewModelLayerInfosGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLegendViewModelLayerInfos: any = {};
    
    if (hasValue(jsObject.layer)) {
        dotNetLegendViewModelLayerInfos.layer = removeCircularReferences(jsObject.layer);
    }
    
    if (hasValue(jsObject.title)) {
        dotNetLegendViewModelLayerInfos.title = jsObject.title;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetLegendViewModelLayerInfos.id = geoBlazorId;
    }

    return dotNetLegendViewModelLayerInfos;
}

