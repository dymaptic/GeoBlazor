// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetLegendViewModelLayerInfos } from './legendViewModelLayerInfos';

export async function buildJsLegendViewModelLayerInfosGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsLegendViewModelLayerInfos: any = {}
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsLegendViewModelLayerInfos.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.title)) {
        jsLegendViewModelLayerInfos.title = dotNetObject.title;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsLegendViewModelLayerInfos);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLegendViewModelLayerInfos;
    
    let dnInstantiatedObject = await buildDotNetLegendViewModelLayerInfos(jsLegendViewModelLayerInfos);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LegendViewModelLayerInfos', e);
    }
    
    return jsLegendViewModelLayerInfos;
}

export async function buildDotNetLegendViewModelLayerInfosGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLegendViewModelLayerInfos: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.title)) {
            dotNetLegendViewModelLayerInfos.title = jsObject.title;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLegendViewModelLayerInfos.id = k;
                break;
            }
        }
    }

    return dotNetLegendViewModelLayerInfos;
}

