// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences, generateSerializableJson } from './arcGisJsInterop';
import { buildDotNetSuggestResponseErrors } from './suggestResponseErrors';

export async function buildJsSuggestResponseErrorsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsSuggestResponseErrors: any = {};

    if (hasValue(dotNetObject.error)) {
        jsSuggestResponseErrors.error = dotNetObject.error;
    }
    if (hasValue(dotNetObject.source)) {
        jsSuggestResponseErrors.source = JSON.parse(dotNetObject.source);
    }
    if (hasValue(dotNetObject.sourceIndex)) {
        jsSuggestResponseErrors.sourceIndex = dotNetObject.sourceIndex;
    }
    
    jsObjectRefs[dotNetObject.id] = jsSuggestResponseErrors;
    arcGisObjectRefs[dotNetObject.id] = jsSuggestResponseErrors;
    
    return jsSuggestResponseErrors;
}


export async function buildDotNetSuggestResponseErrorsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSuggestResponseErrors: any = {};
    
    if (hasValue(jsObject.error)) {
        dotNetSuggestResponseErrors.error = removeCircularReferences(jsObject.error);
    }
    
    if (hasValue(jsObject.source)) {
        dotNetSuggestResponseErrors.source = generateSerializableJson(jsObject.source);
    }
    
    if (hasValue(jsObject.sourceIndex)) {
        dotNetSuggestResponseErrors.sourceIndex = jsObject.sourceIndex;
    }
    

    return dotNetSuggestResponseErrors;
}

