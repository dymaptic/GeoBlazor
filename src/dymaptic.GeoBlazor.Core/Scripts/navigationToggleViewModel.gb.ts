// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import NavigationToggleViewModel from '@arcgis/core/widgets/NavigationToggle/NavigationToggleViewModel';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class NavigationToggleViewModelGenerated implements IPropertyWrapper {
    public component: NavigationToggleViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: NavigationToggleViewModel) {
        this.component = component;
    }

    // region methods

    unwrap() {
        return this.component;
    }

    async toggle(): Promise<void> {
        this.component.toggle();
    }

    // region properties

    getProperty(prop: string): any {
        return this.component[prop];
    }

    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsNavigationToggleViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsNavigationToggleViewModel = new NavigationToggleViewModel();

    if (hasValue(dotNetObject.navigationMode)) {
        jsNavigationToggleViewModel.navigationMode = dotNetObject.navigationMode;
    }
    if (hasValue(dotNetObject.view)) {
        jsNavigationToggleViewModel.view = dotNetObject.view;
    }

    let {default: NavigationToggleViewModelWrapper} = await import('./navigationToggleViewModel');
    let navigationToggleViewModelWrapper = new NavigationToggleViewModelWrapper(jsNavigationToggleViewModel);
    navigationToggleViewModelWrapper.geoBlazorId = dotNetObject.id;
    navigationToggleViewModelWrapper.viewId = viewId;
    navigationToggleViewModelWrapper.layerId = layerId;

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(navigationToggleViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = navigationToggleViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsNavigationToggleViewModel;
    let {buildDotNetNavigationToggleViewModel} = await import('./navigationToggleViewModel');
    let dnInstantiatedObject = await buildDotNetNavigationToggleViewModel(jsNavigationToggleViewModel);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for NavigationToggleViewModel', e);
    }

    return jsNavigationToggleViewModel;
}

export async function buildDotNetNavigationToggleViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetNavigationToggleViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.navigationMode)) {
        dotNetNavigationToggleViewModel.navigationMode = jsObject.navigationMode;
    }
    if (hasValue(jsObject.state)) {
        dotNetNavigationToggleViewModel.state = jsObject.state;
    }
    if (hasValue(jsObject.view)) {
        dotNetNavigationToggleViewModel.view = jsObject.view;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetNavigationToggleViewModel.id = k;
                break;
            }
        }
    }

    return dotNetNavigationToggleViewModel;
}

