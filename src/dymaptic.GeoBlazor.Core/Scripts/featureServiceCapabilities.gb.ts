// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetFeatureServiceCapabilities } from './featureServiceCapabilities';

export async function buildJsFeatureServiceCapabilitiesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsFeatureServiceCapabilities: any = {};
    if (hasValue(dotNetObject.data)) {
        let { buildJsFeatureServiceCapabilitiesData } = await import('./featureServiceCapabilitiesData');
        jsFeatureServiceCapabilities.data = await buildJsFeatureServiceCapabilitiesData(dotNetObject.data, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.editing)) {
        let { buildJsFeatureServiceCapabilitiesEditing } = await import('./featureServiceCapabilitiesEditing');
        jsFeatureServiceCapabilities.editing = await buildJsFeatureServiceCapabilitiesEditing(dotNetObject.editing, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.operations)) {
        let { buildJsFeatureServiceCapabilitiesOperations } = await import('./featureServiceCapabilitiesOperations');
        jsFeatureServiceCapabilities.operations = await buildJsFeatureServiceCapabilitiesOperations(dotNetObject.operations, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.sync)) {
        let { buildJsCapabilitiesSync } = await import('./capabilitiesSync');
        jsFeatureServiceCapabilities.sync = await buildJsCapabilitiesSync(dotNetObject.sync, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.query)) {
        jsFeatureServiceCapabilities.query = dotNetObject.query;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureServiceCapabilities);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureServiceCapabilities;
    
    return jsFeatureServiceCapabilities;
}


export async function buildDotNetFeatureServiceCapabilitiesGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureServiceCapabilities: any = {};
    
    if (hasValue(jsObject.data)) {
        let { buildDotNetFeatureServiceCapabilitiesData } = await import('./featureServiceCapabilitiesData');
        dotNetFeatureServiceCapabilities.data = await buildDotNetFeatureServiceCapabilitiesData(jsObject.data, layerId, viewId);
    }
    
    if (hasValue(jsObject.editing)) {
        let { buildDotNetFeatureServiceCapabilitiesEditing } = await import('./featureServiceCapabilitiesEditing');
        dotNetFeatureServiceCapabilities.editing = await buildDotNetFeatureServiceCapabilitiesEditing(jsObject.editing, layerId, viewId);
    }
    
    if (hasValue(jsObject.operations)) {
        let { buildDotNetFeatureServiceCapabilitiesOperations } = await import('./featureServiceCapabilitiesOperations');
        dotNetFeatureServiceCapabilities.operations = await buildDotNetFeatureServiceCapabilitiesOperations(jsObject.operations, layerId, viewId);
    }
    
    if (hasValue(jsObject.sync)) {
        let { buildDotNetCapabilitiesSync } = await import('./capabilitiesSync');
        dotNetFeatureServiceCapabilities.sync = await buildDotNetCapabilitiesSync(jsObject.sync, layerId, viewId);
    }
    
    if (hasValue(jsObject.query)) {
        dotNetFeatureServiceCapabilities.query = removeCircularReferences(jsObject.query);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetFeatureServiceCapabilities.id = geoBlazorId;
    }

    return dotNetFeatureServiceCapabilities;
}

