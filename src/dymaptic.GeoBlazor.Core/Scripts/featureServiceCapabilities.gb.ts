// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetFeatureServiceCapabilities } from './featureServiceCapabilities';

export async function buildJsFeatureServiceCapabilitiesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureServiceCapabilities: any = {};
    if (hasValue(dotNetObject.data)) {
        let { buildJsFeatureServiceCapabilitiesData } = await import('./featureServiceCapabilitiesData');
        jsFeatureServiceCapabilities.data = await buildJsFeatureServiceCapabilitiesData(dotNetObject.data, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.editing)) {
        let { buildJsFeatureServiceCapabilitiesEditing } = await import('./featureServiceCapabilitiesEditing');
        jsFeatureServiceCapabilities.editing = await buildJsFeatureServiceCapabilitiesEditing(dotNetObject.editing, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.operations)) {
        let { buildJsFeatureServiceCapabilitiesOperations } = await import('./featureServiceCapabilitiesOperations');
        jsFeatureServiceCapabilities.operations = await buildJsFeatureServiceCapabilitiesOperations(dotNetObject.operations, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.sync)) {
        let { buildJsCapabilitiesSync } = await import('./capabilitiesSync');
        jsFeatureServiceCapabilities.sync = await buildJsCapabilitiesSync(dotNetObject.sync, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.query)) {
        jsFeatureServiceCapabilities.query = dotNetObject.query;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureServiceCapabilities);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureServiceCapabilities;
    
    let { buildDotNetFeatureServiceCapabilities } = await import('./featureServiceCapabilities');
    let dnInstantiatedObject = await buildDotNetFeatureServiceCapabilities(jsFeatureServiceCapabilities);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type FeatureServiceCapabilities detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureServiceCapabilities', e);
    }
    
    return jsFeatureServiceCapabilities;
}


export async function buildDotNetFeatureServiceCapabilitiesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureServiceCapabilities: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.data)) {
        let { buildDotNetFeatureServiceCapabilitiesData } = await import('./featureServiceCapabilitiesData');
        dotNetFeatureServiceCapabilities.data = await buildDotNetFeatureServiceCapabilitiesData(jsObject.data);
    }
    if (hasValue(jsObject.editing)) {
        let { buildDotNetFeatureServiceCapabilitiesEditing } = await import('./featureServiceCapabilitiesEditing');
        dotNetFeatureServiceCapabilities.editing = await buildDotNetFeatureServiceCapabilitiesEditing(jsObject.editing);
    }
    if (hasValue(jsObject.operations)) {
        let { buildDotNetFeatureServiceCapabilitiesOperations } = await import('./featureServiceCapabilitiesOperations');
        dotNetFeatureServiceCapabilities.operations = await buildDotNetFeatureServiceCapabilitiesOperations(jsObject.operations);
    }
    if (hasValue(jsObject.sync)) {
        let { buildDotNetCapabilitiesSync } = await import('./capabilitiesSync');
        dotNetFeatureServiceCapabilities.sync = await buildDotNetCapabilitiesSync(jsObject.sync);
    }
    if (hasValue(jsObject.query)) {
        dotNetFeatureServiceCapabilities.query = jsObject.query;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetFeatureServiceCapabilities.id = geoBlazorId;
    }

    return dotNetFeatureServiceCapabilities;
}

