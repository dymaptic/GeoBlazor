// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import PictureMarkerSymbol from '@arcgis/core/symbols/PictureMarkerSymbol';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PictureMarkerSymbolGenerated implements IPropertyWrapper {
    public component: PictureMarkerSymbol;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: PictureMarkerSymbol) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getColor(): Promise<any> {
        let { buildDotNetMapColor } = await import('./mapColor');
        return buildDotNetMapColor(this.component.color);
    }
    async setColor(value: any): Promise<void> {
        let { buildJsMapColor } = await import('./mapColor');
        this.component.color = await  buildJsMapColor(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsPictureMarkerSymbolGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPictureMarkerSymbol = new PictureMarkerSymbol();
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsPictureMarkerSymbol.color = await buildJsMapColor(dotNetObject.color, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.angle)) {
        jsPictureMarkerSymbol.angle = dotNetObject.angle;
    }
    if (hasValue(dotNetObject.height)) {
        jsPictureMarkerSymbol.height = dotNetObject.height;
    }
    if (hasValue(dotNetObject.url)) {
        jsPictureMarkerSymbol.url = dotNetObject.url;
    }
    if (hasValue(dotNetObject.width)) {
        jsPictureMarkerSymbol.width = dotNetObject.width;
    }
    if (hasValue(dotNetObject.xoffset)) {
        jsPictureMarkerSymbol.xoffset = dotNetObject.xoffset;
    }
    if (hasValue(dotNetObject.yoffset)) {
        jsPictureMarkerSymbol.yoffset = dotNetObject.yoffset;
    }
    let { default: PictureMarkerSymbolWrapper } = await import('./pictureMarkerSymbol');
    let pictureMarkerSymbolWrapper = new PictureMarkerSymbolWrapper(jsPictureMarkerSymbol);
    pictureMarkerSymbolWrapper.geoBlazorId = dotNetObject.id;
    pictureMarkerSymbolWrapper.viewId = viewId;
    pictureMarkerSymbolWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(pictureMarkerSymbolWrapper);
    jsObjectRefs[dotNetObject.id] = pictureMarkerSymbolWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsPictureMarkerSymbol;
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PictureMarkerSymbol', e);
    }
    
    return jsPictureMarkerSymbol;
}

export async function buildDotNetPictureMarkerSymbolGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPictureMarkerSymbol: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.color)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetPictureMarkerSymbol.color = buildDotNetMapColor(jsObject.color);
        }
        if (hasValue(jsObject.angle)) {
            dotNetPictureMarkerSymbol.angle = jsObject.angle;
        }
        if (hasValue(jsObject.height)) {
            dotNetPictureMarkerSymbol.height = jsObject.height;
        }
        if (hasValue(jsObject.type)) {
            dotNetPictureMarkerSymbol.type = jsObject.type;
        }
        if (hasValue(jsObject.url)) {
            dotNetPictureMarkerSymbol.url = jsObject.url;
        }
        if (hasValue(jsObject.width)) {
            dotNetPictureMarkerSymbol.width = jsObject.width;
        }
        if (hasValue(jsObject.xoffset)) {
            dotNetPictureMarkerSymbol.xoffset = jsObject.xoffset;
        }
        if (hasValue(jsObject.yoffset)) {
            dotNetPictureMarkerSymbol.yoffset = jsObject.yoffset;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPictureMarkerSymbol.id = k;
                break;
            }
        }
    }

    return dotNetPictureMarkerSymbol;
}

