// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import CatalogLayerListViewModel from '@arcgis/core/widgets/CatalogLayerList/CatalogLayerListViewModel';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CatalogLayerListViewModelGenerated implements IPropertyWrapper {
    public component: CatalogLayerListViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: CatalogLayerListViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async triggerAction(__0: any,
        __1: any): Promise<void> {
        let { buildJsListItem } = await import('./listItem');
        let js__1 = await buildJsListItem(__1, this.layerId, this.viewId) as any;
        this.component.triggerAction(__0,
            js__1);
    }

    // region properties
    
    async getCatalogItems(): Promise<any> {
        if (!hasValue(this.component.catalogItems)) {
            return null;
        }
        
        let { buildDotNetListItem } = await import('./listItem');
        return await Promise.all(this.component.catalogItems.map(async i => await buildDotNetListItem(i)));
    }
    
    async getCatalogLayer(): Promise<any> {
        if (!hasValue(this.component.catalogLayer)) {
            return null;
        }
        
        let { buildDotNetCatalogLayer } = await import('./catalogLayer');
        return await buildDotNetCatalogLayer(this.component.catalogLayer, this.layerId, this.viewId);
    }
    async setCatalogLayer(value: any): Promise<void> {
        let { buildJsCatalogLayer } = await import('./catalogLayer');
        this.component.catalogLayer = await  buildJsCatalogLayer(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsCatalogLayerListViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCatalogLayerListViewModel = new CatalogLayerListViewModel();
    if (hasValue(dotNetObject.catalogLayer)) {
        let { buildJsCatalogLayer } = await import('./catalogLayer');
        jsCatalogLayerListViewModel.catalogLayer = await buildJsCatalogLayer(dotNetObject.catalogLayer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.hasListItemCreatedFunction) && dotNetObject.hasListItemCreatedFunction) {
        jsCatalogLayerListViewModel.listItemCreatedFunction = (event) => {
            dotNetObject.dotNetObjectReference.invokeMethodAsync('OnJsListItemCreatedFunction', event);
        };
    }

    if (hasValue(dotNetObject.checkPublishStatusEnabled)) {
        jsCatalogLayerListViewModel.checkPublishStatusEnabled = dotNetObject.checkPublishStatusEnabled;
    }
    if (hasValue(dotNetObject.view)) {
        jsCatalogLayerListViewModel.view = dotNetObject.view;
    }
    jsCatalogLayerListViewModel.on('trigger-action', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsTriggerAction', evt);
    });
    

    let { default: CatalogLayerListViewModelWrapper } = await import('./catalogLayerListViewModel');
    let catalogLayerListViewModelWrapper = new CatalogLayerListViewModelWrapper(jsCatalogLayerListViewModel);
    catalogLayerListViewModelWrapper.geoBlazorId = dotNetObject.id;
    catalogLayerListViewModelWrapper.viewId = viewId;
    catalogLayerListViewModelWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(catalogLayerListViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = catalogLayerListViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsCatalogLayerListViewModel;
    let { buildDotNetCatalogLayerListViewModel } = await import('./catalogLayerListViewModel');
    let dnInstantiatedObject = await buildDotNetCatalogLayerListViewModel(jsCatalogLayerListViewModel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CatalogLayerListViewModel', e);
    }
    
    return jsCatalogLayerListViewModel;
}
export async function buildDotNetCatalogLayerListViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCatalogLayerListViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.catalogItems)) {
            let { buildDotNetListItem } = await import('./listItem');
            dotNetCatalogLayerListViewModel.catalogItems = await Promise.all(jsObject.catalogItems.map(async i => await buildDotNetListItem(i)));
        }
        if (hasValue(jsObject.checkPublishStatusEnabled)) {
            dotNetCatalogLayerListViewModel.checkPublishStatusEnabled = jsObject.checkPublishStatusEnabled;
        }
        if (hasValue(jsObject.listItemCreatedFunction)) {
            dotNetCatalogLayerListViewModel.listItemCreatedFunction = jsObject.listItemCreatedFunction;
        }
        if (hasValue(jsObject.state)) {
            dotNetCatalogLayerListViewModel.state = jsObject.state;
        }
        if (hasValue(jsObject.view)) {
            dotNetCatalogLayerListViewModel.view = jsObject.view;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCatalogLayerListViewModel.id = k;
                break;
            }
        }
    }

    return dotNetCatalogLayerListViewModel;
}

