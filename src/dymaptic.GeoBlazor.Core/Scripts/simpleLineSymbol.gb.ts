// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import SimpleLineSymbol from '@arcgis/core/symbols/SimpleLineSymbol';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SimpleLineSymbolGenerated implements IPropertyWrapper {
    public component: SimpleLineSymbol;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: SimpleLineSymbol) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getColor(): Promise<any> {
        let { buildDotNetMapColor } = await import('./mapColor');
        return buildDotNetMapColor(this.component.color);
    }
    async setColor(value: any): Promise<void> {
        let { buildJsMapColor } = await import('./mapColor');
        this.component.color = await  buildJsMapColor(value, this.layerId, this.viewId);
    }
    async getMarker(): Promise<any> {
        let { buildDotNetLineSymbolMarker } = await import('./lineSymbolMarker');
        return await buildDotNetLineSymbolMarker(this.component.marker);
    }
    async setMarker(value: any): Promise<void> {
        let { buildJsLineSymbolMarker } = await import('./lineSymbolMarker');
        this.component.marker = await  buildJsLineSymbolMarker(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsSimpleLineSymbolGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSimpleLineSymbol = new SimpleLineSymbol();
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsSimpleLineSymbol.color = await buildJsMapColor(dotNetObject.color, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.marker)) {
        let { buildJsLineSymbolMarker } = await import('./lineSymbolMarker');
        jsSimpleLineSymbol.marker = await buildJsLineSymbolMarker(dotNetObject.marker, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.cap)) {
        jsSimpleLineSymbol.cap = dotNetObject.cap;
    }
    if (hasValue(dotNetObject.join)) {
        jsSimpleLineSymbol.join = dotNetObject.join;
    }
    if (hasValue(dotNetObject.miterLimit)) {
        jsSimpleLineSymbol.miterLimit = dotNetObject.miterLimit;
    }
    if (hasValue(dotNetObject.style)) {
        jsSimpleLineSymbol.style = dotNetObject.style;
    }
    if (hasValue(dotNetObject.width)) {
        jsSimpleLineSymbol.width = dotNetObject.width;
    }
    let { default: SimpleLineSymbolWrapper } = await import('./simpleLineSymbol');
    let simpleLineSymbolWrapper = new SimpleLineSymbolWrapper(jsSimpleLineSymbol);
    simpleLineSymbolWrapper.geoBlazorId = dotNetObject.id;
    simpleLineSymbolWrapper.viewId = viewId;
    simpleLineSymbolWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(simpleLineSymbolWrapper);
    jsObjectRefs[dotNetObject.id] = simpleLineSymbolWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsSimpleLineSymbol;
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SimpleLineSymbol', e);
    }
    
    return jsSimpleLineSymbol;
}

export async function buildDotNetSimpleLineSymbolGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSimpleLineSymbol: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.color)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetSimpleLineSymbol.color = buildDotNetMapColor(jsObject.color);
        }
        if (hasValue(jsObject.marker)) {
            let { buildDotNetLineSymbolMarker } = await import('./lineSymbolMarker');
            dotNetSimpleLineSymbol.marker = await buildDotNetLineSymbolMarker(jsObject.marker);
        }
        if (hasValue(jsObject.cap)) {
            dotNetSimpleLineSymbol.cap = jsObject.cap;
        }
        if (hasValue(jsObject.join)) {
            dotNetSimpleLineSymbol.join = jsObject.join;
        }
        if (hasValue(jsObject.miterLimit)) {
            dotNetSimpleLineSymbol.miterLimit = jsObject.miterLimit;
        }
        if (hasValue(jsObject.style)) {
            dotNetSimpleLineSymbol.style = jsObject.style;
        }
        if (hasValue(jsObject.type)) {
            dotNetSimpleLineSymbol.type = jsObject.type;
        }
        if (hasValue(jsObject.width)) {
            dotNetSimpleLineSymbol.width = jsObject.width;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSimpleLineSymbol.id = k;
                break;
            }
        }
    }

    return dotNetSimpleLineSymbol;
}

