// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetVersionManagementViewModelVersionInfoExtendedJSON } from './versionManagementViewModelVersionInfoExtendedJSON';

export async function buildJsVersionManagementViewModelVersionInfoExtendedJSONGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsVersionManagementViewModelVersionInfoExtendedJSON: any = {};
    if (hasValue(dotNetObject.versionIdentifier)) {
        let { buildJsVersionManagementViewModelVersionInfoExtendedJSONVersionIdentifier } = await import('./versionManagementViewModelVersionInfoExtendedJSONVersionIdentifier');
        jsVersionManagementViewModelVersionInfoExtendedJSON.versionIdentifier = await buildJsVersionManagementViewModelVersionInfoExtendedJSONVersionIdentifier(dotNetObject.versionIdentifier, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.access)) {
        jsVersionManagementViewModelVersionInfoExtendedJSON.access = dotNetObject.access;
    }
    if (hasValue(dotNetObject.commonAncestorDate)) {
        jsVersionManagementViewModelVersionInfoExtendedJSON.commonAncestorDate = dotNetObject.commonAncestorDate;
    }
    if (hasValue(dotNetObject.creationDate)) {
        jsVersionManagementViewModelVersionInfoExtendedJSON.creationDate = dotNetObject.creationDate;
    }
    if (hasValue(dotNetObject.description)) {
        jsVersionManagementViewModelVersionInfoExtendedJSON.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.evaluationDate)) {
        jsVersionManagementViewModelVersionInfoExtendedJSON.evaluationDate = dotNetObject.evaluationDate;
    }
    if (hasValue(dotNetObject.hasConflicts)) {
        jsVersionManagementViewModelVersionInfoExtendedJSON.hasConflicts = dotNetObject.hasConflicts;
    }
    if (hasValue(dotNetObject.hasUninspectedConflicts)) {
        jsVersionManagementViewModelVersionInfoExtendedJSON.hasUninspectedConflicts = dotNetObject.hasUninspectedConflicts;
    }
    if (hasValue(dotNetObject.isBeingEdited)) {
        jsVersionManagementViewModelVersionInfoExtendedJSON.isBeingEdited = dotNetObject.isBeingEdited;
    }
    if (hasValue(dotNetObject.isBeingRead)) {
        jsVersionManagementViewModelVersionInfoExtendedJSON.isBeingRead = dotNetObject.isBeingRead;
    }
    if (hasValue(dotNetObject.isLocked)) {
        jsVersionManagementViewModelVersionInfoExtendedJSON.isLocked = dotNetObject.isLocked;
    }
    if (hasValue(dotNetObject.lockDate)) {
        jsVersionManagementViewModelVersionInfoExtendedJSON.lockDate = dotNetObject.lockDate;
    }
    if (hasValue(dotNetObject.lockOwner)) {
        jsVersionManagementViewModelVersionInfoExtendedJSON.lockOwner = dotNetObject.lockOwner;
    }
    if (hasValue(dotNetObject.modifiedDate)) {
        jsVersionManagementViewModelVersionInfoExtendedJSON.modifiedDate = dotNetObject.modifiedDate;
    }
    if (hasValue(dotNetObject.previousAncestorDate)) {
        jsVersionManagementViewModelVersionInfoExtendedJSON.previousAncestorDate = dotNetObject.previousAncestorDate;
    }
    if (hasValue(dotNetObject.reconcileDate)) {
        jsVersionManagementViewModelVersionInfoExtendedJSON.reconcileDate = dotNetObject.reconcileDate;
    }
    if (hasValue(dotNetObject.versionId)) {
        jsVersionManagementViewModelVersionInfoExtendedJSON.versionId = dotNetObject.versionId;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsVersionManagementViewModelVersionInfoExtendedJSON);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsVersionManagementViewModelVersionInfoExtendedJSON;
    
    try {
        let { buildDotNetVersionManagementViewModelVersionInfoExtendedJSON } = await import('./versionManagementViewModelVersionInfoExtendedJSON');
        let dnInstantiatedObject = await buildDotNetVersionManagementViewModelVersionInfoExtendedJSON(jsVersionManagementViewModelVersionInfoExtendedJSON, layerId, viewId);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type VersionManagementViewModelVersionInfoExtendedJSON detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for VersionManagementViewModelVersionInfoExtendedJSON', e);
    }
    
    return jsVersionManagementViewModelVersionInfoExtendedJSON;
}


export async function buildDotNetVersionManagementViewModelVersionInfoExtendedJSONGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVersionManagementViewModelVersionInfoExtendedJSON: any = {};
    
    if (hasValue(jsObject.versionIdentifier)) {
        let { buildDotNetVersionManagementViewModelVersionInfoExtendedJSONVersionIdentifier } = await import('./versionManagementViewModelVersionInfoExtendedJSONVersionIdentifier');
        dotNetVersionManagementViewModelVersionInfoExtendedJSON.versionIdentifier = await buildDotNetVersionManagementViewModelVersionInfoExtendedJSONVersionIdentifier(jsObject.versionIdentifier, layerId, viewId);
    }
    
    if (hasValue(jsObject.access)) {
        dotNetVersionManagementViewModelVersionInfoExtendedJSON.access = jsObject.access;
    }
    
    if (hasValue(jsObject.commonAncestorDate)) {
        dotNetVersionManagementViewModelVersionInfoExtendedJSON.commonAncestorDate = jsObject.commonAncestorDate;
    }
    
    if (hasValue(jsObject.creationDate)) {
        dotNetVersionManagementViewModelVersionInfoExtendedJSON.creationDate = jsObject.creationDate;
    }
    
    if (hasValue(jsObject.description)) {
        dotNetVersionManagementViewModelVersionInfoExtendedJSON.description = jsObject.description;
    }
    
    if (hasValue(jsObject.evaluationDate)) {
        dotNetVersionManagementViewModelVersionInfoExtendedJSON.evaluationDate = jsObject.evaluationDate;
    }
    
    if (hasValue(jsObject.hasConflicts)) {
        dotNetVersionManagementViewModelVersionInfoExtendedJSON.hasConflicts = jsObject.hasConflicts;
    }
    
    if (hasValue(jsObject.hasUninspectedConflicts)) {
        dotNetVersionManagementViewModelVersionInfoExtendedJSON.hasUninspectedConflicts = jsObject.hasUninspectedConflicts;
    }
    
    if (hasValue(jsObject.isBeingEdited)) {
        dotNetVersionManagementViewModelVersionInfoExtendedJSON.isBeingEdited = jsObject.isBeingEdited;
    }
    
    if (hasValue(jsObject.isBeingRead)) {
        dotNetVersionManagementViewModelVersionInfoExtendedJSON.isBeingRead = jsObject.isBeingRead;
    }
    
    if (hasValue(jsObject.isLocked)) {
        dotNetVersionManagementViewModelVersionInfoExtendedJSON.isLocked = jsObject.isLocked;
    }
    
    if (hasValue(jsObject.lockDate)) {
        dotNetVersionManagementViewModelVersionInfoExtendedJSON.lockDate = jsObject.lockDate;
    }
    
    if (hasValue(jsObject.lockOwner)) {
        dotNetVersionManagementViewModelVersionInfoExtendedJSON.lockOwner = jsObject.lockOwner;
    }
    
    if (hasValue(jsObject.modifiedDate)) {
        dotNetVersionManagementViewModelVersionInfoExtendedJSON.modifiedDate = jsObject.modifiedDate;
    }
    
    if (hasValue(jsObject.previousAncestorDate)) {
        dotNetVersionManagementViewModelVersionInfoExtendedJSON.previousAncestorDate = jsObject.previousAncestorDate;
    }
    
    if (hasValue(jsObject.reconcileDate)) {
        dotNetVersionManagementViewModelVersionInfoExtendedJSON.reconcileDate = jsObject.reconcileDate;
    }
    
    if (hasValue(jsObject.versionId)) {
        dotNetVersionManagementViewModelVersionInfoExtendedJSON.versionId = jsObject.versionId;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetVersionManagementViewModelVersionInfoExtendedJSON.id = geoBlazorId;
    }

    return dotNetVersionManagementViewModelVersionInfoExtendedJSON;
}

