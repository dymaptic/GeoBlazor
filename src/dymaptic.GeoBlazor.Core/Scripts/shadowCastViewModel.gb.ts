// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ShadowCastViewModel from '@arcgis/core/widgets/ShadowCast/ShadowCastViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ShadowCastViewModelGenerated implements IPropertyWrapper {
    public component: ShadowCastViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ShadowCastViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async getDuration(point: any): Promise<any> {
        return this.component.getDuration(point);
    }

    async start(): Promise<void> {
        this.component.start();
    }

    async stop(): Promise<void> {
        this.component.stop();
    }

    // region properties
    
    async getDiscreteOptions(): Promise<any> {
        if (!hasValue(this.component.discreteOptions)) {
            return null;
        }
        
        let { buildDotNetShadowCastViewModelDiscreteOptions } = await import('./shadowCastViewModelDiscreteOptions');
        return await buildDotNetShadowCastViewModelDiscreteOptions(this.component.discreteOptions);
    }
    async setDiscreteOptions(value: any): Promise<void> {
        let { buildJsShadowCastViewModelDiscreteOptions } = await import('./shadowCastViewModelDiscreteOptions');
        this.component.discreteOptions = await  buildJsShadowCastViewModelDiscreteOptions(value, this.layerId, this.viewId);
    }
    async getDurationOptions(): Promise<any> {
        if (!hasValue(this.component.durationOptions)) {
            return null;
        }
        
        let { buildDotNetShadowCastViewModelDurationOptions } = await import('./shadowCastViewModelDurationOptions');
        return await buildDotNetShadowCastViewModelDurationOptions(this.component.durationOptions);
    }
    async setDurationOptions(value: any): Promise<void> {
        let { buildJsShadowCastViewModelDurationOptions } = await import('./shadowCastViewModelDurationOptions');
        this.component.durationOptions = await  buildJsShadowCastViewModelDurationOptions(value, this.layerId, this.viewId);
    }
    async getThresholdOptions(): Promise<any> {
        if (!hasValue(this.component.thresholdOptions)) {
            return null;
        }
        
        let { buildDotNetShadowCastViewModelThresholdOptions } = await import('./shadowCastViewModelThresholdOptions');
        return await buildDotNetShadowCastViewModelThresholdOptions(this.component.thresholdOptions);
    }
    async setThresholdOptions(value: any): Promise<void> {
        let { buildJsShadowCastViewModelThresholdOptions } = await import('./shadowCastViewModelThresholdOptions');
        this.component.thresholdOptions = await  buildJsShadowCastViewModelThresholdOptions(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsShadowCastViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsShadowCastViewModel = new ShadowCastViewModel();
    if (hasValue(dotNetObject.discreteOptions)) {
        let { buildJsShadowCastViewModelDiscreteOptions } = await import('./shadowCastViewModelDiscreteOptions');
        jsShadowCastViewModel.discreteOptions = await buildJsShadowCastViewModelDiscreteOptions(dotNetObject.discreteOptions, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.durationOptions)) {
        let { buildJsShadowCastViewModelDurationOptions } = await import('./shadowCastViewModelDurationOptions');
        jsShadowCastViewModel.durationOptions = await buildJsShadowCastViewModelDurationOptions(dotNetObject.durationOptions, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.thresholdOptions)) {
        let { buildJsShadowCastViewModelThresholdOptions } = await import('./shadowCastViewModelThresholdOptions');
        jsShadowCastViewModel.thresholdOptions = await buildJsShadowCastViewModelThresholdOptions(dotNetObject.thresholdOptions, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.date)) {
        jsShadowCastViewModel.date = dotNetObject.date;
    }
    if (hasValue(dotNetObject.endTimeOfDay)) {
        jsShadowCastViewModel.endTimeOfDay = dotNetObject.endTimeOfDay;
    }
    if (hasValue(dotNetObject.startTimeOfDay)) {
        jsShadowCastViewModel.startTimeOfDay = dotNetObject.startTimeOfDay;
    }
    if (hasValue(dotNetObject.utcOffset)) {
        jsShadowCastViewModel.utcOffset = dotNetObject.utcOffset;
    }
    if (hasValue(dotNetObject.visualizationType)) {
        jsShadowCastViewModel.visualizationType = dotNetObject.visualizationType;
    }

    let { default: ShadowCastViewModelWrapper } = await import('./shadowCastViewModel');
    let shadowCastViewModelWrapper = new ShadowCastViewModelWrapper(jsShadowCastViewModel);
    shadowCastViewModelWrapper.geoBlazorId = dotNetObject.id;
    shadowCastViewModelWrapper.viewId = viewId;
    shadowCastViewModelWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(shadowCastViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = shadowCastViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsShadowCastViewModel;
    let { buildDotNetShadowCastViewModel } = await import('./shadowCastViewModel');
    let dnInstantiatedObject = await buildDotNetShadowCastViewModel(jsShadowCastViewModel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ShadowCastViewModel', e);
    }
    
    return jsShadowCastViewModel;
}

export async function buildDotNetShadowCastViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetShadowCastViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.discreteOptions)) {
            let { buildDotNetShadowCastViewModelDiscreteOptions } = await import('./shadowCastViewModelDiscreteOptions');
            dotNetShadowCastViewModel.discreteOptions = await buildDotNetShadowCastViewModelDiscreteOptions(jsObject.discreteOptions);
        }
        if (hasValue(jsObject.durationOptions)) {
            let { buildDotNetShadowCastViewModelDurationOptions } = await import('./shadowCastViewModelDurationOptions');
            dotNetShadowCastViewModel.durationOptions = await buildDotNetShadowCastViewModelDurationOptions(jsObject.durationOptions);
        }
        if (hasValue(jsObject.thresholdOptions)) {
            let { buildDotNetShadowCastViewModelThresholdOptions } = await import('./shadowCastViewModelThresholdOptions');
            dotNetShadowCastViewModel.thresholdOptions = await buildDotNetShadowCastViewModelThresholdOptions(jsObject.thresholdOptions);
        }
    if (hasValue(jsObject.date)) {
        dotNetShadowCastViewModel.date = jsObject.date;
    }
    if (hasValue(jsObject.endTimeOfDay)) {
        dotNetShadowCastViewModel.endTimeOfDay = jsObject.endTimeOfDay;
    }
    if (hasValue(jsObject.startTimeOfDay)) {
        dotNetShadowCastViewModel.startTimeOfDay = jsObject.startTimeOfDay;
    }
    if (hasValue(jsObject.state)) {
        dotNetShadowCastViewModel.state = jsObject.state;
    }
    if (hasValue(jsObject.utcOffset)) {
        dotNetShadowCastViewModel.utcOffset = jsObject.utcOffset;
    }
    if (hasValue(jsObject.visualizationType)) {
        dotNetShadowCastViewModel.visualizationType = jsObject.visualizationType;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetShadowCastViewModel.id = k;
                break;
            }
        }
    }

    return dotNetShadowCastViewModel;
}

