// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, sanitize, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetMarkerSymbolProperties } from './markerSymbolProperties';
export async function buildJsMarkerSymbolPropertiesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }
    
    switch (dotNetObject.type) {
        case 'any':
            if (!hasValue(dotNetObject)) {
                return null;
            }

            let jsMarkerSymbolProperties: any = {};

            if (hasValue(dotNetObject.angle)) {
                jsMarkerSymbolProperties.angle = dotNetObject.angle;
            }
            if (hasValue(dotNetObject.color)) {
                jsMarkerSymbolProperties.color = dotNetObject.color;
            }
            if (hasValue(dotNetObject.xoffset)) {
                jsMarkerSymbolProperties.xoffset = dotNetObject.xoffset;
            }
            if (hasValue(dotNetObject.yoffset)) {
                jsMarkerSymbolProperties.yoffset = dotNetObject.yoffset;
            }
    
            let jsObjectRef = DotNet.createJSObjectReference(jsMarkerSymbolProperties);
            jsObjectRefs[dotNetObject.id] = jsObjectRef;
            arcGisObjectRefs[dotNetObject.id] = jsMarkerSymbolProperties;
    
            return jsMarkerSymbolProperties;

        default: 
            return sanitize(dotNetObject);
    }
}     

export async function buildDotNetMarkerSymbolPropertiesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    switch (jsObject.type) {
        case 'any': 
        let dotNetMarkerSymbolProperties: any = {};
            if (hasValue(jsObject.angle)) {
                dotNetMarkerSymbolProperties.angle = removeCircularReferences(jsObject.angle);
            }
    
            if (hasValue(jsObject.color)) {
                dotNetMarkerSymbolProperties.color = removeCircularReferences(jsObject.color);
            }
    
            if (hasValue(jsObject.type)) {
                dotNetMarkerSymbolProperties.type = removeCircularReferences(jsObject.type);
            }
    
            if (hasValue(jsObject.xoffset)) {
                dotNetMarkerSymbolProperties.xoffset = removeCircularReferences(jsObject.xoffset);
            }
    
            if (hasValue(jsObject.yoffset)) {
                dotNetMarkerSymbolProperties.yoffset = removeCircularReferences(jsObject.yoffset);
            }
    

            return dotNetMarkerSymbolProperties;

        default: 
            return jsObject;
    }
}     

