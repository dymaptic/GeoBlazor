// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetPopupOpenOptions } from './popupOpenOptions';

export async function buildJsPopupOpenOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPopupOpenOptions: any = {};
    if (hasValue(dotNetObject.features)) {
        let { buildJsGraphic } = await import('./graphic');
        jsPopupOpenOptions.features = dotNetObject.features.map(i => buildJsGraphic(i)) as any;
    }
    if (hasValue(dotNetObject.location)) {
        let { buildJsPoint } = await import('./point');
        jsPopupOpenOptions.location = buildJsPoint(dotNetObject.location) as any;
    }

    if (hasValue(dotNetObject.collapsed)) {
        jsPopupOpenOptions.collapsed = dotNetObject.collapsed;
    }
    if (hasValue(dotNetObject.content)) {
        jsPopupOpenOptions.content = dotNetObject.content;
    }
    if (hasValue(dotNetObject.featureMenuOpen)) {
        jsPopupOpenOptions.featureMenuOpen = dotNetObject.featureMenuOpen;
    }
    if (hasValue(dotNetObject.fetchFeatures)) {
        jsPopupOpenOptions.fetchFeatures = dotNetObject.fetchFeatures;
    }
    if (hasValue(dotNetObject.promises)) {
        jsPopupOpenOptions.promises = dotNetObject.promises;
    }
    if (hasValue(dotNetObject.shouldFocus)) {
        jsPopupOpenOptions.shouldFocus = dotNetObject.shouldFocus;
    }
    if (hasValue(dotNetObject.title)) {
        jsPopupOpenOptions.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.updateLocationEnabled)) {
        jsPopupOpenOptions.updateLocationEnabled = dotNetObject.updateLocationEnabled;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsPopupOpenOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPopupOpenOptions;
    
    return jsPopupOpenOptions;
}


export async function buildDotNetPopupOpenOptionsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPopupOpenOptions: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.features)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetPopupOpenOptions.features = jsObject.features.map(i => buildDotNetGraphic(i, layerId, viewId));
    }
    if (hasValue(jsObject.location)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetPopupOpenOptions.location = buildDotNetPoint(jsObject.location);
    }
    if (hasValue(jsObject.collapsed)) {
        dotNetPopupOpenOptions.collapsed = jsObject.collapsed;
    }
    if (hasValue(jsObject.content)) {
        dotNetPopupOpenOptions.content = jsObject.content;
    }
    if (hasValue(jsObject.featureMenuOpen)) {
        dotNetPopupOpenOptions.featureMenuOpen = jsObject.featureMenuOpen;
    }
    if (hasValue(jsObject.fetchFeatures)) {
        dotNetPopupOpenOptions.fetchFeatures = jsObject.fetchFeatures;
    }
    if (hasValue(jsObject.promises)) {
        dotNetPopupOpenOptions.promises = jsObject.promises;
    }
    if (hasValue(jsObject.shouldFocus)) {
        dotNetPopupOpenOptions.shouldFocus = jsObject.shouldFocus;
    }
    if (hasValue(jsObject.title)) {
        dotNetPopupOpenOptions.title = jsObject.title;
    }
    if (hasValue(jsObject.updateLocationEnabled)) {
        dotNetPopupOpenOptions.updateLocationEnabled = jsObject.updateLocationEnabled;
    }

    return dotNetPopupOpenOptions;
}

