// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import CapabilitiesOperations = __esri.CapabilitiesOperations;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CapabilitiesOperationsGenerated implements IPropertyWrapper {
    public component: CapabilitiesOperations;
    public readonly geoBlazorId: string = '';

    constructor(component: CapabilitiesOperations) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}
export async function buildJsCapabilitiesOperationsGenerated(dotNetObject: any): Promise<any> {
    let jsCapabilitiesOperations = {
        supportsAdd: dotNetObject.supportsAdd,
        supportsCalculate: dotNetObject.supportsCalculate,
        supportsDelete: dotNetObject.supportsDelete,
        supportsEditing: dotNetObject.supportsEditing,
        supportsQuery: dotNetObject.supportsQuery,
        supportsQueryAttachments: dotNetObject.supportsQueryAttachments,
        supportsQueryTopFeatures: dotNetObject.supportsQueryTopFeatures,
        supportsResizeAttachments: dotNetObject.supportsResizeAttachments,
        supportsUpdate: dotNetObject.supportsUpdate,
        supportsValidateSql: dotNetObject.supportsValidateSql,
    }
    let { default: CapabilitiesOperationsWrapper } = await import('./capabilitiesOperations');
    let capabilitiesOperationsWrapper = new CapabilitiesOperationsWrapper(jsCapabilitiesOperations);
    jsCapabilitiesOperations.id = dotNetObject.id;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(capabilitiesOperationsWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = capabilitiesOperationsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsCapabilitiesOperations;
    
    return jsCapabilitiesOperations;
}

export async function buildDotNetCapabilitiesOperationsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCapabilitiesOperations: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetCapabilitiesOperations.supportsAdd = jsObject.supportsAdd;
        dotNetCapabilitiesOperations.supportsCalculate = jsObject.supportsCalculate;
        dotNetCapabilitiesOperations.supportsDelete = jsObject.supportsDelete;
        dotNetCapabilitiesOperations.supportsEditing = jsObject.supportsEditing;
        dotNetCapabilitiesOperations.supportsQuery = jsObject.supportsQuery;
        dotNetCapabilitiesOperations.supportsQueryAttachments = jsObject.supportsQueryAttachments;
        dotNetCapabilitiesOperations.supportsQueryTopFeatures = jsObject.supportsQueryTopFeatures;
        dotNetCapabilitiesOperations.supportsResizeAttachments = jsObject.supportsResizeAttachments;
        dotNetCapabilitiesOperations.supportsUpdate = jsObject.supportsUpdate;
        dotNetCapabilitiesOperations.supportsValidateSql = jsObject.supportsValidateSql;
    return dotNetCapabilitiesOperations;
}

