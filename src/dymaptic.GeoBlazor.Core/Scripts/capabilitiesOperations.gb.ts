// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCapabilitiesOperations } from './capabilitiesOperations';

export async function buildJsCapabilitiesOperationsGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsCapabilitiesOperations: any = {};

    if (hasValue(dotNetObject.supportsAdd)) {
        jsCapabilitiesOperations.supportsAdd = dotNetObject.supportsAdd;
    }
    if (hasValue(dotNetObject.supportsCalculate)) {
        jsCapabilitiesOperations.supportsCalculate = dotNetObject.supportsCalculate;
    }
    if (hasValue(dotNetObject.supportsDelete)) {
        jsCapabilitiesOperations.supportsDelete = dotNetObject.supportsDelete;
    }
    if (hasValue(dotNetObject.supportsEditing)) {
        jsCapabilitiesOperations.supportsEditing = dotNetObject.supportsEditing;
    }
    if (hasValue(dotNetObject.supportsQuery)) {
        jsCapabilitiesOperations.supportsQuery = dotNetObject.supportsQuery;
    }
    if (hasValue(dotNetObject.supportsQueryAttachments)) {
        jsCapabilitiesOperations.supportsQueryAttachments = dotNetObject.supportsQueryAttachments;
    }
    if (hasValue(dotNetObject.supportsQueryTopFeatures)) {
        jsCapabilitiesOperations.supportsQueryTopFeatures = dotNetObject.supportsQueryTopFeatures;
    }
    if (hasValue(dotNetObject.supportsResizeAttachments)) {
        jsCapabilitiesOperations.supportsResizeAttachments = dotNetObject.supportsResizeAttachments;
    }
    if (hasValue(dotNetObject.supportsUpdate)) {
        jsCapabilitiesOperations.supportsUpdate = dotNetObject.supportsUpdate;
    }
    if (hasValue(dotNetObject.supportsValidateSql)) {
        jsCapabilitiesOperations.supportsValidateSql = dotNetObject.supportsValidateSql;
    }
    
    jsObjectRefs[dotNetObject.id] = jsCapabilitiesOperations;
    arcGisObjectRefs[dotNetObject.id] = jsCapabilitiesOperations;
    
    return jsCapabilitiesOperations;
}


export async function buildDotNetCapabilitiesOperationsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCapabilitiesOperations: any = {};
    
    if (hasValue(jsObject.supportsAdd)) {
        dotNetCapabilitiesOperations.supportsAdd = jsObject.supportsAdd;
    }
    
    if (hasValue(jsObject.supportsCalculate)) {
        dotNetCapabilitiesOperations.supportsCalculate = jsObject.supportsCalculate;
    }
    
    if (hasValue(jsObject.supportsDelete)) {
        dotNetCapabilitiesOperations.supportsDelete = jsObject.supportsDelete;
    }
    
    if (hasValue(jsObject.supportsEditing)) {
        dotNetCapabilitiesOperations.supportsEditing = jsObject.supportsEditing;
    }
    
    if (hasValue(jsObject.supportsQuery)) {
        dotNetCapabilitiesOperations.supportsQuery = jsObject.supportsQuery;
    }
    
    if (hasValue(jsObject.supportsQueryAttachments)) {
        dotNetCapabilitiesOperations.supportsQueryAttachments = jsObject.supportsQueryAttachments;
    }
    
    if (hasValue(jsObject.supportsQueryTopFeatures)) {
        dotNetCapabilitiesOperations.supportsQueryTopFeatures = jsObject.supportsQueryTopFeatures;
    }
    
    if (hasValue(jsObject.supportsUpdate)) {
        dotNetCapabilitiesOperations.supportsUpdate = jsObject.supportsUpdate;
    }
    
    if (hasValue(jsObject.supportsValidateSql)) {
        dotNetCapabilitiesOperations.supportsValidateSql = jsObject.supportsValidateSql;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCapabilitiesOperations.id = geoBlazorId;
    }

    return dotNetCapabilitiesOperations;
}

