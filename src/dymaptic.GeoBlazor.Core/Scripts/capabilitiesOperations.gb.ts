// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCapabilitiesOperations } from './capabilitiesOperations';

export async function buildJsCapabilitiesOperationsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCapabilitiesOperations: any = {};

    if (hasValue(dotNetObject.supportsAdd)) {
        jsCapabilitiesOperations.supportsAdd = dotNetObject.supportsAdd;
    }
    if (hasValue(dotNetObject.supportsCalculate)) {
        jsCapabilitiesOperations.supportsCalculate = dotNetObject.supportsCalculate;
    }
    if (hasValue(dotNetObject.supportsDelete)) {
        jsCapabilitiesOperations.supportsDelete = dotNetObject.supportsDelete;
    }
    if (hasValue(dotNetObject.supportsEditing)) {
        jsCapabilitiesOperations.supportsEditing = dotNetObject.supportsEditing;
    }
    if (hasValue(dotNetObject.supportsQuery)) {
        jsCapabilitiesOperations.supportsQuery = dotNetObject.supportsQuery;
    }
    if (hasValue(dotNetObject.supportsQueryAttachments)) {
        jsCapabilitiesOperations.supportsQueryAttachments = dotNetObject.supportsQueryAttachments;
    }
    if (hasValue(dotNetObject.supportsQueryTopFeatures)) {
        jsCapabilitiesOperations.supportsQueryTopFeatures = dotNetObject.supportsQueryTopFeatures;
    }
    if (hasValue(dotNetObject.supportsResizeAttachments)) {
        jsCapabilitiesOperations.supportsResizeAttachments = dotNetObject.supportsResizeAttachments;
    }
    if (hasValue(dotNetObject.supportsUpdate)) {
        jsCapabilitiesOperations.supportsUpdate = dotNetObject.supportsUpdate;
    }
    if (hasValue(dotNetObject.supportsValidateSql)) {
        jsCapabilitiesOperations.supportsValidateSql = dotNetObject.supportsValidateSql;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCapabilitiesOperations);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCapabilitiesOperations;
    
    let { buildDotNetCapabilitiesOperations } = await import('./capabilitiesOperations');
    let dnInstantiatedObject = await buildDotNetCapabilitiesOperations(jsCapabilitiesOperations, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type CapabilitiesOperations detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CapabilitiesOperations', e);
    }
    
    return jsCapabilitiesOperations;
}


export async function buildDotNetCapabilitiesOperationsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsCapabilitiesOperations } = await import('./capabilitiesOperations');
        jsComponentRef = await buildJsCapabilitiesOperations(jsObject, layerId, viewId);
    }
    
    let dotNetCapabilitiesOperations: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.supportsAdd)) {
        dotNetCapabilitiesOperations.supportsAdd = jsObject.supportsAdd;
    }
    if (hasValue(jsObject.supportsCalculate)) {
        dotNetCapabilitiesOperations.supportsCalculate = jsObject.supportsCalculate;
    }
    if (hasValue(jsObject.supportsDelete)) {
        dotNetCapabilitiesOperations.supportsDelete = jsObject.supportsDelete;
    }
    if (hasValue(jsObject.supportsEditing)) {
        dotNetCapabilitiesOperations.supportsEditing = jsObject.supportsEditing;
    }
    if (hasValue(jsObject.supportsQuery)) {
        dotNetCapabilitiesOperations.supportsQuery = jsObject.supportsQuery;
    }
    if (hasValue(jsObject.supportsQueryAttachments)) {
        dotNetCapabilitiesOperations.supportsQueryAttachments = jsObject.supportsQueryAttachments;
    }
    if (hasValue(jsObject.supportsQueryTopFeatures)) {
        dotNetCapabilitiesOperations.supportsQueryTopFeatures = jsObject.supportsQueryTopFeatures;
    }
    if (hasValue(jsObject.supportsUpdate)) {
        dotNetCapabilitiesOperations.supportsUpdate = jsObject.supportsUpdate;
    }
    if (hasValue(jsObject.supportsValidateSql)) {
        dotNetCapabilitiesOperations.supportsValidateSql = jsObject.supportsValidateSql;
    }


    if (hasValue(geoBlazorId)) {
        dotNetCapabilitiesOperations.id = geoBlazorId;
    }

    return dotNetCapabilitiesOperations;
}

