// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import WebScene from '@arcgis/core/WebScene';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetWebScene } from './webScene';

export async function buildJsWebSceneGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsWebScene = new WebScene();
    if (hasValue(dotNetObject.clippingArea)) {
        let { buildJsExtent } = await import('./extent');
        jsWebScene.clippingArea = buildJsExtent(dotNetObject.clippingArea) as any;
    }
    if (hasValue(dotNetObject.portalItem)) {
        let { buildJsPortalItem } = await import('./portalItem');
        jsWebScene.portalItem = await buildJsPortalItem(dotNetObject.portalItem, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.presentation)) {
        let { buildJsPresentation } = await import('./presentation');
        jsWebScene.presentation = await buildJsPresentation(dotNetObject.presentation, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.applicationProperties)) {
        jsWebScene.applicationProperties = dotNetObject.applicationProperties;
    }
    if (hasValue(dotNetObject.authoringApp)) {
        jsWebScene.authoringApp = dotNetObject.authoringApp;
    }
    if (hasValue(dotNetObject.authoringAppVersion)) {
        jsWebScene.authoringAppVersion = dotNetObject.authoringAppVersion;
    }
    if (hasValue(dotNetObject.clippingEnabled)) {
        jsWebScene.clippingEnabled = dotNetObject.clippingEnabled;
    }
    if (hasValue(dotNetObject.floorInfo)) {
        jsWebScene.floorInfo = dotNetObject.floorInfo;
    }
    if (hasValue(dotNetObject.heightModelInfo)) {
        jsWebScene.heightModelInfo = dotNetObject.heightModelInfo;
    }
    if (hasValue(dotNetObject.initialViewProperties)) {
        jsWebScene.initialViewProperties = dotNetObject.initialViewProperties;
    }
    if (hasValue(dotNetObject.thumbnailUrl)) {
        jsWebScene.thumbnailUrl = dotNetObject.thumbnailUrl;
    }
    if (hasValue(dotNetObject.widgets)) {
        jsWebScene.widgets = dotNetObject.widgets;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsWebScene);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsWebScene;
    
    let dnInstantiatedObject = await buildDotNetWebScene(jsWebScene);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for WebScene', e);
    }
    
    return jsWebScene;
}

export async function buildDotNetWebSceneGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWebScene: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.clippingArea)) {
            let { buildDotNetExtent } = await import('./extent');
            dotNetWebScene.clippingArea = buildDotNetExtent(jsObject.clippingArea);
        }
        if (hasValue(jsObject.portalItem)) {
            let { buildDotNetPortalItem } = await import('./portalItem');
            dotNetWebScene.portalItem = await buildDotNetPortalItem(jsObject.portalItem);
        }
        if (hasValue(jsObject.presentation)) {
            let { buildDotNetPresentation } = await import('./presentation');
            dotNetWebScene.presentation = await buildDotNetPresentation(jsObject.presentation);
        }
    if (hasValue(jsObject.applicationProperties)) {
        dotNetWebScene.applicationProperties = jsObject.applicationProperties;
    }
    if (hasValue(jsObject.authoringApp)) {
        dotNetWebScene.authoringApp = jsObject.authoringApp;
    }
    if (hasValue(jsObject.authoringAppVersion)) {
        dotNetWebScene.authoringAppVersion = jsObject.authoringAppVersion;
    }
    if (hasValue(jsObject.clippingEnabled)) {
        dotNetWebScene.clippingEnabled = jsObject.clippingEnabled;
    }
    if (hasValue(jsObject.floorInfo)) {
        dotNetWebScene.floorInfo = jsObject.floorInfo;
    }
    if (hasValue(jsObject.heightModelInfo)) {
        dotNetWebScene.heightModelInfo = jsObject.heightModelInfo;
    }
    if (hasValue(jsObject.initialViewProperties)) {
        dotNetWebScene.initialViewProperties = jsObject.initialViewProperties;
    }
    if (hasValue(jsObject.loaded)) {
        dotNetWebScene.loaded = jsObject.loaded;
    }
    if (hasValue(jsObject.loadError)) {
        dotNetWebScene.loadError = jsObject.loadError;
    }
    if (hasValue(jsObject.loadStatus)) {
        dotNetWebScene.loadStatus = jsObject.loadStatus;
    }
    if (hasValue(jsObject.sourceVersion)) {
        dotNetWebScene.sourceVersion = jsObject.sourceVersion;
    }
    if (hasValue(jsObject.thumbnailUrl)) {
        dotNetWebScene.thumbnailUrl = jsObject.thumbnailUrl;
    }
    if (hasValue(jsObject.widgets)) {
        dotNetWebScene.widgets = jsObject.widgets;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetWebScene.id = k;
                break;
            }
        }
    }

    return dotNetWebScene;
}

