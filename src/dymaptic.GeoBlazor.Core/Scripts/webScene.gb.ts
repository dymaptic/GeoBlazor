// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import WebScene from '@arcgis/core/WebScene';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, sanitize, removeCircularReferences, generateSerializableJson } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class WebSceneGenerated implements IPropertyWrapper {
    public component: WebScene;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: WebScene) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.clippingArea)) {
            let { buildJsExtent } = await import('./extent');
            this.component.clippingArea = buildJsExtent(dotNetObject.clippingArea) as any;
        }
        if (hasValue(dotNetObject.floorInfo)) {
            let { buildJsMapFloorInfo } = await import('./mapFloorInfo');
            this.component.floorInfo = await buildJsMapFloorInfo(dotNetObject.floorInfo, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.portalItem)) {
            let { buildJsPortalItem } = await import('./portalItem');
            this.component.portalItem = await buildJsPortalItem(dotNetObject.portalItem, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.widgets)) {
            let { buildJsWebSceneWidgets } = await import('./webSceneWidgets');
            this.component.widgets = await buildJsWebSceneWidgets(dotNetObject.widgets, this.layerId, this.viewId) as any;
        }

        if (hasValue(dotNetObject.applicationProperties)) {
            this.component.applicationProperties = dotNetObject.applicationProperties;
        }
        if (hasValue(dotNetObject.authoringApp)) {
            this.component.authoringApp = dotNetObject.authoringApp;
        }
        if (hasValue(dotNetObject.authoringAppVersion)) {
            this.component.authoringAppVersion = dotNetObject.authoringAppVersion;
        }
        if (hasValue(dotNetObject.clippingEnabled)) {
            this.component.clippingEnabled = dotNetObject.clippingEnabled;
        }
        if (hasValue(dotNetObject.heightModelInfo)) {
            this.component.heightModelInfo = sanitize(dotNetObject.heightModelInfo);
        }
        if (hasValue(dotNetObject.initialViewProperties)) {
            this.component.initialViewProperties = dotNetObject.initialViewProperties;
        }
        if (hasValue(dotNetObject.presentation)) {
            this.component.presentation = sanitize(dotNetObject.presentation);
        }
        if (hasValue(dotNetObject.thumbnailUrl)) {
            this.component.thumbnailUrl = dotNetObject.thumbnailUrl;
        }
    }
    
    async isFulfilled(): Promise<any> {
        return this.component.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.component.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.component.isResolved();
    }

    async load(): Promise<any> {
        let result = await this.component.load();
        
        return generateSerializableJson(result);
    }

    async loadAll(): Promise<any> {
        let result = await this.component.loadAll();
        let { buildDotNetWebScene } = await import('./webScene');
        return await buildDotNetWebScene(result, this.viewId);
    }

    async save(options: any): Promise<any> {
        let result = await this.component.save(options);
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(result, this.viewId);
    }

    async saveAs(portalItem: any,
        options: any): Promise<any> {
        let { buildJsPortalItem } = await import('./portalItem');
        let jsPortalItem = await buildJsPortalItem(portalItem, this.layerId, this.viewId) as any;
        let { buildJsWebSceneSaveAsOptions } = await import('./webSceneSaveAsOptions');
        let jsOptions = await buildJsWebSceneSaveAsOptions(options, this.layerId, this.viewId) as any;
        let result = await this.component.saveAs(jsPortalItem,
            jsOptions);
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(result, this.viewId);
    }

    async updateFrom(view: any,
        options: any): Promise<void> {
        await this.component.updateFrom(view,
            options);
    }

    async updateThumbnail(view: any,
        options: any): Promise<void> {
        await this.component.updateThumbnail(view,
            options);
    }

    async when(callback: any,
        errback: any): Promise<any> {
        let result = await this.component.when(callback,
            errback);
        
        return generateSerializableJson(result);
    }

    // region properties
    
    getAuthoringApp(): any {
        if (!hasValue(this.component.authoringApp)) {
            return null;
        }
        
        return generateSerializableJson(this.component.authoringApp);
    }
    
    setAuthoringApp(value: any): void {
        this.component.authoringApp = JSON.parse(value);
    }
    
    getAuthoringAppVersion(): any {
        if (!hasValue(this.component.authoringAppVersion)) {
            return null;
        }
        
        return generateSerializableJson(this.component.authoringAppVersion);
    }
    
    setAuthoringAppVersion(value: any): void {
        this.component.authoringAppVersion = JSON.parse(value);
    }
    
    async getClippingArea(): Promise<any> {
        if (!hasValue(this.component.clippingArea)) {
            return null;
        }
        
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(this.component.clippingArea);
    }
    
    async setClippingArea(value: any): Promise<void> {
        let { buildJsExtent } = await import('./extent');
        this.component.clippingArea =  buildJsExtent(value);
    }
    
    async getFloorInfo(): Promise<any> {
        if (!hasValue(this.component.floorInfo)) {
            return null;
        }
        
        let { buildDotNetMapFloorInfo } = await import('./mapFloorInfo');
        return await buildDotNetMapFloorInfo(this.component.floorInfo, this.viewId);
    }
    
    async setFloorInfo(value: any): Promise<void> {
        let { buildJsMapFloorInfo } = await import('./mapFloorInfo');
        this.component.floorInfo = await  buildJsMapFloorInfo(value, this.layerId, this.viewId);
    }
    
    async getPortalItem(): Promise<any> {
        if (!hasValue(this.component.portalItem)) {
            return null;
        }
        
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(this.component.portalItem, this.viewId);
    }
    
    async setPortalItem(value: any): Promise<void> {
        let { buildJsPortalItem } = await import('./portalItem');
        this.component.portalItem = await  buildJsPortalItem(value, this.layerId, this.viewId);
    }
    
    getThumbnailUrl(): any {
        if (!hasValue(this.component.thumbnailUrl)) {
            return null;
        }
        
        return generateSerializableJson(this.component.thumbnailUrl);
    }
    
    setThumbnailUrl(value: any): void {
        this.component.thumbnailUrl = JSON.parse(value);
    }
    
    async getWidgets(): Promise<any> {
        if (!hasValue(this.component.widgets)) {
            return null;
        }
        
        let { buildDotNetWebSceneWidgets } = await import('./webSceneWidgets');
        return await buildDotNetWebSceneWidgets(this.component.widgets);
    }
    
    async setWidgets(value: any): Promise<void> {
        let { buildJsWebSceneWidgets } = await import('./webSceneWidgets');
        this.component.widgets = await  buildJsWebSceneWidgets(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsWebSceneGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.clippingArea)) {
        let { buildJsExtent } = await import('./extent');
        properties.clippingArea = buildJsExtent(dotNetObject.clippingArea) as any;
    }
    if (hasValue(dotNetObject.floorInfo)) {
        let { buildJsMapFloorInfo } = await import('./mapFloorInfo');
        properties.floorInfo = await buildJsMapFloorInfo(dotNetObject.floorInfo, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.portalItem)) {
        let { buildJsPortalItem } = await import('./portalItem');
        properties.portalItem = await buildJsPortalItem(dotNetObject.portalItem, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.widgets)) {
        let { buildJsWebSceneWidgets } = await import('./webSceneWidgets');
        properties.widgets = await buildJsWebSceneWidgets(dotNetObject.widgets, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.applicationProperties)) {
        properties.applicationProperties = dotNetObject.applicationProperties;
    }
    if (hasValue(dotNetObject.authoringApp)) {
        properties.authoringApp = dotNetObject.authoringApp;
    }
    if (hasValue(dotNetObject.authoringAppVersion)) {
        properties.authoringAppVersion = dotNetObject.authoringAppVersion;
    }
    if (hasValue(dotNetObject.clippingEnabled)) {
        properties.clippingEnabled = dotNetObject.clippingEnabled;
    }
    if (hasValue(dotNetObject.heightModelInfo)) {
        properties.heightModelInfo = sanitize(dotNetObject.heightModelInfo);
    }
    if (hasValue(dotNetObject.initialViewProperties)) {
        properties.initialViewProperties = dotNetObject.initialViewProperties;
    }
    if (hasValue(dotNetObject.presentation)) {
        properties.presentation = sanitize(dotNetObject.presentation);
    }
    if (hasValue(dotNetObject.thumbnailUrl)) {
        properties.thumbnailUrl = dotNetObject.thumbnailUrl;
    }
    let jsWebScene = new WebScene(properties);

    let { default: WebSceneWrapper } = await import('./webScene');
    let webSceneWrapper = new WebSceneWrapper(jsWebScene);
    webSceneWrapper.geoBlazorId = dotNetObject.id;
    webSceneWrapper.viewId = viewId;
    webSceneWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = webSceneWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsWebScene;
    
    return jsWebScene;
}


export async function buildDotNetWebSceneGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWebScene: any = {};
    
    if (hasValue(jsObject.clippingArea)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetWebScene.clippingArea = buildDotNetExtent(jsObject.clippingArea);
    }
    
    if (hasValue(jsObject.floorInfo)) {
        let { buildDotNetMapFloorInfo } = await import('./mapFloorInfo');
        dotNetWebScene.floorInfo = await buildDotNetMapFloorInfo(jsObject.floorInfo, viewId);
    }
    
    if (hasValue(jsObject.portalItem)) {
        let { buildDotNetPortalItem } = await import('./portalItem');
        dotNetWebScene.portalItem = await buildDotNetPortalItem(jsObject.portalItem, viewId);
    }
    
    if (hasValue(jsObject.widgets)) {
        let { buildDotNetWebSceneWidgets } = await import('./webSceneWidgets');
        dotNetWebScene.widgets = await buildDotNetWebSceneWidgets(jsObject.widgets);
    }
    
    if (hasValue(jsObject.applicationProperties)) {
        dotNetWebScene.applicationProperties = removeCircularReferences(jsObject.applicationProperties);
    }
    
    if (hasValue(jsObject.authoringApp)) {
        dotNetWebScene.authoringApp = jsObject.authoringApp;
    }
    
    if (hasValue(jsObject.authoringAppVersion)) {
        dotNetWebScene.authoringAppVersion = jsObject.authoringAppVersion;
    }
    
    if (hasValue(jsObject.clippingEnabled)) {
        dotNetWebScene.clippingEnabled = jsObject.clippingEnabled;
    }
    
    if (hasValue(jsObject.heightModelInfo)) {
        dotNetWebScene.heightModelInfo = removeCircularReferences(jsObject.heightModelInfo);
    }
    
    if (hasValue(jsObject.initialViewProperties)) {
        dotNetWebScene.initialViewProperties = removeCircularReferences(jsObject.initialViewProperties);
    }
    
    if (hasValue(jsObject.loaded)) {
        dotNetWebScene.loaded = jsObject.loaded;
    }
    
    if (hasValue(jsObject.loadError)) {
        dotNetWebScene.loadError = removeCircularReferences(jsObject.loadError);
    }
    
    if (hasValue(jsObject.loadStatus)) {
        dotNetWebScene.loadStatus = removeCircularReferences(jsObject.loadStatus);
    }
    
    if (hasValue(jsObject.presentation)) {
        dotNetWebScene.presentation = removeCircularReferences(jsObject.presentation);
    }
    
    if (hasValue(jsObject.sourceVersion)) {
        dotNetWebScene.sourceVersion = removeCircularReferences(jsObject.sourceVersion);
    }
    
    if (hasValue(jsObject.thumbnailUrl)) {
        dotNetWebScene.thumbnailUrl = jsObject.thumbnailUrl;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetWebScene.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetWebScene.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetWebScene.id)) {
        jsObjectRefs[dotNetWebScene.id] ??= jsObject;
        arcGisObjectRefs[dotNetWebScene.id] ??= jsObject;
    }

    return dotNetWebScene;
}

