// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import WebScene from '@arcgis/core/WebScene';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetWebScene } from './webScene';

export async function buildJsWebSceneGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.clippingArea)) {
        let { buildJsExtent } = await import('./extent');
        properties.clippingArea = buildJsExtent(dotNetObject.clippingArea) as any;
    }
    if (hasValue(dotNetObject.portalItem)) {
        let { buildJsPortalItem } = await import('./portalItem');
        properties.portalItem = await buildJsPortalItem(dotNetObject.portalItem, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.presentation)) {
        let { buildJsPresentation } = await import('./presentation');
        properties.presentation = await buildJsPresentation(dotNetObject.presentation, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.applicationProperties)) {
        properties.applicationProperties = dotNetObject.applicationProperties;
    }
    if (hasValue(dotNetObject.authoringApp)) {
        properties.authoringApp = dotNetObject.authoringApp;
    }
    if (hasValue(dotNetObject.authoringAppVersion)) {
        properties.authoringAppVersion = dotNetObject.authoringAppVersion;
    }
    if (hasValue(dotNetObject.clippingEnabled)) {
        properties.clippingEnabled = dotNetObject.clippingEnabled;
    }
    if (hasValue(dotNetObject.floorInfo)) {
        properties.floorInfo = dotNetObject.floorInfo;
    }
    if (hasValue(dotNetObject.heightModelInfo)) {
        properties.heightModelInfo = dotNetObject.heightModelInfo;
    }
    if (hasValue(dotNetObject.initialViewProperties)) {
        properties.initialViewProperties = dotNetObject.initialViewProperties;
    }
    if (hasValue(dotNetObject.thumbnailUrl)) {
        properties.thumbnailUrl = dotNetObject.thumbnailUrl;
    }
    if (hasValue(dotNetObject.widgets)) {
        properties.widgets = dotNetObject.widgets;
    }
    let jsWebScene = new WebScene(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsWebScene);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsWebScene;
    
    try {
        let { buildDotNetWebScene } = await import('./webScene');
        let dnInstantiatedObject = await buildDotNetWebScene(jsWebScene, layerId, viewId);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type WebScene detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for WebScene', e);
    }
    
    return jsWebScene;
}


export async function buildDotNetWebSceneGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWebScene: any = {};
    
    if (hasValue(jsObject.clippingArea)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetWebScene.clippingArea = buildDotNetExtent(jsObject.clippingArea);
    }
    
    if (hasValue(jsObject.portalItem)) {
        let { buildDotNetPortalItem } = await import('./portalItem');
        dotNetWebScene.portalItem = await buildDotNetPortalItem(jsObject.portalItem);
    }
    
    if (hasValue(jsObject.presentation)) {
        let { buildDotNetPresentation } = await import('./presentation');
        dotNetWebScene.presentation = await buildDotNetPresentation(jsObject.presentation, layerId, viewId);
    }
    
    if (hasValue(jsObject.applicationProperties)) {
        dotNetWebScene.applicationProperties = removeCircularReferences(jsObject.applicationProperties);
    }
    
    if (hasValue(jsObject.authoringApp)) {
        dotNetWebScene.authoringApp = jsObject.authoringApp;
    }
    
    if (hasValue(jsObject.authoringAppVersion)) {
        dotNetWebScene.authoringAppVersion = jsObject.authoringAppVersion;
    }
    
    if (hasValue(jsObject.clippingEnabled)) {
        dotNetWebScene.clippingEnabled = jsObject.clippingEnabled;
    }
    
    if (hasValue(jsObject.floorInfo)) {
        dotNetWebScene.floorInfo = removeCircularReferences(jsObject.floorInfo);
    }
    
    if (hasValue(jsObject.heightModelInfo)) {
        dotNetWebScene.heightModelInfo = removeCircularReferences(jsObject.heightModelInfo);
    }
    
    if (hasValue(jsObject.initialViewProperties)) {
        dotNetWebScene.initialViewProperties = removeCircularReferences(jsObject.initialViewProperties);
    }
    
    if (hasValue(jsObject.loaded)) {
        dotNetWebScene.loaded = jsObject.loaded;
    }
    
    if (hasValue(jsObject.loadError)) {
        dotNetWebScene.loadError = removeCircularReferences(jsObject.loadError);
    }
    
    if (hasValue(jsObject.loadStatus)) {
        dotNetWebScene.loadStatus = removeCircularReferences(jsObject.loadStatus);
    }
    
    if (hasValue(jsObject.sourceVersion)) {
        dotNetWebScene.sourceVersion = removeCircularReferences(jsObject.sourceVersion);
    }
    
    if (hasValue(jsObject.thumbnailUrl)) {
        dotNetWebScene.thumbnailUrl = jsObject.thumbnailUrl;
    }
    
    if (hasValue(jsObject.widgets)) {
        dotNetWebScene.widgets = removeCircularReferences(jsObject.widgets);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetWebScene.id = geoBlazorId;
    }

    return dotNetWebScene;
}

