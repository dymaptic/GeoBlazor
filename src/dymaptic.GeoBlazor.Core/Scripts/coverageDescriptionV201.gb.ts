// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import CoverageDescriptionV201 = __esri.CoverageDescriptionV201;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CoverageDescriptionV201Generated implements IPropertyWrapper {
    public component: CoverageDescriptionV201;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: CoverageDescriptionV201) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getBoundedBy(): Promise<any> {
        if (!hasValue(this.component.boundedBy)) {
            return null;
        }
        
        let { buildDotNetCoverageDescriptionV201BoundedBy } = await import('./coverageDescriptionV201BoundedBy');
        return await buildDotNetCoverageDescriptionV201BoundedBy(this.component.boundedBy, this.layerId, this.viewId);
    }
    async setBoundedBy(value: any): Promise<void> {
        let { buildJsCoverageDescriptionV201BoundedBy } = await import('./coverageDescriptionV201BoundedBy');
        this.component.boundedBy = await  buildJsCoverageDescriptionV201BoundedBy(value, this.layerId, this.viewId);
    }
    async getDomainSet(): Promise<any> {
        if (!hasValue(this.component.domainSet)) {
            return null;
        }
        
        let { buildDotNetCoverageDescriptionV201DomainSet } = await import('./coverageDescriptionV201DomainSet');
        return await buildDotNetCoverageDescriptionV201DomainSet(this.component.domainSet, this.layerId, this.viewId);
    }
    async setDomainSet(value: any): Promise<void> {
        let { buildJsCoverageDescriptionV201DomainSet } = await import('./coverageDescriptionV201DomainSet');
        this.component.domainSet = await  buildJsCoverageDescriptionV201DomainSet(value, this.layerId, this.viewId);
    }
    async getEoMetadata(): Promise<any> {
        if (!hasValue(this.component.eoMetadata)) {
            return null;
        }
        
        let { buildDotNetCoverageDescriptionV201EoMetadata } = await import('./coverageDescriptionV201EoMetadata');
        return await buildDotNetCoverageDescriptionV201EoMetadata(this.component.eoMetadata, this.layerId, this.viewId);
    }
    async setEoMetadata(value: any): Promise<void> {
        let { buildJsCoverageDescriptionV201EoMetadata } = await import('./coverageDescriptionV201EoMetadata');
        this.component.eoMetadata = await  buildJsCoverageDescriptionV201EoMetadata(value, this.layerId, this.viewId);
    }
    async getRangeType(): Promise<any> {
        if (!hasValue(this.component.rangeType)) {
            return null;
        }
        
        let { buildDotNetCoverageDescriptionV201RangeType } = await import('./coverageDescriptionV201RangeType');
        return await Promise.all(this.component.rangeType.map(async i => await buildDotNetCoverageDescriptionV201RangeType(i)));
    }
    
    async setRangeType(value: any): Promise<void> {
        let { buildJsCoverageDescriptionV201RangeType } = await import('./coverageDescriptionV201RangeType');
        this.component.rangeType = await Promise.all(value.map(async i => await buildJsCoverageDescriptionV201RangeType(i, this.layerId, this.viewId))) as any;
    }
    
    async getResolution(): Promise<any> {
        if (!hasValue(this.component.resolution)) {
            return null;
        }
        
        let { buildDotNetCoverageDescriptionV201Resolution } = await import('./coverageDescriptionV201Resolution');
        return await buildDotNetCoverageDescriptionV201Resolution(this.component.resolution, this.layerId, this.viewId);
    }
    async setResolution(value: any): Promise<void> {
        let { buildJsCoverageDescriptionV201Resolution } = await import('./coverageDescriptionV201Resolution');
        this.component.resolution = await  buildJsCoverageDescriptionV201Resolution(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsCoverageDescriptionV201Generated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCoverageDescriptionV201: any = {}
    if (hasValue(dotNetObject.boundedBy)) {
        let { buildJsCoverageDescriptionV201BoundedBy } = await import('./coverageDescriptionV201BoundedBy');
        jsCoverageDescriptionV201.boundedBy = await buildJsCoverageDescriptionV201BoundedBy(dotNetObject.boundedBy, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.domainSet)) {
        let { buildJsCoverageDescriptionV201DomainSet } = await import('./coverageDescriptionV201DomainSet');
        jsCoverageDescriptionV201.domainSet = await buildJsCoverageDescriptionV201DomainSet(dotNetObject.domainSet, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.eoMetadata)) {
        let { buildJsCoverageDescriptionV201EoMetadata } = await import('./coverageDescriptionV201EoMetadata');
        jsCoverageDescriptionV201.eoMetadata = await buildJsCoverageDescriptionV201EoMetadata(dotNetObject.eoMetadata, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.rangeType)) {
        let { buildJsCoverageDescriptionV201RangeType } = await import('./coverageDescriptionV201RangeType');
        jsCoverageDescriptionV201.rangeType = await Promise.all(dotNetObject.rangeType.map(async i => await buildJsCoverageDescriptionV201RangeType(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.resolution)) {
        let { buildJsCoverageDescriptionV201Resolution } = await import('./coverageDescriptionV201Resolution');
        jsCoverageDescriptionV201.resolution = await buildJsCoverageDescriptionV201Resolution(dotNetObject.resolution, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.coverageFunction)) {
        jsCoverageDescriptionV201.coverageFunction = dotNetObject.coverageFunction;
    }
    if (hasValue(dotNetObject.coverageId)) {
        jsCoverageDescriptionV201.coverageId = dotNetObject.coverageId;
    }
    if (hasValue(dotNetObject.extension)) {
        jsCoverageDescriptionV201.extension = dotNetObject.extension;
    }
    if (hasValue(dotNetObject.serviceParameters)) {
        jsCoverageDescriptionV201.serviceParameters = dotNetObject.serviceParameters;
    }
    if (hasValue(dotNetObject.version)) {
        jsCoverageDescriptionV201.version = dotNetObject.version;
    }
    let { default: CoverageDescriptionV201Wrapper } = await import('./coverageDescriptionV201');
    let coverageDescriptionV201Wrapper = new CoverageDescriptionV201Wrapper(jsCoverageDescriptionV201);
    coverageDescriptionV201Wrapper.geoBlazorId = dotNetObject.id;
    coverageDescriptionV201Wrapper.viewId = viewId;
    coverageDescriptionV201Wrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(coverageDescriptionV201Wrapper);
    jsObjectRefs[dotNetObject.id] = coverageDescriptionV201Wrapper;
    arcGisObjectRefs[dotNetObject.id] = jsCoverageDescriptionV201;
    
    let dnInstantiatedObject = await buildDotNetCoverageDescriptionV201(jsCoverageDescriptionV201, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CoverageDescriptionV201', e);
    }
    
    return jsCoverageDescriptionV201;
}

export async function buildDotNetCoverageDescriptionV201Generated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCoverageDescriptionV201: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.boundedBy)) {
            let { buildDotNetCoverageDescriptionV201BoundedBy } = await import('./coverageDescriptionV201BoundedBy');
            dotNetCoverageDescriptionV201.boundedBy = await buildDotNetCoverageDescriptionV201BoundedBy(jsObject.boundedBy, layerId, viewId);
        }
        if (hasValue(jsObject.domainSet)) {
            let { buildDotNetCoverageDescriptionV201DomainSet } = await import('./coverageDescriptionV201DomainSet');
            dotNetCoverageDescriptionV201.domainSet = await buildDotNetCoverageDescriptionV201DomainSet(jsObject.domainSet, layerId, viewId);
        }
        if (hasValue(jsObject.eoMetadata)) {
            let { buildDotNetCoverageDescriptionV201EoMetadata } = await import('./coverageDescriptionV201EoMetadata');
            dotNetCoverageDescriptionV201.eoMetadata = await buildDotNetCoverageDescriptionV201EoMetadata(jsObject.eoMetadata, layerId, viewId);
        }
        if (hasValue(jsObject.rangeType)) {
            let { buildDotNetCoverageDescriptionV201RangeType } = await import('./coverageDescriptionV201RangeType');
            dotNetCoverageDescriptionV201.rangeType = await Promise.all(jsObject.rangeType.map(async i => await buildDotNetCoverageDescriptionV201RangeType(i, layerId, viewId)));
        }
        if (hasValue(jsObject.resolution)) {
            let { buildDotNetCoverageDescriptionV201Resolution } = await import('./coverageDescriptionV201Resolution');
            dotNetCoverageDescriptionV201.resolution = await buildDotNetCoverageDescriptionV201Resolution(jsObject.resolution, layerId, viewId);
        }
        if (hasValue(jsObject.coverageFunction)) {
            dotNetCoverageDescriptionV201.coverageFunction = jsObject.coverageFunction;
        }
        if (hasValue(jsObject.coverageId)) {
            dotNetCoverageDescriptionV201.coverageId = jsObject.coverageId;
        }
        if (hasValue(jsObject.extension)) {
            dotNetCoverageDescriptionV201.extension = jsObject.extension;
        }
        if (hasValue(jsObject.serviceParameters)) {
            dotNetCoverageDescriptionV201.serviceParameters = jsObject.serviceParameters;
        }
        if (hasValue(jsObject.version)) {
            dotNetCoverageDescriptionV201.version = jsObject.version;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCoverageDescriptionV201.id = k;
                break;
            }
        }
    }

    return dotNetCoverageDescriptionV201;
}

