// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetCoverageDescriptionV201 } from './coverageDescriptionV201';
import CoverageDescriptionV201 = __esri.CoverageDescriptionV201;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsCoverageDescriptionV201Generated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCoverageDescriptionV201: any = {}
    if (hasValue(dotNetObject.boundedBy)) {
        let { buildJsCoverageDescriptionV201BoundedBy } = await import('./coverageDescriptionV201BoundedBy');
        jsCoverageDescriptionV201.boundedBy = await buildJsCoverageDescriptionV201BoundedBy(dotNetObject.boundedBy, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.eoMetadata)) {
        let { buildJsCoverageDescriptionV201EoMetadata } = await import('./coverageDescriptionV201EoMetadata');
        jsCoverageDescriptionV201.eoMetadata = await buildJsCoverageDescriptionV201EoMetadata(dotNetObject.eoMetadata, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.coverageFunction)) {
        jsCoverageDescriptionV201.coverageFunction = dotNetObject.coverageFunction;
    }
    if (hasValue(dotNetObject.coverageId)) {
        jsCoverageDescriptionV201.coverageId = dotNetObject.coverageId;
    }
    if (hasValue(dotNetObject.domainSet)) {
        jsCoverageDescriptionV201.domainSet = dotNetObject.domainSet;
    }
    if (hasValue(dotNetObject.extension)) {
        jsCoverageDescriptionV201.extension = dotNetObject.extension;
    }
    if (hasValue(dotNetObject.rangeType)) {
        jsCoverageDescriptionV201.rangeType = dotNetObject.rangeType;
    }
    if (hasValue(dotNetObject.resolution)) {
        jsCoverageDescriptionV201.resolution = dotNetObject.resolution;
    }
    if (hasValue(dotNetObject.serviceParameters)) {
        jsCoverageDescriptionV201.serviceParameters = dotNetObject.serviceParameters;
    }
    if (hasValue(dotNetObject.version)) {
        jsCoverageDescriptionV201.version = dotNetObject.version;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsCoverageDescriptionV201);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCoverageDescriptionV201;
    
    let dnInstantiatedObject = await buildDotNetCoverageDescriptionV201(jsCoverageDescriptionV201);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CoverageDescriptionV201', e);
    }
    
    return jsCoverageDescriptionV201;
}

export async function buildDotNetCoverageDescriptionV201Generated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCoverageDescriptionV201: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.boundedBy)) {
            let { buildDotNetCoverageDescriptionV201BoundedBy } = await import('./coverageDescriptionV201BoundedBy');
            dotNetCoverageDescriptionV201.boundedBy = await buildDotNetCoverageDescriptionV201BoundedBy(jsObject.boundedBy);
        }
        if (hasValue(jsObject.eoMetadata)) {
            let { buildDotNetCoverageDescriptionV201EoMetadata } = await import('./coverageDescriptionV201EoMetadata');
            dotNetCoverageDescriptionV201.eoMetadata = await buildDotNetCoverageDescriptionV201EoMetadata(jsObject.eoMetadata);
        }
        if (hasValue(jsObject.coverageFunction)) {
            dotNetCoverageDescriptionV201.coverageFunction = jsObject.coverageFunction;
        }
        if (hasValue(jsObject.coverageId)) {
            dotNetCoverageDescriptionV201.coverageId = jsObject.coverageId;
        }
        if (hasValue(jsObject.domainSet)) {
            dotNetCoverageDescriptionV201.domainSet = jsObject.domainSet;
        }
        if (hasValue(jsObject.extension)) {
            dotNetCoverageDescriptionV201.extension = jsObject.extension;
        }
        if (hasValue(jsObject.rangeType)) {
            dotNetCoverageDescriptionV201.rangeType = jsObject.rangeType;
        }
        if (hasValue(jsObject.resolution)) {
            dotNetCoverageDescriptionV201.resolution = jsObject.resolution;
        }
        if (hasValue(jsObject.serviceParameters)) {
            dotNetCoverageDescriptionV201.serviceParameters = jsObject.serviceParameters;
        }
        if (hasValue(jsObject.version)) {
            dotNetCoverageDescriptionV201.version = jsObject.version;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCoverageDescriptionV201.id = k;
                break;
            }
        }
    }

    return dotNetCoverageDescriptionV201;
}

