// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetCoverageDescriptionV201 } from './coverageDescriptionV201';

export async function buildJsCoverageDescriptionV201Generated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsCoverageDescriptionV201: any = {};
    if (hasValue(dotNetObject.boundedBy)) {
        let { buildJsCoverageDescriptionV201BoundedBy } = await import('./coverageDescriptionV201BoundedBy');
        jsCoverageDescriptionV201.boundedBy = await buildJsCoverageDescriptionV201BoundedBy(dotNetObject.boundedBy, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.eoMetadata)) {
        let { buildJsCoverageDescriptionV201EoMetadata } = await import('./coverageDescriptionV201EoMetadata');
        jsCoverageDescriptionV201.eoMetadata = await buildJsCoverageDescriptionV201EoMetadata(dotNetObject.eoMetadata, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.coverageFunction)) {
        jsCoverageDescriptionV201.coverageFunction = dotNetObject.coverageFunction;
    }
    if (hasValue(dotNetObject.coverageId)) {
        jsCoverageDescriptionV201.coverageId = dotNetObject.coverageId;
    }
    if (hasValue(dotNetObject.domainSet)) {
        jsCoverageDescriptionV201.domainSet = dotNetObject.domainSet;
    }
    if (hasValue(dotNetObject.extension)) {
        jsCoverageDescriptionV201.extension = dotNetObject.extension;
    }
    if (hasValue(dotNetObject.rangeType) && dotNetObject.rangeType.length > 0) {
        jsCoverageDescriptionV201.rangeType = dotNetObject.rangeType;
    }
    if (hasValue(dotNetObject.resolution)) {
        jsCoverageDescriptionV201.resolution = dotNetObject.resolution;
    }
    if (hasValue(dotNetObject.serviceParameters)) {
        jsCoverageDescriptionV201.serviceParameters = dotNetObject.serviceParameters;
    }
    if (hasValue(dotNetObject.version)) {
        jsCoverageDescriptionV201.version = dotNetObject.version;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCoverageDescriptionV201);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCoverageDescriptionV201;
    
    return jsCoverageDescriptionV201;
}


export async function buildDotNetCoverageDescriptionV201Generated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCoverageDescriptionV201: any = {};
    
    if (hasValue(jsObject.boundedBy)) {
        let { buildDotNetCoverageDescriptionV201BoundedBy } = await import('./coverageDescriptionV201BoundedBy');
        dotNetCoverageDescriptionV201.boundedBy = await buildDotNetCoverageDescriptionV201BoundedBy(jsObject.boundedBy, layerId, viewId);
    }
    
    if (hasValue(jsObject.eoMetadata)) {
        let { buildDotNetCoverageDescriptionV201EoMetadata } = await import('./coverageDescriptionV201EoMetadata');
        dotNetCoverageDescriptionV201.eoMetadata = await buildDotNetCoverageDescriptionV201EoMetadata(jsObject.eoMetadata, layerId, viewId);
    }
    
    if (hasValue(jsObject.coverageFunction)) {
        dotNetCoverageDescriptionV201.coverageFunction = jsObject.coverageFunction;
    }
    
    if (hasValue(jsObject.coverageId)) {
        dotNetCoverageDescriptionV201.coverageId = jsObject.coverageId;
    }
    
    if (hasValue(jsObject.domainSet)) {
        dotNetCoverageDescriptionV201.domainSet = removeCircularReferences(jsObject.domainSet);
    }
    
    if (hasValue(jsObject.extension)) {
        dotNetCoverageDescriptionV201.extension = jsObject.extension;
    }
    
    if (hasValue(jsObject.rangeType)) {
        dotNetCoverageDescriptionV201.rangeType = removeCircularReferences(jsObject.rangeType);
    }
    
    if (hasValue(jsObject.resolution)) {
        dotNetCoverageDescriptionV201.resolution = removeCircularReferences(jsObject.resolution);
    }
    
    if (hasValue(jsObject.serviceParameters)) {
        dotNetCoverageDescriptionV201.serviceParameters = jsObject.serviceParameters;
    }
    
    if (hasValue(jsObject.version)) {
        dotNetCoverageDescriptionV201.version = jsObject.version;
    }
    

    return dotNetCoverageDescriptionV201;
}

