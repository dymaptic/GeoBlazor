// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import SearchTableField from '@arcgis/core/webdoc/applicationProperties/SearchTableField';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetSearchTableField } from './searchTableField';

export async function buildJsSearchTableFieldGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.exactMatch)) {
        properties.exactMatch = dotNetObject.exactMatch;
    }
    if (hasValue(dotNetObject.name)) {
        properties.name = dotNetObject.name;
    }
    let jsSearchTableField = new SearchTableField(properties);
    
    jsObjectRefs[dotNetObject.id] = jsSearchTableField;
    arcGisObjectRefs[dotNetObject.id] = jsSearchTableField;
    
    return jsSearchTableField;
}


export async function buildDotNetSearchTableFieldGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchTableField: any = {};
    
    if (hasValue(jsObject.exactMatch)) {
        dotNetSearchTableField.exactMatch = jsObject.exactMatch;
    }
    
    if (hasValue(jsObject.name)) {
        dotNetSearchTableField.name = jsObject.name;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetSearchTableField.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSearchTableField.id = geoBlazorId;
    }

    return dotNetSearchTableField;
}

