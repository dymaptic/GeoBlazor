// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import BasemapStyle from '@arcgis/core/support/BasemapStyle';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class BasemapStyleGenerated implements IPropertyWrapper {
    public component: BasemapStyle;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: BasemapStyle) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsBasemapStyleGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsBasemapStyle = new BasemapStyle();

    if (hasValue(dotNetObject.language)) {
        jsBasemapStyle.language = dotNetObject.language;
    }
    if (hasValue(dotNetObject.name)) {
        jsBasemapStyle.id = dotNetObject.name;
    }
    if (hasValue(dotNetObject.places)) {
        jsBasemapStyle.places = dotNetObject.places;
    }
    if (hasValue(dotNetObject.serviceUrl)) {
        jsBasemapStyle.serviceUrl = dotNetObject.serviceUrl;
    }
    if (hasValue(dotNetObject.worldview)) {
        jsBasemapStyle.worldview = dotNetObject.worldview;
    }
    let { default: BasemapStyleWrapper } = await import('./basemapStyle');
    let basemapStyleWrapper = new BasemapStyleWrapper(jsBasemapStyle);
    basemapStyleWrapper.geoBlazorId = dotNetObject.id;
    basemapStyleWrapper.viewId = viewId;
    basemapStyleWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(basemapStyleWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = basemapStyleWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsBasemapStyle;
    
    return jsBasemapStyle;
}

export async function buildDotNetBasemapStyleGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBasemapStyle: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetBasemapStyle.language = jsObject.language;
        dotNetBasemapStyle.name = jsObject.id;
        dotNetBasemapStyle.places = jsObject.places;
        dotNetBasemapStyle.serviceUrl = jsObject.serviceUrl;
        dotNetBasemapStyle.worldview = jsObject.worldview;

    return dotNetBasemapStyle;
}

