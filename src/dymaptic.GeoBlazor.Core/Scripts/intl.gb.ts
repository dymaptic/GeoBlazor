// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import intl = __esri.intl;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class IntlGenerated implements IPropertyWrapper {
    public component: intl;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: intl) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async convertNumberFormatToIntlOptions(format: any): Promise<any> {
        return this.component.convertNumberFormatToIntlOptions(format);
    }

    async createJSONLoader(parameters: any): Promise<any> {
        return this.component.createJSONLoader(parameters);
    }

    async fetchMessageBundle(bundleId: any): Promise<any> {
        return await this.component.fetchMessageBundle(bundleId);
    }

    async formatDate(value: any,
        formatOptions: any): Promise<any> {
        return this.component.formatDate(value,
            formatOptions);
    }

    async formatDateOnly(value: any,
        options: any): Promise<any> {
        return this.component.formatDateOnly(value,
            options);
    }

    async formatNumber(value: any,
        formatOptions: any): Promise<any> {
        return this.component.formatNumber(value,
            formatOptions);
    }

    async formatTimeOnly(value: any,
        options: any): Promise<any> {
        return this.component.formatTimeOnly(value,
            options);
    }

    async formatTimestamp(value: any,
        options: any): Promise<any> {
        return this.component.formatTimestamp(value,
            options);
    }

    async getLocale(): Promise<any> {
        return this.component.getLocale();
    }

    async normalizeMessageBundleLocale(locale: any): Promise<any> {
        return this.component.normalizeMessageBundleLocale(locale);
    }

    async onLocaleChange(callback: any): Promise<any> {
        let result = this.component.onLocaleChange(callback);
        let { buildDotNetHighlightHandle } = await import('./highlightHandle');
        return await buildDotNetHighlightHandle(result);
    }

    async prefersRTL(locale: any): Promise<any> {
        return this.component.prefersRTL(locale);
    }

    async registerMessageBundleLoader(loader: any): Promise<any> {
        return this.component.registerMessageBundleLoader(loader);
    }

    async setLocale(locale: any): Promise<void> {
        this.component.setLocale(locale);
    }

    async substitute(template: any,
        data: any,
        options: any): Promise<any> {
        return this.component.substitute(template,
            data,
            options);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsIntlGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsintl: any = {}


    let { default: IntlWrapper } = await import('./intl');
    let intlWrapper = new IntlWrapper(jsintl);
    intlWrapper.geoBlazorId = dotNetObject.id;
    intlWrapper.viewId = viewId;
    intlWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(intlWrapper);
    jsObjectRefs[dotNetObject.id] = intlWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsintl;
    let { buildDotNetIntl } = await import('./intl');
    let dnInstantiatedObject = await buildDotNetIntl(jsintl);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Intl', e);
    }
    
    return jsintl;
}
export async function buildDotNetIntlGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIntl: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetIntl.id = k;
                break;
            }
        }
    }

    return dotNetIntl;
}

