// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import ImageMediaInfo from '@arcgis/core/popup/content/ImageMediaInfo';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ImageMediaInfoGenerated implements IPropertyWrapper {
    public component: ImageMediaInfo;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ImageMediaInfo) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getValue(): Promise<any> {
        let { buildDotNetImageMediaInfoValue } = await import('./imageMediaInfoValue');
        return buildDotNetImageMediaInfoValue(this.component.value);
    }
    async setValue(value: any): Promise<void> {
        let { buildJsImageMediaInfoValue } = await import('./imageMediaInfoValue');
        this.component.value = await  buildJsImageMediaInfoValue(value);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsImageMediaInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsImageMediaInfo = new ImageMediaInfo();
    if (hasValue(dotNetObject.value)) {
        let { buildJsImageMediaInfoValue } = await import('./jsBuilder');
        jsImageMediaInfo.value = await buildJsImageMediaInfoValue(dotNetObject.value) as any;
    }

    if (hasValue(dotNetObject.altText)) {
        jsImageMediaInfo.altText = dotNetObject.altText;
    }
    if (hasValue(dotNetObject.caption)) {
        jsImageMediaInfo.caption = dotNetObject.caption;
    }
    if (hasValue(dotNetObject.refreshInterval)) {
        jsImageMediaInfo.refreshInterval = dotNetObject.refreshInterval;
    }
    if (hasValue(dotNetObject.title)) {
        jsImageMediaInfo.title = dotNetObject.title;
    }
    let { default: ImageMediaInfoWrapper } = await import('./imageMediaInfo');
    let imageMediaInfoWrapper = new ImageMediaInfoWrapper(jsImageMediaInfo);
    imageMediaInfoWrapper.geoBlazorId = dotNetObject.id;
    imageMediaInfoWrapper.viewId = viewId;
    imageMediaInfoWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(imageMediaInfoWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = imageMediaInfoWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsImageMediaInfo;
    
    return jsImageMediaInfo;
}

export async function buildDotNetImageMediaInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageMediaInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.value)) {
            let { buildDotNetImageMediaInfoValue } = await import('./dotNetBuilder');
            dotNetImageMediaInfo.value = buildDotNetImageMediaInfoValue(jsObject.value);
        }
        dotNetImageMediaInfo.altText = jsObject.altText;
        dotNetImageMediaInfo.caption = jsObject.caption;
        dotNetImageMediaInfo.refreshInterval = jsObject.refreshInterval;
        dotNetImageMediaInfo.title = jsObject.title;
        dotNetImageMediaInfo.type = jsObject.type;

    return dotNetImageMediaInfo;
}

