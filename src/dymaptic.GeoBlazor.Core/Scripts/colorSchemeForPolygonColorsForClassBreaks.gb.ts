// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetColorSchemeForPolygonColorsForClassBreaks } from './colorSchemeForPolygonColorsForClassBreaks';
import ColorSchemeForPolygonColorsForClassBreaks = __esri.ColorSchemeForPolygonColorsForClassBreaks;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsColorSchemeForPolygonColorsForClassBreaksGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsColorSchemeForPolygonColorsForClassBreaks: any = {}
    if (hasValue(dotNetObject.colors)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsColorSchemeForPolygonColorsForClassBreaks.colors = dotNetObject.colors.map(i => buildJsMapColor(i)) as any;
    }

    if (hasValue(dotNetObject.numClasses)) {
        jsColorSchemeForPolygonColorsForClassBreaks.numClasses = dotNetObject.numClasses;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsColorSchemeForPolygonColorsForClassBreaks);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsColorSchemeForPolygonColorsForClassBreaks;
    
    let dnInstantiatedObject = await buildDotNetColorSchemeForPolygonColorsForClassBreaks(jsColorSchemeForPolygonColorsForClassBreaks);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ColorSchemeForPolygonColorsForClassBreaks', e);
    }
    
    return jsColorSchemeForPolygonColorsForClassBreaks;
}

export async function buildDotNetColorSchemeForPolygonColorsForClassBreaksGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetColorSchemeForPolygonColorsForClassBreaks: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.colors)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetColorSchemeForPolygonColorsForClassBreaks.colors = jsObject.colors.map(i => buildDotNetMapColor(i));
        }
        if (hasValue(jsObject.numClasses)) {
            dotNetColorSchemeForPolygonColorsForClassBreaks.numClasses = jsObject.numClasses;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetColorSchemeForPolygonColorsForClassBreaks.id = k;
                break;
            }
        }
    }

    return dotNetColorSchemeForPolygonColorsForClassBreaks;
}

