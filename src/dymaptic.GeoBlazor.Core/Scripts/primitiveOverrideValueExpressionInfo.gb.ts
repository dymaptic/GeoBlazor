// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetPrimitiveOverrideValueExpressionInfo } from './primitiveOverrideValueExpressionInfo';

export async function buildJsPrimitiveOverrideValueExpressionInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsPrimitiveOverrideValueExpressionInfo: any = {};

    if (hasValue(dotNetObject.expression)) {
        jsPrimitiveOverrideValueExpressionInfo.expression = dotNetObject.expression;
    }
    if (hasValue(dotNetObject.name)) {
        jsPrimitiveOverrideValueExpressionInfo.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.returnType)) {
        jsPrimitiveOverrideValueExpressionInfo.returnType = dotNetObject.returnType;
    }
    if (hasValue(dotNetObject.title)) {
        jsPrimitiveOverrideValueExpressionInfo.title = dotNetObject.title;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsPrimitiveOverrideValueExpressionInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPrimitiveOverrideValueExpressionInfo;
    
    return jsPrimitiveOverrideValueExpressionInfo;
}


export async function buildDotNetPrimitiveOverrideValueExpressionInfoGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPrimitiveOverrideValueExpressionInfo: any = {};
    
    if (hasValue(jsObject.expression)) {
        dotNetPrimitiveOverrideValueExpressionInfo.expression = jsObject.expression;
    }
    
    if (hasValue(jsObject.name)) {
        dotNetPrimitiveOverrideValueExpressionInfo.name = jsObject.name;
    }
    
    if (hasValue(jsObject.returnType)) {
        dotNetPrimitiveOverrideValueExpressionInfo.returnType = removeCircularReferences(jsObject.returnType);
    }
    
    if (hasValue(jsObject.title)) {
        dotNetPrimitiveOverrideValueExpressionInfo.title = jsObject.title;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetPrimitiveOverrideValueExpressionInfo.type = jsObject.type;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetPrimitiveOverrideValueExpressionInfo.id = geoBlazorId;
    }

    return dotNetPrimitiveOverrideValueExpressionInfo;
}

