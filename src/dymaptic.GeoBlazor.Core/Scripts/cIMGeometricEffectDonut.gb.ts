// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCIMGeometricEffectDonut } from './cIMGeometricEffectDonut';

export async function buildJsCIMGeometricEffectDonutGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCIMGeometricEffectDonut: any = {};

    if (hasValue(dotNetObject.method)) {
        jsCIMGeometricEffectDonut.method = dotNetObject.method;
    }
    if (hasValue(dotNetObject.option)) {
        jsCIMGeometricEffectDonut.option = dotNetObject.option;
    }
    if (hasValue(dotNetObject.primitiveName)) {
        jsCIMGeometricEffectDonut.primitiveName = dotNetObject.primitiveName;
    }
    if (hasValue(dotNetObject.width)) {
        jsCIMGeometricEffectDonut.width = dotNetObject.width;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCIMGeometricEffectDonut);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCIMGeometricEffectDonut;
    
    let { buildDotNetCIMGeometricEffectDonut } = await import('./cIMGeometricEffectDonut');
    let dnInstantiatedObject = await buildDotNetCIMGeometricEffectDonut(jsCIMGeometricEffectDonut);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type CIMGeometricEffectDonut detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CIMGeometricEffectDonut', e);
    }
    
    return jsCIMGeometricEffectDonut;
}


export async function buildDotNetCIMGeometricEffectDonutGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCIMGeometricEffectDonut: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.method)) {
        dotNetCIMGeometricEffectDonut.method = jsObject.method;
    }
    if (hasValue(jsObject.option)) {
        dotNetCIMGeometricEffectDonut.option = jsObject.option;
    }
    if (hasValue(jsObject.primitiveName)) {
        dotNetCIMGeometricEffectDonut.primitiveName = jsObject.primitiveName;
    }
    if (hasValue(jsObject.type)) {
        dotNetCIMGeometricEffectDonut.type = jsObject.type;
    }
    if (hasValue(jsObject.width)) {
        dotNetCIMGeometricEffectDonut.width = jsObject.width;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCIMGeometricEffectDonut.id = geoBlazorId;
    }

    return dotNetCIMGeometricEffectDonut;
}

