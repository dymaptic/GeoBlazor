// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetColorSchemeForPolygon } from './colorSchemeForPolygon';
import ColorSchemeForPolygon = __esri.ColorSchemeForPolygon;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsColorSchemeForPolygonGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsColorSchemeForPolygon: any = {}
    if (hasValue(dotNetObject.colors)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsColorSchemeForPolygon.colors = dotNetObject.colors.map(i => buildJsMapColor(i)) as any;
    }
    if (hasValue(dotNetObject.colorsForClassBreaks)) {
        let { buildJsColorSchemeForPolygonColorsForClassBreaks } = await import('./colorSchemeForPolygonColorsForClassBreaks');
        jsColorSchemeForPolygon.colorsForClassBreaks = await Promise.all(dotNetObject.colorsForClassBreaks.map(async i => await buildJsColorSchemeForPolygonColorsForClassBreaks(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.noDataColor)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsColorSchemeForPolygon.noDataColor = buildJsMapColor(dotNetObject.noDataColor) as any;
    }
    if (hasValue(dotNetObject.outline)) {
        let { buildJsColorSchemeForPolygonOutline } = await import('./colorSchemeForPolygonOutline');
        jsColorSchemeForPolygon.outline = await buildJsColorSchemeForPolygonOutline(dotNetObject.outline, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.colorSchemeForPolygonId)) {
        jsColorSchemeForPolygon.id = dotNetObject.colorSchemeForPolygonId;
    }
    if (hasValue(dotNetObject.name)) {
        jsColorSchemeForPolygon.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.opacity)) {
        jsColorSchemeForPolygon.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.tags)) {
        jsColorSchemeForPolygon.tags = dotNetObject.tags;
    }
    if (hasValue(dotNetObject.theme)) {
        jsColorSchemeForPolygon.theme = dotNetObject.theme;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsColorSchemeForPolygon);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsColorSchemeForPolygon;
    
    let dnInstantiatedObject = await buildDotNetColorSchemeForPolygon(jsColorSchemeForPolygon);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ColorSchemeForPolygon', e);
    }
    
    return jsColorSchemeForPolygon;
}

export async function buildDotNetColorSchemeForPolygonGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetColorSchemeForPolygon: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.colors)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetColorSchemeForPolygon.colors = jsObject.colors.map(i => buildDotNetMapColor(i));
        }
        if (hasValue(jsObject.colorsForClassBreaks)) {
            let { buildDotNetColorSchemeForPolygonColorsForClassBreaks } = await import('./colorSchemeForPolygonColorsForClassBreaks');
            dotNetColorSchemeForPolygon.colorsForClassBreaks = await Promise.all(jsObject.colorsForClassBreaks.map(async i => await buildDotNetColorSchemeForPolygonColorsForClassBreaks(i)));
        }
        if (hasValue(jsObject.noDataColor)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetColorSchemeForPolygon.noDataColor = buildDotNetMapColor(jsObject.noDataColor);
        }
        if (hasValue(jsObject.outline)) {
            let { buildDotNetColorSchemeForPolygonOutline } = await import('./colorSchemeForPolygonOutline');
            dotNetColorSchemeForPolygon.outline = await buildDotNetColorSchemeForPolygonOutline(jsObject.outline);
        }
        if (hasValue(jsObject.id)) {
            dotNetColorSchemeForPolygon.colorSchemeForPolygonId = jsObject.id;
        }
        if (hasValue(jsObject.name)) {
            dotNetColorSchemeForPolygon.name = jsObject.name;
        }
        if (hasValue(jsObject.opacity)) {
            dotNetColorSchemeForPolygon.opacity = jsObject.opacity;
        }
        if (hasValue(jsObject.tags)) {
            dotNetColorSchemeForPolygon.tags = jsObject.tags;
        }
        if (hasValue(jsObject.theme)) {
            dotNetColorSchemeForPolygon.theme = jsObject.theme;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetColorSchemeForPolygon.id = k;
                break;
            }
        }
    }

    return dotNetColorSchemeForPolygon;
}

