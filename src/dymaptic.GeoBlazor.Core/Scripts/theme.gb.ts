// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import Theme from '@arcgis/core/views/Theme';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ThemeGenerated implements IPropertyWrapper {
    public component: Theme;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: Theme) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsThemeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTheme = new Theme();

    if (hasValue(dotNetObject.accentColor)) {
        jsTheme.accentColor = dotNetObject.accentColor;
    }
    if (hasValue(dotNetObject.textColor)) {
        jsTheme.textColor = dotNetObject.textColor;
    }
    let { default: ThemeWrapper } = await import('./theme');
    let themeWrapper = new ThemeWrapper(jsTheme);
    themeWrapper.geoBlazorId = dotNetObject.id;
    themeWrapper.viewId = viewId;
    themeWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(themeWrapper);
    jsObjectRefs[dotNetObject.id] = themeWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsTheme;
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Theme', e);
    }
    
    return jsTheme;
}

export async function buildDotNetThemeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTheme: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.accentColor)) {
            dotNetTheme.accentColor = jsObject.accentColor;
        }
        if (hasValue(jsObject.textColor)) {
            dotNetTheme.textColor = jsObject.textColor;
        }

    return dotNetTheme;
}

