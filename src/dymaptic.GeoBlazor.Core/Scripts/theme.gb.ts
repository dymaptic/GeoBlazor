// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Theme from '@arcgis/core/views/Theme';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetTheme } from './theme';

export async function buildJsThemeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTheme = new Theme();
    if (hasValue(dotNetObject.accentColor)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsTheme.accentColor = buildJsMapColor(dotNetObject.accentColor) as any;
    }
    if (hasValue(dotNetObject.textColor)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsTheme.textColor = buildJsMapColor(dotNetObject.textColor) as any;
    }

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsTheme);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTheme;
    
    let dnInstantiatedObject = await buildDotNetTheme(jsTheme);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Theme', e);
    }
    
    return jsTheme;
}

export async function buildDotNetThemeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTheme: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.accentColor)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetTheme.accentColor = buildDotNetMapColor(jsObject.accentColor);
        }
        if (hasValue(jsObject.textColor)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetTheme.textColor = buildDotNetMapColor(jsObject.textColor);
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTheme.id = k;
                break;
            }
        }
    }

    return dotNetTheme;
}

