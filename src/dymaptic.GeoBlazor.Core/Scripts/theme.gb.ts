// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Theme from '@arcgis/core/views/Theme';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetTheme } from './theme';

export async function buildJsThemeGenerated(dotNetObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.accentColor)) {
        let { buildJsMapColor } = await import('./mapColor');
        properties.accentColor = buildJsMapColor(dotNetObject.accentColor, viewId) as any;
    }
    if (hasValue(dotNetObject.textColor)) {
        let { buildJsMapColor } = await import('./mapColor');
        properties.textColor = buildJsMapColor(dotNetObject.textColor, viewId) as any;
    }

    let jsTheme = new Theme(properties);
    
    jsObjectRefs[dotNetObject.id] = jsTheme;
    arcGisObjectRefs[dotNetObject.id] = jsTheme;
    
    return jsTheme;
}


export async function buildDotNetThemeGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTheme: any = {};
    
    if (hasValue(jsObject.accentColor)) {
        let { buildDotNetMapColor } = await import('./mapColor');
        dotNetTheme.accentColor = buildDotNetMapColor(jsObject.accentColor, viewId);
    }
    
    if (hasValue(jsObject.textColor)) {
        let { buildDotNetMapColor } = await import('./mapColor');
        dotNetTheme.textColor = buildDotNetMapColor(jsObject.textColor, viewId);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetTheme.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetTheme.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetTheme.id)) {
        jsObjectRefs[dotNetTheme.id] ??= jsObject;
        arcGisObjectRefs[dotNetTheme.id] ??= jsObject;
    }

    return dotNetTheme;
}

