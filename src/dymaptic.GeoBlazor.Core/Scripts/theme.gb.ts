// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Theme from '@arcgis/core/views/Theme';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetTheme } from './theme';

export async function buildJsThemeGenerated(dotNetObject: any): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.accentColor)) {
        properties.accentColor = dotNetObject.accentColor;
    }
    if (hasValue(dotNetObject.textColor)) {
        properties.textColor = dotNetObject.textColor;
    }
    let jsTheme = new Theme(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsTheme);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTheme;
    
    let { buildDotNetTheme } = await import('./theme');
    let dnInstantiatedObject = await buildDotNetTheme(jsTheme);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type Theme detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Theme', e);
    }
    
    return jsTheme;
}


export async function buildDotNetThemeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTheme: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.accentColor)) {
        dotNetTheme.accentColor = jsObject.accentColor;
    }
    if (hasValue(jsObject.textColor)) {
        dotNetTheme.textColor = jsObject.textColor;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTheme.id = k;
                break;
            }
        }
    }

    return dotNetTheme;
}

