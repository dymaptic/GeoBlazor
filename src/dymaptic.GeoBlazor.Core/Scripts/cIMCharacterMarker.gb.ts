// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetCIMCharacterMarker } from './cIMCharacterMarker';

export async function buildJsCIMCharacterMarkerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCIMCharacterMarker: any = {}
    if (hasValue(dotNetObject.symbol)) {
        let { buildJsCIMPolygonSymbol } = await import('./cIMPolygonSymbol');
        jsCIMCharacterMarker.symbol = await buildJsCIMPolygonSymbol(dotNetObject.symbol, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.anchorPoint)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedAnchorPoint } = dotNetObject.anchorPoint;
        jsCIMCharacterMarker.anchorPoint = sanitizedAnchorPoint;
    }
    if (hasValue(dotNetObject.anchorPointUnits)) {
        jsCIMCharacterMarker.anchorPointUnits = dotNetObject.anchorPointUnits;
    }
    if (hasValue(dotNetObject.angleX)) {
        jsCIMCharacterMarker.angleX = dotNetObject.angleX;
    }
    if (hasValue(dotNetObject.angleY)) {
        jsCIMCharacterMarker.angleY = dotNetObject.angleY;
    }
    if (hasValue(dotNetObject.billboardMode3D)) {
        jsCIMCharacterMarker.billboardMode3D = dotNetObject.billboardMode3D;
    }
    if (hasValue(dotNetObject.characterIndex)) {
        jsCIMCharacterMarker.characterIndex = dotNetObject.characterIndex;
    }
    if (hasValue(dotNetObject.colorLocked)) {
        jsCIMCharacterMarker.colorLocked = dotNetObject.colorLocked;
    }
    if (hasValue(dotNetObject.depth3D)) {
        jsCIMCharacterMarker.depth3D = dotNetObject.depth3D;
    }
    if (hasValue(dotNetObject.dominantSizeAxis3D)) {
        jsCIMCharacterMarker.dominantSizeAxis3D = dotNetObject.dominantSizeAxis3D;
    }
    if (hasValue(dotNetObject.effects)) {
        jsCIMCharacterMarker.effects = dotNetObject.effects;
    }
    if (hasValue(dotNetObject.enable)) {
        jsCIMCharacterMarker.enable = dotNetObject.enable;
    }
    if (hasValue(dotNetObject.fontFamilyName)) {
        jsCIMCharacterMarker.fontFamilyName = dotNetObject.fontFamilyName;
    }
    if (hasValue(dotNetObject.fontStyleName)) {
        jsCIMCharacterMarker.fontStyleName = dotNetObject.fontStyleName;
    }
    if (hasValue(dotNetObject.fontType)) {
        jsCIMCharacterMarker.fontType = dotNetObject.fontType;
    }
    if (hasValue(dotNetObject.markerPlacement)) {
        jsCIMCharacterMarker.markerPlacement = dotNetObject.markerPlacement;
    }
    if (hasValue(dotNetObject.name)) {
        jsCIMCharacterMarker.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.offsetX)) {
        jsCIMCharacterMarker.offsetX = dotNetObject.offsetX;
    }
    if (hasValue(dotNetObject.offsetY)) {
        jsCIMCharacterMarker.offsetY = dotNetObject.offsetY;
    }
    if (hasValue(dotNetObject.offsetZ)) {
        jsCIMCharacterMarker.offsetZ = dotNetObject.offsetZ;
    }
    if (hasValue(dotNetObject.overprint)) {
        jsCIMCharacterMarker.overprint = dotNetObject.overprint;
    }
    if (hasValue(dotNetObject.primitiveName)) {
        jsCIMCharacterMarker.primitiveName = dotNetObject.primitiveName;
    }
    if (hasValue(dotNetObject.respectFrame)) {
        jsCIMCharacterMarker.respectFrame = dotNetObject.respectFrame;
    }
    if (hasValue(dotNetObject.rotateClockwise)) {
        jsCIMCharacterMarker.rotateClockwise = dotNetObject.rotateClockwise;
    }
    if (hasValue(dotNetObject.rotation)) {
        jsCIMCharacterMarker.rotation = dotNetObject.rotation;
    }
    if (hasValue(dotNetObject.scaleSymbolsProportionally)) {
        jsCIMCharacterMarker.scaleSymbolsProportionally = dotNetObject.scaleSymbolsProportionally;
    }
    if (hasValue(dotNetObject.scaleX)) {
        jsCIMCharacterMarker.scaleX = dotNetObject.scaleX;
    }
    if (hasValue(dotNetObject.size)) {
        jsCIMCharacterMarker.size = dotNetObject.size;
    }
    if (hasValue(dotNetObject.verticalOrientation3D)) {
        jsCIMCharacterMarker.verticalOrientation3D = dotNetObject.verticalOrientation3D;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsCIMCharacterMarker);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCIMCharacterMarker;
    
    let dnInstantiatedObject = await buildDotNetCIMCharacterMarker(jsCIMCharacterMarker);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CIMCharacterMarker', e);
    }
    
    return jsCIMCharacterMarker;
}

export async function buildDotNetCIMCharacterMarkerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCIMCharacterMarker: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.symbol)) {
            let { buildDotNetCIMPolygonSymbol } = await import('./cIMPolygonSymbol');
            dotNetCIMCharacterMarker.symbol = await buildDotNetCIMPolygonSymbol(jsObject.symbol);
        }
    if (hasValue(jsObject.anchorPoint)) {
        dotNetCIMCharacterMarker.anchorPoint = jsObject.anchorPoint;
    }
    if (hasValue(jsObject.anchorPointUnits)) {
        dotNetCIMCharacterMarker.anchorPointUnits = jsObject.anchorPointUnits;
    }
    if (hasValue(jsObject.angleX)) {
        dotNetCIMCharacterMarker.angleX = jsObject.angleX;
    }
    if (hasValue(jsObject.angleY)) {
        dotNetCIMCharacterMarker.angleY = jsObject.angleY;
    }
    if (hasValue(jsObject.billboardMode3D)) {
        dotNetCIMCharacterMarker.billboardMode3D = jsObject.billboardMode3D;
    }
    if (hasValue(jsObject.characterIndex)) {
        dotNetCIMCharacterMarker.characterIndex = jsObject.characterIndex;
    }
    if (hasValue(jsObject.colorLocked)) {
        dotNetCIMCharacterMarker.colorLocked = jsObject.colorLocked;
    }
    if (hasValue(jsObject.depth3D)) {
        dotNetCIMCharacterMarker.depth3D = jsObject.depth3D;
    }
    if (hasValue(jsObject.dominantSizeAxis3D)) {
        dotNetCIMCharacterMarker.dominantSizeAxis3D = jsObject.dominantSizeAxis3D;
    }
    if (hasValue(jsObject.effects)) {
        dotNetCIMCharacterMarker.effects = jsObject.effects;
    }
    if (hasValue(jsObject.enable)) {
        dotNetCIMCharacterMarker.enable = jsObject.enable;
    }
    if (hasValue(jsObject.fontFamilyName)) {
        dotNetCIMCharacterMarker.fontFamilyName = jsObject.fontFamilyName;
    }
    if (hasValue(jsObject.fontStyleName)) {
        dotNetCIMCharacterMarker.fontStyleName = jsObject.fontStyleName;
    }
    if (hasValue(jsObject.fontType)) {
        dotNetCIMCharacterMarker.fontType = jsObject.fontType;
    }
    if (hasValue(jsObject.markerPlacement)) {
        dotNetCIMCharacterMarker.markerPlacement = jsObject.markerPlacement;
    }
    if (hasValue(jsObject.name)) {
        dotNetCIMCharacterMarker.name = jsObject.name;
    }
    if (hasValue(jsObject.offsetX)) {
        dotNetCIMCharacterMarker.offsetX = jsObject.offsetX;
    }
    if (hasValue(jsObject.offsetY)) {
        dotNetCIMCharacterMarker.offsetY = jsObject.offsetY;
    }
    if (hasValue(jsObject.offsetZ)) {
        dotNetCIMCharacterMarker.offsetZ = jsObject.offsetZ;
    }
    if (hasValue(jsObject.overprint)) {
        dotNetCIMCharacterMarker.overprint = jsObject.overprint;
    }
    if (hasValue(jsObject.primitiveName)) {
        dotNetCIMCharacterMarker.primitiveName = jsObject.primitiveName;
    }
    if (hasValue(jsObject.respectFrame)) {
        dotNetCIMCharacterMarker.respectFrame = jsObject.respectFrame;
    }
    if (hasValue(jsObject.rotateClockwise)) {
        dotNetCIMCharacterMarker.rotateClockwise = jsObject.rotateClockwise;
    }
    if (hasValue(jsObject.rotation)) {
        dotNetCIMCharacterMarker.rotation = jsObject.rotation;
    }
    if (hasValue(jsObject.scaleSymbolsProportionally)) {
        dotNetCIMCharacterMarker.scaleSymbolsProportionally = jsObject.scaleSymbolsProportionally;
    }
    if (hasValue(jsObject.scaleX)) {
        dotNetCIMCharacterMarker.scaleX = jsObject.scaleX;
    }
    if (hasValue(jsObject.size)) {
        dotNetCIMCharacterMarker.size = jsObject.size;
    }
    if (hasValue(jsObject.type)) {
        dotNetCIMCharacterMarker.type = jsObject.type;
    }
    if (hasValue(jsObject.verticalOrientation3D)) {
        dotNetCIMCharacterMarker.verticalOrientation3D = jsObject.verticalOrientation3D;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCIMCharacterMarker.id = k;
                break;
            }
        }
    }

    return dotNetCIMCharacterMarker;
}

