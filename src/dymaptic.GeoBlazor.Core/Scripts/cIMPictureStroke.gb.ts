// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetCIMPictureStroke } from './cIMPictureStroke';

export async function buildJsCIMPictureStrokeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCIMPictureStroke: any = {};

    if (hasValue(dotNetObject.capStyle)) {
        jsCIMPictureStroke.capStyle = dotNetObject.capStyle;
    }
    if (hasValue(dotNetObject.closeCaps3D)) {
        jsCIMPictureStroke.closeCaps3D = dotNetObject.closeCaps3D;
    }
    if (hasValue(dotNetObject.colorLocked)) {
        jsCIMPictureStroke.colorLocked = dotNetObject.colorLocked;
    }
    if (hasValue(dotNetObject.colorSubstitutions)) {
        const { id, dotNetComponentReference, ...sanitizedColorSubstitutions } = dotNetObject.colorSubstitutions;
        jsCIMPictureStroke.colorSubstitutions = sanitizedColorSubstitutions;
    }
    if (hasValue(dotNetObject.effects)) {
        const { id, dotNetComponentReference, ...sanitizedEffects } = dotNetObject.effects;
        jsCIMPictureStroke.effects = sanitizedEffects;
    }
    if (hasValue(dotNetObject.enable)) {
        jsCIMPictureStroke.enable = dotNetObject.enable;
    }
    if (hasValue(dotNetObject.joinStyle)) {
        jsCIMPictureStroke.joinStyle = dotNetObject.joinStyle;
    }
    if (hasValue(dotNetObject.lineStyle3D)) {
        jsCIMPictureStroke.lineStyle3D = dotNetObject.lineStyle3D;
    }
    if (hasValue(dotNetObject.miterLimit)) {
        jsCIMPictureStroke.miterLimit = dotNetObject.miterLimit;
    }
    if (hasValue(dotNetObject.name)) {
        jsCIMPictureStroke.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.overprint)) {
        jsCIMPictureStroke.overprint = dotNetObject.overprint;
    }
    if (hasValue(dotNetObject.primitiveName)) {
        jsCIMPictureStroke.primitiveName = dotNetObject.primitiveName;
    }
    if (hasValue(dotNetObject.textureFilter)) {
        jsCIMPictureStroke.textureFilter = dotNetObject.textureFilter;
    }
    if (hasValue(dotNetObject.tintColor)) {
        jsCIMPictureStroke.tintColor = dotNetObject.tintColor;
    }
    if (hasValue(dotNetObject.url)) {
        jsCIMPictureStroke.url = dotNetObject.url;
    }
    if (hasValue(dotNetObject.width)) {
        jsCIMPictureStroke.width = dotNetObject.width;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCIMPictureStroke);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCIMPictureStroke;
    
    let { buildDotNetCIMPictureStroke } = await import('./cIMPictureStroke');
    let dnInstantiatedObject = await buildDotNetCIMPictureStroke(jsCIMPictureStroke);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type CIMPictureStroke detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CIMPictureStroke', e);
    }
    
    return jsCIMPictureStroke;
}


export async function buildDotNetCIMPictureStrokeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCIMPictureStroke: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.capStyle)) {
        dotNetCIMPictureStroke.capStyle = jsObject.capStyle;
    }
    if (hasValue(jsObject.closeCaps3D)) {
        dotNetCIMPictureStroke.closeCaps3D = jsObject.closeCaps3D;
    }
    if (hasValue(jsObject.colorLocked)) {
        dotNetCIMPictureStroke.colorLocked = jsObject.colorLocked;
    }
    if (hasValue(jsObject.colorSubstitutions)) {
        dotNetCIMPictureStroke.colorSubstitutions = jsObject.colorSubstitutions;
    }
    if (hasValue(jsObject.effects)) {
        dotNetCIMPictureStroke.effects = jsObject.effects;
    }
    if (hasValue(jsObject.enable)) {
        dotNetCIMPictureStroke.enable = jsObject.enable;
    }
    if (hasValue(jsObject.joinStyle)) {
        dotNetCIMPictureStroke.joinStyle = jsObject.joinStyle;
    }
    if (hasValue(jsObject.lineStyle3D)) {
        dotNetCIMPictureStroke.lineStyle3D = jsObject.lineStyle3D;
    }
    if (hasValue(jsObject.miterLimit)) {
        dotNetCIMPictureStroke.miterLimit = jsObject.miterLimit;
    }
    if (hasValue(jsObject.name)) {
        dotNetCIMPictureStroke.name = jsObject.name;
    }
    if (hasValue(jsObject.overprint)) {
        dotNetCIMPictureStroke.overprint = jsObject.overprint;
    }
    if (hasValue(jsObject.primitiveName)) {
        dotNetCIMPictureStroke.primitiveName = jsObject.primitiveName;
    }
    if (hasValue(jsObject.textureFilter)) {
        dotNetCIMPictureStroke.textureFilter = jsObject.textureFilter;
    }
    if (hasValue(jsObject.tintColor)) {
        dotNetCIMPictureStroke.tintColor = jsObject.tintColor;
    }
    if (hasValue(jsObject.type)) {
        dotNetCIMPictureStroke.type = jsObject.type;
    }
    if (hasValue(jsObject.url)) {
        dotNetCIMPictureStroke.url = jsObject.url;
    }
    if (hasValue(jsObject.width)) {
        dotNetCIMPictureStroke.width = jsObject.width;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCIMPictureStroke.id = k;
                break;
            }
        }
    }

    return dotNetCIMPictureStroke;
}

