// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetSupportingWidgetDefaultsFeatureTemplates } from './supportingWidgetDefaultsFeatureTemplates';

export async function buildJsSupportingWidgetDefaultsFeatureTemplatesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSupportingWidgetDefaultsFeatureTemplates: any = {};
    if (hasValue(dotNetObject.visibleElements)) {
        let { buildJsSupportingWidgetDefaultsFeatureTemplatesVisibleElements } = await import('./supportingWidgetDefaultsFeatureTemplatesVisibleElements');
        jsSupportingWidgetDefaultsFeatureTemplates.visibleElements = await buildJsSupportingWidgetDefaultsFeatureTemplatesVisibleElements(dotNetObject.visibleElements, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.enableListScroll)) {
        jsSupportingWidgetDefaultsFeatureTemplates.enableListScroll = dotNetObject.enableListScroll;
    }
    if (hasValue(dotNetObject.groupBy)) {
        jsSupportingWidgetDefaultsFeatureTemplates.groupBy = dotNetObject.groupBy;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSupportingWidgetDefaultsFeatureTemplates);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSupportingWidgetDefaultsFeatureTemplates;
    
    let { buildDotNetSupportingWidgetDefaultsFeatureTemplates } = await import('./supportingWidgetDefaultsFeatureTemplates');
    let dnInstantiatedObject = await buildDotNetSupportingWidgetDefaultsFeatureTemplates(jsSupportingWidgetDefaultsFeatureTemplates, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type SupportingWidgetDefaultsFeatureTemplates detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SupportingWidgetDefaultsFeatureTemplates', e);
    }
    
    return jsSupportingWidgetDefaultsFeatureTemplates;
}


export async function buildDotNetSupportingWidgetDefaultsFeatureTemplatesGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsSupportingWidgetDefaultsFeatureTemplates } = await import('./supportingWidgetDefaultsFeatureTemplates');
        jsComponentRef = await buildJsSupportingWidgetDefaultsFeatureTemplates(jsObject, layerId, viewId);
    }
    
    let dotNetSupportingWidgetDefaultsFeatureTemplates: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.visibleElements)) {
        let { buildDotNetSupportingWidgetDefaultsFeatureTemplatesVisibleElements } = await import('./supportingWidgetDefaultsFeatureTemplatesVisibleElements');
        dotNetSupportingWidgetDefaultsFeatureTemplates.visibleElements = await buildDotNetSupportingWidgetDefaultsFeatureTemplatesVisibleElements(jsObject.visibleElements, layerId, viewId);
    }
    if (hasValue(jsObject.enableListScroll)) {
        dotNetSupportingWidgetDefaultsFeatureTemplates.enableListScroll = jsObject.enableListScroll;
    }
    if (hasValue(jsObject.groupBy)) {
        dotNetSupportingWidgetDefaultsFeatureTemplates.groupBy = jsObject.groupBy;
    }


    if (hasValue(geoBlazorId)) {
        dotNetSupportingWidgetDefaultsFeatureTemplates.id = geoBlazorId;
    }

    return dotNetSupportingWidgetDefaultsFeatureTemplates;
}

