// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import ImageryTileLayer from '@arcgis/core/layers/ImageryTileLayer';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ImageryTileLayerGenerated implements IPropertyWrapper {
    public layer: ImageryTileLayer;
    public readonly geoBlazorId: string = '';

    constructor(layer: ImageryTileLayer) {
        this.layer = layer;
        // set all properties from layer
        for (let prop in layer) {
            if (layer.hasOwnProperty(prop)) {
                this[prop] = layer[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    async computeStatisticsHistograms(parameters: any,
        requestOptions: any): Promise<any> {
        return await this.layer.computeStatisticsHistograms(parameters,
            requestOptions);
    }

    async createLayerView(view: any,
        options: any): Promise<any> {
        let result = await this.layer.createLayerView(view,
            options);
        let { buildDotNetLayerView } = await import('./layerView');
        return buildDotNetLayerView(result);
    }

    async createPopupTemplate(options: any): Promise<any> {
        let result = this.layer.createPopupTemplate(options);
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        return buildDotNetPopupTemplate(result);
    }

    async fetchAttributionData(): Promise<any> {
        return await this.layer.fetchAttributionData();
    }

    async fetchPixels(extent: any,
        width: any,
        height: any,
        options: any): Promise<any> {
        let result = await this.layer.fetchPixels(extent,
            width,
            height,
            options);
        let { buildDotNetPixelData } = await import('./pixelData');
        return buildDotNetPixelData(result);
    }

    async fetchTile(level: any,
        row: any,
        col: any,
        options: any): Promise<any> {
        return await this.layer.fetchTile(level,
            row,
            col,
            options);
    }

    async identify(point: any,
        options: any): Promise<any> {
        return await this.layer.identify(point,
            options);
    }

    async save(options: any): Promise<any> {
        let result = await this.layer.save(options);
        let { buildDotNetPortalItem } = await import('./portalItem');
        return buildDotNetPortalItem(result);
    }

    async saveAs(portalItem: any,
        options: any): Promise<any> {
        let { buildJsPortalItem } = await import('./portalItem');
        let jsPortalItem = await buildJsPortalItem(portalItem) as any;
        let result = await this.layer.saveAs(jsPortalItem,
            options);
        let { buildDotNetPortalItem } = await import('./portalItem');
        return buildDotNetPortalItem(result);
    }

    // region properties
    
    async getMultidimensionalDefinition(): Promise<any> {
        let { buildDotNetDimensionalDefinition } = await import('./dimensionalDefinition');
        return this.layer.multidimensionalDefinition.map(async i => await buildDotNetDimensionalDefinition(i));
    }
    
    async setMultidimensionalDefinition(value: any): Promise<void> {
        let { buildJsDimensionalDefinition } = await import('./dimensionalDefinition');
        this.layer.multidimensionalDefinition = value.map(async i => await buildJsDimensionalDefinition(i));
    }
    
    async getMultidimensionalSubset(): Promise<any> {
        let { buildDotNetMultidimensionalSubset } = await import('./multidimensionalSubset');
        return await buildDotNetMultidimensionalSubset(this.layer.multidimensionalSubset);
    }
    async setMultidimensionalSubset(value: any): Promise<void> {
        let { buildJsMultidimensionalSubset } = await import('./multidimensionalSubset');
        this.layer.multidimensionalSubset = await buildJsMultidimensionalSubset(value);
    }
    async getPopupTemplate(layerId: string, viewId: string): Promise<any> {
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        return await buildDotNetPopupTemplate(this.layer.popupTemplate, layerId, viewId);
    }
    async setPopupTemplate(value: any, layerId: string, viewId: string): Promise<void> {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        this.layer.popupTemplate = await buildJsPopupTemplate(value, layerId, viewId);
    }
    async getPortalItem(): Promise<any> {
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(this.layer.portalItem);
    }
    async setPortalItem(value: any): Promise<void> {
        let { buildJsPortalItem } = await import('./portalItem');
        this.layer.portalItem = await buildJsPortalItem(value);
    }
    async getRasterFields(): Promise<any> {
        let { buildDotNetField } = await import('./field');
        return this.layer.rasterFields.map(async i => await buildDotNetField(i));
    }
    
    async getRasterFunction(): Promise<any> {
        let { buildDotNetRasterFunction } = await import('./rasterFunction');
        return await buildDotNetRasterFunction(this.layer.rasterFunction);
    }
    async setRasterFunction(value: any): Promise<void> {
        let { buildJsRasterFunction } = await import('./rasterFunction');
        this.layer.rasterFunction = await buildJsRasterFunction(value);
    }
    async getTileInfo(): Promise<any> {
        let { buildDotNetTileInfo } = await import('./tileInfo');
        return await buildDotNetTileInfo(this.layer.tileInfo);
    }
    async setTileInfo(value: any): Promise<void> {
        let { buildJsTileInfo } = await import('./tileInfo');
        this.layer.tileInfo = await buildJsTileInfo(value);
    }
    async getTimeExtent(): Promise<any> {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return await buildDotNetTimeExtent(this.layer.timeExtent);
    }
    async setTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.timeExtent = await buildJsTimeExtent(value);
    }
    async getTimeInfo(): Promise<any> {
        let { buildDotNetTimeInfo } = await import('./timeInfo');
        return await buildDotNetTimeInfo(this.layer.timeInfo);
    }
    async setTimeInfo(value: any): Promise<void> {
        let { buildJsTimeInfo } = await import('./timeInfo');
        this.layer.timeInfo = await buildJsTimeInfo(value);
    }
    async getTimeOffset(): Promise<any> {
        let { buildDotNetTimeInterval } = await import('./timeInterval');
        return await buildDotNetTimeInterval(this.layer.timeOffset);
    }
    async setTimeOffset(value: any): Promise<void> {
        let { buildJsTimeInterval } = await import('./timeInterval');
        this.layer.timeOffset = await buildJsTimeInterval(value);
    }
    async getVisibilityTimeExtent(): Promise<any> {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return await buildDotNetTimeExtent(this.layer.visibilityTimeExtent);
    }
    async setVisibilityTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.visibilityTimeExtent = await buildJsTimeExtent(value);
    }
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}
export async function buildJsImageryTileLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let { default: ImageryTileLayer } = await import('@arcgis/core/layers/ImageryTileLayer');
    let jsImageryTileLayer = new ImageryTileLayer();
    if (hasValue(dotNetObject.fullExtent)) {
        let { buildJsExtent } = await import('extent');
        jsImageryTileLayer.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;

    }
    if (hasValue(dotNetObject.multidimensionalDefinition)) {
        let { buildJsDimensionalDefinition } = await import('dimensionalDefinition');
        jsImageryTileLayer.multidimensionalDefinition = dotNetObject.multidimensionalDefinition.map(i => buildJsDimensionalDefinition(i)) as any;

    }
    if (hasValue(dotNetObject.multidimensionalSubset)) {
        let { buildJsMultidimensionalSubset } = await import('multidimensionalSubset');
        jsImageryTileLayer.multidimensionalSubset = buildJsMultidimensionalSubset(dotNetObject.multidimensionalSubset) as any;

    }
    if (hasValue(dotNetObject.popupTemplate)) {
        let { buildJsPopupTemplate } = await import('popupTemplate');
        jsImageryTileLayer.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, layerId, viewId) as any;

    }
    if (hasValue(dotNetObject.portalItem)) {
        let { buildJsPortalItem } = await import('portalItem');
        jsImageryTileLayer.portalItem = buildJsPortalItem(dotNetObject.portalItem) as any;

    }
    if (hasValue(dotNetObject.rasterFunction)) {
        let { buildJsRasterFunction } = await import('rasterFunction');
        jsImageryTileLayer.rasterFunction = await buildJsRasterFunction(dotNetObject.rasterFunction) as any;

    }
    if (hasValue(dotNetObject.tileInfo)) {
        let { buildJsTileInfo } = await import('tileInfo');
        jsImageryTileLayer.tileInfo = await buildJsTileInfo(dotNetObject.tileInfo) as any;

    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('timeExtent');
        jsImageryTileLayer.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent) as any;

    }
    if (hasValue(dotNetObject.timeInfo)) {
        let { buildJsTimeInfo } = await import('timeInfo');
        jsImageryTileLayer.timeInfo = await buildJsTimeInfo(dotNetObject.timeInfo) as any;

    }
    if (hasValue(dotNetObject.timeOffset)) {
        let { buildJsTimeInterval } = await import('timeInterval');
        jsImageryTileLayer.timeOffset = await buildJsTimeInterval(dotNetObject.timeOffset) as any;

    }
    if (hasValue(dotNetObject.visibilityTimeExtent)) {
        let { buildJsTimeExtent } = await import('timeExtent');
        jsImageryTileLayer.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent) as any;

    }
    if (hasValue(dotNetObject.arcGISLayerId)) {
        jsImageryTileLayer.id = dotNetObject.arcGISLayerId;
    }
    if (hasValue(dotNetObject.bandIds)) {
        jsImageryTileLayer.bandIds = dotNetObject.bandIds;
    }
    if (hasValue(dotNetObject.blendMode)) {
        jsImageryTileLayer.blendMode = dotNetObject.blendMode;
    }
    if (hasValue(dotNetObject.copyright)) {
        jsImageryTileLayer.copyright = dotNetObject.copyright;
    }
    if (hasValue(dotNetObject.customParameters)) {
        jsImageryTileLayer.customParameters = dotNetObject.customParameters;
    }
    if (hasValue(dotNetObject.effect)) {
        jsImageryTileLayer.effect = dotNetObject.effect;
    }
    if (hasValue(dotNetObject.interpolation)) {
        jsImageryTileLayer.interpolation = dotNetObject.interpolation;
    }
    if (hasValue(dotNetObject.legendEnabled)) {
        jsImageryTileLayer.legendEnabled = dotNetObject.legendEnabled;
    }
    if (hasValue(dotNetObject.listMode)) {
        jsImageryTileLayer.listMode = dotNetObject.listMode;
    }
    if (hasValue(dotNetObject.maxScale)) {
        jsImageryTileLayer.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.minScale)) {
        jsImageryTileLayer.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.opacity)) {
        jsImageryTileLayer.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.persistenceEnabled)) {
        jsImageryTileLayer.persistenceEnabled = dotNetObject.persistenceEnabled;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        jsImageryTileLayer.popupEnabled = dotNetObject.popupEnabled;
    }
    if (hasValue(dotNetObject.renderer)) {
        jsImageryTileLayer.renderer = dotNetObject.renderer;
    }
    if (hasValue(dotNetObject.source)) {
        jsImageryTileLayer.source = dotNetObject.source;
    }
    if (hasValue(dotNetObject.title)) {
        jsImageryTileLayer.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.url)) {
        jsImageryTileLayer.url = dotNetObject.url;
    }
    if (hasValue(dotNetObject.useViewTime)) {
        jsImageryTileLayer.useViewTime = dotNetObject.useViewTime;
    }
    let { default: ImageryTileLayerWrapper } = await import('./imageryTileLayer');
    let imageryTileLayerWrapper = new ImageryTileLayerWrapper(jsImageryTileLayer);
    jsImageryTileLayer.id = dotNetObject.id;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(imageryTileLayerWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = imageryTileLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsImageryTileLayer;
    
    return jsImageryTileLayer;
}

export async function buildDotNetImageryTileLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageryTileLayer: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.fullExtent)) {
            let { buildDotNetExtent } = await import('./dotNetBuilder');
            dotNetImageryTileLayer.fullExtent = await buildDotNetExtent(jsObject.fullExtent);
        }
        if (hasValue(jsObject.multidimensionalDefinition)) {
            let { buildDotNetDimensionalDefinition } = await import('./dimensionalDefinition');
            dotNetImageryTileLayer.multidimensionalDefinition = jsObject.multidimensionalDefinition.map(async i => await buildDotNetDimensionalDefinition(i));
        }
        if (hasValue(jsObject.multidimensionalSubset)) {
            let { buildDotNetMultidimensionalSubset } = await import('./multidimensionalSubset');
            dotNetImageryTileLayer.multidimensionalSubset = await buildDotNetMultidimensionalSubset(jsObject.multidimensionalSubset);
        }
        if (hasValue(jsObject.popupTemplate)) {
            let { buildDotNetPopupTemplate } = await import('./dotNetBuilder');
            dotNetImageryTileLayer.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
        }
        if (hasValue(jsObject.portalItem)) {
            let { buildDotNetPortalItem } = await import('./dotNetBuilder');
            dotNetImageryTileLayer.portalItem = await buildDotNetPortalItem(jsObject.portalItem);
        }
        if (hasValue(jsObject.rasterFields)) {
            let { buildDotNetField } = await import('./field');
            dotNetImageryTileLayer.rasterFields = jsObject.rasterFields.map(async i => await buildDotNetField(i));
        }
        if (hasValue(jsObject.rasterFunction)) {
            let { buildDotNetRasterFunction } = await import('./rasterFunction');
            dotNetImageryTileLayer.rasterFunction = await buildDotNetRasterFunction(jsObject.rasterFunction);
        }
        if (hasValue(jsObject.tileInfo)) {
            let { buildDotNetTileInfo } = await import('./dotNetBuilder');
            dotNetImageryTileLayer.tileInfo = await buildDotNetTileInfo(jsObject.tileInfo);
        }
        if (hasValue(jsObject.timeExtent)) {
            let { buildDotNetTimeExtent } = await import('./dotNetBuilder');
            dotNetImageryTileLayer.timeExtent = await buildDotNetTimeExtent(jsObject.timeExtent);
        }
        if (hasValue(jsObject.timeInfo)) {
            let { buildDotNetTimeInfo } = await import('./dotNetBuilder');
            dotNetImageryTileLayer.timeInfo = await buildDotNetTimeInfo(jsObject.timeInfo);
        }
        if (hasValue(jsObject.timeOffset)) {
            let { buildDotNetTimeInterval } = await import('./dotNetBuilder');
            dotNetImageryTileLayer.timeOffset = await buildDotNetTimeInterval(jsObject.timeOffset);
        }
        if (hasValue(jsObject.visibilityTimeExtent)) {
            let { buildDotNetTimeExtent } = await import('./dotNetBuilder');
            dotNetImageryTileLayer.visibilityTimeExtent = await buildDotNetTimeExtent(jsObject.visibilityTimeExtent);
        }
        dotNetImageryTileLayer.arcGISLayerId = jsObject.id;
        dotNetImageryTileLayer.bandIds = jsObject.bandIds;
        dotNetImageryTileLayer.blendMode = jsObject.blendMode;
        dotNetImageryTileLayer.copyright = jsObject.copyright;
        dotNetImageryTileLayer.customParameters = jsObject.customParameters;
        dotNetImageryTileLayer.effect = jsObject.effect;
        dotNetImageryTileLayer.interpolation = jsObject.interpolation;
        dotNetImageryTileLayer.legendEnabled = jsObject.legendEnabled;
        dotNetImageryTileLayer.listMode = jsObject.listMode;
        dotNetImageryTileLayer.loaded = jsObject.loaded;
        dotNetImageryTileLayer.maxScale = jsObject.maxScale;
        dotNetImageryTileLayer.minScale = jsObject.minScale;
        dotNetImageryTileLayer.opacity = jsObject.opacity;
        dotNetImageryTileLayer.persistenceEnabled = jsObject.persistenceEnabled;
        dotNetImageryTileLayer.popupEnabled = jsObject.popupEnabled;
        dotNetImageryTileLayer.rasterInfo = jsObject.rasterInfo;
        dotNetImageryTileLayer.renderer = jsObject.renderer;
        dotNetImageryTileLayer.serviceRasterInfo = jsObject.serviceRasterInfo;
        dotNetImageryTileLayer.source = jsObject.source;
        dotNetImageryTileLayer.sourceJSON = jsObject.sourceJSON;
        dotNetImageryTileLayer.title = jsObject.title;
        dotNetImageryTileLayer.type = jsObject.type;
        dotNetImageryTileLayer.url = jsObject.url;
        dotNetImageryTileLayer.useViewTime = jsObject.useViewTime;
        dotNetImageryTileLayer.version = jsObject.version;
    return dotNetImageryTileLayer;
}

