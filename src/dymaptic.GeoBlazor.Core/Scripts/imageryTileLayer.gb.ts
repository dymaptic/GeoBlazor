// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageryTileLayer from '@arcgis/core/layers/ImageryTileLayer';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, buildJsStreamReference, generateSerializableJson } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ImageryTileLayerGenerated implements IPropertyWrapper {
    public layer: ImageryTileLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: ImageryTileLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.effect)) {
            let { buildJsEffect } = await import('./effect');
            this.layer.effect = buildJsEffect(dotNetObject.effect) as any;
        }
        if (hasValue(dotNetObject.fullExtent)) {
            let { buildJsExtent } = await import('./extent');
            this.layer.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;
        }
        if (hasValue(dotNetObject.multidimensionalDefinition) && dotNetObject.multidimensionalDefinition.length > 0) {
            let { buildJsDimensionalDefinition } = await import('./dimensionalDefinition');
            this.layer.multidimensionalDefinition = await Promise.all(dotNetObject.multidimensionalDefinition.map(async i => await buildJsDimensionalDefinition(i, this.viewId))) as any;
        }
        if (hasValue(dotNetObject.multidimensionalSubset)) {
            let { buildJsMultidimensionalSubset } = await import('./multidimensionalSubset');
            this.layer.multidimensionalSubset = await buildJsMultidimensionalSubset(dotNetObject.multidimensionalSubset, this.viewId) as any;
        }
        if (hasValue(dotNetObject.popupTemplate)) {
            let { buildJsPopupTemplate } = await import('./popupTemplate');
            this.layer.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.portalItem)) {
            let { buildJsPortalItem } = await import('./portalItem');
            this.layer.portalItem = await buildJsPortalItem(dotNetObject.portalItem, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.presetRenderers) && dotNetObject.presetRenderers.length > 0) {
            let { buildJsRasterPresetRenderer } = await import('./rasterPresetRenderer');
            this.layer.presetRenderers = await Promise.all(dotNetObject.presetRenderers.map(async i => await buildJsRasterPresetRenderer(i, this.layerId, this.viewId))) as any;
        }
        if (hasValue(dotNetObject.rasterFunction)) {
            let { buildJsRasterFunction } = await import('./rasterFunction');
            this.layer.rasterFunction = await buildJsRasterFunction(dotNetObject.rasterFunction) as any;
        }
        if (hasValue(dotNetObject.tileInfo)) {
            let { buildJsTileInfo } = await import('./tileInfo');
            this.layer.tileInfo = await buildJsTileInfo(dotNetObject.tileInfo, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.timeExtent)) {
            let { buildJsTimeExtent } = await import('./timeExtent');
            this.layer.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent) as any;
        }
        if (hasValue(dotNetObject.timeInfo)) {
            let { buildJsTimeInfo } = await import('./timeInfo');
            this.layer.timeInfo = await buildJsTimeInfo(dotNetObject.timeInfo) as any;
        }
        if (hasValue(dotNetObject.timeOffset)) {
            let { buildJsTimeInterval } = await import('./timeInterval');
            this.layer.timeOffset = await buildJsTimeInterval(dotNetObject.timeOffset) as any;
        }
        if (hasValue(dotNetObject.visibilityTimeExtent)) {
            let { buildJsTimeExtent } = await import('./timeExtent');
            this.layer.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent) as any;
        }

        if (hasValue(dotNetObject.activePresetRendererName)) {
            this.layer.activePresetRendererName = dotNetObject.activePresetRendererName;
        }
        if (hasValue(dotNetObject.arcGISLayerId)) {
            this.layer.id = dotNetObject.arcGISLayerId;
        }
        if (hasValue(dotNetObject.bandIds) && dotNetObject.bandIds.length > 0) {
            this.layer.bandIds = dotNetObject.bandIds;
        }
        if (hasValue(dotNetObject.blendMode)) {
            this.layer.blendMode = dotNetObject.blendMode;
        }
        if (hasValue(dotNetObject.copyright)) {
            this.layer.copyright = dotNetObject.copyright;
        }
        if (hasValue(dotNetObject.customParameters)) {
            this.layer.customParameters = dotNetObject.customParameters;
        }
        if (hasValue(dotNetObject.interpolation)) {
            this.layer.interpolation = dotNetObject.interpolation;
        }
        if (hasValue(dotNetObject.legendEnabled)) {
            this.layer.legendEnabled = dotNetObject.legendEnabled;
        }
        if (hasValue(dotNetObject.listMode)) {
            this.layer.listMode = dotNetObject.listMode;
        }
        if (hasValue(dotNetObject.maxScale)) {
            this.layer.maxScale = dotNetObject.maxScale;
        }
        if (hasValue(dotNetObject.minScale)) {
            this.layer.minScale = dotNetObject.minScale;
        }
        if (hasValue(dotNetObject.opacity)) {
            this.layer.opacity = dotNetObject.opacity;
        }
        if (hasValue(dotNetObject.persistenceEnabled)) {
            this.layer.persistenceEnabled = dotNetObject.persistenceEnabled;
        }
        if (hasValue(dotNetObject.popupEnabled)) {
            this.layer.popupEnabled = dotNetObject.popupEnabled;
        }
        if (hasValue(dotNetObject.source)) {
            this.layer.source = dotNetObject.source;
        }
        if (hasValue(dotNetObject.title)) {
            this.layer.title = dotNetObject.title;
        }
        if (hasValue(dotNetObject.url)) {
            this.layer.url = dotNetObject.url;
        }
        if (hasValue(dotNetObject.useViewTime)) {
            this.layer.useViewTime = dotNetObject.useViewTime;
        }
        if (hasValue(dotNetObject.visible)) {
            this.layer.visible = dotNetObject.visible;
        }
    }
    
    async cancelLoad(): Promise<void> {
        this.layer.cancelLoad();
    }

    async computeStatisticsHistograms(parameters: any,
        requestOptions: any): Promise<any> {
        let result = await this.layer.computeStatisticsHistograms(parameters,
            requestOptions);
        
        return generateSerializableJson(result);
    }

    async createLayerView(view: any,
        options: any): Promise<any> {
        return await this.layer.createLayerView(view,
            options);
    }

    async createPopupTemplate(options: any): Promise<any> {
        return this.layer.createPopupTemplate(options);
    }

    async fetchAttributionData(): Promise<any> {
        let result = await this.layer.fetchAttributionData();
        
        return generateSerializableJson(result);
    }

    async fetchPixels(extent: any,
        width: any,
        height: any,
        options: any): Promise<any> {
        let { buildJsExtent } = await import('./extent');
        let jsExtent = buildJsExtent(extent) as any;
        return await this.layer.fetchPixels(jsExtent,
            width,
            height,
            options);
    }

    async fetchTile(level: any,
        row: any,
        col: any,
        options: any): Promise<any> {
        let result = await this.layer.fetchTile(level,
            row,
            col,
            options);
        
        return generateSerializableJson(result);
    }

    async generateRasterInfo(rasterFunction: any,
        options: any): Promise<any> {
        let { buildJsRasterFunction } = await import('./rasterFunction');
        let jsRasterFunction = await buildJsRasterFunction(rasterFunction) as any;
        return await this.layer.generateRasterInfo(jsRasterFunction,
            options);
    }

    async getSamples(parameters: any,
        requestOptions: any): Promise<any> {
        return await this.layer.getSamples(parameters,
            requestOptions);
    }

    async identify(point: any,
        options: any): Promise<any> {
        let { buildJsPoint } = await import('./point');
        let jsPoint = buildJsPoint(point) as any;
        let { buildJsRasterIdentifyOptions } = await import('./rasterIdentifyOptions');
        let jsOptions = await buildJsRasterIdentifyOptions(options, this.layerId, this.viewId) as any;
        return await this.layer.identify(jsPoint,
            jsOptions);
    }

    async isFulfilled(): Promise<any> {
        return this.layer.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.layer.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.layer.isResolved();
    }

    async load(options: any): Promise<any> {
        let result = await this.layer.load(options);
        
        return generateSerializableJson(result);
    }

    async save(options: any): Promise<any> {
        let result = await this.layer.save(options);
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(result, this.viewId);
    }

    async saveAs(portalItem: any,
        options: any): Promise<any> {
        let { buildJsPortalItem } = await import('./portalItem');
        let jsPortalItem = await buildJsPortalItem(portalItem, this.layerId, this.viewId) as any;
        let result = await this.layer.saveAs(jsPortalItem,
            options);
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(result, this.viewId);
    }

    async when(callback: any,
        errback: any): Promise<any> {
        let result = await this.layer.when(callback,
            errback);
        
        return generateSerializableJson(result);
    }

    // region properties
    
    getActivePresetRendererName(): any {
        if (!hasValue(this.layer.activePresetRendererName)) {
            return null;
        }
        
        return generateSerializableJson(this.layer.activePresetRendererName);
    }
    
    setActivePresetRendererName(value: any): void {
        this.layer.activePresetRendererName = JSON.parse(value);
    }
    
    getArcGISLayerId(): any {
        if (!hasValue(this.layer.id)) {
            return null;
        }
        
        return generateSerializableJson(this.layer.id);
    }
    
    setArcGISLayerId(value: any): void {
        this.layer.id = JSON.parse(value);
    }
    
    getCopyright(): any {
        if (!hasValue(this.layer.copyright)) {
            return null;
        }
        
        return generateSerializableJson(this.layer.copyright);
    }
    
    setCopyright(value: any): void {
        this.layer.copyright = JSON.parse(value);
    }
    
    async getEffect(): Promise<any> {
        if (!hasValue(this.layer.effect)) {
            return null;
        }
        
        let { buildDotNetEffect } = await import('./effect');
        return buildDotNetEffect(this.layer.effect);
    }
    
    async setEffect(value: any): Promise<void> {
        let { buildJsEffect } = await import('./effect');
        this.layer.effect =  buildJsEffect(value);
    }
    
    async getFullExtent(): Promise<any> {
        if (!hasValue(this.layer.fullExtent)) {
            return null;
        }
        
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(this.layer.fullExtent);
    }
    
    async setFullExtent(value: any): Promise<void> {
        let { buildJsExtent } = await import('./extent');
        this.layer.fullExtent =  buildJsExtent(value);
    }
    
    async getMultidimensionalDefinition(): Promise<any> {
        if (!hasValue(this.layer.multidimensionalDefinition)) {
            return null;
        }
        
        let { buildDotNetDimensionalDefinition } = await import('./dimensionalDefinition');
        return await Promise.all(this.layer.multidimensionalDefinition!.map(async i => await buildDotNetDimensionalDefinition(i, this.viewId)));
    }
    
    async setMultidimensionalDefinition(value: any): Promise<void> {
        if (!hasValue(value)) {
            this.layer.multidimensionalDefinition = [];
        }
        let { buildJsDimensionalDefinition } = await import('./dimensionalDefinition');
        this.layer.multidimensionalDefinition = await Promise.all(value.map(async i => await buildJsDimensionalDefinition(i, this.viewId))) as any;
    }
    
    async getMultidimensionalSubset(): Promise<any> {
        if (!hasValue(this.layer.multidimensionalSubset)) {
            return null;
        }
        
        let { buildDotNetMultidimensionalSubset } = await import('./multidimensionalSubset');
        return await buildDotNetMultidimensionalSubset(this.layer.multidimensionalSubset, this.viewId);
    }
    
    async setMultidimensionalSubset(value: any): Promise<void> {
        let { buildJsMultidimensionalSubset } = await import('./multidimensionalSubset');
        this.layer.multidimensionalSubset = await  buildJsMultidimensionalSubset(value, this.viewId);
    }
    
    async getPopupTemplate(): Promise<any> {
        if (!hasValue(this.layer.popupTemplate)) {
            return null;
        }
        
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        return await buildDotNetPopupTemplate(this.layer.popupTemplate);
    }
    
    async setPopupTemplate(value: any): Promise<void> {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        this.layer.popupTemplate =  buildJsPopupTemplate(value, this.layerId, this.viewId);
    }
    
    async getPortalItem(): Promise<any> {
        if (!hasValue(this.layer.portalItem)) {
            return null;
        }
        
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(this.layer.portalItem, this.viewId);
    }
    
    async setPortalItem(value: any): Promise<void> {
        let { buildJsPortalItem } = await import('./portalItem');
        this.layer.portalItem = await  buildJsPortalItem(value, this.layerId, this.viewId);
    }
    
    async getPresetRenderers(): Promise<any> {
        if (!hasValue(this.layer.presetRenderers)) {
            return null;
        }
        
        let { buildDotNetRasterPresetRenderer } = await import('./rasterPresetRenderer');
        return await Promise.all(this.layer.presetRenderers!.map(async i => await buildDotNetRasterPresetRenderer(i, this.viewId)));
    }
    
    async setPresetRenderers(value: any): Promise<void> {
        if (!hasValue(value)) {
            this.layer.presetRenderers = [];
        }
        let { buildJsRasterPresetRenderer } = await import('./rasterPresetRenderer');
        this.layer.presetRenderers = await Promise.all(value.map(async i => await buildJsRasterPresetRenderer(i, this.layerId, this.viewId))) as any;
    }
    
    async getRasterFields(): Promise<any> {
        if (!hasValue(this.layer.rasterFields)) {
            return null;
        }
        
        let { buildDotNetField } = await import('./field');
        return this.layer.rasterFields!.map(i => buildDotNetField(i));
    }
    
    async getRasterFunction(): Promise<any> {
        if (!hasValue(this.layer.rasterFunction)) {
            return null;
        }
        
        let { buildDotNetRasterFunction } = await import('./rasterFunction');
        return await buildDotNetRasterFunction(this.layer.rasterFunction);
    }
    
    async setRasterFunction(value: any): Promise<void> {
        let { buildJsRasterFunction } = await import('./rasterFunction');
        this.layer.rasterFunction = await  buildJsRasterFunction(value);
    }
    
    getSource(): any {
        if (!hasValue(this.layer.source)) {
            return null;
        }
        
        return generateSerializableJson(this.layer.source);
    }
    
    setSource(value: any): void {
        this.layer.source = JSON.parse(value);
    }
    
    getSourceJSON(): any {
        if (!hasValue(this.layer.sourceJSON)) {
            return null;
        }
        
        return generateSerializableJson(this.layer.sourceJSON);
    }
    
    async getSpatialReference(): Promise<any> {
        if (!hasValue(this.layer.spatialReference)) {
            return null;
        }
        
        let { buildDotNetSpatialReference } = await import('./spatialReference');
        return buildDotNetSpatialReference(this.layer.spatialReference);
    }
    
    async getTileInfo(): Promise<any> {
        if (!hasValue(this.layer.tileInfo)) {
            return null;
        }
        
        let { buildDotNetTileInfo } = await import('./tileInfo');
        return await buildDotNetTileInfo(this.layer.tileInfo, this.viewId);
    }
    
    async setTileInfo(value: any): Promise<void> {
        let { buildJsTileInfo } = await import('./tileInfo');
        this.layer.tileInfo = await  buildJsTileInfo(value, this.layerId, this.viewId);
    }
    
    async getTimeExtent(): Promise<any> {
        if (!hasValue(this.layer.timeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.timeExtent);
    }
    
    async setTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.timeExtent = await  buildJsTimeExtent(value);
    }
    
    async getTimeInfo(): Promise<any> {
        if (!hasValue(this.layer.timeInfo)) {
            return null;
        }
        
        let { buildDotNetTimeInfo } = await import('./timeInfo');
        return await buildDotNetTimeInfo(this.layer.timeInfo);
    }
    
    async setTimeInfo(value: any): Promise<void> {
        let { buildJsTimeInfo } = await import('./timeInfo');
        this.layer.timeInfo = await  buildJsTimeInfo(value);
    }
    
    async getTimeOffset(): Promise<any> {
        if (!hasValue(this.layer.timeOffset)) {
            return null;
        }
        
        let { buildDotNetTimeInterval } = await import('./timeInterval');
        return await buildDotNetTimeInterval(this.layer.timeOffset);
    }
    
    async setTimeOffset(value: any): Promise<void> {
        let { buildJsTimeInterval } = await import('./timeInterval');
        this.layer.timeOffset = await  buildJsTimeInterval(value);
    }
    
    getTitle(): any {
        if (!hasValue(this.layer.title)) {
            return null;
        }
        
        return generateSerializableJson(this.layer.title);
    }
    
    setTitle(value: any): void {
        this.layer.title = JSON.parse(value);
    }
    
    getUrl(): any {
        if (!hasValue(this.layer.url)) {
            return null;
        }
        
        return generateSerializableJson(this.layer.url);
    }
    
    setUrl(value: any): void {
        this.layer.url = JSON.parse(value);
    }
    
    async getVisibilityTimeExtent(): Promise<any> {
        if (!hasValue(this.layer.visibilityTimeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.visibilityTimeExtent);
    }
    
    async setVisibilityTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.visibilityTimeExtent = await  buildJsTimeExtent(value);
    }
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}


export async function buildJsImageryTileLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.effect)) {
        let { buildJsEffect } = await import('./effect');
        properties.effect = buildJsEffect(dotNetObject.effect) as any;
    }
    if (hasValue(dotNetObject.fullExtent)) {
        let { buildJsExtent } = await import('./extent');
        properties.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;
    }
    if (hasValue(dotNetObject.multidimensionalDefinition) && dotNetObject.multidimensionalDefinition.length > 0) {
        let { buildJsDimensionalDefinition } = await import('./dimensionalDefinition');
        properties.multidimensionalDefinition = await Promise.all(dotNetObject.multidimensionalDefinition.map(async i => await buildJsDimensionalDefinition(i, viewId))) as any;
    }
    if (hasValue(dotNetObject.multidimensionalSubset)) {
        let { buildJsMultidimensionalSubset } = await import('./multidimensionalSubset');
        properties.multidimensionalSubset = await buildJsMultidimensionalSubset(dotNetObject.multidimensionalSubset, viewId) as any;
    }
    if (hasValue(dotNetObject.popupTemplate)) {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        properties.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.portalItem)) {
        let { buildJsPortalItem } = await import('./portalItem');
        properties.portalItem = await buildJsPortalItem(dotNetObject.portalItem, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.presetRenderers) && dotNetObject.presetRenderers.length > 0) {
        let { buildJsRasterPresetRenderer } = await import('./rasterPresetRenderer');
        properties.presetRenderers = await Promise.all(dotNetObject.presetRenderers.map(async i => await buildJsRasterPresetRenderer(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.rasterFunction)) {
        let { buildJsRasterFunction } = await import('./rasterFunction');
        properties.rasterFunction = await buildJsRasterFunction(dotNetObject.rasterFunction) as any;
    }
    if (hasValue(dotNetObject.tileInfo)) {
        let { buildJsTileInfo } = await import('./tileInfo');
        properties.tileInfo = await buildJsTileInfo(dotNetObject.tileInfo, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent) as any;
    }
    if (hasValue(dotNetObject.timeInfo)) {
        let { buildJsTimeInfo } = await import('./timeInfo');
        properties.timeInfo = await buildJsTimeInfo(dotNetObject.timeInfo) as any;
    }
    if (hasValue(dotNetObject.timeOffset)) {
        let { buildJsTimeInterval } = await import('./timeInterval');
        properties.timeOffset = await buildJsTimeInterval(dotNetObject.timeOffset) as any;
    }
    if (hasValue(dotNetObject.visibilityTimeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent) as any;
    }

    if (hasValue(dotNetObject.activePresetRendererName)) {
        properties.activePresetRendererName = dotNetObject.activePresetRendererName;
    }
    if (hasValue(dotNetObject.arcGISLayerId)) {
        properties.id = dotNetObject.arcGISLayerId;
    }
    if (hasValue(dotNetObject.bandIds) && dotNetObject.bandIds.length > 0) {
        properties.bandIds = dotNetObject.bandIds;
    }
    if (hasValue(dotNetObject.blendMode)) {
        properties.blendMode = dotNetObject.blendMode;
    }
    if (hasValue(dotNetObject.copyright)) {
        properties.copyright = dotNetObject.copyright;
    }
    if (hasValue(dotNetObject.customParameters)) {
        properties.customParameters = dotNetObject.customParameters;
    }
    if (hasValue(dotNetObject.interpolation)) {
        properties.interpolation = dotNetObject.interpolation;
    }
    if (hasValue(dotNetObject.legendEnabled)) {
        properties.legendEnabled = dotNetObject.legendEnabled;
    }
    if (hasValue(dotNetObject.listMode)) {
        properties.listMode = dotNetObject.listMode;
    }
    if (hasValue(dotNetObject.maxScale)) {
        properties.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.minScale)) {
        properties.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.opacity)) {
        properties.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.persistenceEnabled)) {
        properties.persistenceEnabled = dotNetObject.persistenceEnabled;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        properties.popupEnabled = dotNetObject.popupEnabled;
    }
    if (hasValue(dotNetObject.source)) {
        properties.source = dotNetObject.source;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.url)) {
        properties.url = dotNetObject.url;
    }
    if (hasValue(dotNetObject.useViewTime)) {
        properties.useViewTime = dotNetObject.useViewTime;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    let jsImageryTileLayer = new ImageryTileLayer(properties);
    if (hasValue(dotNetObject.hasCreateListener) && dotNetObject.hasCreateListener) {
        jsImageryTileLayer.on('layerview-create', (evt: any) => {
            requestAnimationFrame(async () => {
                let { buildDotNetLayerViewCreateEvent } = await import('./layerViewCreateEvent');
                let dnEvent = await buildDotNetLayerViewCreateEvent(evt, layerId, viewId);
                let streamRef = buildJsStreamReference(dnEvent ?? {});
                await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreate', streamRef);
            });
        });
    }
    
    if (hasValue(dotNetObject.hasCreateErrorListener) && dotNetObject.hasCreateErrorListener) {
        jsImageryTileLayer.on('layerview-create-error', (evt: any) => {
            requestAnimationFrame(async () => {
                let { buildDotNetLayerViewCreateErrorEvent } = await import('./layerViewCreateErrorEvent');
                let dnEvent = await buildDotNetLayerViewCreateErrorEvent(evt, layerId, viewId);
                let streamRef = buildJsStreamReference(dnEvent ?? {});
                await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreateError', streamRef);
            });
        });
    }
    
    if (hasValue(dotNetObject.hasDestroyListener) && dotNetObject.hasDestroyListener) {
        jsImageryTileLayer.on('layerview-destroy', (evt: any) => {
            requestAnimationFrame(async () => {
                let { buildDotNetLayerViewDestroyEvent } = await import('./layerViewDestroyEvent');
                let dnEvent = await buildDotNetLayerViewDestroyEvent(evt, layerId, viewId);
                let streamRef = buildJsStreamReference(dnEvent ?? {});
                await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsDestroy', streamRef);
            });
        });
    }
    

    let { default: ImageryTileLayerWrapper } = await import('./imageryTileLayer');
    let imageryTileLayerWrapper = new ImageryTileLayerWrapper(jsImageryTileLayer);
    imageryTileLayerWrapper.geoBlazorId = dotNetObject.id;
    imageryTileLayerWrapper.viewId = viewId;
    imageryTileLayerWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = imageryTileLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsImageryTileLayer;
    
    requestAnimationFrame(async () => {
        try {
            let jsObjectRef = DotNet.createJSObjectReference(imageryTileLayerWrapper);
            let { buildDotNetImageryTileLayer } = await import('./imageryTileLayer');
            let dnInstantiatedObject = await buildDotNetImageryTileLayer(jsImageryTileLayer, viewId);

            let dnStream = buildJsStreamReference(dnInstantiatedObject);
            await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
                jsObjectRef, dnStream);
        } catch (e) {
            console.error('Error invoking OnJsComponentCreated for ImageryTileLayer', e);
        }
    });
    
    return jsImageryTileLayer;
}


export async function buildDotNetImageryTileLayerGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageryTileLayer: any = {};
    
    if (hasValue(jsObject.effect)) {
        let { buildDotNetEffect } = await import('./effect');
        dotNetImageryTileLayer.effect = buildDotNetEffect(jsObject.effect);
    }
    
    if (hasValue(jsObject.fullExtent)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetImageryTileLayer.fullExtent = buildDotNetExtent(jsObject.fullExtent);
    }
    
    if (hasValue(jsObject.multidimensionalDefinition)) {
        let { buildDotNetDimensionalDefinition } = await import('./dimensionalDefinition');
        dotNetImageryTileLayer.multidimensionalDefinition = await Promise.all(jsObject.multidimensionalDefinition.map(async i => await buildDotNetDimensionalDefinition(i, viewId)));
    }
    
    if (hasValue(jsObject.multidimensionalSubset)) {
        let { buildDotNetMultidimensionalSubset } = await import('./multidimensionalSubset');
        dotNetImageryTileLayer.multidimensionalSubset = await buildDotNetMultidimensionalSubset(jsObject.multidimensionalSubset, viewId);
    }
    
    if (hasValue(jsObject.popupTemplate)) {
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        dotNetImageryTileLayer.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
    }
    
    if (hasValue(jsObject.portalItem)) {
        let { buildDotNetPortalItem } = await import('./portalItem');
        dotNetImageryTileLayer.portalItem = await buildDotNetPortalItem(jsObject.portalItem, viewId);
    }
    
    if (hasValue(jsObject.presetRenderers)) {
        let { buildDotNetRasterPresetRenderer } = await import('./rasterPresetRenderer');
        dotNetImageryTileLayer.presetRenderers = await Promise.all(jsObject.presetRenderers.map(async i => await buildDotNetRasterPresetRenderer(i, viewId)));
    }
    
    if (hasValue(jsObject.rasterFields)) {
        let { buildDotNetField } = await import('./field');
        dotNetImageryTileLayer.rasterFields = jsObject.rasterFields.map(i => buildDotNetField(i));
    }
    
    if (hasValue(jsObject.rasterFunction)) {
        let { buildDotNetRasterFunction } = await import('./rasterFunction');
        dotNetImageryTileLayer.rasterFunction = await buildDotNetRasterFunction(jsObject.rasterFunction);
    }
    
    if (hasValue(jsObject.serviceRasterInfo)) {
        let { buildDotNetRasterInfo } = await import('./rasterInfo');
        dotNetImageryTileLayer.serviceRasterInfo = await buildDotNetRasterInfo(jsObject.serviceRasterInfo, viewId);
    }
    
    if (hasValue(jsObject.spatialReference)) {
        let { buildDotNetSpatialReference } = await import('./spatialReference');
        dotNetImageryTileLayer.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference);
    }
    
    if (hasValue(jsObject.tileInfo)) {
        let { buildDotNetTileInfo } = await import('./tileInfo');
        dotNetImageryTileLayer.tileInfo = await buildDotNetTileInfo(jsObject.tileInfo, viewId);
    }
    
    if (hasValue(jsObject.timeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetImageryTileLayer.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
    }
    
    if (hasValue(jsObject.timeInfo)) {
        let { buildDotNetTimeInfo } = await import('./timeInfo');
        dotNetImageryTileLayer.timeInfo = await buildDotNetTimeInfo(jsObject.timeInfo);
    }
    
    if (hasValue(jsObject.timeOffset)) {
        let { buildDotNetTimeInterval } = await import('./timeInterval');
        dotNetImageryTileLayer.timeOffset = await buildDotNetTimeInterval(jsObject.timeOffset);
    }
    
    if (hasValue(jsObject.visibilityTimeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetImageryTileLayer.visibilityTimeExtent = buildDotNetTimeExtent(jsObject.visibilityTimeExtent);
    }
    
    if (hasValue(jsObject.activePresetRendererName)) {
        dotNetImageryTileLayer.activePresetRendererName = jsObject.activePresetRendererName;
    }
    
    if (hasValue(jsObject.id)) {
        dotNetImageryTileLayer.arcGISLayerId = jsObject.id;
    }
    
    if (hasValue(jsObject.bandIds)) {
        dotNetImageryTileLayer.bandIds = jsObject.bandIds;
    }
    
    if (hasValue(jsObject.blendMode)) {
        dotNetImageryTileLayer.blendMode = removeCircularReferences(jsObject.blendMode);
    }
    
    if (hasValue(jsObject.copyright)) {
        dotNetImageryTileLayer.copyright = jsObject.copyright;
    }
    
    if (hasValue(jsObject.customParameters)) {
        dotNetImageryTileLayer.customParameters = removeCircularReferences(jsObject.customParameters);
    }
    
    if (hasValue(jsObject.interpolation)) {
        dotNetImageryTileLayer.interpolation = removeCircularReferences(jsObject.interpolation);
    }
    
    if (hasValue(jsObject.legendEnabled)) {
        dotNetImageryTileLayer.legendEnabled = jsObject.legendEnabled;
    }
    
    if (hasValue(jsObject.listMode)) {
        dotNetImageryTileLayer.listMode = removeCircularReferences(jsObject.listMode);
    }
    
    if (hasValue(jsObject.loaded)) {
        dotNetImageryTileLayer.loaded = jsObject.loaded;
    }
    
    if (hasValue(jsObject.maxScale)) {
        dotNetImageryTileLayer.maxScale = jsObject.maxScale;
    }
    
    if (hasValue(jsObject.minScale)) {
        dotNetImageryTileLayer.minScale = jsObject.minScale;
    }
    
    if (hasValue(jsObject.opacity)) {
        dotNetImageryTileLayer.opacity = jsObject.opacity;
    }
    
    if (hasValue(jsObject.persistenceEnabled)) {
        dotNetImageryTileLayer.persistenceEnabled = jsObject.persistenceEnabled;
    }
    
    if (hasValue(jsObject.popupEnabled)) {
        dotNetImageryTileLayer.popupEnabled = jsObject.popupEnabled;
    }
    
    if (hasValue(jsObject.source)) {
        dotNetImageryTileLayer.source = jsObject.source;
    }
    
    if (hasValue(jsObject.title)) {
        dotNetImageryTileLayer.title = jsObject.title;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetImageryTileLayer.type = removeCircularReferences(jsObject.type);
    }
    
    if (hasValue(jsObject.url)) {
        dotNetImageryTileLayer.url = jsObject.url;
    }
    
    if (hasValue(jsObject.useViewTime)) {
        dotNetImageryTileLayer.useViewTime = jsObject.useViewTime;
    }
    
    if (hasValue(jsObject.version)) {
        dotNetImageryTileLayer.version = jsObject.version;
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetImageryTileLayer.visible = jsObject.visible;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetImageryTileLayer.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        if (hasValue(dotNetRef)) {
            try {
                dotNetImageryTileLayer.id = await dotNetRef.invokeMethodAsync('GetId');
            } catch (e) {
                console.error('Error invoking GetId for ImageryTileLayer', e);
            }
        }
    }
    if (hasValue(dotNetImageryTileLayer.id)) {
        jsObjectRefs[dotNetImageryTileLayer.id] ??= jsObject;
        arcGisObjectRefs[dotNetImageryTileLayer.id] ??= jsObject;
    }

    return dotNetImageryTileLayer;
}

