// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import {
    buildJsExtent,
    buildJsPoint,
    buildJsPortalItem
} from './jsBuilder';

import ImageryTileLayer from '@arcgis/core/layers/ImageryTileLayer';
import {IPropertyWrapper} from './definitions';
import {createGeoBlazorObject} from './arcGisJsInterop';

export default class ImageryTileLayerGenerated implements IPropertyWrapper {
    public layer: ImageryTileLayer;

    constructor(layer: ImageryTileLayer) {
        this.layer = layer;
        // set all properties from layer
        for (let prop in layer) {
            if (layer.hasOwnProperty(prop)) {
                this[prop] = layer[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    async computeStatisticsHistograms(parameters: any,
        requestOptions: any): Promise<any> {
        return await this.layer.computeStatisticsHistograms(parameters,
            requestOptions);
    }

    async createLayerView(view: any,
        options: any): Promise<any> {
        let result = await this.layer.createLayerView(view,
            options);
        return await createGeoBlazorObject(result);
    }

    async createPopupTemplate(options: any): Promise<any> {
        let result = this.layer.createPopupTemplate(options);
        return await createGeoBlazorObject(result);
    }

    async fetchAttributionData(): Promise<any> {
        return await this.layer.fetchAttributionData();
    }

    async fetchPixels(extent: any,
        width: any,
        height: any,
        options: any): Promise<any> {
        let jsExtent = await buildJsExtent(extent) as any;
        let result = await this.layer.fetchPixels(jsExtent,
            width,
            height,
            options);
        return await createGeoBlazorObject(result);
    }

    async fetchTile(level: any,
        row: any,
        col: any,
        options: any): Promise<any> {
        return await this.layer.fetchTile(level,
            row,
            col,
            options);
    }

    async identify(point: any,
        options: any): Promise<any> {
        let jsPoint = await buildJsPoint(point) as any;
        let result = await this.layer.identify(jsPoint,
            options);
        return await createGeoBlazorObject(result);
    }

    async save(options: any): Promise<any> {
        let result = await this.layer.save(options);
        return await createGeoBlazorObject(result);
    }

    async saveAs(portalItem: any,
        options: any): Promise<any> {
        let jsPortalItem = await buildJsPortalItem(portalItem) as any;
        let result = await this.layer.saveAs(jsPortalItem,
            options);
        return await createGeoBlazorObject(result);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
    
    addToProperty(prop: string, value: any): void {
        if (Array.isArray(value)) {
            this.layer[prop].addMany(value);
        } else {
            this.layer[prop].add(value);
        }
    }
    
    removeFromProperty(prop: string, value: any): any {
        if (Array.isArray(value)) {
            this.layer[prop].removeMany(value);
        } else {
            this.layer[prop].remove(value);
        }
    }
}
