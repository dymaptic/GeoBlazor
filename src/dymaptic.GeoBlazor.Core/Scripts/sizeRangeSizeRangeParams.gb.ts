// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSizeRangeSizeRangeParams } from './sizeRangeSizeRangeParams';

export async function buildJsSizeRangeSizeRangeParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jssizeRangeSizeRangeParams: any = {};
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jssizeRangeSizeRangeParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.forBinning)) {
        jssizeRangeSizeRangeParams.forBinning = dotNetObject.forBinning;
    }
    if (hasValue(dotNetObject.signal)) {
        jssizeRangeSizeRangeParams.signal = dotNetObject.signal;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jssizeRangeSizeRangeParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jssizeRangeSizeRangeParams;
    
    let dnInstantiatedObject = await buildDotNetSizeRangeSizeRangeParams(jssizeRangeSizeRangeParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SizeRangeSizeRangeParams', e);
    }
    
    return jssizeRangeSizeRangeParams;
}

export async function buildDotNetSizeRangeSizeRangeParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSizeRangeSizeRangeParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.forBinning)) {
        dotNetSizeRangeSizeRangeParams.forBinning = jsObject.forBinning;
    }
    if (hasValue(jsObject.signal)) {
        dotNetSizeRangeSizeRangeParams.signal = jsObject.signal;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSizeRangeSizeRangeParams.id = k;
                break;
            }
        }
    }

    return dotNetSizeRangeSizeRangeParams;
}

