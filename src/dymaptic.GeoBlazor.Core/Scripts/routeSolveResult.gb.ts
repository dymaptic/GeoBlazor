// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import RouteSolveResult from '@arcgis/core/rest/support/RouteSolveResult';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetRouteSolveResult } from './routeSolveResult';

export async function buildJsRouteSolveResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsRouteSolveResult = new RouteSolveResult();
    if (hasValue(dotNetObject.pointBarriers)) {
        let { buildJsGraphic } = await import('./graphic');
        jsRouteSolveResult.pointBarriers = dotNetObject.pointBarriers.map(i => buildJsGraphic(i)) as any;
    }
    if (hasValue(dotNetObject.polygonBarriers)) {
        let { buildJsGraphic } = await import('./graphic');
        jsRouteSolveResult.polygonBarriers = dotNetObject.polygonBarriers.map(i => buildJsGraphic(i)) as any;
    }
    if (hasValue(dotNetObject.polylineBarriers)) {
        let { buildJsGraphic } = await import('./graphic');
        jsRouteSolveResult.polylineBarriers = dotNetObject.polylineBarriers.map(i => buildJsGraphic(i)) as any;
    }
    if (hasValue(dotNetObject.routeResults)) {
        let { buildJsRouteResult } = await import('./routeResult');
        jsRouteSolveResult.routeResults = await Promise.all(dotNetObject.routeResults.map(async i => await buildJsRouteResult(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.messages)) {
        jsRouteSolveResult.messages = dotNetObject.messages;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsRouteSolveResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRouteSolveResult;
    
    let dnInstantiatedObject = await buildDotNetRouteSolveResult(jsRouteSolveResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RouteSolveResult', e);
    }
    
    return jsRouteSolveResult;
}

export async function buildDotNetRouteSolveResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRouteSolveResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.pointBarriers)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetRouteSolveResult.pointBarriers = jsObject.pointBarriers.map(i => buildDotNetGraphic(i, layerId, viewId));
        }
        if (hasValue(jsObject.polygonBarriers)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetRouteSolveResult.polygonBarriers = jsObject.polygonBarriers.map(i => buildDotNetGraphic(i, layerId, viewId));
        }
        if (hasValue(jsObject.polylineBarriers)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetRouteSolveResult.polylineBarriers = jsObject.polylineBarriers.map(i => buildDotNetGraphic(i, layerId, viewId));
        }
        if (hasValue(jsObject.routeResults)) {
            let { buildDotNetRouteResult } = await import('./routeResult');
            dotNetRouteSolveResult.routeResults = await Promise.all(jsObject.routeResults.map(async i => await buildDotNetRouteResult(i)));
        }
        if (hasValue(jsObject.messages)) {
            dotNetRouteSolveResult.messages = jsObject.messages;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRouteSolveResult.id = k;
                break;
            }
        }
    }

    return dotNetRouteSolveResult;
}

