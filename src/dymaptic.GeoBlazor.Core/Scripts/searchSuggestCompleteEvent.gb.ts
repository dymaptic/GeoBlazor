// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSearchSuggestCompleteEvent } from './searchSuggestCompleteEvent';

export async function buildJsSearchSuggestCompleteEventGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSearchSuggestCompleteEvent: any = {};
    if (hasValue(dotNetObject.results)) {
        let { buildJsSearchSuggestCompleteEventResults } = await import('./searchSuggestCompleteEventResults');
        jsSearchSuggestCompleteEvent.results = await Promise.all(dotNetObject.results.map(async i => await buildJsSearchSuggestCompleteEventResults(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.activeSourceIndex)) {
        jsSearchSuggestCompleteEvent.activeSourceIndex = dotNetObject.activeSourceIndex;
    }
    if (hasValue(dotNetObject.errors)) {
        jsSearchSuggestCompleteEvent.errors = dotNetObject.errors;
    }
    if (hasValue(dotNetObject.numResults)) {
        jsSearchSuggestCompleteEvent.numResults = dotNetObject.numResults;
    }
    if (hasValue(dotNetObject.searchTerm)) {
        jsSearchSuggestCompleteEvent.searchTerm = dotNetObject.searchTerm;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSearchSuggestCompleteEvent);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSearchSuggestCompleteEvent;
    
    return jsSearchSuggestCompleteEvent;
}


export async function buildDotNetSearchSuggestCompleteEventGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchSuggestCompleteEvent: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.results)) {
        let { buildDotNetSearchSuggestCompleteEventResults } = await import('./searchSuggestCompleteEventResults');
        dotNetSearchSuggestCompleteEvent.results = await Promise.all(jsObject.results.map(async i => await buildDotNetSearchSuggestCompleteEventResults(i)));
    }
    if (hasValue(jsObject.activeSourceIndex)) {
        dotNetSearchSuggestCompleteEvent.activeSourceIndex = jsObject.activeSourceIndex;
    }
    if (hasValue(jsObject.errors)) {
        dotNetSearchSuggestCompleteEvent.errors = jsObject.errors;
    }
    if (hasValue(jsObject.numResults)) {
        dotNetSearchSuggestCompleteEvent.numResults = jsObject.numResults;
    }
    if (hasValue(jsObject.searchTerm)) {
        dotNetSearchSuggestCompleteEvent.searchTerm = jsObject.searchTerm;
    }

    return dotNetSearchSuggestCompleteEvent;
}

