// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetFeatureFormValueChangeEvent } from './featureFormValueChangeEvent';

export async function buildJsFeatureFormValueChangeEventGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureFormValueChangeEvent: any = {};
    if (hasValue(dotNetObject.feature)) {
        let { buildJsGraphic } = await import('./graphic');
        jsFeatureFormValueChangeEvent.feature = buildJsGraphic(dotNetObject.feature) as any;
    }
    if (hasValue(dotNetObject.layer)) {
        let { buildJsFeatureLayer } = await import('./featureLayer');
        jsFeatureFormValueChangeEvent.layer = await buildJsFeatureLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.fieldName)) {
        jsFeatureFormValueChangeEvent.fieldName = dotNetObject.fieldName;
    }
    if (hasValue(dotNetObject.valid)) {
        jsFeatureFormValueChangeEvent.valid = dotNetObject.valid;
    }
    if (hasValue(dotNetObject.value)) {
        jsFeatureFormValueChangeEvent.value = dotNetObject.value;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureFormValueChangeEvent);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureFormValueChangeEvent;
    
    let dnInstantiatedObject = await buildDotNetFeatureFormValueChangeEvent(jsFeatureFormValueChangeEvent);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureFormValueChangeEvent', e);
    }
    
    return jsFeatureFormValueChangeEvent;
}

export async function buildDotNetFeatureFormValueChangeEventGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureFormValueChangeEvent: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.feature)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetFeatureFormValueChangeEvent.feature = buildDotNetGraphic(jsObject.feature, layerId, viewId);
        }
    if (hasValue(jsObject.fieldName)) {
        dotNetFeatureFormValueChangeEvent.fieldName = jsObject.fieldName;
    }
    if (hasValue(jsObject.valid)) {
        dotNetFeatureFormValueChangeEvent.valid = jsObject.valid;
    }
    if (hasValue(jsObject.value)) {
        dotNetFeatureFormValueChangeEvent.value = jsObject.value;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFeatureFormValueChangeEvent.id = k;
                break;
            }
        }
    }

    return dotNetFeatureFormValueChangeEvent;
}

