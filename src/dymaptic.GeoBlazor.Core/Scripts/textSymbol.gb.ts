// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import TextSymbol from '@arcgis/core/symbols/TextSymbol';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class TextSymbolGenerated implements IPropertyWrapper {
    public component: TextSymbol;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: TextSymbol) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getBackgroundColor(): Promise<any> {
        let { buildDotNetMapColor } = await import('./mapColor');
        return buildDotNetMapColor(this.component.backgroundColor);
    }
    async setBackgroundColor(value: any): Promise<void> {
        let { buildJsMapColor } = await import('./mapColor');
        this.component.backgroundColor =  buildJsMapColor(value);
    }
    async getBorderLineColor(): Promise<any> {
        let { buildDotNetMapColor } = await import('./mapColor');
        return buildDotNetMapColor(this.component.borderLineColor);
    }
    async setBorderLineColor(value: any): Promise<void> {
        let { buildJsMapColor } = await import('./mapColor');
        this.component.borderLineColor =  buildJsMapColor(value);
    }
    async getColor(): Promise<any> {
        let { buildDotNetMapColor } = await import('./mapColor');
        return buildDotNetMapColor(this.component.color);
    }
    async setColor(value: any): Promise<void> {
        let { buildJsMapColor } = await import('./mapColor');
        this.component.color =  buildJsMapColor(value);
    }
    async getFont(): Promise<any> {
        let { buildDotNetMapFont } = await import('./mapFont');
        return await buildDotNetMapFont(this.component.font);
    }
    async setFont(value: any): Promise<void> {
        let { buildJsMapFont } = await import('./mapFont');
        this.component.font =  buildJsMapFont(value);
    }
    async getHaloColor(): Promise<any> {
        let { buildDotNetMapColor } = await import('./mapColor');
        return buildDotNetMapColor(this.component.haloColor);
    }
    async setHaloColor(value: any): Promise<void> {
        let { buildJsMapColor } = await import('./mapColor');
        this.component.haloColor =  buildJsMapColor(value);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsTextSymbolGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTextSymbol = new TextSymbol();
    if (hasValue(dotNetObject.backgroundColor)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsTextSymbol.backgroundColor = buildJsMapColor(dotNetObject.backgroundColor) as any;
    }
    if (hasValue(dotNetObject.borderLineColor)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsTextSymbol.borderLineColor = buildJsMapColor(dotNetObject.borderLineColor) as any;
    }
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsTextSymbol.color = buildJsMapColor(dotNetObject.color) as any;
    }
    if (hasValue(dotNetObject.font)) {
        let { buildJsMapFont } = await import('./jsBuilder');
        jsTextSymbol.font = buildJsMapFont(dotNetObject.font) as any;
    }
    if (hasValue(dotNetObject.haloColor)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsTextSymbol.haloColor = buildJsMapColor(dotNetObject.haloColor) as any;
    }

    if (hasValue(dotNetObject.angle)) {
        jsTextSymbol.angle = dotNetObject.angle;
    }
    if (hasValue(dotNetObject.borderLineSize)) {
        jsTextSymbol.borderLineSize = dotNetObject.borderLineSize;
    }
    if (hasValue(dotNetObject.haloSize)) {
        jsTextSymbol.haloSize = dotNetObject.haloSize;
    }
    if (hasValue(dotNetObject.horizontalAlignment)) {
        jsTextSymbol.horizontalAlignment = dotNetObject.horizontalAlignment;
    }
    if (hasValue(dotNetObject.kerning)) {
        jsTextSymbol.kerning = dotNetObject.kerning;
    }
    if (hasValue(dotNetObject.lineHeight)) {
        jsTextSymbol.lineHeight = dotNetObject.lineHeight;
    }
    if (hasValue(dotNetObject.lineWidth)) {
        jsTextSymbol.lineWidth = dotNetObject.lineWidth;
    }
    if (hasValue(dotNetObject.rotated)) {
        jsTextSymbol.rotated = dotNetObject.rotated;
    }
    if (hasValue(dotNetObject.text)) {
        jsTextSymbol.text = dotNetObject.text;
    }
    if (hasValue(dotNetObject.verticalAlignment)) {
        jsTextSymbol.verticalAlignment = dotNetObject.verticalAlignment;
    }
    if (hasValue(dotNetObject.xoffset)) {
        jsTextSymbol.xoffset = dotNetObject.xoffset;
    }
    if (hasValue(dotNetObject.yoffset)) {
        jsTextSymbol.yoffset = dotNetObject.yoffset;
    }
    let { default: TextSymbolWrapper } = await import('./textSymbol');
    let textSymbolWrapper = new TextSymbolWrapper(jsTextSymbol);
    textSymbolWrapper.geoBlazorId = dotNetObject.id;
    textSymbolWrapper.viewId = viewId;
    textSymbolWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(textSymbolWrapper);
    jsObjectRefs[dotNetObject.id] = textSymbolWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsTextSymbol;
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TextSymbol', e);
    }
    
    return jsTextSymbol;
}

export async function buildDotNetTextSymbolGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTextSymbol: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.backgroundColor)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetTextSymbol.backgroundColor = buildDotNetMapColor(jsObject.backgroundColor);
        }
        if (hasValue(jsObject.borderLineColor)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetTextSymbol.borderLineColor = buildDotNetMapColor(jsObject.borderLineColor);
        }
        if (hasValue(jsObject.color)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetTextSymbol.color = buildDotNetMapColor(jsObject.color);
        }
        if (hasValue(jsObject.font)) {
            let { buildDotNetMapFont } = await import('./mapFont');
            dotNetTextSymbol.font = await buildDotNetMapFont(jsObject.font);
        }
        if (hasValue(jsObject.haloColor)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetTextSymbol.haloColor = buildDotNetMapColor(jsObject.haloColor);
        }
        if (hasValue(jsObject.angle)) {
            dotNetTextSymbol.angle = jsObject.angle;
        }
        if (hasValue(jsObject.borderLineSize)) {
            dotNetTextSymbol.borderLineSize = jsObject.borderLineSize;
        }
        if (hasValue(jsObject.haloSize)) {
            dotNetTextSymbol.haloSize = jsObject.haloSize;
        }
        if (hasValue(jsObject.horizontalAlignment)) {
            dotNetTextSymbol.horizontalAlignment = jsObject.horizontalAlignment;
        }
        if (hasValue(jsObject.kerning)) {
            dotNetTextSymbol.kerning = jsObject.kerning;
        }
        if (hasValue(jsObject.lineHeight)) {
            dotNetTextSymbol.lineHeight = jsObject.lineHeight;
        }
        if (hasValue(jsObject.lineWidth)) {
            dotNetTextSymbol.lineWidth = jsObject.lineWidth;
        }
        if (hasValue(jsObject.rotated)) {
            dotNetTextSymbol.rotated = jsObject.rotated;
        }
        if (hasValue(jsObject.text)) {
            dotNetTextSymbol.text = jsObject.text;
        }
        if (hasValue(jsObject.type)) {
            dotNetTextSymbol.type = jsObject.type;
        }
        if (hasValue(jsObject.verticalAlignment)) {
            dotNetTextSymbol.verticalAlignment = jsObject.verticalAlignment;
        }
        if (hasValue(jsObject.xoffset)) {
            dotNetTextSymbol.xoffset = jsObject.xoffset;
        }
        if (hasValue(jsObject.yoffset)) {
            dotNetTextSymbol.yoffset = jsObject.yoffset;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTextSymbol.id = k;
                break;
            }
        }
    }

    return dotNetTextSymbol;
}

