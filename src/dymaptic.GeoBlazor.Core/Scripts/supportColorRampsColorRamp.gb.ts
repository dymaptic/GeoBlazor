// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSupportColorRampsColorRamp } from './supportColorRampsColorRamp';

export async function buildJsSupportColorRampsColorRampGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jssupportColorRampsColorRamp: any = {}
    if (hasValue(dotNetObject.colors)) {
        let { buildJsMapColor } = await import('./mapColor');
        jssupportColorRampsColorRamp.colors = dotNetObject.colors.map(i => buildJsMapColor(i)) as any;
    }
    if (hasValue(dotNetObject.colorsForClassBreaks)) {
        let { buildJsColorRampColorsForClassBreaks } = await import('./colorRampColorsForClassBreaks');
        jssupportColorRampsColorRamp.colorsForClassBreaks = await Promise.all(dotNetObject.colorsForClassBreaks.map(async i => await buildJsColorRampColorsForClassBreaks(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.name)) {
        jssupportColorRampsColorRamp.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.tags)) {
        jssupportColorRampsColorRamp.tags = dotNetObject.tags;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jssupportColorRampsColorRamp);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jssupportColorRampsColorRamp;
    
    let dnInstantiatedObject = await buildDotNetSupportColorRampsColorRamp(jssupportColorRampsColorRamp);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SupportColorRampsColorRamp', e);
    }
    
    return jssupportColorRampsColorRamp;
}

export async function buildDotNetSupportColorRampsColorRampGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSupportColorRampsColorRamp: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.colors)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetSupportColorRampsColorRamp.colors = jsObject.colors.map(i => buildDotNetMapColor(i));
        }
        if (hasValue(jsObject.colorsForClassBreaks)) {
            let { buildDotNetColorRampColorsForClassBreaks } = await import('./colorRampColorsForClassBreaks');
            dotNetSupportColorRampsColorRamp.colorsForClassBreaks = await Promise.all(jsObject.colorsForClassBreaks.map(async i => await buildDotNetColorRampColorsForClassBreaks(i)));
        }
        if (hasValue(jsObject.name)) {
            dotNetSupportColorRampsColorRamp.name = jsObject.name;
        }
        if (hasValue(jsObject.tags)) {
            dotNetSupportColorRampsColorRamp.tags = jsObject.tags;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSupportColorRampsColorRamp.id = k;
                break;
            }
        }
    }

    return dotNetSupportColorRampsColorRamp;
}

