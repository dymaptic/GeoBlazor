// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetFlowRendererResult } from './flowRendererResult';

export async function buildJsFlowRendererResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFlowRendererResult: any = {}
    if (hasValue(dotNetObject.flowScheme)) {
        let { buildJsFlowScheme } = await import('./flowScheme');
        jsFlowRendererResult.flowScheme = await buildJsFlowScheme(dotNetObject.flowScheme, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsFlowRenderer } = await import('./flowRenderer');
        jsFlowRendererResult.renderer = await buildJsFlowRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.visualVariables)) {
        let { buildJsVisualVariable } = await import('./visualVariable');
        jsFlowRendererResult.visualVariables = await Promise.all(dotNetObject.visualVariables.map(async i => await buildJsVisualVariable(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.basemapId)) {
        jsFlowRendererResult.basemapId = dotNetObject.basemapId;
    }
    if (hasValue(dotNetObject.basemapTheme)) {
        jsFlowRendererResult.basemapTheme = dotNetObject.basemapTheme;
    }
    if (hasValue(dotNetObject.layerEffect)) {
        jsFlowRendererResult.layerEffect = dotNetObject.layerEffect;
    }
    if (hasValue(dotNetObject.statistics)) {
        jsFlowRendererResult.statistics = dotNetObject.statistics;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsFlowRendererResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFlowRendererResult;
    
    let dnInstantiatedObject = await buildDotNetFlowRendererResult(jsFlowRendererResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FlowRendererResult', e);
    }
    
    return jsFlowRendererResult;
}

export async function buildDotNetFlowRendererResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFlowRendererResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.flowScheme)) {
            let { buildDotNetFlowScheme } = await import('./flowScheme');
            dotNetFlowRendererResult.flowScheme = await buildDotNetFlowScheme(jsObject.flowScheme);
        }
        if (hasValue(jsObject.renderer)) {
            let { buildDotNetFlowRenderer } = await import('./flowRenderer');
            dotNetFlowRendererResult.renderer = await buildDotNetFlowRenderer(jsObject.renderer);
        }
        if (hasValue(jsObject.visualVariables)) {
            let { buildDotNetVisualVariable } = await import('./visualVariable');
            dotNetFlowRendererResult.visualVariables = await Promise.all(jsObject.visualVariables.map(async i => await buildDotNetVisualVariable(i)));
        }
        if (hasValue(jsObject.basemapId)) {
            dotNetFlowRendererResult.basemapId = jsObject.basemapId;
        }
        if (hasValue(jsObject.basemapTheme)) {
            dotNetFlowRendererResult.basemapTheme = jsObject.basemapTheme;
        }
        if (hasValue(jsObject.layerEffect)) {
            dotNetFlowRendererResult.layerEffect = jsObject.layerEffect;
        }
        if (hasValue(jsObject.statistics)) {
            dotNetFlowRendererResult.statistics = jsObject.statistics;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFlowRendererResult.id = k;
                break;
            }
        }
    }

    return dotNetFlowRendererResult;
}

