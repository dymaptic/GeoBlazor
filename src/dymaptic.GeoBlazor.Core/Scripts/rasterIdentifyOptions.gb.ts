// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetRasterIdentifyOptions } from './rasterIdentifyOptions';

export async function buildJsRasterIdentifyOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsRasterIdentifyOptions: any = {};

    if (hasValue(dotNetObject.multidimensionalDefinition)) {
        const { id, dotNetComponentReference, ...sanitizedMultidimensionalDefinition } = dotNetObject.multidimensionalDefinition;
        jsRasterIdentifyOptions.multidimensionalDefinition = sanitizedMultidimensionalDefinition;
    }
    if (hasValue(dotNetObject.signal)) {
        jsRasterIdentifyOptions.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.transposedVariableName)) {
        jsRasterIdentifyOptions.transposedVariableName = dotNetObject.transposedVariableName;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsRasterIdentifyOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRasterIdentifyOptions;
    
    return jsRasterIdentifyOptions;
}


export async function buildDotNetRasterIdentifyOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRasterIdentifyOptions: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.multidimensionalDefinition)) {
        dotNetRasterIdentifyOptions.multidimensionalDefinition = jsObject.multidimensionalDefinition;
    }
    if (hasValue(jsObject.signal)) {
        dotNetRasterIdentifyOptions.signal = jsObject.signal;
    }
    if (hasValue(jsObject.transposedVariableName)) {
        dotNetRasterIdentifyOptions.transposedVariableName = jsObject.transposedVariableName;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRasterIdentifyOptions.id = k;
                break;
            }
        }
    }

    return dotNetRasterIdentifyOptions;
}

