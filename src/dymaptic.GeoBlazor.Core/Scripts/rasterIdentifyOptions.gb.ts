// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetRasterIdentifyOptions } from './rasterIdentifyOptions';

export async function buildJsRasterIdentifyOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsRasterIdentifyOptions: any = {};
    if (hasValue(dotNetObject.multidimensionalDefinition) && dotNetObject.multidimensionalDefinition.length > 0) {
        let { buildJsDimensionalDefinition } = await import('./dimensionalDefinition');
        jsRasterIdentifyOptions.multidimensionalDefinition = await Promise.all(dotNetObject.multidimensionalDefinition.map(async i => await buildJsDimensionalDefinition(i))) as any;
    }

    if (hasValue(dotNetObject.signal)) {
        jsRasterIdentifyOptions.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.transposedVariableName)) {
        jsRasterIdentifyOptions.transposedVariableName = dotNetObject.transposedVariableName;
    }
    
    jsObjectRefs[dotNetObject.id] = jsRasterIdentifyOptions;
    arcGisObjectRefs[dotNetObject.id] = jsRasterIdentifyOptions;
    
    return jsRasterIdentifyOptions;
}


export async function buildDotNetRasterIdentifyOptionsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRasterIdentifyOptions: any = {};
    
    if (hasValue(jsObject.multidimensionalDefinition)) {
        let { buildDotNetDimensionalDefinition } = await import('./dimensionalDefinition');
        dotNetRasterIdentifyOptions.multidimensionalDefinition = await Promise.all(jsObject.multidimensionalDefinition.map(async i => await buildDotNetDimensionalDefinition(i)));
    }
    
    if (hasValue(jsObject.signal)) {
        dotNetRasterIdentifyOptions.signal = jsObject.signal;
    }
    
    if (hasValue(jsObject.transposedVariableName)) {
        dotNetRasterIdentifyOptions.transposedVariableName = jsObject.transposedVariableName;
    }
    

    return dotNetRasterIdentifyOptions;
}

