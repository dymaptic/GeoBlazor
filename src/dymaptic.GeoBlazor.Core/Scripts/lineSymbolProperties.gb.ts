// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, sanitize } from './arcGisJsInterop';
import { buildDotNetLineSymbolProperties } from './lineSymbolProperties';
export async function buildJsLineSymbolPropertiesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }
    
    switch (dotNetObject.type) {
        case 'any':
            let jsLineSymbolProperties: any = {};

            if (hasValue(dotNetObject.color)) {
                jsLineSymbolProperties.color = dotNetObject.color;
            }
            if (hasValue(dotNetObject.width)) {
                jsLineSymbolProperties.width = dotNetObject.width;
            }
    
            let jsObjectRef = DotNet.createJSObjectReference(jsLineSymbolProperties);
            jsObjectRefs[dotNetObject.id] = jsObjectRef;
            arcGisObjectRefs[dotNetObject.id] = jsLineSymbolProperties;
    
            return jsLineSymbolProperties;

        default: 
            return sanitize(dotNetObject);
    }
}     

export async function buildDotNetLineSymbolPropertiesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    switch (jsObject.type) {
        case 'any': 
        let dotNetLineSymbolProperties: any = {};
            if (hasValue(jsObject.color)) {
                dotNetLineSymbolProperties.color = jsObject.color;
            }
    
            if (hasValue(jsObject.type)) {
                dotNetLineSymbolProperties.type = jsObject.type;
            }
    
            if (hasValue(jsObject.width)) {
                dotNetLineSymbolProperties.width = jsObject.width;
            }
    

            return dotNetLineSymbolProperties;

        default: 
            return jsObject;
    }
}     

