// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetHistogramHistogramParams } from './histogramHistogramParams';

export async function buildJsHistogramHistogramParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jshistogramHistogramParams: any = {};
    if (hasValue(viewId)) {
        jshistogramHistogramParams.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.features)) {
        let { buildJsGraphic } = await import('./graphic');
        jshistogramHistogramParams.features = dotNetObject.features.map(i => buildJsGraphic(i)) as any;
    }
    if (hasValue(dotNetObject.filter)) {
        let { buildJsFeatureFilter } = await import('./featureFilter');
        jshistogramHistogramParams.filter = await buildJsFeatureFilter(dotNetObject.filter, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jshistogramHistogramParams.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.classificationMethod)) {
        jshistogramHistogramParams.classificationMethod = dotNetObject.classificationMethod;
    }
    if (hasValue(dotNetObject.field)) {
        jshistogramHistogramParams.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.forBinning)) {
        jshistogramHistogramParams.forBinning = dotNetObject.forBinning;
    }
    if (hasValue(dotNetObject.maxValue)) {
        jshistogramHistogramParams.maxValue = dotNetObject.maxValue;
    }
    if (hasValue(dotNetObject.minValue)) {
        jshistogramHistogramParams.minValue = dotNetObject.minValue;
    }
    if (hasValue(dotNetObject.normalizationField)) {
        jshistogramHistogramParams.normalizationField = dotNetObject.normalizationField;
    }
    if (hasValue(dotNetObject.normalizationTotal)) {
        jshistogramHistogramParams.normalizationTotal = dotNetObject.normalizationTotal;
    }
    if (hasValue(dotNetObject.normalizationType)) {
        jshistogramHistogramParams.normalizationType = dotNetObject.normalizationType;
    }
    if (hasValue(dotNetObject.numBins)) {
        jshistogramHistogramParams.numBins = dotNetObject.numBins;
    }
    if (hasValue(dotNetObject.signal)) {
        jshistogramHistogramParams.signal = dotNetObject.signal;
    }
    if (hasValue(dotNetObject.sqlExpression)) {
        jshistogramHistogramParams.sqlExpression = dotNetObject.sqlExpression;
    }
    if (hasValue(dotNetObject.sqlWhere)) {
        jshistogramHistogramParams.sqlWhere = dotNetObject.sqlWhere;
    }
    if (hasValue(dotNetObject.standardDeviationInterval)) {
        jshistogramHistogramParams.standardDeviationInterval = dotNetObject.standardDeviationInterval;
    }
    if (hasValue(dotNetObject.useFeaturesInView)) {
        jshistogramHistogramParams.useFeaturesInView = dotNetObject.useFeaturesInView;
    }
    if (hasValue(dotNetObject.valueExpression)) {
        jshistogramHistogramParams.valueExpression = dotNetObject.valueExpression;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jshistogramHistogramParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jshistogramHistogramParams;
    
    return jshistogramHistogramParams;
}


export async function buildDotNetHistogramHistogramParamsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetHistogramHistogramParams: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.features)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetHistogramHistogramParams.features = jsObject.features.map(i => buildDotNetGraphic(i, layerId, viewId));
    }
    if (hasValue(jsObject.filter)) {
        let { buildDotNetFeatureFilter } = await import('./featureFilter');
        dotNetHistogramHistogramParams.filter = await buildDotNetFeatureFilter(jsObject.filter);
    }
    if (hasValue(jsObject.classificationMethod)) {
        dotNetHistogramHistogramParams.classificationMethod = jsObject.classificationMethod;
    }
    if (hasValue(jsObject.field)) {
        dotNetHistogramHistogramParams.field = jsObject.field;
    }
    if (hasValue(jsObject.forBinning)) {
        dotNetHistogramHistogramParams.forBinning = jsObject.forBinning;
    }
    if (hasValue(jsObject.maxValue)) {
        dotNetHistogramHistogramParams.maxValue = jsObject.maxValue;
    }
    if (hasValue(jsObject.minValue)) {
        dotNetHistogramHistogramParams.minValue = jsObject.minValue;
    }
    if (hasValue(jsObject.normalizationField)) {
        dotNetHistogramHistogramParams.normalizationField = jsObject.normalizationField;
    }
    if (hasValue(jsObject.normalizationTotal)) {
        dotNetHistogramHistogramParams.normalizationTotal = jsObject.normalizationTotal;
    }
    if (hasValue(jsObject.normalizationType)) {
        dotNetHistogramHistogramParams.normalizationType = jsObject.normalizationType;
    }
    if (hasValue(jsObject.numBins)) {
        dotNetHistogramHistogramParams.numBins = jsObject.numBins;
    }
    if (hasValue(jsObject.signal)) {
        dotNetHistogramHistogramParams.signal = jsObject.signal;
    }
    if (hasValue(jsObject.sqlExpression)) {
        dotNetHistogramHistogramParams.sqlExpression = jsObject.sqlExpression;
    }
    if (hasValue(jsObject.sqlWhere)) {
        dotNetHistogramHistogramParams.sqlWhere = jsObject.sqlWhere;
    }
    if (hasValue(jsObject.standardDeviationInterval)) {
        dotNetHistogramHistogramParams.standardDeviationInterval = jsObject.standardDeviationInterval;
    }
    if (hasValue(jsObject.useFeaturesInView)) {
        dotNetHistogramHistogramParams.useFeaturesInView = jsObject.useFeaturesInView;
    }
    if (hasValue(jsObject.valueExpression)) {
        dotNetHistogramHistogramParams.valueExpression = jsObject.valueExpression;
    }

    return dotNetHistogramHistogramParams;
}

