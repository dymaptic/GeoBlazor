// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import NamedTraceConfiguration from '@arcgis/core/networks/support/NamedTraceConfiguration';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class NamedTraceConfigurationGenerated implements IPropertyWrapper {
    public component: NamedTraceConfiguration;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: NamedTraceConfiguration) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsNamedTraceConfigurationGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsNamedTraceConfiguration = new NamedTraceConfiguration();

    if (hasValue(dotNetObject.creationDate)) {
        jsNamedTraceConfiguration.creationDate = dotNetObject.creationDate;
    }
    if (hasValue(dotNetObject.creator)) {
        jsNamedTraceConfiguration.creator = dotNetObject.creator;
    }
    if (hasValue(dotNetObject.description)) {
        jsNamedTraceConfiguration.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.globalId)) {
        jsNamedTraceConfiguration.globalId = dotNetObject.globalId;
    }
    if (hasValue(dotNetObject.minStartingPoints)) {
        jsNamedTraceConfiguration.minStartingPoints = dotNetObject.minStartingPoints;
    }
    if (hasValue(dotNetObject.resultTypes)) {
        jsNamedTraceConfiguration.resultTypes = dotNetObject.resultTypes;
    }
    if (hasValue(dotNetObject.tags)) {
        jsNamedTraceConfiguration.tags = dotNetObject.tags;
    }
    if (hasValue(dotNetObject.title)) {
        jsNamedTraceConfiguration.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.traceConfiguration)) {
        jsNamedTraceConfiguration.traceConfiguration = dotNetObject.traceConfiguration;
    }
    if (hasValue(dotNetObject.traceType)) {
        jsNamedTraceConfiguration.traceType = dotNetObject.traceType;
    }
    let { default: NamedTraceConfigurationWrapper } = await import('./namedTraceConfiguration');
    let namedTraceConfigurationWrapper = new NamedTraceConfigurationWrapper(jsNamedTraceConfiguration);
    namedTraceConfigurationWrapper.geoBlazorId = dotNetObject.id;
    namedTraceConfigurationWrapper.viewId = viewId;
    namedTraceConfigurationWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(namedTraceConfigurationWrapper);
    jsObjectRefs[dotNetObject.id] = namedTraceConfigurationWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsNamedTraceConfiguration;
    
    let dnInstantiatedObject = await buildDotNetNamedTraceConfiguration(jsNamedTraceConfiguration, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for NamedTraceConfiguration', e);
    }
    
    return jsNamedTraceConfiguration;
}

export async function buildDotNetNamedTraceConfigurationGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetNamedTraceConfiguration: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.creationDate)) {
            dotNetNamedTraceConfiguration.creationDate = jsObject.creationDate;
        }
        if (hasValue(jsObject.creator)) {
            dotNetNamedTraceConfiguration.creator = jsObject.creator;
        }
        if (hasValue(jsObject.description)) {
            dotNetNamedTraceConfiguration.description = jsObject.description;
        }
        if (hasValue(jsObject.globalId)) {
            dotNetNamedTraceConfiguration.globalId = jsObject.globalId;
        }
        if (hasValue(jsObject.minStartingPoints)) {
            dotNetNamedTraceConfiguration.minStartingPoints = jsObject.minStartingPoints;
        }
        if (hasValue(jsObject.resultTypes)) {
            dotNetNamedTraceConfiguration.resultTypes = jsObject.resultTypes;
        }
        if (hasValue(jsObject.tags)) {
            dotNetNamedTraceConfiguration.tags = jsObject.tags;
        }
        if (hasValue(jsObject.title)) {
            dotNetNamedTraceConfiguration.title = jsObject.title;
        }
        if (hasValue(jsObject.traceConfiguration)) {
            dotNetNamedTraceConfiguration.traceConfiguration = jsObject.traceConfiguration;
        }
        if (hasValue(jsObject.traceType)) {
            dotNetNamedTraceConfiguration.traceType = jsObject.traceType;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetNamedTraceConfiguration.id = k;
                break;
            }
        }
    }

    return dotNetNamedTraceConfiguration;
}

