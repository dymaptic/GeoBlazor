// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import FrameTaskHandle = __esri.FrameTaskHandle;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FrameTaskHandleGenerated implements IPropertyWrapper {
    public component: FrameTaskHandle;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: FrameTaskHandle) {
        this.component = component;
    }

    // region methods

    unwrap() {
        return this.component;
    }

    async pause(): Promise<void> {
        this.component.pause();
    }

    async remove(): Promise<void> {
        this.component.remove();
    }

    async resume(): Promise<void> {
        this.component.resume();
    }

    // region properties

    getProperty(prop: string): any {
        return this.component[prop];
    }

    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsFrameTaskHandleGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFrameTaskHandle: any = {}


    let {default: FrameTaskHandleWrapper} = await import('./frameTaskHandle');
    let frameTaskHandleWrapper = new FrameTaskHandleWrapper(jsFrameTaskHandle);
    frameTaskHandleWrapper.geoBlazorId = dotNetObject.id;
    frameTaskHandleWrapper.viewId = viewId;
    frameTaskHandleWrapper.layerId = layerId;

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(frameTaskHandleWrapper);
    jsObjectRefs[dotNetObject.id] = frameTaskHandleWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsFrameTaskHandle;
    let {buildDotNetFrameTaskHandle} = await import('./frameTaskHandle');
    let dnInstantiatedObject = await buildDotNetFrameTaskHandle(jsFrameTaskHandle);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FrameTaskHandle', e);
    }

    return jsFrameTaskHandle;
}

export async function buildDotNetFrameTaskHandleGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetFrameTaskHandle: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFrameTaskHandle.id = k;
                break;
            }
        }
    }

    return dotNetFrameTaskHandle;
}

