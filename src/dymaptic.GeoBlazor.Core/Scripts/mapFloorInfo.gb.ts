// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import MapFloorInfo from '@arcgis/core/support/MapFloorInfo';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetMapFloorInfo } from './mapFloorInfo';

export async function buildJsMapFloorInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.facilityLayer)) {
        let { buildJsFacilityLayerInfo } = await import('./facilityLayerInfo');
        properties.facilityLayer = await buildJsFacilityLayerInfo(dotNetObject.facilityLayer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.levelLayer)) {
        let { buildJsLevelLayerInfo } = await import('./levelLayerInfo');
        properties.levelLayer = await buildJsLevelLayerInfo(dotNetObject.levelLayer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.siteLayer)) {
        let { buildJsSiteLayerInfo } = await import('./siteLayerInfo');
        properties.siteLayer = await buildJsSiteLayerInfo(dotNetObject.siteLayer, layerId, viewId) as any;
    }

    let jsMapFloorInfo = new MapFloorInfo(properties);
    
    jsObjectRefs[dotNetObject.id] = jsMapFloorInfo;
    arcGisObjectRefs[dotNetObject.id] = jsMapFloorInfo;
    
    return jsMapFloorInfo;
}


export async function buildDotNetMapFloorInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMapFloorInfo: any = {};
    
    if (hasValue(jsObject.facilityLayer)) {
        let { buildDotNetFacilityLayerInfo } = await import('./facilityLayerInfo');
        dotNetMapFloorInfo.facilityLayer = await buildDotNetFacilityLayerInfo(jsObject.facilityLayer);
    }
    
    if (hasValue(jsObject.levelLayer)) {
        let { buildDotNetLevelLayerInfo } = await import('./levelLayerInfo');
        dotNetMapFloorInfo.levelLayer = await buildDotNetLevelLayerInfo(jsObject.levelLayer);
    }
    
    if (hasValue(jsObject.siteLayer)) {
        let { buildDotNetSiteLayerInfo } = await import('./siteLayerInfo');
        dotNetMapFloorInfo.siteLayer = await buildDotNetSiteLayerInfo(jsObject.siteLayer);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetMapFloorInfo.id = geoBlazorId;
    }

    return dotNetMapFloorInfo;
}

