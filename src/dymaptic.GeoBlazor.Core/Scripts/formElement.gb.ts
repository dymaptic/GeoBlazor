// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Element from '@arcgis/core/form/elements/Element';
import { hasValue } from './arcGisJsInterop';
export async function buildJsFormElementGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }
    
    switch (dotNetObject.type) {
        case 'RelationshipRendererGenerator': 
            let { buildJsRelationshipElement } = await import('./relationshipElement');
            return await buildJsRelationshipElement(dotNetObject, layerId, viewId);
        case 'group': 
            let { buildJsGroupElement } = await import('./groupElement');
            return await buildJsGroupElement(dotNetObject, layerId, viewId);
        case 'text': 
            let { buildJsTextElement } = await import('./textElement');
            return await buildJsTextElement(dotNetObject, layerId, viewId);
        case 'field': 
            let { buildJsFieldElement } = await import('./fieldElement');
            return await buildJsFieldElement(dotNetObject, layerId, viewId);
        default: 
            let { id, dotNetComponentReference, layerId, viewId, ...sanitizedDotNetObject } = dotNetObject;
            return sanitizedDotNetObject;
    }
}     

export async function buildDotNetFormElementGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    switch (jsObject.type) {
        case 'RelationshipRendererGenerator': 
            let { buildDotNetRelationshipElement } = await import('./relationshipElement');
            return await buildDotNetRelationshipElement(jsObject);
        case 'group': 
            let { buildDotNetGroupElement } = await import('./groupElement');
            return await buildDotNetGroupElement(jsObject);
        case 'text': 
            let { buildDotNetTextElement } = await import('./textElement');
            return await buildDotNetTextElement(jsObject);
        case 'field': 
            let { buildDotNetFieldElement } = await import('./fieldElement');
            return await buildDotNetFieldElement(jsObject);
        default: 
            return jsObject;
    }
}     

