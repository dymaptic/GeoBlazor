// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import Element = __esri.Element;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FormElementGenerated implements IPropertyWrapper {
    public component: Element;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: Element) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsFormElementGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let Element = __esri.Element;
    let jsElement = new Element();
    if (hasValue(dotNetObject.description)) {
        jsElement.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.label)) {
        jsElement.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.visibilityExpression)) {
        jsElement.visibilityExpression = dotNetObject.visibilityExpression;
    }
    let { default: FormElementWrapper } = await import('./formElement');
    let formElementWrapper = new FormElementWrapper(jsElement);
    formElementWrapper.geoBlazorId = dotNetObject.id;
    formElementWrapper.viewId = viewId;
    formElementWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(formElementWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = formElementWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsElement;
    
    return jsElement;
}

export async function buildDotNetFormElementGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFormElement: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetFormElement.description = jsObject.description;
        dotNetFormElement.label = jsObject.label;
        dotNetFormElement.type = jsObject.type;
        dotNetFormElement.visibilityExpression = jsObject.visibilityExpression;
    return dotNetFormElement;
}

