// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetRasterMultidimensionalInfoVariables } from './rasterMultidimensionalInfoVariables';

export async function buildJsRasterMultidimensionalInfoVariablesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsRasterMultidimensionalInfoVariables: any = {};
    if (hasValue(dotNetObject.histograms) && dotNetObject.histograms.length > 0) {
        let { buildJsRasterHistogram } = await import('./rasterHistogram');
        jsRasterMultidimensionalInfoVariables.histograms = await Promise.all(dotNetObject.histograms.map(async i => await buildJsRasterHistogram(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.description)) {
        jsRasterMultidimensionalInfoVariables.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.dimensions) && dotNetObject.dimensions.length > 0) {
        jsRasterMultidimensionalInfoVariables.dimensions = dotNetObject.dimensions;
    }
    if (hasValue(dotNetObject.name)) {
        jsRasterMultidimensionalInfoVariables.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.statistics) && dotNetObject.statistics.length > 0) {
        jsRasterMultidimensionalInfoVariables.statistics = dotNetObject.statistics;
    }
    if (hasValue(dotNetObject.unit)) {
        jsRasterMultidimensionalInfoVariables.unit = dotNetObject.unit;
    }
    
    jsObjectRefs[dotNetObject.id] = jsRasterMultidimensionalInfoVariables;
    arcGisObjectRefs[dotNetObject.id] = jsRasterMultidimensionalInfoVariables;
    
    return jsRasterMultidimensionalInfoVariables;
}


export async function buildDotNetRasterMultidimensionalInfoVariablesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRasterMultidimensionalInfoVariables: any = {};
    
    if (hasValue(jsObject.histograms)) {
        let { buildDotNetRasterHistogram } = await import('./rasterHistogram');
        dotNetRasterMultidimensionalInfoVariables.histograms = await Promise.all(jsObject.histograms.map(async i => await buildDotNetRasterHistogram(i)));
    }
    
    if (hasValue(jsObject.description)) {
        dotNetRasterMultidimensionalInfoVariables.description = jsObject.description;
    }
    
    if (hasValue(jsObject.dimensions)) {
        dotNetRasterMultidimensionalInfoVariables.dimensions = removeCircularReferences(jsObject.dimensions);
    }
    
    if (hasValue(jsObject.name)) {
        dotNetRasterMultidimensionalInfoVariables.name = jsObject.name;
    }
    
    if (hasValue(jsObject.statistics)) {
        dotNetRasterMultidimensionalInfoVariables.statistics = removeCircularReferences(jsObject.statistics);
    }
    
    if (hasValue(jsObject.unit)) {
        dotNetRasterMultidimensionalInfoVariables.unit = jsObject.unit;
    }
    

    return dotNetRasterMultidimensionalInfoVariables;
}

