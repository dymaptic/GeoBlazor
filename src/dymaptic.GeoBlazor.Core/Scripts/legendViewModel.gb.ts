// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import LegendViewModel from '@arcgis/core/widgets/Legend/LegendViewModel';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';

export async function buildJsLegendViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.activeLayerInfos) && dotNetObject.activeLayerInfos.length > 0) {
        let { buildJsActiveLayerInfo } = await import('./activeLayerInfo');
        properties.activeLayerInfos = await Promise.all(dotNetObject.activeLayerInfos.map(async i => await buildJsActiveLayerInfo(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.layerInfos) && dotNetObject.layerInfos.length > 0) {
        let { buildJsLegendViewModelLayerInfos } = await import('./legendViewModelLayerInfos');
        properties.layerInfos = await Promise.all(dotNetObject.layerInfos.map(async i => await buildJsLegendViewModelLayerInfos(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.basemapLegendVisible)) {
        properties.basemapLegendVisible = dotNetObject.basemapLegendVisible;
    }
    if (hasValue(dotNetObject.hideLayersNotInCurrentView)) {
        properties.hideLayersNotInCurrentView = dotNetObject.hideLayersNotInCurrentView;
    }
    if (hasValue(dotNetObject.respectLayerVisibility)) {
        properties.respectLayerVisibility = dotNetObject.respectLayerVisibility;
    }
    let jsLegendViewModel = new LegendViewModel(properties);
    
    jsObjectRefs[dotNetObject.id] = jsLegendViewModel;
    arcGisObjectRefs[dotNetObject.id] = jsLegendViewModel;
    
    return jsLegendViewModel;
}


export async function buildDotNetLegendViewModelGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLegendViewModel: any = {};
    
    if (hasValue(jsObject.activeLayerInfos)) {
        let { buildDotNetActiveLayerInfo } = await import('./activeLayerInfo');
        dotNetLegendViewModel.activeLayerInfos = await Promise.all(jsObject.activeLayerInfos.map(async i => await buildDotNetActiveLayerInfo(i, viewId)));
    }
    
    if (hasValue(jsObject.layerInfos)) {
        let { buildDotNetLegendViewModelLayerInfos } = await import('./legendViewModelLayerInfos');
        dotNetLegendViewModel.layerInfos = await Promise.all(jsObject.layerInfos.map(async i => await buildDotNetLegendViewModelLayerInfos(i, viewId)));
    }
    
    if (hasValue(jsObject.basemapLegendVisible)) {
        dotNetLegendViewModel.basemapLegendVisible = jsObject.basemapLegendVisible;
    }
    
    if (hasValue(jsObject.hideLayersNotInCurrentView)) {
        dotNetLegendViewModel.hideLayersNotInCurrentView = jsObject.hideLayersNotInCurrentView;
    }
    
    if (hasValue(jsObject.respectLayerVisibility)) {
        dotNetLegendViewModel.respectLayerVisibility = jsObject.respectLayerVisibility;
    }
    
    if (hasValue(jsObject.state)) {
        dotNetLegendViewModel.state = removeCircularReferences(jsObject.state);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetLegendViewModel.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        if (hasValue(dotNetRef)) {
            try {
                dotNetLegendViewModel.id = await dotNetRef.invokeMethodAsync('GetId');
            } catch (e) {
                console.error('Error invoking GetId for LegendViewModel', e);
            }
        }
    }
    if (hasValue(dotNetLegendViewModel.id)) {
        jsObjectRefs[dotNetLegendViewModel.id] ??= jsObject;
        arcGisObjectRefs[dotNetLegendViewModel.id] ??= jsObject;
    }

    return dotNetLegendViewModel;
}

