// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import LegendViewModel from '@arcgis/core/widgets/Legend/LegendViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetLegendViewModel } from './legendViewModel';

export async function buildJsLegendViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.activeLayerInfos)) {
        let { buildJsActiveLayerInfo } = await import('./activeLayerInfo');
        properties.activeLayerInfos = await Promise.all(dotNetObject.activeLayerInfos.map(async i => await buildJsActiveLayerInfo(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.layerInfos)) {
        let { buildJsLegendViewModelLayerInfos } = await import('./legendViewModelLayerInfos');
        properties.layerInfos = await Promise.all(dotNetObject.layerInfos.map(async i => await buildJsLegendViewModelLayerInfos(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.basemapLegendVisible)) {
        properties.basemapLegendVisible = dotNetObject.basemapLegendVisible;
    }
    if (hasValue(dotNetObject.hideLayersNotInCurrentView)) {
        properties.hideLayersNotInCurrentView = dotNetObject.hideLayersNotInCurrentView;
    }
    if (hasValue(dotNetObject.respectLayerVisibility)) {
        properties.respectLayerVisibility = dotNetObject.respectLayerVisibility;
    }
    let jsLegendViewModel = new LegendViewModel(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsLegendViewModel);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLegendViewModel;
    
    let dnInstantiatedObject = await buildDotNetLegendViewModel(jsLegendViewModel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LegendViewModel', e);
    }
    
    return jsLegendViewModel;
}

export async function buildDotNetLegendViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLegendViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.activeLayerInfos)) {
            let { buildDotNetActiveLayerInfo } = await import('./activeLayerInfo');
            dotNetLegendViewModel.activeLayerInfos = await Promise.all(jsObject.activeLayerInfos.map(async i => await buildDotNetActiveLayerInfo(i)));
        }
        if (hasValue(jsObject.layerInfos)) {
            let { buildDotNetLegendViewModelLayerInfos } = await import('./legendViewModelLayerInfos');
            dotNetLegendViewModel.layerInfos = await Promise.all(jsObject.layerInfos.map(async i => await buildDotNetLegendViewModelLayerInfos(i)));
        }
    if (hasValue(jsObject.basemapLegendVisible)) {
        dotNetLegendViewModel.basemapLegendVisible = jsObject.basemapLegendVisible;
    }
    if (hasValue(jsObject.hideLayersNotInCurrentView)) {
        dotNetLegendViewModel.hideLayersNotInCurrentView = jsObject.hideLayersNotInCurrentView;
    }
    if (hasValue(jsObject.respectLayerVisibility)) {
        dotNetLegendViewModel.respectLayerVisibility = jsObject.respectLayerVisibility;
    }
    if (hasValue(jsObject.state)) {
        dotNetLegendViewModel.state = jsObject.state;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLegendViewModel.id = k;
                break;
            }
        }
    }

    return dotNetLegendViewModel;
}

