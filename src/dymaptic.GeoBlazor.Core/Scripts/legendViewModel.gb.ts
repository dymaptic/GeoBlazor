// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import LegendViewModel from '@arcgis/core/widgets/Legend/LegendViewModel';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class LegendViewModelGenerated implements IPropertyWrapper {
    public component: LegendViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: LegendViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getActiveLayerInfos(): Promise<any> {
        if (!hasValue(this.component.activeLayerInfos)) {
            return null;
        }
        
        let { buildDotNetActiveLayerInfo } = await import('./activeLayerInfo');
        return await Promise.all(this.component.activeLayerInfos.map(async i => await buildDotNetActiveLayerInfo(i)));
    }
    
    async setActiveLayerInfos(value: any): Promise<void> {
        let { buildJsActiveLayerInfo } = await import('./activeLayerInfo');
        this.component.activeLayerInfos = await Promise.all(value.map(async i => await buildJsActiveLayerInfo(i, this.layerId, this.viewId))) as any;
    }
    
    async getLayerInfos(): Promise<any> {
        if (!hasValue(this.component.layerInfos)) {
            return null;
        }
        
        let { buildDotNetLegendViewModelLayerInfos } = await import('./legendViewModelLayerInfos');
        return await Promise.all(this.component.layerInfos.map(async i => await buildDotNetLegendViewModelLayerInfos(i)));
    }
    
    async setLayerInfos(value: any): Promise<void> {
        let { buildJsLegendViewModelLayerInfos } = await import('./legendViewModelLayerInfos');
        this.component.layerInfos = await Promise.all(value.map(async i => await buildJsLegendViewModelLayerInfos(i, this.layerId, this.viewId))) as any;
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsLegendViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsLegendViewModel = new LegendViewModel();
    if (hasValue(dotNetObject.activeLayerInfos)) {
        let { buildJsActiveLayerInfo } = await import('./activeLayerInfo');
        jsLegendViewModel.activeLayerInfos = await Promise.all(dotNetObject.activeLayerInfos.map(async i => await buildJsActiveLayerInfo(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.layerInfos)) {
        let { buildJsLegendViewModelLayerInfos } = await import('./legendViewModelLayerInfos');
        jsLegendViewModel.layerInfos = await Promise.all(dotNetObject.layerInfos.map(async i => await buildJsLegendViewModelLayerInfos(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.basemapLegendVisible)) {
        jsLegendViewModel.basemapLegendVisible = dotNetObject.basemapLegendVisible;
    }
    if (hasValue(dotNetObject.hideLayersNotInCurrentView)) {
        jsLegendViewModel.hideLayersNotInCurrentView = dotNetObject.hideLayersNotInCurrentView;
    }
    if (hasValue(dotNetObject.respectLayerVisibility)) {
        jsLegendViewModel.respectLayerVisibility = dotNetObject.respectLayerVisibility;
    }
    if (hasValue(dotNetObject.view)) {
        jsLegendViewModel.view = dotNetObject.view;
    }
    let { default: LegendViewModelWrapper } = await import('./legendViewModel');
    let legendViewModelWrapper = new LegendViewModelWrapper(jsLegendViewModel);
    legendViewModelWrapper.geoBlazorId = dotNetObject.id;
    legendViewModelWrapper.viewId = viewId;
    legendViewModelWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(legendViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = legendViewModelWrapper;

    arcGisObjectRefs[dotNetObject.id] = jsLegendViewModel;
    let { buildDotNetLegendViewModel } = await import('./legendViewModel');
    let dnInstantiatedObject = await buildDotNetLegendViewModel(jsLegendViewModel, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LegendViewModel', e);
    }
    
    return jsLegendViewModel;
}

export async function buildDotNetLegendViewModelGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLegendViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.activeLayerInfos)) {
            let { buildDotNetActiveLayerInfo } = await import('./activeLayerInfo');
            dotNetLegendViewModel.activeLayerInfos = await Promise.all(jsObject.activeLayerInfos.map(async i => await buildDotNetActiveLayerInfo(i, layerId, viewId)));
        }
        if (hasValue(jsObject.layerInfos)) {
            let { buildDotNetLegendViewModelLayerInfos } = await import('./legendViewModelLayerInfos');
            dotNetLegendViewModel.layerInfos = await Promise.all(jsObject.layerInfos.map(async i => await buildDotNetLegendViewModelLayerInfos(i, layerId, viewId)));
        }
        if (hasValue(jsObject.basemapLegendVisible)) {
            dotNetLegendViewModel.basemapLegendVisible = jsObject.basemapLegendVisible;
        }
        if (hasValue(jsObject.hideLayersNotInCurrentView)) {
            dotNetLegendViewModel.hideLayersNotInCurrentView = jsObject.hideLayersNotInCurrentView;
        }
        if (hasValue(jsObject.respectLayerVisibility)) {
            dotNetLegendViewModel.respectLayerVisibility = jsObject.respectLayerVisibility;
        }
        if (hasValue(jsObject.state)) {
            dotNetLegendViewModel.state = jsObject.state;
        }
        if (hasValue(jsObject.view)) {
            dotNetLegendViewModel.view = jsObject.view;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLegendViewModel.id = k;
                break;
            }
        }
    }

    return dotNetLegendViewModel;
}

