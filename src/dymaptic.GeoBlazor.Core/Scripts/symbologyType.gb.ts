// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import symbologyType = __esri.symbologyType;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SymbologyTypeGenerated implements IPropertyWrapper {
    public component: symbologyType;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: symbologyType) {
        this.component = component;
    }

    // region methods

    unwrap() {
        return this.component;
    }

    async cloneScheme(scheme: any): Promise<any> {
        return this.component.cloneScheme(scheme);
    }

    async getSchemeByName(parameters: any): Promise<any> {
        let {buildJsTypeGetSchemeByNameParams} = await import('./typeGetSchemeByNameParams');
        let jsparameters = await buildJsTypeGetSchemeByNameParams(parameters, this.layerId, this.viewId) as any;
        return this.component.getSchemeByName(jsparameters);
    }

    async getSchemes(parameters: any): Promise<any> {
        let {buildJsTypeGetSchemesParams} = await import('./typeGetSchemesParams');
        let jsparameters = await buildJsTypeGetSchemesParams(parameters, this.layerId, this.viewId) as any;
        return this.component.getSchemes(jsparameters);
    }

    async getSchemesByTag(parameters: any): Promise<any> {
        let {buildJsTypeGetSchemesByTagParams} = await import('./typeGetSchemesByTagParams');
        let jsparameters = await buildJsTypeGetSchemesByTagParams(parameters, this.layerId, this.viewId) as any;
        return this.component.getSchemesByTag(jsparameters);
    }

    async getThemes(basemap: any): Promise<any> {
        return this.component.getThemes(basemap);
    }

    // region properties

    getProperty(prop: string): any {
        return this.component[prop];
    }

    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsSymbologyTypeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jssymbologyType: any = {}


    let {default: SymbologyTypeWrapper} = await import('./symbologyType');
    let symbologyTypeWrapper = new SymbologyTypeWrapper(jssymbologyType);
    symbologyTypeWrapper.geoBlazorId = dotNetObject.id;
    symbologyTypeWrapper.viewId = viewId;
    symbologyTypeWrapper.layerId = layerId;

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(symbologyTypeWrapper);
    jsObjectRefs[dotNetObject.id] = symbologyTypeWrapper;
    arcGisObjectRefs[dotNetObject.id] = jssymbologyType;
    let {buildDotNetSymbologyType} = await import('./symbologyType');
    let dnInstantiatedObject = await buildDotNetSymbologyType(jssymbologyType);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SymbologyType', e);
    }

    return jssymbologyType;
}

export async function buildDotNetSymbologyTypeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetSymbologyType: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSymbologyType.id = k;
                break;
            }
        }
    }

    return dotNetSymbologyType;
}

