// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetBookmarkOptions } from './bookmarkOptions';

export async function buildJsBookmarkOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsBookmarkOptions: any = {};
    if (hasValue(dotNetObject.screenshotSettings)) {
        let { buildJsBookmarkOptionsScreenshotSettings } = await import('./bookmarkOptionsScreenshotSettings');
        jsBookmarkOptions.screenshotSettings = await buildJsBookmarkOptionsScreenshotSettings(dotNetObject.screenshotSettings, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.captureRotation)) {
        jsBookmarkOptions.captureRotation = dotNetObject.captureRotation;
    }
    if (hasValue(dotNetObject.captureScale)) {
        jsBookmarkOptions.captureScale = dotNetObject.captureScale;
    }
    if (hasValue(dotNetObject.captureTimeExtent)) {
        jsBookmarkOptions.captureTimeExtent = dotNetObject.captureTimeExtent;
    }
    if (hasValue(dotNetObject.captureViewpoint)) {
        jsBookmarkOptions.captureViewpoint = dotNetObject.captureViewpoint;
    }
    if (hasValue(dotNetObject.takeScreenshot)) {
        jsBookmarkOptions.takeScreenshot = dotNetObject.takeScreenshot;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsBookmarkOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsBookmarkOptions;
    
    return jsBookmarkOptions;
}


export async function buildDotNetBookmarkOptionsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBookmarkOptions: any = {};
    
    if (hasValue(jsObject.screenshotSettings)) {
        let { buildDotNetBookmarkOptionsScreenshotSettings } = await import('./bookmarkOptionsScreenshotSettings');
        dotNetBookmarkOptions.screenshotSettings = await buildDotNetBookmarkOptionsScreenshotSettings(jsObject.screenshotSettings, layerId, viewId);
    }
    
    if (hasValue(jsObject.captureRotation)) {
        dotNetBookmarkOptions.captureRotation = jsObject.captureRotation;
    }
    
    if (hasValue(jsObject.captureScale)) {
        dotNetBookmarkOptions.captureScale = jsObject.captureScale;
    }
    
    if (hasValue(jsObject.captureTimeExtent)) {
        dotNetBookmarkOptions.captureTimeExtent = jsObject.captureTimeExtent;
    }
    
    if (hasValue(jsObject.captureViewpoint)) {
        dotNetBookmarkOptions.captureViewpoint = jsObject.captureViewpoint;
    }
    
    if (hasValue(jsObject.takeScreenshot)) {
        dotNetBookmarkOptions.takeScreenshot = jsObject.takeScreenshot;
    }
    

    return dotNetBookmarkOptions;
}

