// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import VersionManagementService from '@arcgis/core/versionManagement/VersionManagementService';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class VersionManagementServiceGenerated implements IPropertyWrapper {
    public component: VersionManagementService;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: VersionManagementService) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async alterVersion(versionIdentifier: any,
        props: any): Promise<any> {
        return await this.component.alterVersion(versionIdentifier,
            props);
    }

    async canRedo(versionIdentifier: any): Promise<any> {
        return this.component.canRedo(versionIdentifier);
    }

    async canUndo(versionIdentifier: any): Promise<any> {
        return this.component.canUndo(versionIdentifier);
    }

    async changeVersion(input: any,
        fromVersion: any,
        toVersion: any): Promise<any> {
        return await this.component.changeVersion(input,
            fromVersion,
            toVersion);
    }

    async changeVersionWithResult(input: any,
        fromVersion: any,
        toVersion: any): Promise<any> {
        return await this.component.changeVersionWithResult(input,
            fromVersion,
            toVersion);
    }

    async createVersion(props: any): Promise<any> {
        return await this.component.createVersion(props);
    }

    async deleteVersion(versionIdentifier: any): Promise<any> {
        return await this.component.deleteVersion(versionIdentifier);
    }

    async getLockType(versionIdentifier: any): Promise<any> {
        return this.component.getLockType(versionIdentifier);
    }

    async getVersionIdentifierFromGuid(guid: any): Promise<any> {
        return this.component.getVersionIdentifierFromGuid(guid);
    }

    async getVersionIdentifierFromName(name: any): Promise<any> {
        return this.component.getVersionIdentifierFromName(name);
    }

    async getVersionInfoExtended(versionIdentifier: any): Promise<any> {
        return await this.component.getVersionInfoExtended(versionIdentifier);
    }

    async getVersionInfos(props: any): Promise<any> {
        return await this.component.getVersionInfos(props);
    }

    async load(): Promise<any> {
        return await this.component.load();
    }

    async post(versionIdentifier: any): Promise<any> {
        return await this.component.post(versionIdentifier);
    }

    async reconcile(versionIdentifier: any,
        props: any): Promise<any> {
        return await this.component.reconcile(versionIdentifier,
            props);
    }

    async redo(versionIdentifier: any): Promise<void> {
        this.component.redo(versionIdentifier);
    }

    async startEditing(versionIdentifier: any): Promise<any> {
        return await this.component.startEditing(versionIdentifier);
    }

    async startEditingWithResult(versionIdentifier: any): Promise<any> {
        return await this.component.startEditingWithResult(versionIdentifier);
    }

    async startReading(versionIdentifier: any): Promise<any> {
        return await this.component.startReading(versionIdentifier);
    }

    async startReadingWithResult(versionIdentifier: any): Promise<any> {
        return await this.component.startReadingWithResult(versionIdentifier);
    }

    async stopEditing(versionIdentifier: any,
        saveEdits: any): Promise<any> {
        return await this.component.stopEditing(versionIdentifier,
            saveEdits);
    }

    async stopEditingWithResult(versionIdentifier: any,
        saveEdits: any): Promise<any> {
        return await this.component.stopEditingWithResult(versionIdentifier,
            saveEdits);
    }

    async stopReading(versionIdentifier: any): Promise<any> {
        return await this.component.stopReading(versionIdentifier);
    }

    async stopReadingWithResult(versionIdentifier: any): Promise<any> {
        return await this.component.stopReadingWithResult(versionIdentifier);
    }

    async undo(versionIdentifier: any): Promise<void> {
        this.component.undo(versionIdentifier);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsVersionManagementServiceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsVersionManagementService = new VersionManagementService();

    if (hasValue(dotNetObject.capabilities)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedCapabilities } = dotNetObject.capabilities;
        jsVersionManagementService.capabilities = sanitizedCapabilities;
    }
    if (hasValue(dotNetObject.defaultVersionIdentifier)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedDefaultVersionIdentifier } = dotNetObject.defaultVersionIdentifier;
        jsVersionManagementService.defaultVersionIdentifier = sanitizedDefaultVersionIdentifier;
    }
    if (hasValue(dotNetObject.name)) {
        jsVersionManagementService.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.url)) {
        jsVersionManagementService.url = dotNetObject.url;
    }

    let { default: VersionManagementServiceWrapper } = await import('./versionManagementService');
    let versionManagementServiceWrapper = new VersionManagementServiceWrapper(jsVersionManagementService);
    versionManagementServiceWrapper.geoBlazorId = dotNetObject.id;
    versionManagementServiceWrapper.viewId = viewId;
    versionManagementServiceWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(versionManagementServiceWrapper);
    jsObjectRefs[dotNetObject.id] = versionManagementServiceWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsVersionManagementService;
    let { buildDotNetVersionManagementService } = await import('./versionManagementService');
    let dnInstantiatedObject = await buildDotNetVersionManagementService(jsVersionManagementService);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for VersionManagementService', e);
    }
    
    return jsVersionManagementService;
}

export async function buildDotNetVersionManagementServiceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVersionManagementService: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.capabilities)) {
            dotNetVersionManagementService.capabilities = jsObject.capabilities;
        }
        if (hasValue(jsObject.defaultVersionIdentifier)) {
            dotNetVersionManagementService.defaultVersionIdentifier = jsObject.defaultVersionIdentifier;
        }
        if (hasValue(jsObject.loaded)) {
            dotNetVersionManagementService.loaded = jsObject.loaded;
        }
        if (hasValue(jsObject.loadError)) {
            dotNetVersionManagementService.loadError = jsObject.loadError;
        }
        if (hasValue(jsObject.loadStatus)) {
            dotNetVersionManagementService.loadStatus = jsObject.loadStatus;
        }
        if (hasValue(jsObject.name)) {
            dotNetVersionManagementService.name = jsObject.name;
        }
        if (hasValue(jsObject.url)) {
            dotNetVersionManagementService.url = jsObject.url;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetVersionManagementService.id = k;
                break;
            }
        }
    }

    return dotNetVersionManagementService;
}

