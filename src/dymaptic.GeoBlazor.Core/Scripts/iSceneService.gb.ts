// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetISceneService } from './iSceneService';

export async function buildJsISceneServiceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSceneService: any = {};
    if (hasValue(dotNetObject.spatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        jsSceneService.spatialReference = buildJsSpatialReference(dotNetObject.spatialReference) as any;
    }

    if (hasValue(dotNetObject.copyright)) {
        jsSceneService.copyright = dotNetObject.copyright;
    }
    if (hasValue(dotNetObject.sceneServiceLayerId)) {
        jsSceneService.layerId = dotNetObject.sceneServiceLayerId;
    }
    if (hasValue(dotNetObject.url)) {
        jsSceneService.url = dotNetObject.url;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSceneService);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSceneService;
    
    let dnInstantiatedObject = await buildDotNetISceneService(jsSceneService);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ISceneService', e);
    }
    
    return jsSceneService;
}

export async function buildDotNetISceneServiceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetISceneService: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.spatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetISceneService.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference);
        }
    if (hasValue(jsObject.copyright)) {
        dotNetISceneService.copyright = jsObject.copyright;
    }
    if (hasValue(jsObject.layerId)) {
        dotNetISceneService.sceneServiceLayerId = jsObject.layerId;
    }
    if (hasValue(jsObject.url)) {
        dotNetISceneService.url = jsObject.url;
    }
    if (hasValue(jsObject.version)) {
        dotNetISceneService.version = jsObject.version;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetISceneService.id = k;
                break;
            }
        }
    }

    return dotNetISceneService;
}

