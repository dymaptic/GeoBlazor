// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetISceneService } from './iSceneService';

export async function buildJsISceneServiceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsSceneService: any = {};
    if (hasValue(dotNetObject.spatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        jsSceneService.spatialReference = buildJsSpatialReference(dotNetObject.spatialReference, viewId) as any;
    }

    if (hasValue(dotNetObject.copyright)) {
        jsSceneService.copyright = dotNetObject.copyright;
    }
    if (hasValue(dotNetObject.sceneServiceLayerId)) {
        jsSceneService.layerId = dotNetObject.sceneServiceLayerId;
    }
    if (hasValue(dotNetObject.url)) {
        jsSceneService.url = dotNetObject.url;
    }
    
    jsObjectRefs[dotNetObject.id] = jsSceneService;
    arcGisObjectRefs[dotNetObject.id] = jsSceneService;
    
    return jsSceneService;
}


export async function buildDotNetISceneServiceGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetISceneService: any = {};
    
    if (hasValue(jsObject.spatialReference)) {
        let { buildDotNetSpatialReference } = await import('./spatialReference');
        dotNetISceneService.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference, viewId);
    }
    
    if (hasValue(jsObject.copyright)) {
        dotNetISceneService.copyright = jsObject.copyright;
    }
    
    if (hasValue(jsObject.layerId)) {
        dotNetISceneService.sceneServiceLayerId = jsObject.layerId;
    }
    
    if (hasValue(jsObject.url)) {
        dotNetISceneService.url = jsObject.url;
    }
    
    if (hasValue(jsObject.version)) {
        dotNetISceneService.version = removeCircularReferences(jsObject.version);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetISceneService.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetISceneService.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetISceneService.id)) {
        jsObjectRefs[dotNetISceneService.id] ??= jsObject;
        arcGisObjectRefs[dotNetISceneService.id] ??= jsObject;
    }

    return dotNetISceneService;
}

