// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetRequestInterceptor } from './requestInterceptor';

export async function buildJsRequestInterceptorGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsRequestInterceptor: any = {};
    if (hasValue(dotNetObject.hasAfter) && dotNetObject.hasAfter) {
        jsRequestInterceptor.after = async (response) => {

            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsAfter', response);
        };
    }
    if (hasValue(dotNetObject.hasBefore) && dotNetObject.hasBefore) {
        jsRequestInterceptor.before = async (parameters) => {

            let func = new Function('parameters', dotNetObject.before.javaScriptFunction);
            return func(parameters);
        };
    }
    if (hasValue(dotNetObject.hasError) && dotNetObject.hasError) {
        jsRequestInterceptor.error = async (error) => {

            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsError', error);
        };
    }

    if (hasValue(dotNetObject.headers)) {
        jsRequestInterceptor.headers = dotNetObject.headers;
    }
    if (hasValue(dotNetObject.query)) {
        jsRequestInterceptor.query = dotNetObject.query;
    }
    if (hasValue(dotNetObject.responseData)) {
        jsRequestInterceptor.responseData = dotNetObject.responseData;
    }
    if (hasValue(dotNetObject.urls)) {
        jsRequestInterceptor.urls = dotNetObject.urls;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsRequestInterceptor);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRequestInterceptor;
    
    let { buildDotNetRequestInterceptor } = await import('./requestInterceptor');
    let dnInstantiatedObject = await buildDotNetRequestInterceptor(jsRequestInterceptor);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type RequestInterceptor detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RequestInterceptor', e);
    }
    
    return jsRequestInterceptor;
}


export async function buildDotNetRequestInterceptorGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRequestInterceptor: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.after)) {
        dotNetRequestInterceptor.after = jsObject.after;
    }
    if (hasValue(jsObject.before)) {
        dotNetRequestInterceptor.before = jsObject.before;
    }
    if (hasValue(jsObject.error)) {
        dotNetRequestInterceptor.error = jsObject.error;
    }
    if (hasValue(jsObject.headers)) {
        dotNetRequestInterceptor.headers = jsObject.headers;
    }
    if (hasValue(jsObject.query)) {
        dotNetRequestInterceptor.query = jsObject.query;
    }
    if (hasValue(jsObject.responseData)) {
        dotNetRequestInterceptor.responseData = jsObject.responseData;
    }
    if (hasValue(jsObject.urls)) {
        dotNetRequestInterceptor.urls = jsObject.urls;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetRequestInterceptor.id = geoBlazorId;
    }

    return dotNetRequestInterceptor;
}

