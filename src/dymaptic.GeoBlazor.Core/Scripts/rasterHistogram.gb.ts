// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetRasterHistogram } from './rasterHistogram';

export async function buildJsRasterHistogramGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsRasterHistogram: any = {};

    if (hasValue(dotNetObject.counts) && dotNetObject.counts.length > 0) {
        jsRasterHistogram.counts = dotNetObject.counts;
    }
    if (hasValue(dotNetObject.max)) {
        jsRasterHistogram.max = dotNetObject.max;
    }
    if (hasValue(dotNetObject.min)) {
        jsRasterHistogram.min = dotNetObject.min;
    }
    if (hasValue(dotNetObject.size)) {
        jsRasterHistogram.size = dotNetObject.size;
    }
    
    jsObjectRefs[dotNetObject.id] = jsRasterHistogram;
    arcGisObjectRefs[dotNetObject.id] = jsRasterHistogram;
    
    return jsRasterHistogram;
}


export async function buildDotNetRasterHistogramGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRasterHistogram: any = {};
    
    if (hasValue(jsObject.counts)) {
        dotNetRasterHistogram.counts = jsObject.counts;
    }
    
    if (hasValue(jsObject.max)) {
        dotNetRasterHistogram.max = jsObject.max;
    }
    
    if (hasValue(jsObject.min)) {
        dotNetRasterHistogram.min = jsObject.min;
    }
    
    if (hasValue(jsObject.size)) {
        dotNetRasterHistogram.size = jsObject.size;
    }
    

    return dotNetRasterHistogram;
}

