// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetVersionInfo } from './versionInfo';

export async function buildJsVersionInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsVersionInfo: any = {};
    if (hasValue(dotNetObject.versionIdentifier)) {
        let { buildJsVersionInfoVersionIdentifier } = await import('./versionInfoVersionIdentifier');
        jsVersionInfo.versionIdentifier = await buildJsVersionInfoVersionIdentifier(dotNetObject.versionIdentifier, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.access)) {
        jsVersionInfo.access = dotNetObject.access;
    }
    if (hasValue(dotNetObject.commonAncestorDate)) {
        jsVersionInfo.commonAncestorDate = dotNetObject.commonAncestorDate;
    }
    if (hasValue(dotNetObject.creationDate)) {
        jsVersionInfo.creationDate = dotNetObject.creationDate;
    }
    if (hasValue(dotNetObject.description)) {
        jsVersionInfo.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.evaluationDate)) {
        jsVersionInfo.evaluationDate = dotNetObject.evaluationDate;
    }
    if (hasValue(dotNetObject.modifiedDate)) {
        jsVersionInfo.modifiedDate = dotNetObject.modifiedDate;
    }
    if (hasValue(dotNetObject.previousAncestorDate)) {
        jsVersionInfo.previousAncestorDate = dotNetObject.previousAncestorDate;
    }
    if (hasValue(dotNetObject.reconcileDate)) {
        jsVersionInfo.reconcileDate = dotNetObject.reconcileDate;
    }
    if (hasValue(dotNetObject.versionId)) {
        jsVersionInfo.versionId = dotNetObject.versionId;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsVersionInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsVersionInfo;
    
    return jsVersionInfo;
}


export async function buildDotNetVersionInfoGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsVersionInfo } = await import('./versionInfo');
        jsComponentRef = await buildJsVersionInfo(jsObject, layerId, viewId);
    }
    
    let dotNetVersionInfo: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.versionIdentifier)) {
        let { buildDotNetVersionInfoVersionIdentifier } = await import('./versionInfoVersionIdentifier');
        dotNetVersionInfo.versionIdentifier = await buildDotNetVersionInfoVersionIdentifier(jsObject.versionIdentifier, layerId, viewId);
    }
    if (hasValue(jsObject.access)) {
        dotNetVersionInfo.access = jsObject.access;
    }
    if (hasValue(jsObject.commonAncestorDate)) {
        dotNetVersionInfo.commonAncestorDate = jsObject.commonAncestorDate;
    }
    if (hasValue(jsObject.creationDate)) {
        dotNetVersionInfo.creationDate = jsObject.creationDate;
    }
    if (hasValue(jsObject.description)) {
        dotNetVersionInfo.description = jsObject.description;
    }
    if (hasValue(jsObject.evaluationDate)) {
        dotNetVersionInfo.evaluationDate = jsObject.evaluationDate;
    }
    if (hasValue(jsObject.modifiedDate)) {
        dotNetVersionInfo.modifiedDate = jsObject.modifiedDate;
    }
    if (hasValue(jsObject.previousAncestorDate)) {
        dotNetVersionInfo.previousAncestorDate = jsObject.previousAncestorDate;
    }
    if (hasValue(jsObject.reconcileDate)) {
        dotNetVersionInfo.reconcileDate = jsObject.reconcileDate;
    }
    if (hasValue(jsObject.versionId)) {
        dotNetVersionInfo.versionId = jsObject.versionId;
    }

    return dotNetVersionInfo;
}

