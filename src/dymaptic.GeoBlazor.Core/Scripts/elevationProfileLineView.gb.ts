// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ElevationProfileLineView from '@arcgis/core/widgets/ElevationProfile/ElevationProfileLineView';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetElevationProfileLineView } from './elevationProfileLineView';

export async function buildJsElevationProfileLineViewGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        properties.color = buildJsMapColor(dotNetObject.color) as any;
    }

    if (hasValue(dotNetObject.elevationProfileLineId)) {
        properties.id = dotNetObject.elevationProfileLineId;
    }
    if (hasValue(dotNetObject.exclude)) {
        properties.exclude = dotNetObject.exclude;
    }
    if (hasValue(dotNetObject.include)) {
        properties.include = dotNetObject.include;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.viewVisualizationEnabled)) {
        properties.viewVisualizationEnabled = dotNetObject.viewVisualizationEnabled;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    let jsElevationProfileLineView = new ElevationProfileLineView(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsElevationProfileLineView);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsElevationProfileLineView;
    
    return jsElevationProfileLineView;
}


export async function buildDotNetElevationProfileLineViewGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetElevationProfileLineView: any = {};
    
    if (hasValue(jsObject.color)) {
        let { buildDotNetMapColor } = await import('./mapColor');
        dotNetElevationProfileLineView.color = buildDotNetMapColor(jsObject.color);
    }
    
    if (hasValue(jsObject.hoveredPoint)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetElevationProfileLineView.hoveredPoint = buildDotNetPoint(jsObject.hoveredPoint);
    }
    
    if (hasValue(jsObject.id)) {
        dotNetElevationProfileLineView.elevationProfileLineId = jsObject.id;
    }
    
    if (hasValue(jsObject.exclude)) {
        dotNetElevationProfileLineView.exclude = removeCircularReferences(jsObject.exclude);
    }
    
    if (hasValue(jsObject.include)) {
        dotNetElevationProfileLineView.include = removeCircularReferences(jsObject.include);
    }
    
    if (hasValue(jsObject.progress)) {
        dotNetElevationProfileLineView.progress = jsObject.progress;
    }
    
    if (hasValue(jsObject.samples)) {
        dotNetElevationProfileLineView.samples = removeCircularReferences(jsObject.samples);
    }
    
    if (hasValue(jsObject.statistics)) {
        dotNetElevationProfileLineView.statistics = removeCircularReferences(jsObject.statistics);
    }
    
    if (hasValue(jsObject.title)) {
        dotNetElevationProfileLineView.title = jsObject.title;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetElevationProfileLineView.type = removeCircularReferences(jsObject.type);
    }
    
    if (hasValue(jsObject.viewVisualizationEnabled)) {
        dotNetElevationProfileLineView.viewVisualizationEnabled = jsObject.viewVisualizationEnabled;
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetElevationProfileLineView.visible = jsObject.visible;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetElevationProfileLineView.id = geoBlazorId;
    }

    return dotNetElevationProfileLineView;
}

