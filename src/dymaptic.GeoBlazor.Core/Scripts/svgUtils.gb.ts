// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import svgUtils = __esri.svgUtils;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SvgUtilsGenerated implements IPropertyWrapper {
    public component: svgUtils;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: svgUtils) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async computeBBox(bboxes: any): Promise<any> {
        return this.component.computeBBox(bboxes);
    }

    async getBoundingBox(shape: any): Promise<any> {
        return this.component.getBoundingBox(shape);
    }

    async getTransformMatrix(bbox: any,
        width: any,
        height: any,
        overallStrokeWidth: any,
        scale: any,
        rotation: any,
        useRotationSize: any,
        offset: any,
        bloomSize: any): Promise<any> {
        return this.component.getTransformMatrix(bbox,
            width,
            height,
            overallStrokeWidth,
            scale,
            rotation,
            useRotationSize,
            offset,
            bloomSize);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsSvgUtilsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jssvgUtils: any = {}


    let { default: SvgUtilsWrapper } = await import('./svgUtils');
    let svgUtilsWrapper = new SvgUtilsWrapper(jssvgUtils);
    svgUtilsWrapper.geoBlazorId = dotNetObject.id;
    svgUtilsWrapper.viewId = viewId;
    svgUtilsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(svgUtilsWrapper);
    jsObjectRefs[dotNetObject.id] = svgUtilsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jssvgUtils;
    let { buildDotNetSvgUtils } = await import('./svgUtils');
    let dnInstantiatedObject = await buildDotNetSvgUtils(jssvgUtils);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SvgUtils', e);
    }
    
    return jssvgUtils;
}

export async function buildDotNetSvgUtilsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSvgUtils: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSvgUtils.id = k;
                break;
            }
        }
    }

    return dotNetSvgUtils;
}

