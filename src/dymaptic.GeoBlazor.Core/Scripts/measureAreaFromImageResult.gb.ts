import {buildDotNetMeasureAreaFromImageResult} from './measureAreaFromImageResult';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import MeasureAreaFromImageResult from '@arcgis/core/rest/support/MeasureAreaFromImageResult';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsMeasureAreaFromImageResultGenerated(dotNetObject: any): Promise<any> {
    let jsMeasureAreaFromImageResult = new MeasureAreaFromImageResult();
    if (hasValue(dotNetObject.center)) {
        let {buildJsPoint} = await import('./point');
        jsMeasureAreaFromImageResult.center = buildJsPoint(dotNetObject.center) as any;
    }
    if (hasValue(dotNetObject.geometry)) {
        let {buildJsPolygon} = await import('./polygon');
        jsMeasureAreaFromImageResult.geometry = buildJsPolygon(dotNetObject.geometry) as any;
    }

    if (hasValue(dotNetObject.area)) {
        jsMeasureAreaFromImageResult.area = dotNetObject.area;
    }
    if (hasValue(dotNetObject.length)) {
        jsMeasureAreaFromImageResult.length = dotNetObject.length;
    }

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsMeasureAreaFromImageResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsMeasureAreaFromImageResult;

    let dnInstantiatedObject = await buildDotNetMeasureAreaFromImageResult(jsMeasureAreaFromImageResult);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for MeasureAreaFromImageResult', e);
    }

    return jsMeasureAreaFromImageResult;
}

export async function buildDotNetMeasureAreaFromImageResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetMeasureAreaFromImageResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.center)) {
        let {buildDotNetPoint} = await import('./point');
        dotNetMeasureAreaFromImageResult.center = buildDotNetPoint(jsObject.center);
    }
    if (hasValue(jsObject.geometry)) {
        let {buildDotNetPolygon} = await import('./polygon');
        dotNetMeasureAreaFromImageResult.geometry = buildDotNetPolygon(jsObject.geometry);
    }
    if (hasValue(jsObject.area)) {
        dotNetMeasureAreaFromImageResult.area = jsObject.area;
    }
    if (hasValue(jsObject.length)) {
        dotNetMeasureAreaFromImageResult.length = jsObject.length;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetMeasureAreaFromImageResult.id = k;
                break;
            }
        }
    }

    return dotNetMeasureAreaFromImageResult;
}

