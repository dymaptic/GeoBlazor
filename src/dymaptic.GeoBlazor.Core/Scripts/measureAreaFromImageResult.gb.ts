// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import MeasureAreaFromImageResult from '@arcgis/core/rest/support/MeasureAreaFromImageResult';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetMeasureAreaFromImageResult } from './measureAreaFromImageResult';

export async function buildJsMeasureAreaFromImageResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.center)) {
        let { buildJsPoint } = await import('./point');
        properties.center = buildJsPoint(dotNetObject.center) as any;
    }
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsPolygon } = await import('./polygon');
        properties.geometry = buildJsPolygon(dotNetObject.geometry) as any;
    }

    if (hasValue(dotNetObject.area)) {
        properties.area = dotNetObject.area;
    }
    if (hasValue(dotNetObject.length)) {
        properties.length = dotNetObject.length;
    }
    let jsMeasureAreaFromImageResult = new MeasureAreaFromImageResult(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsMeasureAreaFromImageResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsMeasureAreaFromImageResult;
    
    let { buildDotNetMeasureAreaFromImageResult } = await import('./measureAreaFromImageResult');
    let dnInstantiatedObject = await buildDotNetMeasureAreaFromImageResult(jsMeasureAreaFromImageResult);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type MeasureAreaFromImageResult detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for MeasureAreaFromImageResult', e);
    }
    
    return jsMeasureAreaFromImageResult;
}


export async function buildDotNetMeasureAreaFromImageResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMeasureAreaFromImageResult: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.center)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetMeasureAreaFromImageResult.center = buildDotNetPoint(jsObject.center);
    }
    if (hasValue(jsObject.geometry)) {
        let { buildDotNetPolygon } = await import('./polygon');
        dotNetMeasureAreaFromImageResult.geometry = buildDotNetPolygon(jsObject.geometry);
    }
    if (hasValue(jsObject.area)) {
        dotNetMeasureAreaFromImageResult.area = jsObject.area;
    }
    if (hasValue(jsObject.length)) {
        dotNetMeasureAreaFromImageResult.length = jsObject.length;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetMeasureAreaFromImageResult.id = k;
                break;
            }
        }
    }

    return dotNetMeasureAreaFromImageResult;
}

