// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import MeasureAreaFromImageResult from '@arcgis/core/rest/support/MeasureAreaFromImageResult';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetMeasureAreaFromImageResult } from './measureAreaFromImageResult';

export async function buildJsMeasureAreaFromImageResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.center)) {
        let { buildJsPoint } = await import('./point');
        properties.center = buildJsPoint(dotNetObject.center) as any;
    }
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsPolygon } = await import('./polygon');
        properties.geometry = buildJsPolygon(dotNetObject.geometry) as any;
    }

    if (hasValue(dotNetObject.area)) {
        properties.area = dotNetObject.area;
    }
    if (hasValue(dotNetObject.length)) {
        properties.length = dotNetObject.length;
    }
    let jsMeasureAreaFromImageResult = new MeasureAreaFromImageResult(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsMeasureAreaFromImageResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsMeasureAreaFromImageResult;
    
    return jsMeasureAreaFromImageResult;
}


export async function buildDotNetMeasureAreaFromImageResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsMeasureAreaFromImageResult } = await import('./measureAreaFromImageResult');
        jsComponentRef = await buildJsMeasureAreaFromImageResult(jsObject, layerId, viewId);
    }
    
    let dotNetMeasureAreaFromImageResult: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.center)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetMeasureAreaFromImageResult.center = buildDotNetPoint(jsObject.center);
    }
    if (hasValue(jsObject.geometry)) {
        let { buildDotNetPolygon } = await import('./polygon');
        dotNetMeasureAreaFromImageResult.geometry = buildDotNetPolygon(jsObject.geometry);
    }
    if (hasValue(jsObject.area)) {
        dotNetMeasureAreaFromImageResult.area = jsObject.area;
    }
    if (hasValue(jsObject.length)) {
        dotNetMeasureAreaFromImageResult.length = jsObject.length;
    }

    return dotNetMeasureAreaFromImageResult;
}

