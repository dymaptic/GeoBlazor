// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import TextAreaInput from '@arcgis/core/form/elements/inputs/TextAreaInput';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetTextAreaInput } from './textAreaInput';

export async function buildJsTextAreaInputGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.maxLength)) {
        properties.maxLength = dotNetObject.maxLength;
    }
    if (hasValue(dotNetObject.minLength)) {
        properties.minLength = dotNetObject.minLength;
    }
    let jsTextAreaInput = new TextAreaInput(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsTextAreaInput);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTextAreaInput;
    
    return jsTextAreaInput;
}


export async function buildDotNetTextAreaInputGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTextAreaInput: any = {};
    
    if (hasValue(jsObject.maxLength)) {
        dotNetTextAreaInput.maxLength = jsObject.maxLength;
    }
    
    if (hasValue(jsObject.minLength)) {
        dotNetTextAreaInput.minLength = jsObject.minLength;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetTextAreaInput.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetTextAreaInput.id = geoBlazorId;
    }

    return dotNetTextAreaInput;
}

