import {buildDotNetFormat} from './format';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import Format from '@arcgis/core/widgets/CoordinateConversion/support/Format';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsFormatGenerated(dotNetObject: any): Promise<any> {
    let jsFormat = new Format();
    if (hasValue(dotNetObject.spatialReference)) {
        let {buildJsSpatialReference} = await import('./spatialReference');
        jsFormat.spatialReference = buildJsSpatialReference(dotNetObject.spatialReference) as any;
    }
    if (hasValue(dotNetObject.viewModel)) {
        let {buildJsCoordinateConversionViewModel} = await import('./coordinateConversionViewModel');
        jsFormat.viewModel = await buildJsCoordinateConversionViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.conversionInfo)) {
        const {id, dotNetComponentReference, layerId, viewId, ...sanitizedConversionInfo} = dotNetObject.conversionInfo;
        jsFormat.conversionInfo = sanitizedConversionInfo;
    }
    if (hasValue(dotNetObject.coordinateSegments)) {
        const {
            id,
            dotNetComponentReference,
            layerId,
            viewId,
            ...sanitizedCoordinateSegments
        } = dotNetObject.coordinateSegments;
        jsFormat.coordinateSegments = sanitizedCoordinateSegments;
    }
    if (hasValue(dotNetObject.currentPattern)) {
        jsFormat.currentPattern = dotNetObject.currentPattern;
    }
    if (hasValue(dotNetObject.defaultPattern)) {
        jsFormat.defaultPattern = dotNetObject.defaultPattern;
    }
    if (hasValue(dotNetObject.label)) {
        jsFormat.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.name)) {
        jsFormat.name = dotNetObject.name;
    }

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsFormat);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFormat;

    let dnInstantiatedObject = await buildDotNetFormat(jsFormat);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Format', e);
    }

    return jsFormat;
}

export async function buildDotNetFormatGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetFormat: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.spatialReference)) {
        let {buildDotNetSpatialReference} = await import('./spatialReference');
        dotNetFormat.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference);
    }
    if (hasValue(jsObject.viewModel)) {
        let {buildDotNetCoordinateConversionViewModel} = await import('./coordinateConversionViewModel');
        dotNetFormat.viewModel = await buildDotNetCoordinateConversionViewModel(jsObject.viewModel);
    }
    if (hasValue(jsObject.conversionInfo)) {
        dotNetFormat.conversionInfo = jsObject.conversionInfo;
    }
    if (hasValue(jsObject.coordinateSegments)) {
        dotNetFormat.coordinateSegments = jsObject.coordinateSegments;
    }
    if (hasValue(jsObject.currentPattern)) {
        dotNetFormat.currentPattern = jsObject.currentPattern;
    }
    if (hasValue(jsObject.defaultPattern)) {
        dotNetFormat.defaultPattern = jsObject.defaultPattern;
    }
    if (hasValue(jsObject.label)) {
        dotNetFormat.label = jsObject.label;
    }
    if (hasValue(jsObject.name)) {
        dotNetFormat.name = jsObject.name;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFormat.id = k;
                break;
            }
        }
    }

    return dotNetFormat;
}

