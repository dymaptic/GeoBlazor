import { buildDotNetServiceDefinition } from './serviceDefinition';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import ServiceDefinition from '@arcgis/core/rest/knowledgeGraph/ServiceDefinition';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsServiceDefinitionGenerated(dotNetObject: any): Promise<any> {
    let jsServiceDefinition = new ServiceDefinition();

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsServiceDefinition);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsServiceDefinition;
    
    let dnInstantiatedObject = await buildDotNetServiceDefinition(jsServiceDefinition);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ServiceDefinition', e);
    }
    
    return jsServiceDefinition;
}
export async function buildDotNetServiceDefinitionGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetServiceDefinition: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.spatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetServiceDefinition.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference);
        }
        if (hasValue(jsObject.allowGeometryUpdates)) {
            dotNetServiceDefinition.allowGeometryUpdates = jsObject.allowGeometryUpdates;
        }
        if (hasValue(jsObject.capabilities)) {
            dotNetServiceDefinition.capabilities = jsObject.capabilities;
        }
        if (hasValue(jsObject.copyrightText)) {
            dotNetServiceDefinition.copyrightText = jsObject.copyrightText;
        }
        if (hasValue(jsObject.currentVersion)) {
            dotNetServiceDefinition.currentVersion = jsObject.currentVersion;
        }
        if (hasValue(jsObject.dataEditingNotSupported)) {
            dotNetServiceDefinition.dataEditingNotSupported = jsObject.dataEditingNotSupported;
        }
        if (hasValue(jsObject.dateFieldsTimeReference)) {
            dotNetServiceDefinition.dateFieldsTimeReference = jsObject.dateFieldsTimeReference;
        }
        if (hasValue(jsObject.description)) {
            dotNetServiceDefinition.description = jsObject.description;
        }
        if (hasValue(jsObject.maxRecordCount)) {
            dotNetServiceDefinition.maxRecordCount = jsObject.maxRecordCount;
        }
        if (hasValue(jsObject.schemaEditingNotSupported)) {
            dotNetServiceDefinition.schemaEditingNotSupported = jsObject.schemaEditingNotSupported;
        }
        if (hasValue(jsObject.searchMaxRecordCount)) {
            dotNetServiceDefinition.searchMaxRecordCount = jsObject.searchMaxRecordCount;
        }
        if (hasValue(jsObject.serviceCapabilities)) {
            dotNetServiceDefinition.serviceCapabilities = jsObject.serviceCapabilities;
        }
        if (hasValue(jsObject.serviceItemId)) {
            dotNetServiceDefinition.serviceItemId = jsObject.serviceItemId;
        }
        if (hasValue(jsObject.supportedQueryFormats)) {
            dotNetServiceDefinition.supportedQueryFormats = jsObject.supportedQueryFormats;
        }
        if (hasValue(jsObject.supportsDocuments)) {
            dotNetServiceDefinition.supportsDocuments = jsObject.supportsDocuments;
        }
        if (hasValue(jsObject.supportsProvenance)) {
            dotNetServiceDefinition.supportsProvenance = jsObject.supportsProvenance;
        }
        if (hasValue(jsObject.supportsSearch)) {
            dotNetServiceDefinition.supportsSearch = jsObject.supportsSearch;
        }
        if (hasValue(jsObject.units)) {
            dotNetServiceDefinition.units = jsObject.units;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetServiceDefinition.id = k;
                break;
            }
        }
    }

    return dotNetServiceDefinition;
}

