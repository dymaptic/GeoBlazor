// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Viewing from '@arcgis/core/webdoc/applicationProperties/Viewing';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetViewing } from './viewing';

export async function buildJsViewingGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.search)) {
        let { buildJsSearch } = await import('./search');
        properties.search = await buildJsSearch(dotNetObject.search, layerId, viewId) as any;
    }

    let jsViewing = new Viewing(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsViewing);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsViewing;
    
    let { buildDotNetViewing } = await import('./viewing');
    let dnInstantiatedObject = await buildDotNetViewing(jsViewing);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type Viewing detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Viewing', e);
    }
    
    return jsViewing;
}


export async function buildDotNetViewingGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetViewing: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.search)) {
        let { buildDotNetSearch } = await import('./search');
        dotNetViewing.search = await buildDotNetSearch(jsObject.search);
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetViewing.id = geoBlazorId;
    }

    return dotNetViewing;
}

