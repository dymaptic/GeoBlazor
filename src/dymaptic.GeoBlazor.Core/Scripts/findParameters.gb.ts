// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import FindParameters from '@arcgis/core/rest/support/FindParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetFindParameters } from './findParameters';

export async function buildJsFindParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.outSpatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        properties.outSpatialReference = buildJsSpatialReference(dotNetObject.outSpatialReference) as any;
    }

    if (hasValue(dotNetObject.contains)) {
        properties.contains = dotNetObject.contains;
    }
    if (hasValue(dotNetObject.gdbVersion)) {
        properties.gdbVersion = dotNetObject.gdbVersion;
    }
    if (hasValue(dotNetObject.geometryPrecision)) {
        properties.geometryPrecision = dotNetObject.geometryPrecision;
    }
    if (hasValue(dotNetObject.layerIds)) {
        properties.layerIds = dotNetObject.layerIds;
    }
    if (hasValue(dotNetObject.maxAllowableOffset)) {
        properties.maxAllowableOffset = dotNetObject.maxAllowableOffset;
    }
    if (hasValue(dotNetObject.returnGeometry)) {
        properties.returnGeometry = dotNetObject.returnGeometry;
    }
    if (hasValue(dotNetObject.searchFields)) {
        properties.searchFields = dotNetObject.searchFields;
    }
    if (hasValue(dotNetObject.searchText)) {
        properties.searchText = dotNetObject.searchText;
    }
    let jsFindParameters = new FindParameters(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsFindParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFindParameters;
    
    let dnInstantiatedObject = await buildDotNetFindParameters(jsFindParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FindParameters', e);
    }
    
    return jsFindParameters;
}

export async function buildDotNetFindParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFindParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.outSpatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetFindParameters.outSpatialReference = buildDotNetSpatialReference(jsObject.outSpatialReference);
        }
    if (hasValue(jsObject.contains)) {
        dotNetFindParameters.contains = jsObject.contains;
    }
    if (hasValue(jsObject.gdbVersion)) {
        dotNetFindParameters.gdbVersion = jsObject.gdbVersion;
    }
    if (hasValue(jsObject.geometryPrecision)) {
        dotNetFindParameters.geometryPrecision = jsObject.geometryPrecision;
    }
    if (hasValue(jsObject.layerIds)) {
        dotNetFindParameters.layerIds = jsObject.layerIds;
    }
    if (hasValue(jsObject.maxAllowableOffset)) {
        dotNetFindParameters.maxAllowableOffset = jsObject.maxAllowableOffset;
    }
    if (hasValue(jsObject.returnGeometry)) {
        dotNetFindParameters.returnGeometry = jsObject.returnGeometry;
    }
    if (hasValue(jsObject.searchFields)) {
        dotNetFindParameters.searchFields = jsObject.searchFields;
    }
    if (hasValue(jsObject.searchText)) {
        dotNetFindParameters.searchText = jsObject.searchText;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFindParameters.id = k;
                break;
            }
        }
    }

    return dotNetFindParameters;
}

