import { buildDotNetRelationshipSchemeForPolygonColorsForClassBreaks } from './relationshipSchemeForPolygonColorsForClassBreaks';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import RelationshipSchemeForPolygonColorsForClassBreaks = __esri.RelationshipSchemeForPolygonColorsForClassBreaks;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsRelationshipSchemeForPolygonColorsForClassBreaksGenerated(dotNetObject: any): Promise<any> {
    let jsRelationshipSchemeForPolygonColorsForClassBreaks: any = {}
    if (hasValue(dotNetObject.colors)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsRelationshipSchemeForPolygonColorsForClassBreaks.colors = dotNetObject.colors.map(i => buildJsMapColor(i)) as any;
    }

    if (hasValue(dotNetObject.numClasses)) {
        jsRelationshipSchemeForPolygonColorsForClassBreaks.numClasses = dotNetObject.numClasses;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsRelationshipSchemeForPolygonColorsForClassBreaks);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRelationshipSchemeForPolygonColorsForClassBreaks;
    
    let dnInstantiatedObject = await buildDotNetRelationshipSchemeForPolygonColorsForClassBreaks(jsRelationshipSchemeForPolygonColorsForClassBreaks);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RelationshipSchemeForPolygonColorsForClassBreaks', e);
    }
    
    return jsRelationshipSchemeForPolygonColorsForClassBreaks;
}
export async function buildDotNetRelationshipSchemeForPolygonColorsForClassBreaksGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRelationshipSchemeForPolygonColorsForClassBreaks: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.colors)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetRelationshipSchemeForPolygonColorsForClassBreaks.colors = jsObject.colors.map(i => buildDotNetMapColor(i));
        }
        if (hasValue(jsObject.numClasses)) {
            dotNetRelationshipSchemeForPolygonColorsForClassBreaks.numClasses = jsObject.numClasses;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRelationshipSchemeForPolygonColorsForClassBreaks.id = k;
                break;
            }
        }
    }

    return dotNetRelationshipSchemeForPolygonColorsForClassBreaks;
}

