// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import UniqueValue from '@arcgis/core/renderers/support/UniqueValue';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetUniqueValue } from './uniqueValue';

export async function buildJsUniqueValueGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.value)) {
        properties.value = dotNetObject.value;
    }
    if (hasValue(dotNetObject.value2)) {
        properties.value2 = dotNetObject.value2;
    }
    if (hasValue(dotNetObject.value3)) {
        properties.value3 = dotNetObject.value3;
    }
    let jsUniqueValue = new UniqueValue(properties);
    
    jsObjectRefs[dotNetObject.id] = jsUniqueValue;
    arcGisObjectRefs[dotNetObject.id] = jsUniqueValue;
    
    return jsUniqueValue;
}


export async function buildDotNetUniqueValueGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUniqueValue: any = {};
    
    if (hasValue(jsObject.value)) {
        dotNetUniqueValue.value = jsObject.value;
    }
    
    if (hasValue(jsObject.value2)) {
        dotNetUniqueValue.value2 = jsObject.value2;
    }
    
    if (hasValue(jsObject.value3)) {
        dotNetUniqueValue.value3 = jsObject.value3;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetUniqueValue.id = geoBlazorId;
    }

    return dotNetUniqueValue;
}

