// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import UniqueValue from '@arcgis/core/renderers/support/UniqueValue';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class UniqueValueGenerated implements IPropertyWrapper {
    public component: UniqueValue;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: UniqueValue) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsUniqueValueGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsUniqueValue = new UniqueValue();

    if (hasValue(dotNetObject.value)) {
        jsUniqueValue.value = dotNetObject.value;
    }
    if (hasValue(dotNetObject.value2)) {
        jsUniqueValue.value2 = dotNetObject.value2;
    }
    if (hasValue(dotNetObject.value3)) {
        jsUniqueValue.value3 = dotNetObject.value3;
    }
    let { default: UniqueValueWrapper } = await import('./uniqueValue');
    let uniqueValueWrapper = new UniqueValueWrapper(jsUniqueValue);
    uniqueValueWrapper.geoBlazorId = dotNetObject.id;
    uniqueValueWrapper.viewId = viewId;
    uniqueValueWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(uniqueValueWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = uniqueValueWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsUniqueValue;
    
    return jsUniqueValue;
}

export async function buildDotNetUniqueValueGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUniqueValue: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetUniqueValue.value = jsObject.value;
        dotNetUniqueValue.value2 = jsObject.value2;
        dotNetUniqueValue.value3 = jsObject.value3;

    return dotNetUniqueValue;
}

