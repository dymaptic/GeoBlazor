// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetWidgets } from './widgets';

export async function buildJsWidgetsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsWidgets: any = {};
    if (hasValue(dotNetObject.floorFilter)) {
        let { buildJsWebMapFloorFilter } = await import('./webMapFloorFilter');
        jsWidgets.floorFilter = await buildJsWebMapFloorFilter(dotNetObject.floorFilter, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.timeSlider)) {
        jsWidgets.timeSlider = dotNetObject.timeSlider;
    }
    
    jsObjectRefs[dotNetObject.id] = jsWidgets;
    arcGisObjectRefs[dotNetObject.id] = jsWidgets;
    
    return jsWidgets;
}


export async function buildDotNetWidgetsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWidgets: any = {};
    
    if (hasValue(jsObject.floorFilter)) {
        let { buildDotNetWebMapFloorFilter } = await import('./webMapFloorFilter');
        dotNetWidgets.floorFilter = await buildDotNetWebMapFloorFilter(jsObject.floorFilter);
    }
    
    if (hasValue(jsObject.timeSlider)) {
        dotNetWidgets.timeSlider = removeCircularReferences(jsObject.timeSlider);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetWidgets.id = geoBlazorId;
    }

    return dotNetWidgets;
}

