// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import AutoIntervalBinParameters from '@arcgis/core/rest/support/AutoIntervalBinParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetAutoIntervalBinParameters } from './autoIntervalBinParameters';

export async function buildJsAutoIntervalBinParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.splitBy)) {
        let { buildJsAttributeBinsGrouping } = await import('./attributeBinsGrouping');
        properties.splitBy = await buildJsAttributeBinsGrouping(dotNetObject.splitBy, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.stackBy)) {
        let { buildJsAttributeBinsGrouping } = await import('./attributeBinsGrouping');
        properties.stackBy = await buildJsAttributeBinsGrouping(dotNetObject.stackBy, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.end)) {
        properties.end = dotNetObject.end;
    }
    if (hasValue(dotNetObject.expression)) {
        properties.expression = dotNetObject.expression;
    }
    if (hasValue(dotNetObject.expressionValueType)) {
        properties.expressionValueType = dotNetObject.expressionValueType;
    }
    if (hasValue(dotNetObject.field)) {
        properties.field = dotNetObject.field;
    }
    if (hasValue(dotNetObject.firstDayOfWeek)) {
        properties.firstDayOfWeek = dotNetObject.firstDayOfWeek;
    }
    if (hasValue(dotNetObject.hideUpperBound)) {
        properties.hideUpperBound = dotNetObject.hideUpperBound;
    }
    if (hasValue(dotNetObject.normalizationField)) {
        properties.normalizationField = dotNetObject.normalizationField;
    }
    if (hasValue(dotNetObject.normalizationMaxValue)) {
        properties.normalizationMaxValue = dotNetObject.normalizationMaxValue;
    }
    if (hasValue(dotNetObject.normalizationMinValue)) {
        properties.normalizationMinValue = dotNetObject.normalizationMinValue;
    }
    if (hasValue(dotNetObject.normalizationTotal)) {
        properties.normalizationTotal = dotNetObject.normalizationTotal;
    }
    if (hasValue(dotNetObject.normalizationType)) {
        properties.normalizationType = dotNetObject.normalizationType;
    }
    if (hasValue(dotNetObject.numBins)) {
        properties.numBins = dotNetObject.numBins;
    }
    if (hasValue(dotNetObject.start)) {
        properties.start = dotNetObject.start;
    }
    let jsAutoIntervalBinParameters = new AutoIntervalBinParameters(properties);
    
    jsObjectRefs[dotNetObject.id] = jsAutoIntervalBinParameters;
    arcGisObjectRefs[dotNetObject.id] = jsAutoIntervalBinParameters;
    
    return jsAutoIntervalBinParameters;
}


export async function buildDotNetAutoIntervalBinParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAutoIntervalBinParameters: any = {};
    
    if (hasValue(jsObject.splitBy)) {
        let { buildDotNetAttributeBinsGrouping } = await import('./attributeBinsGrouping');
        dotNetAutoIntervalBinParameters.splitBy = await buildDotNetAttributeBinsGrouping(jsObject.splitBy);
    }
    
    if (hasValue(jsObject.stackBy)) {
        let { buildDotNetAttributeBinsGrouping } = await import('./attributeBinsGrouping');
        dotNetAutoIntervalBinParameters.stackBy = await buildDotNetAttributeBinsGrouping(jsObject.stackBy);
    }
    
    if (hasValue(jsObject.end)) {
        dotNetAutoIntervalBinParameters.end = jsObject.end;
    }
    
    if (hasValue(jsObject.expression)) {
        dotNetAutoIntervalBinParameters.expression = jsObject.expression;
    }
    
    if (hasValue(jsObject.expressionValueType)) {
        dotNetAutoIntervalBinParameters.expressionValueType = removeCircularReferences(jsObject.expressionValueType);
    }
    
    if (hasValue(jsObject.field)) {
        dotNetAutoIntervalBinParameters.field = jsObject.field;
    }
    
    if (hasValue(jsObject.firstDayOfWeek)) {
        dotNetAutoIntervalBinParameters.firstDayOfWeek = jsObject.firstDayOfWeek;
    }
    
    if (hasValue(jsObject.hideUpperBound)) {
        dotNetAutoIntervalBinParameters.hideUpperBound = jsObject.hideUpperBound;
    }
    
    if (hasValue(jsObject.normalizationField)) {
        dotNetAutoIntervalBinParameters.normalizationField = jsObject.normalizationField;
    }
    
    if (hasValue(jsObject.normalizationMaxValue)) {
        dotNetAutoIntervalBinParameters.normalizationMaxValue = jsObject.normalizationMaxValue;
    }
    
    if (hasValue(jsObject.normalizationMinValue)) {
        dotNetAutoIntervalBinParameters.normalizationMinValue = jsObject.normalizationMinValue;
    }
    
    if (hasValue(jsObject.normalizationTotal)) {
        dotNetAutoIntervalBinParameters.normalizationTotal = jsObject.normalizationTotal;
    }
    
    if (hasValue(jsObject.normalizationType)) {
        dotNetAutoIntervalBinParameters.normalizationType = removeCircularReferences(jsObject.normalizationType);
    }
    
    if (hasValue(jsObject.numBins)) {
        dotNetAutoIntervalBinParameters.numBins = jsObject.numBins;
    }
    
    if (hasValue(jsObject.start)) {
        dotNetAutoIntervalBinParameters.start = jsObject.start;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetAutoIntervalBinParameters.type = removeCircularReferences(jsObject.type);
    }
    

    return dotNetAutoIntervalBinParameters;
}

