import {buildDotNetImageHeightParameters} from './imageHeightParameters';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import ImageHeightParameters from '@arcgis/core/rest/support/ImageHeightParameters';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsImageHeightParametersGenerated(dotNetObject: any): Promise<any> {
    let jsImageHeightParameters = new ImageHeightParameters();
    if (hasValue(dotNetObject.fromGeometry)) {
        let {buildJsPoint} = await import('./point');
        jsImageHeightParameters.fromGeometry = buildJsPoint(dotNetObject.fromGeometry) as any;
    }
    if (hasValue(dotNetObject.mosaicRule)) {
        let {buildJsMosaicRule} = await import('./mosaicRule');
        jsImageHeightParameters.mosaicRule = await buildJsMosaicRule(dotNetObject.mosaicRule, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.toGeometry)) {
        let {buildJsPoint} = await import('./point');
        jsImageHeightParameters.toGeometry = buildJsPoint(dotNetObject.toGeometry) as any;
    }

    if (hasValue(dotNetObject.linearUnit)) {
        jsImageHeightParameters.linearUnit = dotNetObject.linearUnit;
    }
    if (hasValue(dotNetObject.operationType)) {
        jsImageHeightParameters.operationType = dotNetObject.operationType;
    }
    if (hasValue(dotNetObject.pixelSize)) {
        jsImageHeightParameters.pixelSize = dotNetObject.pixelSize;
    }

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsImageHeightParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageHeightParameters;

    let dnInstantiatedObject = await buildDotNetImageHeightParameters(jsImageHeightParameters);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImageHeightParameters', e);
    }

    return jsImageHeightParameters;
}

export async function buildDotNetImageHeightParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetImageHeightParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.fromGeometry)) {
        let {buildDotNetPoint} = await import('./point');
        dotNetImageHeightParameters.fromGeometry = buildDotNetPoint(jsObject.fromGeometry);
    }
    if (hasValue(jsObject.mosaicRule)) {
        let {buildDotNetMosaicRule} = await import('./mosaicRule');
        dotNetImageHeightParameters.mosaicRule = await buildDotNetMosaicRule(jsObject.mosaicRule);
    }
    if (hasValue(jsObject.toGeometry)) {
        let {buildDotNetPoint} = await import('./point');
        dotNetImageHeightParameters.toGeometry = buildDotNetPoint(jsObject.toGeometry);
    }
    if (hasValue(jsObject.linearUnit)) {
        dotNetImageHeightParameters.linearUnit = jsObject.linearUnit;
    }
    if (hasValue(jsObject.operationType)) {
        dotNetImageHeightParameters.operationType = jsObject.operationType;
    }
    if (hasValue(jsObject.pixelSize)) {
        dotNetImageHeightParameters.pixelSize = jsObject.pixelSize;
    }
    if (hasValue(jsObject.type)) {
        dotNetImageHeightParameters.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImageHeightParameters.id = k;
                break;
            }
        }
    }

    return dotNetImageHeightParameters;
}

