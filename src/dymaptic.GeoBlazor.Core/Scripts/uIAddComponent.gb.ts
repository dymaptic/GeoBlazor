// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetUIAddComponent } from './uIAddComponent';

export async function buildJsUIAddComponentGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsUIAddComponent: any = {};
    if (hasValue(dotNetObject.widgetComponent)) {
        let { buildJsWidget } = await import('./widget');
        jsUIAddComponent.component = await buildJsWidget(dotNetObject.widgetComponent, layerId, viewId) as any;
    }
    else if (hasValue(dotNetObject.elementReferenceComponent)) {
        jsUIAddComponent.component = dotNetObject.elementReferenceComponent;
    }
    if (hasValue(dotNetObject.position)) {
        let { buildJsPosition } = await import('./position');
        jsUIAddComponent.position = await buildJsPosition(dotNetObject.position, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.index)) {
        jsUIAddComponent.index = dotNetObject.index;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsUIAddComponent);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsUIAddComponent;
    
    return jsUIAddComponent;
}


export async function buildDotNetUIAddComponentGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUIAddComponent: any = {};
    
    if (hasValue(jsObject.component)) {
        let { buildDotNetWidget } = await import('./widget');
        dotNetUIAddComponent.component = await buildDotNetWidget(jsObject.component);
    }
    
    if (hasValue(jsObject.position)) {
        let { buildDotNetPosition } = await import('./position');
        dotNetUIAddComponent.position = await buildDotNetPosition(jsObject.position, layerId, viewId);
    }
    
    if (hasValue(jsObject.index)) {
        dotNetUIAddComponent.index = jsObject.index;
    }
    

    return dotNetUIAddComponent;
}

