// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetUIAddComponent } from './uIAddComponent';

export async function buildJsUIAddComponentGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsUIAddComponent: any = {};
    if (hasValue(dotNetObject.widgetComponent)) {
        let { buildJsWidget } = await import('./widget');
        jsUIAddComponent.component = await buildJsWidget(dotNetObject.widgetComponent, layerId, viewId) as any;
    }
    else if (hasValue(dotNetObject.elementReferenceComponent)) {
        jsUIAddComponent.component = dotNetObject.widget;
    }
    if (hasValue(dotNetObject.position)) {
        let { buildJsPosition } = await import('./position');
        jsUIAddComponent.position = await buildJsPosition(dotNetObject.position, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.index)) {
        jsUIAddComponent.index = dotNetObject.index;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsUIAddComponent);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsUIAddComponent;
    
    let dnInstantiatedObject = await buildDotNetUIAddComponent(jsUIAddComponent);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for UIAddComponent', e);
    }
    
    return jsUIAddComponent;
}

export async function buildDotNetUIAddComponentGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUIAddComponent: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.component)) {
        let { buildDotNetWidget } = await import('./widget');
        dotNetUIAddComponent.component = buildDotNetWidget(jsObject.component);
    }
    if (hasValue(jsObject.position)) {
        let { buildDotNetPosition } = await import('./position');
        dotNetUIAddComponent.position = await buildDotNetPosition(jsObject.position);
    }
    if (hasValue(jsObject.index)) {
        dotNetUIAddComponent.index = jsObject.index;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetUIAddComponent.id = k;
                break;
            }
        }
    }

    return dotNetUIAddComponent;
}

