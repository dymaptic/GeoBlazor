// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import geodesicUtils = __esri.geodesicUtils;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class GeodesicUtilsGenerated implements IPropertyWrapper {
    public component: geodesicUtils;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: geodesicUtils) {
        this.component = component;
    }

    // region methods

    unwrap() {
        return this.component;
    }

    async geodesicDensify(geometry: any,
                          maxSegmentLength: any): Promise<any> {
        let {buildJsGeometry} = await import('./geometry');
        let jsGeometry = buildJsGeometry(geometry) as any;
        return this.component.geodesicDensify(jsGeometry,
            maxSegmentLength);
    }

    async geodesicDistance(from: any,
                           to: any,
                           unit: any): Promise<any> {
        let {buildJsPoint} = await import('./point');
        let jsFrom = buildJsPoint(from) as any;
        let {buildJsPoint} = await import('./point');
        let jsTo = buildJsPoint(to) as any;
        return this.component.geodesicDistance(jsFrom,
            jsTo,
            unit);
    }

    async geodesicLengths(geometries: any,
                          unit: any): Promise<any> {
        let {buildJsPolyline} = await import('./polyline');
        let jsGeometries = buildJsPolyline(geometries) as any;
        return this.component.geodesicLengths(jsGeometries,
            unit);
    }

    async pointFromDistance(point: any,
                            distance: any,
                            azimuth: any): Promise<any> {
        let {buildJsPoint} = await import('./point');
        let jsPoint = buildJsPoint(point) as any;
        return this.component.pointFromDistance(jsPoint,
            distance,
            azimuth);
    }

    // region properties

    getProperty(prop: string): any {
        return this.component[prop];
    }

    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsGeodesicUtilsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsgeodesicUtils: any = {}


    let {default: GeodesicUtilsWrapper} = await import('./geodesicUtils');
    let geodesicUtilsWrapper = new GeodesicUtilsWrapper(jsgeodesicUtils);
    geodesicUtilsWrapper.geoBlazorId = dotNetObject.id;
    geodesicUtilsWrapper.viewId = viewId;
    geodesicUtilsWrapper.layerId = layerId;

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(geodesicUtilsWrapper);
    jsObjectRefs[dotNetObject.id] = geodesicUtilsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsgeodesicUtils;
    let {buildDotNetGeodesicUtils} = await import('./geodesicUtils');
    let dnInstantiatedObject = await buildDotNetGeodesicUtils(jsgeodesicUtils);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for GeodesicUtils', e);
    }

    return jsgeodesicUtils;
}

export async function buildDotNetGeodesicUtilsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetGeodesicUtils: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetGeodesicUtils.id = k;
                break;
            }
        }
    }

    return dotNetGeodesicUtils;
}

