import { buildDotNetLocatorAddressToLocationsParams } from './locatorAddressToLocationsParams';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import locatorAddressToLocationsParams = __esri.locatorAddressToLocationsParams;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsLocatorAddressToLocationsParamsGenerated(dotNetObject: any): Promise<any> {
    let jslocatorAddressToLocationsParams: any = {}
    if (hasValue(dotNetObject.location)) {
        let { buildJsPoint } = await import('./point');
        jslocatorAddressToLocationsParams.location = buildJsPoint(dotNetObject.location) as any;
    }
    if (hasValue(dotNetObject.outSpatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        jslocatorAddressToLocationsParams.outSpatialReference = buildJsSpatialReference(dotNetObject.outSpatialReference) as any;
    }
    if (hasValue(dotNetObject.searchExtent)) {
        let { buildJsExtent } = await import('./extent');
        jslocatorAddressToLocationsParams.searchExtent = buildJsExtent(dotNetObject.searchExtent) as any;
    }

    if (hasValue(dotNetObject.address)) {
        jslocatorAddressToLocationsParams.address = dotNetObject.address;
    }
    if (hasValue(dotNetObject.categories)) {
        jslocatorAddressToLocationsParams.categories = dotNetObject.categories;
    }
    if (hasValue(dotNetObject.countryCode)) {
        jslocatorAddressToLocationsParams.countryCode = dotNetObject.countryCode;
    }
    if (hasValue(dotNetObject.forStorage)) {
        jslocatorAddressToLocationsParams.forStorage = dotNetObject.forStorage;
    }
    if (hasValue(dotNetObject.locationType)) {
        jslocatorAddressToLocationsParams.locationType = dotNetObject.locationType;
    }
    if (hasValue(dotNetObject.magicKey)) {
        jslocatorAddressToLocationsParams.magicKey = dotNetObject.magicKey;
    }
    if (hasValue(dotNetObject.maxLocations)) {
        jslocatorAddressToLocationsParams.maxLocations = dotNetObject.maxLocations;
    }
    if (hasValue(dotNetObject.outFields)) {
        jslocatorAddressToLocationsParams.outFields = dotNetObject.outFields;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jslocatorAddressToLocationsParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jslocatorAddressToLocationsParams;
    
    let dnInstantiatedObject = await buildDotNetLocatorAddressToLocationsParams(jslocatorAddressToLocationsParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LocatorAddressToLocationsParams', e);
    }
    
    return jslocatorAddressToLocationsParams;
}
export async function buildDotNetLocatorAddressToLocationsParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLocatorAddressToLocationsParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.location)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetLocatorAddressToLocationsParams.location = buildDotNetPoint(jsObject.location);
        }
        if (hasValue(jsObject.outSpatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetLocatorAddressToLocationsParams.outSpatialReference = buildDotNetSpatialReference(jsObject.outSpatialReference);
        }
        if (hasValue(jsObject.searchExtent)) {
            let { buildDotNetExtent } = await import('./extent');
            dotNetLocatorAddressToLocationsParams.searchExtent = buildDotNetExtent(jsObject.searchExtent);
        }
        if (hasValue(jsObject.address)) {
            dotNetLocatorAddressToLocationsParams.address = jsObject.address;
        }
        if (hasValue(jsObject.categories)) {
            dotNetLocatorAddressToLocationsParams.categories = jsObject.categories;
        }
        if (hasValue(jsObject.countryCode)) {
            dotNetLocatorAddressToLocationsParams.countryCode = jsObject.countryCode;
        }
        if (hasValue(jsObject.forStorage)) {
            dotNetLocatorAddressToLocationsParams.forStorage = jsObject.forStorage;
        }
        if (hasValue(jsObject.locationType)) {
            dotNetLocatorAddressToLocationsParams.locationType = jsObject.locationType;
        }
        if (hasValue(jsObject.magicKey)) {
            dotNetLocatorAddressToLocationsParams.magicKey = jsObject.magicKey;
        }
        if (hasValue(jsObject.maxLocations)) {
            dotNetLocatorAddressToLocationsParams.maxLocations = jsObject.maxLocations;
        }
        if (hasValue(jsObject.outFields)) {
            dotNetLocatorAddressToLocationsParams.outFields = jsObject.outFields;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLocatorAddressToLocationsParams.id = k;
                break;
            }
        }
    }

    return dotNetLocatorAddressToLocationsParams;
}

