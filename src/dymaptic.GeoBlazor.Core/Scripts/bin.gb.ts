// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetBin } from './bin';

export async function buildJsBinGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsBin: any = {};

    if (hasValue(dotNetObject.count)) {
        jsBin.count = dotNetObject.count;
    }
    if (hasValue(dotNetObject.maxValue)) {
        jsBin.maxValue = dotNetObject.maxValue;
    }
    if (hasValue(dotNetObject.minValue)) {
        jsBin.minValue = dotNetObject.minValue;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsBin);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsBin;
    
    try {
        let { buildDotNetBin } = await import('./bin');
        let dnInstantiatedObject = await buildDotNetBin(jsBin, layerId, viewId);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type Bin detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Bin', e);
    }
    
    return jsBin;
}


export async function buildDotNetBinGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBin: any = {};
    
    if (hasValue(jsObject.count)) {
        dotNetBin.count = jsObject.count;
    }
    
    if (hasValue(jsObject.maxValue)) {
        dotNetBin.maxValue = jsObject.maxValue;
    }
    
    if (hasValue(jsObject.minValue)) {
        dotNetBin.minValue = jsObject.minValue;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetBin.id = geoBlazorId;
    }

    return dotNetBin;
}

