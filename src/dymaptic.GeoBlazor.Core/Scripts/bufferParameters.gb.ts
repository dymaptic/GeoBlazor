import {buildDotNetBufferParameters} from './bufferParameters';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import BufferParameters from '@arcgis/core/rest/support/BufferParameters';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsBufferParametersGenerated(dotNetObject: any): Promise<any> {
    let jsBufferParameters = new BufferParameters();
    if (hasValue(dotNetObject.bufferSpatialReference)) {
        let {buildJsSpatialReference} = await import('./spatialReference');
        jsBufferParameters.bufferSpatialReference = buildJsSpatialReference(dotNetObject.bufferSpatialReference) as any;
    }
    if (hasValue(dotNetObject.geometries)) {
        let {buildJsGeometry} = await import('./geometry');
        jsBufferParameters.geometries = dotNetObject.geometries.map(i => buildJsGeometry(i)) as any;
    }
    if (hasValue(dotNetObject.outSpatialReference)) {
        let {buildJsSpatialReference} = await import('./spatialReference');
        jsBufferParameters.outSpatialReference = buildJsSpatialReference(dotNetObject.outSpatialReference) as any;
    }

    if (hasValue(dotNetObject.distances)) {
        jsBufferParameters.distances = dotNetObject.distances;
    }
    if (hasValue(dotNetObject.geodesic)) {
        jsBufferParameters.geodesic = dotNetObject.geodesic;
    }
    if (hasValue(dotNetObject.unionResults)) {
        jsBufferParameters.unionResults = dotNetObject.unionResults;
    }
    if (hasValue(dotNetObject.unit)) {
        jsBufferParameters.unit = dotNetObject.unit;
    }

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsBufferParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsBufferParameters;

    let dnInstantiatedObject = await buildDotNetBufferParameters(jsBufferParameters);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BufferParameters', e);
    }

    return jsBufferParameters;
}

export async function buildDotNetBufferParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetBufferParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.bufferSpatialReference)) {
        let {buildDotNetSpatialReference} = await import('./spatialReference');
        dotNetBufferParameters.bufferSpatialReference = buildDotNetSpatialReference(jsObject.bufferSpatialReference);
    }
    if (hasValue(jsObject.geometries)) {
        let {buildDotNetGeometry} = await import('./geometry');
        dotNetBufferParameters.geometries = jsObject.geometries.map(i => buildDotNetGeometry(i));
    }
    if (hasValue(jsObject.outSpatialReference)) {
        let {buildDotNetSpatialReference} = await import('./spatialReference');
        dotNetBufferParameters.outSpatialReference = buildDotNetSpatialReference(jsObject.outSpatialReference);
    }
    if (hasValue(jsObject.distances)) {
        dotNetBufferParameters.distances = jsObject.distances;
    }
    if (hasValue(jsObject.geodesic)) {
        dotNetBufferParameters.geodesic = jsObject.geodesic;
    }
    if (hasValue(jsObject.unionResults)) {
        dotNetBufferParameters.unionResults = jsObject.unionResults;
    }
    if (hasValue(jsObject.unit)) {
        dotNetBufferParameters.unit = jsObject.unit;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetBufferParameters.id = k;
                break;
            }
        }
    }

    return dotNetBufferParameters;
}

