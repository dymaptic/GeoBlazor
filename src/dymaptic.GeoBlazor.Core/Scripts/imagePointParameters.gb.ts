import { buildDotNetImagePointParameters } from './imagePointParameters';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import ImagePointParameters from '@arcgis/core/rest/support/ImagePointParameters';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsImagePointParametersGenerated(dotNetObject: any): Promise<any> {
    let jsImagePointParameters = new ImagePointParameters();
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsGeometry } = await import('./geometry');
        jsImagePointParameters.geometry = buildJsGeometry(dotNetObject.geometry) as any;
    }
    if (hasValue(dotNetObject.mosaicRule)) {
        let { buildJsMosaicRule } = await import('./mosaicRule');
        jsImagePointParameters.mosaicRule = await buildJsMosaicRule(dotNetObject.mosaicRule, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.is3D)) {
        jsImagePointParameters.is3D = dotNetObject.is3D;
    }
    if (hasValue(dotNetObject.pixelSize)) {
        jsImagePointParameters.pixelSize = dotNetObject.pixelSize;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsImagePointParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImagePointParameters;
    
    let dnInstantiatedObject = await buildDotNetImagePointParameters(jsImagePointParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImagePointParameters', e);
    }
    
    return jsImagePointParameters;
}
export async function buildDotNetImagePointParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImagePointParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.geometry)) {
            let { buildDotNetGeometry } = await import('./geometry');
            dotNetImagePointParameters.geometry = buildDotNetGeometry(jsObject.geometry);
        }
        if (hasValue(jsObject.mosaicRule)) {
            let { buildDotNetMosaicRule } = await import('./mosaicRule');
            dotNetImagePointParameters.mosaicRule = await buildDotNetMosaicRule(jsObject.mosaicRule);
        }
        if (hasValue(jsObject.is3D)) {
            dotNetImagePointParameters.is3D = jsObject.is3D;
        }
        if (hasValue(jsObject.pixelSize)) {
            dotNetImagePointParameters.pixelSize = jsObject.pixelSize;
        }
        if (hasValue(jsObject.type)) {
            dotNetImagePointParameters.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImagePointParameters.id = k;
                break;
            }
        }
    }

    return dotNetImagePointParameters;
}

