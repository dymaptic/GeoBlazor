// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetIdentifyResult } from './identifyResult';
import IdentifyResult from '@arcgis/core/rest/support/IdentifyResult';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsIdentifyResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsIdentifyResult = new IdentifyResult();
    if (hasValue(dotNetObject.feature)) {
        let { buildJsGraphic } = await import('./graphic');
        jsIdentifyResult.feature = buildJsGraphic(dotNetObject.feature) as any;
    }

    if (hasValue(dotNetObject.displayFieldName)) {
        jsIdentifyResult.displayFieldName = dotNetObject.displayFieldName;
    }
    if (hasValue(dotNetObject.layerId)) {
        jsIdentifyResult.layerId = dotNetObject.layerId;
    }
    if (hasValue(dotNetObject.layerName)) {
        jsIdentifyResult.layerName = dotNetObject.layerName;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsIdentifyResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsIdentifyResult;
    
    let dnInstantiatedObject = await buildDotNetIdentifyResult(jsIdentifyResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for IdentifyResult', e);
    }
    
    return jsIdentifyResult;
}

export async function buildDotNetIdentifyResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIdentifyResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.feature)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetIdentifyResult.feature = buildDotNetGraphic(jsObject.feature, layerId, viewId);
        }
        if (hasValue(jsObject.displayFieldName)) {
            dotNetIdentifyResult.displayFieldName = jsObject.displayFieldName;
        }
        if (hasValue(jsObject.layerId)) {
            dotNetIdentifyResult.layerId = jsObject.layerId;
        }
        if (hasValue(jsObject.layerName)) {
            dotNetIdentifyResult.layerName = jsObject.layerName;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetIdentifyResult.id = k;
                break;
            }
        }
    }

    return dotNetIdentifyResult;
}

