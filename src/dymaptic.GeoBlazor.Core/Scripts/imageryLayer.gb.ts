// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import {
    buildJsRasterFunction
} from './jsBuilder.gb';
import {
    buildJsExtent,
    buildJsPortalItem
} from './jsBuilder';

import ImageryLayer from '@arcgis/core/layers/ImageryLayer';
import {IPropertyWrapper} from './definitions';
import {createGeoBlazorObject} from './arcGisJsInterop';

export default class ImageryLayerGenerated implements IPropertyWrapper {
    public layer: ImageryLayer;

    constructor(layer: ImageryLayer) {
        this.layer = layer;
        // set all properties from layer
        for (let prop in layer) {
            if (layer.hasOwnProperty(prop)) {
                this[prop] = layer[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    async computeAngles(parameters: any,
        requestOptions: any): Promise<any> {
        let result = await this.layer.computeAngles(parameters,
            requestOptions);
        return await createGeoBlazorObject(result);
    }

    async computeHistograms(parameters: any,
        requestOptions: any): Promise<any> {
        return await this.layer.computeHistograms(parameters,
            requestOptions);
    }

    async computePixelSpaceLocations(parameters: any,
        requestOptions: any): Promise<any> {
        let result = await this.layer.computePixelSpaceLocations(parameters,
            requestOptions);
        return await createGeoBlazorObject(result);
    }

    async computeStatisticsHistograms(parameters: any,
        requestOptions: any): Promise<any> {
        return await this.layer.computeStatisticsHistograms(parameters,
            requestOptions);
    }

    async createLayerView(view: any,
        options: any): Promise<any> {
        let result = await this.layer.createLayerView(view,
            options);
        return await createGeoBlazorObject(result);
    }

    async createPopupTemplate(options: any): Promise<any> {
        let result = this.layer.createPopupTemplate(options);
        return await createGeoBlazorObject(result);
    }

    async fetchAttributionData(): Promise<any> {
        return await this.layer.fetchAttributionData();
    }

    async fetchImage(extent: any,
        width: any,
        height: any,
        options: any): Promise<any> {
        let jsExtent = await buildJsExtent(extent) as any;
        return await this.layer.fetchImage(jsExtent,
            width,
            height,
            options);
    }

    async findImages(parameters: any,
        requestOptions: any): Promise<any> {
        let result = await this.layer.findImages(parameters,
            requestOptions);
        return await createGeoBlazorObject(result);
    }

    async generateRasterInfo(rasterFunction: any,
        options: any): Promise<any> {
        let jsRasterFunction = await buildJsRasterFunction(rasterFunction) as any;
        let result = await this.layer.generateRasterInfo(jsRasterFunction,
            options);
        return await createGeoBlazorObject(result);
    }

    async getCatalogItemICSInfo(rasterId: any,
        options: any): Promise<any> {
        return await this.layer.getCatalogItemICSInfo(rasterId,
            options);
    }

    async getCatalogItemRasterInfo(rasterId: any,
        options: any): Promise<any> {
        let result = await this.layer.getCatalogItemRasterInfo(rasterId,
            options);
        return await createGeoBlazorObject(result);
    }

    async getImageUrl(parameters: any,
        requestOptions: any): Promise<any> {
        let result = await this.layer.getImageUrl(parameters,
            requestOptions);
        return await createGeoBlazorObject(result);
    }

    async getSamples(parameters: any,
        requestOptions: any): Promise<any> {
        let result = await this.layer.getSamples(parameters,
            requestOptions);
        return await createGeoBlazorObject(result);
    }

    async identify(parameters: any,
        requestOptions: any): Promise<any> {
        let result = await this.layer.identify(parameters,
            requestOptions);
        return await createGeoBlazorObject(result);
    }

    async imageToMap(parameters: any,
        requestOptions: any): Promise<any> {
        let result = await this.layer.imageToMap(parameters,
            requestOptions);
        return await createGeoBlazorObject(result);
    }

    async imageToMapMultiray(parameters: any,
        requestOptions: any): Promise<any> {
        let result = await this.layer.imageToMapMultiray(parameters,
            requestOptions);
        return await createGeoBlazorObject(result);
    }

    async mapToImage(parameters: any,
        requestOptions: any): Promise<any> {
        let result = await this.layer.mapToImage(parameters,
            requestOptions);
        return await createGeoBlazorObject(result);
    }

    async measureAreaAndPerimeter(parameters: any,
        requestOptions: any): Promise<any> {
        let result = await this.layer.measureAreaAndPerimeter(parameters,
            requestOptions);
        return await createGeoBlazorObject(result);
    }

    async measureAreaFromImage(parameters: any,
        requestOptions: any): Promise<any> {
        let result = await this.layer.measureAreaFromImage(parameters,
            requestOptions);
        return await createGeoBlazorObject(result);
    }

    async measureDistanceAndAngle(parameters: any,
        requestOptions: any): Promise<any> {
        let result = await this.layer.measureDistanceAndAngle(parameters,
            requestOptions);
        return await createGeoBlazorObject(result);
    }

    async measureHeight(parameters: any,
        requestOptions: any): Promise<any> {
        let result = await this.layer.measureHeight(parameters,
            requestOptions);
        return await createGeoBlazorObject(result);
    }

    async measureLengthFromImage(parameters: any,
        requestOptions: any): Promise<any> {
        let result = await this.layer.measureLengthFromImage(parameters,
            requestOptions);
        return await createGeoBlazorObject(result);
    }

    async measurePointOrCentroid(parameters: any,
        requestOptions: any): Promise<any> {
        let result = await this.layer.measurePointOrCentroid(parameters,
            requestOptions);
        return await createGeoBlazorObject(result);
    }

    async queryBoundary(parameters: any,
        requestOptions: any): Promise<any> {
        let result = await this.layer.queryBoundary(parameters,
            requestOptions);
        return await createGeoBlazorObject(result);
    }

    async queryGPSInfo(parameters: any,
        requestOptions: any): Promise<any> {
        let result = await this.layer.queryGPSInfo(parameters,
            requestOptions);
        return await createGeoBlazorObject(result);
    }

    async queryObjectIds(query: any,
        requestOptions: any): Promise<any> {
        return await this.layer.queryObjectIds(query,
            requestOptions);
    }

    async queryRasterCount(query: any,
        requestOptions: any): Promise<any> {
        return await this.layer.queryRasterCount(query,
            requestOptions);
    }

    async queryRasters(query: any,
        requestOptions: any): Promise<any> {
        let result = await this.layer.queryRasters(query,
            requestOptions);
        return await createGeoBlazorObject(result);
    }

    async redraw(): Promise<void> {
        this.layer.redraw();
    }

    async refresh(): Promise<void> {
        this.layer.refresh();
    }

    async save(options: any): Promise<any> {
        let result = await this.layer.save(options);
        return await createGeoBlazorObject(result);
    }

    async saveAs(portalItem: any,
        options: any): Promise<any> {
        let jsPortalItem = await buildJsPortalItem(portalItem) as any;
        let result = await this.layer.saveAs(jsPortalItem,
            options);
        return await createGeoBlazorObject(result);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
    
    addToProperty(prop: string, value: any): void {
        if (Array.isArray(value)) {
            this.layer[prop].addMany(value);
        } else {
            this.layer[prop].add(value);
        }
    }
    
    removeFromProperty(prop: string, value: any): any {
        if (Array.isArray(value)) {
            this.layer[prop].removeMany(value);
        } else {
            this.layer[prop].remove(value);
        }
    }
}
