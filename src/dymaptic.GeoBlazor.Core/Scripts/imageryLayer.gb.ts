// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import ImageryLayer from '@arcgis/core/layers/ImageryLayer';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ImageryLayerGenerated implements IPropertyWrapper {
    public layer: ImageryLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: ImageryLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    async computeAngles(parameters: any,
        requestOptions: any): Promise<any> {
        return await this.layer.computeAngles(parameters,
            requestOptions);
    }

    async computeHistograms(parameters: any,
        requestOptions: any): Promise<any> {
        return await this.layer.computeHistograms(parameters,
            requestOptions);
    }

    async computePixelSpaceLocations(parameters: any,
        requestOptions: any): Promise<any> {
        return await this.layer.computePixelSpaceLocations(parameters,
            requestOptions);
    }

    async computeStatisticsHistograms(parameters: any,
        requestOptions: any): Promise<any> {
        return await this.layer.computeStatisticsHistograms(parameters,
            requestOptions);
    }

    async createLayerView(view: any,
        options: any): Promise<any> {
        let result = await this.layer.createLayerView(view,
            options);
        let { buildDotNetLayerView } = await import('./layerView');
        return await buildDotNetLayerView(result);
    }

    async createPopupTemplate(options: any): Promise<any> {
        let result = this.layer.createPopupTemplate(options);
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        return await buildDotNetPopupTemplate(result);
    }

    async fetchAttributionData(): Promise<any> {
        return await this.layer.fetchAttributionData();
    }

    async fetchImage(extent: any,
        width: any,
        height: any,
        options: any): Promise<any> {
        let { buildJsExtent } = await import('./extent');
        let jsExtent = buildJsExtent(extent) as any;
        return await this.layer.fetchImage(jsExtent,
            width,
            height,
            options);
    }

    async findImages(parameters: any,
        requestOptions: any): Promise<any> {
        return await this.layer.findImages(parameters,
            requestOptions);
    }

    async generateRasterInfo(rasterFunction: any,
        options: any): Promise<any> {
        let { buildJsRasterFunction } = await import('./rasterFunction');
        let jsRasterFunction = await buildJsRasterFunction(rasterFunction, this.layerId, this.viewId) as any;
        return await this.layer.generateRasterInfo(jsRasterFunction,
            options);
    }

    async getCatalogItemICSInfo(rasterId: any,
        options: any): Promise<any> {
        return await this.layer.getCatalogItemICSInfo(rasterId,
            options);
    }

    async getCatalogItemRasterInfo(rasterId: any,
        options: any): Promise<any> {
        return await this.layer.getCatalogItemRasterInfo(rasterId,
            options);
    }

    async getImageUrl(parameters: any,
        requestOptions: any): Promise<any> {
        return await this.layer.getImageUrl(parameters,
            requestOptions);
    }

    async getSamples(parameters: any,
        requestOptions: any): Promise<any> {
        return await this.layer.getSamples(parameters,
            requestOptions);
    }

    async identify(parameters: any,
        requestOptions: any): Promise<any> {
        return await this.layer.identify(parameters,
            requestOptions);
    }

    async imageToMap(parameters: any,
        requestOptions: any): Promise<any> {
        let result = await this.layer.imageToMap(parameters,
            requestOptions);
        let { buildDotNetGeometry } = await import('./geometry');
        return buildDotNetGeometry(result);
    }

    async imageToMapMultiray(parameters: any,
        requestOptions: any): Promise<any> {
        let result = await this.layer.imageToMapMultiray(parameters,
            requestOptions);
        let { buildDotNetGeometry } = await import('./geometry');
        return buildDotNetGeometry(result);
    }

    async mapToImage(parameters: any,
        requestOptions: any): Promise<any> {
        let result = await this.layer.mapToImage(parameters,
            requestOptions);
        let { buildDotNetGeometry } = await import('./geometry');
        return buildDotNetGeometry(result);
    }

    async measureAreaAndPerimeter(parameters: any,
        requestOptions: any): Promise<any> {
        return await this.layer.measureAreaAndPerimeter(parameters,
            requestOptions);
    }

    async measureAreaFromImage(parameters: any,
        requestOptions: any): Promise<any> {
        return await this.layer.measureAreaFromImage(parameters,
            requestOptions);
    }

    async measureDistanceAndAngle(parameters: any,
        requestOptions: any): Promise<any> {
        return await this.layer.measureDistanceAndAngle(parameters,
            requestOptions);
    }

    async measureHeight(parameters: any,
        requestOptions: any): Promise<any> {
        return await this.layer.measureHeight(parameters,
            requestOptions);
    }

    async measureLengthFromImage(parameters: any,
        requestOptions: any): Promise<any> {
        return await this.layer.measureLengthFromImage(parameters,
            requestOptions);
    }

    async measurePointOrCentroid(parameters: any,
        requestOptions: any): Promise<any> {
        return await this.layer.measurePointOrCentroid(parameters,
            requestOptions);
    }

    async queryBoundary(parameters: any,
        requestOptions: any): Promise<any> {
        return await this.layer.queryBoundary(parameters,
            requestOptions);
    }

    async queryGPSInfo(parameters: any,
        requestOptions: any): Promise<any> {
        return await this.layer.queryGPSInfo(parameters,
            requestOptions);
    }

    async queryObjectIds(query: any,
        requestOptions: any): Promise<any> {
        return await this.layer.queryObjectIds(query,
            requestOptions);
    }

    async queryRasterCount(query: any,
        requestOptions: any): Promise<any> {
        return await this.layer.queryRasterCount(query,
            requestOptions);
    }

    async queryRasters(query: any,
        requestOptions: any): Promise<any> {
        return await this.layer.queryRasters(query,
            requestOptions);
    }

    async redraw(): Promise<void> {
        this.layer.redraw();
    }

    async refresh(): Promise<void> {
        this.layer.refresh();
    }

    async save(options: any): Promise<any> {
        let result = await this.layer.save(options);
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(result);
    }

    async saveAs(portalItem: any,
        options: any): Promise<any> {
        let { buildJsPortalItem } = await import('./portalItem');
        let jsPortalItem = await buildJsPortalItem(portalItem, this.layerId, this.viewId) as any;
        let result = await this.layer.saveAs(jsPortalItem,
            options);
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(result);
    }

    // region properties
    
    async getCapabilities(): Promise<any> {
        if (!hasValue(this.layer.capabilities)) {
            return null;
        }
        
        let { buildDotNetArcGISImageServiceCapabilities } = await import('./arcGISImageServiceCapabilities');
        return await buildDotNetArcGISImageServiceCapabilities(this.layer.capabilities);
    }
    async setCapabilities(value: any): Promise<void> {
        let { buildJsArcGISImageServiceCapabilities } = await import('./arcGISImageServiceCapabilities');
        this.layer.capabilities = await  buildJsArcGISImageServiceCapabilities(value, this.layerId, this.viewId);
    }
    async getFields(): Promise<any> {
        if (!hasValue(this.layer.fields)) {
            return null;
        }
        
        let { buildDotNetField } = await import('./field');
        return await Promise.all(this.layer.fields.map(async i => await buildDotNetField(i)));
    }
    
    async setFields(value: any): Promise<void> {
        let { buildJsField } = await import('./field');
        this.layer.fields = await Promise.all(value.map(async i => await buildJsField(i, this.layerId, this.viewId))) as any;
    }
    
    async getFullExtent(): Promise<any> {
        if (!hasValue(this.layer.fullExtent)) {
            return null;
        }
        
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(this.layer.fullExtent);
    }
    async setFullExtent(value: any): Promise<void> {
        let { buildJsExtent } = await import('./extent');
        this.layer.fullExtent =  buildJsExtent(value);
    }
    async getMultidimensionalSubset(): Promise<any> {
        if (!hasValue(this.layer.multidimensionalSubset)) {
            return null;
        }
        
        let { buildDotNetMultidimensionalSubset } = await import('./multidimensionalSubset');
        return await buildDotNetMultidimensionalSubset(this.layer.multidimensionalSubset);
    }
    async setMultidimensionalSubset(value: any): Promise<void> {
        let { buildJsMultidimensionalSubset } = await import('./multidimensionalSubset');
        this.layer.multidimensionalSubset = await  buildJsMultidimensionalSubset(value, this.layerId, this.viewId);
    }
    async getPopupTemplate(): Promise<any> {
        if (!hasValue(this.layer.popupTemplate)) {
            return null;
        }
        
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        return await buildDotNetPopupTemplate(this.layer.popupTemplate);
    }
    async setPopupTemplate(value: any): Promise<void> {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        this.layer.popupTemplate = await  buildJsPopupTemplate(value, this.layerId, this.viewId);
    }
    async getPortalItem(): Promise<any> {
        if (!hasValue(this.layer.portalItem)) {
            return null;
        }
        
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(this.layer.portalItem);
    }
    async setPortalItem(value: any): Promise<void> {
        let { buildJsPortalItem } = await import('./portalItem');
        this.layer.portalItem = await  buildJsPortalItem(value, this.layerId, this.viewId);
    }
    async getRasterFields(): Promise<any> {
        if (!hasValue(this.layer.rasterFields)) {
            return null;
        }
        
        let { buildDotNetField } = await import('./field');
        return await Promise.all(this.layer.rasterFields.map(async i => await buildDotNetField(i)));
    }
    
    async getRasterFunction(): Promise<any> {
        if (!hasValue(this.layer.rasterFunction)) {
            return null;
        }
        
        let { buildDotNetRasterFunction } = await import('./rasterFunction');
        return await buildDotNetRasterFunction(this.layer.rasterFunction);
    }
    async setRasterFunction(value: any): Promise<void> {
        let { buildJsRasterFunction } = await import('./rasterFunction');
        this.layer.rasterFunction = await  buildJsRasterFunction(value, this.layerId, this.viewId);
    }
    async getRenderingRule(): Promise<any> {
        if (!hasValue(this.layer.renderingRule)) {
            return null;
        }
        
        let { buildDotNetRasterFunction } = await import('./rasterFunction');
        return await buildDotNetRasterFunction(this.layer.renderingRule);
    }
    async setRenderingRule(value: any): Promise<void> {
        let { buildJsRasterFunction } = await import('./rasterFunction');
        this.layer.renderingRule = await  buildJsRasterFunction(value, this.layerId, this.viewId);
    }
    async getSpatialReference(): Promise<any> {
        if (!hasValue(this.layer.spatialReference)) {
            return null;
        }
        
        let { buildDotNetSpatialReference } = await import('./spatialReference');
        return buildDotNetSpatialReference(this.layer.spatialReference);
    }
    async getTimeExtent(): Promise<any> {
        if (!hasValue(this.layer.timeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.timeExtent);
    }
    async setTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.timeExtent = await  buildJsTimeExtent(value, this.layerId, this.viewId);
    }
    async getTimeInfo(): Promise<any> {
        if (!hasValue(this.layer.timeInfo)) {
            return null;
        }
        
        let { buildDotNetTimeInfo } = await import('./timeInfo');
        return await buildDotNetTimeInfo(this.layer.timeInfo);
    }
    async setTimeInfo(value: any): Promise<void> {
        let { buildJsTimeInfo } = await import('./timeInfo');
        this.layer.timeInfo = await  buildJsTimeInfo(value, this.layerId, this.viewId);
    }
    async getTimeOffset(): Promise<any> {
        if (!hasValue(this.layer.timeOffset)) {
            return null;
        }
        
        let { buildDotNetTimeInterval } = await import('./timeInterval');
        return await buildDotNetTimeInterval(this.layer.timeOffset);
    }
    async setTimeOffset(value: any): Promise<void> {
        let { buildJsTimeInterval } = await import('./timeInterval');
        this.layer.timeOffset = await  buildJsTimeInterval(value, this.layerId, this.viewId);
    }
    async getVisibilityTimeExtent(): Promise<any> {
        if (!hasValue(this.layer.visibilityTimeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.visibilityTimeExtent);
    }
    async setVisibilityTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.visibilityTimeExtent = await  buildJsTimeExtent(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}

export async function buildJsImageryLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsImageryLayer = new ImageryLayer();
    if (hasValue(dotNetObject.capabilities)) {
        let { buildJsArcGISImageServiceCapabilities } = await import('./arcGISImageServiceCapabilities');
        jsImageryLayer.capabilities = await buildJsArcGISImageServiceCapabilities(dotNetObject.capabilities, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.fields)) {
        let { buildJsField } = await import('./field');
        jsImageryLayer.fields = await Promise.all(dotNetObject.fields.map(async i => await buildJsField(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.fullExtent)) {
        let { buildJsExtent } = await import('./extent');
        jsImageryLayer.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;
    }
    if (hasValue(dotNetObject.multidimensionalSubset)) {
        let { buildJsMultidimensionalSubset } = await import('./multidimensionalSubset');
        jsImageryLayer.multidimensionalSubset = await buildJsMultidimensionalSubset(dotNetObject.multidimensionalSubset, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.popupTemplate)) {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        jsImageryLayer.popupTemplate = await buildJsPopupTemplate(dotNetObject.popupTemplate, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.portalItem)) {
        let { buildJsPortalItem } = await import('./portalItem');
        jsImageryLayer.portalItem = await buildJsPortalItem(dotNetObject.portalItem, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.rasterFunction)) {
        let { buildJsRasterFunction } = await import('./rasterFunction');
        jsImageryLayer.rasterFunction = await buildJsRasterFunction(dotNetObject.rasterFunction, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.renderingRule)) {
        let { buildJsRasterFunction } = await import('./rasterFunction');
        jsImageryLayer.renderingRule = await buildJsRasterFunction(dotNetObject.renderingRule, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        jsImageryLayer.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.timeInfo)) {
        let { buildJsTimeInfo } = await import('./timeInfo');
        jsImageryLayer.timeInfo = await buildJsTimeInfo(dotNetObject.timeInfo, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.timeOffset)) {
        let { buildJsTimeInterval } = await import('./timeInterval');
        jsImageryLayer.timeOffset = await buildJsTimeInterval(dotNetObject.timeOffset, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.visibilityTimeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        jsImageryLayer.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.arcGISLayerId)) {
        jsImageryLayer.id = dotNetObject.arcGISLayerId;
    }
    if (hasValue(dotNetObject.bandIds)) {
        jsImageryLayer.bandIds = dotNetObject.bandIds;
    }
    if (hasValue(dotNetObject.blendMode)) {
        jsImageryLayer.blendMode = dotNetObject.blendMode;
    }
    if (hasValue(dotNetObject.compressionQuality)) {
        jsImageryLayer.compressionQuality = dotNetObject.compressionQuality;
    }
    if (hasValue(dotNetObject.compressionTolerance)) {
        jsImageryLayer.compressionTolerance = dotNetObject.compressionTolerance;
    }
    if (hasValue(dotNetObject.copyright)) {
        jsImageryLayer.copyright = dotNetObject.copyright;
    }
    if (hasValue(dotNetObject.customParameters)) {
        jsImageryLayer.customParameters = dotNetObject.customParameters;
    }
    if (hasValue(dotNetObject.definitionExpression)) {
        jsImageryLayer.definitionExpression = dotNetObject.definitionExpression;
    }
    if (hasValue(dotNetObject.effect)) {
        jsImageryLayer.effect = dotNetObject.effect;
    }
    if (hasValue(dotNetObject.format)) {
        jsImageryLayer.format = dotNetObject.format;
    }
    if (hasValue(dotNetObject.hasMultidimensions)) {
        jsImageryLayer.hasMultidimensions = dotNetObject.hasMultidimensions;
    }
    if (hasValue(dotNetObject.imageMaxHeight)) {
        jsImageryLayer.imageMaxHeight = dotNetObject.imageMaxHeight;
    }
    if (hasValue(dotNetObject.imageMaxWidth)) {
        jsImageryLayer.imageMaxWidth = dotNetObject.imageMaxWidth;
    }
    if (hasValue(dotNetObject.interpolation)) {
        jsImageryLayer.interpolation = dotNetObject.interpolation;
    }
    if (hasValue(dotNetObject.legendEnabled)) {
        jsImageryLayer.legendEnabled = dotNetObject.legendEnabled;
    }
    if (hasValue(dotNetObject.listMode)) {
        jsImageryLayer.listMode = dotNetObject.listMode;
    }
    if (hasValue(dotNetObject.maxScale)) {
        jsImageryLayer.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.minScale)) {
        jsImageryLayer.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.mosaicRule)) {
        jsImageryLayer.mosaicRule = dotNetObject.mosaicRule;
    }
    if (hasValue(dotNetObject.noData)) {
        jsImageryLayer.noData = dotNetObject.noData;
    }
    if (hasValue(dotNetObject.noDataInterpretation)) {
        jsImageryLayer.noDataInterpretation = dotNetObject.noDataInterpretation;
    }
    if (hasValue(dotNetObject.objectIdField)) {
        jsImageryLayer.objectIdField = dotNetObject.objectIdField;
    }
    if (hasValue(dotNetObject.opacity)) {
        jsImageryLayer.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.persistenceEnabled)) {
        jsImageryLayer.persistenceEnabled = dotNetObject.persistenceEnabled;
    }
    if (hasValue(dotNetObject.pixelFilter)) {
        jsImageryLayer.pixelFilter = dotNetObject.pixelFilter;
    }
    if (hasValue(dotNetObject.pixelType)) {
        jsImageryLayer.pixelType = dotNetObject.pixelType;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        jsImageryLayer.popupEnabled = dotNetObject.popupEnabled;
    }
    if (hasValue(dotNetObject.refreshInterval)) {
        jsImageryLayer.refreshInterval = dotNetObject.refreshInterval;
    }
    if (hasValue(dotNetObject.renderer)) {
        jsImageryLayer.renderer = dotNetObject.renderer;
    }
    if (hasValue(dotNetObject.sourceJSON)) {
        jsImageryLayer.sourceJSON = dotNetObject.sourceJSON;
    }
    if (hasValue(dotNetObject.title)) {
        jsImageryLayer.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.url)) {
        jsImageryLayer.url = dotNetObject.url;
    }
    if (hasValue(dotNetObject.useViewTime)) {
        jsImageryLayer.useViewTime = dotNetObject.useViewTime;
    }
    jsImageryLayer.on('refresh', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsRefresh', evt);
    });
    
    let { default: ImageryLayerWrapper } = await import('./imageryLayer');
    let imageryLayerWrapper = new ImageryLayerWrapper(jsImageryLayer);
    imageryLayerWrapper.geoBlazorId = dotNetObject.id;
    imageryLayerWrapper.viewId = viewId;
    imageryLayerWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(imageryLayerWrapper);
    jsObjectRefs[dotNetObject.id] = imageryLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsImageryLayer;
    
    let { buildDotNetImageryLayer } = await import('./imageryLayer');
    let dnInstantiatedObject = await buildDotNetImageryLayer(jsImageryLayer);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImageryLayer', e);
    }
    
    return jsImageryLayer;
}

export async function buildDotNetImageryLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageryLayer: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.capabilities)) {
            let { buildDotNetArcGISImageServiceCapabilities } = await import('./arcGISImageServiceCapabilities');
            dotNetImageryLayer.capabilities = await buildDotNetArcGISImageServiceCapabilities(jsObject.capabilities);
        }
        if (hasValue(jsObject.fields)) {
            let { buildDotNetField } = await import('./field');
            dotNetImageryLayer.fields = await Promise.all(jsObject.fields.map(async i => await buildDotNetField(i)));
        }
        if (hasValue(jsObject.fullExtent)) {
            let { buildDotNetExtent } = await import('./extent');
            dotNetImageryLayer.fullExtent = buildDotNetExtent(jsObject.fullExtent);
        }
        if (hasValue(jsObject.multidimensionalSubset)) {
            let { buildDotNetMultidimensionalSubset } = await import('./multidimensionalSubset');
            dotNetImageryLayer.multidimensionalSubset = await buildDotNetMultidimensionalSubset(jsObject.multidimensionalSubset);
        }
        if (hasValue(jsObject.popupTemplate)) {
            let { buildDotNetPopupTemplate } = await import('./popupTemplate');
            dotNetImageryLayer.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
        }
        if (hasValue(jsObject.portalItem)) {
            let { buildDotNetPortalItem } = await import('./portalItem');
            dotNetImageryLayer.portalItem = await buildDotNetPortalItem(jsObject.portalItem);
        }
        if (hasValue(jsObject.rasterFields)) {
            let { buildDotNetField } = await import('./field');
            dotNetImageryLayer.rasterFields = await Promise.all(jsObject.rasterFields.map(async i => await buildDotNetField(i)));
        }
        if (hasValue(jsObject.rasterFunction)) {
            let { buildDotNetRasterFunction } = await import('./rasterFunction');
            dotNetImageryLayer.rasterFunction = await buildDotNetRasterFunction(jsObject.rasterFunction);
        }
        if (hasValue(jsObject.renderingRule)) {
            let { buildDotNetRasterFunction } = await import('./rasterFunction');
            dotNetImageryLayer.renderingRule = await buildDotNetRasterFunction(jsObject.renderingRule);
        }
        if (hasValue(jsObject.spatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetImageryLayer.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference);
        }
        if (hasValue(jsObject.timeExtent)) {
            let { buildDotNetTimeExtent } = await import('./timeExtent');
            dotNetImageryLayer.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
        }
        if (hasValue(jsObject.timeInfo)) {
            let { buildDotNetTimeInfo } = await import('./timeInfo');
            dotNetImageryLayer.timeInfo = await buildDotNetTimeInfo(jsObject.timeInfo);
        }
        if (hasValue(jsObject.timeOffset)) {
            let { buildDotNetTimeInterval } = await import('./timeInterval');
            dotNetImageryLayer.timeOffset = await buildDotNetTimeInterval(jsObject.timeOffset);
        }
        if (hasValue(jsObject.visibilityTimeExtent)) {
            let { buildDotNetTimeExtent } = await import('./timeExtent');
            dotNetImageryLayer.visibilityTimeExtent = buildDotNetTimeExtent(jsObject.visibilityTimeExtent);
        }
        if (hasValue(jsObject.id)) {
            dotNetImageryLayer.arcGISLayerId = jsObject.id;
        }
        if (hasValue(jsObject.bandIds)) {
            dotNetImageryLayer.bandIds = jsObject.bandIds;
        }
        if (hasValue(jsObject.blendMode)) {
            dotNetImageryLayer.blendMode = jsObject.blendMode;
        }
        if (hasValue(jsObject.compressionQuality)) {
            dotNetImageryLayer.compressionQuality = jsObject.compressionQuality;
        }
        if (hasValue(jsObject.compressionTolerance)) {
            dotNetImageryLayer.compressionTolerance = jsObject.compressionTolerance;
        }
        if (hasValue(jsObject.copyright)) {
            dotNetImageryLayer.copyright = jsObject.copyright;
        }
        if (hasValue(jsObject.customParameters)) {
            dotNetImageryLayer.customParameters = jsObject.customParameters;
        }
        if (hasValue(jsObject.defaultMosaicRule)) {
            dotNetImageryLayer.defaultMosaicRule = jsObject.defaultMosaicRule;
        }
        if (hasValue(jsObject.definitionExpression)) {
            dotNetImageryLayer.definitionExpression = jsObject.definitionExpression;
        }
        if (hasValue(jsObject.effect)) {
            dotNetImageryLayer.effect = jsObject.effect;
        }
        if (hasValue(jsObject.fieldsIndex)) {
            dotNetImageryLayer.fieldsIndex = jsObject.fieldsIndex;
        }
        if (hasValue(jsObject.format)) {
            dotNetImageryLayer.format = jsObject.format;
        }
        if (hasValue(jsObject.hasMultidimensions)) {
            dotNetImageryLayer.hasMultidimensions = jsObject.hasMultidimensions;
        }
        if (hasValue(jsObject.imageMaxHeight)) {
            dotNetImageryLayer.imageMaxHeight = jsObject.imageMaxHeight;
        }
        if (hasValue(jsObject.imageMaxWidth)) {
            dotNetImageryLayer.imageMaxWidth = jsObject.imageMaxWidth;
        }
        if (hasValue(jsObject.interpolation)) {
            dotNetImageryLayer.interpolation = jsObject.interpolation;
        }
        if (hasValue(jsObject.legendEnabled)) {
            dotNetImageryLayer.legendEnabled = jsObject.legendEnabled;
        }
        if (hasValue(jsObject.listMode)) {
            dotNetImageryLayer.listMode = jsObject.listMode;
        }
        if (hasValue(jsObject.loaded)) {
            dotNetImageryLayer.loaded = jsObject.loaded;
        }
        if (hasValue(jsObject.maxScale)) {
            dotNetImageryLayer.maxScale = jsObject.maxScale;
        }
        if (hasValue(jsObject.minScale)) {
            dotNetImageryLayer.minScale = jsObject.minScale;
        }
        if (hasValue(jsObject.mosaicRule)) {
            dotNetImageryLayer.mosaicRule = jsObject.mosaicRule;
        }
        if (hasValue(jsObject.multidimensionalInfo)) {
            dotNetImageryLayer.multidimensionalInfo = jsObject.multidimensionalInfo;
        }
        if (hasValue(jsObject.noData)) {
            dotNetImageryLayer.noData = jsObject.noData;
        }
        if (hasValue(jsObject.noDataInterpretation)) {
            dotNetImageryLayer.noDataInterpretation = jsObject.noDataInterpretation;
        }
        if (hasValue(jsObject.objectIdField)) {
            dotNetImageryLayer.objectIdField = jsObject.objectIdField;
        }
        if (hasValue(jsObject.opacity)) {
            dotNetImageryLayer.opacity = jsObject.opacity;
        }
        if (hasValue(jsObject.persistenceEnabled)) {
            dotNetImageryLayer.persistenceEnabled = jsObject.persistenceEnabled;
        }
        if (hasValue(jsObject.pixelFilter)) {
            dotNetImageryLayer.pixelFilter = jsObject.pixelFilter;
        }
        if (hasValue(jsObject.pixelType)) {
            dotNetImageryLayer.pixelType = jsObject.pixelType;
        }
        if (hasValue(jsObject.popupEnabled)) {
            dotNetImageryLayer.popupEnabled = jsObject.popupEnabled;
        }
        if (hasValue(jsObject.rasterFunctionInfos)) {
            dotNetImageryLayer.rasterFunctionInfos = jsObject.rasterFunctionInfos;
        }
        if (hasValue(jsObject.refreshInterval)) {
            dotNetImageryLayer.refreshInterval = jsObject.refreshInterval;
        }
        if (hasValue(jsObject.renderer)) {
            dotNetImageryLayer.renderer = jsObject.renderer;
        }
        if (hasValue(jsObject.serviceRasterInfo)) {
            dotNetImageryLayer.serviceRasterInfo = jsObject.serviceRasterInfo;
        }
        if (hasValue(jsObject.sourceJSON)) {
            dotNetImageryLayer.sourceJSON = jsObject.sourceJSON;
        }
        if (hasValue(jsObject.sourceType)) {
            dotNetImageryLayer.sourceType = jsObject.sourceType;
        }
        if (hasValue(jsObject.title)) {
            dotNetImageryLayer.title = jsObject.title;
        }
        if (hasValue(jsObject.type)) {
            dotNetImageryLayer.type = jsObject.type;
        }
        if (hasValue(jsObject.url)) {
            dotNetImageryLayer.url = jsObject.url;
        }
        if (hasValue(jsObject.useViewTime)) {
            dotNetImageryLayer.useViewTime = jsObject.useViewTime;
        }
        if (hasValue(jsObject.version)) {
            dotNetImageryLayer.version = jsObject.version;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImageryLayer.id = k;
                break;
            }
        }
    }

    return dotNetImageryLayer;
}

