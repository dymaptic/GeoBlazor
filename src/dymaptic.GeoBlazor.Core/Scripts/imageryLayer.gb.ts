// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageryLayer from '@arcgis/core/layers/ImageryLayer';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, buildJsStreamReference } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ImageryLayerGenerated implements IPropertyWrapper {
    public layer: ImageryLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: ImageryLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }


    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.capabilities)) {
            let { buildJsArcGISImageServiceCapabilities } = await import('./arcGISImageServiceCapabilities');
            this.layer.capabilities = await buildJsArcGISImageServiceCapabilities(dotNetObject.capabilities) as any;
        }
        if (hasValue(dotNetObject.effect)) {
            let { buildJsEffect } = await import('./effect');
            this.layer.effect = buildJsEffect(dotNetObject.effect) as any;
        }
        if (hasValue(dotNetObject.fields) && dotNetObject.fields.length > 0) {
            let { buildJsField } = await import('./field');
            this.layer.fields = dotNetObject.fields.map(i => buildJsField(i)) as any;
        }
        if (hasValue(dotNetObject.fullExtent)) {
            let { buildJsExtent } = await import('./extent');
            this.layer.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;
        }
        if (hasValue(dotNetObject.mosaicRule)) {
            let { buildJsMosaicRule } = await import('./mosaicRule');
            this.layer.mosaicRule = await buildJsMosaicRule(dotNetObject.mosaicRule) as any;
        }
        if (hasValue(dotNetObject.multidimensionalSubset)) {
            let { buildJsMultidimensionalSubset } = await import('./multidimensionalSubset');
            this.layer.multidimensionalSubset = await buildJsMultidimensionalSubset(dotNetObject.multidimensionalSubset) as any;
        }
        if (hasValue(dotNetObject.popupTemplate)) {
            let { buildJsPopupTemplate } = await import('./popupTemplate');
            this.layer.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.portalItem)) {
            let { buildJsPortalItem } = await import('./portalItem');
            this.layer.portalItem = await buildJsPortalItem(dotNetObject.portalItem, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.rasterFunction)) {
            let { buildJsRasterFunction } = await import('./rasterFunction');
            this.layer.rasterFunction = await buildJsRasterFunction(dotNetObject.rasterFunction) as any;
        }
        if (hasValue(dotNetObject.renderingRule)) {
            let { buildJsRasterFunction } = await import('./rasterFunction');
            this.layer.renderingRule = await buildJsRasterFunction(dotNetObject.renderingRule) as any;
        }
        if (hasValue(dotNetObject.timeExtent)) {
            let { buildJsTimeExtent } = await import('./timeExtent');
            this.layer.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent) as any;
        }
        if (hasValue(dotNetObject.timeInfo)) {
            let { buildJsTimeInfo } = await import('./timeInfo');
            this.layer.timeInfo = await buildJsTimeInfo(dotNetObject.timeInfo) as any;
        }
        if (hasValue(dotNetObject.timeOffset)) {
            let { buildJsTimeInterval } = await import('./timeInterval');
            this.layer.timeOffset = await buildJsTimeInterval(dotNetObject.timeOffset) as any;
        }
        if (hasValue(dotNetObject.visibilityTimeExtent)) {
            let { buildJsTimeExtent } = await import('./timeExtent');
            this.layer.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent) as any;
        }

        if (hasValue(dotNetObject.arcGISLayerId)) {
            this.layer.id = dotNetObject.arcGISLayerId;
        }
        if (hasValue(dotNetObject.bandIds) && dotNetObject.bandIds.length > 0) {
            this.layer.bandIds = dotNetObject.bandIds;
        }
        if (hasValue(dotNetObject.blendMode)) {
            this.layer.blendMode = dotNetObject.blendMode;
        }
        if (hasValue(dotNetObject.compressionQuality)) {
            this.layer.compressionQuality = dotNetObject.compressionQuality;
        }
        if (hasValue(dotNetObject.compressionTolerance)) {
            this.layer.compressionTolerance = dotNetObject.compressionTolerance;
        }
        if (hasValue(dotNetObject.copyright)) {
            this.layer.copyright = dotNetObject.copyright;
        }
        if (hasValue(dotNetObject.customParameters)) {
            this.layer.customParameters = dotNetObject.customParameters;
        }
        if (hasValue(dotNetObject.definitionExpression)) {
            this.layer.definitionExpression = dotNetObject.definitionExpression;
        }
        if (hasValue(dotNetObject.format)) {
            this.layer.format = dotNetObject.format;
        }
        if (hasValue(dotNetObject.imageMaxHeight)) {
            this.layer.imageMaxHeight = dotNetObject.imageMaxHeight;
        }
        if (hasValue(dotNetObject.imageMaxWidth)) {
            this.layer.imageMaxWidth = dotNetObject.imageMaxWidth;
        }
        if (hasValue(dotNetObject.interpolation)) {
            this.layer.interpolation = dotNetObject.interpolation;
        }
        if (hasValue(dotNetObject.legendEnabled)) {
            this.layer.legendEnabled = dotNetObject.legendEnabled;
        }
        if (hasValue(dotNetObject.listMode)) {
            this.layer.listMode = dotNetObject.listMode;
        }
        if (hasValue(dotNetObject.maxScale)) {
            this.layer.maxScale = dotNetObject.maxScale;
        }
        if (hasValue(dotNetObject.minScale)) {
            this.layer.minScale = dotNetObject.minScale;
        }
        if (hasValue(dotNetObject.noData)) {
            this.layer.noData = dotNetObject.noData;
        }
        if (hasValue(dotNetObject.noDataInterpretation)) {
            this.layer.noDataInterpretation = dotNetObject.noDataInterpretation;
        }
        if (hasValue(dotNetObject.objectIdField)) {
            this.layer.objectIdField = dotNetObject.objectIdField;
        }
        if (hasValue(dotNetObject.opacity)) {
            this.layer.opacity = dotNetObject.opacity;
        }
        if (hasValue(dotNetObject.persistenceEnabled)) {
            this.layer.persistenceEnabled = dotNetObject.persistenceEnabled;
        }
        if (hasValue(dotNetObject.pixelType)) {
            this.layer.pixelType = dotNetObject.pixelType;
        }
        if (hasValue(dotNetObject.popupEnabled)) {
            this.layer.popupEnabled = dotNetObject.popupEnabled;
        }
        if (hasValue(dotNetObject.refreshInterval)) {
            this.layer.refreshInterval = dotNetObject.refreshInterval;
        }
        if (hasValue(dotNetObject.sourceJSON)) {
            this.layer.sourceJSON = dotNetObject.sourceJSON;
        }
        if (hasValue(dotNetObject.title)) {
            this.layer.title = dotNetObject.title;
        }
        if (hasValue(dotNetObject.url)) {
            this.layer.url = dotNetObject.url;
        }
        if (hasValue(dotNetObject.useViewTime)) {
            this.layer.useViewTime = dotNetObject.useViewTime;
        }
        if (hasValue(dotNetObject.visible)) {
            this.layer.visible = dotNetObject.visible;
        }
    }
    
    async computeAngles(parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImageAngleParameters } = await import('./imageAngleParameters');
        let jsParameters = await buildJsImageAngleParameters(parameters, this.layerId, this.viewId) as any;
        return await this.layer.computeAngles(jsParameters,
            requestOptions);
    }

    async computeHistograms(parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImageHistogramParameters } = await import('./imageHistogramParameters');
        let jsParameters = await buildJsImageHistogramParameters(parameters, this.layerId, this.viewId) as any;
        return await this.layer.computeHistograms(jsParameters,
            requestOptions);
    }

    async computePixelSpaceLocations(parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImagePixelLocationParameters } = await import('./imagePixelLocationParameters');
        let jsParameters = await buildJsImagePixelLocationParameters(parameters) as any;
        return await this.layer.computePixelSpaceLocations(jsParameters,
            requestOptions);
    }

    async computeStatisticsHistograms(parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImageHistogramParameters } = await import('./imageHistogramParameters');
        let jsParameters = await buildJsImageHistogramParameters(parameters, this.layerId, this.viewId) as any;
        return await this.layer.computeStatisticsHistograms(jsParameters,
            requestOptions);
    }

    async createLayerView(view: any,
        options: any): Promise<any> {
        return await this.layer.createLayerView(view,
            options);
    }

    async createPopupTemplate(options: any): Promise<any> {
        return this.layer.createPopupTemplate(options);
    }

    async fetchAttributionData(): Promise<any> {
        return await this.layer.fetchAttributionData();
    }

    async fetchImage(extent: any,
        width: any,
        height: any,
        options: any): Promise<any> {
        let { buildJsExtent } = await import('./extent');
        let jsExtent = buildJsExtent(extent) as any;
        return await this.layer.fetchImage(jsExtent,
            width,
            height,
            options);
    }

    async findImages(parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsFindImagesParameters } = await import('./findImagesParameters');
        let jsParameters = await buildJsFindImagesParameters(parameters, this.layerId, this.viewId) as any;
        return await this.layer.findImages(jsParameters,
            requestOptions);
    }

    async generateRasterInfo(rasterFunction: any,
        options: any): Promise<any> {
        let { buildJsRasterFunction } = await import('./rasterFunction');
        let jsRasterFunction = await buildJsRasterFunction(rasterFunction) as any;
        return await this.layer.generateRasterInfo(jsRasterFunction,
            options);
    }

    async getCatalogItemICSInfo(rasterId: any,
        options: any): Promise<any> {
        return await this.layer.getCatalogItemICSInfo(rasterId,
            options);
    }

    async getCatalogItemRasterInfo(rasterId: any,
        options: any): Promise<any> {
        return await this.layer.getCatalogItemRasterInfo(rasterId,
            options);
    }

    async getImageUrl(parameters: any,
        requestOptions: any): Promise<any> {
        return await this.layer.getImageUrl(parameters,
            requestOptions);
    }

    async getSamples(parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImageSampleParameters } = await import('./imageSampleParameters');
        let jsParameters = await buildJsImageSampleParameters(parameters, this.layerId, this.viewId) as any;
        return await this.layer.getSamples(jsParameters,
            requestOptions);
    }

    async identify(parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImageIdentifyParameters } = await import('./imageIdentifyParameters');
        let jsParameters = await buildJsImageIdentifyParameters(parameters, this.layerId, this.viewId) as any;
        return await this.layer.identify(jsParameters,
            requestOptions);
    }

    async imageToMap(parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImageToMapParameters } = await import('./imageToMapParameters');
        let jsParameters = await buildJsImageToMapParameters(parameters, this.layerId, this.viewId) as any;
        return await this.layer.imageToMap(jsParameters,
            requestOptions);
    }

    async imageToMapMultiray(parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImageToMapMultirayParameters } = await import('./imageToMapMultirayParameters');
        let jsParameters = await buildJsImageToMapMultirayParameters(parameters, this.layerId, this.viewId) as any;
        return await this.layer.imageToMapMultiray(jsParameters,
            requestOptions);
    }

    async mapToImage(parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsMapToImageParameters } = await import('./mapToImageParameters');
        let jsParameters = await buildJsMapToImageParameters(parameters, this.layerId, this.viewId) as any;
        return await this.layer.mapToImage(jsParameters,
            requestOptions);
    }

    async measureAreaAndPerimeter(parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImageAreaParameters } = await import('./imageAreaParameters');
        let jsParameters = await buildJsImageAreaParameters(parameters, this.layerId, this.viewId) as any;
        return await this.layer.measureAreaAndPerimeter(jsParameters,
            requestOptions);
    }

    async measureAreaFromImage(parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsMeasureFromImageParameters } = await import('./measureFromImageParameters');
        let jsParameters = await buildJsMeasureFromImageParameters(parameters, this.layerId, this.viewId) as any;
        return await this.layer.measureAreaFromImage(jsParameters,
            requestOptions);
    }

    async measureDistanceAndAngle(parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImageDistanceParameters } = await import('./imageDistanceParameters');
        let jsParameters = await buildJsImageDistanceParameters(parameters, this.layerId, this.viewId) as any;
        return await this.layer.measureDistanceAndAngle(jsParameters,
            requestOptions);
    }

    async measureHeight(parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImageHeightParameters } = await import('./imageHeightParameters');
        let jsParameters = await buildJsImageHeightParameters(parameters, this.layerId, this.viewId) as any;
        return await this.layer.measureHeight(jsParameters,
            requestOptions);
    }

    async measureLengthFromImage(parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsMeasureFromImageParameters } = await import('./measureFromImageParameters');
        let jsParameters = await buildJsMeasureFromImageParameters(parameters, this.layerId, this.viewId) as any;
        return await this.layer.measureLengthFromImage(jsParameters,
            requestOptions);
    }

    async measurePointOrCentroid(parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImagePointParameters } = await import('./imagePointParameters');
        let jsParameters = await buildJsImagePointParameters(parameters, this.layerId, this.viewId) as any;
        return await this.layer.measurePointOrCentroid(jsParameters,
            requestOptions);
    }

    async queryBoundary(parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImageBoundaryParameters } = await import('./imageBoundaryParameters');
        let jsParameters = await buildJsImageBoundaryParameters(parameters, this.layerId, this.viewId) as any;
        return await this.layer.queryBoundary(jsParameters,
            requestOptions);
    }

    async queryGPSInfo(parameters: any,
        requestOptions: any): Promise<any> {
        let { buildJsImageGPSInfoParameters } = await import('./imageGPSInfoParameters');
        let jsParameters = await buildJsImageGPSInfoParameters(parameters, this.layerId, this.viewId) as any;
        return await this.layer.queryGPSInfo(jsParameters,
            requestOptions);
    }

    async queryObjectIds(query: any,
        requestOptions: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.layer.queryObjectIds(jsQuery,
            requestOptions);
    }

    async queryRasterCount(query: any,
        requestOptions: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.layer.queryRasterCount(jsQuery,
            requestOptions);
    }

    async queryRasters(query: any,
        requestOptions: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.layer.queryRasters(jsQuery,
            requestOptions);
    }

    async redraw(): Promise<void> {
        this.layer.redraw();
    }

    async refresh(): Promise<void> {
        this.layer.refresh();
    }

    async save(options: any): Promise<any> {
        let result = await this.layer.save(options);
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(result);
    }

    async saveAs(portalItem: any,
        options: any): Promise<any> {
        let { buildJsPortalItem } = await import('./portalItem');
        let jsPortalItem = await buildJsPortalItem(portalItem, this.layerId, this.viewId) as any;
        let { buildJsImageryLayerSaveAsOptions } = await import('./imageryLayerSaveAsOptions');
        let jsOptions = await buildJsImageryLayerSaveAsOptions(options) as any;
        let result = await this.layer.saveAs(jsPortalItem,
            jsOptions);
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(result);
    }

    // region properties
    
    async getCapabilities(): Promise<any> {
        if (!hasValue(this.layer.capabilities)) {
            return null;
        }
        
        let { buildDotNetArcGISImageServiceCapabilities } = await import('./arcGISImageServiceCapabilities');
        return await buildDotNetArcGISImageServiceCapabilities(this.layer.capabilities);
    }
    
    async setCapabilities(value: any): Promise<void> {
        let { buildJsArcGISImageServiceCapabilities } = await import('./arcGISImageServiceCapabilities');
        this.layer.capabilities = await  buildJsArcGISImageServiceCapabilities(value);
    }
    
    async getDefaultMosaicRule(): Promise<any> {
        if (!hasValue(this.layer.defaultMosaicRule)) {
            return null;
        }
        
        let { buildDotNetMosaicRule } = await import('./mosaicRule');
        return await buildDotNetMosaicRule(this.layer.defaultMosaicRule);
    }
    
    async getEffect(): Promise<any> {
        if (!hasValue(this.layer.effect)) {
            return null;
        }
        
        let { buildDotNetEffect } = await import('./effect');
        return buildDotNetEffect(this.layer.effect);
    }
    
    async setEffect(value: any): Promise<void> {
        let { buildJsEffect } = await import('./effect');
        this.layer.effect =  buildJsEffect(value);
    }
    
    async getFields(): Promise<any> {
        if (!hasValue(this.layer.fields)) {
            return null;
        }
        
        let { buildDotNetField } = await import('./field');
        return this.layer.fields!.map(i => buildDotNetField(i));
    }
    
    async setFields(value: any): Promise<void> {
        let { buildJsField } = await import('./field');
        this.layer.fields = value.map(i => buildJsField(i)) as any;
    }
    
    async getFieldsIndex(): Promise<any> {
        if (!hasValue(this.layer.fieldsIndex)) {
            return null;
        }
        
        let { buildDotNetFieldsIndex } = await import('./fieldsIndex');
        return await buildDotNetFieldsIndex(this.layer.fieldsIndex);
    }
    
    async getFullExtent(): Promise<any> {
        if (!hasValue(this.layer.fullExtent)) {
            return null;
        }
        
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(this.layer.fullExtent);
    }
    
    async setFullExtent(value: any): Promise<void> {
        let { buildJsExtent } = await import('./extent');
        this.layer.fullExtent =  buildJsExtent(value);
    }
    
    async getMosaicRule(): Promise<any> {
        if (!hasValue(this.layer.mosaicRule)) {
            return null;
        }
        
        let { buildDotNetMosaicRule } = await import('./mosaicRule');
        return await buildDotNetMosaicRule(this.layer.mosaicRule);
    }
    
    async setMosaicRule(value: any): Promise<void> {
        let { buildJsMosaicRule } = await import('./mosaicRule');
        this.layer.mosaicRule = await  buildJsMosaicRule(value);
    }
    
    async getMultidimensionalSubset(): Promise<any> {
        if (!hasValue(this.layer.multidimensionalSubset)) {
            return null;
        }
        
        let { buildDotNetMultidimensionalSubset } = await import('./multidimensionalSubset');
        return await buildDotNetMultidimensionalSubset(this.layer.multidimensionalSubset);
    }
    
    async setMultidimensionalSubset(value: any): Promise<void> {
        let { buildJsMultidimensionalSubset } = await import('./multidimensionalSubset');
        this.layer.multidimensionalSubset = await  buildJsMultidimensionalSubset(value);
    }
    
    async getPopupTemplate(): Promise<any> {
        if (!hasValue(this.layer.popupTemplate)) {
            return null;
        }
        
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        return await buildDotNetPopupTemplate(this.layer.popupTemplate);
    }
    
    async setPopupTemplate(value: any): Promise<void> {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        this.layer.popupTemplate =  buildJsPopupTemplate(value, this.layerId, this.viewId);
    }
    
    async getPortalItem(): Promise<any> {
        if (!hasValue(this.layer.portalItem)) {
            return null;
        }
        
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(this.layer.portalItem);
    }
    
    async setPortalItem(value: any): Promise<void> {
        let { buildJsPortalItem } = await import('./portalItem');
        this.layer.portalItem = await  buildJsPortalItem(value, this.layerId, this.viewId);
    }
    
    async getRasterFields(): Promise<any> {
        if (!hasValue(this.layer.rasterFields)) {
            return null;
        }
        
        let { buildDotNetField } = await import('./field');
        return this.layer.rasterFields!.map(i => buildDotNetField(i));
    }
    
    async getRasterFunction(): Promise<any> {
        if (!hasValue(this.layer.rasterFunction)) {
            return null;
        }
        
        let { buildDotNetRasterFunction } = await import('./rasterFunction');
        return await buildDotNetRasterFunction(this.layer.rasterFunction);
    }
    
    async setRasterFunction(value: any): Promise<void> {
        let { buildJsRasterFunction } = await import('./rasterFunction');
        this.layer.rasterFunction = await  buildJsRasterFunction(value);
    }
    
    async getRenderingRule(): Promise<any> {
        if (!hasValue(this.layer.renderingRule)) {
            return null;
        }
        
        let { buildDotNetRasterFunction } = await import('./rasterFunction');
        return await buildDotNetRasterFunction(this.layer.renderingRule);
    }
    
    async setRenderingRule(value: any): Promise<void> {
        let { buildJsRasterFunction } = await import('./rasterFunction');
        this.layer.renderingRule = await  buildJsRasterFunction(value);
    }
    
    async getServiceRasterInfo(): Promise<any> {
        if (!hasValue(this.layer.serviceRasterInfo)) {
            return null;
        }
        
        let { buildDotNetRasterInfo } = await import('./rasterInfo');
        return await buildDotNetRasterInfo(this.layer.serviceRasterInfo);
    }
    
    async getTimeExtent(): Promise<any> {
        if (!hasValue(this.layer.timeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.timeExtent);
    }
    
    async setTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.timeExtent = await  buildJsTimeExtent(value);
    }
    
    async getTimeInfo(): Promise<any> {
        if (!hasValue(this.layer.timeInfo)) {
            return null;
        }
        
        let { buildDotNetTimeInfo } = await import('./timeInfo');
        return await buildDotNetTimeInfo(this.layer.timeInfo);
    }
    
    async setTimeInfo(value: any): Promise<void> {
        let { buildJsTimeInfo } = await import('./timeInfo');
        this.layer.timeInfo = await  buildJsTimeInfo(value);
    }
    
    async getTimeOffset(): Promise<any> {
        if (!hasValue(this.layer.timeOffset)) {
            return null;
        }
        
        let { buildDotNetTimeInterval } = await import('./timeInterval');
        return await buildDotNetTimeInterval(this.layer.timeOffset);
    }
    
    async setTimeOffset(value: any): Promise<void> {
        let { buildJsTimeInterval } = await import('./timeInterval');
        this.layer.timeOffset = await  buildJsTimeInterval(value);
    }
    
    async getVisibilityTimeExtent(): Promise<any> {
        if (!hasValue(this.layer.visibilityTimeExtent)) {
            return null;
        }
        
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        return buildDotNetTimeExtent(this.layer.visibilityTimeExtent);
    }
    
    async setVisibilityTimeExtent(value: any): Promise<void> {
        let { buildJsTimeExtent } = await import('./timeExtent');
        this.layer.visibilityTimeExtent = await  buildJsTimeExtent(value);
    }
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}


export async function buildJsImageryLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.capabilities)) {
        let { buildJsArcGISImageServiceCapabilities } = await import('./arcGISImageServiceCapabilities');
        properties.capabilities = await buildJsArcGISImageServiceCapabilities(dotNetObject.capabilities) as any;
    }
    if (hasValue(dotNetObject.effect)) {
        let { buildJsEffect } = await import('./effect');
        properties.effect = buildJsEffect(dotNetObject.effect) as any;
    }
    if (hasValue(dotNetObject.fields) && dotNetObject.fields.length > 0) {
        let { buildJsField } = await import('./field');
        properties.fields = dotNetObject.fields.map(i => buildJsField(i)) as any;
    }
    if (hasValue(dotNetObject.fullExtent)) {
        let { buildJsExtent } = await import('./extent');
        properties.fullExtent = buildJsExtent(dotNetObject.fullExtent) as any;
    }
    if (hasValue(dotNetObject.mosaicRule)) {
        let { buildJsMosaicRule } = await import('./mosaicRule');
        properties.mosaicRule = await buildJsMosaicRule(dotNetObject.mosaicRule) as any;
    }
    if (hasValue(dotNetObject.multidimensionalSubset)) {
        let { buildJsMultidimensionalSubset } = await import('./multidimensionalSubset');
        properties.multidimensionalSubset = await buildJsMultidimensionalSubset(dotNetObject.multidimensionalSubset) as any;
    }
    if (hasValue(dotNetObject.hasPixelFilter) && dotNetObject.hasPixelFilter) {
        properties.pixelFilter = async (pixelData) => {
            let { buildDotNetPixelData } = await import('./pixelData');
            let dnPixelData = await buildDotNetPixelData(pixelData);

            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsPixelFilter', dnPixelData);
        };
    }
    if (hasValue(dotNetObject.popupTemplate)) {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        properties.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.portalItem)) {
        let { buildJsPortalItem } = await import('./portalItem');
        properties.portalItem = await buildJsPortalItem(dotNetObject.portalItem, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.rasterFunction)) {
        let { buildJsRasterFunction } = await import('./rasterFunction');
        properties.rasterFunction = await buildJsRasterFunction(dotNetObject.rasterFunction) as any;
    }
    if (hasValue(dotNetObject.renderingRule)) {
        let { buildJsRasterFunction } = await import('./rasterFunction');
        properties.renderingRule = await buildJsRasterFunction(dotNetObject.renderingRule) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent) as any;
    }
    if (hasValue(dotNetObject.timeInfo)) {
        let { buildJsTimeInfo } = await import('./timeInfo');
        properties.timeInfo = await buildJsTimeInfo(dotNetObject.timeInfo) as any;
    }
    if (hasValue(dotNetObject.timeOffset)) {
        let { buildJsTimeInterval } = await import('./timeInterval');
        properties.timeOffset = await buildJsTimeInterval(dotNetObject.timeOffset) as any;
    }
    if (hasValue(dotNetObject.visibilityTimeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.visibilityTimeExtent = await buildJsTimeExtent(dotNetObject.visibilityTimeExtent) as any;
    }

    if (hasValue(dotNetObject.arcGISLayerId)) {
        properties.id = dotNetObject.arcGISLayerId;
    }
    if (hasValue(dotNetObject.bandIds) && dotNetObject.bandIds.length > 0) {
        properties.bandIds = dotNetObject.bandIds;
    }
    if (hasValue(dotNetObject.blendMode)) {
        properties.blendMode = dotNetObject.blendMode;
    }
    if (hasValue(dotNetObject.compressionQuality)) {
        properties.compressionQuality = dotNetObject.compressionQuality;
    }
    if (hasValue(dotNetObject.compressionTolerance)) {
        properties.compressionTolerance = dotNetObject.compressionTolerance;
    }
    if (hasValue(dotNetObject.copyright)) {
        properties.copyright = dotNetObject.copyright;
    }
    if (hasValue(dotNetObject.customParameters)) {
        properties.customParameters = dotNetObject.customParameters;
    }
    if (hasValue(dotNetObject.definitionExpression)) {
        properties.definitionExpression = dotNetObject.definitionExpression;
    }
    if (hasValue(dotNetObject.format)) {
        properties.format = dotNetObject.format;
    }
    if (hasValue(dotNetObject.imageMaxHeight)) {
        properties.imageMaxHeight = dotNetObject.imageMaxHeight;
    }
    if (hasValue(dotNetObject.imageMaxWidth)) {
        properties.imageMaxWidth = dotNetObject.imageMaxWidth;
    }
    if (hasValue(dotNetObject.interpolation)) {
        properties.interpolation = dotNetObject.interpolation;
    }
    if (hasValue(dotNetObject.legendEnabled)) {
        properties.legendEnabled = dotNetObject.legendEnabled;
    }
    if (hasValue(dotNetObject.listMode)) {
        properties.listMode = dotNetObject.listMode;
    }
    if (hasValue(dotNetObject.maxScale)) {
        properties.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.minScale)) {
        properties.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.noData)) {
        properties.noData = dotNetObject.noData;
    }
    if (hasValue(dotNetObject.noDataInterpretation)) {
        properties.noDataInterpretation = dotNetObject.noDataInterpretation;
    }
    if (hasValue(dotNetObject.objectIdField)) {
        properties.objectIdField = dotNetObject.objectIdField;
    }
    if (hasValue(dotNetObject.opacity)) {
        properties.opacity = dotNetObject.opacity;
    }
    if (hasValue(dotNetObject.persistenceEnabled)) {
        properties.persistenceEnabled = dotNetObject.persistenceEnabled;
    }
    if (hasValue(dotNetObject.pixelType)) {
        properties.pixelType = dotNetObject.pixelType;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        properties.popupEnabled = dotNetObject.popupEnabled;
    }
    if (hasValue(dotNetObject.refreshInterval)) {
        properties.refreshInterval = dotNetObject.refreshInterval;
    }
    if (hasValue(dotNetObject.sourceJSON)) {
        properties.sourceJSON = dotNetObject.sourceJSON;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    if (hasValue(dotNetObject.url)) {
        properties.url = dotNetObject.url;
    }
    if (hasValue(dotNetObject.useViewTime)) {
        properties.useViewTime = dotNetObject.useViewTime;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    let jsImageryLayer = new ImageryLayer(properties);
    if (hasValue(dotNetObject.hasCreateListener) && dotNetObject.hasCreateListener) {
        jsImageryLayer.on('layerview-create', async (evt: any) => {
            let { buildDotNetLayerViewCreateEvent } = await import('./layerViewCreateEvent');
            let dnEvent = await buildDotNetLayerViewCreateEvent(evt, layerId, viewId);
            let streamRef = buildJsStreamReference(dnEvent ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreate', streamRef);
        });
    }
    
    if (hasValue(dotNetObject.hasCreateErrorListener) && dotNetObject.hasCreateErrorListener) {
        jsImageryLayer.on('layerview-create-error', async (evt: any) => {
            let { buildDotNetLayerViewCreateErrorEvent } = await import('./layerViewCreateErrorEvent');
            let dnEvent = await buildDotNetLayerViewCreateErrorEvent(evt, layerId, viewId);
            let streamRef = buildJsStreamReference(dnEvent ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCreateError', streamRef);
        });
    }
    
    if (hasValue(dotNetObject.hasDestroyListener) && dotNetObject.hasDestroyListener) {
        jsImageryLayer.on('layerview-destroy', async (evt: any) => {
            let { buildDotNetLayerViewDestroyEvent } = await import('./layerViewDestroyEvent');
            let dnEvent = await buildDotNetLayerViewDestroyEvent(evt, layerId, viewId);
            let streamRef = buildJsStreamReference(dnEvent ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsDestroy', streamRef);
        });
    }
    
    if (hasValue(dotNetObject.hasRefreshListener) && dotNetObject.hasRefreshListener) {
        jsImageryLayer.on('refresh', async (evt: any) => {
            let streamRef = buildJsStreamReference(evt ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsRefresh', streamRef);
        });
    }
    

    let { default: ImageryLayerWrapper } = await import('./imageryLayer');
    let imageryLayerWrapper = new ImageryLayerWrapper(jsImageryLayer);
    imageryLayerWrapper.geoBlazorId = dotNetObject.id;
    imageryLayerWrapper.viewId = viewId;
    imageryLayerWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = imageryLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsImageryLayer;
    
    try {
        let jsObjectRef = DotNet.createJSObjectReference(imageryLayerWrapper);
        let { buildDotNetImageryLayer } = await import('./imageryLayer');
        let dnInstantiatedObject = await buildDotNetImageryLayer(jsImageryLayer);

        let dnStream = buildJsStreamReference(dnInstantiatedObject);
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, dnStream);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImageryLayer', e);
    }
    
    return jsImageryLayer;
}


export async function buildDotNetImageryLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageryLayer: any = {};
    
    if (hasValue(jsObject.capabilities)) {
        let { buildDotNetArcGISImageServiceCapabilities } = await import('./arcGISImageServiceCapabilities');
        dotNetImageryLayer.capabilities = await buildDotNetArcGISImageServiceCapabilities(jsObject.capabilities);
    }
    
    if (hasValue(jsObject.defaultMosaicRule)) {
        let { buildDotNetMosaicRule } = await import('./mosaicRule');
        dotNetImageryLayer.defaultMosaicRule = await buildDotNetMosaicRule(jsObject.defaultMosaicRule);
    }
    
    if (hasValue(jsObject.effect)) {
        let { buildDotNetEffect } = await import('./effect');
        dotNetImageryLayer.effect = buildDotNetEffect(jsObject.effect);
    }
    
    if (hasValue(jsObject.fields)) {
        let { buildDotNetField } = await import('./field');
        dotNetImageryLayer.fields = jsObject.fields.map(i => buildDotNetField(i));
    }
    
    if (hasValue(jsObject.fieldsIndex)) {
        let { buildDotNetFieldsIndex } = await import('./fieldsIndex');
        dotNetImageryLayer.fieldsIndex = await buildDotNetFieldsIndex(jsObject.fieldsIndex);
    }
    
    if (hasValue(jsObject.fullExtent)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetImageryLayer.fullExtent = buildDotNetExtent(jsObject.fullExtent);
    }
    
    if (hasValue(jsObject.mosaicRule)) {
        let { buildDotNetMosaicRule } = await import('./mosaicRule');
        dotNetImageryLayer.mosaicRule = await buildDotNetMosaicRule(jsObject.mosaicRule);
    }
    
    if (hasValue(jsObject.multidimensionalSubset)) {
        let { buildDotNetMultidimensionalSubset } = await import('./multidimensionalSubset');
        dotNetImageryLayer.multidimensionalSubset = await buildDotNetMultidimensionalSubset(jsObject.multidimensionalSubset);
    }
    
    if (hasValue(jsObject.popupTemplate)) {
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        dotNetImageryLayer.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
    }
    
    if (hasValue(jsObject.portalItem)) {
        let { buildDotNetPortalItem } = await import('./portalItem');
        dotNetImageryLayer.portalItem = await buildDotNetPortalItem(jsObject.portalItem);
    }
    
    if (hasValue(jsObject.rasterFields)) {
        let { buildDotNetField } = await import('./field');
        dotNetImageryLayer.rasterFields = jsObject.rasterFields.map(i => buildDotNetField(i));
    }
    
    if (hasValue(jsObject.rasterFunction)) {
        let { buildDotNetRasterFunction } = await import('./rasterFunction');
        dotNetImageryLayer.rasterFunction = await buildDotNetRasterFunction(jsObject.rasterFunction);
    }
    
    if (hasValue(jsObject.serviceRasterInfo)) {
        let { buildDotNetRasterInfo } = await import('./rasterInfo');
        dotNetImageryLayer.serviceRasterInfo = await buildDotNetRasterInfo(jsObject.serviceRasterInfo);
    }
    
    if (hasValue(jsObject.timeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetImageryLayer.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
    }
    
    if (hasValue(jsObject.timeInfo)) {
        let { buildDotNetTimeInfo } = await import('./timeInfo');
        dotNetImageryLayer.timeInfo = await buildDotNetTimeInfo(jsObject.timeInfo);
    }
    
    if (hasValue(jsObject.timeOffset)) {
        let { buildDotNetTimeInterval } = await import('./timeInterval');
        dotNetImageryLayer.timeOffset = await buildDotNetTimeInterval(jsObject.timeOffset);
    }
    
    if (hasValue(jsObject.visibilityTimeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetImageryLayer.visibilityTimeExtent = buildDotNetTimeExtent(jsObject.visibilityTimeExtent);
    }
    
    if (hasValue(jsObject.id)) {
        dotNetImageryLayer.arcGISLayerId = jsObject.id;
    }
    
    if (hasValue(jsObject.bandIds)) {
        dotNetImageryLayer.bandIds = jsObject.bandIds;
    }
    
    if (hasValue(jsObject.blendMode)) {
        dotNetImageryLayer.blendMode = removeCircularReferences(jsObject.blendMode);
    }
    
    if (hasValue(jsObject.compressionQuality)) {
        dotNetImageryLayer.compressionQuality = jsObject.compressionQuality;
    }
    
    if (hasValue(jsObject.compressionTolerance)) {
        dotNetImageryLayer.compressionTolerance = jsObject.compressionTolerance;
    }
    
    if (hasValue(jsObject.copyright)) {
        dotNetImageryLayer.copyright = jsObject.copyright;
    }
    
    if (hasValue(jsObject.customParameters)) {
        dotNetImageryLayer.customParameters = jsObject.customParameters;
    }
    
    if (hasValue(jsObject.definitionExpression)) {
        dotNetImageryLayer.definitionExpression = jsObject.definitionExpression;
    }
    
    if (hasValue(jsObject.format)) {
        dotNetImageryLayer.format = removeCircularReferences(jsObject.format);
    }
    
    if (hasValue(jsObject.hasMultidimensions)) {
        dotNetImageryLayer.hasMultidimensions = jsObject.hasMultidimensions;
    }
    
    if (hasValue(jsObject.imageMaxHeight)) {
        dotNetImageryLayer.imageMaxHeight = jsObject.imageMaxHeight;
    }
    
    if (hasValue(jsObject.imageMaxWidth)) {
        dotNetImageryLayer.imageMaxWidth = jsObject.imageMaxWidth;
    }
    
    if (hasValue(jsObject.interpolation)) {
        dotNetImageryLayer.interpolation = removeCircularReferences(jsObject.interpolation);
    }
    
    if (hasValue(jsObject.legendEnabled)) {
        dotNetImageryLayer.legendEnabled = jsObject.legendEnabled;
    }
    
    if (hasValue(jsObject.listMode)) {
        dotNetImageryLayer.listMode = removeCircularReferences(jsObject.listMode);
    }
    
    if (hasValue(jsObject.loaded)) {
        dotNetImageryLayer.loaded = jsObject.loaded;
    }
    
    if (hasValue(jsObject.maxScale)) {
        dotNetImageryLayer.maxScale = jsObject.maxScale;
    }
    
    if (hasValue(jsObject.minScale)) {
        dotNetImageryLayer.minScale = jsObject.minScale;
    }
    
    if (hasValue(jsObject.multidimensionalInfo)) {
        dotNetImageryLayer.multidimensionalInfo = removeCircularReferences(jsObject.multidimensionalInfo);
    }
    
    if (hasValue(jsObject.noData)) {
        dotNetImageryLayer.noData = removeCircularReferences(jsObject.noData);
    }
    
    if (hasValue(jsObject.noDataInterpretation)) {
        dotNetImageryLayer.noDataInterpretation = removeCircularReferences(jsObject.noDataInterpretation);
    }
    
    if (hasValue(jsObject.objectIdField)) {
        dotNetImageryLayer.objectIdField = jsObject.objectIdField;
    }
    
    if (hasValue(jsObject.opacity)) {
        dotNetImageryLayer.opacity = jsObject.opacity;
    }
    
    if (hasValue(jsObject.persistenceEnabled)) {
        dotNetImageryLayer.persistenceEnabled = jsObject.persistenceEnabled;
    }
    
    if (hasValue(jsObject.pixelType)) {
        dotNetImageryLayer.pixelType = removeCircularReferences(jsObject.pixelType);
    }
    
    if (hasValue(jsObject.popupEnabled)) {
        dotNetImageryLayer.popupEnabled = jsObject.popupEnabled;
    }
    
    if (hasValue(jsObject.rasterFunctionInfos)) {
        dotNetImageryLayer.rasterFunctionInfos = removeCircularReferences(jsObject.rasterFunctionInfos);
    }
    
    if (hasValue(jsObject.refreshInterval)) {
        dotNetImageryLayer.refreshInterval = jsObject.refreshInterval;
    }
    
    if (hasValue(jsObject.sourceType)) {
        dotNetImageryLayer.sourceType = removeCircularReferences(jsObject.sourceType);
    }
    
    if (hasValue(jsObject.spatialReference)) {
        dotNetImageryLayer.spatialReference = removeCircularReferences(jsObject.spatialReference);
    }
    
    if (hasValue(jsObject.title)) {
        dotNetImageryLayer.title = jsObject.title;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetImageryLayer.type = removeCircularReferences(jsObject.type);
    }
    
    if (hasValue(jsObject.url)) {
        dotNetImageryLayer.url = jsObject.url;
    }
    
    if (hasValue(jsObject.useViewTime)) {
        dotNetImageryLayer.useViewTime = jsObject.useViewTime;
    }
    
    if (hasValue(jsObject.version)) {
        dotNetImageryLayer.version = jsObject.version;
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetImageryLayer.visible = jsObject.visible;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetImageryLayer.id = geoBlazorId;
    }

    return dotNetImageryLayer;
}

