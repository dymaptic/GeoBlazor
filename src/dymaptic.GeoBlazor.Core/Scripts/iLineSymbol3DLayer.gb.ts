// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import LineSymbol3DLayer from '@arcgis/core/symbols/LineSymbol3DLayer';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ILineSymbol3DLayerGenerated implements IPropertyWrapper {
    public layer: LineSymbol3DLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: LineSymbol3DLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    // region properties
    
    async getMarker(): Promise<any> {
        if (!hasValue(this.layer.marker)) {
            return null;
        }
        
        let { buildDotNetLineStyleMarker3D } = await import('./lineStyleMarker3D');
        return await buildDotNetLineStyleMarker3D(this.layer.marker);
    }
    async setMarker(value: any): Promise<void> {
        let { buildJsLineStyleMarker3D } = await import('./lineStyleMarker3D');
        this.layer.marker = await  buildJsLineStyleMarker3D(value, this.layerId, this.viewId);
    }
    async getMaterial(): Promise<any> {
        if (!hasValue(this.layer.material)) {
            return null;
        }
        
        let { buildDotNetLineSymbol3DLayerMaterial } = await import('./lineSymbol3DLayerMaterial');
        return await buildDotNetLineSymbol3DLayerMaterial(this.layer.material);
    }
    async setMaterial(value: any): Promise<void> {
        let { buildJsLineSymbol3DLayerMaterial } = await import('./lineSymbol3DLayerMaterial');
        this.layer.material = await  buildJsLineSymbol3DLayerMaterial(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}


export async function buildJsILineSymbol3DLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.marker)) {
        let { buildJsLineStyleMarker3D } = await import('./lineStyleMarker3D');
        properties.marker = await buildJsLineStyleMarker3D(dotNetObject.marker, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.material)) {
        let { buildJsLineSymbol3DLayerMaterial } = await import('./lineSymbol3DLayerMaterial');
        properties.material = await buildJsLineSymbol3DLayerMaterial(dotNetObject.material, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.cap)) {
        properties.cap = dotNetObject.cap;
    }
    if (hasValue(dotNetObject.join)) {
        properties.join = dotNetObject.join;
    }
    if (hasValue(dotNetObject.pattern)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedPattern } = dotNetObject.pattern;
        properties.pattern = sanitizedPattern;
    }
    if (hasValue(dotNetObject.size)) {
        properties.size = dotNetObject.size;
    }
    let jsLineSymbol3DLayer = new LineSymbol3DLayer(properties);

    let { default: ILineSymbol3DLayerWrapper } = await import('./iLineSymbol3DLayer');
    let iLineSymbol3DLayerWrapper = new ILineSymbol3DLayerWrapper(jsLineSymbol3DLayer);
    iLineSymbol3DLayerWrapper.geoBlazorId = dotNetObject.id;
    iLineSymbol3DLayerWrapper.viewId = viewId;
    iLineSymbol3DLayerWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(iLineSymbol3DLayerWrapper);
    jsObjectRefs[dotNetObject.id] = iLineSymbol3DLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsLineSymbol3DLayer;
    let { buildDotNetILineSymbol3DLayer } = await import('./iLineSymbol3DLayer');
    let dnInstantiatedObject = await buildDotNetILineSymbol3DLayer(jsLineSymbol3DLayer);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ILineSymbol3DLayer', e);
    }
    
    return jsLineSymbol3DLayer;
}

export async function buildDotNetILineSymbol3DLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetILineSymbol3DLayer: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.marker)) {
            let { buildDotNetLineStyleMarker3D } = await import('./lineStyleMarker3D');
            dotNetILineSymbol3DLayer.marker = await buildDotNetLineStyleMarker3D(jsObject.marker);
        }
        if (hasValue(jsObject.material)) {
            let { buildDotNetLineSymbol3DLayerMaterial } = await import('./lineSymbol3DLayerMaterial');
            dotNetILineSymbol3DLayer.material = await buildDotNetLineSymbol3DLayerMaterial(jsObject.material);
        }
    if (hasValue(jsObject.cap)) {
        dotNetILineSymbol3DLayer.cap = jsObject.cap;
    }
    if (hasValue(jsObject.join)) {
        dotNetILineSymbol3DLayer.join = jsObject.join;
    }
    if (hasValue(jsObject.pattern)) {
        dotNetILineSymbol3DLayer.pattern = jsObject.pattern;
    }
    if (hasValue(jsObject.size)) {
        dotNetILineSymbol3DLayer.size = jsObject.size;
    }
    if (hasValue(jsObject.type)) {
        dotNetILineSymbol3DLayer.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetILineSymbol3DLayer.id = k;
                break;
            }
        }
    }

    return dotNetILineSymbol3DLayer;
}

