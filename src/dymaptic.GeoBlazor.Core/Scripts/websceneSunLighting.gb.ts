// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import websceneSunLighting from '@arcgis/core/webscene/SunLighting';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';

export async function buildJsWebsceneSunLightingGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.date)) {
        properties.date = dotNetObject.date;
    }
    if (hasValue(dotNetObject.directShadowsEnabled)) {
        properties.directShadowsEnabled = dotNetObject.directShadowsEnabled;
    }
    if (hasValue(dotNetObject.displayUTCOffset)) {
        properties.displayUTCOffset = dotNetObject.displayUTCOffset;
    }
    let jswebsceneSunLighting = new websceneSunLighting(properties);
    
    jsObjectRefs[dotNetObject.id] = jswebsceneSunLighting;
    arcGisObjectRefs[dotNetObject.id] = jswebsceneSunLighting;
    
    return jswebsceneSunLighting;
}


export async function buildDotNetWebsceneSunLightingGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWebsceneSunLighting: any = {};
    
    if (hasValue(jsObject.date)) {
        dotNetWebsceneSunLighting.date = jsObject.date;
    }
    
    if (hasValue(jsObject.directShadowsEnabled)) {
        dotNetWebsceneSunLighting.directShadowsEnabled = jsObject.directShadowsEnabled;
    }
    
    if (hasValue(jsObject.displayUTCOffset)) {
        dotNetWebsceneSunLighting.displayUTCOffset = jsObject.displayUTCOffset;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetWebsceneSunLighting.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetWebsceneSunLighting.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetWebsceneSunLighting.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetWebsceneSunLighting.id)) {
        jsObjectRefs[dotNetWebsceneSunLighting.id] ??= jsObject;
        arcGisObjectRefs[dotNetWebsceneSunLighting.id] ??= jsObject;
    }

    return dotNetWebsceneSunLighting;
}

