// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import websceneSunLighting from '@arcgis/core/webscene/SunLighting';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, sanitize, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetWebsceneSunLighting } from './websceneSunLighting';
export async function buildJsWebsceneSunLightingGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }
    
    switch (dotNetObject.type) {
        case 'sun':
            if (!hasValue(dotNetObject)) {
                return null;
            }

            let properties: any = {};

            if (hasValue(dotNetObject.date)) {
                properties.date = dotNetObject.date;
            }
            if (hasValue(dotNetObject.directShadowsEnabled)) {
                properties.directShadowsEnabled = dotNetObject.directShadowsEnabled;
            }
            if (hasValue(dotNetObject.displayUTCOffset)) {
                properties.displayUTCOffset = dotNetObject.displayUTCOffset;
            }
            let jswebsceneSunLighting = new websceneSunLighting(properties);
    
            jsObjectRefs[dotNetObject.id] = jswebsceneSunLighting;
            arcGisObjectRefs[dotNetObject.id] = jswebsceneSunLighting;
    
            return jswebsceneSunLighting;

        case '': 
            let { buildJsSunLighting } = await import('./sunLighting');
            return await buildJsSunLighting(dotNetObject, layerId, viewId);
        default: 
            return sanitize(dotNetObject);
    }
}     

export async function buildDotNetWebsceneSunLightingGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    switch (jsObject.type) {
        case 'sun': 
            let dotNetWebsceneSunLighting: any = {};
            if (hasValue(jsObject.date)) {
                dotNetWebsceneSunLighting.date = jsObject.date;
            }
    
            if (hasValue(jsObject.directShadowsEnabled)) {
                dotNetWebsceneSunLighting.directShadowsEnabled = jsObject.directShadowsEnabled;
            }
    
            if (hasValue(jsObject.displayUTCOffset)) {
                dotNetWebsceneSunLighting.displayUTCOffset = jsObject.displayUTCOffset;
            }
    
            if (hasValue(jsObject.type)) {
                dotNetWebsceneSunLighting.type = removeCircularReferences(jsObject.type);
            }
    

            let geoBlazorId = lookupGeoBlazorId(jsObject);
            if (hasValue(geoBlazorId)) {
                dotNetWebsceneSunLighting.id = geoBlazorId;
            }

            return dotNetWebsceneSunLighting;

        case '': 
            let { buildDotNetSunLighting } = await import('./sunLighting');
            return await buildDotNetSunLighting(jsObject, layerId, viewId);
        default: 
            return removeCircularReferences(jsObject);
    }
}     

