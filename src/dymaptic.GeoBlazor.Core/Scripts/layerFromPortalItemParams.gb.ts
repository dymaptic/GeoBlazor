// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetLayerFromPortalItemParams } from './layerFromPortalItemParams';

export async function buildJsLayerFromPortalItemParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsLayerFromPortalItemParams: any = {};
    if (hasValue(dotNetObject.portalItem)) {
        let { buildJsPortalItem } = await import('./portalItem');
        jsLayerFromPortalItemParams.portalItem = await buildJsPortalItem(dotNetObject.portalItem, layerId, viewId) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsLayerFromPortalItemParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLayerFromPortalItemParams;
    
    return jsLayerFromPortalItemParams;
}


export async function buildDotNetLayerFromPortalItemParamsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsLayerFromPortalItemParams } = await import('./layerFromPortalItemParams');
        jsComponentRef = await buildJsLayerFromPortalItemParams(jsObject, layerId, viewId);
    }
    
    let dotNetLayerFromPortalItemParams: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.portalItem)) {
        let { buildDotNetPortalItem } = await import('./portalItem');
        dotNetLayerFromPortalItemParams.portalItem = await buildDotNetPortalItem(jsObject.portalItem, layerId, viewId);
    }

    return dotNetLayerFromPortalItemParams;
}

