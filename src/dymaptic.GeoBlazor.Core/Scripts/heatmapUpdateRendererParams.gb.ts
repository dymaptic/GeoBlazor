// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetHeatmapUpdateRendererParams } from './heatmapUpdateRendererParams';

export async function buildJsHeatmapUpdateRendererParamsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsheatmapUpdateRendererParams: any = {}
    if (hasValue(dotNetObject.renderer)) {
        let { buildJsHeatmapRenderer } = await import('./heatmapRenderer');
        jsheatmapUpdateRendererParams.renderer = await buildJsHeatmapRenderer(dotNetObject.renderer, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.fadeRatio)) {
        jsheatmapUpdateRendererParams.fadeRatio = dotNetObject.fadeRatio;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsheatmapUpdateRendererParams);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsheatmapUpdateRendererParams;
    
    let dnInstantiatedObject = await buildDotNetHeatmapUpdateRendererParams(jsheatmapUpdateRendererParams);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for HeatmapUpdateRendererParams', e);
    }
    
    return jsheatmapUpdateRendererParams;
}

export async function buildDotNetHeatmapUpdateRendererParamsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetHeatmapUpdateRendererParams: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.renderer)) {
            let { buildDotNetHeatmapRenderer } = await import('./heatmapRenderer');
            dotNetHeatmapUpdateRendererParams.renderer = await buildDotNetHeatmapRenderer(jsObject.renderer);
        }
        if (hasValue(jsObject.fadeRatio)) {
            dotNetHeatmapUpdateRendererParams.fadeRatio = jsObject.fadeRatio;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetHeatmapUpdateRendererParams.id = k;
                break;
            }
        }
    }

    return dotNetHeatmapUpdateRendererParams;
}

