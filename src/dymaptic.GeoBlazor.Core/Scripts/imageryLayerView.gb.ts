// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageryLayerView from '@arcgis/core/views/layers/ImageryLayerView';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ImageryLayerViewGenerated implements IPropertyWrapper {
    public component: ImageryLayerView;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ImageryLayerView) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.highlightOptions)) {
            let { buildJsHighlightOptions } = await import('./highlightOptions');
            this.component.highlightOptions = await buildJsHighlightOptions(dotNetObject.highlightOptions) as any;
        }
        if (hasValue(dotNetObject.pixelData)) {
            let { buildJsPixelData } = await import('./pixelData');
            this.component.pixelData = await buildJsPixelData(dotNetObject.pixelData, this.layerId, this.viewId) as any;
        }

        if (hasValue(dotNetObject.visible)) {
            this.component.visible = dotNetObject.visible;
        }
    }
    
    async highlight(target: any): Promise<any> {
        let { buildJsGraphic } = await import('./graphic');
        let jsTarget = buildJsGraphic(target) as any;
        let result = this.component.highlight(jsTarget);
        let { buildDotNetHighlightHandle } = await import('./highlightHandle');
        return await buildDotNetHighlightHandle(result, this.layerId, this.viewId);
    }

    // region properties
    
    async getHighlightOptions(): Promise<any> {
        if (!hasValue(this.component.highlightOptions)) {
            return null;
        }
        
        let { buildDotNetHighlightOptions } = await import('./highlightOptions');
        return await buildDotNetHighlightOptions(this.component.highlightOptions);
    }
    
    async setHighlightOptions(value: any): Promise<void> {
        let { buildJsHighlightOptions } = await import('./highlightOptions');
        this.component.highlightOptions = await  buildJsHighlightOptions(value);
    }
    
    async getLayer(): Promise<any> {
        if (!hasValue(this.component.layer)) {
            return null;
        }
        
        let { buildDotNetLayer } = await import('./layer');
        return await buildDotNetLayer(this.component.layer);
    }
    
    async getPixelData(): Promise<any> {
        if (!hasValue(this.component.pixelData)) {
            return null;
        }
        
        let { buildDotNetPixelData } = await import('./pixelData');
        return await buildDotNetPixelData(this.component.pixelData);
    }
    
    async setPixelData(value: any): Promise<void> {
        let { buildJsPixelData } = await import('./pixelData');
        this.component.pixelData = await  buildJsPixelData(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsImageryLayerViewGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.highlightOptions)) {
        let { buildJsHighlightOptions } = await import('./highlightOptions');
        properties.highlightOptions = await buildJsHighlightOptions(dotNetObject.highlightOptions) as any;
    }
    if (hasValue(dotNetObject.pixelData)) {
        let { buildJsPixelData } = await import('./pixelData');
        properties.pixelData = await buildJsPixelData(dotNetObject.pixelData, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    let jsImageryLayerView = new ImageryLayerView(properties);

    let { default: ImageryLayerViewWrapper } = await import('./imageryLayerView');
    let imageryLayerViewWrapper = new ImageryLayerViewWrapper(jsImageryLayerView);
    imageryLayerViewWrapper.geoBlazorId = dotNetObject.id;
    imageryLayerViewWrapper.viewId = viewId;
    imageryLayerViewWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(imageryLayerViewWrapper);
    jsObjectRefs[dotNetObject.id] = imageryLayerViewWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsImageryLayerView;
    
    return jsImageryLayerView;
}


export async function buildDotNetImageryLayerViewGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageryLayerView: any = {};
    
    if (hasValue(jsObject.highlightOptions)) {
        let { buildDotNetHighlightOptions } = await import('./highlightOptions');
        dotNetImageryLayerView.highlightOptions = await buildDotNetHighlightOptions(jsObject.highlightOptions);
    }
    
    if (hasValue(jsObject.pixelData)) {
        let { buildDotNetPixelData } = await import('./pixelData');
        dotNetImageryLayerView.pixelData = await buildDotNetPixelData(jsObject.pixelData);
    }
    
    if (hasValue(jsObject.spatialReferenceSupported)) {
        dotNetImageryLayerView.spatialReferenceSupported = jsObject.spatialReferenceSupported;
    }
    
    if (hasValue(jsObject.suspended)) {
        dotNetImageryLayerView.suspended = jsObject.suspended;
    }
    
    if (hasValue(jsObject.updating)) {
        dotNetImageryLayerView.updating = jsObject.updating;
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetImageryLayerView.visible = jsObject.visible;
    }
    
    if (hasValue(jsObject.visibleAtCurrentScale)) {
        dotNetImageryLayerView.visibleAtCurrentScale = jsObject.visibleAtCurrentScale;
    }
    
    if (hasValue(jsObject.visibleAtCurrentTimeExtent)) {
        dotNetImageryLayerView.visibleAtCurrentTimeExtent = jsObject.visibleAtCurrentTimeExtent;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetImageryLayerView.id = geoBlazorId;
    }

    return dotNetImageryLayerView;
}

