// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetCapabilitiesSync } from './capabilitiesSync';

export async function buildJsCapabilitiesSyncGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsCapabilitiesSync: any = {};

    if (hasValue(dotNetObject.supportedSyncDataOptions)) {
        jsCapabilitiesSync.supportedSyncDataOptions = dotNetObject.supportedSyncDataOptions;
    }
    if (hasValue(dotNetObject.supportsAsync)) {
        jsCapabilitiesSync.supportsAsync = dotNetObject.supportsAsync;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCapabilitiesSync);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCapabilitiesSync;
    
    return jsCapabilitiesSync;
}


export async function buildDotNetCapabilitiesSyncGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCapabilitiesSync: any = {};
    
    if (hasValue(jsObject.supportedSyncDataOptions)) {
        dotNetCapabilitiesSync.supportedSyncDataOptions = removeCircularReferences(jsObject.supportedSyncDataOptions);
    }
    
    if (hasValue(jsObject.supportsAsync)) {
        dotNetCapabilitiesSync.supportsAsync = jsObject.supportsAsync;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCapabilitiesSync.id = geoBlazorId;
    }

    return dotNetCapabilitiesSync;
}

