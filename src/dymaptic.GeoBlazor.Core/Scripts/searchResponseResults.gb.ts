// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetSearchResponseResults } from './searchResponseResults';

export async function buildJsSearchResponseResultsGenerated(dotNetObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsSearchResponseResults: any = {};
    if (hasValue(dotNetObject.source)) {
        let { buildJsSearchSource } = await import('./searchSource');
        jsSearchResponseResults.source = await buildJsSearchSource(dotNetObject.source, viewId) as any;
    }

    if (hasValue(dotNetObject.results) && dotNetObject.results.length > 0) {
        jsSearchResponseResults.results = dotNetObject.results;
    }
    if (hasValue(dotNetObject.sourceIndex)) {
        jsSearchResponseResults.sourceIndex = dotNetObject.sourceIndex;
    }
    
    jsObjectRefs[dotNetObject.id] = jsSearchResponseResults;
    arcGisObjectRefs[dotNetObject.id] = jsSearchResponseResults;
    
    return jsSearchResponseResults;
}


export async function buildDotNetSearchResponseResultsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchResponseResults: any = {};
    
    if (hasValue(jsObject.source)) {
        let { buildDotNetSearchSource } = await import('./searchSource');
        dotNetSearchResponseResults.source = await buildDotNetSearchSource(jsObject.source);
    }
    
    if (hasValue(jsObject.results)) {
        dotNetSearchResponseResults.results = removeCircularReferences(jsObject.results);
    }
    
    if (hasValue(jsObject.sourceIndex)) {
        dotNetSearchResponseResults.sourceIndex = jsObject.sourceIndex;
    }
    

    return dotNetSearchResponseResults;
}

