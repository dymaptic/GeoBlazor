// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetTemplates } from './templates';

export async function buildJsTemplatesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTemplates: any = {};
    if (hasValue(dotNetObject.primaryTemplate)) {
        let { buildJsTemplate } = await import('./template');
        jsTemplates.primaryTemplate = await buildJsTemplate(dotNetObject.primaryTemplate, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.secondaryTemplates)) {
        let { buildJsTemplate } = await import('./template');
        jsTemplates.secondaryTemplates = await Promise.all(dotNetObject.secondaryTemplates.map(async i => await buildJsTemplate(i, layerId, viewId))) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsTemplates);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsTemplates;
    
    return jsTemplates;
}


export async function buildDotNetTemplatesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTemplates: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.primaryTemplate)) {
        let { buildDotNetTemplate } = await import('./template');
        dotNetTemplates.primaryTemplate = await buildDotNetTemplate(jsObject.primaryTemplate);
    }
    if (hasValue(jsObject.secondaryTemplates)) {
        let { buildDotNetTemplate } = await import('./template');
        dotNetTemplates.secondaryTemplates = await Promise.all(jsObject.secondaryTemplates.map(async i => await buildDotNetTemplate(i)));
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTemplates.id = k;
                break;
            }
        }
    }

    return dotNetTemplates;
}

