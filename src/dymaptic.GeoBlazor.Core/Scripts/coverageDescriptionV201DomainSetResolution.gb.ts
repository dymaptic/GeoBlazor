// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import CoverageDescriptionV201DomainSetResolution = __esri.CoverageDescriptionV201DomainSetResolution;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CoverageDescriptionV201DomainSetResolutionGenerated implements IPropertyWrapper {
    public component: CoverageDescriptionV201DomainSetResolution;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: CoverageDescriptionV201DomainSetResolution) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsCoverageDescriptionV201DomainSetResolutionGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCoverageDescriptionV201DomainSetResolution: any = {}

    if (hasValue(dotNetObject.x)) {
        jsCoverageDescriptionV201DomainSetResolution.x = dotNetObject.x;
    }
    if (hasValue(dotNetObject.y)) {
        jsCoverageDescriptionV201DomainSetResolution.y = dotNetObject.y;
    }
    let { default: CoverageDescriptionV201DomainSetResolutionWrapper } = await import('./coverageDescriptionV201DomainSetResolution');
    let coverageDescriptionV201DomainSetResolutionWrapper = new CoverageDescriptionV201DomainSetResolutionWrapper(jsCoverageDescriptionV201DomainSetResolution);
    coverageDescriptionV201DomainSetResolutionWrapper.geoBlazorId = dotNetObject.id;
    coverageDescriptionV201DomainSetResolutionWrapper.viewId = viewId;
    coverageDescriptionV201DomainSetResolutionWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(coverageDescriptionV201DomainSetResolutionWrapper);
    jsObjectRefs[dotNetObject.id] = coverageDescriptionV201DomainSetResolutionWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsCoverageDescriptionV201DomainSetResolution;
    
    let dnInstantiatedObject = await buildDotNetCoverageDescriptionV201DomainSetResolution(jsCoverageDescriptionV201DomainSetResolution, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CoverageDescriptionV201DomainSetResolution', e);
    }
    
    return jsCoverageDescriptionV201DomainSetResolution;
}

export async function buildDotNetCoverageDescriptionV201DomainSetResolutionGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCoverageDescriptionV201DomainSetResolution: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.x)) {
            dotNetCoverageDescriptionV201DomainSetResolution.x = jsObject.x;
        }
        if (hasValue(jsObject.y)) {
            dotNetCoverageDescriptionV201DomainSetResolution.y = jsObject.y;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCoverageDescriptionV201DomainSetResolution.id = k;
                break;
            }
        }
    }

    return dotNetCoverageDescriptionV201DomainSetResolution;
}

