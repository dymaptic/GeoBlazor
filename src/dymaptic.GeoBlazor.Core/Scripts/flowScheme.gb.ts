// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetFlowScheme } from './flowScheme';

export async function buildJsFlowSchemeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFlowScheme: any = {}
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsFlowScheme.color = buildJsMapColor(dotNetObject.color) as any;
    }
    if (hasValue(dotNetObject.colors)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsFlowScheme.colors = dotNetObject.colors.map(i => buildJsMapColor(i)) as any;
    }

    if (hasValue(dotNetObject.density)) {
        jsFlowScheme.density = dotNetObject.density;
    }
    if (hasValue(dotNetObject.flowSchemeId)) {
        jsFlowScheme.id = dotNetObject.flowSchemeId;
    }
    if (hasValue(dotNetObject.flowSpeed)) {
        jsFlowScheme.flowSpeed = dotNetObject.flowSpeed;
    }
    if (hasValue(dotNetObject.layerEffect)) {
        jsFlowScheme.layerEffect = dotNetObject.layerEffect;
    }
    if (hasValue(dotNetObject.maxOpacity)) {
        jsFlowScheme.maxOpacity = dotNetObject.maxOpacity;
    }
    if (hasValue(dotNetObject.maxWidth)) {
        jsFlowScheme.maxWidth = dotNetObject.maxWidth;
    }
    if (hasValue(dotNetObject.minOpacity)) {
        jsFlowScheme.minOpacity = dotNetObject.minOpacity;
    }
    if (hasValue(dotNetObject.minWidth)) {
        jsFlowScheme.minWidth = dotNetObject.minWidth;
    }
    if (hasValue(dotNetObject.name)) {
        jsFlowScheme.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.tags)) {
        jsFlowScheme.tags = dotNetObject.tags;
    }
    if (hasValue(dotNetObject.theme)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedTheme } = dotNetObject.theme;
        jsFlowScheme.theme = sanitizedTheme;
    }
    if (hasValue(dotNetObject.trailCap)) {
        jsFlowScheme.trailCap = dotNetObject.trailCap;
    }
    if (hasValue(dotNetObject.trailLength)) {
        jsFlowScheme.trailLength = dotNetObject.trailLength;
    }
    if (hasValue(dotNetObject.trailWidth)) {
        jsFlowScheme.trailWidth = dotNetObject.trailWidth;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsFlowScheme);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFlowScheme;
    
    let dnInstantiatedObject = await buildDotNetFlowScheme(jsFlowScheme);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FlowScheme', e);
    }
    
    return jsFlowScheme;
}

export async function buildDotNetFlowSchemeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFlowScheme: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.color)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetFlowScheme.color = buildDotNetMapColor(jsObject.color);
        }
        if (hasValue(jsObject.colors)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetFlowScheme.colors = jsObject.colors.map(i => buildDotNetMapColor(i));
        }
        if (hasValue(jsObject.density)) {
            dotNetFlowScheme.density = jsObject.density;
        }
        if (hasValue(jsObject.id)) {
            dotNetFlowScheme.flowSchemeId = jsObject.id;
        }
        if (hasValue(jsObject.flowSpeed)) {
            dotNetFlowScheme.flowSpeed = jsObject.flowSpeed;
        }
        if (hasValue(jsObject.layerEffect)) {
            dotNetFlowScheme.layerEffect = jsObject.layerEffect;
        }
        if (hasValue(jsObject.maxOpacity)) {
            dotNetFlowScheme.maxOpacity = jsObject.maxOpacity;
        }
        if (hasValue(jsObject.maxWidth)) {
            dotNetFlowScheme.maxWidth = jsObject.maxWidth;
        }
        if (hasValue(jsObject.minOpacity)) {
            dotNetFlowScheme.minOpacity = jsObject.minOpacity;
        }
        if (hasValue(jsObject.minWidth)) {
            dotNetFlowScheme.minWidth = jsObject.minWidth;
        }
        if (hasValue(jsObject.name)) {
            dotNetFlowScheme.name = jsObject.name;
        }
        if (hasValue(jsObject.tags)) {
            dotNetFlowScheme.tags = jsObject.tags;
        }
        if (hasValue(jsObject.theme)) {
            dotNetFlowScheme.theme = jsObject.theme;
        }
        if (hasValue(jsObject.trailCap)) {
            dotNetFlowScheme.trailCap = jsObject.trailCap;
        }
        if (hasValue(jsObject.trailLength)) {
            dotNetFlowScheme.trailLength = jsObject.trailLength;
        }
        if (hasValue(jsObject.trailWidth)) {
            dotNetFlowScheme.trailWidth = jsObject.trailWidth;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFlowScheme.id = k;
                break;
            }
        }
    }

    return dotNetFlowScheme;
}

