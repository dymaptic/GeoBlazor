// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import DefaultUI from '@arcgis/core/views/ui/DefaultUI';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class DefaultUIGenerated implements IPropertyWrapper {
    public component: DefaultUI;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: DefaultUI) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async add(component: any,
        position: any): Promise<void> {
                let { buildJsUIAddPosition } = await import('./uIAddPosition');
let jsPosition = await buildJsUIAddPosition(position, this.layerId, this.viewId) as any;
        this.component.add(component,
            jsPosition);
    }

    async find(id: any): Promise<any> {
        return this.component.find(id);
    }

    async getComponents(position: any): Promise<any> {
                let { buildJsUIAddPosition } = await import('./uIAddPosition');
let jsPosition = await buildJsUIAddPosition(position, this.layerId, this.viewId) as any;
        return this.component.getComponents(jsPosition);
    }

    async move(component: any,
        position: any): Promise<void> {
                let { buildJsUIAddPosition } = await import('./uIAddPosition');
let jsPosition = await buildJsUIAddPosition(position, this.layerId, this.viewId) as any;
        this.component.move(component,
            jsPosition);
    }

    async remove(component: any): Promise<void> {
        this.component.remove(component);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsDefaultUIGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.components)) {
        properties.components = dotNetObject.components;
    }
    if (hasValue(dotNetObject.container)) {
        properties.container = dotNetObject.container;
    }
    if (hasValue(dotNetObject.padding)) {
        properties.padding = dotNetObject.padding;
    }
    let jsDefaultUI = new DefaultUI(properties);

    let { default: DefaultUIWrapper } = await import('./defaultUI');
    let defaultUIWrapper = new DefaultUIWrapper(jsDefaultUI);
    defaultUIWrapper.geoBlazorId = dotNetObject.id;
    defaultUIWrapper.viewId = viewId;
    defaultUIWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(defaultUIWrapper);
    jsObjectRefs[dotNetObject.id] = defaultUIWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsDefaultUI;
    
    let { buildDotNetDefaultUI } = await import('./defaultUI');
    let dnInstantiatedObject = await buildDotNetDefaultUI(jsDefaultUI);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type DefaultUI detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DefaultUI', e);
    }
    
    return jsDefaultUI;
}


export async function buildDotNetDefaultUIGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDefaultUI: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.components)) {
        dotNetDefaultUI.components = jsObject.components;
    }
    if (hasValue(jsObject.container)) {
        dotNetDefaultUI.container = jsObject.container;
    }
    if (hasValue(jsObject.height)) {
        dotNetDefaultUI.height = jsObject.height;
    }
    if (hasValue(jsObject.padding)) {
        dotNetDefaultUI.padding = jsObject.padding;
    }
    if (hasValue(jsObject.width)) {
        dotNetDefaultUI.width = jsObject.width;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetDefaultUI.id = k;
                break;
            }
        }
    }

    return dotNetDefaultUI;
}

