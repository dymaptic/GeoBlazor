import { buildDotNetFeatureType } from './featureType';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import FeatureType from '@arcgis/core/layers/support/FeatureType';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsFeatureTypeGenerated(dotNetObject: any): Promise<any> {
    let jsFeatureType = new FeatureType();
    if (hasValue(dotNetObject.templates)) {
        let { buildJsFeatureTemplate } = await import('./featureTemplate');
        jsFeatureType.templates = await Promise.all(dotNetObject.templates.map(async i => await buildJsFeatureTemplate(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.domains)) {
        jsFeatureType.domains = dotNetObject.domains;
    }
    if (hasValue(dotNetObject.featureTypeId)) {
        jsFeatureType.id = dotNetObject.featureTypeId;
    }
    if (hasValue(dotNetObject.name)) {
        jsFeatureType.name = dotNetObject.name;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureType);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureType;
    
    let dnInstantiatedObject = await buildDotNetFeatureType(jsFeatureType);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureType', e);
    }
    
    return jsFeatureType;
}
export async function buildDotNetFeatureTypeGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFeatureType: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.templates)) {
            let { buildDotNetFeatureTemplate } = await import('./featureTemplate');
            dotNetFeatureType.templates = await Promise.all(jsObject.templates.map(async i => await buildDotNetFeatureTemplate(i)));
        }
        if (hasValue(jsObject.domains)) {
            dotNetFeatureType.domains = jsObject.domains;
        }
        if (hasValue(jsObject.id)) {
            dotNetFeatureType.featureTypeId = jsObject.id;
        }
        if (hasValue(jsObject.name)) {
            dotNetFeatureType.name = jsObject.name;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFeatureType.id = k;
                break;
            }
        }
    }

    return dotNetFeatureType;
}

