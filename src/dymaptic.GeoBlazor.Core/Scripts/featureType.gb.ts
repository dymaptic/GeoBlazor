// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetFeatureType } from './featureType';
import FeatureType from '@arcgis/core/layers/support/FeatureType';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsFeatureTypeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFeatureType = new FeatureType();
    if (hasValue(dotNetObject.templates)) {
        let { buildJsFeatureTemplate } = await import('./featureTemplate');
        jsFeatureType.templates = await Promise.all(dotNetObject.templates.map(async i => await buildJsFeatureTemplate(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.domains)) {
        jsFeatureType.domains = dotNetObject.domains;
    }
    if (hasValue(dotNetObject.featureTypeId)) {
        jsFeatureType.id = dotNetObject.featureTypeId;
    }
    if (hasValue(dotNetObject.name)) {
        jsFeatureType.name = dotNetObject.name;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsFeatureType);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFeatureType;
    
    let dnInstantiatedObject = await buildDotNetFeatureType(jsFeatureType);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FeatureType', e);
    }
    
    return jsFeatureType;
}
