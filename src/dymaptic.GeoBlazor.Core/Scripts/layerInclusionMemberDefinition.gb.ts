// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetLayerInclusionMemberDefinition } from './layerInclusionMemberDefinition';

export async function buildJsLayerInclusionMemberDefinitionGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsLayerInclusionMemberDefinition: any = {};

    if (hasValue(dotNetObject.layerInclusionMemberDefinitionId)) {
        jsLayerInclusionMemberDefinition.id = dotNetObject.layerInclusionMemberDefinitionId;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsLayerInclusionMemberDefinition);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLayerInclusionMemberDefinition;
    
    return jsLayerInclusionMemberDefinition;
}


export async function buildDotNetLayerInclusionMemberDefinitionGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLayerInclusionMemberDefinition: any = {};
    
    if (hasValue(jsObject.id)) {
        dotNetLayerInclusionMemberDefinition.layerInclusionMemberDefinitionId = jsObject.id;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetLayerInclusionMemberDefinition.id = geoBlazorId;
    }

    return dotNetLayerInclusionMemberDefinition;
}

