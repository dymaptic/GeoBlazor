// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import LabelClass from '@arcgis/core/layers/support/LabelClass';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetLabel } from './label';

export async function buildJsLabelGenerated(dotNetObject: any): Promise<any> {
    let jsLabelClass = new LabelClass();
    if (hasValue(dotNetObject.symbol)) {
        let { buildJsSymbol } = await import('./symbol');
        jsLabelClass.symbol = buildJsSymbol(dotNetObject.symbol) as any;
    }

    if (hasValue(dotNetObject.allowOverrun)) {
        jsLabelClass.allowOverrun = dotNetObject.allowOverrun;
    }
    if (hasValue(dotNetObject.deconflictionStrategy)) {
        jsLabelClass.deconflictionStrategy = dotNetObject.deconflictionStrategy;
    }
    if (hasValue(dotNetObject.labelExpression)) {
        jsLabelClass.labelExpression = dotNetObject.labelExpression;
    }
    if (hasValue(dotNetObject.labelExpressionInfo)) {
        jsLabelClass.labelExpressionInfo = dotNetObject.labelExpressionInfo;
    }
    if (hasValue(dotNetObject.labelPlacement)) {
        jsLabelClass.labelPlacement = dotNetObject.labelPlacement;
    }
    if (hasValue(dotNetObject.labelPosition)) {
        jsLabelClass.labelPosition = dotNetObject.labelPosition;
    }
    if (hasValue(dotNetObject.maxScale)) {
        jsLabelClass.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.minScale)) {
        jsLabelClass.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.repeatLabel)) {
        jsLabelClass.repeatLabel = dotNetObject.repeatLabel;
    }
    if (hasValue(dotNetObject.repeatLabelDistance)) {
        jsLabelClass.repeatLabelDistance = dotNetObject.repeatLabelDistance;
    }
    if (hasValue(dotNetObject.useCodedValues)) {
        jsLabelClass.useCodedValues = dotNetObject.useCodedValues;
    }
    if (hasValue(dotNetObject.where)) {
        jsLabelClass.where = dotNetObject.where;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsLabelClass);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLabelClass;
    
    let dnInstantiatedObject = await buildDotNetLabel(jsLabelClass);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Label', e);
    }
    
    return jsLabelClass;
}

export async function buildDotNetLabelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLabel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.symbol)) {
            let { buildDotNetSymbol } = await import('./symbol');
            dotNetLabel.symbol = buildDotNetSymbol(jsObject.symbol);
        }
        if (hasValue(jsObject.allowOverrun)) {
            dotNetLabel.allowOverrun = jsObject.allowOverrun;
        }
        if (hasValue(jsObject.deconflictionStrategy)) {
            dotNetLabel.deconflictionStrategy = jsObject.deconflictionStrategy;
        }
        if (hasValue(jsObject.labelExpression)) {
            dotNetLabel.labelExpression = jsObject.labelExpression;
        }
        if (hasValue(jsObject.labelExpressionInfo)) {
            dotNetLabel.labelExpressionInfo = jsObject.labelExpressionInfo;
        }
        if (hasValue(jsObject.labelPlacement)) {
            dotNetLabel.labelPlacement = jsObject.labelPlacement;
        }
        if (hasValue(jsObject.labelPosition)) {
            dotNetLabel.labelPosition = jsObject.labelPosition;
        }
        if (hasValue(jsObject.maxScale)) {
            dotNetLabel.maxScale = jsObject.maxScale;
        }
        if (hasValue(jsObject.minScale)) {
            dotNetLabel.minScale = jsObject.minScale;
        }
        if (hasValue(jsObject.repeatLabel)) {
            dotNetLabel.repeatLabel = jsObject.repeatLabel;
        }
        if (hasValue(jsObject.repeatLabelDistance)) {
            dotNetLabel.repeatLabelDistance = jsObject.repeatLabelDistance;
        }
        if (hasValue(jsObject.useCodedValues)) {
            dotNetLabel.useCodedValues = jsObject.useCodedValues;
        }
        if (hasValue(jsObject.where)) {
            dotNetLabel.where = jsObject.where;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLabel.id = k;
                break;
            }
        }
    }

    return dotNetLabel;
}

