// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import LabelClass from '@arcgis/core/layers/support/LabelClass';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetLabel } from './label';

export async function buildJsLabelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.labelExpressionInfo)) {
        let { buildJsLabelExpressionInfo } = await import('./labelExpressionInfo');
        properties.labelExpressionInfo = await buildJsLabelExpressionInfo(dotNetObject.labelExpressionInfo, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.symbol)) {
        let { buildJsSymbol } = await import('./symbol');
        properties.symbol = buildJsSymbol(dotNetObject.symbol) as any;
    }

    if (hasValue(dotNetObject.allowOverrun)) {
        properties.allowOverrun = dotNetObject.allowOverrun;
    }
    if (hasValue(dotNetObject.deconflictionStrategy)) {
        properties.deconflictionStrategy = dotNetObject.deconflictionStrategy;
    }
    if (hasValue(dotNetObject.labelExpression)) {
        properties.labelExpression = dotNetObject.labelExpression;
    }
    if (hasValue(dotNetObject.labelPlacement)) {
        properties.labelPlacement = dotNetObject.labelPlacement;
    }
    if (hasValue(dotNetObject.labelPosition)) {
        properties.labelPosition = dotNetObject.labelPosition;
    }
    if (hasValue(dotNetObject.maxScale)) {
        properties.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.minScale)) {
        properties.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.repeatLabel)) {
        properties.repeatLabel = dotNetObject.repeatLabel;
    }
    if (hasValue(dotNetObject.repeatLabelDistance)) {
        properties.repeatLabelDistance = dotNetObject.repeatLabelDistance;
    }
    if (hasValue(dotNetObject.useCodedValues)) {
        properties.useCodedValues = dotNetObject.useCodedValues;
    }
    if (hasValue(dotNetObject.where)) {
        properties.where = dotNetObject.where;
    }
    let jsLabelClass = new LabelClass(properties);
    
    jsObjectRefs[dotNetObject.id] = jsLabelClass;
    arcGisObjectRefs[dotNetObject.id] = jsLabelClass;
    
    return jsLabelClass;
}


export async function buildDotNetLabelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLabel: any = {};
    
    if (hasValue(jsObject.labelExpressionInfo)) {
        let { buildDotNetLabelExpressionInfo } = await import('./labelExpressionInfo');
        dotNetLabel.labelExpressionInfo = await buildDotNetLabelExpressionInfo(jsObject.labelExpressionInfo);
    }
    
    if (hasValue(jsObject.symbol)) {
        let { buildDotNetSymbol } = await import('./symbol');
        dotNetLabel.symbol = buildDotNetSymbol(jsObject.symbol);
    }
    
    if (hasValue(jsObject.allowOverrun)) {
        dotNetLabel.allowOverrun = jsObject.allowOverrun;
    }
    
    if (hasValue(jsObject.deconflictionStrategy)) {
        dotNetLabel.deconflictionStrategy = removeCircularReferences(jsObject.deconflictionStrategy);
    }
    
    if (hasValue(jsObject.labelExpression)) {
        dotNetLabel.labelExpression = jsObject.labelExpression;
    }
    
    if (hasValue(jsObject.labelPlacement)) {
        dotNetLabel.labelPlacement = removeCircularReferences(jsObject.labelPlacement);
    }
    
    if (hasValue(jsObject.labelPosition)) {
        dotNetLabel.labelPosition = removeCircularReferences(jsObject.labelPosition);
    }
    
    if (hasValue(jsObject.maxScale)) {
        dotNetLabel.maxScale = jsObject.maxScale;
    }
    
    if (hasValue(jsObject.minScale)) {
        dotNetLabel.minScale = jsObject.minScale;
    }
    
    if (hasValue(jsObject.repeatLabel)) {
        dotNetLabel.repeatLabel = jsObject.repeatLabel;
    }
    
    if (hasValue(jsObject.repeatLabelDistance)) {
        dotNetLabel.repeatLabelDistance = removeCircularReferences(jsObject.repeatLabelDistance);
    }
    
    if (hasValue(jsObject.useCodedValues)) {
        dotNetLabel.useCodedValues = jsObject.useCodedValues;
    }
    
    if (hasValue(jsObject.where)) {
        dotNetLabel.where = jsObject.where;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetLabel.id = geoBlazorId;
    }

    return dotNetLabel;
}

