// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import LabelClass from '@arcgis/core/layers/support/LabelClass';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, generateSerializableJson } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class LabelGenerated implements IPropertyWrapper {
    public component: LabelClass;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: LabelClass) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.labelExpressionInfo)) {
            let { buildJsLabelExpressionInfo } = await import('./labelExpressionInfo');
            this.component.labelExpressionInfo = await buildJsLabelExpressionInfo(dotNetObject.labelExpressionInfo, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.symbol)) {
            let { buildJsSymbol } = await import('./symbol');
            this.component.symbol = buildJsSymbol(dotNetObject.symbol) as any;
        }

        if (hasValue(dotNetObject.allowOverrun)) {
            this.component.allowOverrun = dotNetObject.allowOverrun;
        }
        if (hasValue(dotNetObject.deconflictionStrategy)) {
            this.component.deconflictionStrategy = dotNetObject.deconflictionStrategy;
        }
        if (hasValue(dotNetObject.labelExpression)) {
            this.component.labelExpression = dotNetObject.labelExpression;
        }
        if (hasValue(dotNetObject.labelPlacement)) {
            this.component.labelPlacement = dotNetObject.labelPlacement;
        }
        if (hasValue(dotNetObject.labelPosition)) {
            this.component.labelPosition = dotNetObject.labelPosition;
        }
        if (hasValue(dotNetObject.maxScale)) {
            this.component.maxScale = dotNetObject.maxScale;
        }
        if (hasValue(dotNetObject.minScale)) {
            this.component.minScale = dotNetObject.minScale;
        }
        if (hasValue(dotNetObject.repeatLabel)) {
            this.component.repeatLabel = dotNetObject.repeatLabel;
        }
        if (hasValue(dotNetObject.repeatLabelDistance)) {
            this.component.repeatLabelDistance = dotNetObject.repeatLabelDistance;
        }
        if (hasValue(dotNetObject.useCodedValues)) {
            this.component.useCodedValues = dotNetObject.useCodedValues;
        }
        if (hasValue(dotNetObject.where)) {
            this.component.where = dotNetObject.where;
        }
    }
    
    // region properties
    
    getLabelExpression(): any {
        if (!hasValue(this.component.labelExpression)) {
            return null;
        }
        
        return generateSerializableJson(this.component.labelExpression);
    }
    
    setLabelExpression(value: any): void {
        this.component.labelExpression = JSON.parse(value);
    }
    
    async getLabelExpressionInfo(): Promise<any> {
        if (!hasValue(this.component.labelExpressionInfo)) {
            return null;
        }
        
        let { buildDotNetLabelExpressionInfo } = await import('./labelExpressionInfo');
        return await buildDotNetLabelExpressionInfo(this.component.labelExpressionInfo);
    }
    
    async setLabelExpressionInfo(value: any): Promise<void> {
        let { buildJsLabelExpressionInfo } = await import('./labelExpressionInfo');
        this.component.labelExpressionInfo = await  buildJsLabelExpressionInfo(value, this.layerId, this.viewId);
    }
    
    async getSymbol(): Promise<any> {
        if (!hasValue(this.component.symbol)) {
            return null;
        }
        
        let { buildDotNetSymbol } = await import('./symbol');
        return buildDotNetSymbol(this.component.symbol);
    }
    
    async setSymbol(value: any): Promise<void> {
        let { buildJsSymbol } = await import('./symbol');
        this.component.symbol =  buildJsSymbol(value);
    }
    
    getWhere(): any {
        if (!hasValue(this.component.where)) {
            return null;
        }
        
        return generateSerializableJson(this.component.where);
    }
    
    setWhere(value: any): void {
        this.component.where = JSON.parse(value);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsLabelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.labelExpressionInfo)) {
        let { buildJsLabelExpressionInfo } = await import('./labelExpressionInfo');
        properties.labelExpressionInfo = await buildJsLabelExpressionInfo(dotNetObject.labelExpressionInfo, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.symbol)) {
        let { buildJsSymbol } = await import('./symbol');
        properties.symbol = buildJsSymbol(dotNetObject.symbol) as any;
    }

    if (hasValue(dotNetObject.allowOverrun)) {
        properties.allowOverrun = dotNetObject.allowOverrun;
    }
    if (hasValue(dotNetObject.deconflictionStrategy)) {
        properties.deconflictionStrategy = dotNetObject.deconflictionStrategy;
    }
    if (hasValue(dotNetObject.labelExpression)) {
        properties.labelExpression = dotNetObject.labelExpression;
    }
    if (hasValue(dotNetObject.labelPlacement)) {
        properties.labelPlacement = dotNetObject.labelPlacement;
    }
    if (hasValue(dotNetObject.labelPosition)) {
        properties.labelPosition = dotNetObject.labelPosition;
    }
    if (hasValue(dotNetObject.maxScale)) {
        properties.maxScale = dotNetObject.maxScale;
    }
    if (hasValue(dotNetObject.minScale)) {
        properties.minScale = dotNetObject.minScale;
    }
    if (hasValue(dotNetObject.repeatLabel)) {
        properties.repeatLabel = dotNetObject.repeatLabel;
    }
    if (hasValue(dotNetObject.repeatLabelDistance)) {
        properties.repeatLabelDistance = dotNetObject.repeatLabelDistance;
    }
    if (hasValue(dotNetObject.useCodedValues)) {
        properties.useCodedValues = dotNetObject.useCodedValues;
    }
    if (hasValue(dotNetObject.where)) {
        properties.where = dotNetObject.where;
    }
    let jsLabelClass = new LabelClass(properties);

    let { default: LabelWrapper } = await import('./label');
    let labelWrapper = new LabelWrapper(jsLabelClass);
    labelWrapper.geoBlazorId = dotNetObject.id;
    labelWrapper.viewId = viewId;
    labelWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = labelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsLabelClass;
    
    return jsLabelClass;
}


export async function buildDotNetLabelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLabel: any = {};
    
    if (hasValue(jsObject.labelExpressionInfo)) {
        let { buildDotNetLabelExpressionInfo } = await import('./labelExpressionInfo');
        dotNetLabel.labelExpressionInfo = await buildDotNetLabelExpressionInfo(jsObject.labelExpressionInfo);
    }
    
    if (hasValue(jsObject.symbol)) {
        let { buildDotNetSymbol } = await import('./symbol');
        dotNetLabel.symbol = buildDotNetSymbol(jsObject.symbol);
    }
    
    if (hasValue(jsObject.allowOverrun)) {
        dotNetLabel.allowOverrun = jsObject.allowOverrun;
    }
    
    if (hasValue(jsObject.deconflictionStrategy)) {
        dotNetLabel.deconflictionStrategy = removeCircularReferences(jsObject.deconflictionStrategy);
    }
    
    if (hasValue(jsObject.labelExpression)) {
        dotNetLabel.labelExpression = jsObject.labelExpression;
    }
    
    if (hasValue(jsObject.labelPlacement)) {
        dotNetLabel.labelPlacement = removeCircularReferences(jsObject.labelPlacement);
    }
    
    if (hasValue(jsObject.labelPosition)) {
        dotNetLabel.labelPosition = removeCircularReferences(jsObject.labelPosition);
    }
    
    if (hasValue(jsObject.maxScale)) {
        dotNetLabel.maxScale = jsObject.maxScale;
    }
    
    if (hasValue(jsObject.minScale)) {
        dotNetLabel.minScale = jsObject.minScale;
    }
    
    if (hasValue(jsObject.repeatLabel)) {
        dotNetLabel.repeatLabel = jsObject.repeatLabel;
    }
    
    if (hasValue(jsObject.repeatLabelDistance)) {
        dotNetLabel.repeatLabelDistance = removeCircularReferences(jsObject.repeatLabelDistance);
    }
    
    if (hasValue(jsObject.useCodedValues)) {
        dotNetLabel.useCodedValues = jsObject.useCodedValues;
    }
    
    if (hasValue(jsObject.where)) {
        dotNetLabel.where = jsObject.where;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetLabel.id = geoBlazorId;
    }

    return dotNetLabel;
}

