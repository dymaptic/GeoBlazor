import { buildDotNetImageSampleParameters } from './imageSampleParameters';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import ImageSampleParameters from '@arcgis/core/rest/support/ImageSampleParameters';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsImageSampleParametersGenerated(dotNetObject: any): Promise<any> {
    let jsImageSampleParameters = new ImageSampleParameters();
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsGeometry } = await import('./geometry');
        jsImageSampleParameters.geometry = buildJsGeometry(dotNetObject.geometry) as any;
    }
    if (hasValue(dotNetObject.locations)) {
        let { buildJsPoint } = await import('./point');
        jsImageSampleParameters.locations = dotNetObject.locations.map(i => buildJsPoint(i)) as any;
    }
    if (hasValue(dotNetObject.mosaicRule)) {
        let { buildJsMosaicRule } = await import('./mosaicRule');
        jsImageSampleParameters.mosaicRule = await buildJsMosaicRule(dotNetObject.mosaicRule, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        jsImageSampleParameters.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.interpolation)) {
        jsImageSampleParameters.interpolation = dotNetObject.interpolation;
    }
    if (hasValue(dotNetObject.outFields)) {
        jsImageSampleParameters.outFields = dotNetObject.outFields;
    }
    if (hasValue(dotNetObject.pixelSize)) {
        jsImageSampleParameters.pixelSize = dotNetObject.pixelSize;
    }
    if (hasValue(dotNetObject.returnFirstValueOnly)) {
        jsImageSampleParameters.returnFirstValueOnly = dotNetObject.returnFirstValueOnly;
    }
    if (hasValue(dotNetObject.sampleCount)) {
        jsImageSampleParameters.sampleCount = dotNetObject.sampleCount;
    }
    if (hasValue(dotNetObject.sampleDistance)) {
        jsImageSampleParameters.sampleDistance = dotNetObject.sampleDistance;
    }
    if (hasValue(dotNetObject.sliceId)) {
        jsImageSampleParameters.sliceId = dotNetObject.sliceId;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsImageSampleParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageSampleParameters;
    
    let dnInstantiatedObject = await buildDotNetImageSampleParameters(jsImageSampleParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImageSampleParameters', e);
    }
    
    return jsImageSampleParameters;
}
export async function buildDotNetImageSampleParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageSampleParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.geometry)) {
            let { buildDotNetGeometry } = await import('./geometry');
            dotNetImageSampleParameters.geometry = buildDotNetGeometry(jsObject.geometry);
        }
        if (hasValue(jsObject.locations)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetImageSampleParameters.locations = jsObject.locations.map(i => buildDotNetPoint(i));
        }
        if (hasValue(jsObject.mosaicRule)) {
            let { buildDotNetMosaicRule } = await import('./mosaicRule');
            dotNetImageSampleParameters.mosaicRule = await buildDotNetMosaicRule(jsObject.mosaicRule);
        }
        if (hasValue(jsObject.timeExtent)) {
            let { buildDotNetTimeExtent } = await import('./timeExtent');
            dotNetImageSampleParameters.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
        }
        if (hasValue(jsObject.interpolation)) {
            dotNetImageSampleParameters.interpolation = jsObject.interpolation;
        }
        if (hasValue(jsObject.outFields)) {
            dotNetImageSampleParameters.outFields = jsObject.outFields;
        }
        if (hasValue(jsObject.pixelSize)) {
            dotNetImageSampleParameters.pixelSize = jsObject.pixelSize;
        }
        if (hasValue(jsObject.returnFirstValueOnly)) {
            dotNetImageSampleParameters.returnFirstValueOnly = jsObject.returnFirstValueOnly;
        }
        if (hasValue(jsObject.sampleCount)) {
            dotNetImageSampleParameters.sampleCount = jsObject.sampleCount;
        }
        if (hasValue(jsObject.sampleDistance)) {
            dotNetImageSampleParameters.sampleDistance = jsObject.sampleDistance;
        }
        if (hasValue(jsObject.sliceId)) {
            dotNetImageSampleParameters.sliceId = jsObject.sliceId;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImageSampleParameters.id = k;
                break;
            }
        }
    }

    return dotNetImageSampleParameters;
}

