// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageSampleParameters from '@arcgis/core/rest/support/ImageSampleParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetImageSampleParameters } from './imageSampleParameters';

export async function buildJsImageSampleParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsGeometry } = await import('./geometry');
        properties.geometry = buildJsGeometry(dotNetObject.geometry) as any;
    }
    if (hasValue(dotNetObject.locations)) {
        let { buildJsPoint } = await import('./point');
        properties.locations = dotNetObject.locations.map(i => buildJsPoint(i)) as any;
    }
    if (hasValue(dotNetObject.mosaicRule)) {
        let { buildJsMosaicRule } = await import('./mosaicRule');
        properties.mosaicRule = await buildJsMosaicRule(dotNetObject.mosaicRule) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.interpolation)) {
        properties.interpolation = dotNetObject.interpolation;
    }
    if (hasValue(dotNetObject.outFields)) {
        properties.outFields = dotNetObject.outFields;
    }
    if (hasValue(dotNetObject.pixelSize)) {
        properties.pixelSize = dotNetObject.pixelSize;
    }
    if (hasValue(dotNetObject.returnFirstValueOnly)) {
        properties.returnFirstValueOnly = dotNetObject.returnFirstValueOnly;
    }
    if (hasValue(dotNetObject.sampleCount)) {
        properties.sampleCount = dotNetObject.sampleCount;
    }
    if (hasValue(dotNetObject.sampleDistance)) {
        properties.sampleDistance = dotNetObject.sampleDistance;
    }
    if (hasValue(dotNetObject.sliceId)) {
        properties.sliceId = dotNetObject.sliceId;
    }
    let jsImageSampleParameters = new ImageSampleParameters(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsImageSampleParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageSampleParameters;
    
    let { buildDotNetImageSampleParameters } = await import('./imageSampleParameters');
    let dnInstantiatedObject = await buildDotNetImageSampleParameters(jsImageSampleParameters);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type ImageSampleParameters detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImageSampleParameters', e);
    }
    
    return jsImageSampleParameters;
}


export async function buildDotNetImageSampleParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageSampleParameters: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.geometry)) {
        let { buildDotNetGeometry } = await import('./geometry');
        dotNetImageSampleParameters.geometry = buildDotNetGeometry(jsObject.geometry);
    }
    if (hasValue(jsObject.locations)) {
        let { buildDotNetPoint } = await import('./point');
        dotNetImageSampleParameters.locations = jsObject.locations.map(i => buildDotNetPoint(i));
    }
    if (hasValue(jsObject.mosaicRule)) {
        let { buildDotNetMosaicRule } = await import('./mosaicRule');
        dotNetImageSampleParameters.mosaicRule = await buildDotNetMosaicRule(jsObject.mosaicRule);
    }
    if (hasValue(jsObject.timeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetImageSampleParameters.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
    }
    if (hasValue(jsObject.interpolation)) {
        dotNetImageSampleParameters.interpolation = jsObject.interpolation;
    }
    if (hasValue(jsObject.outFields)) {
        dotNetImageSampleParameters.outFields = jsObject.outFields;
    }
    if (hasValue(jsObject.pixelSize)) {
        dotNetImageSampleParameters.pixelSize = jsObject.pixelSize;
    }
    if (hasValue(jsObject.returnFirstValueOnly)) {
        dotNetImageSampleParameters.returnFirstValueOnly = jsObject.returnFirstValueOnly;
    }
    if (hasValue(jsObject.sampleCount)) {
        dotNetImageSampleParameters.sampleCount = jsObject.sampleCount;
    }
    if (hasValue(jsObject.sampleDistance)) {
        dotNetImageSampleParameters.sampleDistance = jsObject.sampleDistance;
    }
    if (hasValue(jsObject.sliceId)) {
        dotNetImageSampleParameters.sliceId = jsObject.sliceId;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImageSampleParameters.id = k;
                break;
            }
        }
    }

    return dotNetImageSampleParameters;
}

