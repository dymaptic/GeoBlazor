// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import BasemapLayerListViewModel from '@arcgis/core/widgets/BasemapLayerList/BasemapLayerListViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class BasemapLayerListViewModelGenerated implements IPropertyWrapper {
    public component: BasemapLayerListViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: BasemapLayerListViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async triggerAction(action: any,
        item: any): Promise<void> {
                let { buildJsActionBase } = await import('./actionBase');
let jsAction = await buildJsActionBase(action, this.layerId, this.viewId) as any;
                let { buildJsListItem } = await import('./listItem');
let jsItem = await buildJsListItem(item, this.layerId, this.viewId) as any;
        this.component.triggerAction(jsAction,
            jsItem);
    }

    // region properties
    
    async getBaseItems(): Promise<any> {
        if (!hasValue(this.component.baseItems)) {
            return null;
        }
        
        let { buildDotNetListItem } = await import('./listItem');
        return await Promise.all(this.component.baseItems.map(async i => await buildDotNetListItem(i)));
    }
    
    async getReferenceItems(): Promise<any> {
        if (!hasValue(this.component.referenceItems)) {
            return null;
        }
        
        let { buildDotNetListItem } = await import('./listItem');
        return await Promise.all(this.component.referenceItems.map(async i => await buildDotNetListItem(i)));
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsBasemapLayerListViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.hasBaseListItemCreatedFunction) && dotNetObject.hasBaseListItemCreatedFunction) {
        properties.baseListItemCreatedFunction = async (event) => {

            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsBaseListItemCreatedFunction', event);
        };
    }
    if (hasValue(dotNetObject.hasReferenceListItemCreatedFunction) && dotNetObject.hasReferenceListItemCreatedFunction) {
        properties.referenceListItemCreatedFunction = async (event) => {

            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsReferenceListItemCreatedFunction', event);
        };
    }

    if (hasValue(dotNetObject.basemapTitle)) {
        properties.basemapTitle = dotNetObject.basemapTitle;
    }
    if (hasValue(dotNetObject.checkPublishStatusEnabled)) {
        properties.checkPublishStatusEnabled = dotNetObject.checkPublishStatusEnabled;
    }
    if (hasValue(dotNetObject.listModeDisabled)) {
        properties.listModeDisabled = dotNetObject.listModeDisabled;
    }
    let jsBasemapLayerListViewModel = new BasemapLayerListViewModel(properties);

    let { default: BasemapLayerListViewModelWrapper } = await import('./basemapLayerListViewModel');
    let basemapLayerListViewModelWrapper = new BasemapLayerListViewModelWrapper(jsBasemapLayerListViewModel);
    basemapLayerListViewModelWrapper.geoBlazorId = dotNetObject.id;
    basemapLayerListViewModelWrapper.viewId = viewId;
    basemapLayerListViewModelWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(basemapLayerListViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = basemapLayerListViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsBasemapLayerListViewModel;
    
    let { buildDotNetBasemapLayerListViewModel } = await import('./basemapLayerListViewModel');
    let dnInstantiatedObject = await buildDotNetBasemapLayerListViewModel(jsBasemapLayerListViewModel);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type BasemapLayerListViewModel detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BasemapLayerListViewModel', e);
    }
    
    return jsBasemapLayerListViewModel;
}


export async function buildDotNetBasemapLayerListViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBasemapLayerListViewModel: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.baseItems)) {
        let { buildDotNetListItem } = await import('./listItem');
        dotNetBasemapLayerListViewModel.baseItems = await Promise.all(jsObject.baseItems.map(async i => await buildDotNetListItem(i)));
    }
    if (hasValue(jsObject.referenceItems)) {
        let { buildDotNetListItem } = await import('./listItem');
        dotNetBasemapLayerListViewModel.referenceItems = await Promise.all(jsObject.referenceItems.map(async i => await buildDotNetListItem(i)));
    }
    if (hasValue(jsObject.baseListItemCreatedFunction)) {
        dotNetBasemapLayerListViewModel.baseListItemCreatedFunction = jsObject.baseListItemCreatedFunction;
    }
    if (hasValue(jsObject.basemapTitle)) {
        dotNetBasemapLayerListViewModel.basemapTitle = jsObject.basemapTitle;
    }
    if (hasValue(jsObject.checkPublishStatusEnabled)) {
        dotNetBasemapLayerListViewModel.checkPublishStatusEnabled = jsObject.checkPublishStatusEnabled;
    }
    if (hasValue(jsObject.listModeDisabled)) {
        dotNetBasemapLayerListViewModel.listModeDisabled = jsObject.listModeDisabled;
    }
    if (hasValue(jsObject.referenceListItemCreatedFunction)) {
        dotNetBasemapLayerListViewModel.referenceListItemCreatedFunction = jsObject.referenceListItemCreatedFunction;
    }
    if (hasValue(jsObject.state)) {
        dotNetBasemapLayerListViewModel.state = jsObject.state;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetBasemapLayerListViewModel.id = k;
                break;
            }
        }
    }

    return dotNetBasemapLayerListViewModel;
}

