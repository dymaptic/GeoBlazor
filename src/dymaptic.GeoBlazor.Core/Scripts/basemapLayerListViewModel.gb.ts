// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import BasemapLayerListViewModel from '@arcgis/core/widgets/BasemapLayerList/BasemapLayerListViewModel';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, generateSerializableJson } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class BasemapLayerListViewModelGenerated implements IPropertyWrapper {
    public component: BasemapLayerListViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: BasemapLayerListViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {

        if (hasValue(dotNetObject.basemapTitle)) {
            this.component.basemapTitle = dotNetObject.basemapTitle;
        }
        if (hasValue(dotNetObject.checkPublishStatusEnabled)) {
            this.component.checkPublishStatusEnabled = dotNetObject.checkPublishStatusEnabled;
        }
        if (hasValue(dotNetObject.listModeDisabled)) {
            this.component.listModeDisabled = dotNetObject.listModeDisabled;
        }
    }
    
    async triggerAction(action: any,
        item: any): Promise<void> {
        let { buildJsActionBase } = await import('./actionBase');
        let jsAction = buildJsActionBase(action) as any;
        let { buildJsListItem } = await import('./listItem');
        let jsItem = await buildJsListItem(item, this.layerId, this.viewId) as any;
        this.component.triggerAction(jsAction,
            jsItem);
    }

    // region properties
    
    async getBaseItems(): Promise<any> {
        if (!hasValue(this.component.baseItems)) {
            return null;
        }
        
        let { buildDotNetListItem } = await import('./listItem');
        return await Promise.all(this.component.baseItems!.map(async i => await buildDotNetListItem(i, this.viewId)));
    }
    
    getBasemapTitle(): any {
        if (!hasValue(this.component.basemapTitle)) {
            return null;
        }
        
        return generateSerializableJson(this.component.basemapTitle);
    }
    
    setBasemapTitle(value: any): void {
        this.component.basemapTitle = JSON.parse(value);
    }
    
    async getReferenceItems(): Promise<any> {
        if (!hasValue(this.component.referenceItems)) {
            return null;
        }
        
        let { buildDotNetListItem } = await import('./listItem');
        return await Promise.all(this.component.referenceItems!.map(async i => await buildDotNetListItem(i, this.viewId)));
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsBasemapLayerListViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.hasBaseListItemCreatedFunction) && dotNetObject.hasBaseListItemCreatedFunction) {
        properties.baseListItemCreatedFunction = async (event) => {

                await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsBaseListItemCreatedFunction', event);
        };
    }
    if (hasValue(dotNetObject.hasReferenceListItemCreatedFunction) && dotNetObject.hasReferenceListItemCreatedFunction) {
        properties.referenceListItemCreatedFunction = async (event) => {

                await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsReferenceListItemCreatedFunction', event);
        };
    }

    if (hasValue(dotNetObject.basemapTitle)) {
        properties.basemapTitle = dotNetObject.basemapTitle;
    }
    if (hasValue(dotNetObject.checkPublishStatusEnabled)) {
        properties.checkPublishStatusEnabled = dotNetObject.checkPublishStatusEnabled;
    }
    if (hasValue(dotNetObject.listModeDisabled)) {
        properties.listModeDisabled = dotNetObject.listModeDisabled;
    }
    let jsBasemapLayerListViewModel = new BasemapLayerListViewModel(properties);

    let { default: BasemapLayerListViewModelWrapper } = await import('./basemapLayerListViewModel');
    let basemapLayerListViewModelWrapper = new BasemapLayerListViewModelWrapper(jsBasemapLayerListViewModel);
    basemapLayerListViewModelWrapper.geoBlazorId = dotNetObject.id;
    basemapLayerListViewModelWrapper.viewId = viewId;
    basemapLayerListViewModelWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = basemapLayerListViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsBasemapLayerListViewModel;
    
    return jsBasemapLayerListViewModel;
}


export async function buildDotNetBasemapLayerListViewModelGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBasemapLayerListViewModel: any = {};
    
    if (hasValue(jsObject.baseItems)) {
        let { buildDotNetListItem } = await import('./listItem');
        dotNetBasemapLayerListViewModel.baseItems = await Promise.all(jsObject.baseItems.map(async i => await buildDotNetListItem(i, viewId)));
    }
    
    if (hasValue(jsObject.referenceItems)) {
        let { buildDotNetListItem } = await import('./listItem');
        dotNetBasemapLayerListViewModel.referenceItems = await Promise.all(jsObject.referenceItems.map(async i => await buildDotNetListItem(i, viewId)));
    }
    
    if (hasValue(jsObject.basemapTitle)) {
        dotNetBasemapLayerListViewModel.basemapTitle = jsObject.basemapTitle;
    }
    
    if (hasValue(jsObject.checkPublishStatusEnabled)) {
        dotNetBasemapLayerListViewModel.checkPublishStatusEnabled = jsObject.checkPublishStatusEnabled;
    }
    
    if (hasValue(jsObject.listModeDisabled)) {
        dotNetBasemapLayerListViewModel.listModeDisabled = jsObject.listModeDisabled;
    }
    
    if (hasValue(jsObject.state)) {
        dotNetBasemapLayerListViewModel.state = removeCircularReferences(jsObject.state);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetBasemapLayerListViewModel.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        if (hasValue(dotNetRef)) {
            try {
                dotNetBasemapLayerListViewModel.id = await dotNetRef.invokeMethodAsync('GetId');
            } catch (e) {
                console.error('Error invoking GetId for BasemapLayerListViewModel', e);
            }
        }
    }
    if (hasValue(dotNetBasemapLayerListViewModel.id)) {
        jsObjectRefs[dotNetBasemapLayerListViewModel.id] ??= jsObject;
        arcGisObjectRefs[dotNetBasemapLayerListViewModel.id] ??= jsObject;
    }

    return dotNetBasemapLayerListViewModel;
}

