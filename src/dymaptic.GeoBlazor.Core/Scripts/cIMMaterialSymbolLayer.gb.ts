// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import CIMMaterialSymbolLayer = __esri.CIMMaterialSymbolLayer;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CIMMaterialSymbolLayerGenerated implements IPropertyWrapper {
    public layer: CIMMaterialSymbolLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: CIMMaterialSymbolLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}


export async function buildJsCIMMaterialSymbolLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCIMMaterialSymbolLayer: any = {}

    if (hasValue(dotNetObject.color)) {
        jsCIMMaterialSymbolLayer.color = dotNetObject.color;
    }
    if (hasValue(dotNetObject.colorLocked)) {
        jsCIMMaterialSymbolLayer.colorLocked = dotNetObject.colorLocked;
    }
    if (hasValue(dotNetObject.effects)) {
        jsCIMMaterialSymbolLayer.effects = dotNetObject.effects;
    }
    if (hasValue(dotNetObject.enable)) {
        jsCIMMaterialSymbolLayer.enable = dotNetObject.enable;
    }
    if (hasValue(dotNetObject.materialMode)) {
        jsCIMMaterialSymbolLayer.materialMode = dotNetObject.materialMode;
    }
    if (hasValue(dotNetObject.name)) {
        jsCIMMaterialSymbolLayer.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.overprint)) {
        jsCIMMaterialSymbolLayer.overprint = dotNetObject.overprint;
    }
    if (hasValue(dotNetObject.primitiveName)) {
        jsCIMMaterialSymbolLayer.primitiveName = dotNetObject.primitiveName;
    }

    let { default: CIMMaterialSymbolLayerWrapper } = await import('./cIMMaterialSymbolLayer');
    let cIMMaterialSymbolLayerWrapper = new CIMMaterialSymbolLayerWrapper(jsCIMMaterialSymbolLayer);
    cIMMaterialSymbolLayerWrapper.geoBlazorId = dotNetObject.id;
    cIMMaterialSymbolLayerWrapper.viewId = viewId;
    cIMMaterialSymbolLayerWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(cIMMaterialSymbolLayerWrapper);
    jsObjectRefs[dotNetObject.id] = cIMMaterialSymbolLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsCIMMaterialSymbolLayer;
    let { buildDotNetCIMMaterialSymbolLayer } = await import('./cIMMaterialSymbolLayer');
    let dnInstantiatedObject = await buildDotNetCIMMaterialSymbolLayer(jsCIMMaterialSymbolLayer);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CIMMaterialSymbolLayer', e);
    }
    
    return jsCIMMaterialSymbolLayer;
}

export async function buildDotNetCIMMaterialSymbolLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCIMMaterialSymbolLayer: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.color)) {
        dotNetCIMMaterialSymbolLayer.color = jsObject.color;
    }
    if (hasValue(jsObject.colorLocked)) {
        dotNetCIMMaterialSymbolLayer.colorLocked = jsObject.colorLocked;
    }
    if (hasValue(jsObject.effects)) {
        dotNetCIMMaterialSymbolLayer.effects = jsObject.effects;
    }
    if (hasValue(jsObject.enable)) {
        dotNetCIMMaterialSymbolLayer.enable = jsObject.enable;
    }
    if (hasValue(jsObject.materialMode)) {
        dotNetCIMMaterialSymbolLayer.materialMode = jsObject.materialMode;
    }
    if (hasValue(jsObject.name)) {
        dotNetCIMMaterialSymbolLayer.name = jsObject.name;
    }
    if (hasValue(jsObject.overprint)) {
        dotNetCIMMaterialSymbolLayer.overprint = jsObject.overprint;
    }
    if (hasValue(jsObject.primitiveName)) {
        dotNetCIMMaterialSymbolLayer.primitiveName = jsObject.primitiveName;
    }
    if (hasValue(jsObject.type)) {
        dotNetCIMMaterialSymbolLayer.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCIMMaterialSymbolLayer.id = k;
                break;
            }
        }
    }

    return dotNetCIMMaterialSymbolLayer;
}

