// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import colorUtils = __esri.colorUtils;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ColorUtilsGenerated implements IPropertyWrapper {
    public component: colorUtils;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: colorUtils) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async getBackgroundColor(view: any): Promise<any> {
        return await this.component.getBackgroundColor(view);
    }

    async getBackgroundColorTheme(view: any): Promise<any> {
        return await this.component.getBackgroundColorTheme(view);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsColorUtilsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jscolorUtils: any = {}


    let { default: ColorUtilsWrapper } = await import('./colorUtils');
    let colorUtilsWrapper = new ColorUtilsWrapper(jscolorUtils);
    colorUtilsWrapper.geoBlazorId = dotNetObject.id;
    colorUtilsWrapper.viewId = viewId;
    colorUtilsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(colorUtilsWrapper);
    jsObjectRefs[dotNetObject.id] = colorUtilsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jscolorUtils;
    let { buildDotNetColorUtils } = await import('./colorUtils');
    let dnInstantiatedObject = await buildDotNetColorUtils(jscolorUtils);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ColorUtils', e);
    }
    
    return jscolorUtils;
}
export async function buildDotNetColorUtilsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetColorUtils: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetColorUtils.id = k;
                break;
            }
        }
    }

    return dotNetColorUtils;
}

