// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Basemap from '@arcgis/core/Basemap';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class BasemapGenerated implements IPropertyWrapper {
    public component: Basemap;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: Basemap) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async loadAll(): Promise<any> {
        let result = await this.component.loadAll();
        let { buildDotNetBasemap } = await import('./basemap');
        return await buildDotNetBasemap(result);
    }

    // region properties
    
    async getBaseLayers(): Promise<any> {
        if (!hasValue(this.component.baseLayers)) {
            return null;
        }
        
        let { buildDotNetLayer } = await import('./layer');
        return await Promise.all(this.component.baseLayers.map(async i => await buildDotNetLayer(i)));
    }
    
    async setBaseLayers(value: any): Promise<void> {
        let { buildJsLayer } = await import('./layer');
        this.component.baseLayers = await Promise.all(value.map(async i => await buildJsLayer(i, this.layerId, this.viewId))) as any;
    }
    
    async getPortalItem(): Promise<any> {
        if (!hasValue(this.component.portalItem)) {
            return null;
        }
        
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(this.component.portalItem);
    }
    
    async setPortalItem(value: any): Promise<void> {
        let { buildJsPortalItem } = await import('./portalItem');
        this.component.portalItem = await  buildJsPortalItem(value, this.layerId, this.viewId);
    }
    
    async getReferenceLayers(): Promise<any> {
        if (!hasValue(this.component.referenceLayers)) {
            return null;
        }
        
        let { buildDotNetLayer } = await import('./layer');
        return await Promise.all(this.component.referenceLayers.map(async i => await buildDotNetLayer(i)));
    }
    
    async setReferenceLayers(value: any): Promise<void> {
        let { buildJsLayer } = await import('./layer');
        this.component.referenceLayers = await Promise.all(value.map(async i => await buildJsLayer(i, this.layerId, this.viewId))) as any;
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsBasemapGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.baseLayers)) {
        let { buildJsLayer } = await import('./layer');
        properties.baseLayers = await Promise.all(dotNetObject.baseLayers.map(async i => await buildJsLayer(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.portalItem)) {
        let { buildJsPortalItem } = await import('./portalItem');
        properties.portalItem = await buildJsPortalItem(dotNetObject.portalItem, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.referenceLayers)) {
        let { buildJsLayer } = await import('./layer');
        properties.referenceLayers = await Promise.all(dotNetObject.referenceLayers.map(async i => await buildJsLayer(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.basemapId)) {
        properties.id = dotNetObject.basemapId;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        const { id, dotNetComponentReference, ...sanitizedSpatialReference } = dotNetObject.spatialReference;
        properties.spatialReference = sanitizedSpatialReference;
    }
    if (hasValue(dotNetObject.style)) {
        const { id, dotNetComponentReference, ...sanitizedStyle } = dotNetObject.style;
        properties.style = sanitizedStyle;
    }
    if (hasValue(dotNetObject.thumbnailUrl)) {
        properties.thumbnailUrl = dotNetObject.thumbnailUrl;
    }
    if (hasValue(dotNetObject.title)) {
        properties.title = dotNetObject.title;
    }
    let jsBasemap = new Basemap(properties);

    let { default: BasemapWrapper } = await import('./basemap');
    let basemapWrapper = new BasemapWrapper(jsBasemap);
    basemapWrapper.geoBlazorId = dotNetObject.id;
    basemapWrapper.viewId = viewId;
    basemapWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(basemapWrapper);
    jsObjectRefs[dotNetObject.id] = basemapWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsBasemap;
    
    let { buildDotNetBasemap } = await import('./basemap');
    let dnInstantiatedObject = await buildDotNetBasemap(jsBasemap);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type Basemap detected at path: ${key}, value: ${value}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                if (key.startsWith('_')) {
                    return undefined;
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Basemap', e);
    }
    
    return jsBasemap;
}


export async function buildDotNetBasemapGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBasemap: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.portalItem)) {
        let { buildDotNetPortalItem } = await import('./portalItem');
        dotNetBasemap.portalItem = await buildDotNetPortalItem(jsObject.portalItem);
    }
    if (hasValue(jsObject.id)) {
        dotNetBasemap.basemapId = jsObject.id;
    }
    if (hasValue(jsObject.loaded)) {
        dotNetBasemap.loaded = jsObject.loaded;
    }
    if (hasValue(jsObject.spatialReference)) {
        dotNetBasemap.spatialReference = jsObject.spatialReference;
    }
    if (hasValue(jsObject.style)) {
        dotNetBasemap.style = jsObject.style;
    }
    if (hasValue(jsObject.thumbnailUrl)) {
        dotNetBasemap.thumbnailUrl = jsObject.thumbnailUrl;
    }
    if (hasValue(jsObject.title)) {
        dotNetBasemap.title = jsObject.title;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetBasemap.id = k;
                break;
            }
        }
    }

    return dotNetBasemap;
}

