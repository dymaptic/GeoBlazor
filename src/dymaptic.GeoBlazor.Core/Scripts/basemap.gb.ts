// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import Basemap from '@arcgis/core/Basemap';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, generateSerializableJson } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class BasemapGenerated implements IPropertyWrapper {
    public component: Basemap;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: Basemap) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.baseLayers) && dotNetObject.baseLayers.length > 0) {
            let { buildJsLayer } = await import('./layer');
            this.component.baseLayers = await Promise.all(dotNetObject.baseLayers.map(async i => await buildJsLayer(i, this.layerId, this.viewId))) as any;
        }
        if (hasValue(dotNetObject.portalItem)) {
            let { buildJsPortalItem } = await import('./portalItem');
            this.component.portalItem = await buildJsPortalItem(dotNetObject.portalItem, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.referenceLayers) && dotNetObject.referenceLayers.length > 0) {
            let { buildJsLayer } = await import('./layer');
            this.component.referenceLayers = await Promise.all(dotNetObject.referenceLayers.map(async i => await buildJsLayer(i, this.layerId, this.viewId))) as any;
        }
        if (hasValue(dotNetObject.spatialReference)) {
            let { buildJsSpatialReference } = await import('./spatialReference');
            this.component.spatialReference = buildJsSpatialReference(dotNetObject.spatialReference) as any;
        }
        if (hasValue(dotNetObject.style)) {
            let { buildJsBasemapStyle } = await import('./basemapStyle');
            this.component.style = await buildJsBasemapStyle(dotNetObject.style) as any;
        }

        if (hasValue(dotNetObject.basemapId)) {
            this.component.id = dotNetObject.basemapId;
        }
        if (hasValue(dotNetObject.thumbnailUrl)) {
            this.component.thumbnailUrl = dotNetObject.thumbnailUrl;
        }
        if (hasValue(dotNetObject.title)) {
            this.component.title = dotNetObject.title;
        }
    }
    
    async cancelLoad(): Promise<void> {
        this.component.cancelLoad();
    }

    async isFulfilled(): Promise<any> {
        return this.component.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.component.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.component.isResolved();
    }

    async load(options: any): Promise<any> {
        let result = await this.component.load(options);
        
        return generateSerializableJson(result);
    }

    async loadAll(): Promise<any> {
        let result = await this.component.loadAll();
        let { buildDotNetBasemap } = await import('./basemap');
        return await buildDotNetBasemap(result);
    }

    async when(callback: any,
        errback: any): Promise<any> {
        let result = await this.component.when(callback,
            errback);
        
        return generateSerializableJson(result);
    }

    // region properties
    
    async getBaseLayers(): Promise<any> {
        if (!hasValue(this.component.baseLayers)) {
            return null;
        }
        
        let { buildDotNetLayer } = await import('./layer');
        return await Promise.all(this.component.baseLayers!.map(async i => await buildDotNetLayer(i)));
    }
    
    async setBaseLayers(value: any): Promise<void> {
        if (!hasValue(value)) {
            this.component.baseLayers = [];
        }
        let { buildJsLayer } = await import('./layer');
        this.component.baseLayers = await Promise.all(value.map(async i => await buildJsLayer(i, this.layerId, this.viewId))) as any;
    }
    
    getBasemapId(): any {
        if (!hasValue(this.component.id)) {
            return null;
        }
        
        return generateSerializableJson(this.component.id);
    }
    
    setBasemapId(value: any): void {
        this.component.id = JSON.parse(value);
    }
    
    async getPortalItem(): Promise<any> {
        if (!hasValue(this.component.portalItem)) {
            return null;
        }
        
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(this.component.portalItem);
    }
    
    async setPortalItem(value: any): Promise<void> {
        let { buildJsPortalItem } = await import('./portalItem');
        this.component.portalItem = await  buildJsPortalItem(value, this.layerId, this.viewId);
    }
    
    async getReferenceLayers(): Promise<any> {
        if (!hasValue(this.component.referenceLayers)) {
            return null;
        }
        
        let { buildDotNetLayer } = await import('./layer');
        return await Promise.all(this.component.referenceLayers!.map(async i => await buildDotNetLayer(i)));
    }
    
    async setReferenceLayers(value: any): Promise<void> {
        if (!hasValue(value)) {
            this.component.referenceLayers = [];
        }
        let { buildJsLayer } = await import('./layer');
        this.component.referenceLayers = await Promise.all(value.map(async i => await buildJsLayer(i, this.layerId, this.viewId))) as any;
    }
    
    async getSpatialReference(): Promise<any> {
        if (!hasValue(this.component.spatialReference)) {
            return null;
        }
        
        let { buildDotNetSpatialReference } = await import('./spatialReference');
        return buildDotNetSpatialReference(this.component.spatialReference);
    }
    
    async getStyle(): Promise<any> {
        if (!hasValue(this.component.style)) {
            return null;
        }
        
        let { buildDotNetBasemapStyle } = await import('./basemapStyle');
        return await buildDotNetBasemapStyle(this.component.style);
    }
    
    async setStyle(value: any): Promise<void> {
        let { buildJsBasemapStyle } = await import('./basemapStyle');
        this.component.style = await  buildJsBasemapStyle(value);
    }
    
    getThumbnailUrl(): any {
        if (!hasValue(this.component.thumbnailUrl)) {
            return null;
        }
        
        return generateSerializableJson(this.component.thumbnailUrl);
    }
    
    setThumbnailUrl(value: any): void {
        this.component.thumbnailUrl = JSON.parse(value);
    }
    
    getTitle(): any {
        if (!hasValue(this.component.title)) {
            return null;
        }
        
        return generateSerializableJson(this.component.title);
    }
    
    setTitle(value: any): void {
        this.component.title = JSON.parse(value);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildDotNetBasemapGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBasemap: any = {};
    
    if (hasValue(jsObject.portalItem)) {
        let { buildDotNetPortalItem } = await import('./portalItem');
        dotNetBasemap.portalItem = await buildDotNetPortalItem(jsObject.portalItem);
    }
    
    if (hasValue(jsObject.spatialReference)) {
        let { buildDotNetSpatialReference } = await import('./spatialReference');
        dotNetBasemap.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference);
    }
    
    if (hasValue(jsObject.style)) {
        let { buildDotNetBasemapStyle } = await import('./basemapStyle');
        dotNetBasemap.style = await buildDotNetBasemapStyle(jsObject.style);
    }
    
    if (hasValue(jsObject.id)) {
        dotNetBasemap.basemapId = jsObject.id;
    }
    
    if (hasValue(jsObject.loaded)) {
        dotNetBasemap.loaded = jsObject.loaded;
    }
    
    if (hasValue(jsObject.thumbnailUrl)) {
        dotNetBasemap.thumbnailUrl = jsObject.thumbnailUrl;
    }
    
    if (hasValue(jsObject.title)) {
        dotNetBasemap.title = jsObject.title;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetBasemap.id = geoBlazorId;
    }

    return dotNetBasemap;
}

