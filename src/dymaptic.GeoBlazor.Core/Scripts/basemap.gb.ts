// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import Basemap from '@arcgis/core/Basemap';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class BasemapGenerated implements IPropertyWrapper {
    public component: Basemap;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: Basemap) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async loadAll(): Promise<any> {
        let result = await this.component.loadAll();
        let { buildDotNetBasemap } = await import('./basemap');
        return buildDotNetBasemap(result);
    }

    // region properties
    
    async getBaseLayers(layerId: string | null, viewId: string | null): Promise<any> {
        let { buildDotNetLayer } = await import('./layer');
        return this.component.baseLayers.map(async i => await buildDotNetLayer(i, layerId, viewId));
    }
    
    async setBaseLayers(value: any, layerId: string | null, viewId: string | null): Promise<void> {
        let { buildJsLayer } = await import('./layer');
        this.component.baseLayers = value.map(async i => await buildJsLayer(i, layerId, viewId));
    }
    
    async getPortalItem(layerId: string | null, viewId: string | null): Promise<any> {
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(this.component.portalItem, layerId, viewId);
    }
    async setPortalItem(value: any, layerId: string | null, viewId: string | null): Promise<void> {
        let { buildJsPortalItem } = await import('./portalItem');
        this.component.portalItem = await buildJsPortalItem(value, layerId, viewId);
    }
    async getReferenceLayers(layerId: string | null, viewId: string | null): Promise<any> {
        let { buildDotNetLayer } = await import('./layer');
        return this.component.referenceLayers.map(async i => await buildDotNetLayer(i, layerId, viewId));
    }
    
    async setReferenceLayers(value: any, layerId: string | null, viewId: string | null): Promise<void> {
        let { buildJsLayer } = await import('./layer');
        this.component.referenceLayers = value.map(async i => await buildJsLayer(i, layerId, viewId));
    }
    
    async getStyle(layerId: string | null, viewId: string | null): Promise<any> {
        let { buildDotNetBasemapStyle } = await import('./basemapStyle');
        return await buildDotNetBasemapStyle(this.component.style, layerId, viewId);
    }
    async setStyle(value: any, layerId: string | null, viewId: string | null): Promise<void> {
        let { buildJsBasemapStyle } = await import('./basemapStyle');
        this.component.style = await buildJsBasemapStyle(value, layerId, viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsBasemapGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let { default: Basemap } = await import('@arcgis/core/Basemap');
    let jsBasemap = new Basemap();
    if (hasValue(dotNetObject.baseLayers)) {
        let { buildJsLayer } = await import('./layer');
        jsBasemap.baseLayers = dotNetObject.baseLayers.map(async i => await buildJsLayer(i, layerId, viewId)) as any;
    }
    if (hasValue(dotNetObject.portalItem)) {
        let { buildJsPortalItem } = await import('./jsBuilder');
        jsBasemap.portalItem = buildJsPortalItem(dotNetObject.portalItem, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.referenceLayers)) {
        let { buildJsLayer } = await import('./layer');
        jsBasemap.referenceLayers = dotNetObject.referenceLayers.map(async i => await buildJsLayer(i, layerId, viewId)) as any;
    }
    if (hasValue(dotNetObject.style)) {
        let { buildJsBasemapStyle } = await import('./basemapStyle');
        jsBasemap.style = await buildJsBasemapStyle(dotNetObject.style, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.basemapId)) {
        jsBasemap.id = dotNetObject.basemapId;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        jsBasemap.spatialReference = dotNetObject.spatialReference;
    }
    if (hasValue(dotNetObject.thumbnailUrl)) {
        jsBasemap.thumbnailUrl = dotNetObject.thumbnailUrl;
    }
    if (hasValue(dotNetObject.title)) {
        jsBasemap.title = dotNetObject.title;
    }
    let { default: BasemapWrapper } = await import('./basemap');
    let basemapWrapper = new BasemapWrapper(jsBasemap);
    basemapWrapper.geoBlazorId = dotNetObject.id;
    basemapWrapper.viewId = viewId;
    basemapWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(basemapWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = basemapWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsBasemap;
    
    return jsBasemap;
}

export async function buildDotNetBasemapGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBasemap: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.baseLayers)) {
            let { buildDotNetLayer } = await import('./dotNetBuilder');
            dotNetBasemap.baseLayers = jsObject.baseLayers.map(async i => await buildDotNetLayer(i, layerId, viewId));
        }
        if (hasValue(jsObject.portalItem)) {
            let { buildDotNetPortalItem } = await import('./dotNetBuilder');
            dotNetBasemap.portalItem = buildDotNetPortalItem(jsObject.portalItem, layerId, viewId);
        }
        if (hasValue(jsObject.referenceLayers)) {
            let { buildDotNetLayer } = await import('./dotNetBuilder');
            dotNetBasemap.referenceLayers = jsObject.referenceLayers.map(async i => await buildDotNetLayer(i, layerId, viewId));
        }
        if (hasValue(jsObject.style)) {
            let { buildDotNetBasemapStyle } = await import('./basemapStyle');
            dotNetBasemap.style = await buildDotNetBasemapStyle(jsObject.style, layerId, viewId);
        }
        dotNetBasemap.basemapId = jsObject.id;
        dotNetBasemap.loaded = jsObject.loaded;
        dotNetBasemap.spatialReference = jsObject.spatialReference;
        dotNetBasemap.thumbnailUrl = jsObject.thumbnailUrl;
        dotNetBasemap.title = jsObject.title;
    return dotNetBasemap;
}

