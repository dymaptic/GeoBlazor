// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import Graphic from '@arcgis/core/Graphic';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class GraphicGenerated implements IPropertyWrapper {
    public component: Graphic;
    public readonly geoBlazorId: string = '';

    constructor(component: Graphic) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async getEffectivePopupTemplate(defaultPopupTemplateEnabled: any): Promise<any> {
        let result = this.component.getEffectivePopupTemplate(defaultPopupTemplateEnabled);
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        return buildDotNetPopupTemplate(result);
    }

    async getObjectId(): Promise<any> {
        return this.component.getObjectId();
    }

    // region properties
    
    async getLayer(): Promise<any> {
        let { buildDotNetLayer } = await import('./layer');
        return await buildDotNetLayer(this.component.layer);
    }
    async setLayer(value: any): Promise<void> {
        let { buildJsLayer } = await import('./layer');
        this.component.layer = await buildJsLayer(value);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}
export async function buildJsGraphicGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let { default: Graphic } = await import('@arcgis/core/Graphic');
    let jsGraphic = new Graphic();
    if (hasValue(dotNetObject.popupTemplate)) {
        let { buildJsPopupTemplate } = await import('popupTemplate');
        jsGraphic.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, layerId, viewId) as any;

    }
    if (hasValue(dotNetObject.symbol)) {
        let { buildJsSymbol } = await import('symbol');
        jsGraphic.symbol = buildJsSymbol(dotNetObject.symbol) as any;

    }
    if (hasValue(dotNetObject.aggregateGeometries)) {
        jsGraphic.aggregateGeometries = dotNetObject.aggregateGeometries;
    }
    if (hasValue(dotNetObject.attributes)) {
        jsGraphic.attributes = dotNetObject.attributes;
    }
    if (hasValue(dotNetObject.geometry)) {
        jsGraphic.geometry = dotNetObject.geometry;
    }
    if (hasValue(dotNetObject.origin)) {
        jsGraphic.origin = dotNetObject.origin;
    }
    let { default: GraphicWrapper } = await import('./graphic');
    let graphicWrapper = new GraphicWrapper(jsGraphic);
    jsGraphic.id = dotNetObject.id;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(graphicWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = graphicWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsGraphic;
    
    return jsGraphic;
}

export async function buildDotNetGraphicGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGraphic: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.popupTemplate)) {
            let { buildDotNetPopupTemplate } = await import('./dotNetBuilder');
            dotNetGraphic.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
        }
        if (hasValue(jsObject.symbol)) {
            let { buildDotNetSymbol } = await import('./dotNetBuilder');
            dotNetGraphic.symbol = await buildDotNetSymbol(jsObject.symbol);
        }
        dotNetGraphic.aggregateGeometries = jsObject.aggregateGeometries;
        dotNetGraphic.attributes = jsObject.attributes;
        dotNetGraphic.geometry = jsObject.geometry;
        dotNetGraphic.isAggregate = jsObject.isAggregate;
        dotNetGraphic.origin = jsObject.origin;
    return dotNetGraphic;
}

