// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import Graphic from '@arcgis/core/Graphic';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class GraphicGenerated implements IPropertyWrapper {
    public component: Graphic;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: Graphic) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async getEffectivePopupTemplate(defaultPopupTemplateEnabled: any): Promise<any> {
        let result = this.component.getEffectivePopupTemplate(defaultPopupTemplateEnabled);
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        return await buildDotNetPopupTemplate(result);
    }

    async getObjectId(): Promise<any> {
        return this.component.getObjectId();
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildDotNetGraphicGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGraphic: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.popupTemplate)) {
            let { buildDotNetPopupTemplate } = await import('./popupTemplate');
            dotNetGraphic.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
        }
        dotNetGraphic.symbol = jsObject.symbol;
        if (hasValue(jsObject.aggregateGeometries)) {
            dotNetGraphic.aggregateGeometries = jsObject.aggregateGeometries;
        }
        if (hasValue(jsObject.attributes)) {
            dotNetGraphic.attributes = jsObject.attributes;
        }
        if (hasValue(jsObject.geometry)) {
            dotNetGraphic.geometry = jsObject.geometry;
        }
        if (hasValue(jsObject.isAggregate)) {
            dotNetGraphic.isAggregate = jsObject.isAggregate;
        }
        if (hasValue(jsObject.origin)) {
            dotNetGraphic.origin = jsObject.origin;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetGraphic.id = k;
                break;
            }
        }
    }

    return dotNetGraphic;
}

