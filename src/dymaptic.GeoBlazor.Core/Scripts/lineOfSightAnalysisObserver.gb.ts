// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import LineOfSightAnalysisObserver from '@arcgis/core/analysis/LineOfSightAnalysisObserver';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetLineOfSightAnalysisObserver } from './lineOfSightAnalysisObserver';

export async function buildJsLineOfSightAnalysisObserverGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.feature)) {
        let { buildJsFeatureReference } = await import('./featureReference');
        properties.feature = await buildJsFeatureReference(dotNetObject.feature, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.position)) {
        let { buildJsPoint } = await import('./point');
        properties.position = buildJsPoint(dotNetObject.position) as any;
    }

    if (hasValue(dotNetObject.elevationInfo)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedElevationInfo } = dotNetObject.elevationInfo;
        properties.elevationInfo = sanitizedElevationInfo;
    }
    let jsLineOfSightAnalysisObserver = new LineOfSightAnalysisObserver(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsLineOfSightAnalysisObserver);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLineOfSightAnalysisObserver;
    
    let dnInstantiatedObject = await buildDotNetLineOfSightAnalysisObserver(jsLineOfSightAnalysisObserver);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LineOfSightAnalysisObserver', e);
    }
    
    return jsLineOfSightAnalysisObserver;
}

export async function buildDotNetLineOfSightAnalysisObserverGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLineOfSightAnalysisObserver: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.feature)) {
            let { buildDotNetFeatureReference } = await import('./featureReference');
            dotNetLineOfSightAnalysisObserver.feature = await buildDotNetFeatureReference(jsObject.feature);
        }
        if (hasValue(jsObject.position)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetLineOfSightAnalysisObserver.position = buildDotNetPoint(jsObject.position);
        }
    if (hasValue(jsObject.elevationInfo)) {
        dotNetLineOfSightAnalysisObserver.elevationInfo = jsObject.elevationInfo;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLineOfSightAnalysisObserver.id = k;
                break;
            }
        }
    }

    return dotNetLineOfSightAnalysisObserver;
}

