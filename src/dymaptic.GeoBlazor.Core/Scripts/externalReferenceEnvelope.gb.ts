// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetExternalReferenceEnvelope } from './externalReferenceEnvelope';

export async function buildJsExternalReferenceEnvelopeGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsExternalReferenceEnvelope: any = {};
    if (hasValue(dotNetObject.spatialReference)) {
        let { buildJsExternalReferenceSpatialReference } = await import('./externalReferenceSpatialReference');
        jsExternalReferenceEnvelope.spatialReference = await buildJsExternalReferenceSpatialReference(dotNetObject.spatialReference, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.mmax)) {
        jsExternalReferenceEnvelope.mmax = dotNetObject.mmax;
    }
    if (hasValue(dotNetObject.mmin)) {
        jsExternalReferenceEnvelope.mmin = dotNetObject.mmin;
    }
    if (hasValue(dotNetObject.xmax)) {
        jsExternalReferenceEnvelope.xmax = dotNetObject.xmax;
    }
    if (hasValue(dotNetObject.xmin)) {
        jsExternalReferenceEnvelope.xmin = dotNetObject.xmin;
    }
    if (hasValue(dotNetObject.ymax)) {
        jsExternalReferenceEnvelope.ymax = dotNetObject.ymax;
    }
    if (hasValue(dotNetObject.ymin)) {
        jsExternalReferenceEnvelope.ymin = dotNetObject.ymin;
    }
    if (hasValue(dotNetObject.zmax)) {
        jsExternalReferenceEnvelope.zmax = dotNetObject.zmax;
    }
    if (hasValue(dotNetObject.zmin)) {
        jsExternalReferenceEnvelope.zmin = dotNetObject.zmin;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsExternalReferenceEnvelope);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsExternalReferenceEnvelope;
    
    return jsExternalReferenceEnvelope;
}


export async function buildDotNetExternalReferenceEnvelopeGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsExternalReferenceEnvelope } = await import('./externalReferenceEnvelope');
        jsComponentRef = await buildJsExternalReferenceEnvelope(jsObject, layerId, viewId);
    }
    
    let dotNetExternalReferenceEnvelope: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.spatialReference)) {
        let { buildDotNetExternalReferenceSpatialReference } = await import('./externalReferenceSpatialReference');
        dotNetExternalReferenceEnvelope.spatialReference = await buildDotNetExternalReferenceSpatialReference(jsObject.spatialReference, layerId, viewId);
    }
    if (hasValue(jsObject.mmax)) {
        dotNetExternalReferenceEnvelope.mmax = jsObject.mmax;
    }
    if (hasValue(jsObject.mmin)) {
        dotNetExternalReferenceEnvelope.mmin = jsObject.mmin;
    }
    if (hasValue(jsObject.xmax)) {
        dotNetExternalReferenceEnvelope.xmax = jsObject.xmax;
    }
    if (hasValue(jsObject.xmin)) {
        dotNetExternalReferenceEnvelope.xmin = jsObject.xmin;
    }
    if (hasValue(jsObject.ymax)) {
        dotNetExternalReferenceEnvelope.ymax = jsObject.ymax;
    }
    if (hasValue(jsObject.ymin)) {
        dotNetExternalReferenceEnvelope.ymin = jsObject.ymin;
    }
    if (hasValue(jsObject.zmax)) {
        dotNetExternalReferenceEnvelope.zmax = jsObject.zmax;
    }
    if (hasValue(jsObject.zmin)) {
        dotNetExternalReferenceEnvelope.zmin = jsObject.zmin;
    }

    return dotNetExternalReferenceEnvelope;
}

