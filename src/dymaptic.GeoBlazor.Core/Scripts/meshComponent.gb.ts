// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import MeshComponent from '@arcgis/core/geometry/support/MeshComponent';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class MeshComponentGenerated implements IPropertyWrapper {
    public component: MeshComponent;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: MeshComponent) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsMeshComponentGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsMeshComponent = new MeshComponent();

    if (hasValue(dotNetObject.faces)) {
        jsMeshComponent.faces = dotNetObject.faces;
    }
    if (hasValue(dotNetObject.material)) {
        jsMeshComponent.material = dotNetObject.material;
    }
    if (hasValue(dotNetObject.name)) {
        jsMeshComponent.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.shading)) {
        jsMeshComponent.shading = dotNetObject.shading;
    }
    let { default: MeshComponentWrapper } = await import('./meshComponent');
    let meshComponentWrapper = new MeshComponentWrapper(jsMeshComponent);
    meshComponentWrapper.geoBlazorId = dotNetObject.id;
    meshComponentWrapper.viewId = viewId;
    meshComponentWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(meshComponentWrapper);
    jsObjectRefs[dotNetObject.id] = meshComponentWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsMeshComponent;
    
    let { buildDotNetMeshComponent } = await import('./meshComponent');
    let dnInstantiatedObject = await buildDotNetMeshComponent(jsMeshComponent, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for MeshComponent', e);
    }
    
    return jsMeshComponent;
}

export async function buildDotNetMeshComponentGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMeshComponent: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.faces)) {
            dotNetMeshComponent.faces = jsObject.faces;
        }
        if (hasValue(jsObject.material)) {
            dotNetMeshComponent.material = jsObject.material;
        }
        if (hasValue(jsObject.name)) {
            dotNetMeshComponent.name = jsObject.name;
        }
        if (hasValue(jsObject.shading)) {
            dotNetMeshComponent.shading = jsObject.shading;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetMeshComponent.id = k;
                break;
            }
        }
    }

    return dotNetMeshComponent;
}

