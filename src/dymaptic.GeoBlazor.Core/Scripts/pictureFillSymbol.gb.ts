// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import PictureFillSymbol from '@arcgis/core/symbols/PictureFillSymbol';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PictureFillSymbolGenerated implements IPropertyWrapper {
    public component: PictureFillSymbol;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: PictureFillSymbol) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsPictureFillSymbolGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPictureFillSymbol = new PictureFillSymbol();

    if (hasValue(dotNetObject.color)) {
        jsPictureFillSymbol.color = dotNetObject.color;
    }
    if (hasValue(dotNetObject.height)) {
        jsPictureFillSymbol.height = dotNetObject.height;
    }
    if (hasValue(dotNetObject.outline)) {
        jsPictureFillSymbol.outline = dotNetObject.outline;
    }
    if (hasValue(dotNetObject.url)) {
        jsPictureFillSymbol.url = dotNetObject.url;
    }
    if (hasValue(dotNetObject.width)) {
        jsPictureFillSymbol.width = dotNetObject.width;
    }
    if (hasValue(dotNetObject.xoffset)) {
        jsPictureFillSymbol.xoffset = dotNetObject.xoffset;
    }
    if (hasValue(dotNetObject.xscale)) {
        jsPictureFillSymbol.xscale = dotNetObject.xscale;
    }
    if (hasValue(dotNetObject.yoffset)) {
        jsPictureFillSymbol.yoffset = dotNetObject.yoffset;
    }
    if (hasValue(dotNetObject.yscale)) {
        jsPictureFillSymbol.yscale = dotNetObject.yscale;
    }
    let { default: PictureFillSymbolWrapper } = await import('./pictureFillSymbol');
    let pictureFillSymbolWrapper = new PictureFillSymbolWrapper(jsPictureFillSymbol);
    pictureFillSymbolWrapper.geoBlazorId = dotNetObject.id;
    pictureFillSymbolWrapper.viewId = viewId;
    pictureFillSymbolWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(pictureFillSymbolWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = pictureFillSymbolWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsPictureFillSymbol;
    
    return jsPictureFillSymbol;
}

export async function buildDotNetPictureFillSymbolGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPictureFillSymbol: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetPictureFillSymbol.color = jsObject.color;
        dotNetPictureFillSymbol.height = jsObject.height;
        dotNetPictureFillSymbol.outline = jsObject.outline;
        dotNetPictureFillSymbol.type = jsObject.type;
        dotNetPictureFillSymbol.url = jsObject.url;
        dotNetPictureFillSymbol.width = jsObject.width;
        dotNetPictureFillSymbol.xoffset = jsObject.xoffset;
        dotNetPictureFillSymbol.xscale = jsObject.xscale;
        dotNetPictureFillSymbol.yoffset = jsObject.yoffset;
        dotNetPictureFillSymbol.yscale = jsObject.yscale;

    return dotNetPictureFillSymbol;
}

