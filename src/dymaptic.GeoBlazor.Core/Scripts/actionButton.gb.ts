// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import ActionButton from '@arcgis/core/support/actions/ActionButton';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ActionButtonGenerated implements IPropertyWrapper {
    public component: ActionButton;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ActionButton) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsActionButtonGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsActionButton = new ActionButton();

    if (hasValue(dotNetObject.actionId)) {
        jsActionButton.id = dotNetObject.actionId;
    }
    if (hasValue(dotNetObject.active)) {
        jsActionButton.active = dotNetObject.active;
    }
    if (hasValue(dotNetObject.className)) {
        jsActionButton.className = dotNetObject.className;
    }
    if (hasValue(dotNetObject.disabled)) {
        jsActionButton.disabled = dotNetObject.disabled;
    }
    if (hasValue(dotNetObject.icon)) {
        jsActionButton.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.image)) {
        jsActionButton.image = dotNetObject.image;
    }
    if (hasValue(dotNetObject.title)) {
        jsActionButton.title = dotNetObject.title;
    }
    let { default: ActionButtonWrapper } = await import('./actionButton');
    let actionButtonWrapper = new ActionButtonWrapper(jsActionButton);
    actionButtonWrapper.geoBlazorId = dotNetObject.id;
    actionButtonWrapper.viewId = viewId;
    actionButtonWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(actionButtonWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = actionButtonWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsActionButton;
    
    return jsActionButton;
}

export async function buildDotNetActionButtonGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetActionButton: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        dotNetActionButton.actionId = jsObject.id;
        dotNetActionButton.active = jsObject.active;
        dotNetActionButton.className = jsObject.className;
        dotNetActionButton.disabled = jsObject.disabled;
        dotNetActionButton.icon = jsObject.icon;
        dotNetActionButton.image = jsObject.image;
        dotNetActionButton.title = jsObject.title;
        dotNetActionButton.type = jsObject.type;

    return dotNetActionButton;
}

