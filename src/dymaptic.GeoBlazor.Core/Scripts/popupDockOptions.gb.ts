// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';

export async function buildJsPopupDockOptionsGenerated(dotNetObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsPopupDockOptions: any = {};

    if (hasValue(dotNetObject.breakpoint)) {
        jsPopupDockOptions.breakpoint = dotNetObject.breakpoint;
    }
    if (hasValue(dotNetObject.buttonEnabled)) {
        jsPopupDockOptions.buttonEnabled = dotNetObject.buttonEnabled;
    }
    if (hasValue(dotNetObject.position)) {
        jsPopupDockOptions.position = dotNetObject.position;
    }
    
    jsObjectRefs[dotNetObject.id] = jsPopupDockOptions;
    arcGisObjectRefs[dotNetObject.id] = jsPopupDockOptions;
    
    return jsPopupDockOptions;
}


export async function buildDotNetPopupDockOptionsGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPopupDockOptions: any = {};
    
    if (hasValue(jsObject.breakpoint)) {
        dotNetPopupDockOptions.breakpoint = jsObject.breakpoint;
    }
    
    if (hasValue(jsObject.buttonEnabled)) {
        dotNetPopupDockOptions.buttonEnabled = jsObject.buttonEnabled;
    }
    
    if (hasValue(jsObject.position)) {
        dotNetPopupDockOptions.position = removeCircularReferences(jsObject.position);
    }
    

    return dotNetPopupDockOptions;
}

