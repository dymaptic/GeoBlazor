// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import PopupDockOptions = __esri.PopupDockOptions;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PopupDockOptionsGenerated implements IPropertyWrapper {
    public component: PopupDockOptions;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: PopupDockOptions) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsPopupDockOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPopupDockOptions: any = {}

    if (hasValue(dotNetObject.breakpoint)) {
        jsPopupDockOptions.breakpoint = dotNetObject.breakpoint;
    }
    if (hasValue(dotNetObject.buttonEnabled)) {
        jsPopupDockOptions.buttonEnabled = dotNetObject.buttonEnabled;
    }
    if (hasValue(dotNetObject.position)) {
        jsPopupDockOptions.position = dotNetObject.position;
    }
    let { default: PopupDockOptionsWrapper } = await import('./popupDockOptions');
    let popupDockOptionsWrapper = new PopupDockOptionsWrapper(jsPopupDockOptions);
    popupDockOptionsWrapper.geoBlazorId = dotNetObject.id;
    popupDockOptionsWrapper.viewId = viewId;
    popupDockOptionsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(popupDockOptionsWrapper);
    jsObjectRefs[dotNetObject.id] = popupDockOptionsWrapper;

    arcGisObjectRefs[dotNetObject.id] = jsPopupDockOptions;
    let { buildDotNetPopupDockOptions } = await import('./popupDockOptions');
    let dnInstantiatedObject = await buildDotNetPopupDockOptions(jsPopupDockOptions, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PopupDockOptions', e);
    }
    
    return jsPopupDockOptions;
}

export async function buildDotNetPopupDockOptionsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPopupDockOptions: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.breakpoint)) {
            dotNetPopupDockOptions.breakpoint = jsObject.breakpoint;
        }
        if (hasValue(jsObject.buttonEnabled)) {
            dotNetPopupDockOptions.buttonEnabled = jsObject.buttonEnabled;
        }
        if (hasValue(jsObject.position)) {
            dotNetPopupDockOptions.position = jsObject.position;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPopupDockOptions.id = k;
                break;
            }
        }
    }

    return dotNetPopupDockOptions;
}

