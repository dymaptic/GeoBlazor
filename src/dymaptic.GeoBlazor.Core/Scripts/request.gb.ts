// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import request from '@arcgis/core/request';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class RequestGenerated implements IPropertyWrapper {
    public component: request;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: request) {
        this.component = component;
    }

    // region methods

    unwrap() {
        return this.component;
    }

    async esriRequest(url: any,
                      options: any): Promise<any> {
        return await this.component.esriRequest(url,
            options);
    }

    // region properties

    getProperty(prop: string): any {
        return this.component[prop];
    }

    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsRequestGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsrequest = new request();


    let {default: RequestWrapper} = await import('./request');
    let requestWrapper = new RequestWrapper(jsrequest);
    requestWrapper.geoBlazorId = dotNetObject.id;
    requestWrapper.viewId = viewId;
    requestWrapper.layerId = layerId;

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(requestWrapper);
    jsObjectRefs[dotNetObject.id] = requestWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsrequest;
    let {buildDotNetRequest} = await import('./request');
    let dnInstantiatedObject = await buildDotNetRequest(jsrequest);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Request', e);
    }

    return jsrequest;
}

export async function buildDotNetRequestGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetRequest: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRequest.id = k;
                break;
            }
        }
    }

    return dotNetRequest;
}

