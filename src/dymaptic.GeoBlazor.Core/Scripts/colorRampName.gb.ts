// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetColorRampName } from './colorRampName';

export async function buildJsColorRampNameGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsColorRampName: any = {};

    if (hasValue(dotNetObject.inverted)) {
        jsColorRampName.inverted = dotNetObject.inverted;
    }
    if (hasValue(dotNetObject.name)) {
        jsColorRampName.name = dotNetObject.name;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsColorRampName);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsColorRampName;
    
    let { buildDotNetColorRampName } = await import('./colorRampName');
    let dnInstantiatedObject = await buildDotNetColorRampName(jsColorRampName);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type ColorRampName detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ColorRampName', e);
    }
    
    return jsColorRampName;
}


export async function buildDotNetColorRampNameGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetColorRampName: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.inverted)) {
        dotNetColorRampName.inverted = jsObject.inverted;
    }
    if (hasValue(jsObject.name)) {
        dotNetColorRampName.name = jsObject.name;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetColorRampName.id = geoBlazorId;
    }

    return dotNetColorRampName;
}

