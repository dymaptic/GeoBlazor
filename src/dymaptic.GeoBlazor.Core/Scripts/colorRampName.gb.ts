// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetColorRampName } from './colorRampName';

export async function buildJsColorRampNameGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsColorRampName: any = {};

    if (hasValue(dotNetObject.inverted)) {
        jsColorRampName.inverted = dotNetObject.inverted;
    }
    if (hasValue(dotNetObject.name)) {
        jsColorRampName.name = dotNetObject.name;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsColorRampName);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsColorRampName;
    
    return jsColorRampName;
}


export async function buildDotNetColorRampNameGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetColorRampName: any = {};
    
    if (hasValue(jsObject.inverted)) {
        dotNetColorRampName.inverted = jsObject.inverted;
    }
    
    if (hasValue(jsObject.name)) {
        dotNetColorRampName.name = jsObject.name;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetColorRampName.id = geoBlazorId;
    }

    return dotNetColorRampName;
}

