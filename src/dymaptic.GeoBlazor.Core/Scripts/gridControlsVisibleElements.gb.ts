// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetGridControlsVisibleElements } from './gridControlsVisibleElements';

export async function buildJsGridControlsVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsGridControlsVisibleElements: any = {};

    if (hasValue(dotNetObject.colorSelection)) {
        jsGridControlsVisibleElements.colorSelection = dotNetObject.colorSelection;
    }
    if (hasValue(dotNetObject.dynamicScaleToggle)) {
        jsGridControlsVisibleElements.dynamicScaleToggle = dotNetObject.dynamicScaleToggle;
    }
    if (hasValue(dotNetObject.gridEnabledToggle)) {
        jsGridControlsVisibleElements.gridEnabledToggle = dotNetObject.gridEnabledToggle;
    }
    if (hasValue(dotNetObject.gridSnapEnabledToggle)) {
        jsGridControlsVisibleElements.gridSnapEnabledToggle = dotNetObject.gridSnapEnabledToggle;
    }
    if (hasValue(dotNetObject.lineIntervalInput)) {
        jsGridControlsVisibleElements.lineIntervalInput = dotNetObject.lineIntervalInput;
    }
    if (hasValue(dotNetObject.numericInputs)) {
        jsGridControlsVisibleElements.numericInputs = dotNetObject.numericInputs;
    }
    if (hasValue(dotNetObject.outOfScaleWarning)) {
        jsGridControlsVisibleElements.outOfScaleWarning = dotNetObject.outOfScaleWarning;
    }
    if (hasValue(dotNetObject.placementButtons)) {
        jsGridControlsVisibleElements.placementButtons = dotNetObject.placementButtons;
    }
    if (hasValue(dotNetObject.rotateWithMapToggle)) {
        jsGridControlsVisibleElements.rotateWithMapToggle = dotNetObject.rotateWithMapToggle;
    }
    
    jsObjectRefs[dotNetObject.id] = jsGridControlsVisibleElements;
    arcGisObjectRefs[dotNetObject.id] = jsGridControlsVisibleElements;
    
    return jsGridControlsVisibleElements;
}


export async function buildDotNetGridControlsVisibleElementsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGridControlsVisibleElements: any = {};
    
    if (hasValue(jsObject.colorSelection)) {
        dotNetGridControlsVisibleElements.colorSelection = jsObject.colorSelection;
    }
    
    if (hasValue(jsObject.dynamicScaleToggle)) {
        dotNetGridControlsVisibleElements.dynamicScaleToggle = jsObject.dynamicScaleToggle;
    }
    
    if (hasValue(jsObject.gridEnabledToggle)) {
        dotNetGridControlsVisibleElements.gridEnabledToggle = jsObject.gridEnabledToggle;
    }
    
    if (hasValue(jsObject.gridSnapEnabledToggle)) {
        dotNetGridControlsVisibleElements.gridSnapEnabledToggle = jsObject.gridSnapEnabledToggle;
    }
    
    if (hasValue(jsObject.lineIntervalInput)) {
        dotNetGridControlsVisibleElements.lineIntervalInput = jsObject.lineIntervalInput;
    }
    
    if (hasValue(jsObject.numericInputs)) {
        dotNetGridControlsVisibleElements.numericInputs = jsObject.numericInputs;
    }
    
    if (hasValue(jsObject.outOfScaleWarning)) {
        dotNetGridControlsVisibleElements.outOfScaleWarning = jsObject.outOfScaleWarning;
    }
    
    if (hasValue(jsObject.placementButtons)) {
        dotNetGridControlsVisibleElements.placementButtons = jsObject.placementButtons;
    }
    
    if (hasValue(jsObject.rotateWithMapToggle)) {
        dotNetGridControlsVisibleElements.rotateWithMapToggle = jsObject.rotateWithMapToggle;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetGridControlsVisibleElements.id = geoBlazorId;
    }

    return dotNetGridControlsVisibleElements;
}

