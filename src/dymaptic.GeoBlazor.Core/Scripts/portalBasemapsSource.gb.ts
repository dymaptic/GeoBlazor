// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import PortalBasemapsSource from '@arcgis/core/widgets/BasemapGallery/support/PortalBasemapsSource';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PortalBasemapsSourceGenerated implements IPropertyWrapper {
    public component: PortalBasemapsSource;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: PortalBasemapsSource) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.basemaps) && dotNetObject.basemaps.length > 0) {
            let { buildJsBasemap } = await import('./basemap');
            this.component.basemaps = await Promise.all(dotNetObject.basemaps.map(async i => await buildJsBasemap(i, this.layerId, this.viewId))) as any;
        }
        if (hasValue(dotNetObject.portal)) {
            let { buildJsPortal } = await import('./portal');
            this.component.portal = await buildJsPortal(dotNetObject.portal, this.layerId, this.viewId) as any;
        }

        if (hasValue(dotNetObject.query)) {
            this.component.query = dotNetObject.query;
        }
    }
    
    async refresh(): Promise<any> {
        return await this.component.refresh();
    }

    // region properties
    
    async getBasemaps(): Promise<any> {
        if (!hasValue(this.component.basemaps)) {
            return null;
        }
        
        let { buildDotNetBasemap } = await import('./basemap');
        return await Promise.all(this.component.basemaps.map(async i => await buildDotNetBasemap(i)));
    }
    
    async setBasemaps(value: any): Promise<void> {
        let { buildJsBasemap } = await import('./basemap');
        this.component.basemaps = await Promise.all(value.map(async i => await buildJsBasemap(i, this.layerId, this.viewId))) as any;
    }
    
    async getPortal(): Promise<any> {
        if (!hasValue(this.component.portal)) {
            return null;
        }
        
        let { buildDotNetPortal } = await import('./portal');
        return await buildDotNetPortal(this.component.portal);
    }
    
    async setPortal(value: any): Promise<void> {
        let { buildJsPortal } = await import('./portal');
        this.component.portal = await  buildJsPortal(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsPortalBasemapsSourceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.basemaps) && dotNetObject.basemaps.length > 0) {
        let { buildJsBasemap } = await import('./basemap');
        properties.basemaps = await Promise.all(dotNetObject.basemaps.map(async i => await buildJsBasemap(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.hasFilterFunction) && dotNetObject.hasFilterFunction) {
        properties.filterFunction = async (item,
        index,
        array) => {
            let { buildDotNetBasemap } = await import('./basemap');
            let dnItem = await buildDotNetBasemap(item);
            let dnArray = await Promise.all(array.map(async i => await buildDotNetBasemap(i)));

            return await dotNetObject.invokeMethodAsync('OnJsFilterFunction', dnItem,
            index,
            dnArray);
        };
    }
    if (hasValue(dotNetObject.portal)) {
        let { buildJsPortal } = await import('./portal');
        properties.portal = await buildJsPortal(dotNetObject.portal, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.hasUpdateBasemapsCallback) && dotNetObject.hasUpdateBasemapsCallback) {
        properties.updateBasemapsCallback = async (items) => {
            let { buildDotNetBasemap } = await import('./basemap');
            let dnItems = await Promise.all(items.map(async i => await buildDotNetBasemap(i)));

            let result = await dotNetObject.invokeMethodAsync('OnJsUpdateBasemapsCallback', dnItems);
            let { buildJsBasemap } = await import('./basemap');
            return await Promise.all(result.map(async i => await buildJsBasemap(i, layerId, viewId)));
        };
    }

    if (hasValue(dotNetObject.query)) {
        properties.query = dotNetObject.query;
    }
    let jsPortalBasemapsSource = new PortalBasemapsSource(properties);

    let { default: PortalBasemapsSourceWrapper } = await import('./portalBasemapsSource');
    let portalBasemapsSourceWrapper = new PortalBasemapsSourceWrapper(jsPortalBasemapsSource);
    portalBasemapsSourceWrapper.geoBlazorId = dotNetObject.id;
    portalBasemapsSourceWrapper.viewId = viewId;
    portalBasemapsSourceWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = portalBasemapsSourceWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsPortalBasemapsSource;
    
    return jsPortalBasemapsSource;
}


export async function buildDotNetPortalBasemapsSourceGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPortalBasemapsSource: any = {};
    
    if (hasValue(jsObject.basemaps)) {
        let { buildDotNetBasemap } = await import('./basemap');
        dotNetPortalBasemapsSource.basemaps = await Promise.all(jsObject.basemaps.map(async i => await buildDotNetBasemap(i)));
    }
    
    if (hasValue(jsObject.portal)) {
        let { buildDotNetPortal } = await import('./portal');
        dotNetPortalBasemapsSource.portal = await buildDotNetPortal(jsObject.portal);
    }
    
    if (hasValue(jsObject.query)) {
        dotNetPortalBasemapsSource.query = jsObject.query;
    }
    
    if (hasValue(jsObject.state)) {
        dotNetPortalBasemapsSource.state = removeCircularReferences(jsObject.state);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetPortalBasemapsSource.id = geoBlazorId;
    }

    return dotNetPortalBasemapsSource;
}

