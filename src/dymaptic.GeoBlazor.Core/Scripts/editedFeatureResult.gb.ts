// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetEditedFeatureResult } from './editedFeatureResult';

export async function buildJsEditedFeatureResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsEditedFeatureResult: any = {}
    if (hasValue(dotNetObject.editedFeatures)) {
        let { buildJsEditedFeatureResultEditedFeatures } = await import('./editedFeatureResultEditedFeatures');
        jsEditedFeatureResult.editedFeatures = await buildJsEditedFeatureResultEditedFeatures(dotNetObject.editedFeatures, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.layerId)) {
        jsEditedFeatureResult.layerId = dotNetObject.layerId;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsEditedFeatureResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsEditedFeatureResult;
    
    let dnInstantiatedObject = await buildDotNetEditedFeatureResult(jsEditedFeatureResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for EditedFeatureResult', e);
    }
    
    return jsEditedFeatureResult;
}

export async function buildDotNetEditedFeatureResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetEditedFeatureResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.editedFeatures)) {
            let { buildDotNetEditedFeatureResultEditedFeatures } = await import('./editedFeatureResultEditedFeatures');
            dotNetEditedFeatureResult.editedFeatures = await buildDotNetEditedFeatureResultEditedFeatures(jsObject.editedFeatures);
        }
    if (hasValue(jsObject.layerId)) {
        dotNetEditedFeatureResult.layerId = jsObject.layerId;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetEditedFeatureResult.id = k;
                break;
            }
        }
    }

    return dotNetEditedFeatureResult;
}

