// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetEditedFeatureResult } from './editedFeatureResult';

export async function buildJsEditedFeatureResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsEditedFeatureResult: any = {};
    if (hasValue(dotNetObject.editedFeatures)) {
        let { buildJsEditedFeatureResultEditedFeatures } = await import('./editedFeatureResultEditedFeatures');
        jsEditedFeatureResult.editedFeatures = await buildJsEditedFeatureResultEditedFeatures(dotNetObject.editedFeatures, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.layerId)) {
        jsEditedFeatureResult.layerId = dotNetObject.layerId;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsEditedFeatureResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsEditedFeatureResult;
    
    return jsEditedFeatureResult;
}


export async function buildDotNetEditedFeatureResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsEditedFeatureResult } = await import('./editedFeatureResult');
        jsComponentRef = await buildJsEditedFeatureResult(jsObject, layerId, viewId);
    }
    
    let dotNetEditedFeatureResult: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.editedFeatures)) {
        let { buildDotNetEditedFeatureResultEditedFeatures } = await import('./editedFeatureResultEditedFeatures');
        dotNetEditedFeatureResult.editedFeatures = await buildDotNetEditedFeatureResultEditedFeatures(jsObject.editedFeatures, layerId, viewId);
    }
    if (hasValue(jsObject.layerId)) {
        dotNetEditedFeatureResult.layerId = jsObject.layerId;
    }

    return dotNetEditedFeatureResult;
}

