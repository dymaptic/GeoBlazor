// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetColorAndIntensity } from './colorAndIntensity';

export async function buildJsColorAndIntensityGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsColorAndIntensity: any = {};

    if (hasValue(dotNetObject.color) && dotNetObject.color.length > 0) {
        jsColorAndIntensity.color = dotNetObject.color;
    }
    if (hasValue(dotNetObject.intensity)) {
        jsColorAndIntensity.intensity = dotNetObject.intensity;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsColorAndIntensity);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsColorAndIntensity;
    
    return jsColorAndIntensity;
}


export async function buildDotNetColorAndIntensityGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetColorAndIntensity: any = {};
    
    if (hasValue(jsObject.color)) {
        dotNetColorAndIntensity.color = jsObject.color;
    }
    
    if (hasValue(jsObject.intensity)) {
        dotNetColorAndIntensity.intensity = jsObject.intensity;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetColorAndIntensity.id = geoBlazorId;
    }

    return dotNetColorAndIntensity;
}

