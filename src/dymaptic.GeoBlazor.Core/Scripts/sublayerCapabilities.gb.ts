// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetSublayerCapabilities } from './sublayerCapabilities';

export async function buildJsSublayerCapabilitiesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsSublayerCapabilities: any = {};
    if (hasValue(dotNetObject.attachment)) {
        let { buildJsSublayerCapabilitiesAttachment } = await import('./sublayerCapabilitiesAttachment');
        jsSublayerCapabilities.attachment = await buildJsSublayerCapabilitiesAttachment(dotNetObject.attachment, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.data)) {
        jsSublayerCapabilities.data = dotNetObject.data;
    }
    if (hasValue(dotNetObject.operations)) {
        jsSublayerCapabilities.operations = dotNetObject.operations;
    }
    if (hasValue(dotNetObject.queryRelated)) {
        jsSublayerCapabilities.queryRelated = dotNetObject.queryRelated;
    }
    
    jsObjectRefs[dotNetObject.id] = jsSublayerCapabilities;
    arcGisObjectRefs[dotNetObject.id] = jsSublayerCapabilities;
    
    return jsSublayerCapabilities;
}


export async function buildDotNetSublayerCapabilitiesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSublayerCapabilities: any = {};
    
    if (hasValue(jsObject.attachment)) {
        let { buildDotNetSublayerCapabilitiesAttachment } = await import('./sublayerCapabilitiesAttachment');
        dotNetSublayerCapabilities.attachment = await buildDotNetSublayerCapabilitiesAttachment(jsObject.attachment);
    }
    
    if (hasValue(jsObject.data)) {
        dotNetSublayerCapabilities.data = removeCircularReferences(jsObject.data);
    }
    
    if (hasValue(jsObject.operations)) {
        dotNetSublayerCapabilities.operations = removeCircularReferences(jsObject.operations);
    }
    
    if (hasValue(jsObject.queryRelated)) {
        dotNetSublayerCapabilities.queryRelated = removeCircularReferences(jsObject.queryRelated);
    }
    

    return dotNetSublayerCapabilities;
}

