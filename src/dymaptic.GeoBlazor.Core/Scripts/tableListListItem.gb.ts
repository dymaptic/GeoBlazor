// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import TableListListItem from '@arcgis/core/widgets/TableList/ListItem';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class TableListListItemGenerated implements IPropertyWrapper {
    public component: TableListListItem;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: TableListListItem) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getLayer(): Promise<any> {
        if (!hasValue(this.component.layer)) {
            return null;
        }
        
        let { buildDotNetLayer } = await import('./layer');
        return await buildDotNetLayer(this.component.layer);
    }
    async setLayer(value: any): Promise<void> {
        let { buildJsLayer } = await import('./layer');
        this.component.layer = await  buildJsLayer(value, this.layerId, this.viewId);
    }
    async getPanel(): Promise<any> {
        if (!hasValue(this.component.panel)) {
            return null;
        }
        
        let { buildDotNetTableListItemPanelWidget } = await import('./tableListItemPanelWidget');
        return await buildDotNetTableListItemPanelWidget(this.component.panel);
    }
    async setPanel(value: any): Promise<void> {
        let { buildJsTableListItemPanelWidget } = await import('./tableListItemPanelWidget');
        this.component.panel = await  buildJsTableListItemPanelWidget(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsTableListListItemGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsTableListListItem = new TableListListItem();
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsTableListListItem.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.panel)) {
        let { buildJsTableListItemPanelWidget } = await import('./tableListItemPanelWidget');
        jsTableListListItem.panel = await buildJsTableListItemPanelWidget(dotNetObject.panel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.actionsOpen)) {
        jsTableListListItem.actionsOpen = dotNetObject.actionsOpen;
    }
    if (hasValue(dotNetObject.actionsSections)) {
        jsTableListListItem.actionsSections = dotNetObject.actionsSections;
    }
    if (hasValue(dotNetObject.hidden)) {
        jsTableListListItem.hidden = dotNetObject.hidden;
    }
    if (hasValue(dotNetObject.title)) {
        jsTableListListItem.title = dotNetObject.title;
    }

    let { default: TableListListItemWrapper } = await import('./tableListListItem');
    let tableListListItemWrapper = new TableListListItemWrapper(jsTableListListItem);
    tableListListItemWrapper.geoBlazorId = dotNetObject.id;
    tableListListItemWrapper.viewId = viewId;
    tableListListItemWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(tableListListItemWrapper);
    jsObjectRefs[dotNetObject.id] = tableListListItemWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsTableListListItem;
    let { buildDotNetTableListListItem } = await import('./tableListListItem');
    let dnInstantiatedObject = await buildDotNetTableListListItem(jsTableListListItem);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TableListListItem', e);
    }
    
    return jsTableListListItem;
}
export async function buildDotNetTableListListItemGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTableListListItem: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.panel)) {
            let { buildDotNetTableListItemPanelWidget } = await import('./tableListItemPanelWidget');
            dotNetTableListListItem.panel = await buildDotNetTableListItemPanelWidget(jsObject.panel);
        }
        if (hasValue(jsObject.actionsOpen)) {
            dotNetTableListListItem.actionsOpen = jsObject.actionsOpen;
        }
        if (hasValue(jsObject.actionsSections)) {
            dotNetTableListListItem.actionsSections = jsObject.actionsSections;
        }
        if (hasValue(jsObject.error)) {
            dotNetTableListListItem.error = jsObject.error;
        }
        if (hasValue(jsObject.hidden)) {
            dotNetTableListListItem.hidden = jsObject.hidden;
        }
        if (hasValue(jsObject.publishing)) {
            dotNetTableListListItem.publishing = jsObject.publishing;
        }
        if (hasValue(jsObject.title)) {
            dotNetTableListListItem.title = jsObject.title;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTableListListItem.id = k;
                break;
            }
        }
    }

    return dotNetTableListListItem;
}

