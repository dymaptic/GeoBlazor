// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetRasterIdentifyResult } from './rasterIdentifyResult';
import RasterIdentifyResult = __esri.RasterIdentifyResult;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsRasterIdentifyResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsRasterIdentifyResult: any = {}
    if (hasValue(dotNetObject.dataSeries)) {
        let { buildJsRasterSliceValue } = await import('./rasterSliceValue');
        jsRasterIdentifyResult.dataSeries = await Promise.all(dotNetObject.dataSeries.map(async i => await buildJsRasterSliceValue(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.location)) {
        let { buildJsPoint } = await import('./point');
        jsRasterIdentifyResult.location = buildJsPoint(dotNetObject.location) as any;
    }

    if (hasValue(dotNetObject.processedValue)) {
        jsRasterIdentifyResult.processedValue = dotNetObject.processedValue;
    }
    if (hasValue(dotNetObject.value)) {
        jsRasterIdentifyResult.value = dotNetObject.value;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsRasterIdentifyResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRasterIdentifyResult;
    
    let dnInstantiatedObject = await buildDotNetRasterIdentifyResult(jsRasterIdentifyResult);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RasterIdentifyResult', e);
    }
    
    return jsRasterIdentifyResult;
}

export async function buildDotNetRasterIdentifyResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRasterIdentifyResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.dataSeries)) {
            let { buildDotNetRasterSliceValue } = await import('./rasterSliceValue');
            dotNetRasterIdentifyResult.dataSeries = await Promise.all(jsObject.dataSeries.map(async i => await buildDotNetRasterSliceValue(i)));
        }
        if (hasValue(jsObject.location)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetRasterIdentifyResult.location = buildDotNetPoint(jsObject.location);
        }
        if (hasValue(jsObject.processedValue)) {
            dotNetRasterIdentifyResult.processedValue = jsObject.processedValue;
        }
        if (hasValue(jsObject.value)) {
            dotNetRasterIdentifyResult.value = jsObject.value;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetRasterIdentifyResult.id = k;
                break;
            }
        }
    }

    return dotNetRasterIdentifyResult;
}

