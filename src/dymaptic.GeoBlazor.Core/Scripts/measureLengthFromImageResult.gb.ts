import {buildDotNetMeasureLengthFromImageResult} from './measureLengthFromImageResult';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import MeasureLengthFromImageResult from '@arcgis/core/rest/support/MeasureLengthFromImageResult';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsMeasureLengthFromImageResultGenerated(dotNetObject: any): Promise<any> {
    let jsMeasureLengthFromImageResult = new MeasureLengthFromImageResult();
    if (hasValue(dotNetObject.geometry)) {
        let {buildJsPolyline} = await import('./polyline');
        jsMeasureLengthFromImageResult.geometry = buildJsPolyline(dotNetObject.geometry) as any;
    }

    if (hasValue(dotNetObject.length)) {
        jsMeasureLengthFromImageResult.length = dotNetObject.length;
    }

    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsMeasureLengthFromImageResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsMeasureLengthFromImageResult;

    let dnInstantiatedObject = await buildDotNetMeasureLengthFromImageResult(jsMeasureLengthFromImageResult);

    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for MeasureLengthFromImageResult', e);
    }

    return jsMeasureLengthFromImageResult;
}

export async function buildDotNetMeasureLengthFromImageResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }

    let dotNetMeasureLengthFromImageResult: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.geometry)) {
        let {buildDotNetPolyline} = await import('./polyline');
        dotNetMeasureLengthFromImageResult.geometry = buildDotNetPolyline(jsObject.geometry);
    }
    if (hasValue(jsObject.length)) {
        dotNetMeasureLengthFromImageResult.length = jsObject.length;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetMeasureLengthFromImageResult.id = k;
                break;
            }
        }
    }

    return dotNetMeasureLengthFromImageResult;
}

