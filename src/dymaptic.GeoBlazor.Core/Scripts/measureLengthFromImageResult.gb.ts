// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import MeasureLengthFromImageResult from '@arcgis/core/rest/support/MeasureLengthFromImageResult';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetMeasureLengthFromImageResult } from './measureLengthFromImageResult';

export async function buildJsMeasureLengthFromImageResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsPolyline } = await import('./polyline');
        properties.geometry = buildJsPolyline(dotNetObject.geometry) as any;
    }

    if (hasValue(dotNetObject.length)) {
        properties.length = dotNetObject.length;
    }
    let jsMeasureLengthFromImageResult = new MeasureLengthFromImageResult(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsMeasureLengthFromImageResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsMeasureLengthFromImageResult;
    
    return jsMeasureLengthFromImageResult;
}


export async function buildDotNetMeasureLengthFromImageResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMeasureLengthFromImageResult: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.geometry)) {
        let { buildDotNetPolyline } = await import('./polyline');
        dotNetMeasureLengthFromImageResult.geometry = buildDotNetPolyline(jsObject.geometry);
    }
    if (hasValue(jsObject.length)) {
        dotNetMeasureLengthFromImageResult.length = jsObject.length;
    }

    return dotNetMeasureLengthFromImageResult;
}

