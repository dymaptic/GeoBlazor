// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import widgetsSearch from '@arcgis/core/widgets/Search';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SearchWidgetGenerated implements IPropertyWrapper {
    public widget: widgetsSearch;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: widgetsSearch) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.goToOverride)) {
            let { buildJsGoToOverride } = await import('./goToOverride');
            this.widget.goToOverride = buildJsGoToOverride(dotNetObject.goToOverride, this.viewId) as any;
        }
        if (hasValue(dotNetObject.popupTemplate)) {
            let { buildJsPopupTemplate } = await import('./popupTemplate');
            this.widget.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.portal)) {
            let { buildJsPortal } = await import('./portal');
            this.widget.portal = await buildJsPortal(dotNetObject.portal, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.sources)) {
            let { buildJsSearchSource } = await import('./searchSource');
            this.widget.sources = await Promise.all(dotNetObject.sources.map(async i => await buildJsSearchSource(i, this.viewId))) as any;
        }
        if (hasValue(dotNetObject.viewModel)) {
            let { buildJsSearchViewModel } = await import('./searchViewModel');
            this.widget.viewModel = await buildJsSearchViewModel(dotNetObject.viewModel, this.layerId, this.viewId) as any;
        }

        if (hasValue(dotNetObject.activeMenu)) {
            this.widget.activeMenu = dotNetObject.activeMenu;
        }
        if (hasValue(dotNetObject.activeSourceIndex)) {
            this.widget.activeSourceIndex = dotNetObject.activeSourceIndex;
        }
        if (hasValue(dotNetObject.allPlaceholder)) {
            this.widget.allPlaceholder = dotNetObject.allPlaceholder;
        }
        if (hasValue(dotNetObject.autoSelect)) {
            this.widget.autoSelect = dotNetObject.autoSelect;
        }
        if (hasValue(dotNetObject.container)) {
            this.widget.container = dotNetObject.container;
        }
        if (hasValue(dotNetObject.disabled)) {
            this.widget.disabled = dotNetObject.disabled;
        }
        if (hasValue(dotNetObject.icon)) {
            this.widget.icon = dotNetObject.icon;
        }
        if (hasValue(dotNetObject.includeDefaultSources)) {
            this.widget.includeDefaultSources = dotNetObject.includeDefaultSources;
        }
        if (hasValue(dotNetObject.label)) {
            this.widget.label = dotNetObject.label;
        }
        if (hasValue(dotNetObject.locationEnabled)) {
            this.widget.locationEnabled = dotNetObject.locationEnabled;
        }
        if (hasValue(dotNetObject.maxResults)) {
            this.widget.maxResults = dotNetObject.maxResults;
        }
        if (hasValue(dotNetObject.maxSuggestions)) {
            this.widget.maxSuggestions = dotNetObject.maxSuggestions;
        }
        if (hasValue(dotNetObject.minSuggestCharacters)) {
            this.widget.minSuggestCharacters = dotNetObject.minSuggestCharacters;
        }
        if (hasValue(dotNetObject.popupEnabled)) {
            this.widget.popupEnabled = dotNetObject.popupEnabled;
        }
        if (hasValue(dotNetObject.resultGraphicEnabled)) {
            this.widget.resultGraphicEnabled = dotNetObject.resultGraphicEnabled;
        }
        if (hasValue(dotNetObject.searchAllEnabled)) {
            this.widget.searchAllEnabled = dotNetObject.searchAllEnabled;
        }
        if (hasValue(dotNetObject.searchTerm)) {
            this.widget.searchTerm = dotNetObject.searchTerm;
        }
        if (hasValue(dotNetObject.suggestionsEnabled)) {
            this.widget.suggestionsEnabled = dotNetObject.suggestionsEnabled;
        }
        if (hasValue(dotNetObject.widgetId)) {
            this.widget.id = dotNetObject.widgetId;
        }
    }
    
    async blur(): Promise<void> {
        this.widget.blur();
    }

    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async clear(): Promise<void> {
        this.widget.clear();
    }

    async focus(): Promise<void> {
        this.widget.focus();
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async own(handleOrHandles: any): Promise<void> {
        let { buildJsWatchHandle } = await import('./watchHandle');
        let jsHandleOrHandles = await buildJsWatchHandle(handleOrHandles, this.layerId, this.viewId) as any;
        this.widget.own(jsHandleOrHandles);
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async render(): Promise<any> {
        return this.widget.render();
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async when(callback: any,
        errback: any): Promise<any> {
        return await this.widget.when(callback,
            errback);
    }

    // region properties
    
    async getGoToOverride(): Promise<any> {
        if (!hasValue(this.widget.goToOverride)) {
            return null;
        }
        
        let { buildDotNetGoToOverride } = await import('./goToOverride');
        return await buildDotNetGoToOverride(this.widget.goToOverride);
    }
    
    async setGoToOverride(value: any): Promise<void> {
        let { buildJsGoToOverride } = await import('./goToOverride');
        this.widget.goToOverride =  buildJsGoToOverride(value, this.viewId);
    }
    
    async getPopupTemplate(): Promise<any> {
        if (!hasValue(this.widget.popupTemplate)) {
            return null;
        }
        
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        return await buildDotNetPopupTemplate(this.widget.popupTemplate);
    }
    
    async setPopupTemplate(value: any): Promise<void> {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        this.widget.popupTemplate =  buildJsPopupTemplate(value, this.layerId, this.viewId);
    }
    
    async getPortal(): Promise<any> {
        if (!hasValue(this.widget.portal)) {
            return null;
        }
        
        let { buildDotNetPortal } = await import('./portal');
        return await buildDotNetPortal(this.widget.portal);
    }
    
    async setPortal(value: any): Promise<void> {
        let { buildJsPortal } = await import('./portal');
        this.widget.portal = await  buildJsPortal(value, this.layerId, this.viewId);
    }
    
    async getSources(): Promise<any> {
        if (!hasValue(this.widget.sources)) {
            return null;
        }
        
        let { buildDotNetSearchSource } = await import('./searchSource');
        return await Promise.all(this.widget.sources.map(async i => await buildDotNetSearchSource(i)));
    }
    
    async setSources(value: any): Promise<void> {
        let { buildJsSearchSource } = await import('./searchSource');
        this.widget.sources = await Promise.all(value.map(async i => await buildJsSearchSource(i, this.viewId))) as any;
    }
    
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetSearchViewModel } = await import('./searchViewModel');
        return await buildDotNetSearchViewModel(this.widget.viewModel, this.layerId, this.viewId);
    }
    
    async setViewModel(value: any): Promise<void> {
        let { buildJsSearchViewModel } = await import('./searchViewModel');
        this.widget.viewModel = await  buildJsSearchViewModel(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsSearchWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.goToOverride)) {
        let { buildJsGoToOverride } = await import('./goToOverride');
        properties.goToOverride = buildJsGoToOverride(dotNetObject.goToOverride, viewId) as any;
    }
    if (hasValue(dotNetObject.popupTemplate)) {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        properties.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.portal)) {
        let { buildJsPortal } = await import('./portal');
        properties.portal = await buildJsPortal(dotNetObject.portal, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.sources)) {
        let { buildJsSearchSource } = await import('./searchSource');
        properties.sources = await Promise.all(dotNetObject.sources.map(async i => await buildJsSearchSource(i, viewId))) as any;
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsSearchViewModel } = await import('./searchViewModel');
        properties.viewModel = await buildJsSearchViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.activeMenu)) {
        properties.activeMenu = dotNetObject.activeMenu;
    }
    if (hasValue(dotNetObject.activeSourceIndex)) {
        properties.activeSourceIndex = dotNetObject.activeSourceIndex;
    }
    if (hasValue(dotNetObject.allPlaceholder)) {
        properties.allPlaceholder = dotNetObject.allPlaceholder;
    }
    if (hasValue(dotNetObject.autoSelect)) {
        properties.autoSelect = dotNetObject.autoSelect;
    }
    if (hasValue(dotNetObject.container)) {
        properties.container = dotNetObject.container;
    }
    if (hasValue(dotNetObject.disabled)) {
        properties.disabled = dotNetObject.disabled;
    }
    if (hasValue(dotNetObject.icon)) {
        properties.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.includeDefaultSources)) {
        properties.includeDefaultSources = dotNetObject.includeDefaultSources;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.locationEnabled)) {
        properties.locationEnabled = dotNetObject.locationEnabled;
    }
    if (hasValue(dotNetObject.maxResults)) {
        properties.maxResults = dotNetObject.maxResults;
    }
    if (hasValue(dotNetObject.maxSuggestions)) {
        properties.maxSuggestions = dotNetObject.maxSuggestions;
    }
    if (hasValue(dotNetObject.minSuggestCharacters)) {
        properties.minSuggestCharacters = dotNetObject.minSuggestCharacters;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        properties.popupEnabled = dotNetObject.popupEnabled;
    }
    if (hasValue(dotNetObject.resultGraphicEnabled)) {
        properties.resultGraphicEnabled = dotNetObject.resultGraphicEnabled;
    }
    if (hasValue(dotNetObject.searchAllEnabled)) {
        properties.searchAllEnabled = dotNetObject.searchAllEnabled;
    }
    if (hasValue(dotNetObject.searchTerm)) {
        properties.searchTerm = dotNetObject.searchTerm;
    }
    if (hasValue(dotNetObject.suggestionsEnabled)) {
        properties.suggestionsEnabled = dotNetObject.suggestionsEnabled;
    }
    if (hasValue(dotNetObject.widgetId)) {
        properties.id = dotNetObject.widgetId;
    }
    let jswidgetsSearch = new widgetsSearch(properties);
    jswidgetsSearch.on('search-blur', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSearchBlur', evt);
    });
    
    jswidgetsSearch.on('search-clear', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSearchClear', evt);
    });
    
    jswidgetsSearch.on('search-complete', async (evt: any) => {
        let { buildDotNetSearchCompleteEvent } = await import('./searchCompleteEvent');
        let dnEvent = await buildDotNetSearchCompleteEvent(evt);
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSearchComplete', dnEvent);
    });
    
    jswidgetsSearch.on('search-focus', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSearchFocus', evt);
    });
    
    jswidgetsSearch.on('search-start', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSearchStart', evt);
    });
    
    jswidgetsSearch.on('select-result', async (evt: any) => {
        let { buildDotNetSearchSelectResultEvent } = await import('./searchSelectResultEvent');
        let dnEvent = await buildDotNetSearchSelectResultEvent(evt);
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSelectResult', dnEvent);
    });
    
    jswidgetsSearch.on('suggest-complete', async (evt: any) => {
        let { buildDotNetSearchSuggestCompleteEvent } = await import('./searchSuggestCompleteEvent');
        let dnEvent = await buildDotNetSearchSuggestCompleteEvent(evt);
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSuggestComplete', dnEvent);
    });
    
    jswidgetsSearch.on('suggest-start', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSuggestStart', evt);
    });
    

    let { default: SearchWidgetWrapper } = await import('./searchWidget');
    let searchWidgetWrapper = new SearchWidgetWrapper(jswidgetsSearch);
    searchWidgetWrapper.geoBlazorId = dotNetObject.id;
    searchWidgetWrapper.viewId = viewId;
    searchWidgetWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(searchWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = searchWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jswidgetsSearch;
    
    let { buildDotNetSearchWidget } = await import('./searchWidget');
    let dnInstantiatedObject = await buildDotNetSearchWidget(jswidgetsSearch, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type SearchWidget detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SearchWidget', e);
    }
    
    return jswidgetsSearch;
}


export async function buildDotNetSearchWidgetGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchWidget: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.activeSource)) {
        let { buildDotNetSearchSource } = await import('./searchSource');
        dotNetSearchWidget.activeSource = await buildDotNetSearchSource(jsObject.activeSource);
    }
    if (hasValue(jsObject.allSources)) {
        let { buildDotNetSearchSource } = await import('./searchSource');
        dotNetSearchWidget.allSources = await Promise.all(jsObject.allSources.map(async i => await buildDotNetSearchSource(i)));
    }
    if (hasValue(jsObject.defaultSources)) {
        let { buildDotNetSearchSource } = await import('./searchSource');
        dotNetSearchWidget.defaultSources = await Promise.all(jsObject.defaultSources.map(async i => await buildDotNetSearchSource(i)));
    }
    if (hasValue(jsObject.goToOverride)) {
        let { buildDotNetGoToOverride } = await import('./goToOverride');
        dotNetSearchWidget.goToOverride = await buildDotNetGoToOverride(jsObject.goToOverride);
    }
    if (hasValue(jsObject.popupTemplate)) {
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        dotNetSearchWidget.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
    }
    if (hasValue(jsObject.portal)) {
        let { buildDotNetPortal } = await import('./portal');
        dotNetSearchWidget.portal = await buildDotNetPortal(jsObject.portal);
    }
    if (hasValue(jsObject.resultGraphic)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetSearchWidget.resultGraphic = buildDotNetGraphic(jsObject.resultGraphic, layerId, viewId);
    }
    if (hasValue(jsObject.selectedResult)) {
        let { buildDotNetSearchResult } = await import('./searchResult');
        dotNetSearchWidget.selectedResult = buildDotNetSearchResult(jsObject.selectedResult);
    }
    if (hasValue(jsObject.sources)) {
        let { buildDotNetSearchSource } = await import('./searchSource');
        dotNetSearchWidget.sources = await Promise.all(jsObject.sources.map(async i => await buildDotNetSearchSource(i)));
    }
    if (hasValue(jsObject.viewModel)) {
        let { buildDotNetSearchViewModel } = await import('./searchViewModel');
        dotNetSearchWidget.viewModel = await buildDotNetSearchViewModel(jsObject.viewModel, layerId, viewId);
    }
    if (hasValue(jsObject.activeMenu)) {
        dotNetSearchWidget.activeMenu = jsObject.activeMenu;
    }
    if (hasValue(jsObject.activeSourceIndex)) {
        dotNetSearchWidget.activeSourceIndex = jsObject.activeSourceIndex;
    }
    if (hasValue(jsObject.allPlaceholder)) {
        dotNetSearchWidget.allPlaceholder = jsObject.allPlaceholder;
    }
    if (hasValue(jsObject.autoSelect)) {
        dotNetSearchWidget.autoSelect = jsObject.autoSelect;
    }
    if (hasValue(jsObject.container)) {
        dotNetSearchWidget.container = jsObject.container;
    }
    if (hasValue(jsObject.disabled)) {
        dotNetSearchWidget.disabled = jsObject.disabled;
    }
    if (hasValue(jsObject.icon)) {
        dotNetSearchWidget.icon = jsObject.icon;
    }
    if (hasValue(jsObject.includeDefaultSources)) {
        dotNetSearchWidget.includeDefaultSources = jsObject.includeDefaultSources;
    }
    if (hasValue(jsObject.label)) {
        dotNetSearchWidget.label = jsObject.label;
    }
    if (hasValue(jsObject.locationEnabled)) {
        dotNetSearchWidget.locationEnabled = jsObject.locationEnabled;
    }
    if (hasValue(jsObject.maxResults)) {
        dotNetSearchWidget.maxResults = jsObject.maxResults;
    }
    if (hasValue(jsObject.maxSuggestions)) {
        dotNetSearchWidget.maxSuggestions = jsObject.maxSuggestions;
    }
    if (hasValue(jsObject.minSuggestCharacters)) {
        dotNetSearchWidget.minSuggestCharacters = jsObject.minSuggestCharacters;
    }
    if (hasValue(jsObject.popupEnabled)) {
        dotNetSearchWidget.popupEnabled = jsObject.popupEnabled;
    }
    if (hasValue(jsObject.resultGraphicEnabled)) {
        dotNetSearchWidget.resultGraphicEnabled = jsObject.resultGraphicEnabled;
    }
    if (hasValue(jsObject.results)) {
        dotNetSearchWidget.results = jsObject.results;
    }
    if (hasValue(jsObject.searchAllEnabled)) {
        dotNetSearchWidget.searchAllEnabled = jsObject.searchAllEnabled;
    }
    if (hasValue(jsObject.searchTerm)) {
        dotNetSearchWidget.searchTerm = jsObject.searchTerm;
    }
    if (hasValue(jsObject.suggestions)) {
        dotNetSearchWidget.suggestions = jsObject.suggestions;
    }
    if (hasValue(jsObject.suggestionsEnabled)) {
        dotNetSearchWidget.suggestionsEnabled = jsObject.suggestionsEnabled;
    }
    if (hasValue(jsObject.type)) {
        dotNetSearchWidget.type = jsObject.type;
    }
    if (hasValue(jsObject.id)) {
        dotNetSearchWidget.widgetId = jsObject.id;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSearchWidget.id = geoBlazorId;
    }

    return dotNetSearchWidget;
}

