// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import widgetsSearch from '@arcgis/core/widgets/Search';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SearchWidgetGenerated implements IPropertyWrapper {
    public widget: widgetsSearch;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: widgetsSearch) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    
    async blur(): Promise<void> {
        this.widget.blur();
    }

    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async clear(): Promise<void> {
        this.widget.clear();
    }

    async focus(): Promise<void> {
        this.widget.focus();
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async own(handleOrHandles: any): Promise<void> {
        this.widget.own(handleOrHandles);
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async render(): Promise<any> {
        return this.widget.render();
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async when(callback: any,
        errback: any): Promise<any> {
        return await this.widget.when(callback,
            errback);
    }

    // region properties
    
    async getPopupTemplate(): Promise<any> {
        if (!hasValue(this.widget.popupTemplate)) {
            return null;
        }
        
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        return await buildDotNetPopupTemplate(this.widget.popupTemplate);
    }
    async setPopupTemplate(value: any): Promise<void> {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        this.widget.popupTemplate = await  buildJsPopupTemplate(value, this.layerId, this.viewId);
    }
    async getPortal(): Promise<any> {
        if (!hasValue(this.widget.portal)) {
            return null;
        }
        
        let { buildDotNetPortal } = await import('./portal');
        return await buildDotNetPortal(this.widget.portal);
    }
    async setPortal(value: any): Promise<void> {
        let { buildJsPortal } = await import('./portal');
        this.widget.portal = await  buildJsPortal(value, this.layerId, this.viewId);
    }
    async getSources(): Promise<any> {
        if (!hasValue(this.widget.sources)) {
            return null;
        }
        
        let { buildDotNetSearchSource } = await import('./searchSource');
        return this.widget.sources!.map(i => buildDotNetSearchSource(i));
    }
    
    async setSources(value: any): Promise<void> {
        let { buildJsSearchSource } = await import('./searchSource');
        this.widget.sources = value.map(i => buildJsSearchSource(i, this.viewId)) as any;
    }
    
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}

export async function buildJsSearchWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jswidgetsSearch = new widgetsSearch();
    if (hasValue(dotNetObject.popupTemplate)) {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        jswidgetsSearch.popupTemplate = await buildJsPopupTemplate(dotNetObject.popupTemplate, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.portal)) {
        let { buildJsPortal } = await import('./portal');
        jswidgetsSearch.portal = await buildJsPortal(dotNetObject.portal, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.sources)) {
        let { buildJsSearchSource } = await import('./jsBuilder');
        jswidgetsSearch.sources = await Promise.all(dotNetObject.sources.map(async i => await buildJsSearchSource(i, viewId))) as any;
    }

    if (hasValue(dotNetObject.activeMenu)) {
        jswidgetsSearch.activeMenu = dotNetObject.activeMenu;
    }
    if (hasValue(dotNetObject.activeSourceIndex)) {
        jswidgetsSearch.activeSourceIndex = dotNetObject.activeSourceIndex;
    }
    if (hasValue(dotNetObject.allPlaceholder)) {
        jswidgetsSearch.allPlaceholder = dotNetObject.allPlaceholder;
    }
    if (hasValue(dotNetObject.autoSelect)) {
        jswidgetsSearch.autoSelect = dotNetObject.autoSelect;
    }
    if (hasValue(dotNetObject.container)) {
        jswidgetsSearch.container = dotNetObject.container;
    }
    if (hasValue(dotNetObject.disabled)) {
        jswidgetsSearch.disabled = dotNetObject.disabled;
    }
    if (hasValue(dotNetObject.goToOverride)) {
        jswidgetsSearch.goToOverride = dotNetObject.goToOverride;
    }
    if (hasValue(dotNetObject.icon)) {
        jswidgetsSearch.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.includeDefaultSources)) {
        jswidgetsSearch.includeDefaultSources = dotNetObject.includeDefaultSources;
    }
    if (hasValue(dotNetObject.label)) {
        jswidgetsSearch.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.locationEnabled)) {
        jswidgetsSearch.locationEnabled = dotNetObject.locationEnabled;
    }
    if (hasValue(dotNetObject.maxResults)) {
        jswidgetsSearch.maxResults = dotNetObject.maxResults;
    }
    if (hasValue(dotNetObject.maxSuggestions)) {
        jswidgetsSearch.maxSuggestions = dotNetObject.maxSuggestions;
    }
    if (hasValue(dotNetObject.minSuggestCharacters)) {
        jswidgetsSearch.minSuggestCharacters = dotNetObject.minSuggestCharacters;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        jswidgetsSearch.popupEnabled = dotNetObject.popupEnabled;
    }
    if (hasValue(dotNetObject.resultGraphicEnabled)) {
        jswidgetsSearch.resultGraphicEnabled = dotNetObject.resultGraphicEnabled;
    }
    if (hasValue(dotNetObject.searchAllEnabled)) {
        jswidgetsSearch.searchAllEnabled = dotNetObject.searchAllEnabled;
    }
    if (hasValue(dotNetObject.searchTerm)) {
        jswidgetsSearch.searchTerm = dotNetObject.searchTerm;
    }
    if (hasValue(dotNetObject.suggestionsEnabled)) {
        jswidgetsSearch.suggestionsEnabled = dotNetObject.suggestionsEnabled;
    }
    if (hasValue(dotNetObject.view)) {
        jswidgetsSearch.view = dotNetObject.view;
    }
    if (hasValue(dotNetObject.viewModel)) {
        jswidgetsSearch.viewModel = dotNetObject.viewModel;
    }
    if (hasValue(dotNetObject.widgetId)) {
        jswidgetsSearch.id = dotNetObject.widgetId;
    }
    jswidgetsSearch.on('search-blur', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSearchBlur', evt);
    });
    
    jswidgetsSearch.on('search-clear', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSearchClear', evt);
    });
    
    jswidgetsSearch.on('search-complete', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSearchComplete', evt);
    });
    
    jswidgetsSearch.on('search-focus', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSearchFocus', evt);
    });
    
    jswidgetsSearch.on('search-start', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSearchStart', evt);
    });
    
    jswidgetsSearch.on('select-result', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSelectResult', evt);
    });
    
    jswidgetsSearch.on('suggest-complete', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSuggestComplete', evt);
    });
    
    jswidgetsSearch.on('suggest-start', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSuggestStart', evt);
    });
    
    let { default: SearchWidgetWrapper } = await import('./searchWidget');
    let searchWidgetWrapper = new SearchWidgetWrapper(jswidgetsSearch);
    searchWidgetWrapper.geoBlazorId = dotNetObject.id;
    searchWidgetWrapper.viewId = viewId;
    searchWidgetWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(searchWidgetWrapper);
    jsObjectRefs[dotNetObject.id] = searchWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jswidgetsSearch;
    
    let { buildDotNetSearchWidget } = await import('./searchWidget');
    let dnInstantiatedObject = await buildDotNetSearchWidget(jswidgetsSearch, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SearchWidget', e);
    }
    
    return jswidgetsSearch;
}

export async function buildDotNetSearchWidgetGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchWidget: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.popupTemplate)) {
            let { buildDotNetPopupTemplate } = await import('./popupTemplate');
            dotNetSearchWidget.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
        }
        if (hasValue(jsObject.portal)) {
            let { buildDotNetPortal } = await import('./portal');
            dotNetSearchWidget.portal = await buildDotNetPortal(jsObject.portal);
        }
        if (hasValue(jsObject.resultGraphic)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetSearchWidget.resultGraphic = await buildDotNetGraphic(jsObject.resultGraphic, layerId, viewId);
        }
        if (hasValue(jsObject.sources)) {
            let { buildDotNetSearchSource } = await import('./searchSource');
            dotNetSearchWidget.sources = jsObject.sources.map(i => buildDotNetSearchSource(i));
        }
        if (hasValue(jsObject.activeMenu)) {
            dotNetSearchWidget.activeMenu = jsObject.activeMenu;
        }
        if (hasValue(jsObject.activeSource)) {
            dotNetSearchWidget.activeSource = jsObject.activeSource;
        }
        if (hasValue(jsObject.activeSourceIndex)) {
            dotNetSearchWidget.activeSourceIndex = jsObject.activeSourceIndex;
        }
        if (hasValue(jsObject.allPlaceholder)) {
            dotNetSearchWidget.allPlaceholder = jsObject.allPlaceholder;
        }
        if (hasValue(jsObject.allSources)) {
            dotNetSearchWidget.allSources = jsObject.allSources;
        }
        if (hasValue(jsObject.autoSelect)) {
            dotNetSearchWidget.autoSelect = jsObject.autoSelect;
        }
        if (hasValue(jsObject.container)) {
            dotNetSearchWidget.container = jsObject.container;
        }
        if (hasValue(jsObject.defaultSources)) {
            dotNetSearchWidget.defaultSources = jsObject.defaultSources;
        }
        if (hasValue(jsObject.disabled)) {
            dotNetSearchWidget.disabled = jsObject.disabled;
        }
        if (hasValue(jsObject.goToOverride)) {
            dotNetSearchWidget.goToOverride = jsObject.goToOverride;
        }
        if (hasValue(jsObject.icon)) {
            dotNetSearchWidget.icon = jsObject.icon;
        }
        if (hasValue(jsObject.includeDefaultSources)) {
            dotNetSearchWidget.includeDefaultSources = jsObject.includeDefaultSources;
        }
        if (hasValue(jsObject.label)) {
            dotNetSearchWidget.label = jsObject.label;
        }
        if (hasValue(jsObject.locationEnabled)) {
            dotNetSearchWidget.locationEnabled = jsObject.locationEnabled;
        }
        if (hasValue(jsObject.maxResults)) {
            dotNetSearchWidget.maxResults = jsObject.maxResults;
        }
        if (hasValue(jsObject.maxSuggestions)) {
            dotNetSearchWidget.maxSuggestions = jsObject.maxSuggestions;
        }
        if (hasValue(jsObject.minSuggestCharacters)) {
            dotNetSearchWidget.minSuggestCharacters = jsObject.minSuggestCharacters;
        }
        if (hasValue(jsObject.popupEnabled)) {
            dotNetSearchWidget.popupEnabled = jsObject.popupEnabled;
        }
        if (hasValue(jsObject.resultGraphicEnabled)) {
            dotNetSearchWidget.resultGraphicEnabled = jsObject.resultGraphicEnabled;
        }
        if (hasValue(jsObject.results)) {
            dotNetSearchWidget.results = jsObject.results;
        }
        if (hasValue(jsObject.searchAllEnabled)) {
            dotNetSearchWidget.searchAllEnabled = jsObject.searchAllEnabled;
        }
        if (hasValue(jsObject.searchTerm)) {
            dotNetSearchWidget.searchTerm = jsObject.searchTerm;
        }
        if (hasValue(jsObject.selectedResult)) {
            dotNetSearchWidget.selectedResult = jsObject.selectedResult;
        }
        if (hasValue(jsObject.suggestions)) {
            dotNetSearchWidget.suggestions = jsObject.suggestions;
        }
        if (hasValue(jsObject.suggestionsEnabled)) {
            dotNetSearchWidget.suggestionsEnabled = jsObject.suggestionsEnabled;
        }
        if (hasValue(jsObject.type)) {
            dotNetSearchWidget.type = jsObject.type;
        }
        if (hasValue(jsObject.view)) {
            dotNetSearchWidget.view = jsObject.view;
        }
        if (hasValue(jsObject.viewModel)) {
            dotNetSearchWidget.viewModel = jsObject.viewModel;
        }
        if (hasValue(jsObject.id)) {
            dotNetSearchWidget.widgetId = jsObject.id;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSearchWidget.id = k;
                break;
            }
        }
    }

    return dotNetSearchWidget;
}

