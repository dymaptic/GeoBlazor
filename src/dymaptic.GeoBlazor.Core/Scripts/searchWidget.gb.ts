// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import widgetsSearch from '@arcgis/core/widgets/Search';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences, buildJsStreamReference, generateSerializableJson } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SearchWidgetGenerated implements IPropertyWrapper {
    public widget: widgetsSearch;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(widget: widgetsSearch) {
        this.widget = widget;
    }
    
    // region methods
   
    unwrap() {
        return this.widget;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.popupTemplate)) {
            let { buildJsPopupTemplate } = await import('./popupTemplate');
            this.widget.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.portal)) {
            let { buildJsPortal } = await import('./portal');
            this.widget.portal = await buildJsPortal(dotNetObject.portal, this.layerId, this.viewId) as any;
        }
        if (hasValue(dotNetObject.sources) && dotNetObject.sources.length > 0) {
            this.widget.sources = dotNetObject.searchSource;
        }

        if (hasValue(dotNetObject.activeMenu)) {
            this.widget.activeMenu = dotNetObject.activeMenu;
        }
        if (hasValue(dotNetObject.activeSourceIndex)) {
            this.widget.activeSourceIndex = dotNetObject.activeSourceIndex;
        }
        if (hasValue(dotNetObject.allPlaceholder)) {
            this.widget.allPlaceholder = dotNetObject.allPlaceholder;
        }
        if (hasValue(dotNetObject.autoSelect)) {
            this.widget.autoSelect = dotNetObject.autoSelect;
        }
        if (hasValue(dotNetObject.disabled)) {
            this.widget.disabled = dotNetObject.disabled;
        }
        if (hasValue(dotNetObject.icon)) {
            this.widget.icon = dotNetObject.icon;
        }
        if (hasValue(dotNetObject.includeDefaultSources)) {
            this.widget.includeDefaultSources = dotNetObject.includeDefaultSources;
        }
        if (hasValue(dotNetObject.label)) {
            this.widget.label = dotNetObject.label;
        }
        if (hasValue(dotNetObject.locationEnabled)) {
            this.widget.locationEnabled = dotNetObject.locationEnabled;
        }
        if (hasValue(dotNetObject.maxResults)) {
            this.widget.maxResults = dotNetObject.maxResults;
        }
        if (hasValue(dotNetObject.maxSuggestions)) {
            this.widget.maxSuggestions = dotNetObject.maxSuggestions;
        }
        if (hasValue(dotNetObject.minSuggestCharacters)) {
            this.widget.minSuggestCharacters = dotNetObject.minSuggestCharacters;
        }
        if (hasValue(dotNetObject.popupEnabled)) {
            this.widget.popupEnabled = dotNetObject.popupEnabled;
        }
        if (hasValue(dotNetObject.resultGraphicEnabled)) {
            this.widget.resultGraphicEnabled = dotNetObject.resultGraphicEnabled;
        }
        if (hasValue(dotNetObject.searchAllEnabled)) {
            this.widget.searchAllEnabled = dotNetObject.searchAllEnabled;
        }
        if (hasValue(dotNetObject.searchTerm)) {
            this.widget.searchTerm = dotNetObject.searchTerm;
        }
        if (hasValue(dotNetObject.suggestionsEnabled)) {
            this.widget.suggestionsEnabled = dotNetObject.suggestionsEnabled;
        }
        if (hasValue(dotNetObject.visible)) {
            this.widget.visible = dotNetObject.visible;
        }
        if (hasValue(dotNetObject.widgetId)) {
            this.widget.id = dotNetObject.widgetId;
        }
    }
    
    async blur(): Promise<void> {
        this.widget.blur();
    }

    async classes(): Promise<any> {
        return this.widget.classes();
    }

    async clear(): Promise<void> {
        this.widget.clear();
    }

    async focus(): Promise<void> {
        this.widget.focus();
    }

    async isFulfilled(): Promise<any> {
        return this.widget.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.widget.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.widget.isResolved();
    }

    async postInitialize(): Promise<void> {
        this.widget.postInitialize();
    }

    async render(): Promise<any> {
        let result = this.widget.render();
        
        return generateSerializableJson(result);
    }

    async renderNow(): Promise<void> {
        this.widget.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.widget.scheduleRender();
    }

    async when(callback: any,
        errback: any): Promise<any> {
        let result = await this.widget.when(callback,
            errback);
        
        return generateSerializableJson(result);
    }

    // region properties
    
    getAllPlaceholder(): any {
        if (!hasValue(this.widget.allPlaceholder)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.allPlaceholder);
    }
    
    setAllPlaceholder(value: any): void {
        this.widget.allPlaceholder = JSON.parse(value);
    }
    
    getIcon(): any {
        if (!hasValue(this.widget.icon)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.icon);
    }
    
    setIcon(value: any): void {
        this.widget.icon = JSON.parse(value);
    }
    
    getLabel(): any {
        if (!hasValue(this.widget.label)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.label);
    }
    
    setLabel(value: any): void {
        this.widget.label = JSON.parse(value);
    }
    
    async getPopupTemplate(): Promise<any> {
        if (!hasValue(this.widget.popupTemplate)) {
            return null;
        }
        
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        return await buildDotNetPopupTemplate(this.widget.popupTemplate);
    }
    
    async setPopupTemplate(value: any): Promise<void> {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        this.widget.popupTemplate =  buildJsPopupTemplate(value, this.layerId, this.viewId);
    }
    
    async getPortal(): Promise<any> {
        if (!hasValue(this.widget.portal)) {
            return null;
        }
        
        let { buildDotNetPortal } = await import('./portal');
        return await buildDotNetPortal(this.widget.portal);
    }
    
    async setPortal(value: any): Promise<void> {
        let { buildJsPortal } = await import('./portal');
        this.widget.portal = await  buildJsPortal(value, this.layerId, this.viewId);
    }
    
    async getViewModel(): Promise<any> {
        if (!hasValue(this.widget.viewModel)) {
            return null;
        }
        
        let { buildDotNetSearchViewModel } = await import('./searchViewModel');
        return await buildDotNetSearchViewModel(this.widget.viewModel, this.layerId, this.viewId);
    }
    
    async setViewModel(value: any): Promise<void> {
        let { buildJsSearchViewModel } = await import('./searchViewModel');
        this.widget.viewModel = await  buildJsSearchViewModel(value, this.layerId, this.viewId);
    }
    
    getWidgetId(): any {
        if (!hasValue(this.widget.id)) {
            return null;
        }
        
        return generateSerializableJson(this.widget.id);
    }
    
    setWidgetId(value: any): void {
        this.widget.id = JSON.parse(value);
    }
    
    getProperty(prop: string): any {
        return this.widget[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.widget[prop] = value;
    }
}


export async function buildJsSearchWidgetGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.hasGoToOverride) && dotNetObject.hasGoToOverride) {
        properties.goToOverride = async (view,
        goToParameters) => {

            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsGoToOverride', view,
            goToParameters);
        };
    }
    if (hasValue(dotNetObject.popupTemplate)) {
        let { buildJsPopupTemplate } = await import('./popupTemplate');
        properties.popupTemplate = buildJsPopupTemplate(dotNetObject.popupTemplate, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.portal)) {
        let { buildJsPortal } = await import('./portal');
        properties.portal = await buildJsPortal(dotNetObject.portal, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.sources) && dotNetObject.sources.length > 0) {
        properties.sources = dotNetObject.sources;
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsSearchViewModel } = await import('./searchViewModel');
        properties.viewModel = await buildJsSearchViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.activeMenu)) {
        properties.activeMenu = dotNetObject.activeMenu;
    }
    if (hasValue(dotNetObject.activeSourceIndex)) {
        properties.activeSourceIndex = dotNetObject.activeSourceIndex;
    }
    if (hasValue(dotNetObject.allPlaceholder)) {
        properties.allPlaceholder = dotNetObject.allPlaceholder;
    }
    if (hasValue(dotNetObject.autoSelect)) {
        properties.autoSelect = dotNetObject.autoSelect;
    }
    if (hasValue(dotNetObject.disabled)) {
        properties.disabled = dotNetObject.disabled;
    }
    if (hasValue(dotNetObject.icon)) {
        properties.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.includeDefaultSources)) {
        properties.includeDefaultSources = dotNetObject.includeDefaultSources;
    }
    if (hasValue(dotNetObject.label)) {
        properties.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.locationEnabled)) {
        properties.locationEnabled = dotNetObject.locationEnabled;
    }
    if (hasValue(dotNetObject.maxResults)) {
        properties.maxResults = dotNetObject.maxResults;
    }
    if (hasValue(dotNetObject.maxSuggestions)) {
        properties.maxSuggestions = dotNetObject.maxSuggestions;
    }
    if (hasValue(dotNetObject.minSuggestCharacters)) {
        properties.minSuggestCharacters = dotNetObject.minSuggestCharacters;
    }
    if (hasValue(dotNetObject.popupEnabled)) {
        properties.popupEnabled = dotNetObject.popupEnabled;
    }
    if (hasValue(dotNetObject.resultGraphicEnabled)) {
        properties.resultGraphicEnabled = dotNetObject.resultGraphicEnabled;
    }
    if (hasValue(dotNetObject.searchAllEnabled)) {
        properties.searchAllEnabled = dotNetObject.searchAllEnabled;
    }
    if (hasValue(dotNetObject.searchTerm)) {
        properties.searchTerm = dotNetObject.searchTerm;
    }
    if (hasValue(dotNetObject.suggestionsEnabled)) {
        properties.suggestionsEnabled = dotNetObject.suggestionsEnabled;
    }
    if (hasValue(dotNetObject.visible)) {
        properties.visible = dotNetObject.visible;
    }
    if (hasValue(dotNetObject.widgetId)) {
        properties.id = dotNetObject.widgetId;
    }
    let jswidgetsSearch = new widgetsSearch(properties);
    if (hasValue(dotNetObject.hasSearchBlurListener) && dotNetObject.hasSearchBlurListener) {
        jswidgetsSearch.on('search-blur', async (evt: any) => {
            let streamRef = buildJsStreamReference(evt ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSearchBlur', streamRef);
        });
    }
    
    if (hasValue(dotNetObject.hasSearchClearListener) && dotNetObject.hasSearchClearListener) {
        jswidgetsSearch.on('search-clear', async (evt: any) => {
            let streamRef = buildJsStreamReference(evt ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSearchClear', streamRef);
        });
    }
    
    if (hasValue(dotNetObject.hasSearchFocusListener) && dotNetObject.hasSearchFocusListener) {
        jswidgetsSearch.on('search-focus', async (evt: any) => {
            let streamRef = buildJsStreamReference(evt ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSearchFocus', streamRef);
        });
    }
    
    if (hasValue(dotNetObject.hasSearchStartListener) && dotNetObject.hasSearchStartListener) {
        jswidgetsSearch.on('search-start', async (evt: any) => {
            let streamRef = buildJsStreamReference(evt ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSearchStart', streamRef);
        });
    }
    
    if (hasValue(dotNetObject.hasSelectResultListener) && dotNetObject.hasSelectResultListener) {
        jswidgetsSearch.on('select-result', async (evt: any) => {
            let streamRef = buildJsStreamReference(evt ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSelectResult', streamRef);
        });
    }
    
    if (hasValue(dotNetObject.hasSuggestCompleteListener) && dotNetObject.hasSuggestCompleteListener) {
        jswidgetsSearch.on('suggest-complete', async (evt: any) => {
            let streamRef = buildJsStreamReference(evt ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSuggestComplete', streamRef);
        });
    }
    
    if (hasValue(dotNetObject.hasSuggestStartListener) && dotNetObject.hasSuggestStartListener) {
        jswidgetsSearch.on('suggest-start', async (evt: any) => {
            let streamRef = buildJsStreamReference(evt ?? {});
            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsSuggestStart', streamRef);
        });
    }
    

    let { default: SearchWidgetWrapper } = await import('./searchWidget');
    let searchWidgetWrapper = new SearchWidgetWrapper(jswidgetsSearch);
    searchWidgetWrapper.geoBlazorId = dotNetObject.id;
    searchWidgetWrapper.viewId = viewId;
    searchWidgetWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = searchWidgetWrapper;
    arcGisObjectRefs[dotNetObject.id] = jswidgetsSearch;
    
    try {
        let jsObjectRef = DotNet.createJSObjectReference(searchWidgetWrapper);
        let { buildDotNetSearchWidget } = await import('./searchWidget');
        let dnInstantiatedObject = await buildDotNetSearchWidget(jswidgetsSearch, layerId, viewId);

        let dnStream = buildJsStreamReference(dnInstantiatedObject);
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, dnStream);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SearchWidget', e);
    }
    
    return jswidgetsSearch;
}


export async function buildDotNetSearchWidgetGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchWidget: any = {};
    
    if (hasValue(jsObject.popupTemplate)) {
        let { buildDotNetPopupTemplate } = await import('./popupTemplate');
        dotNetSearchWidget.popupTemplate = await buildDotNetPopupTemplate(jsObject.popupTemplate);
    }
    
    if (hasValue(jsObject.portal)) {
        let { buildDotNetPortal } = await import('./portal');
        dotNetSearchWidget.portal = await buildDotNetPortal(jsObject.portal);
    }
    
    if (hasValue(jsObject.resultGraphic)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetSearchWidget.resultGraphic = buildDotNetGraphic(jsObject.resultGraphic, layerId, viewId);
    }
    
    if (hasValue(jsObject.viewModel)) {
        let { buildDotNetSearchViewModel } = await import('./searchViewModel');
        dotNetSearchWidget.viewModel = await buildDotNetSearchViewModel(jsObject.viewModel, layerId, viewId);
    }
    
    if (hasValue(jsObject.activeMenu)) {
        dotNetSearchWidget.activeMenu = removeCircularReferences(jsObject.activeMenu);
    }
    
    if (hasValue(jsObject.activeSource)) {
        dotNetSearchWidget.activeSource = removeCircularReferences(jsObject.activeSource);
    }
    
    if (hasValue(jsObject.activeSourceIndex)) {
        dotNetSearchWidget.activeSourceIndex = jsObject.activeSourceIndex;
    }
    
    if (hasValue(jsObject.allPlaceholder)) {
        dotNetSearchWidget.allPlaceholder = jsObject.allPlaceholder;
    }
    
    if (hasValue(jsObject.allSources)) {
        dotNetSearchWidget.allSources = removeCircularReferences(jsObject.allSources);
    }
    
    if (hasValue(jsObject.autoSelect)) {
        dotNetSearchWidget.autoSelect = jsObject.autoSelect;
    }
    
    if (hasValue(jsObject.defaultSources)) {
        dotNetSearchWidget.defaultSources = removeCircularReferences(jsObject.defaultSources);
    }
    
    if (hasValue(jsObject.disabled)) {
        dotNetSearchWidget.disabled = jsObject.disabled;
    }
    
    if (hasValue(jsObject.icon)) {
        dotNetSearchWidget.icon = jsObject.icon;
    }
    
    if (hasValue(jsObject.includeDefaultSources)) {
        dotNetSearchWidget.includeDefaultSources = jsObject.includeDefaultSources;
    }
    
    if (hasValue(jsObject.label)) {
        dotNetSearchWidget.label = jsObject.label;
    }
    
    if (hasValue(jsObject.locationEnabled)) {
        dotNetSearchWidget.locationEnabled = jsObject.locationEnabled;
    }
    
    if (hasValue(jsObject.maxResults)) {
        dotNetSearchWidget.maxResults = jsObject.maxResults;
    }
    
    if (hasValue(jsObject.maxSuggestions)) {
        dotNetSearchWidget.maxSuggestions = jsObject.maxSuggestions;
    }
    
    if (hasValue(jsObject.minSuggestCharacters)) {
        dotNetSearchWidget.minSuggestCharacters = jsObject.minSuggestCharacters;
    }
    
    if (hasValue(jsObject.popupEnabled)) {
        dotNetSearchWidget.popupEnabled = jsObject.popupEnabled;
    }
    
    if (hasValue(jsObject.resultGraphicEnabled)) {
        dotNetSearchWidget.resultGraphicEnabled = jsObject.resultGraphicEnabled;
    }
    
    if (hasValue(jsObject.results)) {
        dotNetSearchWidget.results = jsObject.results;
    }
    
    if (hasValue(jsObject.searchAllEnabled)) {
        dotNetSearchWidget.searchAllEnabled = jsObject.searchAllEnabled;
    }
    
    if (hasValue(jsObject.searchTerm)) {
        dotNetSearchWidget.searchTerm = jsObject.searchTerm;
    }
    
    if (hasValue(jsObject.selectedResult)) {
        dotNetSearchWidget.selectedResult = removeCircularReferences(jsObject.selectedResult);
    }
    
    if (hasValue(jsObject.sources)) {
        dotNetSearchWidget.sources = removeCircularReferences(jsObject.sources);
    }
    
    if (hasValue(jsObject.suggestions)) {
        dotNetSearchWidget.suggestions = removeCircularReferences(jsObject.suggestions);
    }
    
    if (hasValue(jsObject.suggestionsEnabled)) {
        dotNetSearchWidget.suggestionsEnabled = jsObject.suggestionsEnabled;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetSearchWidget.type = removeCircularReferences(jsObject.type);
    }
    
    if (hasValue(jsObject.visible)) {
        dotNetSearchWidget.visible = jsObject.visible;
    }
    
    if (hasValue(jsObject.id)) {
        dotNetSearchWidget.widgetId = jsObject.id;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSearchWidget.id = geoBlazorId;
    }

    return dotNetSearchWidget;
}

