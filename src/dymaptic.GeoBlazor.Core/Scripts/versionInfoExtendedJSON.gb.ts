// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetVersionInfoExtendedJSON } from './versionInfoExtendedJSON';

export async function buildJsVersionInfoExtendedJSONGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsVersionInfoExtendedJSON: any = {};
    if (hasValue(dotNetObject.versionIdentifier)) {
        let { buildJsVersionInfoExtendedJSONVersionIdentifier } = await import('./versionInfoExtendedJSONVersionIdentifier');
        jsVersionInfoExtendedJSON.versionIdentifier = await buildJsVersionInfoExtendedJSONVersionIdentifier(dotNetObject.versionIdentifier, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.access)) {
        jsVersionInfoExtendedJSON.access = dotNetObject.access;
    }
    if (hasValue(dotNetObject.commonAncestorDate)) {
        jsVersionInfoExtendedJSON.commonAncestorDate = dotNetObject.commonAncestorDate;
    }
    if (hasValue(dotNetObject.creationDate)) {
        jsVersionInfoExtendedJSON.creationDate = dotNetObject.creationDate;
    }
    if (hasValue(dotNetObject.description)) {
        jsVersionInfoExtendedJSON.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.evaluationDate)) {
        jsVersionInfoExtendedJSON.evaluationDate = dotNetObject.evaluationDate;
    }
    if (hasValue(dotNetObject.hasConflicts)) {
        jsVersionInfoExtendedJSON.hasConflicts = dotNetObject.hasConflicts;
    }
    if (hasValue(dotNetObject.hasUninspectedConflicts)) {
        jsVersionInfoExtendedJSON.hasUninspectedConflicts = dotNetObject.hasUninspectedConflicts;
    }
    if (hasValue(dotNetObject.isBeingEdited)) {
        jsVersionInfoExtendedJSON.isBeingEdited = dotNetObject.isBeingEdited;
    }
    if (hasValue(dotNetObject.isBeingRead)) {
        jsVersionInfoExtendedJSON.isBeingRead = dotNetObject.isBeingRead;
    }
    if (hasValue(dotNetObject.isLocked)) {
        jsVersionInfoExtendedJSON.isLocked = dotNetObject.isLocked;
    }
    if (hasValue(dotNetObject.lockDate)) {
        jsVersionInfoExtendedJSON.lockDate = dotNetObject.lockDate;
    }
    if (hasValue(dotNetObject.lockOwner)) {
        jsVersionInfoExtendedJSON.lockOwner = dotNetObject.lockOwner;
    }
    if (hasValue(dotNetObject.modifiedDate)) {
        jsVersionInfoExtendedJSON.modifiedDate = dotNetObject.modifiedDate;
    }
    if (hasValue(dotNetObject.previousAncestorDate)) {
        jsVersionInfoExtendedJSON.previousAncestorDate = dotNetObject.previousAncestorDate;
    }
    if (hasValue(dotNetObject.reconcileDate)) {
        jsVersionInfoExtendedJSON.reconcileDate = dotNetObject.reconcileDate;
    }
    if (hasValue(dotNetObject.versionId)) {
        jsVersionInfoExtendedJSON.versionId = dotNetObject.versionId;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsVersionInfoExtendedJSON);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsVersionInfoExtendedJSON;
    
    return jsVersionInfoExtendedJSON;
}


export async function buildDotNetVersionInfoExtendedJSONGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVersionInfoExtendedJSON: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.versionIdentifier)) {
        let { buildDotNetVersionInfoExtendedJSONVersionIdentifier } = await import('./versionInfoExtendedJSONVersionIdentifier');
        dotNetVersionInfoExtendedJSON.versionIdentifier = await buildDotNetVersionInfoExtendedJSONVersionIdentifier(jsObject.versionIdentifier);
    }
    if (hasValue(jsObject.access)) {
        dotNetVersionInfoExtendedJSON.access = jsObject.access;
    }
    if (hasValue(jsObject.commonAncestorDate)) {
        dotNetVersionInfoExtendedJSON.commonAncestorDate = jsObject.commonAncestorDate;
    }
    if (hasValue(jsObject.creationDate)) {
        dotNetVersionInfoExtendedJSON.creationDate = jsObject.creationDate;
    }
    if (hasValue(jsObject.description)) {
        dotNetVersionInfoExtendedJSON.description = jsObject.description;
    }
    if (hasValue(jsObject.evaluationDate)) {
        dotNetVersionInfoExtendedJSON.evaluationDate = jsObject.evaluationDate;
    }
    if (hasValue(jsObject.hasConflicts)) {
        dotNetVersionInfoExtendedJSON.hasConflicts = jsObject.hasConflicts;
    }
    if (hasValue(jsObject.hasUninspectedConflicts)) {
        dotNetVersionInfoExtendedJSON.hasUninspectedConflicts = jsObject.hasUninspectedConflicts;
    }
    if (hasValue(jsObject.isBeingEdited)) {
        dotNetVersionInfoExtendedJSON.isBeingEdited = jsObject.isBeingEdited;
    }
    if (hasValue(jsObject.isBeingRead)) {
        dotNetVersionInfoExtendedJSON.isBeingRead = jsObject.isBeingRead;
    }
    if (hasValue(jsObject.isLocked)) {
        dotNetVersionInfoExtendedJSON.isLocked = jsObject.isLocked;
    }
    if (hasValue(jsObject.lockDate)) {
        dotNetVersionInfoExtendedJSON.lockDate = jsObject.lockDate;
    }
    if (hasValue(jsObject.lockOwner)) {
        dotNetVersionInfoExtendedJSON.lockOwner = jsObject.lockOwner;
    }
    if (hasValue(jsObject.modifiedDate)) {
        dotNetVersionInfoExtendedJSON.modifiedDate = jsObject.modifiedDate;
    }
    if (hasValue(jsObject.previousAncestorDate)) {
        dotNetVersionInfoExtendedJSON.previousAncestorDate = jsObject.previousAncestorDate;
    }
    if (hasValue(jsObject.reconcileDate)) {
        dotNetVersionInfoExtendedJSON.reconcileDate = jsObject.reconcileDate;
    }
    if (hasValue(jsObject.versionId)) {
        dotNetVersionInfoExtendedJSON.versionId = jsObject.versionId;
    }

    return dotNetVersionInfoExtendedJSON;
}

