// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSearchSelectResultEventResult } from './searchSelectResultEventResult';

export async function buildJsSearchSelectResultEventResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSearchSelectResultEventResult: any = {};
    if (hasValue(dotNetObject.extent)) {
        let { buildJsExtent } = await import('./extent');
        jsSearchSelectResultEventResult.extent = buildJsExtent(dotNetObject.extent) as any;
    }
    if (hasValue(dotNetObject.feature)) {
        let { buildJsGraphic } = await import('./graphic');
        jsSearchSelectResultEventResult.feature = buildJsGraphic(dotNetObject.feature) as any;
    }

    if (hasValue(dotNetObject.name)) {
        jsSearchSelectResultEventResult.name = dotNetObject.name;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSearchSelectResultEventResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSearchSelectResultEventResult;
    
    return jsSearchSelectResultEventResult;
}


export async function buildDotNetSearchSelectResultEventResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSearchSelectResultEventResult: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.extent)) {
        let { buildDotNetExtent } = await import('./extent');
        dotNetSearchSelectResultEventResult.extent = buildDotNetExtent(jsObject.extent);
    }
    if (hasValue(jsObject.feature)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetSearchSelectResultEventResult.feature = buildDotNetGraphic(jsObject.feature, layerId, viewId);
    }
    if (hasValue(jsObject.name)) {
        dotNetSearchSelectResultEventResult.name = jsObject.name;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSearchSelectResultEventResult.id = k;
                break;
            }
        }
    }

    return dotNetSearchSelectResultEventResult;
}

