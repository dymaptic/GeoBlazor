// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';

export async function buildJsBookmarksVisibleElementsGenerated(dotNetObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsBookmarksVisibleElements: any = {};

    if (hasValue(dotNetObject.addBookmarkButton)) {
        jsBookmarksVisibleElements.addBookmarkButton = dotNetObject.addBookmarkButton;
    }
    if (hasValue(dotNetObject.closeButton)) {
        jsBookmarksVisibleElements.closeButton = dotNetObject.closeButton;
    }
    if (hasValue(dotNetObject.collapseButton)) {
        jsBookmarksVisibleElements.collapseButton = dotNetObject.collapseButton;
    }
    if (hasValue(dotNetObject.editBookmarkButton)) {
        jsBookmarksVisibleElements.editBookmarkButton = dotNetObject.editBookmarkButton;
    }
    if (hasValue(dotNetObject.filter)) {
        jsBookmarksVisibleElements.filter = dotNetObject.filter;
    }
    if (hasValue(dotNetObject.flow)) {
        jsBookmarksVisibleElements.flow = dotNetObject.flow;
    }
    if (hasValue(dotNetObject.heading)) {
        jsBookmarksVisibleElements.heading = dotNetObject.heading;
    }
    if (hasValue(dotNetObject.thumbnail)) {
        jsBookmarksVisibleElements.thumbnail = dotNetObject.thumbnail;
    }
    if (hasValue(dotNetObject.time)) {
        jsBookmarksVisibleElements.time = dotNetObject.time;
    }
    
    jsObjectRefs[dotNetObject.id] = jsBookmarksVisibleElements;
    arcGisObjectRefs[dotNetObject.id] = jsBookmarksVisibleElements;
    
    return jsBookmarksVisibleElements;
}


export async function buildDotNetBookmarksVisibleElementsGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBookmarksVisibleElements: any = {};
    
    if (hasValue(jsObject.addBookmarkButton)) {
        dotNetBookmarksVisibleElements.addBookmarkButton = jsObject.addBookmarkButton;
    }
    
    if (hasValue(jsObject.closeButton)) {
        dotNetBookmarksVisibleElements.closeButton = jsObject.closeButton;
    }
    
    if (hasValue(jsObject.collapseButton)) {
        dotNetBookmarksVisibleElements.collapseButton = jsObject.collapseButton;
    }
    
    if (hasValue(jsObject.editBookmarkButton)) {
        dotNetBookmarksVisibleElements.editBookmarkButton = jsObject.editBookmarkButton;
    }
    
    if (hasValue(jsObject.filter)) {
        dotNetBookmarksVisibleElements.filter = jsObject.filter;
    }
    
    if (hasValue(jsObject.flow)) {
        dotNetBookmarksVisibleElements.flow = jsObject.flow;
    }
    
    if (hasValue(jsObject.heading)) {
        dotNetBookmarksVisibleElements.heading = jsObject.heading;
    }
    
    if (hasValue(jsObject.thumbnail)) {
        dotNetBookmarksVisibleElements.thumbnail = jsObject.thumbnail;
    }
    
    if (hasValue(jsObject.time)) {
        dotNetBookmarksVisibleElements.time = jsObject.time;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetBookmarksVisibleElements.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        if (hasValue(dotNetRef)) {
            try {
                dotNetBookmarksVisibleElements.id = await dotNetRef.invokeMethodAsync('GetId');
            } catch (e) {
                console.error('Error invoking GetId for BookmarksVisibleElements', e);
            }
        }
    }
    if (hasValue(dotNetBookmarksVisibleElements.id)) {
        jsObjectRefs[dotNetBookmarksVisibleElements.id] ??= jsObject;
        arcGisObjectRefs[dotNetBookmarksVisibleElements.id] ??= jsObject;
    }

    return dotNetBookmarksVisibleElements;
}

