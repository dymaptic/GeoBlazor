// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetBookmarksVisibleElements } from './bookmarksVisibleElements';

export async function buildJsBookmarksVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsBookmarksVisibleElements: any = {};

    if (hasValue(dotNetObject.addBookmark)) {
        jsBookmarksVisibleElements.addBookmark = dotNetObject.addBookmark;
    }
    if (hasValue(dotNetObject.addBookmarkButton)) {
        jsBookmarksVisibleElements.addBookmarkButton = dotNetObject.addBookmarkButton;
    }
    if (hasValue(dotNetObject.closeButton)) {
        jsBookmarksVisibleElements.closeButton = dotNetObject.closeButton;
    }
    if (hasValue(dotNetObject.collapseButton)) {
        jsBookmarksVisibleElements.collapseButton = dotNetObject.collapseButton;
    }
    if (hasValue(dotNetObject.editBookmarkButton)) {
        jsBookmarksVisibleElements.editBookmarkButton = dotNetObject.editBookmarkButton;
    }
    if (hasValue(dotNetObject.filter)) {
        jsBookmarksVisibleElements.filter = dotNetObject.filter;
    }
    if (hasValue(dotNetObject.flow)) {
        jsBookmarksVisibleElements.flow = dotNetObject.flow;
    }
    if (hasValue(dotNetObject.heading)) {
        jsBookmarksVisibleElements.heading = dotNetObject.heading;
    }
    if (hasValue(dotNetObject.thumbnail)) {
        jsBookmarksVisibleElements.thumbnail = dotNetObject.thumbnail;
    }
    if (hasValue(dotNetObject.time)) {
        jsBookmarksVisibleElements.time = dotNetObject.time;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsBookmarksVisibleElements);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsBookmarksVisibleElements;
    
    let { buildDotNetBookmarksVisibleElements } = await import('./bookmarksVisibleElements');
    let dnInstantiatedObject = await buildDotNetBookmarksVisibleElements(jsBookmarksVisibleElements, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type BookmarksVisibleElements detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BookmarksVisibleElements', e);
    }
    
    return jsBookmarksVisibleElements;
}


export async function buildDotNetBookmarksVisibleElementsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsBookmarksVisibleElements } = await import('./bookmarksVisibleElements');
        jsComponentRef = await buildJsBookmarksVisibleElements(jsObject, layerId, viewId);
    }
    
    let dotNetBookmarksVisibleElements: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.addBookmarkButton)) {
        dotNetBookmarksVisibleElements.addBookmarkButton = jsObject.addBookmarkButton;
    }
    if (hasValue(jsObject.closeButton)) {
        dotNetBookmarksVisibleElements.closeButton = jsObject.closeButton;
    }
    if (hasValue(jsObject.collapseButton)) {
        dotNetBookmarksVisibleElements.collapseButton = jsObject.collapseButton;
    }
    if (hasValue(jsObject.editBookmarkButton)) {
        dotNetBookmarksVisibleElements.editBookmarkButton = jsObject.editBookmarkButton;
    }
    if (hasValue(jsObject.filter)) {
        dotNetBookmarksVisibleElements.filter = jsObject.filter;
    }
    if (hasValue(jsObject.flow)) {
        dotNetBookmarksVisibleElements.flow = jsObject.flow;
    }
    if (hasValue(jsObject.heading)) {
        dotNetBookmarksVisibleElements.heading = jsObject.heading;
    }
    if (hasValue(jsObject.thumbnail)) {
        dotNetBookmarksVisibleElements.thumbnail = jsObject.thumbnail;
    }
    if (hasValue(jsObject.time)) {
        dotNetBookmarksVisibleElements.time = jsObject.time;
    }


    if (hasValue(geoBlazorId)) {
        dotNetBookmarksVisibleElements.id = geoBlazorId;
    }

    return dotNetBookmarksVisibleElements;
}

