// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';

export async function buildJsDotDensityTitleGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsDotDensityTitle: any = {};

    if (hasValue(dotNetObject.unit)) {
        jsDotDensityTitle.unit = dotNetObject.unit;
    }
    if (hasValue(dotNetObject.value)) {
        jsDotDensityTitle.value = dotNetObject.value;
    }
    
    jsObjectRefs[dotNetObject.id] = jsDotDensityTitle;
    arcGisObjectRefs[dotNetObject.id] = jsDotDensityTitle;
    
    return jsDotDensityTitle;
}


export async function buildDotNetDotDensityTitleGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDotDensityTitle: any = {};
    
    if (hasValue(jsObject.unit)) {
        dotNetDotDensityTitle.unit = jsObject.unit;
    }
    
    if (hasValue(jsObject.value)) {
        dotNetDotDensityTitle.value = jsObject.value;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetDotDensityTitle.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        if (hasValue(dotNetRef)) {
            try {
                dotNetDotDensityTitle.id = await dotNetRef.invokeMethodAsync('GetId');
            } catch (e) {
                console.error('Error invoking GetId for DotDensityTitle', e);
            }
        }
    }
    if (hasValue(dotNetDotDensityTitle.id)) {
        jsObjectRefs[dotNetDotDensityTitle.id] ??= jsObject;
        arcGisObjectRefs[dotNetDotDensityTitle.id] ??= jsObject;
    }

    return dotNetDotDensityTitle;
}

