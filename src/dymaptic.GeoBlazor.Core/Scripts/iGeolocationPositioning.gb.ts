// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import GeolocationPositioning from '@arcgis/core/widgets/support/GeolocationPositioning';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetIGeolocationPositioning } from './iGeolocationPositioning';

export async function buildJsIGeolocationPositioningGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId];
    }
    if (hasValue(dotNetObject.graphic)) {
        let { buildJsGraphic } = await import('./graphic');
        properties.graphic = buildJsGraphic(dotNetObject.graphic) as any;
    }

    if (hasValue(dotNetObject.geolocationOptions)) {
        properties.geolocationOptions = dotNetObject.geolocationOptions;
    }
    if (hasValue(dotNetObject.goToLocationEnabled)) {
        properties.goToLocationEnabled = dotNetObject.goToLocationEnabled;
    }
    if (hasValue(dotNetObject.scale)) {
        properties.scale = dotNetObject.scale;
    }
    let jsGeolocationPositioning = new GeolocationPositioning(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsGeolocationPositioning);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsGeolocationPositioning;
    
    let dnInstantiatedObject = await buildDotNetIGeolocationPositioning(jsGeolocationPositioning);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for IGeolocationPositioning', e);
    }
    
    return jsGeolocationPositioning;
}

export async function buildDotNetIGeolocationPositioningGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIGeolocationPositioning: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.graphic)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetIGeolocationPositioning.graphic = buildDotNetGraphic(jsObject.graphic, layerId, viewId);
        }
    if (hasValue(jsObject.geolocationOptions)) {
        dotNetIGeolocationPositioning.geolocationOptions = jsObject.geolocationOptions;
    }
    if (hasValue(jsObject.goToLocationEnabled)) {
        dotNetIGeolocationPositioning.goToLocationEnabled = jsObject.goToLocationEnabled;
    }
    if (hasValue(jsObject.scale)) {
        dotNetIGeolocationPositioning.scale = jsObject.scale;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetIGeolocationPositioning.id = k;
                break;
            }
        }
    }

    return dotNetIGeolocationPositioning;
}

