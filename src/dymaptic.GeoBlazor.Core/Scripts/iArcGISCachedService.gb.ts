// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetIArcGISCachedService } from './iArcGISCachedService';

export async function buildJsIArcGISCachedServiceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsArcGISCachedService = new ArcGISCachedService();
    if (hasValue(dotNetObject.tileInfo)) {
        let { buildJsTileInfo } = await import('./tileInfo');
        jsArcGISCachedService.tileInfo = await buildJsTileInfo(dotNetObject.tileInfo, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.copyright)) {
        jsArcGISCachedService.copyright = dotNetObject.copyright;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsArcGISCachedService);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsArcGISCachedService;
    
    let dnInstantiatedObject = await buildDotNetIArcGISCachedService(jsArcGISCachedService);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for IArcGISCachedService', e);
    }
    
    return jsArcGISCachedService;
}

export async function buildDotNetIArcGISCachedServiceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIArcGISCachedService: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.spatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetIArcGISCachedService.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference);
        }
        if (hasValue(jsObject.tileInfo)) {
            let { buildDotNetTileInfo } = await import('./tileInfo');
            dotNetIArcGISCachedService.tileInfo = await buildDotNetTileInfo(jsObject.tileInfo);
        }
        if (hasValue(jsObject.copyright)) {
            dotNetIArcGISCachedService.copyright = jsObject.copyright;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetIArcGISCachedService.id = k;
                break;
            }
        }
    }

    return dotNetIArcGISCachedService;
}

