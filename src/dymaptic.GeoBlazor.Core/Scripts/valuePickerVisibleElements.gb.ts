// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetValuePickerVisibleElements } from './valuePickerVisibleElements';

export async function buildJsValuePickerVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsValuePickerVisibleElements: any = {};

    if (hasValue(dotNetObject.nextButton)) {
        jsValuePickerVisibleElements.nextButton = dotNetObject.nextButton;
    }
    if (hasValue(dotNetObject.playButton)) {
        jsValuePickerVisibleElements.playButton = dotNetObject.playButton;
    }
    if (hasValue(dotNetObject.previousButton)) {
        jsValuePickerVisibleElements.previousButton = dotNetObject.previousButton;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsValuePickerVisibleElements);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsValuePickerVisibleElements;
    
    return jsValuePickerVisibleElements;
}


export async function buildDotNetValuePickerVisibleElementsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetValuePickerVisibleElements: any = {};
    
    if (hasValue(jsObject.nextButton)) {
        dotNetValuePickerVisibleElements.nextButton = jsObject.nextButton;
    }
    
    if (hasValue(jsObject.playButton)) {
        dotNetValuePickerVisibleElements.playButton = jsObject.playButton;
    }
    
    if (hasValue(jsObject.previousButton)) {
        dotNetValuePickerVisibleElements.previousButton = jsObject.previousButton;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetValuePickerVisibleElements.id = geoBlazorId;
    }

    return dotNetValuePickerVisibleElements;
}

