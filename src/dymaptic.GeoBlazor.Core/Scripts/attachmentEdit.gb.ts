// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetAttachmentEdit } from './attachmentEdit';

export async function buildJsAttachmentEditGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsAttachmentEdit: any = {};
    if (hasValue(dotNetObject.feature)) {
        let { buildJsGraphic } = await import('./graphic');
        jsAttachmentEdit.feature = buildJsGraphic(dotNetObject.feature) as any;
    }

    if (hasValue(dotNetObject.attachment)) {
        jsAttachmentEdit.attachment = dotNetObject.attachment;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsAttachmentEdit);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsAttachmentEdit;
    
    return jsAttachmentEdit;
}


export async function buildDotNetAttachmentEditGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsAttachmentEdit } = await import('./attachmentEdit');
        jsComponentRef = await buildJsAttachmentEdit(jsObject, layerId, viewId);
    }
    
    let dotNetAttachmentEdit: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.feature)) {
        let { buildDotNetGraphic } = await import('./graphic');
        dotNetAttachmentEdit.feature = buildDotNetGraphic(jsObject.feature, layerId, viewId);
    }
    if (hasValue(jsObject.attachment)) {
        dotNetAttachmentEdit.attachment = jsObject.attachment;
    }

    return dotNetAttachmentEdit;
}

