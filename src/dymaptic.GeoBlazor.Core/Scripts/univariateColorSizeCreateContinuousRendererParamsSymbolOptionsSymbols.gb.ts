// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetUnivariateColorSizeCreateContinuousRendererParamsSymbolOptionsSymbols } from './univariateColorSizeCreateContinuousRendererParamsSymbolOptionsSymbols';

export async function buildJsUnivariateColorSizeCreateContinuousRendererParamsSymbolOptionsSymbolsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsunivariateColorSizeCreateContinuousRendererParamsSymbolOptionsSymbols: any = {}
    if (hasValue(dotNetObject.above)) {
        let { buildJsSymbol } = await import('./symbol');
        jsunivariateColorSizeCreateContinuousRendererParamsSymbolOptionsSymbols.above = buildJsSymbol(dotNetObject.above) as any;
    }
    if (hasValue(dotNetObject.below)) {
        let { buildJsSymbol } = await import('./symbol');
        jsunivariateColorSizeCreateContinuousRendererParamsSymbolOptionsSymbols.below = buildJsSymbol(dotNetObject.below) as any;
    }

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsunivariateColorSizeCreateContinuousRendererParamsSymbolOptionsSymbols);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsunivariateColorSizeCreateContinuousRendererParamsSymbolOptionsSymbols;
    
    let dnInstantiatedObject = await buildDotNetUnivariateColorSizeCreateContinuousRendererParamsSymbolOptionsSymbols(jsunivariateColorSizeCreateContinuousRendererParamsSymbolOptionsSymbols);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for UnivariateColorSizeCreateContinuousRendererParamsSymbolOptionsSymbols', e);
    }
    
    return jsunivariateColorSizeCreateContinuousRendererParamsSymbolOptionsSymbols;
}

export async function buildDotNetUnivariateColorSizeCreateContinuousRendererParamsSymbolOptionsSymbolsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUnivariateColorSizeCreateContinuousRendererParamsSymbolOptionsSymbols: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.above)) {
            let { buildDotNetSymbol } = await import('./symbol');
            dotNetUnivariateColorSizeCreateContinuousRendererParamsSymbolOptionsSymbols.above = buildDotNetSymbol(jsObject.above);
        }
        if (hasValue(jsObject.below)) {
            let { buildDotNetSymbol } = await import('./symbol');
            dotNetUnivariateColorSizeCreateContinuousRendererParamsSymbolOptionsSymbols.below = buildDotNetSymbol(jsObject.below);
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetUnivariateColorSizeCreateContinuousRendererParamsSymbolOptionsSymbols.id = k;
                break;
            }
        }
    }

    return dotNetUnivariateColorSizeCreateContinuousRendererParamsSymbolOptionsSymbols;
}

