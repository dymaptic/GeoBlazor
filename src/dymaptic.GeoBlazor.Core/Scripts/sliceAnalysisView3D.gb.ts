// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import SliceAnalysisView3D from '@arcgis/core/views/3d/analysis/SliceAnalysisView3D';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSliceAnalysisView3D } from './sliceAnalysisView3D';

export async function buildJsSliceAnalysisView3DGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    if (hasValue(dotNetObject.active)) {
        properties.active = dotNetObject.active;
    }
    if (hasValue(dotNetObject.interactive)) {
        properties.interactive = dotNetObject.interactive;
    }
    let jsSliceAnalysisView3D = new SliceAnalysisView3D(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSliceAnalysisView3D);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSliceAnalysisView3D;
    
    let dnInstantiatedObject = await buildDotNetSliceAnalysisView3D(jsSliceAnalysisView3D);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SliceAnalysisView3D', e);
    }
    
    return jsSliceAnalysisView3D;
}

export async function buildDotNetSliceAnalysisView3DGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSliceAnalysisView3D: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.analysis)) {
            let { buildDotNetSliceAnalysis } = await import('./sliceAnalysis');
            dotNetSliceAnalysisView3D.analysis = await buildDotNetSliceAnalysis(jsObject.analysis);
        }
    if (hasValue(jsObject.active)) {
        dotNetSliceAnalysisView3D.active = jsObject.active;
    }
    if (hasValue(jsObject.interactive)) {
        dotNetSliceAnalysisView3D.interactive = jsObject.interactive;
    }
    if (hasValue(jsObject.type)) {
        dotNetSliceAnalysisView3D.type = jsObject.type;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSliceAnalysisView3D.id = k;
                break;
            }
        }
    }

    return dotNetSliceAnalysisView3D;
}

