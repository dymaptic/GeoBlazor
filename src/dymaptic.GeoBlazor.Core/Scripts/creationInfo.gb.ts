// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetCreationInfo } from './creationInfo';
import CreationInfo = __esri.CreationInfo;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsCreationInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCreationInfo: any = {}
    if (hasValue(dotNetObject.geometryToPlace)) {
        let { buildJsMesh } = await import('./mesh');
        jsCreationInfo.geometryToPlace = buildJsMesh(dotNetObject.geometryToPlace) as any;
    }
    if (hasValue(dotNetObject.initialFeature)) {
        let { buildJsGraphic } = await import('./graphic');
        jsCreationInfo.initialFeature = buildJsGraphic(dotNetObject.initialFeature) as any;
    }
    if (hasValue(dotNetObject.layer)) {
        let { buildJsLayer } = await import('./layer');
        jsCreationInfo.layer = await buildJsLayer(dotNetObject.layer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.template)) {
        let { buildJsFeatureTemplate } = await import('./featureTemplate');
        jsCreationInfo.template = await buildJsFeatureTemplate(dotNetObject.template, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.maxFeatures)) {
        jsCreationInfo.maxFeatures = dotNetObject.maxFeatures;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsCreationInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCreationInfo;
    
    let dnInstantiatedObject = await buildDotNetCreationInfo(jsCreationInfo);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CreationInfo', e);
    }
    
    return jsCreationInfo;
}

export async function buildDotNetCreationInfoGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCreationInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.geometryToPlace)) {
            let { buildDotNetMesh } = await import('./mesh');
            dotNetCreationInfo.geometryToPlace = buildDotNetMesh(jsObject.geometryToPlace);
        }
        if (hasValue(jsObject.initialFeature)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetCreationInfo.initialFeature = buildDotNetGraphic(jsObject.initialFeature, layerId, viewId);
        }
        if (hasValue(jsObject.template)) {
            let { buildDotNetFeatureTemplate } = await import('./featureTemplate');
            dotNetCreationInfo.template = await buildDotNetFeatureTemplate(jsObject.template);
        }
        if (hasValue(jsObject.maxFeatures)) {
            dotNetCreationInfo.maxFeatures = jsObject.maxFeatures;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCreationInfo.id = k;
                break;
            }
        }
    }

    return dotNetCreationInfo;
}

