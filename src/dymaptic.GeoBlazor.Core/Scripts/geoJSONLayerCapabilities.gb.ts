// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetGeoJSONLayerCapabilities } from './geoJSONLayerCapabilities';

export async function buildJsGeoJSONLayerCapabilitiesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsGeoJSONLayerCapabilities: any = {};
    if (hasValue(dotNetObject.attachment)) {
        let { buildJsGeoJSONLayerCapabilitiesAttachment } = await import('./geoJSONLayerCapabilitiesAttachment');
        jsGeoJSONLayerCapabilities.attachment = await buildJsGeoJSONLayerCapabilitiesAttachment(dotNetObject.attachment, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.data)) {
        jsGeoJSONLayerCapabilities.data = dotNetObject.data;
    }
    if (hasValue(dotNetObject.editing)) {
        jsGeoJSONLayerCapabilities.editing = dotNetObject.editing;
    }
    if (hasValue(dotNetObject.operations)) {
        jsGeoJSONLayerCapabilities.operations = dotNetObject.operations;
    }
    if (hasValue(dotNetObject.query)) {
        jsGeoJSONLayerCapabilities.query = dotNetObject.query;
    }
    if (hasValue(dotNetObject.queryRelated)) {
        jsGeoJSONLayerCapabilities.queryRelated = dotNetObject.queryRelated;
    }
    
    jsObjectRefs[dotNetObject.id] = jsGeoJSONLayerCapabilities;
    arcGisObjectRefs[dotNetObject.id] = jsGeoJSONLayerCapabilities;
    
    return jsGeoJSONLayerCapabilities;
}


export async function buildDotNetGeoJSONLayerCapabilitiesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGeoJSONLayerCapabilities: any = {};
    
    if (hasValue(jsObject.attachment)) {
        let { buildDotNetGeoJSONLayerCapabilitiesAttachment } = await import('./geoJSONLayerCapabilitiesAttachment');
        dotNetGeoJSONLayerCapabilities.attachment = await buildDotNetGeoJSONLayerCapabilitiesAttachment(jsObject.attachment);
    }
    
    if (hasValue(jsObject.data)) {
        dotNetGeoJSONLayerCapabilities.data = removeCircularReferences(jsObject.data);
    }
    
    if (hasValue(jsObject.editing)) {
        dotNetGeoJSONLayerCapabilities.editing = removeCircularReferences(jsObject.editing);
    }
    
    if (hasValue(jsObject.operations)) {
        dotNetGeoJSONLayerCapabilities.operations = removeCircularReferences(jsObject.operations);
    }
    
    if (hasValue(jsObject.query)) {
        dotNetGeoJSONLayerCapabilities.query = removeCircularReferences(jsObject.query);
    }
    
    if (hasValue(jsObject.queryRelated)) {
        dotNetGeoJSONLayerCapabilities.queryRelated = removeCircularReferences(jsObject.queryRelated);
    }
    

    return dotNetGeoJSONLayerCapabilities;
}

