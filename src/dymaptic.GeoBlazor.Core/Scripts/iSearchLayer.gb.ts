// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import SearchLayer from '@arcgis/core/webdoc/applicationProperties/SearchLayer';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ISearchLayerGenerated implements IPropertyWrapper {
    public layer: SearchLayer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(layer: SearchLayer) {
        this.layer = layer;
    }
    
    // region methods
   
    unwrap() {
        return this.layer;
    }
    
    async load(options: AbortSignal): Promise<void> {
        await this.layer.load(options);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.layer[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.layer[prop] = value;
    }
}

export async function buildJsISearchLayerGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSearchLayer = new SearchLayer();

    if (hasValue(dotNetObject.field)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedField } = dotNetObject.field;
        jsSearchLayer.field = sanitizedField;
    }
    if (hasValue(dotNetObject.iSearchLayerId)) {
        jsSearchLayer.id = dotNetObject.iSearchLayerId;
    }
    if (hasValue(dotNetObject.subLayer)) {
        jsSearchLayer.subLayer = dotNetObject.subLayer;
    }

    let { default: ISearchLayerWrapper } = await import('./iSearchLayer');
    let iSearchLayerWrapper = new ISearchLayerWrapper(jsSearchLayer);
    iSearchLayerWrapper.geoBlazorId = dotNetObject.id;
    iSearchLayerWrapper.viewId = viewId;
    iSearchLayerWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(iSearchLayerWrapper);
    jsObjectRefs[dotNetObject.id] = iSearchLayerWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsSearchLayer;
    let { buildDotNetISearchLayer } = await import('./iSearchLayer');
    let dnInstantiatedObject = await buildDotNetISearchLayer(jsSearchLayer);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ISearchLayer', e);
    }
    
    return jsSearchLayer;
}
export async function buildDotNetISearchLayerGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetISearchLayer: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.field)) {
            dotNetISearchLayer.field = jsObject.field;
        }
        if (hasValue(jsObject.id)) {
            dotNetISearchLayer.iSearchLayerId = jsObject.id;
        }
        if (hasValue(jsObject.subLayer)) {
            dotNetISearchLayer.subLayer = jsObject.subLayer;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetISearchLayer.id = k;
                break;
            }
        }
    }

    return dotNetISearchLayer;
}

