// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import SwitchInput from '@arcgis/core/form/elements/inputs/SwitchInput';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetSwitchInput } from './switchInput';

export async function buildJsSwitchInputGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};

    if (hasValue(dotNetObject.offValue)) {
        properties.offValue = dotNetObject.offValue;
    }
    if (hasValue(dotNetObject.onValue)) {
        properties.onValue = dotNetObject.onValue;
    }
    let jsSwitchInput = new SwitchInput(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSwitchInput);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSwitchInput;
    
    return jsSwitchInput;
}


export async function buildDotNetSwitchInputGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSwitchInput: any = {};
    
    if (hasValue(jsObject.offValue)) {
        dotNetSwitchInput.offValue = jsObject.offValue;
    }
    
    if (hasValue(jsObject.onValue)) {
        dotNetSwitchInput.onValue = jsObject.onValue;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetSwitchInput.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSwitchInput.id = geoBlazorId;
    }

    return dotNetSwitchInput;
}

