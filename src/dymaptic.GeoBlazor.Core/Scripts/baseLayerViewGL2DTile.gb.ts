// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetBaseLayerViewGL2DTile } from './baseLayerViewGL2DTile';

export async function buildJsBaseLayerViewGL2DTileGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsBaseLayerViewGL2DTile: any = {};

    if (hasValue(dotNetObject.baseLayerViewGL2DTileId)) {
        jsBaseLayerViewGL2DTile.id = dotNetObject.baseLayerViewGL2DTileId;
    }
    if (hasValue(dotNetObject.bounds) && dotNetObject.bounds.length > 0) {
        jsBaseLayerViewGL2DTile.bounds = dotNetObject.bounds;
    }
    if (hasValue(dotNetObject.col)) {
        jsBaseLayerViewGL2DTile.col = dotNetObject.col;
    }
    if (hasValue(dotNetObject.coords) && dotNetObject.coords.length > 0) {
        jsBaseLayerViewGL2DTile.coords = dotNetObject.coords;
    }
    if (hasValue(dotNetObject.level)) {
        jsBaseLayerViewGL2DTile.level = dotNetObject.level;
    }
    if (hasValue(dotNetObject.resolution)) {
        jsBaseLayerViewGL2DTile.resolution = dotNetObject.resolution;
    }
    if (hasValue(dotNetObject.row)) {
        jsBaseLayerViewGL2DTile.row = dotNetObject.row;
    }
    if (hasValue(dotNetObject.scale)) {
        jsBaseLayerViewGL2DTile.scale = dotNetObject.scale;
    }
    if (hasValue(dotNetObject.world)) {
        jsBaseLayerViewGL2DTile.world = dotNetObject.world;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsBaseLayerViewGL2DTile);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsBaseLayerViewGL2DTile;
    
    try {
        let { buildDotNetBaseLayerViewGL2DTile } = await import('./baseLayerViewGL2DTile');
        let dnInstantiatedObject = await buildDotNetBaseLayerViewGL2DTile(jsBaseLayerViewGL2DTile, layerId, viewId);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type BaseLayerViewGL2DTile detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for BaseLayerViewGL2DTile', e);
    }
    
    return jsBaseLayerViewGL2DTile;
}


export async function buildDotNetBaseLayerViewGL2DTileGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBaseLayerViewGL2DTile: any = {};
    
    if (hasValue(jsObject.id)) {
        dotNetBaseLayerViewGL2DTile.baseLayerViewGL2DTileId = jsObject.id;
    }
    
    if (hasValue(jsObject.bounds)) {
        dotNetBaseLayerViewGL2DTile.bounds = jsObject.bounds;
    }
    
    if (hasValue(jsObject.col)) {
        dotNetBaseLayerViewGL2DTile.col = jsObject.col;
    }
    
    if (hasValue(jsObject.coords)) {
        dotNetBaseLayerViewGL2DTile.coords = jsObject.coords;
    }
    
    if (hasValue(jsObject.level)) {
        dotNetBaseLayerViewGL2DTile.level = jsObject.level;
    }
    
    if (hasValue(jsObject.resolution)) {
        dotNetBaseLayerViewGL2DTile.resolution = jsObject.resolution;
    }
    
    if (hasValue(jsObject.row)) {
        dotNetBaseLayerViewGL2DTile.row = jsObject.row;
    }
    
    if (hasValue(jsObject.scale)) {
        dotNetBaseLayerViewGL2DTile.scale = jsObject.scale;
    }
    
    if (hasValue(jsObject.world)) {
        dotNetBaseLayerViewGL2DTile.world = jsObject.world;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetBaseLayerViewGL2DTile.id = geoBlazorId;
    }

    return dotNetBaseLayerViewGL2DTile;
}

