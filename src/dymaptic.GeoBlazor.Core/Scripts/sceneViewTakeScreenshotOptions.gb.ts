// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetSceneViewTakeScreenshotOptions } from './sceneViewTakeScreenshotOptions';

export async function buildJsSceneViewTakeScreenshotOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSceneViewTakeScreenshotOptions: any = {};
    if (hasValue(dotNetObject.area)) {
        let { buildJsSceneViewTakeScreenshotOptionsArea } = await import('./sceneViewTakeScreenshotOptionsArea');
        jsSceneViewTakeScreenshotOptions.area = await buildJsSceneViewTakeScreenshotOptionsArea(dotNetObject.area, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.format)) {
        let { buildJsFormat } = await import('./format');
        jsSceneViewTakeScreenshotOptions.format = await buildJsFormat(dotNetObject.format, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.height)) {
        jsSceneViewTakeScreenshotOptions.height = dotNetObject.height;
    }
    if (hasValue(dotNetObject.ignorePadding)) {
        jsSceneViewTakeScreenshotOptions.ignorePadding = dotNetObject.ignorePadding;
    }
    if (hasValue(dotNetObject.quality)) {
        jsSceneViewTakeScreenshotOptions.quality = dotNetObject.quality;
    }
    if (hasValue(dotNetObject.width)) {
        jsSceneViewTakeScreenshotOptions.width = dotNetObject.width;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSceneViewTakeScreenshotOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSceneViewTakeScreenshotOptions;
    
    return jsSceneViewTakeScreenshotOptions;
}


export async function buildDotNetSceneViewTakeScreenshotOptionsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsSceneViewTakeScreenshotOptions } = await import('./sceneViewTakeScreenshotOptions');
        jsComponentRef = await buildJsSceneViewTakeScreenshotOptions(jsObject, layerId, viewId);
    }
    
    let dotNetSceneViewTakeScreenshotOptions: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.area)) {
        let { buildDotNetSceneViewTakeScreenshotOptionsArea } = await import('./sceneViewTakeScreenshotOptionsArea');
        dotNetSceneViewTakeScreenshotOptions.area = await buildDotNetSceneViewTakeScreenshotOptionsArea(jsObject.area, layerId, viewId);
    }
    if (hasValue(jsObject.format)) {
        let { buildDotNetFormat } = await import('./format');
        dotNetSceneViewTakeScreenshotOptions.format = await buildDotNetFormat(jsObject.format, layerId, viewId);
    }
    if (hasValue(jsObject.height)) {
        dotNetSceneViewTakeScreenshotOptions.height = jsObject.height;
    }
    if (hasValue(jsObject.ignorePadding)) {
        dotNetSceneViewTakeScreenshotOptions.ignorePadding = jsObject.ignorePadding;
    }
    if (hasValue(jsObject.quality)) {
        dotNetSceneViewTakeScreenshotOptions.quality = jsObject.quality;
    }
    if (hasValue(jsObject.width)) {
        dotNetSceneViewTakeScreenshotOptions.width = jsObject.width;
    }

    return dotNetSceneViewTakeScreenshotOptions;
}

