// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSceneViewTakeScreenshotOptions } from './sceneViewTakeScreenshotOptions';

export async function buildJsSceneViewTakeScreenshotOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSceneViewTakeScreenshotOptions: any = {};
    if (hasValue(dotNetObject.format)) {
        let { buildJsFormat } = await import('./format');
        jsSceneViewTakeScreenshotOptions.format = await buildJsFormat(dotNetObject.format, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.area)) {
        const { id, dotNetComponentReference, ...sanitizedArea } = dotNetObject.area;
        jsSceneViewTakeScreenshotOptions.area = sanitizedArea;
    }
    if (hasValue(dotNetObject.height)) {
        jsSceneViewTakeScreenshotOptions.height = dotNetObject.height;
    }
    if (hasValue(dotNetObject.ignorePadding)) {
        jsSceneViewTakeScreenshotOptions.ignorePadding = dotNetObject.ignorePadding;
    }
    if (hasValue(dotNetObject.quality)) {
        jsSceneViewTakeScreenshotOptions.quality = dotNetObject.quality;
    }
    if (hasValue(dotNetObject.width)) {
        jsSceneViewTakeScreenshotOptions.width = dotNetObject.width;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSceneViewTakeScreenshotOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSceneViewTakeScreenshotOptions;
    
    let { buildDotNetSceneViewTakeScreenshotOptions } = await import('./sceneViewTakeScreenshotOptions');
    let dnInstantiatedObject = await buildDotNetSceneViewTakeScreenshotOptions(jsSceneViewTakeScreenshotOptions);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_')) {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type SceneViewTakeScreenshotOptions detected at path: ${key}, value: ${value.__proto__?.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SceneViewTakeScreenshotOptions', e);
    }
    
    return jsSceneViewTakeScreenshotOptions;
}


export async function buildDotNetSceneViewTakeScreenshotOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSceneViewTakeScreenshotOptions: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.format)) {
        let { buildDotNetFormat } = await import('./format');
        dotNetSceneViewTakeScreenshotOptions.format = await buildDotNetFormat(jsObject.format);
    }
    if (hasValue(jsObject.area)) {
        dotNetSceneViewTakeScreenshotOptions.area = jsObject.area;
    }
    if (hasValue(jsObject.height)) {
        dotNetSceneViewTakeScreenshotOptions.height = jsObject.height;
    }
    if (hasValue(jsObject.ignorePadding)) {
        dotNetSceneViewTakeScreenshotOptions.ignorePadding = jsObject.ignorePadding;
    }
    if (hasValue(jsObject.quality)) {
        dotNetSceneViewTakeScreenshotOptions.quality = jsObject.quality;
    }
    if (hasValue(jsObject.width)) {
        dotNetSceneViewTakeScreenshotOptions.width = jsObject.width;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSceneViewTakeScreenshotOptions.id = k;
                break;
            }
        }
    }

    return dotNetSceneViewTakeScreenshotOptions;
}

