// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import StreamLayerView from '@arcgis/core/views/layers/StreamLayerView';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class StreamLayerViewGenerated implements IPropertyWrapper {
    public component: StreamLayerView;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: StreamLayerView) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async connect(): Promise<void> {
        this.component.connect();
    }

    async createQuery(): Promise<any> {
        return this.component.createQuery();
    }

    async disconnect(): Promise<void> {
        this.component.disconnect();
    }

    async highlight(target: any): Promise<any> {
        let { buildJsGraphic } = await import('./graphic');
        let jsTarget = buildJsGraphic(target) as any;
        let result = this.component.highlight(jsTarget);
        let { buildDotNetHighlightHandle } = await import('./highlightHandle');
        return await buildDotNetHighlightHandle(result);
    }

    async pause(): Promise<void> {
        this.component.pause();
    }

    async queryExtent(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.component.queryExtent(jsQuery,
            options);
    }

    async queryFeatureCount(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.component.queryFeatureCount(jsQuery,
            options);
    }

    async queryFeatures(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.component.queryFeatures(jsQuery,
            options);
    }

    async queryLatestObservations(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.component.queryLatestObservations(jsQuery,
            options);
    }

    async queryObjectIds(query: any,
        options: any): Promise<any> {
        let { buildJsQuery } = await import('./query');
        let jsQuery = await buildJsQuery(query, this.layerId, this.viewId) as any;
        return await this.component.queryObjectIds(jsQuery,
            options);
    }

    async resume(): Promise<void> {
        this.component.resume();
    }

    // region properties
    
    async getFeatureEffect(): Promise<any> {
        if (!hasValue(this.component.featureEffect)) {
            return null;
        }
        
        let { buildDotNetFeatureEffect } = await import('./featureEffect');
        return await buildDotNetFeatureEffect(this.component.featureEffect);
    }
    async setFeatureEffect(value: any): Promise<void> {
        let { buildJsFeatureEffect } = await import('./featureEffect');
        this.component.featureEffect = await  buildJsFeatureEffect(value, this.layerId, this.viewId);
    }
    async getFilter(): Promise<any> {
        if (!hasValue(this.component.filter)) {
            return null;
        }
        
        let { buildDotNetFeatureFilter } = await import('./featureFilter');
        return await buildDotNetFeatureFilter(this.component.filter);
    }
    async setFilter(value: any): Promise<void> {
        let { buildJsFeatureFilter } = await import('./featureFilter');
        this.component.filter = await  buildJsFeatureFilter(value, this.layerId, this.viewId);
    }
    async getHighlightOptions(): Promise<any> {
        if (!hasValue(this.component.highlightOptions)) {
            return null;
        }
        
        let { buildDotNetHighlightOptions } = await import('./highlightOptions');
        return await buildDotNetHighlightOptions(this.component.highlightOptions);
    }
    async setHighlightOptions(value: any): Promise<void> {
        let { buildJsHighlightOptions } = await import('./highlightOptions');
        this.component.highlightOptions = await  buildJsHighlightOptions(value, this.layerId, this.viewId);
    }
    async getLayer(): Promise<any> {
        if (!hasValue(this.component.layer)) {
            return null;
        }
        
        let { buildDotNetLayer } = await import('./layer');
        return await buildDotNetLayer(this.component.layer);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsStreamLayerViewGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsStreamLayerView = new StreamLayerView();
    if (hasValue(dotNetObject.featureEffect)) {
        let { buildJsFeatureEffect } = await import('./featureEffect');
        jsStreamLayerView.featureEffect = await buildJsFeatureEffect(dotNetObject.featureEffect, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.filter)) {
        let { buildJsFeatureFilter } = await import('./featureFilter');
        jsStreamLayerView.filter = await buildJsFeatureFilter(dotNetObject.filter, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.highlightOptions)) {
        let { buildJsHighlightOptions } = await import('./highlightOptions');
        jsStreamLayerView.highlightOptions = await buildJsHighlightOptions(dotNetObject.highlightOptions, layerId, viewId) as any;
    }

    jsStreamLayerView.on('data-received', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsDataReceived', evt);
    });
    
    jsStreamLayerView.on('message-received', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsMessageReceived', evt);
    });
    
    jsStreamLayerView.on('update-rate', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsUpdateRate', evt);
    });
    

    let { default: StreamLayerViewWrapper } = await import('./streamLayerView');
    let streamLayerViewWrapper = new StreamLayerViewWrapper(jsStreamLayerView);
    streamLayerViewWrapper.geoBlazorId = dotNetObject.id;
    streamLayerViewWrapper.viewId = viewId;
    streamLayerViewWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(streamLayerViewWrapper);
    jsObjectRefs[dotNetObject.id] = streamLayerViewWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsStreamLayerView;
    let { buildDotNetStreamLayerView } = await import('./streamLayerView');
    let dnInstantiatedObject = await buildDotNetStreamLayerView(jsStreamLayerView);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for StreamLayerView', e);
    }
    
    return jsStreamLayerView;
}

export async function buildDotNetStreamLayerViewGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetStreamLayerView: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.featureEffect)) {
            let { buildDotNetFeatureEffect } = await import('./featureEffect');
            dotNetStreamLayerView.featureEffect = await buildDotNetFeatureEffect(jsObject.featureEffect);
        }
        if (hasValue(jsObject.filter)) {
            let { buildDotNetFeatureFilter } = await import('./featureFilter');
            dotNetStreamLayerView.filter = await buildDotNetFeatureFilter(jsObject.filter);
        }
        if (hasValue(jsObject.highlightOptions)) {
            let { buildDotNetHighlightOptions } = await import('./highlightOptions');
            dotNetStreamLayerView.highlightOptions = await buildDotNetHighlightOptions(jsObject.highlightOptions);
        }
    if (hasValue(jsObject.connectionError)) {
        dotNetStreamLayerView.connectionError = jsObject.connectionError;
    }
    if (hasValue(jsObject.connectionStatus)) {
        dotNetStreamLayerView.connectionStatus = jsObject.connectionStatus;
    }
    if (hasValue(jsObject.spatialReferenceSupported)) {
        dotNetStreamLayerView.spatialReferenceSupported = jsObject.spatialReferenceSupported;
    }
    if (hasValue(jsObject.suspended)) {
        dotNetStreamLayerView.suspended = jsObject.suspended;
    }
    if (hasValue(jsObject.updating)) {
        dotNetStreamLayerView.updating = jsObject.updating;
    }
    if (hasValue(jsObject.visibleAtCurrentScale)) {
        dotNetStreamLayerView.visibleAtCurrentScale = jsObject.visibleAtCurrentScale;
    }
    if (hasValue(jsObject.visibleAtCurrentTimeExtent)) {
        dotNetStreamLayerView.visibleAtCurrentTimeExtent = jsObject.visibleAtCurrentTimeExtent;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetStreamLayerView.id = k;
                break;
            }
        }
    }

    return dotNetStreamLayerView;
}

