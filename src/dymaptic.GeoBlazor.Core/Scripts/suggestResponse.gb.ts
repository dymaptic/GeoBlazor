// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetSuggestResponse } from './suggestResponse';

export async function buildJsSuggestResponseGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSuggestResponse: any = {};
    if (hasValue(dotNetObject.results)) {
        let { buildJsSuggestResponseResults } = await import('./suggestResponseResults');
        jsSuggestResponse.results = await Promise.all(dotNetObject.results.map(async i => await buildJsSuggestResponseResults(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.activeSourceIndex)) {
        jsSuggestResponse.activeSourceIndex = dotNetObject.activeSourceIndex;
    }
    if (hasValue(dotNetObject.errors)) {
        jsSuggestResponse.errors = dotNetObject.errors;
    }
    if (hasValue(dotNetObject.numResults)) {
        jsSuggestResponse.numResults = dotNetObject.numResults;
    }
    if (hasValue(dotNetObject.searchTerm)) {
        jsSuggestResponse.searchTerm = dotNetObject.searchTerm;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSuggestResponse);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSuggestResponse;
    
    return jsSuggestResponse;
}


export async function buildDotNetSuggestResponseGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsSuggestResponse } = await import('./suggestResponse');
        jsComponentRef = await buildJsSuggestResponse(jsObject, layerId, viewId);
    }
    
    let dotNetSuggestResponse: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.results)) {
        let { buildDotNetSuggestResponseResults } = await import('./suggestResponseResults');
        dotNetSuggestResponse.results = await Promise.all(jsObject.results.map(async i => await buildDotNetSuggestResponseResults(i, layerId, viewId)));
    }
    if (hasValue(jsObject.activeSourceIndex)) {
        dotNetSuggestResponse.activeSourceIndex = jsObject.activeSourceIndex;
    }
    if (hasValue(jsObject.errors)) {
        dotNetSuggestResponse.errors = jsObject.errors;
    }
    if (hasValue(jsObject.numResults)) {
        dotNetSuggestResponse.numResults = jsObject.numResults;
    }
    if (hasValue(jsObject.searchTerm)) {
        dotNetSuggestResponse.searchTerm = jsObject.searchTerm;
    }

    return dotNetSuggestResponse;
}

