// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import MeshMaterialMetallicRoughness from '@arcgis/core/geometry/support/MeshMaterialMetallicRoughness';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class MeshMaterialMetallicRoughnessGenerated implements IPropertyWrapper {
    public component: MeshMaterialMetallicRoughness;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: MeshMaterialMetallicRoughness) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getColor(): Promise<any> {
        if (!hasValue(this.component.color)) {
            return null;
        }
        
        let { buildDotNetMapColor } = await import('./mapColor');
        return buildDotNetMapColor(this.component.color);
    }
    async setColor(value: any): Promise<void> {
        let { buildJsMapColor } = await import('./mapColor');
        this.component.color =  buildJsMapColor(value);
    }
    async getColorTexture(): Promise<any> {
        if (!hasValue(this.component.colorTexture)) {
            return null;
        }
        
        let { buildDotNetMeshTexture } = await import('./meshTexture');
        return await buildDotNetMeshTexture(this.component.colorTexture, this.layerId, this.viewId);
    }
    async setColorTexture(value: any): Promise<void> {
        let { buildJsMeshTexture } = await import('./meshTexture');
        this.component.colorTexture = await  buildJsMeshTexture(value, this.layerId, this.viewId);
    }
    async getColorTextureTransform(): Promise<any> {
        if (!hasValue(this.component.colorTextureTransform)) {
            return null;
        }
        
        let { buildDotNetMeshTextureTransform } = await import('./meshTextureTransform');
        return await buildDotNetMeshTextureTransform(this.component.colorTextureTransform, this.layerId, this.viewId);
    }
    async setColorTextureTransform(value: any): Promise<void> {
        let { buildJsMeshTextureTransform } = await import('./meshTextureTransform');
        this.component.colorTextureTransform = await  buildJsMeshTextureTransform(value, this.layerId, this.viewId);
    }
    async getEmissiveColor(): Promise<any> {
        if (!hasValue(this.component.emissiveColor)) {
            return null;
        }
        
        let { buildDotNetMapColor } = await import('./mapColor');
        return buildDotNetMapColor(this.component.emissiveColor);
    }
    async setEmissiveColor(value: any): Promise<void> {
        let { buildJsMapColor } = await import('./mapColor');
        this.component.emissiveColor =  buildJsMapColor(value);
    }
    async getEmissiveTexture(): Promise<any> {
        if (!hasValue(this.component.emissiveTexture)) {
            return null;
        }
        
        let { buildDotNetMeshTexture } = await import('./meshTexture');
        return await buildDotNetMeshTexture(this.component.emissiveTexture, this.layerId, this.viewId);
    }
    async setEmissiveTexture(value: any): Promise<void> {
        let { buildJsMeshTexture } = await import('./meshTexture');
        this.component.emissiveTexture = await  buildJsMeshTexture(value, this.layerId, this.viewId);
    }
    async getEmissiveTextureTransform(): Promise<any> {
        if (!hasValue(this.component.emissiveTextureTransform)) {
            return null;
        }
        
        let { buildDotNetMeshTextureTransform } = await import('./meshTextureTransform');
        return await buildDotNetMeshTextureTransform(this.component.emissiveTextureTransform, this.layerId, this.viewId);
    }
    async setEmissiveTextureTransform(value: any): Promise<void> {
        let { buildJsMeshTextureTransform } = await import('./meshTextureTransform');
        this.component.emissiveTextureTransform = await  buildJsMeshTextureTransform(value, this.layerId, this.viewId);
    }
    async getMetallicRoughnessTexture(): Promise<any> {
        if (!hasValue(this.component.metallicRoughnessTexture)) {
            return null;
        }
        
        let { buildDotNetMeshTexture } = await import('./meshTexture');
        return await buildDotNetMeshTexture(this.component.metallicRoughnessTexture, this.layerId, this.viewId);
    }
    async setMetallicRoughnessTexture(value: any): Promise<void> {
        let { buildJsMeshTexture } = await import('./meshTexture');
        this.component.metallicRoughnessTexture = await  buildJsMeshTexture(value, this.layerId, this.viewId);
    }
    async getNormalTexture(): Promise<any> {
        if (!hasValue(this.component.normalTexture)) {
            return null;
        }
        
        let { buildDotNetMeshTexture } = await import('./meshTexture');
        return await buildDotNetMeshTexture(this.component.normalTexture, this.layerId, this.viewId);
    }
    async setNormalTexture(value: any): Promise<void> {
        let { buildJsMeshTexture } = await import('./meshTexture');
        this.component.normalTexture = await  buildJsMeshTexture(value, this.layerId, this.viewId);
    }
    async getNormalTextureTransform(): Promise<any> {
        if (!hasValue(this.component.normalTextureTransform)) {
            return null;
        }
        
        let { buildDotNetMeshTextureTransform } = await import('./meshTextureTransform');
        return await buildDotNetMeshTextureTransform(this.component.normalTextureTransform, this.layerId, this.viewId);
    }
    async setNormalTextureTransform(value: any): Promise<void> {
        let { buildJsMeshTextureTransform } = await import('./meshTextureTransform');
        this.component.normalTextureTransform = await  buildJsMeshTextureTransform(value, this.layerId, this.viewId);
    }
    async getOcclusionTexture(): Promise<any> {
        if (!hasValue(this.component.occlusionTexture)) {
            return null;
        }
        
        let { buildDotNetMeshTexture } = await import('./meshTexture');
        return await buildDotNetMeshTexture(this.component.occlusionTexture, this.layerId, this.viewId);
    }
    async setOcclusionTexture(value: any): Promise<void> {
        let { buildJsMeshTexture } = await import('./meshTexture');
        this.component.occlusionTexture = await  buildJsMeshTexture(value, this.layerId, this.viewId);
    }
    async getOcclusionTextureTransform(): Promise<any> {
        if (!hasValue(this.component.occlusionTextureTransform)) {
            return null;
        }
        
        let { buildDotNetMeshTextureTransform } = await import('./meshTextureTransform');
        return await buildDotNetMeshTextureTransform(this.component.occlusionTextureTransform, this.layerId, this.viewId);
    }
    async setOcclusionTextureTransform(value: any): Promise<void> {
        let { buildJsMeshTextureTransform } = await import('./meshTextureTransform');
        this.component.occlusionTextureTransform = await  buildJsMeshTextureTransform(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsMeshMaterialMetallicRoughnessGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsMeshMaterialMetallicRoughness = new MeshMaterialMetallicRoughness();
    if (hasValue(dotNetObject.color)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsMeshMaterialMetallicRoughness.color = buildJsMapColor(dotNetObject.color) as any;
    }
    if (hasValue(dotNetObject.colorTexture)) {
        let { buildJsMeshTexture } = await import('./meshTexture');
        jsMeshMaterialMetallicRoughness.colorTexture = await buildJsMeshTexture(dotNetObject.colorTexture, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.colorTextureTransform)) {
        let { buildJsMeshTextureTransform } = await import('./meshTextureTransform');
        jsMeshMaterialMetallicRoughness.colorTextureTransform = await buildJsMeshTextureTransform(dotNetObject.colorTextureTransform, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.emissiveColor)) {
        let { buildJsMapColor } = await import('./mapColor');
        jsMeshMaterialMetallicRoughness.emissiveColor = buildJsMapColor(dotNetObject.emissiveColor) as any;
    }
    if (hasValue(dotNetObject.emissiveTexture)) {
        let { buildJsMeshTexture } = await import('./meshTexture');
        jsMeshMaterialMetallicRoughness.emissiveTexture = await buildJsMeshTexture(dotNetObject.emissiveTexture, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.emissiveTextureTransform)) {
        let { buildJsMeshTextureTransform } = await import('./meshTextureTransform');
        jsMeshMaterialMetallicRoughness.emissiveTextureTransform = await buildJsMeshTextureTransform(dotNetObject.emissiveTextureTransform, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.metallicRoughnessTexture)) {
        let { buildJsMeshTexture } = await import('./meshTexture');
        jsMeshMaterialMetallicRoughness.metallicRoughnessTexture = await buildJsMeshTexture(dotNetObject.metallicRoughnessTexture, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.normalTexture)) {
        let { buildJsMeshTexture } = await import('./meshTexture');
        jsMeshMaterialMetallicRoughness.normalTexture = await buildJsMeshTexture(dotNetObject.normalTexture, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.normalTextureTransform)) {
        let { buildJsMeshTextureTransform } = await import('./meshTextureTransform');
        jsMeshMaterialMetallicRoughness.normalTextureTransform = await buildJsMeshTextureTransform(dotNetObject.normalTextureTransform, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.occlusionTexture)) {
        let { buildJsMeshTexture } = await import('./meshTexture');
        jsMeshMaterialMetallicRoughness.occlusionTexture = await buildJsMeshTexture(dotNetObject.occlusionTexture, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.occlusionTextureTransform)) {
        let { buildJsMeshTextureTransform } = await import('./meshTextureTransform');
        jsMeshMaterialMetallicRoughness.occlusionTextureTransform = await buildJsMeshTextureTransform(dotNetObject.occlusionTextureTransform, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.alphaCutoff)) {
        jsMeshMaterialMetallicRoughness.alphaCutoff = dotNetObject.alphaCutoff;
    }
    if (hasValue(dotNetObject.alphaMode)) {
        jsMeshMaterialMetallicRoughness.alphaMode = dotNetObject.alphaMode;
    }
    if (hasValue(dotNetObject.doubleSided)) {
        jsMeshMaterialMetallicRoughness.doubleSided = dotNetObject.doubleSided;
    }
    if (hasValue(dotNetObject.metallic)) {
        jsMeshMaterialMetallicRoughness.metallic = dotNetObject.metallic;
    }
    if (hasValue(dotNetObject.roughness)) {
        jsMeshMaterialMetallicRoughness.roughness = dotNetObject.roughness;
    }
    let { default: MeshMaterialMetallicRoughnessWrapper } = await import('./meshMaterialMetallicRoughness');
    let meshMaterialMetallicRoughnessWrapper = new MeshMaterialMetallicRoughnessWrapper(jsMeshMaterialMetallicRoughness);
    meshMaterialMetallicRoughnessWrapper.geoBlazorId = dotNetObject.id;
    meshMaterialMetallicRoughnessWrapper.viewId = viewId;
    meshMaterialMetallicRoughnessWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(meshMaterialMetallicRoughnessWrapper);
    jsObjectRefs[dotNetObject.id] = meshMaterialMetallicRoughnessWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsMeshMaterialMetallicRoughness;
    
    let { buildDotNetMeshMaterialMetallicRoughness } = await import('./meshMaterialMetallicRoughness');
    let dnInstantiatedObject = await buildDotNetMeshMaterialMetallicRoughness(jsMeshMaterialMetallicRoughness, layerId, viewId);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for MeshMaterialMetallicRoughness', e);
    }
    
    return jsMeshMaterialMetallicRoughness;
}

export async function buildDotNetMeshMaterialMetallicRoughnessGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetMeshMaterialMetallicRoughness: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.color)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetMeshMaterialMetallicRoughness.color = buildDotNetMapColor(jsObject.color);
        }
        if (hasValue(jsObject.colorTexture)) {
            let { buildDotNetMeshTexture } = await import('./meshTexture');
            dotNetMeshMaterialMetallicRoughness.colorTexture = await buildDotNetMeshTexture(jsObject.colorTexture, layerId, viewId);
        }
        if (hasValue(jsObject.colorTextureTransform)) {
            let { buildDotNetMeshTextureTransform } = await import('./meshTextureTransform');
            dotNetMeshMaterialMetallicRoughness.colorTextureTransform = await buildDotNetMeshTextureTransform(jsObject.colorTextureTransform, layerId, viewId);
        }
        if (hasValue(jsObject.emissiveColor)) {
            let { buildDotNetMapColor } = await import('./mapColor');
            dotNetMeshMaterialMetallicRoughness.emissiveColor = buildDotNetMapColor(jsObject.emissiveColor);
        }
        if (hasValue(jsObject.emissiveTexture)) {
            let { buildDotNetMeshTexture } = await import('./meshTexture');
            dotNetMeshMaterialMetallicRoughness.emissiveTexture = await buildDotNetMeshTexture(jsObject.emissiveTexture, layerId, viewId);
        }
        if (hasValue(jsObject.emissiveTextureTransform)) {
            let { buildDotNetMeshTextureTransform } = await import('./meshTextureTransform');
            dotNetMeshMaterialMetallicRoughness.emissiveTextureTransform = await buildDotNetMeshTextureTransform(jsObject.emissiveTextureTransform, layerId, viewId);
        }
        if (hasValue(jsObject.metallicRoughnessTexture)) {
            let { buildDotNetMeshTexture } = await import('./meshTexture');
            dotNetMeshMaterialMetallicRoughness.metallicRoughnessTexture = await buildDotNetMeshTexture(jsObject.metallicRoughnessTexture, layerId, viewId);
        }
        if (hasValue(jsObject.normalTexture)) {
            let { buildDotNetMeshTexture } = await import('./meshTexture');
            dotNetMeshMaterialMetallicRoughness.normalTexture = await buildDotNetMeshTexture(jsObject.normalTexture, layerId, viewId);
        }
        if (hasValue(jsObject.normalTextureTransform)) {
            let { buildDotNetMeshTextureTransform } = await import('./meshTextureTransform');
            dotNetMeshMaterialMetallicRoughness.normalTextureTransform = await buildDotNetMeshTextureTransform(jsObject.normalTextureTransform, layerId, viewId);
        }
        if (hasValue(jsObject.occlusionTexture)) {
            let { buildDotNetMeshTexture } = await import('./meshTexture');
            dotNetMeshMaterialMetallicRoughness.occlusionTexture = await buildDotNetMeshTexture(jsObject.occlusionTexture, layerId, viewId);
        }
        if (hasValue(jsObject.occlusionTextureTransform)) {
            let { buildDotNetMeshTextureTransform } = await import('./meshTextureTransform');
            dotNetMeshMaterialMetallicRoughness.occlusionTextureTransform = await buildDotNetMeshTextureTransform(jsObject.occlusionTextureTransform, layerId, viewId);
        }
        if (hasValue(jsObject.alphaCutoff)) {
            dotNetMeshMaterialMetallicRoughness.alphaCutoff = jsObject.alphaCutoff;
        }
        if (hasValue(jsObject.alphaMode)) {
            dotNetMeshMaterialMetallicRoughness.alphaMode = jsObject.alphaMode;
        }
        if (hasValue(jsObject.doubleSided)) {
            dotNetMeshMaterialMetallicRoughness.doubleSided = jsObject.doubleSided;
        }
        if (hasValue(jsObject.metallic)) {
            dotNetMeshMaterialMetallicRoughness.metallic = jsObject.metallic;
        }
        if (hasValue(jsObject.roughness)) {
            dotNetMeshMaterialMetallicRoughness.roughness = jsObject.roughness;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetMeshMaterialMetallicRoughness.id = k;
                break;
            }
        }
    }

    return dotNetMeshMaterialMetallicRoughness;
}

