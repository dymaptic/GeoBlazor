// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import Field from '@arcgis/core/layers/support/Field';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class FieldGenerated implements IPropertyWrapper {
    public component: Field;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: Field) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsFieldGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsField = new Field();

    if (hasValue(dotNetObject.alias)) {
        jsField.alias = dotNetObject.alias;
    }
    if (hasValue(dotNetObject.defaultValue)) {
        jsField.defaultValue = dotNetObject.defaultValue;
    }
    if (hasValue(dotNetObject.description)) {
        jsField.description = dotNetObject.description;
    }
    if (hasValue(dotNetObject.domain)) {
        jsField.domain = dotNetObject.domain;
    }
    if (hasValue(dotNetObject.editable)) {
        jsField.editable = dotNetObject.editable;
    }
    if (hasValue(dotNetObject.length)) {
        jsField.length = dotNetObject.length;
    }
    if (hasValue(dotNetObject.name)) {
        jsField.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.nullable)) {
        jsField.nullable = dotNetObject.nullable;
    }
    if (hasValue(dotNetObject.valueType)) {
        jsField.valueType = dotNetObject.valueType;
    }
    let { default: FieldWrapper } = await import('./field');
    let fieldWrapper = new FieldWrapper(jsField);
    fieldWrapper.geoBlazorId = dotNetObject.id;
    fieldWrapper.viewId = viewId;
    fieldWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(fieldWrapper);
    jsObjectRefs[dotNetObject.id] = fieldWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsField;
    
    let { buildDotNetField } = await import('./field');
    let dnInstantiatedObject = await buildDotNetField(jsField);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Field', e);
    }
    
    return jsField;
}

export async function buildDotNetFieldGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetField: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.alias)) {
            dotNetField.alias = jsObject.alias;
        }
        if (hasValue(jsObject.defaultValue)) {
            dotNetField.defaultValue = jsObject.defaultValue;
        }
        if (hasValue(jsObject.description)) {
            dotNetField.description = jsObject.description;
        }
        if (hasValue(jsObject.domain)) {
            dotNetField.domain = jsObject.domain;
        }
        if (hasValue(jsObject.editable)) {
            dotNetField.editable = jsObject.editable;
        }
        if (hasValue(jsObject.length)) {
            dotNetField.length = jsObject.length;
        }
        if (hasValue(jsObject.name)) {
            dotNetField.name = jsObject.name;
        }
        if (hasValue(jsObject.nullable)) {
            dotNetField.nullable = jsObject.nullable;
        }
        if (hasValue(jsObject.type)) {
            dotNetField.type = jsObject.type;
        }
        if (hasValue(jsObject.valueType)) {
            dotNetField.valueType = jsObject.valueType;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetField.id = k;
                break;
            }
        }
    }

    return dotNetField;
}

