// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import bins = __esri.bins;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class BinsGenerated implements IPropertyWrapper {
    public component: bins;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: bins) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async getLabelSchemes(parameters: any): Promise<any> {
        let { buildJsBinsGetLabelSchemesParams } = await import('./binsGetLabelSchemesParams');
        let jsparameters = await buildJsBinsGetLabelSchemesParams(parameters, this.layerId, this.viewId) as any;
        return await this.component.getLabelSchemes(jsparameters);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsBinsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsbins: any = {}


    let { default: BinsWrapper } = await import('./bins');
    let binsWrapper = new BinsWrapper(jsbins);
    binsWrapper.geoBlazorId = dotNetObject.id;
    binsWrapper.viewId = viewId;
    binsWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(binsWrapper);
    jsObjectRefs[dotNetObject.id] = binsWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsbins;
    let { buildDotNetBins } = await import('./bins');
    let dnInstantiatedObject = await buildDotNetBins(jsbins);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Bins', e);
    }
    
    return jsbins;
}
export async function buildDotNetBinsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetBins: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetBins.id = k;
                break;
            }
        }
    }

    return dotNetBins;
}

