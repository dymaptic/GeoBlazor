// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file

import StyleOrigin from '@arcgis/core/symbols/support/StyleOrigin';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class StyleOriginGenerated implements IPropertyWrapper {
    public component: StyleOrigin;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: StyleOrigin) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getPortal(): Promise<any> {
        if (!hasValue(this.component.portal)) {
            return null;
        }
        
        let { buildDotNetPortal } = await import('./portal');
        return await buildDotNetPortal(this.component.portal);
    }
    async setPortal(value: any): Promise<void> {
        let { buildJsPortal } = await import('./portal');
        this.component.portal = await  buildJsPortal(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsStyleOriginGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsStyleOrigin = new StyleOrigin();
    if (hasValue(dotNetObject.portal)) {
        let { buildJsPortal } = await import('./portal');
        jsStyleOrigin.portal = await buildJsPortal(dotNetObject.portal, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.name)) {
        jsStyleOrigin.name = dotNetObject.name;
    }
    if (hasValue(dotNetObject.styleName)) {
        jsStyleOrigin.styleName = dotNetObject.styleName;
    }
    if (hasValue(dotNetObject.styleUrl)) {
        jsStyleOrigin.styleUrl = dotNetObject.styleUrl;
    }

    let { default: StyleOriginWrapper } = await import('./styleOrigin');
    let styleOriginWrapper = new StyleOriginWrapper(jsStyleOrigin);
    styleOriginWrapper.geoBlazorId = dotNetObject.id;
    styleOriginWrapper.viewId = viewId;
    styleOriginWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(styleOriginWrapper);
    jsObjectRefs[dotNetObject.id] = styleOriginWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsStyleOrigin;
    let { buildDotNetStyleOrigin } = await import('./styleOrigin');
    let dnInstantiatedObject = await buildDotNetStyleOrigin(jsStyleOrigin);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for StyleOrigin', e);
    }
    
    return jsStyleOrigin;
}
export async function buildDotNetStyleOriginGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetStyleOrigin: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.portal)) {
            let { buildDotNetPortal } = await import('./portal');
            dotNetStyleOrigin.portal = await buildDotNetPortal(jsObject.portal);
        }
        if (hasValue(jsObject.name)) {
            dotNetStyleOrigin.name = jsObject.name;
        }
        if (hasValue(jsObject.styleName)) {
            dotNetStyleOrigin.styleName = jsObject.styleName;
        }
        if (hasValue(jsObject.styleUrl)) {
            dotNetStyleOrigin.styleUrl = jsObject.styleUrl;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetStyleOrigin.id = k;
                break;
            }
        }
    }

    return dotNetStyleOrigin;
}

