// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetHeatmapSchemes } from './heatmapSchemes';

export async function buildJsHeatmapSchemesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsHeatmapSchemes: any = {};
    if (hasValue(dotNetObject.primaryScheme)) {
        let { buildJsHeatmapScheme } = await import('./heatmapScheme');
        jsHeatmapSchemes.primaryScheme = await buildJsHeatmapScheme(dotNetObject.primaryScheme, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.secondarySchemes)) {
        let { buildJsHeatmapScheme } = await import('./heatmapScheme');
        jsHeatmapSchemes.secondarySchemes = await Promise.all(dotNetObject.secondarySchemes.map(async i => await buildJsHeatmapScheme(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.basemapId)) {
        jsHeatmapSchemes.basemapId = dotNetObject.basemapId;
    }
    if (hasValue(dotNetObject.basemapTheme)) {
        jsHeatmapSchemes.basemapTheme = dotNetObject.basemapTheme;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsHeatmapSchemes);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsHeatmapSchemes;
    
    let dnInstantiatedObject = await buildDotNetHeatmapSchemes(jsHeatmapSchemes);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for HeatmapSchemes', e);
    }
    
    return jsHeatmapSchemes;
}

export async function buildDotNetHeatmapSchemesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetHeatmapSchemes: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.primaryScheme)) {
            let { buildDotNetHeatmapScheme } = await import('./heatmapScheme');
            dotNetHeatmapSchemes.primaryScheme = await buildDotNetHeatmapScheme(jsObject.primaryScheme);
        }
        if (hasValue(jsObject.secondarySchemes)) {
            let { buildDotNetHeatmapScheme } = await import('./heatmapScheme');
            dotNetHeatmapSchemes.secondarySchemes = await Promise.all(jsObject.secondarySchemes.map(async i => await buildDotNetHeatmapScheme(i)));
        }
    if (hasValue(jsObject.basemapId)) {
        dotNetHeatmapSchemes.basemapId = jsObject.basemapId;
    }
    if (hasValue(jsObject.basemapTheme)) {
        dotNetHeatmapSchemes.basemapTheme = jsObject.basemapTheme;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetHeatmapSchemes.id = k;
                break;
            }
        }
    }

    return dotNetHeatmapSchemes;
}

