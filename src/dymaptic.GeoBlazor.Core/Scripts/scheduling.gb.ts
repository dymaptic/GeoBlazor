// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import scheduling = __esri.scheduling;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SchedulingGenerated implements IPropertyWrapper {
    public component: scheduling;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: scheduling) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async addFrameTask(phases: any): Promise<any> {
        let result = this.component.addFrameTask(phases);
        let { buildDotNetFrameTaskHandle } = await import('./frameTaskHandle');
        return await buildDotNetFrameTaskHandle(result);
    }

    async schedule(callback: any): Promise<any> {
        return this.component.schedule(callback);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsSchedulingGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsscheduling: any = {};


    let { default: SchedulingWrapper } = await import('./scheduling');
    let schedulingWrapper = new SchedulingWrapper(jsscheduling);
    schedulingWrapper.geoBlazorId = dotNetObject.id;
    schedulingWrapper.viewId = viewId;
    schedulingWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(schedulingWrapper);
    jsObjectRefs[dotNetObject.id] = schedulingWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsscheduling;
    let { buildDotNetScheduling } = await import('./scheduling');
    let dnInstantiatedObject = await buildDotNetScheduling(jsscheduling);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Scheduling', e);
    }
    
    return jsscheduling;
}

export async function buildDotNetSchedulingGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetScheduling: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetScheduling.id = k;
                break;
            }
        }
    }

    return dotNetScheduling;
}

