// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import DirectionsViewModel from '@arcgis/core/widgets/Directions/DirectionsViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class DirectionsViewModelGenerated implements IPropertyWrapper {
    public component: DirectionsViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: DirectionsViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async centerAt(stopOrManeuver: any): Promise<void> {
        let { buildJsGraphic } = await import('./graphic');
        let jsStopOrManeuver = buildJsGraphic(stopOrManeuver) as any;
        this.component.centerAt(jsStopOrManeuver);
    }

    async clearHighlights(): Promise<void> {
        this.component.clearHighlights();
    }

    async clearResults(): Promise<void> {
        this.component.clearResults();
    }

    async getCostAttribute(attributeName: any): Promise<any> {
        return this.component.getCostAttribute(attributeName);
    }

    async getDirections(): Promise<any> {
        return await this.component.getDirections();
    }

    async load(): Promise<any> {
        return await this.component.load();
    }

    async reset(): Promise<void> {
        this.component.reset();
    }

    async save(): Promise<any> {
        let result = await this.component.save();
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(result);
    }

    async saveAs(portalItem: any,
        options: any): Promise<any> {
        let { buildJsPortalItem } = await import('./portalItem');
        let jsPortalItem = await buildJsPortalItem(portalItem, this.layerId, this.viewId) as any;
        let { buildJsDirectionsViewModelSaveAsOptions } = await import('./directionsViewModelSaveAsOptions');
        let jsOptions = await buildJsDirectionsViewModelSaveAsOptions(options, this.layerId, this.viewId) as any;
        let result = await this.component.saveAs(jsPortalItem,
            jsOptions);
        let { buildDotNetPortalItem } = await import('./portalItem');
        return await buildDotNetPortalItem(result);
    }

    async zoomToRoute(): Promise<void> {
        this.component.zoomToRoute();
    }

    // region properties
    
    async getLastRoute(): Promise<any> {
        if (!hasValue(this.component.lastRoute)) {
            return null;
        }
        
        let { buildDotNetDirectionsViewModelLastRoute } = await import('./directionsViewModelLastRoute');
        return await buildDotNetDirectionsViewModelLastRoute(this.component.lastRoute);
    }
    async getLayer(): Promise<any> {
        if (!hasValue(this.component.layer)) {
            return null;
        }
        
        let { buildDotNetRouteLayer } = await import('./routeLayer');
        return await buildDotNetRouteLayer(this.component.layer);
    }
    async setLayer(value: any): Promise<void> {
        let { buildJsRouteLayer } = await import('./routeLayer');
        this.component.layer = await  buildJsRouteLayer(value, this.layerId, this.viewId);
    }
    async getRouteParameters(): Promise<any> {
        if (!hasValue(this.component.routeParameters)) {
            return null;
        }
        
        let { buildDotNetRouteParameters } = await import('./routeParameters');
        return await buildDotNetRouteParameters(this.component.routeParameters);
    }
    async setRouteParameters(value: any): Promise<void> {
        let { buildJsRouteParameters } = await import('./routeParameters');
        this.component.routeParameters = await  buildJsRouteParameters(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsDirectionsViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsDirectionsViewModel = new DirectionsViewModel();
    if (hasValue(dotNetObject.layer)) {
        let { buildJsRouteLayer } = await import('./routeLayer');
        jsDirectionsViewModel.layer = await buildJsRouteLayer(dotNetObject.layer, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.routeParameters)) {
        let { buildJsRouteParameters } = await import('./routeParameters');
        jsDirectionsViewModel.routeParameters = await buildJsRouteParameters(dotNetObject.routeParameters, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.apiKey)) {
        jsDirectionsViewModel.apiKey = dotNetObject.apiKey;
    }
    if (hasValue(dotNetObject.goToOverride)) {
        jsDirectionsViewModel.goToOverride = dotNetObject.goToOverride;
    }
    if (hasValue(dotNetObject.maxStops)) {
        jsDirectionsViewModel.maxStops = dotNetObject.maxStops;
    }
    if (hasValue(dotNetObject.selectedTravelMode)) {
        jsDirectionsViewModel.selectedTravelMode = dotNetObject.selectedTravelMode;
    }
    if (hasValue(dotNetObject.view)) {
        jsDirectionsViewModel.view = dotNetObject.view;
    }

    let { default: DirectionsViewModelWrapper } = await import('./directionsViewModel');
    let directionsViewModelWrapper = new DirectionsViewModelWrapper(jsDirectionsViewModel);
    directionsViewModelWrapper.geoBlazorId = dotNetObject.id;
    directionsViewModelWrapper.viewId = viewId;
    directionsViewModelWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(directionsViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = directionsViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsDirectionsViewModel;
    let { buildDotNetDirectionsViewModel } = await import('./directionsViewModel');
    let dnInstantiatedObject = await buildDotNetDirectionsViewModel(jsDirectionsViewModel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for DirectionsViewModel', e);
    }
    
    return jsDirectionsViewModel;
}

export async function buildDotNetDirectionsViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDirectionsViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.lastRoute)) {
            let { buildDotNetDirectionsViewModelLastRoute } = await import('./directionsViewModelLastRoute');
            dotNetDirectionsViewModel.lastRoute = await buildDotNetDirectionsViewModelLastRoute(jsObject.lastRoute);
        }
        if (hasValue(jsObject.routeParameters)) {
            let { buildDotNetRouteParameters } = await import('./routeParameters');
            dotNetDirectionsViewModel.routeParameters = await buildDotNetRouteParameters(jsObject.routeParameters);
        }
        if (hasValue(jsObject.apiKey)) {
            dotNetDirectionsViewModel.apiKey = jsObject.apiKey;
        }
        if (hasValue(jsObject.goToOverride)) {
            dotNetDirectionsViewModel.goToOverride = jsObject.goToOverride;
        }
        if (hasValue(jsObject.impedanceAttribute)) {
            dotNetDirectionsViewModel.impedanceAttribute = jsObject.impedanceAttribute;
        }
        if (hasValue(jsObject.maxStops)) {
            dotNetDirectionsViewModel.maxStops = jsObject.maxStops;
        }
        if (hasValue(jsObject.selectedTravelMode)) {
            dotNetDirectionsViewModel.selectedTravelMode = jsObject.selectedTravelMode;
        }
        if (hasValue(jsObject.serviceDescription)) {
            dotNetDirectionsViewModel.serviceDescription = jsObject.serviceDescription;
        }
        if (hasValue(jsObject.state)) {
            dotNetDirectionsViewModel.state = jsObject.state;
        }
        if (hasValue(jsObject.timeAttribute)) {
            dotNetDirectionsViewModel.timeAttribute = jsObject.timeAttribute;
        }
        if (hasValue(jsObject.travelModes)) {
            dotNetDirectionsViewModel.travelModes = jsObject.travelModes;
        }
        if (hasValue(jsObject.view)) {
            dotNetDirectionsViewModel.view = jsObject.view;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetDirectionsViewModel.id = k;
                break;
            }
        }
    }

    return dotNetDirectionsViewModel;
}

