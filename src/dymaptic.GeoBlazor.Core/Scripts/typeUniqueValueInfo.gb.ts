// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetTypeUniqueValueInfo } from './typeUniqueValueInfo';

export async function buildJsTypeUniqueValueInfoGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jstypeUniqueValueInfo: any = {};
    if (hasValue(dotNetObject.symbol)) {
        let { buildJsSymbol } = await import('./symbol');
        jstypeUniqueValueInfo.symbol = buildJsSymbol(dotNetObject.symbol) as any;
    }

    if (hasValue(dotNetObject.count)) {
        jstypeUniqueValueInfo.count = dotNetObject.count;
    }
    if (hasValue(dotNetObject.label)) {
        jstypeUniqueValueInfo.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.value)) {
        jstypeUniqueValueInfo.value = dotNetObject.value;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jstypeUniqueValueInfo);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jstypeUniqueValueInfo;
    
    let dnInstantiatedObject = await buildDotNetTypeUniqueValueInfo(jstypeUniqueValueInfo);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for TypeUniqueValueInfo', e);
    }
    
    return jstypeUniqueValueInfo;
}

export async function buildDotNetTypeUniqueValueInfoGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetTypeUniqueValueInfo: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.symbol)) {
            let { buildDotNetSymbol } = await import('./symbol');
            dotNetTypeUniqueValueInfo.symbol = buildDotNetSymbol(jsObject.symbol);
        }
    if (hasValue(jsObject.count)) {
        dotNetTypeUniqueValueInfo.count = jsObject.count;
    }
    if (hasValue(jsObject.label)) {
        dotNetTypeUniqueValueInfo.label = jsObject.label;
    }
    if (hasValue(jsObject.value)) {
        dotNetTypeUniqueValueInfo.value = jsObject.value;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetTypeUniqueValueInfo.id = k;
                break;
            }
        }
    }

    return dotNetTypeUniqueValueInfo;
}

