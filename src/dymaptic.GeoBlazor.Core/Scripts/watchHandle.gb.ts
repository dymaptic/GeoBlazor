// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import WatchHandle = __esri.WatchHandle;
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class WatchHandleGenerated implements IPropertyWrapper {
    public component: WatchHandle;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: WatchHandle) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {

    }
    
    async remove(): Promise<void> {
        this.component.remove();
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsWatchHandleGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsWatchHandle: any = {};


    let { default: WatchHandleWrapper } = await import('./watchHandle');
    let watchHandleWrapper = new WatchHandleWrapper(jsWatchHandle);
    watchHandleWrapper.geoBlazorId = dotNetObject.id;
    watchHandleWrapper.viewId = viewId;
    watchHandleWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(watchHandleWrapper);
    jsObjectRefs[dotNetObject.id] = watchHandleWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsWatchHandle;
    
    return jsWatchHandle;
}


export async function buildDotNetWatchHandleGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetWatchHandle: any = {};
    

    return dotNetWatchHandle;
}

