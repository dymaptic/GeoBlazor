// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetStretchRampElement } from './stretchRampElement';

export async function buildJsStretchRampElementGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsStretchRampElement: any = {};
    if (hasValue(dotNetObject.infos) && dotNetObject.infos.length > 0) {
        let { buildJsColorRampStop } = await import('./colorRampStop');
        jsStretchRampElement.infos = await Promise.all(dotNetObject.infos.map(async i => await buildJsColorRampStop(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.title)) {
        jsStretchRampElement.title = dotNetObject.title;
    }
    
    jsObjectRefs[dotNetObject.id] = jsStretchRampElement;
    arcGisObjectRefs[dotNetObject.id] = jsStretchRampElement;
    
    return jsStretchRampElement;
}


export async function buildDotNetStretchRampElementGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetStretchRampElement: any = {};
    
    if (hasValue(jsObject.infos)) {
        let { buildDotNetColorRampStop } = await import('./colorRampStop');
        dotNetStretchRampElement.infos = await Promise.all(jsObject.infos.map(async i => await buildDotNetColorRampStop(i, layerId, viewId)));
    }
    
    if (hasValue(jsObject.title)) {
        dotNetStretchRampElement.title = jsObject.title;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetStretchRampElement.type = jsObject.type;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetStretchRampElement.id = geoBlazorId;
    }

    return dotNetStretchRampElement;
}

