// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import AreaMeasurement2DViewModel from '@arcgis/core/widgets/AreaMeasurement2D/AreaMeasurement2DViewModel';
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class AreaMeasurement2DViewModelGenerated implements IPropertyWrapper {
    public component: AreaMeasurement2DViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: AreaMeasurement2DViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {
        if (hasValue(dotNetObject.snappingOptions)) {
            let { buildJsSnappingOptions } = await import('./snappingOptions');
            this.component.snappingOptions = await buildJsSnappingOptions(dotNetObject.snappingOptions, this.layerId, this.viewId) as any;
        }

        if (hasValue(dotNetObject.unit)) {
            this.component.unit = dotNetObject.unit;
        }
        if (hasValue(dotNetObject.unitOptions) && dotNetObject.unitOptions.length > 0) {
            this.component.unitOptions = dotNetObject.unitOptions;
        }
    }
    
    async clear(): Promise<void> {
        this.component.clear();
    }

    async start(): Promise<void> {
        this.component.start();
    }

    // region properties
    
    async getMeasurement(): Promise<any> {
        if (!hasValue(this.component.measurement)) {
            return null;
        }
        
        let { buildDotNetAreaMeasurement2DViewModelMeasurement } = await import('./areaMeasurement2DViewModelMeasurement');
        return await buildDotNetAreaMeasurement2DViewModelMeasurement(this.component.measurement, this.viewId);
    }
    
    async getMeasurementLabel(): Promise<any> {
        if (!hasValue(this.component.measurementLabel)) {
            return null;
        }
        
        let { buildDotNetAreaMeasurement2DViewModelMeasurementLabel } = await import('./areaMeasurement2DViewModelMeasurementLabel');
        return await buildDotNetAreaMeasurement2DViewModelMeasurementLabel(this.component.measurementLabel, this.viewId);
    }
    
    async getSnappingOptions(): Promise<any> {
        if (!hasValue(this.component.snappingOptions)) {
            return null;
        }
        
        let { buildDotNetSnappingOptions } = await import('./snappingOptions');
        return await buildDotNetSnappingOptions(this.component.snappingOptions, this.viewId);
    }
    
    async setSnappingOptions(value: any): Promise<void> {
        let { buildJsSnappingOptions } = await import('./snappingOptions');
        this.component.snappingOptions = await  buildJsSnappingOptions(value, this.layerId, this.viewId);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsAreaMeasurement2DViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsAreaMeasurement2DViewModel: any = {};
    if (hasValue(viewId)) {
        jsAreaMeasurement2DViewModel.view = arcGisObjectRefs[viewId!];
    }
    if (hasValue(dotNetObject.snappingOptions)) {
        let { buildJsSnappingOptions } = await import('./snappingOptions');
        jsAreaMeasurement2DViewModel.snappingOptions = await buildJsSnappingOptions(dotNetObject.snappingOptions, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.unit)) {
        jsAreaMeasurement2DViewModel.unit = dotNetObject.unit;
    }
    if (hasValue(dotNetObject.unitOptions) && dotNetObject.unitOptions.length > 0) {
        jsAreaMeasurement2DViewModel.unitOptions = dotNetObject.unitOptions;
    }

    let { default: AreaMeasurement2DViewModelWrapper } = await import('./areaMeasurement2DViewModel');
    let areaMeasurement2DViewModelWrapper = new AreaMeasurement2DViewModelWrapper(jsAreaMeasurement2DViewModel);
    areaMeasurement2DViewModelWrapper.geoBlazorId = dotNetObject.id;
    areaMeasurement2DViewModelWrapper.viewId = viewId;
    areaMeasurement2DViewModelWrapper.layerId = layerId;
    
    jsObjectRefs[dotNetObject.id] = areaMeasurement2DViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsAreaMeasurement2DViewModel;
    
    return jsAreaMeasurement2DViewModel;
}


export async function buildDotNetAreaMeasurement2DViewModelGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAreaMeasurement2DViewModel: any = {};
    
    if (hasValue(jsObject.measurement)) {
        let { buildDotNetAreaMeasurement2DViewModelMeasurement } = await import('./areaMeasurement2DViewModelMeasurement');
        dotNetAreaMeasurement2DViewModel.measurement = await buildDotNetAreaMeasurement2DViewModelMeasurement(jsObject.measurement, viewId);
    }
    
    if (hasValue(jsObject.measurementLabel)) {
        let { buildDotNetAreaMeasurement2DViewModelMeasurementLabel } = await import('./areaMeasurement2DViewModelMeasurementLabel');
        dotNetAreaMeasurement2DViewModel.measurementLabel = await buildDotNetAreaMeasurement2DViewModelMeasurementLabel(jsObject.measurementLabel, viewId);
    }
    
    if (hasValue(jsObject.snappingOptions)) {
        let { buildDotNetSnappingOptions } = await import('./snappingOptions');
        dotNetAreaMeasurement2DViewModel.snappingOptions = await buildDotNetSnappingOptions(jsObject.snappingOptions, viewId);
    }
    
    if (hasValue(jsObject.state)) {
        dotNetAreaMeasurement2DViewModel.state = removeCircularReferences(jsObject.state);
    }
    
    if (hasValue(jsObject.unit)) {
        dotNetAreaMeasurement2DViewModel.unit = removeCircularReferences(jsObject.unit);
    }
    
    if (hasValue(jsObject.unitOptions)) {
        dotNetAreaMeasurement2DViewModel.unitOptions = removeCircularReferences(jsObject.unitOptions);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetAreaMeasurement2DViewModel.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        if (hasValue(dotNetRef)) {
            try {
                dotNetAreaMeasurement2DViewModel.id = await dotNetRef.invokeMethodAsync('GetId');
            } catch (e) {
                console.error('Error invoking GetId for AreaMeasurement2DViewModel', e);
            }
        }
    }
    if (hasValue(dotNetAreaMeasurement2DViewModel.id)) {
        jsObjectRefs[dotNetAreaMeasurement2DViewModel.id] ??= jsObject;
        arcGisObjectRefs[dotNetAreaMeasurement2DViewModel.id] ??= jsObject;
    }

    return dotNetAreaMeasurement2DViewModel;
}

