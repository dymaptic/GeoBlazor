// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import AreaMeasurement2DViewModel from '@arcgis/core/widgets/AreaMeasurement2D/AreaMeasurement2DViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class AreaMeasurement2DViewModelGenerated implements IPropertyWrapper {
    public component: AreaMeasurement2DViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: AreaMeasurement2DViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    

    async updateComponent(dotNetObject: any): Promise<void> {

        if (hasValue(dotNetObject.geodesicDistanceThreshold)) {
            this.component.geodesicDistanceThreshold = dotNetObject.geodesicDistanceThreshold;
        }
        if (hasValue(dotNetObject.unit)) {
            this.component.unit = dotNetObject.unit;
        }
        if (hasValue(dotNetObject.unitOptions) && dotNetObject.unitOptions.length > 0) {
            this.component.unitOptions = dotNetObject.unitOptions;
        }
    }
    
    async clear(): Promise<void> {
        this.component.clear();
    }

    async start(): Promise<void> {
        this.component.start();
    }

    // region properties
    
    async getMeasurement(): Promise<any> {
        if (!hasValue(this.component.measurement)) {
            return null;
        }
        
        let { buildDotNetAreaMeasurement2DViewModelMeasurement } = await import('./areaMeasurement2DViewModelMeasurement');
        return await buildDotNetAreaMeasurement2DViewModelMeasurement(this.component.measurement);
    }
    
    async getMeasurementLabel(): Promise<any> {
        if (!hasValue(this.component.measurementLabel)) {
            return null;
        }
        
        let { buildDotNetAreaMeasurement2DViewModelMeasurementLabel } = await import('./areaMeasurement2DViewModelMeasurementLabel');
        return await buildDotNetAreaMeasurement2DViewModelMeasurementLabel(this.component.measurementLabel);
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsAreaMeasurement2DViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsAreaMeasurement2DViewModel: any = {};
    if (hasValue(viewId)) {
        jsAreaMeasurement2DViewModel.view = arcGisObjectRefs[viewId!];
    }

    if (hasValue(dotNetObject.geodesicDistanceThreshold)) {
        jsAreaMeasurement2DViewModel.geodesicDistanceThreshold = dotNetObject.geodesicDistanceThreshold;
    }
    if (hasValue(dotNetObject.unit)) {
        jsAreaMeasurement2DViewModel.unit = dotNetObject.unit;
    }
    if (hasValue(dotNetObject.unitOptions) && dotNetObject.unitOptions.length > 0) {
        jsAreaMeasurement2DViewModel.unitOptions = dotNetObject.unitOptions;
    }

    let { default: AreaMeasurement2DViewModelWrapper } = await import('./areaMeasurement2DViewModel');
    let areaMeasurement2DViewModelWrapper = new AreaMeasurement2DViewModelWrapper(jsAreaMeasurement2DViewModel);
    areaMeasurement2DViewModelWrapper.geoBlazorId = dotNetObject.id;
    areaMeasurement2DViewModelWrapper.viewId = viewId;
    areaMeasurement2DViewModelWrapper.layerId = layerId;
    
    let jsObjectRef = DotNet.createJSObjectReference(areaMeasurement2DViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = areaMeasurement2DViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsAreaMeasurement2DViewModel;
    
    try {
        let { buildDotNetAreaMeasurement2DViewModel } = await import('./areaMeasurement2DViewModel');
        let dnInstantiatedObject = await buildDotNetAreaMeasurement2DViewModel(jsAreaMeasurement2DViewModel);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type AreaMeasurement2DViewModel detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for AreaMeasurement2DViewModel', e);
    }
    
    return jsAreaMeasurement2DViewModel;
}


export async function buildDotNetAreaMeasurement2DViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAreaMeasurement2DViewModel: any = {};
    
    if (hasValue(jsObject.measurement)) {
        let { buildDotNetAreaMeasurement2DViewModelMeasurement } = await import('./areaMeasurement2DViewModelMeasurement');
        dotNetAreaMeasurement2DViewModel.measurement = await buildDotNetAreaMeasurement2DViewModelMeasurement(jsObject.measurement);
    }
    
    if (hasValue(jsObject.measurementLabel)) {
        let { buildDotNetAreaMeasurement2DViewModelMeasurementLabel } = await import('./areaMeasurement2DViewModelMeasurementLabel');
        dotNetAreaMeasurement2DViewModel.measurementLabel = await buildDotNetAreaMeasurement2DViewModelMeasurementLabel(jsObject.measurementLabel);
    }
    
    if (hasValue(jsObject.state)) {
        dotNetAreaMeasurement2DViewModel.state = jsObject.state;
    }
    
    if (hasValue(jsObject.unit)) {
        dotNetAreaMeasurement2DViewModel.unit = jsObject.unit;
    }
    
    if (hasValue(jsObject.unitOptions)) {
        dotNetAreaMeasurement2DViewModel.unitOptions = jsObject.unitOptions;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetAreaMeasurement2DViewModel.id = geoBlazorId;
    }

    return dotNetAreaMeasurement2DViewModel;
}

