// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import AreaMeasurement2DViewModel from '@arcgis/core/widgets/AreaMeasurement2D/AreaMeasurement2DViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class AreaMeasurement2DViewModelGenerated implements IPropertyWrapper {
    public component: AreaMeasurement2DViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: AreaMeasurement2DViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async clear(): Promise<void> {
        this.component.clear();
    }

    async start(): Promise<void> {
        this.component.start();
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsAreaMeasurement2DViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(viewId)) {
        properties.view = arcGisObjectRefs[viewId];
    }

    if (hasValue(dotNetObject.geodesicDistanceThreshold)) {
        properties.geodesicDistanceThreshold = dotNetObject.geodesicDistanceThreshold;
    }
    if (hasValue(dotNetObject.unit)) {
        properties.unit = dotNetObject.unit;
    }
    if (hasValue(dotNetObject.unitOptions)) {
        properties.unitOptions = dotNetObject.unitOptions;
    }
    let jsAreaMeasurement2DViewModel = new AreaMeasurement2DViewModel(properties);

    let { default: AreaMeasurement2DViewModelWrapper } = await import('./areaMeasurement2DViewModel');
    let areaMeasurement2DViewModelWrapper = new AreaMeasurement2DViewModelWrapper(jsAreaMeasurement2DViewModel);
    areaMeasurement2DViewModelWrapper.geoBlazorId = dotNetObject.id;
    areaMeasurement2DViewModelWrapper.viewId = viewId;
    areaMeasurement2DViewModelWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(areaMeasurement2DViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = areaMeasurement2DViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsAreaMeasurement2DViewModel;
    let { buildDotNetAreaMeasurement2DViewModel } = await import('./areaMeasurement2DViewModel');
    let dnInstantiatedObject = await buildDotNetAreaMeasurement2DViewModel(jsAreaMeasurement2DViewModel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for AreaMeasurement2DViewModel', e);
    }
    
    return jsAreaMeasurement2DViewModel;
}

export async function buildDotNetAreaMeasurement2DViewModelGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAreaMeasurement2DViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.geodesicDistanceThreshold)) {
        dotNetAreaMeasurement2DViewModel.geodesicDistanceThreshold = jsObject.geodesicDistanceThreshold;
    }
    if (hasValue(jsObject.measurement)) {
        dotNetAreaMeasurement2DViewModel.measurement = jsObject.measurement;
    }
    if (hasValue(jsObject.measurementLabel)) {
        dotNetAreaMeasurement2DViewModel.measurementLabel = jsObject.measurementLabel;
    }
    if (hasValue(jsObject.state)) {
        dotNetAreaMeasurement2DViewModel.state = jsObject.state;
    }
    if (hasValue(jsObject.unit)) {
        dotNetAreaMeasurement2DViewModel.unit = jsObject.unit;
    }
    if (hasValue(jsObject.unitOptions)) {
        dotNetAreaMeasurement2DViewModel.unitOptions = jsObject.unitOptions;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetAreaMeasurement2DViewModel.id = k;
                break;
            }
        }
    }

    return dotNetAreaMeasurement2DViewModel;
}

