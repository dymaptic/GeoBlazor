// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetGeneralizeParameters } from './generalizeParameters';
import GeneralizeParameters from '@arcgis/core/rest/support/GeneralizeParameters';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsGeneralizeParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsGeneralizeParameters = new GeneralizeParameters();
    if (hasValue(dotNetObject.geometries)) {
        let { buildJsGeometry } = await import('./geometry');
        jsGeneralizeParameters.geometries = dotNetObject.geometries.map(i => buildJsGeometry(i)) as any;
    }

    if (hasValue(dotNetObject.deviationUnit)) {
        jsGeneralizeParameters.deviationUnit = dotNetObject.deviationUnit;
    }
    if (hasValue(dotNetObject.maxDeviation)) {
        jsGeneralizeParameters.maxDeviation = dotNetObject.maxDeviation;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsGeneralizeParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsGeneralizeParameters;
    
    let dnInstantiatedObject = await buildDotNetGeneralizeParameters(jsGeneralizeParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for GeneralizeParameters', e);
    }
    
    return jsGeneralizeParameters;
}

export async function buildDotNetGeneralizeParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetGeneralizeParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.geometries)) {
            let { buildDotNetGeometry } = await import('./geometry');
            dotNetGeneralizeParameters.geometries = jsObject.geometries.map(i => buildDotNetGeometry(i));
        }
        if (hasValue(jsObject.deviationUnit)) {
            dotNetGeneralizeParameters.deviationUnit = jsObject.deviationUnit;
        }
        if (hasValue(jsObject.maxDeviation)) {
            dotNetGeneralizeParameters.maxDeviation = jsObject.maxDeviation;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetGeneralizeParameters.id = k;
                break;
            }
        }
    }

    return dotNetGeneralizeParameters;
}

