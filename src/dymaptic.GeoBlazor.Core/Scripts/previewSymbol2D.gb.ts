// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import previewSymbol2D = __esri.previewSymbol2D;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PreviewSymbol2DGenerated implements IPropertyWrapper {
    public component: previewSymbol2D;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: previewSymbol2D) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async getContrastingBackgroundTheme(symbol: any,
        threshold: any): Promise<any> {
        return this.component.getContrastingBackgroundTheme(symbol,
            threshold);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsPreviewSymbol2DGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jspreviewSymbol2D: any = {}


    let { default: PreviewSymbol2DWrapper } = await import('./previewSymbol2D');
    let previewSymbol2DWrapper = new PreviewSymbol2DWrapper(jspreviewSymbol2D);
    previewSymbol2DWrapper.geoBlazorId = dotNetObject.id;
    previewSymbol2DWrapper.viewId = viewId;
    previewSymbol2DWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(previewSymbol2DWrapper);
    jsObjectRefs[dotNetObject.id] = previewSymbol2DWrapper;
    arcGisObjectRefs[dotNetObject.id] = jspreviewSymbol2D;
    let { buildDotNetPreviewSymbol2D } = await import('./previewSymbol2D');
    let dnInstantiatedObject = await buildDotNetPreviewSymbol2D(jspreviewSymbol2D);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PreviewSymbol2D', e);
    }
    
    return jspreviewSymbol2D;
}

export async function buildDotNetPreviewSymbol2DGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPreviewSymbol2D: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPreviewSymbol2D.id = k;
                break;
            }
        }
    }

    return dotNetPreviewSymbol2D;
}

