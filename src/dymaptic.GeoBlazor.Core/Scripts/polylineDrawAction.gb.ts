// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import PolylineDrawAction = __esri.PolylineDrawAction;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class PolylineDrawActionGenerated implements IPropertyWrapper {
    public component: PolylineDrawAction;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: PolylineDrawAction) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async canRedo(): Promise<any> {
        return this.component.canRedo();
    }

    async canUndo(): Promise<any> {
        return this.component.canUndo();
    }

    async complete(): Promise<void> {
        this.component.complete();
    }

    async getCoordsAndPointFromScreenPoint(screenPoint: any): Promise<any> {
        return this.component.getCoordsAndPointFromScreenPoint(screenPoint);
    }

    async getCoordsFromScreenPoint(screenPoint: any): Promise<any> {
        return this.component.getCoordsFromScreenPoint(screenPoint);
    }

    async redo(): Promise<void> {
        this.component.redo();
    }

    async screenToMap(screenPoint: any): Promise<any> {
        return this.component.screenToMap(screenPoint);
    }

    async undo(): Promise<void> {
        this.component.undo();
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsPolylineDrawActionGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPolylineDrawAction = new PolylineDrawAction();

    if (hasValue(dotNetObject.hasZ)) {
        jsPolylineDrawAction.hasZ = dotNetObject.hasZ;
    }
    if (hasValue(dotNetObject.mode)) {
        jsPolylineDrawAction.mode = dotNetObject.mode;
    }
    if (hasValue(dotNetObject.view)) {
        jsPolylineDrawAction.view = dotNetObject.view;
    }
    jsPolylineDrawAction.on('cursor-update', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsCursorUpdate', evt);
    });
    
    jsPolylineDrawAction.on('draw-complete', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsDrawComplete', evt);
    });
    
    jsPolylineDrawAction.on('redo', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsRedo', evt);
    });
    
    jsPolylineDrawAction.on('undo', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsUndo', evt);
    });
    
    jsPolylineDrawAction.on('vertex-add', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsVertexAdd', evt);
    });
    
    jsPolylineDrawAction.on('vertex-remove', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsVertexRemove', evt);
    });
    

    let { default: PolylineDrawActionWrapper } = await import('./polylineDrawAction');
    let polylineDrawActionWrapper = new PolylineDrawActionWrapper(jsPolylineDrawAction);
    polylineDrawActionWrapper.geoBlazorId = dotNetObject.id;
    polylineDrawActionWrapper.viewId = viewId;
    polylineDrawActionWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(polylineDrawActionWrapper);
    jsObjectRefs[dotNetObject.id] = polylineDrawActionWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsPolylineDrawAction;
    let { buildDotNetPolylineDrawAction } = await import('./polylineDrawAction');
    let dnInstantiatedObject = await buildDotNetPolylineDrawAction(jsPolylineDrawAction);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for PolylineDrawAction', e);
    }
    
    return jsPolylineDrawAction;
}
export async function buildDotNetPolylineDrawActionGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetPolylineDrawAction: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.hasZ)) {
            dotNetPolylineDrawAction.hasZ = jsObject.hasZ;
        }
        if (hasValue(jsObject.mode)) {
            dotNetPolylineDrawAction.mode = jsObject.mode;
        }
        if (hasValue(jsObject.vertices)) {
            dotNetPolylineDrawAction.vertices = jsObject.vertices;
        }
        if (hasValue(jsObject.view)) {
            dotNetPolylineDrawAction.view = jsObject.view;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetPolylineDrawAction.id = k;
                break;
            }
        }
    }

    return dotNetPolylineDrawAction;
}

