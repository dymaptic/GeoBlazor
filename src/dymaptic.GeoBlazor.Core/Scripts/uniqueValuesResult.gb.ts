// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetUniqueValuesResult } from './uniqueValuesResult';

export async function buildJsUniqueValuesResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsUniqueValuesResult: any = {};
    if (hasValue(dotNetObject.uniqueValueInfos)) {
        let { buildJsUniqueValuesResultUniqueValueInfos } = await import('./uniqueValuesResultUniqueValueInfos');
        jsUniqueValuesResult.uniqueValueInfos = await Promise.all(dotNetObject.uniqueValueInfos.map(async i => await buildJsUniqueValuesResultUniqueValueInfos(i, layerId, viewId))) as any;
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsUniqueValuesResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsUniqueValuesResult;
    
    return jsUniqueValuesResult;
}


export async function buildDotNetUniqueValuesResultGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetUniqueValuesResult: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.uniqueValueInfos)) {
        let { buildDotNetUniqueValuesResultUniqueValueInfos } = await import('./uniqueValuesResultUniqueValueInfos');
        dotNetUniqueValuesResult.uniqueValueInfos = await Promise.all(jsObject.uniqueValueInfos.map(async i => await buildDotNetUniqueValuesResultUniqueValueInfos(i)));
    }

    return dotNetUniqueValuesResult;
}

