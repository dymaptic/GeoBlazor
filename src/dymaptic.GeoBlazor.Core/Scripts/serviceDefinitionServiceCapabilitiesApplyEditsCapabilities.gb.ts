// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetServiceDefinitionServiceCapabilitiesApplyEditsCapabilities } from './serviceDefinitionServiceCapabilitiesApplyEditsCapabilities';

export async function buildJsServiceDefinitionServiceCapabilitiesApplyEditsCapabilitiesGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsServiceDefinitionServiceCapabilitiesApplyEditsCapabilities: any = {};

    if (hasValue(dotNetObject.graphDefaultRollbackOnFailure)) {
        jsServiceDefinitionServiceCapabilitiesApplyEditsCapabilities.graphDefaultRollbackOnFailure = dotNetObject.graphDefaultRollbackOnFailure;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsServiceDefinitionServiceCapabilitiesApplyEditsCapabilities);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsServiceDefinitionServiceCapabilitiesApplyEditsCapabilities;
    
    return jsServiceDefinitionServiceCapabilitiesApplyEditsCapabilities;
}


export async function buildDotNetServiceDefinitionServiceCapabilitiesApplyEditsCapabilitiesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetServiceDefinitionServiceCapabilitiesApplyEditsCapabilities: any = {};
    
    if (hasValue(jsObject.graphDefaultRollbackOnFailure)) {
        dotNetServiceDefinitionServiceCapabilitiesApplyEditsCapabilities.graphDefaultRollbackOnFailure = jsObject.graphDefaultRollbackOnFailure;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetServiceDefinitionServiceCapabilitiesApplyEditsCapabilities.id = geoBlazorId;
    }

    return dotNetServiceDefinitionServiceCapabilitiesApplyEditsCapabilities;
}

