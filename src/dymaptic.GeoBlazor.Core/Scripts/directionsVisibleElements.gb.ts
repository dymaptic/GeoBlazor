// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetDirectionsVisibleElements } from './directionsVisibleElements';

export async function buildJsDirectionsVisibleElementsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsDirectionsVisibleElements: any = {};

    if (hasValue(dotNetObject.layerDetails)) {
        jsDirectionsVisibleElements.layerDetails = dotNetObject.layerDetails;
    }
    if (hasValue(dotNetObject.saveAsButton)) {
        jsDirectionsVisibleElements.saveAsButton = dotNetObject.saveAsButton;
    }
    if (hasValue(dotNetObject.saveButton)) {
        jsDirectionsVisibleElements.saveButton = dotNetObject.saveButton;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsDirectionsVisibleElements);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsDirectionsVisibleElements;
    
    return jsDirectionsVisibleElements;
}


export async function buildDotNetDirectionsVisibleElementsGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDirectionsVisibleElements: any = {};
    
    if (hasValue(jsObject.layerDetails)) {
        dotNetDirectionsVisibleElements.layerDetails = jsObject.layerDetails;
    }
    
    if (hasValue(jsObject.saveAsButton)) {
        dotNetDirectionsVisibleElements.saveAsButton = jsObject.saveAsButton;
    }
    
    if (hasValue(jsObject.saveButton)) {
        dotNetDirectionsVisibleElements.saveButton = jsObject.saveButton;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetDirectionsVisibleElements.id = geoBlazorId;
    }

    return dotNetDirectionsVisibleElements;
}

