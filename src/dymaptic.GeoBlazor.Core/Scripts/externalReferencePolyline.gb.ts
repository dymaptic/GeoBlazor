// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetExternalReferencePolyline } from './externalReferencePolyline';

export async function buildJsExternalReferencePolylineGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsExternalReferencePolyline: any = {};
    if (hasValue(dotNetObject.spatialReference)) {
        let { buildJsExternalReferenceSpatialReference } = await import('./externalReferenceSpatialReference');
        jsExternalReferencePolyline.spatialReference = await buildJsExternalReferenceSpatialReference(dotNetObject.spatialReference, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.curvePath)) {
        jsExternalReferencePolyline.curvePath = dotNetObject.curvePath;
    }
    if (hasValue(dotNetObject.hasM)) {
        jsExternalReferencePolyline.hasM = dotNetObject.hasM;
    }
    if (hasValue(dotNetObject.hasZ)) {
        jsExternalReferencePolyline.hasZ = dotNetObject.hasZ;
    }
    if (hasValue(dotNetObject.paths)) {
        jsExternalReferencePolyline.paths = dotNetObject.paths;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsExternalReferencePolyline);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsExternalReferencePolyline;
    
    return jsExternalReferencePolyline;
}


export async function buildDotNetExternalReferencePolylineGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetExternalReferencePolyline: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.spatialReference)) {
        let { buildDotNetExternalReferenceSpatialReference } = await import('./externalReferenceSpatialReference');
        dotNetExternalReferencePolyline.spatialReference = await buildDotNetExternalReferenceSpatialReference(jsObject.spatialReference);
    }
    if (hasValue(jsObject.curvePath)) {
        dotNetExternalReferencePolyline.curvePath = jsObject.curvePath;
    }
    if (hasValue(jsObject.hasM)) {
        dotNetExternalReferencePolyline.hasM = jsObject.hasM;
    }
    if (hasValue(jsObject.hasZ)) {
        dotNetExternalReferencePolyline.hasZ = jsObject.hasZ;
    }
    if (hasValue(jsObject.paths)) {
        dotNetExternalReferencePolyline.paths = jsObject.paths;
    }

    return dotNetExternalReferencePolyline;
}

