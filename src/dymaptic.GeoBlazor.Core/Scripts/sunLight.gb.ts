// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetSunLight } from './sunLight';

export async function buildJsSunLightGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSunLight: any = {};
    if (hasValue(dotNetObject.ambient)) {
        let { buildJsColorAndIntensity } = await import('./colorAndIntensity');
        jsSunLight.ambient = await buildJsColorAndIntensity(dotNetObject.ambient, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.diffuse)) {
        let { buildJsColorAndIntensity } = await import('./colorAndIntensity');
        jsSunLight.diffuse = await buildJsColorAndIntensity(dotNetObject.diffuse, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.direction)) {
        jsSunLight.direction = dotNetObject.direction;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSunLight);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSunLight;
    
    let { buildDotNetSunLight } = await import('./sunLight');
    let dnInstantiatedObject = await buildDotNetSunLight(jsSunLight);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type SunLight detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SunLight', e);
    }
    
    return jsSunLight;
}


export async function buildDotNetSunLightGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSunLight: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.ambient)) {
        let { buildDotNetColorAndIntensity } = await import('./colorAndIntensity');
        dotNetSunLight.ambient = await buildDotNetColorAndIntensity(jsObject.ambient);
    }
    if (hasValue(jsObject.diffuse)) {
        let { buildDotNetColorAndIntensity } = await import('./colorAndIntensity');
        dotNetSunLight.diffuse = await buildDotNetColorAndIntensity(jsObject.diffuse);
    }
    if (hasValue(jsObject.direction)) {
        dotNetSunLight.direction = jsObject.direction;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetSunLight.id = geoBlazorId;
    }

    return dotNetSunLight;
}

