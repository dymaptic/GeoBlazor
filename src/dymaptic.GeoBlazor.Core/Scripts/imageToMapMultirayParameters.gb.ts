// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import ImageToMapMultirayParameters from '@arcgis/core/rest/support/ImageToMapMultirayParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue, sanitize } from './arcGisJsInterop';
import { buildDotNetImageToMapMultirayParameters } from './imageToMapMultirayParameters';

export async function buildJsImageToMapMultirayParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.geometries)) {
        let { buildJsGeometry } = await import('./geometry');
        properties.geometries = dotNetObject.geometries.map(i => buildJsGeometry(i)) as any;
    }

    if (hasValue(dotNetObject.outSpatialReference)) {
        properties.outSpatialReference = sanitize(dotNetObject.outSpatialReference);
    }
    if (hasValue(dotNetObject.rasterIds)) {
        properties.rasterIds = dotNetObject.rasterIds;
    }
    let jsImageToMapMultirayParameters = new ImageToMapMultirayParameters(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsImageToMapMultirayParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageToMapMultirayParameters;
    
    return jsImageToMapMultirayParameters;
}


export async function buildDotNetImageToMapMultirayParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageToMapMultirayParameters: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.geometries)) {
        let { buildDotNetGeometry } = await import('./geometry');
        dotNetImageToMapMultirayParameters.geometries = jsObject.geometries.map(i => buildDotNetGeometry(i));
    }
    if (hasValue(jsObject.outSpatialReference)) {
        dotNetImageToMapMultirayParameters.outSpatialReference = jsObject.outSpatialReference;
    }
    if (hasValue(jsObject.rasterIds)) {
        dotNetImageToMapMultirayParameters.rasterIds = jsObject.rasterIds;
    }

    return dotNetImageToMapMultirayParameters;
}

