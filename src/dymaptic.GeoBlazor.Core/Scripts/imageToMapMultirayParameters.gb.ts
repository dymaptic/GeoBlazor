import { buildDotNetImageToMapMultirayParameters } from './imageToMapMultirayParameters';
// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import ImageToMapMultirayParameters from '@arcgis/core/rest/support/ImageToMapMultirayParameters';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
export async function buildJsImageToMapMultirayParametersGenerated(dotNetObject: any): Promise<any> {
    let jsImageToMapMultirayParameters = new ImageToMapMultirayParameters();
    if (hasValue(dotNetObject.geometries)) {
        let { buildJsGeometry } = await import('./geometry');
        jsImageToMapMultirayParameters.geometries = dotNetObject.geometries.map(i => buildJsGeometry(i)) as any;
    }
    if (hasValue(dotNetObject.outSpatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        jsImageToMapMultirayParameters.outSpatialReference = buildJsSpatialReference(dotNetObject.outSpatialReference) as any;
    }

    if (hasValue(dotNetObject.rasterIds)) {
        jsImageToMapMultirayParameters.rasterIds = dotNetObject.rasterIds;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsImageToMapMultirayParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageToMapMultirayParameters;
    
    let dnInstantiatedObject = await buildDotNetImageToMapMultirayParameters(jsImageToMapMultirayParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ImageToMapMultirayParameters', e);
    }
    
    return jsImageToMapMultirayParameters;
}
export async function buildDotNetImageToMapMultirayParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageToMapMultirayParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.geometries)) {
            let { buildDotNetGeometry } = await import('./geometry');
            dotNetImageToMapMultirayParameters.geometries = jsObject.geometries.map(i => buildDotNetGeometry(i));
        }
        if (hasValue(jsObject.outSpatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetImageToMapMultirayParameters.outSpatialReference = buildDotNetSpatialReference(jsObject.outSpatialReference);
        }
        if (hasValue(jsObject.rasterIds)) {
            dotNetImageToMapMultirayParameters.rasterIds = jsObject.rasterIds;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetImageToMapMultirayParameters.id = k;
                break;
            }
        }
    }

    return dotNetImageToMapMultirayParameters;
}

