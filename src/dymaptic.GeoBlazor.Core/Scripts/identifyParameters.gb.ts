// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import IdentifyParameters from '@arcgis/core/rest/support/IdentifyParameters';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetIdentifyParameters } from './identifyParameters';

export async function buildJsIdentifyParametersGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsGeometry } = await import('./geometry');
        properties.geometry = buildJsGeometry(dotNetObject.geometry) as any;
    }
    if (hasValue(dotNetObject.mapExtent)) {
        let { buildJsExtent } = await import('./extent');
        properties.mapExtent = buildJsExtent(dotNetObject.mapExtent) as any;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        properties.spatialReference = buildJsSpatialReference(dotNetObject.spatialReference) as any;
    }
    if (hasValue(dotNetObject.sublayers)) {
        let { buildJsSublayer } = await import('./sublayer');
        properties.sublayers = await Promise.all(dotNetObject.sublayers.map(async i => await buildJsSublayer(i, layerId, viewId))) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.dpi)) {
        properties.dpi = dotNetObject.dpi;
    }
    if (hasValue(dotNetObject.gdbVersion)) {
        properties.gdbVersion = dotNetObject.gdbVersion;
    }
    if (hasValue(dotNetObject.geometryPrecision)) {
        properties.geometryPrecision = dotNetObject.geometryPrecision;
    }
    if (hasValue(dotNetObject.height)) {
        properties.height = dotNetObject.height;
    }
    if (hasValue(dotNetObject.historicMoment)) {
        properties.historicMoment = dotNetObject.historicMoment;
    }
    if (hasValue(dotNetObject.layerIds)) {
        properties.layerIds = dotNetObject.layerIds;
    }
    if (hasValue(dotNetObject.layerOption)) {
        properties.layerOption = dotNetObject.layerOption;
    }
    if (hasValue(dotNetObject.maxAllowableOffset)) {
        properties.maxAllowableOffset = dotNetObject.maxAllowableOffset;
    }
    if (hasValue(dotNetObject.returnFieldName)) {
        properties.returnFieldName = dotNetObject.returnFieldName;
    }
    if (hasValue(dotNetObject.returnGeometry)) {
        properties.returnGeometry = dotNetObject.returnGeometry;
    }
    if (hasValue(dotNetObject.returnM)) {
        properties.returnM = dotNetObject.returnM;
    }
    if (hasValue(dotNetObject.returnUnformattedValues)) {
        properties.returnUnformattedValues = dotNetObject.returnUnformattedValues;
    }
    if (hasValue(dotNetObject.returnZ)) {
        properties.returnZ = dotNetObject.returnZ;
    }
    if (hasValue(dotNetObject.tolerance)) {
        properties.tolerance = dotNetObject.tolerance;
    }
    if (hasValue(dotNetObject.width)) {
        properties.width = dotNetObject.width;
    }
    let jsIdentifyParameters = new IdentifyParameters(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsIdentifyParameters);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsIdentifyParameters;
    
    let dnInstantiatedObject = await buildDotNetIdentifyParameters(jsIdentifyParameters);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for IdentifyParameters', e);
    }
    
    return jsIdentifyParameters;
}

export async function buildDotNetIdentifyParametersGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIdentifyParameters: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.geometry)) {
            let { buildDotNetGeometry } = await import('./geometry');
            dotNetIdentifyParameters.geometry = buildDotNetGeometry(jsObject.geometry);
        }
        if (hasValue(jsObject.mapExtent)) {
            let { buildDotNetExtent } = await import('./extent');
            dotNetIdentifyParameters.mapExtent = buildDotNetExtent(jsObject.mapExtent);
        }
        if (hasValue(jsObject.spatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetIdentifyParameters.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference);
        }
        if (hasValue(jsObject.sublayers)) {
            let { buildDotNetSublayer } = await import('./sublayer');
            dotNetIdentifyParameters.sublayers = await Promise.all(jsObject.sublayers.map(async i => await buildDotNetSublayer(i)));
        }
        if (hasValue(jsObject.timeExtent)) {
            let { buildDotNetTimeExtent } = await import('./timeExtent');
            dotNetIdentifyParameters.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
        }
    if (hasValue(jsObject.dpi)) {
        dotNetIdentifyParameters.dpi = jsObject.dpi;
    }
    if (hasValue(jsObject.gdbVersion)) {
        dotNetIdentifyParameters.gdbVersion = jsObject.gdbVersion;
    }
    if (hasValue(jsObject.geometryPrecision)) {
        dotNetIdentifyParameters.geometryPrecision = jsObject.geometryPrecision;
    }
    if (hasValue(jsObject.height)) {
        dotNetIdentifyParameters.height = jsObject.height;
    }
    if (hasValue(jsObject.historicMoment)) {
        dotNetIdentifyParameters.historicMoment = jsObject.historicMoment;
    }
    if (hasValue(jsObject.layerIds)) {
        dotNetIdentifyParameters.layerIds = jsObject.layerIds;
    }
    if (hasValue(jsObject.layerOption)) {
        dotNetIdentifyParameters.layerOption = jsObject.layerOption;
    }
    if (hasValue(jsObject.maxAllowableOffset)) {
        dotNetIdentifyParameters.maxAllowableOffset = jsObject.maxAllowableOffset;
    }
    if (hasValue(jsObject.returnFieldName)) {
        dotNetIdentifyParameters.returnFieldName = jsObject.returnFieldName;
    }
    if (hasValue(jsObject.returnGeometry)) {
        dotNetIdentifyParameters.returnGeometry = jsObject.returnGeometry;
    }
    if (hasValue(jsObject.returnM)) {
        dotNetIdentifyParameters.returnM = jsObject.returnM;
    }
    if (hasValue(jsObject.returnUnformattedValues)) {
        dotNetIdentifyParameters.returnUnformattedValues = jsObject.returnUnformattedValues;
    }
    if (hasValue(jsObject.returnZ)) {
        dotNetIdentifyParameters.returnZ = jsObject.returnZ;
    }
    if (hasValue(jsObject.tolerance)) {
        dotNetIdentifyParameters.tolerance = jsObject.tolerance;
    }
    if (hasValue(jsObject.width)) {
        dotNetIdentifyParameters.width = jsObject.width;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetIdentifyParameters.id = k;
                break;
            }
        }
    }

    return dotNetIdentifyParameters;
}

