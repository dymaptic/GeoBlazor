// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import CustomContent from '@arcgis/core/popup/content/CustomContent';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetCustomContent } from './customContent';

export async function buildJsCustomContentGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.hasPopupTemplateContentCreator) && dotNetObject.hasPopupTemplateContentCreator) {
        properties.creator = async (event) => {
            let { buildDotNetPopupTemplateCreatorEvent } = await import('./popupTemplateCreatorEvent');
            let dnEvent = await buildDotNetPopupTemplateCreatorEvent(event, layerId, viewId);

            return await dotNetObject.invokeMethodAsync('OnJsPopupTemplateContentCreator', dnEvent);
        };
    }
    else if (hasValue(dotNetObject.popupTemplateContentCreator)) {
        properties.creator = dotNetObject.popupTemplateContentCreator;
    }
    if (hasValue(dotNetObject.hasDestroyer) && dotNetObject.hasDestroyer) {
        properties.destroyer = async (event) => {
            let { buildDotNetPopupTemplateCreatorEvent } = await import('./popupTemplateCreatorEvent');
            let dnEvent = await buildDotNetPopupTemplateCreatorEvent(event, layerId, viewId);

            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsDestroyer', dnEvent);
        };
    }

    if (hasValue(dotNetObject.outFields) && dotNetObject.outFields.length > 0) {
        properties.outFields = dotNetObject.outFields;
    }
    let jsCustomContent = new CustomContent(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCustomContent);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCustomContent;
    
    return jsCustomContent;
}


export async function buildDotNetCustomContentGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCustomContent: any = {};
    
    if (hasValue(jsObject.outFields)) {
        dotNetCustomContent.outFields = jsObject.outFields;
    }
    
    if (hasValue(jsObject.type)) {
        dotNetCustomContent.type = removeCircularReferences(jsObject.type);
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCustomContent.id = geoBlazorId;
    }

    return dotNetCustomContent;
}

