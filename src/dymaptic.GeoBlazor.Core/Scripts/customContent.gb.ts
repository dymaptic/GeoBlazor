// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import CustomContent from '@arcgis/core/popup/content/CustomContent';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCustomContent } from './customContent';

export async function buildJsCustomContentGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.hasPopupTemplateContentCreator) && dotNetObject.hasPopupTemplateContentCreator) {
        properties.creator = async (event) => {
            let { buildDotNetPopupTemplateCreatorEvent } = await import('./popupTemplateCreatorEvent');
            let dnEvent = await buildDotNetPopupTemplateCreatorEvent(event, layerId, viewId);

            return await dotNetObject.invokeMethodAsync('OnJsPopupTemplateContentCreator', dnEvent);
        };
    }
    else if (hasValue(dotNetObject.popupTemplateContentCreator)) {
        properties.creator = dotNetObject.popupTemplateContentCreator;
    }
    if (hasValue(dotNetObject.hasDestroyer) && dotNetObject.hasDestroyer) {
        properties.destroyer = async (event) => {
            let { buildDotNetPopupTemplateCreatorEvent } = await import('./popupTemplateCreatorEvent');
            let dnEvent = await buildDotNetPopupTemplateCreatorEvent(event, layerId, viewId);

            await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsDestroyer', dnEvent);
        };
    }

    if (hasValue(dotNetObject.outFields)) {
        properties.outFields = dotNetObject.outFields;
    }
    let jsCustomContent = new CustomContent(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCustomContent);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCustomContent;
    
    let { buildDotNetCustomContent } = await import('./customContent');
    let dnInstantiatedObject = await buildDotNetCustomContent(jsCustomContent);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type CustomContent detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CustomContent', e);
    }
    
    return jsCustomContent;
}


export async function buildDotNetCustomContentGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCustomContent: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.creator)) {
        dotNetCustomContent.creator = jsObject.creator;
    }
    if (hasValue(jsObject.destroyer)) {
        dotNetCustomContent.destroyer = jsObject.destroyer;
    }
    if (hasValue(jsObject.outFields)) {
        dotNetCustomContent.outFields = jsObject.outFields;
    }
    if (hasValue(jsObject.type)) {
        dotNetCustomContent.type = jsObject.type;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCustomContent.id = geoBlazorId;
    }

    return dotNetCustomContent;
}

