// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetVersionManagementServiceCapabilities } from './versionManagementServiceCapabilities';

export async function buildJsVersionManagementServiceCapabilitiesGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsVersionManagementServiceCapabilities: any = {};

    if (hasValue(dotNetObject.supportsAsyncDifferences)) {
        jsVersionManagementServiceCapabilities.supportsAsyncDifferences = dotNetObject.supportsAsyncDifferences;
    }
    if (hasValue(dotNetObject.supportsAsyncPost)) {
        jsVersionManagementServiceCapabilities.supportsAsyncPost = dotNetObject.supportsAsyncPost;
    }
    if (hasValue(dotNetObject.supportsAsyncReconcile)) {
        jsVersionManagementServiceCapabilities.supportsAsyncReconcile = dotNetObject.supportsAsyncReconcile;
    }
    if (hasValue(dotNetObject.supportsConflictDetectionByAttribute)) {
        jsVersionManagementServiceCapabilities.supportsConflictDetectionByAttribute = dotNetObject.supportsConflictDetectionByAttribute;
    }
    if (hasValue(dotNetObject.supportsDifferencesFromMoment)) {
        jsVersionManagementServiceCapabilities.supportsDifferencesFromMoment = dotNetObject.supportsDifferencesFromMoment;
    }
    if (hasValue(dotNetObject.supportsDifferencesWithLayers)) {
        jsVersionManagementServiceCapabilities.supportsDifferencesWithLayers = dotNetObject.supportsDifferencesWithLayers;
    }
    if (hasValue(dotNetObject.supportsPartialPost)) {
        jsVersionManagementServiceCapabilities.supportsPartialPost = dotNetObject.supportsPartialPost;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsVersionManagementServiceCapabilities);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsVersionManagementServiceCapabilities;
    
    let { buildDotNetVersionManagementServiceCapabilities } = await import('./versionManagementServiceCapabilities');
    let dnInstantiatedObject = await buildDotNetVersionManagementServiceCapabilities(jsVersionManagementServiceCapabilities, layerId, viewId);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type VersionManagementServiceCapabilities detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for VersionManagementServiceCapabilities', e);
    }
    
    return jsVersionManagementServiceCapabilities;
}


export async function buildDotNetVersionManagementServiceCapabilitiesGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetVersionManagementServiceCapabilities: any = {};
    
    if (hasValue(jsObject.supportsAsyncDifferences)) {
        dotNetVersionManagementServiceCapabilities.supportsAsyncDifferences = jsObject.supportsAsyncDifferences;
    }
    
    if (hasValue(jsObject.supportsAsyncPost)) {
        dotNetVersionManagementServiceCapabilities.supportsAsyncPost = jsObject.supportsAsyncPost;
    }
    
    if (hasValue(jsObject.supportsAsyncReconcile)) {
        dotNetVersionManagementServiceCapabilities.supportsAsyncReconcile = jsObject.supportsAsyncReconcile;
    }
    
    if (hasValue(jsObject.supportsConflictDetectionByAttribute)) {
        dotNetVersionManagementServiceCapabilities.supportsConflictDetectionByAttribute = jsObject.supportsConflictDetectionByAttribute;
    }
    
    if (hasValue(jsObject.supportsDifferencesFromMoment)) {
        dotNetVersionManagementServiceCapabilities.supportsDifferencesFromMoment = jsObject.supportsDifferencesFromMoment;
    }
    
    if (hasValue(jsObject.supportsDifferencesWithLayers)) {
        dotNetVersionManagementServiceCapabilities.supportsDifferencesWithLayers = jsObject.supportsDifferencesWithLayers;
    }
    
    if (hasValue(jsObject.supportsPartialPost)) {
        dotNetVersionManagementServiceCapabilities.supportsPartialPost = jsObject.supportsPartialPost;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetVersionManagementServiceCapabilities.id = geoBlazorId;
    }

    return dotNetVersionManagementServiceCapabilities;
}

