// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { buildDotNetAreaMeasurementAnalysisView3D } from './areaMeasurementAnalysisView3D';
import AreaMeasurementAnalysisView3D from '@arcgis/core/views/3d/analysis/AreaMeasurementAnalysisView3D';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';

export async function buildJsAreaMeasurementAnalysisView3DGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsAreaMeasurementAnalysisView3D = new AreaMeasurementAnalysisView3D();

    if (hasValue(dotNetObject.result)) {
        jsAreaMeasurementAnalysisView3D.result = dotNetObject.result;
    }
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsAreaMeasurementAnalysisView3D);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsAreaMeasurementAnalysisView3D;
    
    let dnInstantiatedObject = await buildDotNetAreaMeasurementAnalysisView3D(jsAreaMeasurementAnalysisView3D);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for AreaMeasurementAnalysisView3D', e);
    }
    
    return jsAreaMeasurementAnalysisView3D;
}

export async function buildDotNetAreaMeasurementAnalysisView3DGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAreaMeasurementAnalysisView3D: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.analysis)) {
            let { buildDotNetAreaMeasurementAnalysis } = await import('./areaMeasurementAnalysis');
            dotNetAreaMeasurementAnalysisView3D.analysis = await buildDotNetAreaMeasurementAnalysis(jsObject.analysis);
        }
        if (hasValue(jsObject.result)) {
            dotNetAreaMeasurementAnalysisView3D.result = jsObject.result;
        }
        if (hasValue(jsObject.type)) {
            dotNetAreaMeasurementAnalysisView3D.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetAreaMeasurementAnalysisView3D.id = k;
                break;
            }
        }
    }

    return dotNetAreaMeasurementAnalysisView3D;
}

