// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import Circle from '@arcgis/core/geometry/Circle';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CircleGenerated implements IPropertyWrapper {
    public component: Circle;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: Circle) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async addRing(points: any): Promise<any> {
        let { buildJsPoint } = await import('./point');
        let jsPoints = buildJsPoint(points) as any;
        return this.component.addRing(jsPoints);
    }

    async contains(point: any): Promise<any> {
        let { buildJsPoint } = await import('./point');
        let jsPoint = buildJsPoint(point) as any;
        return this.component.contains(jsPoint);
    }

    async getPoint(ringIndex: any,
        pointIndex: any): Promise<any> {
        return this.component.getPoint(ringIndex,
            pointIndex);
    }

    async insertPoint(ringIndex: any,
        pointIndex: any,
        point: any): Promise<any> {
        let { buildJsPoint } = await import('./point');
        let jsPoint = buildJsPoint(point) as any;
        return this.component.insertPoint(ringIndex,
            pointIndex,
            jsPoint);
    }

    async isClockwise(ring: any): Promise<any> {
        let { buildJsPoint } = await import('./point');
        let jsRing = buildJsPoint(ring) as any;
        return this.component.isClockwise(jsRing);
    }

    async removePoint(ringIndex: any,
        pointIndex: any): Promise<any> {
        return this.component.removePoint(ringIndex,
            pointIndex);
    }

    async removeRing(index: any): Promise<any> {
        return this.component.removeRing(index);
    }

    async setPoint(ringIndex: any,
        pointIndex: any,
        point: any): Promise<any> {
        let { buildJsPoint } = await import('./point');
        let jsPoint = buildJsPoint(point) as any;
        return this.component.setPoint(ringIndex,
            pointIndex,
            jsPoint);
    }

    // region properties
    
    async getCenter(): Promise<any> {
        if (!hasValue(this.component.center)) {
            return null;
        }
        
        let { buildDotNetPoint } = await import('./point');
        return buildDotNetPoint(this.component.center);
    }
    async setCenter(value: any): Promise<void> {
        let { buildJsPoint } = await import('./point');
        this.component.center =  buildJsPoint(value);
    }
    async getCentroid(): Promise<any> {
        if (!hasValue(this.component.centroid)) {
            return null;
        }
        
        let { buildDotNetPoint } = await import('./point');
        return buildDotNetPoint(this.component.centroid);
    }
    async setCentroid(value: any): Promise<void> {
        let { buildJsPoint } = await import('./point');
        this.component.centroid =  buildJsPoint(value);
    }
    async getExtent(): Promise<any> {
        if (!hasValue(this.component.extent)) {
            return null;
        }
        
        let { buildDotNetExtent } = await import('./extent');
        return buildDotNetExtent(this.component.extent);
    }
    async getSpatialReference(): Promise<any> {
        if (!hasValue(this.component.spatialReference)) {
            return null;
        }
        
        let { buildDotNetSpatialReference } = await import('./spatialReference');
        return buildDotNetSpatialReference(this.component.spatialReference);
    }
    async setSpatialReference(value: any): Promise<void> {
        let { buildJsSpatialReference } = await import('./spatialReference');
        this.component.spatialReference =  buildJsSpatialReference(value);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsCircleGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCircle = new Circle();
    if (hasValue(dotNetObject.center)) {
        let { buildJsPoint } = await import('./point');
        jsCircle.center = buildJsPoint(dotNetObject.center) as any;
    }
    if (hasValue(dotNetObject.centroid)) {
        let { buildJsPoint } = await import('./point');
        jsCircle.centroid = buildJsPoint(dotNetObject.centroid) as any;
    }
    if (hasValue(dotNetObject.spatialReference)) {
        let { buildJsSpatialReference } = await import('./spatialReference');
        jsCircle.spatialReference = buildJsSpatialReference(dotNetObject.spatialReference) as any;
    }

    if (hasValue(dotNetObject.geodesic)) {
        jsCircle.geodesic = dotNetObject.geodesic;
    }
    if (hasValue(dotNetObject.hasM)) {
        jsCircle.hasM = dotNetObject.hasM;
    }
    if (hasValue(dotNetObject.hasZ)) {
        jsCircle.hasZ = dotNetObject.hasZ;
    }
    if (hasValue(dotNetObject.isSelfIntersecting)) {
        jsCircle.isSelfIntersecting = dotNetObject.isSelfIntersecting;
    }
    if (hasValue(dotNetObject.numberOfPoints)) {
        jsCircle.numberOfPoints = dotNetObject.numberOfPoints;
    }
    if (hasValue(dotNetObject.radius)) {
        jsCircle.radius = dotNetObject.radius;
    }
    if (hasValue(dotNetObject.radiusUnit)) {
        jsCircle.radiusUnit = dotNetObject.radiusUnit;
    }
    if (hasValue(dotNetObject.rings)) {
        jsCircle.rings = dotNetObject.rings;
    }

    let { default: CircleWrapper } = await import('./circle');
    let circleWrapper = new CircleWrapper(jsCircle);
    circleWrapper.geoBlazorId = dotNetObject.id;
    circleWrapper.viewId = viewId;
    circleWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(circleWrapper);
    jsObjectRefs[dotNetObject.id] = circleWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsCircle;
    let { buildDotNetCircle } = await import('./circle');
    let dnInstantiatedObject = await buildDotNetCircle(jsCircle);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Circle', e);
    }
    
    return jsCircle;
}
export async function buildDotNetCircleGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCircle: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.center)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetCircle.center = buildDotNetPoint(jsObject.center);
        }
        if (hasValue(jsObject.centroid)) {
            let { buildDotNetPoint } = await import('./point');
            dotNetCircle.centroid = buildDotNetPoint(jsObject.centroid);
        }
        if (hasValue(jsObject.extent)) {
            let { buildDotNetExtent } = await import('./extent');
            dotNetCircle.extent = buildDotNetExtent(jsObject.extent);
        }
        if (hasValue(jsObject.spatialReference)) {
            let { buildDotNetSpatialReference } = await import('./spatialReference');
            dotNetCircle.spatialReference = buildDotNetSpatialReference(jsObject.spatialReference);
        }
        if (hasValue(jsObject.cache)) {
            dotNetCircle.cache = jsObject.cache;
        }
        if (hasValue(jsObject.geodesic)) {
            dotNetCircle.geodesic = jsObject.geodesic;
        }
        if (hasValue(jsObject.hasM)) {
            dotNetCircle.hasM = jsObject.hasM;
        }
        if (hasValue(jsObject.hasZ)) {
            dotNetCircle.hasZ = jsObject.hasZ;
        }
        if (hasValue(jsObject.isSelfIntersecting)) {
            dotNetCircle.isSelfIntersecting = jsObject.isSelfIntersecting;
        }
        if (hasValue(jsObject.numberOfPoints)) {
            dotNetCircle.numberOfPoints = jsObject.numberOfPoints;
        }
        if (hasValue(jsObject.radius)) {
            dotNetCircle.radius = jsObject.radius;
        }
        if (hasValue(jsObject.radiusUnit)) {
            dotNetCircle.radiusUnit = jsObject.radiusUnit;
        }
        if (hasValue(jsObject.rings)) {
            dotNetCircle.rings = jsObject.rings;
        }
        if (hasValue(jsObject.type)) {
            dotNetCircle.type = jsObject.type;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCircle.id = k;
                break;
            }
        }
    }

    return dotNetCircle;
}

