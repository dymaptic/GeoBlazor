// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import Renderer from '@arcgis/core/renderers/Renderer';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class RendererGenerated implements IPropertyWrapper {
    public component: Renderer;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: Renderer) {
        this.component = component;
        // set all properties from component
        for (let prop in component) {
            if (component.hasOwnProperty(prop)) {
                this[prop] = component[prop];
            }
        }
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    async getAuthoringInfo(layerId: string | null, viewId: string | null): Promise<any> {
        let { buildDotNetAuthoringInfo } = await import('./authoringInfo');
        return await buildDotNetAuthoringInfo(this.component.authoringInfo, layerId, viewId);
    }
    async setAuthoringInfo(value: any, layerId: string | null, viewId: string | null): Promise<void> {
        let { buildJsAuthoringInfo } = await import('./authoringInfo');
        this.component.authoringInfo = await buildJsAuthoringInfo(value, layerId, viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsRendererGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let { default: Renderer } = await import('@arcgis/core/renderers/Renderer');
    let jsRenderer = new Renderer();
    if (hasValue(dotNetObject.authoringInfo)) {
        let { buildJsAuthoringInfo } = await import('./jsBuilder');
        jsRenderer.authoringInfo = buildJsAuthoringInfo(dotNetObject.authoringInfo, layerId, viewId) as any;
    }
    let { default: RendererWrapper } = await import('./renderer');
    let rendererWrapper = new RendererWrapper(jsRenderer);
    rendererWrapper.geoBlazorId = dotNetObject.id;
    rendererWrapper.viewId = viewId;
    rendererWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(rendererWrapper);
    await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    jsObjectRefs[dotNetObject.id] = rendererWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsRenderer;
    
    return jsRenderer;
}

export async function buildDotNetRendererGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRenderer: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.authoringInfo)) {
            let { buildDotNetAuthoringInfo } = await import('./mapView');
            dotNetRenderer.authoringInfo = buildDotNetAuthoringInfo(jsObject.authoringInfo);
        }
        dotNetRenderer.type = jsObject.type;
    return dotNetRenderer;
}

