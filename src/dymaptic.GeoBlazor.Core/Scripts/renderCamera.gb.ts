// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import RenderCamera from '@arcgis/core/views/3d/webgl/RenderCamera';
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetRenderCamera } from './renderCamera';

export async function buildJsRenderCameraGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsRenderCamera: any = {};

    
    let jsObjectRef = DotNet.createJSObjectReference(jsRenderCamera);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsRenderCamera;
    
    try {
        let { buildDotNetRenderCamera } = await import('./renderCamera');
        let dnInstantiatedObject = await buildDotNetRenderCamera(jsRenderCamera, layerId, viewId);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type RenderCamera detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for RenderCamera', e);
    }
    
    return jsRenderCamera;
}


export async function buildDotNetRenderCameraGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetRenderCamera: any = {};
    
    if (hasValue(jsObject.center)) {
        dotNetRenderCamera.center = jsObject.center;
    }
    
    if (hasValue(jsObject.eye)) {
        dotNetRenderCamera.eye = jsObject.eye;
    }
    
    if (hasValue(jsObject.far)) {
        dotNetRenderCamera.far = jsObject.far;
    }
    
    if (hasValue(jsObject.fovX)) {
        dotNetRenderCamera.fovX = jsObject.fovX;
    }
    
    if (hasValue(jsObject.fovY)) {
        dotNetRenderCamera.fovY = jsObject.fovY;
    }
    
    if (hasValue(jsObject.near)) {
        dotNetRenderCamera.near = jsObject.near;
    }
    
    if (hasValue(jsObject.pixelRatio)) {
        dotNetRenderCamera.pixelRatio = jsObject.pixelRatio;
    }
    
    if (hasValue(jsObject.projectionMatrix)) {
        dotNetRenderCamera.projectionMatrix = jsObject.projectionMatrix;
    }
    
    if (hasValue(jsObject.up)) {
        dotNetRenderCamera.up = jsObject.up;
    }
    
    if (hasValue(jsObject.viewInverseTransposeMatrix)) {
        dotNetRenderCamera.viewInverseTransposeMatrix = jsObject.viewInverseTransposeMatrix;
    }
    
    if (hasValue(jsObject.viewMatrix)) {
        dotNetRenderCamera.viewMatrix = jsObject.viewMatrix;
    }
    
    if (hasValue(jsObject.viewport)) {
        dotNetRenderCamera.viewport = jsObject.viewport;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetRenderCamera.id = geoBlazorId;
    }

    return dotNetRenderCamera;
}

