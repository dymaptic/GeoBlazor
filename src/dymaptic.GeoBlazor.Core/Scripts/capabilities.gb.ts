// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCapabilities } from './capabilities';

export async function buildJsCapabilitiesGenerated(dotNetObject: any): Promise<any> {
    let jsCapabilities: any = {};
    if (hasValue(dotNetObject.analytics)) {
        let { buildJsCapabilitiesAnalytics } = await import('./capabilitiesAnalytics');
        jsCapabilities.analytics = await buildJsCapabilitiesAnalytics(dotNetObject.analytics) as any;
    }
    if (hasValue(dotNetObject.attachment)) {
        let { buildJsCapabilitiesAttachment } = await import('./capabilitiesAttachment');
        jsCapabilities.attachment = await buildJsCapabilitiesAttachment(dotNetObject.attachment) as any;
    }
    if (hasValue(dotNetObject.data)) {
        let { buildJsCapabilitiesData } = await import('./capabilitiesData');
        jsCapabilities.data = await buildJsCapabilitiesData(dotNetObject.data) as any;
    }
    if (hasValue(dotNetObject.editing)) {
        let { buildJsCapabilitiesEditing } = await import('./capabilitiesEditing');
        jsCapabilities.editing = await buildJsCapabilitiesEditing(dotNetObject.editing) as any;
    }
    if (hasValue(dotNetObject.metadata)) {
        let { buildJsCapabilitiesMetadata } = await import('./capabilitiesMetadata');
        jsCapabilities.metadata = await buildJsCapabilitiesMetadata(dotNetObject.metadata) as any;
    }
    if (hasValue(dotNetObject.operations)) {
        let { buildJsCapabilitiesOperations } = await import('./capabilitiesOperations');
        jsCapabilities.operations = await buildJsCapabilitiesOperations(dotNetObject.operations) as any;
    }
    if (hasValue(dotNetObject.queryRelated)) {
        let { buildJsCapabilitiesQueryRelated } = await import('./capabilitiesQueryRelated');
        jsCapabilities.queryRelated = await buildJsCapabilitiesQueryRelated(dotNetObject.queryRelated) as any;
    }
    if (hasValue(dotNetObject.queryTopFeatures)) {
        let { buildJsCapabilitiesQueryTopFeatures } = await import('./capabilitiesQueryTopFeatures');
        jsCapabilities.queryTopFeatures = await buildJsCapabilitiesQueryTopFeatures(dotNetObject.queryTopFeatures) as any;
    }

    if (hasValue(dotNetObject.query)) {
        jsCapabilities.query = dotNetObject.query;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCapabilities);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCapabilities;
    
    let { buildDotNetCapabilities } = await import('./capabilities');
    let dnInstantiatedObject = await buildDotNetCapabilities(jsCapabilities);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type Capabilities detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for Capabilities', e);
    }
    
    return jsCapabilities;
}


export async function buildDotNetCapabilitiesGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCapabilities: any = {};
    
    if (hasValue(jsObject.analytics)) {
        let { buildDotNetCapabilitiesAnalytics } = await import('./capabilitiesAnalytics');
        dotNetCapabilities.analytics = await buildDotNetCapabilitiesAnalytics(jsObject.analytics);
    }
    
    if (hasValue(jsObject.attachment)) {
        let { buildDotNetCapabilitiesAttachment } = await import('./capabilitiesAttachment');
        dotNetCapabilities.attachment = await buildDotNetCapabilitiesAttachment(jsObject.attachment);
    }
    
    if (hasValue(jsObject.data)) {
        let { buildDotNetCapabilitiesData } = await import('./capabilitiesData');
        dotNetCapabilities.data = await buildDotNetCapabilitiesData(jsObject.data);
    }
    
    if (hasValue(jsObject.editing)) {
        let { buildDotNetCapabilitiesEditing } = await import('./capabilitiesEditing');
        dotNetCapabilities.editing = await buildDotNetCapabilitiesEditing(jsObject.editing);
    }
    
    if (hasValue(jsObject.metadata)) {
        let { buildDotNetCapabilitiesMetadata } = await import('./capabilitiesMetadata');
        dotNetCapabilities.metadata = await buildDotNetCapabilitiesMetadata(jsObject.metadata);
    }
    
    if (hasValue(jsObject.operations)) {
        let { buildDotNetCapabilitiesOperations } = await import('./capabilitiesOperations');
        dotNetCapabilities.operations = await buildDotNetCapabilitiesOperations(jsObject.operations);
    }
    
    if (hasValue(jsObject.queryRelated)) {
        let { buildDotNetCapabilitiesQueryRelated } = await import('./capabilitiesQueryRelated');
        dotNetCapabilities.queryRelated = await buildDotNetCapabilitiesQueryRelated(jsObject.queryRelated);
    }
    
    if (hasValue(jsObject.queryTopFeatures)) {
        let { buildDotNetCapabilitiesQueryTopFeatures } = await import('./capabilitiesQueryTopFeatures');
        dotNetCapabilities.queryTopFeatures = await buildDotNetCapabilitiesQueryTopFeatures(jsObject.queryTopFeatures);
    }
    
    if (hasValue(jsObject.query)) {
        dotNetCapabilities.query = jsObject.query;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCapabilities.id = geoBlazorId;
    }

    return dotNetCapabilities;
}

