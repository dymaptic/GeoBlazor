// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetImageryLayerSaveAsOptions } from './imageryLayerSaveAsOptions';

export async function buildJsImageryLayerSaveAsOptionsGenerated(dotNetObject: any): Promise<any> {
    let jsImageryLayerSaveAsOptions: any = {};
    if (hasValue(dotNetObject.folder)) {
        let { buildJsPortalFolder } = await import('./portalFolder');
        jsImageryLayerSaveAsOptions.folder = await buildJsPortalFolder(dotNetObject.folder) as any;
    }

    if (hasValue(dotNetObject.validationOptions)) {
        jsImageryLayerSaveAsOptions.validationOptions = dotNetObject.validationOptions;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsImageryLayerSaveAsOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsImageryLayerSaveAsOptions;
    
    return jsImageryLayerSaveAsOptions;
}


export async function buildDotNetImageryLayerSaveAsOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetImageryLayerSaveAsOptions: any = {};
    
    if (hasValue(jsObject.folder)) {
        let { buildDotNetPortalFolder } = await import('./portalFolder');
        dotNetImageryLayerSaveAsOptions.folder = await buildDotNetPortalFolder(jsObject.folder);
    }
    
    if (hasValue(jsObject.validationOptions)) {
        dotNetImageryLayerSaveAsOptions.validationOptions = jsObject.validationOptions;
    }
    

    return dotNetImageryLayerSaveAsOptions;
}

