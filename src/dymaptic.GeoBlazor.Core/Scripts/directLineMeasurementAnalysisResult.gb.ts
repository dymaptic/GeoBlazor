// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetDirectLineMeasurementAnalysisResult } from './directLineMeasurementAnalysisResult';

export async function buildJsDirectLineMeasurementAnalysisResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsDirectLineMeasurementAnalysisResult: any = {};
    if (hasValue(dotNetObject.directDistance)) {
        let { buildJsLength } = await import('./length');
        jsDirectLineMeasurementAnalysisResult.directDistance = await buildJsLength(dotNetObject.directDistance, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.distance)) {
        let { buildJsLength } = await import('./length');
        jsDirectLineMeasurementAnalysisResult.distance = await buildJsLength(dotNetObject.distance, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.horizontalDistance)) {
        let { buildJsLength } = await import('./length');
        jsDirectLineMeasurementAnalysisResult.horizontalDistance = await buildJsLength(dotNetObject.horizontalDistance, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.verticalDistance)) {
        let { buildJsLength } = await import('./length');
        jsDirectLineMeasurementAnalysisResult.verticalDistance = await buildJsLength(dotNetObject.verticalDistance, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.mode)) {
        jsDirectLineMeasurementAnalysisResult.mode = dotNetObject.mode;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsDirectLineMeasurementAnalysisResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsDirectLineMeasurementAnalysisResult;
    
    return jsDirectLineMeasurementAnalysisResult;
}


export async function buildDotNetDirectLineMeasurementAnalysisResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let geoBlazorId = lookupGeoBlazorId(jsObject);
    
    let jsComponentRef: any;
    if (hasValue(geoBlazorId)) {
        jsComponentRef = jsObjectRefs[geoBlazorId!];
    } else {
        let { buildJsDirectLineMeasurementAnalysisResult } = await import('./directLineMeasurementAnalysisResult');
        jsComponentRef = await buildJsDirectLineMeasurementAnalysisResult(jsObject, layerId, viewId);
    }
    
    let dotNetDirectLineMeasurementAnalysisResult: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsComponentRef)
    };
    if (hasValue(jsObject.directDistance)) {
        let { buildDotNetLength } = await import('./length');
        dotNetDirectLineMeasurementAnalysisResult.directDistance = await buildDotNetLength(jsObject.directDistance, layerId, viewId);
    }
    if (hasValue(jsObject.horizontalDistance)) {
        let { buildDotNetLength } = await import('./length');
        dotNetDirectLineMeasurementAnalysisResult.horizontalDistance = await buildDotNetLength(jsObject.horizontalDistance, layerId, viewId);
    }
    if (hasValue(jsObject.verticalDistance)) {
        let { buildDotNetLength } = await import('./length');
        dotNetDirectLineMeasurementAnalysisResult.verticalDistance = await buildDotNetLength(jsObject.verticalDistance, layerId, viewId);
    }
    if (hasValue(jsObject.mode)) {
        dotNetDirectLineMeasurementAnalysisResult.mode = jsObject.mode;
    }

    return dotNetDirectLineMeasurementAnalysisResult;
}

