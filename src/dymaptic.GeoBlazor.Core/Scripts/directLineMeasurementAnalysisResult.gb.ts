// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetDirectLineMeasurementAnalysisResult } from './directLineMeasurementAnalysisResult';

export async function buildJsDirectLineMeasurementAnalysisResultGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsDirectLineMeasurementAnalysisResult: any = {};
    if (hasValue(dotNetObject.directDistance)) {
        let { buildJsLength } = await import('./length');
        jsDirectLineMeasurementAnalysisResult.directDistance = await buildJsLength(dotNetObject.directDistance) as any;
    }
    if (hasValue(dotNetObject.distance)) {
        let { buildJsLength } = await import('./length');
        jsDirectLineMeasurementAnalysisResult.distance = await buildJsLength(dotNetObject.distance) as any;
    }
    if (hasValue(dotNetObject.horizontalDistance)) {
        let { buildJsLength } = await import('./length');
        jsDirectLineMeasurementAnalysisResult.horizontalDistance = await buildJsLength(dotNetObject.horizontalDistance) as any;
    }
    if (hasValue(dotNetObject.verticalDistance)) {
        let { buildJsLength } = await import('./length');
        jsDirectLineMeasurementAnalysisResult.verticalDistance = await buildJsLength(dotNetObject.verticalDistance) as any;
    }

    if (hasValue(dotNetObject.mode)) {
        jsDirectLineMeasurementAnalysisResult.mode = dotNetObject.mode;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsDirectLineMeasurementAnalysisResult);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsDirectLineMeasurementAnalysisResult;
    
    return jsDirectLineMeasurementAnalysisResult;
}


export async function buildDotNetDirectLineMeasurementAnalysisResultGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetDirectLineMeasurementAnalysisResult: any = {};
    
    if (hasValue(jsObject.directDistance)) {
        let { buildDotNetLength } = await import('./length');
        dotNetDirectLineMeasurementAnalysisResult.directDistance = await buildDotNetLength(jsObject.directDistance);
    }
    
    if (hasValue(jsObject.horizontalDistance)) {
        let { buildDotNetLength } = await import('./length');
        dotNetDirectLineMeasurementAnalysisResult.horizontalDistance = await buildDotNetLength(jsObject.horizontalDistance);
    }
    
    if (hasValue(jsObject.verticalDistance)) {
        let { buildDotNetLength } = await import('./length');
        dotNetDirectLineMeasurementAnalysisResult.verticalDistance = await buildDotNetLength(jsObject.verticalDistance);
    }
    
    if (hasValue(jsObject.mode)) {
        dotNetDirectLineMeasurementAnalysisResult.mode = removeCircularReferences(jsObject.mode);
    }
    

    return dotNetDirectLineMeasurementAnalysisResult;
}

