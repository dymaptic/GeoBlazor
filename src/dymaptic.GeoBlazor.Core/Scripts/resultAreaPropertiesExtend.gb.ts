// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetResultAreaPropertiesExtend } from './resultAreaPropertiesExtend';

export async function buildJsResultAreaPropertiesExtendGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsResultAreaPropertiesExtend: any = {};
    if (hasValue(dotNetObject.color)) {
        let { buildJsGraphicColor } = await import('./graphicColor');
        jsResultAreaPropertiesExtend.color = await buildJsGraphicColor(dotNetObject.color, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.areaUnit)) {
        jsResultAreaPropertiesExtend.areaUnit = dotNetObject.areaUnit;
    }
    if (hasValue(dotNetObject.distance)) {
        jsResultAreaPropertiesExtend.distance = dotNetObject.distance;
    }
    if (hasValue(dotNetObject.show)) {
        jsResultAreaPropertiesExtend.show = dotNetObject.show;
    }
    if (hasValue(dotNetObject.unit)) {
        jsResultAreaPropertiesExtend.unit = dotNetObject.unit;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsResultAreaPropertiesExtend);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsResultAreaPropertiesExtend;
    
    let { buildDotNetResultAreaPropertiesExtend } = await import('./resultAreaPropertiesExtend');
    let dnInstantiatedObject = await buildDotNetResultAreaPropertiesExtend(jsResultAreaPropertiesExtend);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type ResultAreaPropertiesExtend detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ResultAreaPropertiesExtend', e);
    }
    
    return jsResultAreaPropertiesExtend;
}


export async function buildDotNetResultAreaPropertiesExtendGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetResultAreaPropertiesExtend: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.color)) {
        let { buildDotNetGraphicColor } = await import('./graphicColor');
        dotNetResultAreaPropertiesExtend.color = await buildDotNetGraphicColor(jsObject.color);
    }
    if (hasValue(jsObject.areaUnit)) {
        dotNetResultAreaPropertiesExtend.areaUnit = jsObject.areaUnit;
    }
    if (hasValue(jsObject.distance)) {
        dotNetResultAreaPropertiesExtend.distance = jsObject.distance;
    }
    if (hasValue(jsObject.show)) {
        dotNetResultAreaPropertiesExtend.show = jsObject.show;
    }
    if (hasValue(jsObject.type)) {
        dotNetResultAreaPropertiesExtend.type = jsObject.type;
    }
    if (hasValue(jsObject.unit)) {
        dotNetResultAreaPropertiesExtend.unit = jsObject.unit;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetResultAreaPropertiesExtend.id = geoBlazorId;
    }

    return dotNetResultAreaPropertiesExtend;
}

