// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import SizeSlider from '@arcgis/core/widgets/smartMapping/SizeSlider';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class SizeSliderGenerated implements IPropertyWrapper {
    public component: SizeSlider;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: SizeSlider) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async classes(): Promise<any> {
        return this.component.classes();
    }

    async isFulfilled(): Promise<any> {
        return this.component.isFulfilled();
    }

    async isRejected(): Promise<any> {
        return this.component.isRejected();
    }

    async isResolved(): Promise<any> {
        return this.component.isResolved();
    }

    async own(handleOrHandles: any): Promise<void> {
        let { buildJsWatchHandle } = await import('./watchHandle');
        let jsHandleOrHandles = await buildJsWatchHandle(handleOrHandles, this.layerId, this.viewId) as any;
        this.component.own(jsHandleOrHandles);
    }

    async postInitialize(): Promise<void> {
        this.component.postInitialize();
    }

    async render(): Promise<any> {
        return this.component.render();
    }

    async renderNow(): Promise<void> {
        this.component.renderNow();
    }

    async scheduleRender(): Promise<void> {
        this.component.scheduleRender();
    }

    async updateFromRendererResult(rendererResult: any,
        histogramResult: any): Promise<void> {
        let { buildJsSizeContinuousRendererResult } = await import('./sizeContinuousRendererResult');
        let jsRendererResult = await buildJsSizeContinuousRendererResult(rendererResult, this.layerId, this.viewId) as any;
        this.component.updateFromRendererResult(jsRendererResult,
            histogramResult);
    }

    async updateVisualVariable(sizeVariable: any): Promise<any> {
        let { buildJsSizeVariable } = await import('./sizeVariable');
        let jsSizeVariable = await buildJsSizeVariable(sizeVariable, this.layerId, this.viewId) as any;
        let result = this.component.updateVisualVariable(jsSizeVariable);
        let { buildDotNetSizeVariable } = await import('./sizeVariable');
        return await buildDotNetSizeVariable(result);
    }

    async when(callback: any,
        errback: any): Promise<any> {
        return await this.component.when(callback,
            errback);
    }

    // region properties
    
    async getStyle(): Promise<any> {
        if (!hasValue(this.component.style)) {
            return null;
        }
        
        let { buildDotNetSizeSliderStyle } = await import('./sizeSliderStyle');
        return await buildDotNetSizeSliderStyle(this.component.style);
    }
    async setStyle(value: any): Promise<void> {
        let { buildJsSizeSliderStyle } = await import('./sizeSliderStyle');
        this.component.style = await  buildJsSizeSliderStyle(value, this.layerId, this.viewId);
    }
    async getViewModel(): Promise<any> {
        if (!hasValue(this.component.viewModel)) {
            return null;
        }
        
        let { buildDotNetSizeSliderViewModel } = await import('./sizeSliderViewModel');
        return await buildDotNetSizeSliderViewModel(this.component.viewModel);
    }
    async setViewModel(value: any): Promise<void> {
        let { buildJsSizeSliderViewModel } = await import('./sizeSliderViewModel');
        this.component.viewModel = await  buildJsSizeSliderViewModel(value, this.layerId, this.viewId);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsSizeSliderGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsSizeSlider = new SizeSlider();
    if (hasValue(dotNetObject.hasInputFormatFunction) && dotNetObject.hasInputFormatFunction) {
        jsSizeSlider.inputFormatFunction = (value,
        type,
        index) => {
            let func = new Function('value',
            'type',
            'index', dotNetObject.inputFormatFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }
    if (hasValue(dotNetObject.hasInputParseFunction) && dotNetObject.hasInputParseFunction) {
        jsSizeSlider.inputParseFunction = (value,
        type,
        index) => {
            let func = new Function('value',
            'type',
            'index', dotNetObject.inputParseFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }
    if (hasValue(dotNetObject.hasLabelFormatFunction) && dotNetObject.hasLabelFormatFunction) {
        jsSizeSlider.labelFormatFunction = (value,
        type,
        index) => {
            let func = new Function('value',
            'type',
            'index', dotNetObject.labelFormatFunction.javaScriptFunction);
            return func(value,
            type,
            index);
        };
    }
    if (hasValue(dotNetObject.style)) {
        let { buildJsSizeSliderStyle } = await import('./sizeSliderStyle');
        jsSizeSlider.style = await buildJsSizeSliderStyle(dotNetObject.style, layerId, viewId) as any;
    }
    if (hasValue(dotNetObject.viewModel)) {
        let { buildJsSizeSliderViewModel } = await import('./sizeSliderViewModel');
        jsSizeSlider.viewModel = await buildJsSizeSliderViewModel(dotNetObject.viewModel, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.container)) {
        jsSizeSlider.container = dotNetObject.container;
    }
    if (hasValue(dotNetObject.handlesSyncedToPrimary)) {
        jsSizeSlider.handlesSyncedToPrimary = dotNetObject.handlesSyncedToPrimary;
    }
    if (hasValue(dotNetObject.histogramConfig)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedHistogramConfig } = dotNetObject.histogramConfig;
        jsSizeSlider.histogramConfig = sanitizedHistogramConfig;
    }
    if (hasValue(dotNetObject.icon)) {
        jsSizeSlider.icon = dotNetObject.icon;
    }
    if (hasValue(dotNetObject.label)) {
        jsSizeSlider.label = dotNetObject.label;
    }
    if (hasValue(dotNetObject.max)) {
        jsSizeSlider.max = dotNetObject.max;
    }
    if (hasValue(dotNetObject.min)) {
        jsSizeSlider.min = dotNetObject.min;
    }
    if (hasValue(dotNetObject.persistSizeRangeEnabled)) {
        jsSizeSlider.persistSizeRangeEnabled = dotNetObject.persistSizeRangeEnabled;
    }
    if (hasValue(dotNetObject.precision)) {
        jsSizeSlider.precision = dotNetObject.precision;
    }
    if (hasValue(dotNetObject.primaryHandleEnabled)) {
        jsSizeSlider.primaryHandleEnabled = dotNetObject.primaryHandleEnabled;
    }
    if (hasValue(dotNetObject.stops)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedStops } = dotNetObject.stops;
        jsSizeSlider.stops = sanitizedStops;
    }
    if (hasValue(dotNetObject.syncedSegmentsEnabled)) {
        jsSizeSlider.syncedSegmentsEnabled = dotNetObject.syncedSegmentsEnabled;
    }
    if (hasValue(dotNetObject.visibleElements)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedVisibleElements } = dotNetObject.visibleElements;
        jsSizeSlider.visibleElements = sanitizedVisibleElements;
    }
    if (hasValue(dotNetObject.widgetId)) {
        jsSizeSlider.id = dotNetObject.widgetId;
    }
    if (hasValue(dotNetObject.zoomOptions)) {
        jsSizeSlider.zoomOptions = dotNetObject.zoomOptions;
    }
    jsSizeSlider.on('max-change', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsaxChange', evt);
    });
    
    jsSizeSlider.on('segment-drag', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsegmentDrag', evt);
    });
    
    jsSizeSlider.on('thumb-change', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJshumbChange', evt);
    });
    
    jsSizeSlider.on('thumb-drag', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJshumbDrag', evt);
    });
    
    jsSizeSlider.on('min-change', async (evt: any) => {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsinChange', evt);
    });
    

    let { default: SizeSliderWrapper } = await import('./sizeSlider');
    let sizeSliderWrapper = new SizeSliderWrapper(jsSizeSlider);
    sizeSliderWrapper.geoBlazorId = dotNetObject.id;
    sizeSliderWrapper.viewId = viewId;
    sizeSliderWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(sizeSliderWrapper);
    jsObjectRefs[dotNetObject.id] = sizeSliderWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsSizeSlider;
    let { buildDotNetSizeSlider } = await import('./sizeSlider');
    let dnInstantiatedObject = await buildDotNetSizeSlider(jsSizeSlider);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for SizeSlider', e);
    }
    
    return jsSizeSlider;
}

export async function buildDotNetSizeSliderGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSizeSlider: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.style)) {
            let { buildDotNetSizeSliderStyle } = await import('./sizeSliderStyle');
            dotNetSizeSlider.style = await buildDotNetSizeSliderStyle(jsObject.style);
        }
        if (hasValue(jsObject.viewModel)) {
            let { buildDotNetSizeSliderViewModel } = await import('./sizeSliderViewModel');
            dotNetSizeSlider.viewModel = await buildDotNetSizeSliderViewModel(jsObject.viewModel);
        }
    if (hasValue(jsObject.container)) {
        dotNetSizeSlider.container = jsObject.container;
    }
    if (hasValue(jsObject.handlesSyncedToPrimary)) {
        dotNetSizeSlider.handlesSyncedToPrimary = jsObject.handlesSyncedToPrimary;
    }
    if (hasValue(jsObject.histogramConfig)) {
        dotNetSizeSlider.histogramConfig = jsObject.histogramConfig;
    }
    if (hasValue(jsObject.icon)) {
        dotNetSizeSlider.icon = jsObject.icon;
    }
    if (hasValue(jsObject.inputFormatFunction)) {
        dotNetSizeSlider.inputFormatFunction = jsObject.inputFormatFunction;
    }
    if (hasValue(jsObject.inputParseFunction)) {
        dotNetSizeSlider.inputParseFunction = jsObject.inputParseFunction;
    }
    if (hasValue(jsObject.label)) {
        dotNetSizeSlider.label = jsObject.label;
    }
    if (hasValue(jsObject.labelFormatFunction)) {
        dotNetSizeSlider.labelFormatFunction = jsObject.labelFormatFunction;
    }
    if (hasValue(jsObject.max)) {
        dotNetSizeSlider.max = jsObject.max;
    }
    if (hasValue(jsObject.min)) {
        dotNetSizeSlider.min = jsObject.min;
    }
    if (hasValue(jsObject.persistSizeRangeEnabled)) {
        dotNetSizeSlider.persistSizeRangeEnabled = jsObject.persistSizeRangeEnabled;
    }
    if (hasValue(jsObject.precision)) {
        dotNetSizeSlider.precision = jsObject.precision;
    }
    if (hasValue(jsObject.primaryHandleEnabled)) {
        dotNetSizeSlider.primaryHandleEnabled = jsObject.primaryHandleEnabled;
    }
    if (hasValue(jsObject.state)) {
        dotNetSizeSlider.state = jsObject.state;
    }
    if (hasValue(jsObject.stops)) {
        dotNetSizeSlider.stops = jsObject.stops;
    }
    if (hasValue(jsObject.syncedSegmentsEnabled)) {
        dotNetSizeSlider.syncedSegmentsEnabled = jsObject.syncedSegmentsEnabled;
    }
    if (hasValue(jsObject.type)) {
        dotNetSizeSlider.type = jsObject.type;
    }
    if (hasValue(jsObject.visibleElements)) {
        dotNetSizeSlider.visibleElements = jsObject.visibleElements;
    }
    if (hasValue(jsObject.id)) {
        dotNetSizeSlider.widgetId = jsObject.id;
    }
    if (hasValue(jsObject.zoomOptions)) {
        dotNetSizeSlider.zoomOptions = jsObject.zoomOptions;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetSizeSlider.id = k;
                break;
            }
        }
    }

    return dotNetSizeSlider;
}

