// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCapabilitiesEditing } from './capabilitiesEditing';

export async function buildJsCapabilitiesEditingGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsCapabilitiesEditing: any = {};

    if (hasValue(dotNetObject.supportsDeleteByAnonymous)) {
        jsCapabilitiesEditing.supportsDeleteByAnonymous = dotNetObject.supportsDeleteByAnonymous;
    }
    if (hasValue(dotNetObject.supportsDeleteByOthers)) {
        jsCapabilitiesEditing.supportsDeleteByOthers = dotNetObject.supportsDeleteByOthers;
    }
    if (hasValue(dotNetObject.supportsGeometryUpdate)) {
        jsCapabilitiesEditing.supportsGeometryUpdate = dotNetObject.supportsGeometryUpdate;
    }
    if (hasValue(dotNetObject.supportsGlobalId)) {
        jsCapabilitiesEditing.supportsGlobalId = dotNetObject.supportsGlobalId;
    }
    if (hasValue(dotNetObject.supportsRollbackOnFailure)) {
        jsCapabilitiesEditing.supportsRollbackOnFailure = dotNetObject.supportsRollbackOnFailure;
    }
    if (hasValue(dotNetObject.supportsUpdateByAnonymous)) {
        jsCapabilitiesEditing.supportsUpdateByAnonymous = dotNetObject.supportsUpdateByAnonymous;
    }
    if (hasValue(dotNetObject.supportsUpdateByOthers)) {
        jsCapabilitiesEditing.supportsUpdateByOthers = dotNetObject.supportsUpdateByOthers;
    }
    if (hasValue(dotNetObject.supportsUpdateWithoutM)) {
        jsCapabilitiesEditing.supportsUpdateWithoutM = dotNetObject.supportsUpdateWithoutM;
    }
    if (hasValue(dotNetObject.supportsUploadWithItemId)) {
        jsCapabilitiesEditing.supportsUploadWithItemId = dotNetObject.supportsUploadWithItemId;
    }
    
    jsObjectRefs[dotNetObject.id] = jsCapabilitiesEditing;
    arcGisObjectRefs[dotNetObject.id] = jsCapabilitiesEditing;
    
    return jsCapabilitiesEditing;
}


export async function buildDotNetCapabilitiesEditingGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCapabilitiesEditing: any = {};
    
    if (hasValue(jsObject.supportsDeleteByAnonymous)) {
        dotNetCapabilitiesEditing.supportsDeleteByAnonymous = jsObject.supportsDeleteByAnonymous;
    }
    
    if (hasValue(jsObject.supportsDeleteByOthers)) {
        dotNetCapabilitiesEditing.supportsDeleteByOthers = jsObject.supportsDeleteByOthers;
    }
    
    if (hasValue(jsObject.supportsGeometryUpdate)) {
        dotNetCapabilitiesEditing.supportsGeometryUpdate = jsObject.supportsGeometryUpdate;
    }
    
    if (hasValue(jsObject.supportsGlobalId)) {
        dotNetCapabilitiesEditing.supportsGlobalId = jsObject.supportsGlobalId;
    }
    
    if (hasValue(jsObject.supportsRollbackOnFailure)) {
        dotNetCapabilitiesEditing.supportsRollbackOnFailure = jsObject.supportsRollbackOnFailure;
    }
    
    if (hasValue(jsObject.supportsUpdateByAnonymous)) {
        dotNetCapabilitiesEditing.supportsUpdateByAnonymous = jsObject.supportsUpdateByAnonymous;
    }
    
    if (hasValue(jsObject.supportsUpdateByOthers)) {
        dotNetCapabilitiesEditing.supportsUpdateByOthers = jsObject.supportsUpdateByOthers;
    }
    
    if (hasValue(jsObject.supportsUpdateWithoutM)) {
        dotNetCapabilitiesEditing.supportsUpdateWithoutM = jsObject.supportsUpdateWithoutM;
    }
    
    if (hasValue(jsObject.supportsUploadWithItemId)) {
        dotNetCapabilitiesEditing.supportsUploadWithItemId = jsObject.supportsUploadWithItemId;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCapabilitiesEditing.id = geoBlazorId;
    }

    return dotNetCapabilitiesEditing;
}

