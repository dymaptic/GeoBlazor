// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file


import CapabilitiesEditing = __esri.CapabilitiesEditing;
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class CapabilitiesEditingGenerated implements IPropertyWrapper {
    public component: CapabilitiesEditing;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: CapabilitiesEditing) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsCapabilitiesEditingGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCapabilitiesEditing: any = {}

    if (hasValue(dotNetObject.supportsDeleteByAnonymous)) {
        jsCapabilitiesEditing.supportsDeleteByAnonymous = dotNetObject.supportsDeleteByAnonymous;
    }
    if (hasValue(dotNetObject.supportsDeleteByOthers)) {
        jsCapabilitiesEditing.supportsDeleteByOthers = dotNetObject.supportsDeleteByOthers;
    }
    if (hasValue(dotNetObject.supportsGeometryUpdate)) {
        jsCapabilitiesEditing.supportsGeometryUpdate = dotNetObject.supportsGeometryUpdate;
    }
    if (hasValue(dotNetObject.supportsGlobalId)) {
        jsCapabilitiesEditing.supportsGlobalId = dotNetObject.supportsGlobalId;
    }
    if (hasValue(dotNetObject.supportsRollbackOnFailure)) {
        jsCapabilitiesEditing.supportsRollbackOnFailure = dotNetObject.supportsRollbackOnFailure;
    }
    if (hasValue(dotNetObject.supportsUpdateByAnonymous)) {
        jsCapabilitiesEditing.supportsUpdateByAnonymous = dotNetObject.supportsUpdateByAnonymous;
    }
    if (hasValue(dotNetObject.supportsUpdateByOthers)) {
        jsCapabilitiesEditing.supportsUpdateByOthers = dotNetObject.supportsUpdateByOthers;
    }
    if (hasValue(dotNetObject.supportsUpdateWithoutM)) {
        jsCapabilitiesEditing.supportsUpdateWithoutM = dotNetObject.supportsUpdateWithoutM;
    }
    if (hasValue(dotNetObject.supportsUploadWithItemId)) {
        jsCapabilitiesEditing.supportsUploadWithItemId = dotNetObject.supportsUploadWithItemId;
    }
    let { default: CapabilitiesEditingWrapper } = await import('./capabilitiesEditing');
    let capabilitiesEditingWrapper = new CapabilitiesEditingWrapper(jsCapabilitiesEditing);
    capabilitiesEditingWrapper.geoBlazorId = dotNetObject.id;
    capabilitiesEditingWrapper.viewId = viewId;
    capabilitiesEditingWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(capabilitiesEditingWrapper);
    jsObjectRefs[dotNetObject.id] = capabilitiesEditingWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsCapabilitiesEditing;
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef);
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CapabilitiesEditing', e);
    }
    
    return jsCapabilitiesEditing;
}

export async function buildDotNetCapabilitiesEditingGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCapabilitiesEditing: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.supportsDeleteByAnonymous)) {
            dotNetCapabilitiesEditing.supportsDeleteByAnonymous = jsObject.supportsDeleteByAnonymous;
        }
        if (hasValue(jsObject.supportsDeleteByOthers)) {
            dotNetCapabilitiesEditing.supportsDeleteByOthers = jsObject.supportsDeleteByOthers;
        }
        if (hasValue(jsObject.supportsGeometryUpdate)) {
            dotNetCapabilitiesEditing.supportsGeometryUpdate = jsObject.supportsGeometryUpdate;
        }
        if (hasValue(jsObject.supportsGlobalId)) {
            dotNetCapabilitiesEditing.supportsGlobalId = jsObject.supportsGlobalId;
        }
        if (hasValue(jsObject.supportsRollbackOnFailure)) {
            dotNetCapabilitiesEditing.supportsRollbackOnFailure = jsObject.supportsRollbackOnFailure;
        }
        if (hasValue(jsObject.supportsUpdateByAnonymous)) {
            dotNetCapabilitiesEditing.supportsUpdateByAnonymous = jsObject.supportsUpdateByAnonymous;
        }
        if (hasValue(jsObject.supportsUpdateByOthers)) {
            dotNetCapabilitiesEditing.supportsUpdateByOthers = jsObject.supportsUpdateByOthers;
        }
        if (hasValue(jsObject.supportsUpdateWithoutM)) {
            dotNetCapabilitiesEditing.supportsUpdateWithoutM = jsObject.supportsUpdateWithoutM;
        }
        if (hasValue(jsObject.supportsUploadWithItemId)) {
            dotNetCapabilitiesEditing.supportsUploadWithItemId = jsObject.supportsUploadWithItemId;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetCapabilitiesEditing.id = k;
                break;
            }
        }
    }

    return dotNetCapabilitiesEditing;
}

