// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import AttachmentsViewModel from '@arcgis/core/widgets/Attachments/AttachmentsViewModel';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class AttachmentsViewModelGenerated implements IPropertyWrapper {
    public component: AttachmentsViewModel;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: AttachmentsViewModel) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async getAttachments(): Promise<any> {
        return await this.component.getAttachments();
    }

    // region properties
    
    async getGraphic(): Promise<any> {
        if (!hasValue(this.component.graphic)) {
            return null;
        }
        
        let { buildDotNetGraphic } = await import('./graphic');
        return buildDotNetGraphic(this.component.graphic, this.layerId, this.viewId);
    }
    async setGraphic(value: any): Promise<void> {
        let { buildJsGraphic } = await import('./graphic');
        this.component.graphic =  buildJsGraphic(value);
    }
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}


export async function buildJsAttachmentsViewModelGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsAttachmentsViewModel = new AttachmentsViewModel();
    if (hasValue(dotNetObject.graphic)) {
        let { buildJsGraphic } = await import('./graphic');
        jsAttachmentsViewModel.graphic = buildJsGraphic(dotNetObject.graphic) as any;
    }

    if (hasValue(dotNetObject.activeAttachmentInfo)) {
        jsAttachmentsViewModel.activeAttachmentInfo = dotNetObject.activeAttachmentInfo;
    }
    if (hasValue(dotNetObject.capabilities)) {
        const { id, dotNetComponentReference, layerId, viewId, ...sanitizedCapabilities } = dotNetObject.capabilities;
        jsAttachmentsViewModel.capabilities = sanitizedCapabilities;
    }
    if (hasValue(dotNetObject.mode)) {
        jsAttachmentsViewModel.mode = dotNetObject.mode;
    }
    if (hasValue(dotNetObject.supportsResizeAttachments)) {
        jsAttachmentsViewModel.supportsResizeAttachments = dotNetObject.supportsResizeAttachments;
    }

    let { default: AttachmentsViewModelWrapper } = await import('./attachmentsViewModel');
    let attachmentsViewModelWrapper = new AttachmentsViewModelWrapper(jsAttachmentsViewModel);
    attachmentsViewModelWrapper.geoBlazorId = dotNetObject.id;
    attachmentsViewModelWrapper.viewId = viewId;
    attachmentsViewModelWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(attachmentsViewModelWrapper);
    jsObjectRefs[dotNetObject.id] = attachmentsViewModelWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsAttachmentsViewModel;
    let { buildDotNetAttachmentsViewModel } = await import('./attachmentsViewModel');
    let dnInstantiatedObject = await buildDotNetAttachmentsViewModel(jsAttachmentsViewModel);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for AttachmentsViewModel', e);
    }
    
    return jsAttachmentsViewModel;
}

export async function buildDotNetAttachmentsViewModelGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAttachmentsViewModel: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.graphic)) {
            let { buildDotNetGraphic } = await import('./graphic');
            dotNetAttachmentsViewModel.graphic = buildDotNetGraphic(jsObject.graphic, layerId, viewId);
        }
        if (hasValue(jsObject.activeAttachmentInfo)) {
            dotNetAttachmentsViewModel.activeAttachmentInfo = jsObject.activeAttachmentInfo;
        }
        if (hasValue(jsObject.attachmentInfos)) {
            dotNetAttachmentsViewModel.attachmentInfos = jsObject.attachmentInfos;
        }
        if (hasValue(jsObject.capabilities)) {
            dotNetAttachmentsViewModel.capabilities = jsObject.capabilities;
        }
        if (hasValue(jsObject.mode)) {
            dotNetAttachmentsViewModel.mode = jsObject.mode;
        }
        if (hasValue(jsObject.state)) {
            dotNetAttachmentsViewModel.state = jsObject.state;
        }
        if (hasValue(jsObject.supportsResizeAttachments)) {
            dotNetAttachmentsViewModel.supportsResizeAttachments = jsObject.supportsResizeAttachments;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetAttachmentsViewModel.id = k;
                break;
            }
        }
    }

    return dotNetAttachmentsViewModel;
}

