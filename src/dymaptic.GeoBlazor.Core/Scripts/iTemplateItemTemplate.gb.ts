// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, dotNetRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetITemplateItemTemplate } from './iTemplateItemTemplate';

export async function buildJsITemplateItemTemplateGenerated(dotNetObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsTemplateItemTemplate: any = {};

    
    jsObjectRefs[dotNetObject.id] = jsTemplateItemTemplate;
    arcGisObjectRefs[dotNetObject.id] = jsTemplateItemTemplate;
    
    return jsTemplateItemTemplate;
}


export async function buildDotNetITemplateItemTemplateGenerated(jsObject: any, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetITemplateItemTemplate: any = {};
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetITemplateItemTemplate.id = geoBlazorId;
    } else if (hasValue(viewId)) {
        let dotNetRef = dotNetRefs[viewId!];
        dotNetITemplateItemTemplate.id = await dotNetRef.invokeMethodAsync('GetId');
    }
    if (hasValue(dotNetITemplateItemTemplate.id)) {
        jsObjectRefs[dotNetITemplateItemTemplate.id] ??= jsObject;
        arcGisObjectRefs[dotNetITemplateItemTemplate.id] ??= jsObject;
    }

    return dotNetITemplateItemTemplate;
}

