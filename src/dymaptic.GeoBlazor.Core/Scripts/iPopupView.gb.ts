// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetIPopupView } from './iPopupView';

export async function buildJsIPopupViewGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsPopupView: any = {};
    if (hasValue(dotNetObject.popup)) {
        let { buildJsPopupWidget } = await import('./popupWidget');
        jsPopupView.popup = await buildJsPopupWidget(dotNetObject.popup, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.popupEnabled)) {
        jsPopupView.popupEnabled = dotNetObject.popupEnabled;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsPopupView);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsPopupView;
    
    return jsPopupView;
}


export async function buildDotNetIPopupViewGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetIPopupView: any = {};
    
    if (hasValue(jsObject.popup)) {
        let { buildDotNetPopupWidget } = await import('./popupWidget');
        dotNetIPopupView.popup = await buildDotNetPopupWidget(jsObject.popup, layerId, viewId);
    }
    
    if (hasValue(jsObject.popupEnabled)) {
        dotNetIPopupView.popupEnabled = jsObject.popupEnabled;
    }
    

    return dotNetIPopupView;
}

