// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCapabilitiesData } from './capabilitiesData';

export async function buildJsCapabilitiesDataGenerated(dotNetObject: any): Promise<any> {
    let jsCapabilitiesData: any = {};

    if (hasValue(dotNetObject.isVersioned)) {
        jsCapabilitiesData.isVersioned = dotNetObject.isVersioned;
    }
    if (hasValue(dotNetObject.supportsAttachment)) {
        jsCapabilitiesData.supportsAttachment = dotNetObject.supportsAttachment;
    }
    if (hasValue(dotNetObject.supportsM)) {
        jsCapabilitiesData.supportsM = dotNetObject.supportsM;
    }
    if (hasValue(dotNetObject.supportsZ)) {
        jsCapabilitiesData.supportsZ = dotNetObject.supportsZ;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCapabilitiesData);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCapabilitiesData;
    
    try {
        let { buildDotNetCapabilitiesData } = await import('./capabilitiesData');
        let dnInstantiatedObject = await buildDotNetCapabilitiesData(jsCapabilitiesData);

        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference?.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.debug(`Circular reference in serializing type CapabilitiesData detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CapabilitiesData', e);
    }
    
    return jsCapabilitiesData;
}


export async function buildDotNetCapabilitiesDataGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCapabilitiesData: any = {};
    
    if (hasValue(jsObject.isVersioned)) {
        dotNetCapabilitiesData.isVersioned = jsObject.isVersioned;
    }
    
    if (hasValue(jsObject.supportsAttachment)) {
        dotNetCapabilitiesData.supportsAttachment = jsObject.supportsAttachment;
    }
    
    if (hasValue(jsObject.supportsM)) {
        dotNetCapabilitiesData.supportsM = jsObject.supportsM;
    }
    
    if (hasValue(jsObject.supportsZ)) {
        dotNetCapabilitiesData.supportsZ = jsObject.supportsZ;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCapabilitiesData.id = geoBlazorId;
    }

    return dotNetCapabilitiesData;
}

