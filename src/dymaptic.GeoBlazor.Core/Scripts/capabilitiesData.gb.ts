// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCapabilitiesData } from './capabilitiesData';

export async function buildJsCapabilitiesDataGenerated(dotNetObject: any): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsCapabilitiesData: any = {};

    if (hasValue(dotNetObject.isBranchVersioned)) {
        jsCapabilitiesData.isBranchVersioned = dotNetObject.isBranchVersioned;
    }
    if (hasValue(dotNetObject.isVersioned)) {
        jsCapabilitiesData.isVersioned = dotNetObject.isVersioned;
    }
    if (hasValue(dotNetObject.supportsAttachment)) {
        jsCapabilitiesData.supportsAttachment = dotNetObject.supportsAttachment;
    }
    if (hasValue(dotNetObject.supportsM)) {
        jsCapabilitiesData.supportsM = dotNetObject.supportsM;
    }
    if (hasValue(dotNetObject.supportsZ)) {
        jsCapabilitiesData.supportsZ = dotNetObject.supportsZ;
    }
    
    jsObjectRefs[dotNetObject.id] = jsCapabilitiesData;
    arcGisObjectRefs[dotNetObject.id] = jsCapabilitiesData;
    
    return jsCapabilitiesData;
}


export async function buildDotNetCapabilitiesDataGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCapabilitiesData: any = {};
    
    if (hasValue(jsObject.isBranchVersioned)) {
        dotNetCapabilitiesData.isBranchVersioned = jsObject.isBranchVersioned;
    }
    
    if (hasValue(jsObject.isVersioned)) {
        dotNetCapabilitiesData.isVersioned = jsObject.isVersioned;
    }
    
    if (hasValue(jsObject.supportsAttachment)) {
        dotNetCapabilitiesData.supportsAttachment = jsObject.supportsAttachment;
    }
    
    if (hasValue(jsObject.supportsM)) {
        dotNetCapabilitiesData.supportsM = jsObject.supportsM;
    }
    
    if (hasValue(jsObject.supportsZ)) {
        dotNetCapabilitiesData.supportsZ = jsObject.supportsZ;
    }
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCapabilitiesData.id = geoBlazorId;
    }

    return dotNetCapabilitiesData;
}

