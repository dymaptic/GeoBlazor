// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetElevationProfileLineQuerySource } from './elevationProfileLineQuerySource';

export async function buildJsElevationProfileLineQuerySourceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let jsElevationProfileLineQuerySource: any = {};
    if (hasValue(dotNetObject.hasQueryElevation) && dotNetObject.hasQueryElevation) {
        jsElevationProfileLineQuerySource.queryElevation = async (geometry,
        options) => {
            let { buildDotNetGeometry } = await import('./geometry');
            let dnGeometry = buildDotNetGeometry(geometry);

            let result = await dotNetObject.invokeMethodAsync('OnJsQueryElevation', dnGeometry,
            options);
            let { buildJsElevationLayerElevationQueryResult } = await import('./elevationLayerElevationQueryResult');
            return await buildJsElevationLayerElevationQueryResult(result, layerId, viewId);
        };
    }

    
    let jsObjectRef = DotNet.createJSObjectReference(jsElevationProfileLineQuerySource);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsElevationProfileLineQuerySource;
    
    return jsElevationProfileLineQuerySource;
}


export async function buildDotNetElevationProfileLineQuerySourceGenerated(jsObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetElevationProfileLineQuerySource: any = {};
    

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetElevationProfileLineQuerySource.id = geoBlazorId;
    }

    return dotNetElevationProfileLineQuerySource;
}

