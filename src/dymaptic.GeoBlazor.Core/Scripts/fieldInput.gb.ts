// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import FieldInput from '@arcgis/core/widgets/FeatureForm/FieldInput';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetFieldInput } from './fieldInput';

export async function buildJsFieldInputGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsFieldInput = new FieldInput();

    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(jsFieldInput);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsFieldInput;
    
    let dnInstantiatedObject = await buildDotNetFieldInput(jsFieldInput);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for FieldInput', e);
    }
    
    return jsFieldInput;
}

export async function buildDotNetFieldInputGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetFieldInput: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.field)) {
            let { buildDotNetField } = await import('./field');
            dotNetFieldInput.field = buildDotNetField(jsObject.field);
        }
        if (hasValue(jsObject.group)) {
            let { buildDotNetGroupInput } = await import('./groupInput');
            dotNetFieldInput.group = await buildDotNetGroupInput(jsObject.group);
        }
        if (hasValue(jsObject.dataType)) {
            dotNetFieldInput.dataType = jsObject.dataType;
        }
        if (hasValue(jsObject.description)) {
            dotNetFieldInput.description = jsObject.description;
        }
        if (hasValue(jsObject.domain)) {
            dotNetFieldInput.domain = jsObject.domain;
        }
        if (hasValue(jsObject.editable)) {
            dotNetFieldInput.editable = jsObject.editable;
        }
        if (hasValue(jsObject.error)) {
            dotNetFieldInput.error = jsObject.error;
        }
        if (hasValue(jsObject.hint)) {
            dotNetFieldInput.hint = jsObject.hint;
        }
        if (hasValue(jsObject.includeDate)) {
            dotNetFieldInput.includeDate = jsObject.includeDate;
        }
        if (hasValue(jsObject.includeTime)) {
            dotNetFieldInput.includeTime = jsObject.includeTime;
        }
        if (hasValue(jsObject.includeTimeOffset)) {
            dotNetFieldInput.includeTimeOffset = jsObject.includeTimeOffset;
        }
        if (hasValue(jsObject.inputType)) {
            dotNetFieldInput.inputType = jsObject.inputType;
        }
        if (hasValue(jsObject.label)) {
            dotNetFieldInput.label = jsObject.label;
        }
        if (hasValue(jsObject.maxLength)) {
            dotNetFieldInput.maxLength = jsObject.maxLength;
        }
        if (hasValue(jsObject.minLength)) {
            dotNetFieldInput.minLength = jsObject.minLength;
        }
        if (hasValue(jsObject.name)) {
            dotNetFieldInput.name = jsObject.name;
        }
        if (hasValue(jsObject.required)) {
            dotNetFieldInput.required = jsObject.required;
        }
        if (hasValue(jsObject.submittable)) {
            dotNetFieldInput.submittable = jsObject.submittable;
        }
        if (hasValue(jsObject.type)) {
            dotNetFieldInput.type = jsObject.type;
        }
        if (hasValue(jsObject.updating)) {
            dotNetFieldInput.updating = jsObject.updating;
        }
        if (hasValue(jsObject.valid)) {
            dotNetFieldInput.valid = jsObject.valid;
        }
        if (hasValue(jsObject.value)) {
            dotNetFieldInput.value = jsObject.value;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetFieldInput.id = k;
                break;
            }
        }
    }

    return dotNetFieldInput;
}

