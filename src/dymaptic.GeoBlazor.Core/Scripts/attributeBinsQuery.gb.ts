// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import AttributeBinsQuery from '@arcgis/core/rest/support/AttributeBinsQuery';
import { arcGisObjectRefs, jsObjectRefs, hasValue, sanitize, removeCircularReferences } from './arcGisJsInterop';
import { buildDotNetAttributeBinsQuery } from './attributeBinsQuery';

export async function buildJsAttributeBinsQueryGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    if (!hasValue(dotNetObject)) {
        return null;
    }

    let properties: any = {};
    if (hasValue(dotNetObject.geometry)) {
        let { buildJsGeometry } = await import('./geometry');
        properties.geometry = buildJsGeometry(dotNetObject.geometry) as any;
    }
    if (hasValue(dotNetObject.timeExtent)) {
        let { buildJsTimeExtent } = await import('./timeExtent');
        properties.timeExtent = await buildJsTimeExtent(dotNetObject.timeExtent) as any;
    }

    if (hasValue(dotNetObject.binOrder)) {
        properties.binOrder = dotNetObject.binOrder;
    }
    if (hasValue(dotNetObject.datumTransformation)) {
        properties.datumTransformation = dotNetObject.datumTransformation;
    }
    if (hasValue(dotNetObject.lowerBoundaryAlias)) {
        properties.lowerBoundaryAlias = dotNetObject.lowerBoundaryAlias;
    }
    if (hasValue(dotNetObject.outSpatialReference)) {
        properties.outSpatialReference = sanitize(dotNetObject.outSpatialReference);
    }
    if (hasValue(dotNetObject.outStatistics) && dotNetObject.outStatistics.length > 0) {
        properties.outStatistics = dotNetObject.outStatistics;
    }
    if (hasValue(dotNetObject.outTimeZone)) {
        properties.outTimeZone = dotNetObject.outTimeZone;
    }
    if (hasValue(dotNetObject.returnDistinctValues)) {
        properties.returnDistinctValues = dotNetObject.returnDistinctValues;
    }
    if (hasValue(dotNetObject.upperBoundaryAlias)) {
        properties.upperBoundaryAlias = dotNetObject.upperBoundaryAlias;
    }
    let jsAttributeBinsQuery = new AttributeBinsQuery(properties);
    
    jsObjectRefs[dotNetObject.id] = jsAttributeBinsQuery;
    arcGisObjectRefs[dotNetObject.id] = jsAttributeBinsQuery;
    
    return jsAttributeBinsQuery;
}


export async function buildDotNetAttributeBinsQueryGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetAttributeBinsQuery: any = {};
    
    if (hasValue(jsObject.geometry)) {
        let { buildDotNetGeometry } = await import('./geometry');
        dotNetAttributeBinsQuery.geometry = buildDotNetGeometry(jsObject.geometry);
    }
    
    if (hasValue(jsObject.timeExtent)) {
        let { buildDotNetTimeExtent } = await import('./timeExtent');
        dotNetAttributeBinsQuery.timeExtent = buildDotNetTimeExtent(jsObject.timeExtent);
    }
    
    if (hasValue(jsObject.binOrder)) {
        dotNetAttributeBinsQuery.binOrder = removeCircularReferences(jsObject.binOrder);
    }
    
    if (hasValue(jsObject.datumTransformation)) {
        dotNetAttributeBinsQuery.datumTransformation = jsObject.datumTransformation;
    }
    
    if (hasValue(jsObject.lowerBoundaryAlias)) {
        dotNetAttributeBinsQuery.lowerBoundaryAlias = jsObject.lowerBoundaryAlias;
    }
    
    if (hasValue(jsObject.outSpatialReference)) {
        dotNetAttributeBinsQuery.outSpatialReference = removeCircularReferences(jsObject.outSpatialReference);
    }
    
    if (hasValue(jsObject.outStatistics)) {
        dotNetAttributeBinsQuery.outStatistics = removeCircularReferences(jsObject.outStatistics);
    }
    
    if (hasValue(jsObject.outTimeZone)) {
        dotNetAttributeBinsQuery.outTimeZone = jsObject.outTimeZone;
    }
    
    if (hasValue(jsObject.returnDistinctValues)) {
        dotNetAttributeBinsQuery.returnDistinctValues = jsObject.returnDistinctValues;
    }
    
    if (hasValue(jsObject.upperBoundaryAlias)) {
        dotNetAttributeBinsQuery.upperBoundaryAlias = jsObject.upperBoundaryAlias;
    }
    

    return dotNetAttributeBinsQuery;
}

