// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import { arcGisObjectRefs, jsObjectRefs, hasValue, lookupGeoBlazorId } from './arcGisJsInterop';
import { buildDotNetCIMMarkerPlacementOnLine } from './cIMMarkerPlacementOnLine';

export async function buildJsCIMMarkerPlacementOnLineGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsCIMMarkerPlacementOnLine: any = {};

    if (hasValue(dotNetObject.angleToLine)) {
        jsCIMMarkerPlacementOnLine.angleToLine = dotNetObject.angleToLine;
    }
    if (hasValue(dotNetObject.offset)) {
        jsCIMMarkerPlacementOnLine.offset = dotNetObject.offset;
    }
    if (hasValue(dotNetObject.placePerPart)) {
        jsCIMMarkerPlacementOnLine.placePerPart = dotNetObject.placePerPart;
    }
    if (hasValue(dotNetObject.primitiveName)) {
        jsCIMMarkerPlacementOnLine.primitiveName = dotNetObject.primitiveName;
    }
    if (hasValue(dotNetObject.relativeTo)) {
        jsCIMMarkerPlacementOnLine.relativeTo = dotNetObject.relativeTo;
    }
    if (hasValue(dotNetObject.startPointOffset)) {
        jsCIMMarkerPlacementOnLine.startPointOffset = dotNetObject.startPointOffset;
    }
    
    let jsObjectRef = DotNet.createJSObjectReference(jsCIMMarkerPlacementOnLine);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsCIMMarkerPlacementOnLine;
    
    let { buildDotNetCIMMarkerPlacementOnLine } = await import('./cIMMarkerPlacementOnLine');
    let dnInstantiatedObject = await buildDotNetCIMMarkerPlacementOnLine(jsCIMMarkerPlacementOnLine);

    try {
        let seenObjects = new WeakMap();
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', 
            jsObjectRef, JSON.stringify(dnInstantiatedObject, function (key, value) {
                if (key.startsWith('_') || key === 'jsComponentReference') {
                    return undefined;
                }
                if (typeof value === 'object' && value !== null
                    && !(Array.isArray(value) && value.length === 0)) {
                    if (seenObjects.has(value)) {
                        console.warn(`Circular reference in serializing type CIMMarkerPlacementOnLine detected at path: ${key}, value: ${value.declaredClass}`);
                        return undefined;
                    }
                    seenObjects.set(value, true);
                }
                return value;
            }));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for CIMMarkerPlacementOnLine', e);
    }
    
    return jsCIMMarkerPlacementOnLine;
}


export async function buildDotNetCIMMarkerPlacementOnLineGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetCIMMarkerPlacementOnLine: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.angleToLine)) {
        dotNetCIMMarkerPlacementOnLine.angleToLine = jsObject.angleToLine;
    }
    if (hasValue(jsObject.offset)) {
        dotNetCIMMarkerPlacementOnLine.offset = jsObject.offset;
    }
    if (hasValue(jsObject.placePerPart)) {
        dotNetCIMMarkerPlacementOnLine.placePerPart = jsObject.placePerPart;
    }
    if (hasValue(jsObject.primitiveName)) {
        dotNetCIMMarkerPlacementOnLine.primitiveName = jsObject.primitiveName;
    }
    if (hasValue(jsObject.relativeTo)) {
        dotNetCIMMarkerPlacementOnLine.relativeTo = jsObject.relativeTo;
    }
    if (hasValue(jsObject.startPointOffset)) {
        dotNetCIMMarkerPlacementOnLine.startPointOffset = jsObject.startPointOffset;
    }
    if (hasValue(jsObject.type)) {
        dotNetCIMMarkerPlacementOnLine.type = jsObject.type;
    }

    let geoBlazorId = lookupGeoBlazorId(jsObject);
    if (hasValue(geoBlazorId)) {
        dotNetCIMMarkerPlacementOnLine.id = geoBlazorId;
    }

    return dotNetCIMMarkerPlacementOnLine;
}

