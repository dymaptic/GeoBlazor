// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import UI from '@arcgis/core/views/ui/UI';

import {IPropertyWrapper} from './definitions';

export default class UIGenerated implements IPropertyWrapper {
    public component: UI;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: UI) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async add(component: any,
        position: any): Promise<void> {
                let { buildJsUIAddPosition } = await import('./uIAddPosition');
let jsPosition = await buildJsUIAddPosition(position, this.layerId, this.viewId) as any;
        this.component.add(component,
            jsPosition);
    }

    async find(id: any): Promise<any> {
        return this.component.find(id);
    }

    async getComponents(position: any): Promise<any> {
                let { buildJsUIAddPosition } = await import('./uIAddPosition');
let jsPosition = await buildJsUIAddPosition(position, this.layerId, this.viewId) as any;
        return this.component.getComponents(jsPosition);
    }

    async move(component: any,
        position: any): Promise<void> {
                let { buildJsUIAddPosition } = await import('./uIAddPosition');
let jsPosition = await buildJsUIAddPosition(position, this.layerId, this.viewId) as any;
        this.component.move(component,
            jsPosition);
    }

    async remove(component: any): Promise<void> {
        this.component.remove(component);
    }

    // region properties
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export function buildJsUIGenerated(dotNetObject: any): any {
    let { id, dotNetComponentReference, ...sanitizedDotNetObject } = dotNetObject;
    return sanitizedDotNetObject;
}

export function buildDotNetUIGenerated(jsObject: any): any {
    return jsObject;
}

