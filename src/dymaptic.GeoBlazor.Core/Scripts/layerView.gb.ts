// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import LayerView from '@arcgis/core/views/layers/LayerView';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetLayerView } from './layerView';

export async function buildJsLayerViewGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};

    let jsLayerView = new LayerView(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsLayerView);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsLayerView;
    
    let dnInstantiatedObject = await buildDotNetLayerView(jsLayerView);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for LayerView', e);
    }
    
    return jsLayerView;
}

export async function buildDotNetLayerViewGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetLayerView: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.spatialReferenceSupported)) {
        dotNetLayerView.spatialReferenceSupported = jsObject.spatialReferenceSupported;
    }
    if (hasValue(jsObject.suspended)) {
        dotNetLayerView.suspended = jsObject.suspended;
    }
    if (hasValue(jsObject.updating)) {
        dotNetLayerView.updating = jsObject.updating;
    }
    if (hasValue(jsObject.visibleAtCurrentScale)) {
        dotNetLayerView.visibleAtCurrentScale = jsObject.visibleAtCurrentScale;
    }
    if (hasValue(jsObject.visibleAtCurrentTimeExtent)) {
        dotNetLayerView.visibleAtCurrentTimeExtent = jsObject.visibleAtCurrentTimeExtent;
    }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetLayerView.id = k;
                break;
            }
        }
    }

    return dotNetLayerView;
}

