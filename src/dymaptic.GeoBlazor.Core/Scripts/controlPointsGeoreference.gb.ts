// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file
import ControlPointsGeoreference from '@arcgis/core/layers/support/ControlPointsGeoreference';
import {arcGisObjectRefs, hasValue, jsObjectRefs} from './arcGisJsInterop';
import {IPropertyWrapper} from './definitions';

export default class ControlPointsGeoreferenceGenerated implements IPropertyWrapper {
    public component: ControlPointsGeoreference;
    public geoBlazorId: string | null = null;
    public viewId: string | null = null;
    public layerId: string | null = null;

    constructor(component: ControlPointsGeoreference) {
        this.component = component;
    }
    
    // region methods
   
    unwrap() {
        return this.component;
    }
    
    async toMap(sourcePoint: any): Promise<any> {
        return this.component.toMap(sourcePoint);
    }

    async toSource(point: any): Promise<any> {
        let { buildJsPoint } = await import('./point');
        let jsPoint = buildJsPoint(point) as any;
        return this.component.toSource(jsPoint);
    }

    // region properties
    
    async getControlPoints(): Promise<any> {
        if (!hasValue(this.component.controlPoints)) {
            return null;
        }
        
        let { buildDotNetControlPoint } = await import('./controlPoint');
        return await Promise.all(this.component.controlPoints.map(async i => await buildDotNetControlPoint(i)));
    }
    
    async setControlPoints(value: any): Promise<void> {
        let { buildJsControlPoint } = await import('./controlPoint');
        this.component.controlPoints = await Promise.all(value.map(async i => await buildJsControlPoint(i, this.layerId, this.viewId))) as any;
    }
    
    getProperty(prop: string): any {
        return this.component[prop];
    }
    
    setProperty(prop: string, value: any): void {
        this.component[prop] = value;
    }
}

export async function buildJsControlPointsGeoreferenceGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let jsControlPointsGeoreference = new ControlPointsGeoreference();
    if (hasValue(dotNetObject.controlPoints)) {
        let { buildJsControlPoint } = await import('./controlPoint');
        jsControlPointsGeoreference.controlPoints = await Promise.all(dotNetObject.controlPoints.map(async i => await buildJsControlPoint(i, layerId, viewId))) as any;
    }

    if (hasValue(dotNetObject.height)) {
        jsControlPointsGeoreference.height = dotNetObject.height;
    }
    if (hasValue(dotNetObject.width)) {
        jsControlPointsGeoreference.width = dotNetObject.width;
    }

    let { default: ControlPointsGeoreferenceWrapper } = await import('./controlPointsGeoreference');
    let controlPointsGeoreferenceWrapper = new ControlPointsGeoreferenceWrapper(jsControlPointsGeoreference);
    controlPointsGeoreferenceWrapper.geoBlazorId = dotNetObject.id;
    controlPointsGeoreferenceWrapper.viewId = viewId;
    controlPointsGeoreferenceWrapper.layerId = layerId;
    
    // @ts-ignore
    let jsObjectRef = DotNet.createJSObjectReference(controlPointsGeoreferenceWrapper);
    jsObjectRefs[dotNetObject.id] = controlPointsGeoreferenceWrapper;
    arcGisObjectRefs[dotNetObject.id] = jsControlPointsGeoreference;
    let { buildDotNetControlPointsGeoreference } = await import('./controlPointsGeoreference');
    let dnInstantiatedObject = await buildDotNetControlPointsGeoreference(jsControlPointsGeoreference);
    
    try {
        await dotNetObject.dotNetComponentReference.invokeMethodAsync('OnJsComponentCreated', jsObjectRef, JSON.stringify(dnInstantiatedObject));
    } catch (e) {
        console.error('Error invoking OnJsComponentCreated for ControlPointsGeoreference', e);
    }
    
    return jsControlPointsGeoreference;
}
export async function buildDotNetControlPointsGeoreferenceGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetControlPointsGeoreference: any = {
        // @ts-ignore
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
        if (hasValue(jsObject.controlPoints)) {
            let { buildDotNetControlPoint } = await import('./controlPoint');
            dotNetControlPointsGeoreference.controlPoints = await Promise.all(jsObject.controlPoints.map(async i => await buildDotNetControlPoint(i)));
        }
        if (hasValue(jsObject.height)) {
            dotNetControlPointsGeoreference.height = jsObject.height;
        }
        if (hasValue(jsObject.type)) {
            dotNetControlPointsGeoreference.type = jsObject.type;
        }
        if (hasValue(jsObject.width)) {
            dotNetControlPointsGeoreference.width = jsObject.width;
        }

    if (Object.values(arcGisObjectRefs).includes(jsObject)) {
        for (const k of Object.keys(arcGisObjectRefs)) {
            if (arcGisObjectRefs[k] === jsObject) {
                dotNetControlPointsGeoreference.id = k;
                break;
            }
        }
    }

    return dotNetControlPointsGeoreference;
}

