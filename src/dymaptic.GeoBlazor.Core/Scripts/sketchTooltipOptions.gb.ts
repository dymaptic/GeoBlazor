// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .ts file.
import SketchTooltipOptions from '@arcgis/core/views/interactive/sketch/SketchTooltipOptions';
import { arcGisObjectRefs, jsObjectRefs, hasValue } from './arcGisJsInterop';
import { buildDotNetSketchTooltipOptions } from './sketchTooltipOptions';

export async function buildJsSketchTooltipOptionsGenerated(dotNetObject: any, layerId: string | null, viewId: string | null): Promise<any> {
    let properties: any = {};
    if (hasValue(dotNetObject.visibleElements)) {
        let { buildJsVisibleElements } = await import('./visibleElements');
        properties.visibleElements = await buildJsVisibleElements(dotNetObject.visibleElements, layerId, viewId) as any;
    }

    if (hasValue(dotNetObject.enabled)) {
        properties.enabled = dotNetObject.enabled;
    }
    if (hasValue(dotNetObject.helpMessage)) {
        properties.helpMessage = dotNetObject.helpMessage;
    }
    if (hasValue(dotNetObject.helpMessageIcon)) {
        properties.helpMessageIcon = dotNetObject.helpMessageIcon;
    }
    if (hasValue(dotNetObject.inputEnabled)) {
        properties.inputEnabled = dotNetObject.inputEnabled;
    }
    let jsSketchTooltipOptions = new SketchTooltipOptions(properties);
    
    let jsObjectRef = DotNet.createJSObjectReference(jsSketchTooltipOptions);
    jsObjectRefs[dotNetObject.id] = jsObjectRef;
    arcGisObjectRefs[dotNetObject.id] = jsSketchTooltipOptions;
    
    return jsSketchTooltipOptions;
}


export async function buildDotNetSketchTooltipOptionsGenerated(jsObject: any): Promise<any> {
    if (!hasValue(jsObject)) {
        return null;
    }
    
    let dotNetSketchTooltipOptions: any = {
        jsComponentReference: DotNet.createJSObjectReference(jsObject)
    };
    if (hasValue(jsObject.visibleElements)) {
        let { buildDotNetVisibleElements } = await import('./visibleElements');
        dotNetSketchTooltipOptions.visibleElements = await buildDotNetVisibleElements(jsObject.visibleElements);
    }
    if (hasValue(jsObject.enabled)) {
        dotNetSketchTooltipOptions.enabled = jsObject.enabled;
    }
    if (hasValue(jsObject.helpMessage)) {
        dotNetSketchTooltipOptions.helpMessage = jsObject.helpMessage;
    }
    if (hasValue(jsObject.helpMessageIcon)) {
        dotNetSketchTooltipOptions.helpMessageIcon = jsObject.helpMessageIcon;
    }
    if (hasValue(jsObject.inputEnabled)) {
        dotNetSketchTooltipOptions.inputEnabled = jsObject.inputEnabled;
    }

    return dotNetSketchTooltipOptions;
}

