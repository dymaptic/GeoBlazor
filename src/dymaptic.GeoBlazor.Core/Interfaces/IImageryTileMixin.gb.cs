// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Interfaces;

/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.html">GeoBlazor Docs</a>
///     Interface for types ImageryTileLayer, WCSLayer
/// </summary>
public partial interface IImageryTileMixin : IMapComponent
{
#region Properties

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.html#iimagerytilemixinbandids-property">GeoBlazor Docs</a>
    ///     Defines a band combination using 0-based band indexes.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ImageryTileMixin.html#bandIds">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    IReadOnlyList<long>? BandIds { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.html#iimagerytilemixincopyright-property">GeoBlazor Docs</a>
    ///     The copyright text as defined by the service.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ImageryTileMixin.html#copyright">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    string? Copyright { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.html#iimagerytilemixininterpolation-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    Interpolation? Interpolation { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.html#iimagerytilemixinlegendenabled-property">GeoBlazor Docs</a>
    ///     Indicates whether the layer will be included in the legend.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ImageryTileMixin.html#legendEnabled">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    bool? LegendEnabled { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.html#iimagerytilemixinmultidimensionaldefinition-property">GeoBlazor Docs</a>
    ///     The multidimensional definitions associated with the layer.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ImageryTileMixin.html#multidimensionalDefinition">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    IReadOnlyList<DimensionalDefinition>? MultidimensionalDefinition { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.html#iimagerytilemixinmultidimensionalsubset-property">GeoBlazor Docs</a>
    ///     Represents a multidimensional subset of raster data.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ImageryTileMixin.html#multidimensionalSubset">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    MultidimensionalSubset? MultidimensionalSubset { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.html#iimagerytilemixinrenderer-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    IImageryRenderer? Renderer { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.html#iimagerytilemixinservicerasterinfo-property">GeoBlazor Docs</a>
    ///     Raster information retrieved from tiled imagery data source.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ImageryTileMixin.html#serviceRasterInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    RasterInfo? ServiceRasterInfo { get; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.html#iimagerytilemixintimeextent-property">GeoBlazor Docs</a>
    ///     The layer's time extent.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ImageryTileMixin.html#timeExtent">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    TimeExtent? TimeExtent { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.html#iimagerytilemixintimeinfo-property">GeoBlazor Docs</a>
    ///     TimeInfo provides information such as date fields that store <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#startField">start</a> and <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#endField">end</a> time for each feature and the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-TimeInfo.html#fullTimeExtent">fullTimeExtent</a> for the layer.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ImageryTileMixin.html#timeInfo">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    TimeInfo? TimeInfo { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.html#iimagerytilemixintimeoffset-property">GeoBlazor Docs</a>
    ///     A temporary offset of the time data based on a certain <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-TimeInterval.html">TimeInterval</a>.
    ///     default null
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ImageryTileMixin.html#timeOffset">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    TimeInterval? TimeOffset { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.html#iimagerytilemixinuseviewtime-property">GeoBlazor Docs</a>
    ///     Determines if the layer will update its temporal data based on the view's <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-views-View.html#timeExtent">timeExtent</a>.
    ///     default true
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ImageryTileMixin.html#useViewTime">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    bool? UseViewTime { get; set; }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the BandIds property after render.
    /// </summary>
    Task SetBandIds(IReadOnlyList<long>? value);
    
    /// <summary>
    ///    Asynchronously set the value of the Copyright property after render.
    /// </summary>
    Task SetCopyright(string? value);
    
    /// <summary>
    ///    Asynchronously set the value of the Interpolation property after render.
    /// </summary>
    Task SetInterpolation(Interpolation? value);
    
    /// <summary>
    ///    Asynchronously set the value of the LegendEnabled property after render.
    /// </summary>
    Task SetLegendEnabled(bool? value);
    
    /// <summary>
    ///    Asynchronously set the value of the MultidimensionalDefinition property after render.
    /// </summary>
    Task SetMultidimensionalDefinition(IReadOnlyList<DimensionalDefinition>? value);
    
    /// <summary>
    ///    Asynchronously set the value of the MultidimensionalSubset property after render.
    /// </summary>
    Task SetMultidimensionalSubset(MultidimensionalSubset? value);
    
    /// <summary>
    ///    Asynchronously set the value of the Renderer property after render.
    /// </summary>
    Task SetRenderer(IImageryRenderer? value);
    
    /// <summary>
    ///    Asynchronously set the value of the TimeExtent property after render.
    /// </summary>
    Task SetTimeExtent(TimeExtent? value);
    
    /// <summary>
    ///    Asynchronously set the value of the TimeInfo property after render.
    /// </summary>
    Task SetTimeInfo(TimeInfo? value);
    
    /// <summary>
    ///    Asynchronously set the value of the TimeOffset property after render.
    /// </summary>
    Task SetTimeOffset(TimeInterval? value);
    
    /// <summary>
    ///    Asynchronously set the value of the UseViewTime property after render.
    /// </summary>
    Task SetUseViewTime(bool? value);
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the BandIds property.
    /// </summary>
    Task<IReadOnlyList<long>?> GetBandIds();

    /// <summary>
    ///     Asynchronously retrieve the current value of the Copyright property.
    /// </summary>
    Task<string?> GetCopyright();

    /// <summary>
    ///     Asynchronously retrieve the current value of the Interpolation property.
    /// </summary>
    Task<Interpolation?> GetInterpolation();

    /// <summary>
    ///     Asynchronously retrieve the current value of the LegendEnabled property.
    /// </summary>
    Task<bool?> GetLegendEnabled();

    /// <summary>
    ///     Asynchronously retrieve the current value of the MultidimensionalDefinition property.
    /// </summary>
    Task<IReadOnlyList<DimensionalDefinition>?> GetMultidimensionalDefinition();

    /// <summary>
    ///     Asynchronously retrieve the current value of the MultidimensionalSubset property.
    /// </summary>
    Task<MultidimensionalSubset?> GetMultidimensionalSubset();

    /// <summary>
    ///     Asynchronously retrieve the current value of the Renderer property.
    /// </summary>
    Task<IImageryRenderer?> GetRenderer();

    /// <summary>
    ///     Asynchronously retrieve the current value of the ServiceRasterInfo property.
    /// </summary>
    Task<RasterInfo?> GetServiceRasterInfo();

    /// <summary>
    ///     Asynchronously retrieve the current value of the TimeExtent property.
    /// </summary>
    Task<TimeExtent?> GetTimeExtent();

    /// <summary>
    ///     Asynchronously retrieve the current value of the TimeInfo property.
    /// </summary>
    Task<TimeInfo?> GetTimeInfo();

    /// <summary>
    ///     Asynchronously retrieve the current value of the TimeOffset property.
    /// </summary>
    Task<TimeInterval?> GetTimeOffset();

    /// <summary>
    ///     Asynchronously retrieve the current value of the UseViewTime property.
    /// </summary>
    Task<bool?> GetUseViewTime();

#endregion

#region Collection Property Adders

    /// <summary>
    ///     Asynchronously add elements to the BandIds property.
    /// </summary>
    Task AddToBandIds(params long[] values);
    
    /// <summary>
    ///     Asynchronously add elements to the MultidimensionalDefinition property.
    /// </summary>
    Task AddToMultidimensionalDefinition(params DimensionalDefinition[] values);
    
#endregion

#region Collection Property Removers

    /// <summary>
    ///     Asynchronously remove elements from the BandIds property.
    /// </summary>
    Task RemoveFromBandIds(params long[] values);
    
    /// <summary>
    ///     Asynchronously remove elements from the MultidimensionalDefinition property.
    /// </summary>
    Task RemoveFromMultidimensionalDefinition(params DimensionalDefinition[] values);
    
#endregion

#region Public Methods

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.html#iimagerytilemixinfetchpixels-method">GeoBlazor Docs</a>
    ///     Fetches pixels for a given extent.
    ///     param extent The extent of the image to export.
    ///     param width The width of the image in pixels.
    ///     param height The height of the image in pixels.
    ///     param options The parameter options is an object with the following properties.
    ///     param options.interpolation Added at version 4.23. Defines how to interpolate pixel values.
    ///     param options.signal An <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal">AbortSignal</a> to abort the request. If canceled, the promise will be rejected with an error named `AbortError`. See also <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/AbortController">AbortController</a>.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ImageryTileMixin.html#fetchPixels">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="extent">
    /// </param>
    /// <param name="width">
    /// </param>
    /// <param name="height">
    /// </param>
    /// <param name="options">
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    Task<PixelData?> FetchPixels(Extent extent,
        int width,
        int height,
        ImageryTileMixinFetchPixelsOptions options,
        CancellationToken cancellationToken = default);
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Interfaces.IImageryTileMixin.html#iimagerytilemixinidentify-method">GeoBlazor Docs</a>
    ///     Identify pixel values at a given location.
    ///     param point Input point that defines the location to be identified.
    ///     param options Optional settings for the identify request. At version 4.25, the `transposedVariableName` was added to get pixel values from specific dimensional definitions if the <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-ImageryTileLayer.html">ImageryTileLayer</a> references a <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-support-RasterInfo.html#hasMultidimensionalTranspose">transposed multidimensional</a> image service. Set the `transposedVariableName` and `multidimensionalDefinition` get pixel values for the specified dimensional definitions from a transposed multidimensional service. If `multidimensionalDefinition` is not specified, pixel values will be returned from all the dimensional slices.
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ImageryTileMixin.html#identify">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    /// <param name="point">
    /// </param>
    /// <param name="options">
    /// </param>
    /// <param name="cancellationToken">
    ///     The CancellationToken to cancel an asynchronous operation.
    /// </param>
    [ArcGISMethod]
    Task<RasterIdentifyResult?> Identify(Point point,
        RasterIdentifyOptions options,
        CancellationToken cancellationToken = default);
    
#endregion

}
