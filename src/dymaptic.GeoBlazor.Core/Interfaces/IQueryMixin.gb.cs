// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Interfaces;

/// <summary>
///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Interfaces.IQueryMixin.html">GeoBlazor Docs</a>
///     Interface for types AttributeBinsQuery
/// </summary>
public partial interface IQueryMixin 
{
#region Properties

    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Interfaces.IQueryMixin.html#iquerymixincachehint-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    bool? CacheHint { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Interfaces.IQueryMixin.html#iquerymixindistance-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    double? Distance { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Interfaces.IQueryMixin.html#iquerymixingeometry-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    Geometry? Geometry { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Interfaces.IQueryMixin.html#iquerymixinoutspatialreference-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    SpatialReference? OutSpatialReference { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Interfaces.IQueryMixin.html#iquerymixinspatialrelationship-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    SpatialRelationship? SpatialRelationship { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Interfaces.IQueryMixin.html#iquerymixintimeextent-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    TimeExtent? TimeExtent { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Interfaces.IQueryMixin.html#iquerymixinunits-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    IQueryMixinUnits? Units { get; set; }
    
    /// <summary>
    ///     <a target="_blank" href="https://docs.geoblazor.com/pages/classes/dymaptic.GeoBlazor.Core.Interfaces.IQueryMixin.html#iquerymixinwhere-property">GeoBlazor Docs</a>
    ///     
    /// </summary>
    string? Where { get; set; }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the CacheHint property after render.
    /// </summary>
    Task SetCacheHint(bool? value);
    
    /// <summary>
    ///    Asynchronously set the value of the Distance property after render.
    /// </summary>
    Task SetDistance(double? value);
    
    /// <summary>
    ///    Asynchronously set the value of the Geometry property after render.
    /// </summary>
    Task SetGeometry(Geometry? value);
    
    /// <summary>
    ///    Asynchronously set the value of the OutSpatialReference property after render.
    /// </summary>
    Task SetOutSpatialReference(SpatialReference? value);
    
    /// <summary>
    ///    Asynchronously set the value of the SpatialRelationship property after render.
    /// </summary>
    Task SetSpatialRelationship(SpatialRelationship? value);
    
    /// <summary>
    ///    Asynchronously set the value of the TimeExtent property after render.
    /// </summary>
    Task SetTimeExtent(TimeExtent? value);
    
    /// <summary>
    ///    Asynchronously set the value of the Units property after render.
    /// </summary>
    Task SetUnits(IQueryMixinUnits? value);
    
    /// <summary>
    ///    Asynchronously set the value of the Where property after render.
    /// </summary>
    Task SetWhere(string? value);
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the CacheHint property.
    /// </summary>
    Task<bool?> GetCacheHint();

    /// <summary>
    ///     Asynchronously retrieve the current value of the Distance property.
    /// </summary>
    Task<double?> GetDistance();

    /// <summary>
    ///     Asynchronously retrieve the current value of the Geometry property.
    /// </summary>
    Task<Geometry?> GetGeometry();

    /// <summary>
    ///     Asynchronously retrieve the current value of the OutSpatialReference property.
    /// </summary>
    Task<SpatialReference?> GetOutSpatialReference();

    /// <summary>
    ///     Asynchronously retrieve the current value of the SpatialRelationship property.
    /// </summary>
    Task<SpatialRelationship?> GetSpatialRelationship();

    /// <summary>
    ///     Asynchronously retrieve the current value of the TimeExtent property.
    /// </summary>
    Task<TimeExtent?> GetTimeExtent();

    /// <summary>
    ///     Asynchronously retrieve the current value of the Units property.
    /// </summary>
    Task<IQueryMixinUnits?> GetUnits();

    /// <summary>
    ///     Asynchronously retrieve the current value of the Where property.
    /// </summary>
    Task<string?> GetWhere();

#endregion

}
