// File auto-generated by dymaptic tooling. Any changes made here will be lost on future generation. To override functionality, use the relevant root .cs file.

namespace dymaptic.GeoBlazor.Core.Interfaces;

/// <summary>
///    Interface for types BaseTileLayer, BingMapsLayer, CSVLayer, FeatureLayer, GeoJSONLayer, GeoRSSLayer, GraphicsLayer, ImageryLayer, ImageryTileLayer, KMLLayer, MapImageLayer, TileLayer, VectorTileLayer, WCSLayer, WebTileLayer, WFSLayer, WMSLayer, WMTSLayer
/// </summary>
public partial interface IScaleRangeLayer 
{
#region Properties

    /// <summary>
    ///     The maximum scale (most zoomed in) at which the layer is visible in the view.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ScaleRangeLayer.html#maxScale">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    double? MaxScale { get; set; }
    
    /// <summary>
    ///     The minimum scale (most zoomed out) at which the layer is visible in the view.
    ///     default 0
    ///     <a target="_blank" href="https://developers.arcgis.com/javascript/latest/api-reference/esri-layers-mixins-ScaleRangeLayer.html#minScale">ArcGIS Maps SDK for JavaScript</a>
    /// </summary>
    double? MinScale { get; set; }
    
#endregion

#region Property Setters

    /// <summary>
    ///    Asynchronously set the value of the MaxScale property after render.
    /// </summary>
    Task SetMaxScale(double value);
    
    /// <summary>
    ///    Asynchronously set the value of the MinScale property after render.
    /// </summary>
    Task SetMinScale(double value);
    
#endregion

#region Property Getters

    /// <summary>
    ///     Asynchronously retrieve the current value of the MaxScale property.
    /// </summary>
    Task<double?> GetMaxScale();

    /// <summary>
    ///     Asynchronously retrieve the current value of the MinScale property.
    /// </summary>
    Task<double?> GetMinScale();

#endregion

}
