using System.Collections.Immutable;
using Microsoft.CodeAnalysis;


namespace dymaptic.GeoBlazor.Core.SourceGenerator;

/// <summary>
/// Copies the JavaScript NPM Package Versions from the package.json file into the C# source code.
/// </summary>
[Generator]
public class ArcGISVersionInfoSourceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        IncrementalValueProvider<ImmutableArray<AdditionalText>> provider = context.AdditionalTextsProvider
            .Where(f => Path.GetFileName(f.Path) == "package.json")
            .Collect();

        context.RegisterSourceOutput(provider, GenerateCode);
    }

    private void GenerateCode(SourceProductionContext context, ImmutableArray<AdditionalText> files)
    {
        AdditionalText? file = files.FirstOrDefault();
        
        // Get the text of the file.
        string[]? lines = file?.GetText(context.CancellationToken)?.ToString().Split('\n');

        if (lines == null)
        {
            return;
        }
        
        string arcGisVersion = string.Empty;
        string arcGisMapComponentsVersion = string.Empty;
        string calciteVersion = string.Empty;

        foreach (string line in lines)
        {
            if (line.Trim().StartsWith("\"@arcgis/core\""))
            {
                // Extract the ArcGIS version from the package.json file.
                int startIndex = line.IndexOf(':') + 1;
                arcGisVersion = line.Substring(startIndex).Trim().Trim(',').Trim('"');
            }
            else if (line.Trim().StartsWith("\"@arcgis/map-components\""))
            {
                // Extract the ArcGIS Map Components version from the package.json file.
                int startIndex = line.IndexOf(':') + 1;
                arcGisMapComponentsVersion = line.Substring(startIndex).Trim().Trim(',').Trim('"');
            }
            else if (line.Trim().StartsWith("\"@esri/calcite-components\""))
            {
                // Extract the Calcite version from the package.json file.
                int startIndex = line.IndexOf(':') + 1;
                calciteVersion = line.Substring(startIndex).Trim().Trim(',').Trim('"');
            }

            if (arcGisVersion != string.Empty
                && arcGisMapComponentsVersion != string.Empty
                && calciteVersion != string.Empty)
            {
                break;
            }
        }

        // Build up the source code.
        string source = $$"""
                          // <auto-generated/>

                          namespace dymaptic.GeoBlazor.Core;

                          internal static class ArcGISSDKVersionInfo
                          {
                              public const string ArcGISVersion = "{{arcGisVersion}}";
                              public const string ArcGISMapComponentsVersion = "{{arcGisMapComponentsVersion}}";
                              public const string CalciteVersion = "{{calciteVersion}}";
                          }

                          """;

        // Add the source code to the compilation.
        context.AddSource($"ArcGISSDKVersionInfo.g.cs", source);
    }
}