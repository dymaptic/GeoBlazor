using Microsoft.CodeAnalysis;
using System.Collections.Immutable;
using System.Diagnostics;


namespace dymaptic.GeoBlazor.Core.SourceGenerator;

/// <summary>
///     Triggers the ESBuild build process for the GeoBlazor project, so that your JavaScript code is up to date.
/// </summary>
[Generator]
public class ESBuildLauncher : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        IncrementalValueProvider<ImmutableArray<AdditionalText>> jsFilesProvider = context.AdditionalTextsProvider
            .Where(static text => text.Path.Contains("Scripts") && text.Path.EndsWith(".ts"))
            .Collect();

        IncrementalValueProvider<(string?, string?)> optionsProvider =
            context.AnalyzerConfigOptionsProvider.Select((configProvider, _) =>
            {
                configProvider.GlobalOptions.TryGetValue("build_property.MSBuildProjectDirectory",
                    out string? projectDirectory);

                configProvider.GlobalOptions.TryGetValue("build_property.Configuration",
                    out string? configuration);

                return (projectDirectory, configuration);
            });

        context.RegisterSourceOutput(optionsProvider.Combine(jsFilesProvider), FilesChanged);
    }

    private void FilesChanged(SourceProductionContext context,
        ((string?, string?) OptionsConfig, ImmutableArray<AdditionalText> _) pipeline)
    {
        SetProjectDirectoryAndConfiguration(pipeline.OptionsConfig);
        LaunchESBuild(context);
    }

    private void SetProjectDirectoryAndConfiguration((string? projectDirectory, string? configuration) options)
    {
        if (options.projectDirectory is { } projectDirectory)
        {
            _corePath = Path.GetFullPath(projectDirectory);

            if (_corePath.Contains("GeoBlazor.Pro"))
            {
                // we are inside the Pro submodule, we can also set the Pro path
                _proPath = Path.GetFullPath(Path.Combine(_corePath, "..", "..", "..", "src",
                    "dymaptic.GeoBlazor.Pro"));
            }
        }

        if (options.configuration is { } configuration)
        {
            _configuration = configuration;
        }
    }

    private void LaunchESBuild(SourceProductionContext context)
    {
        // This will trigger the ESBuild build process.
        // The actual build is done in the dymaptic.GeoBlazor.Core project.
        // This is just a trigger to ensure that the build is done when the source generator is run.
        context.CancellationToken.ThrowIfCancellationRequested();

        ProcessStartInfo processStartInfo = new()
        {
            FileName = "pwsh",
            Arguments = $"-NoProfile -ExecutionPolicy ByPass -File \"{Path.Combine(_corePath!, "npmBuild.ps1")}\"{(
                string.Equals(_configuration, "Release", StringComparison.OrdinalIgnoreCase)
                    ? " -release"
                    : string.Empty)}",
            WorkingDirectory = _corePath!,
            RedirectStandardOutput = true,
            RedirectStandardError = true,
            UseShellExecute = false,
            CreateNoWindow = true
        };

        var process = Process.Start(processStartInfo);

        if (process == null)
        {
            return;
        }

        process.WaitForExit();

        if (_proPath is not null)
        {
            string proScriptPath = Path.Combine(_proPath, "coreTypeScriptCopy.ps1");

            ProcessStartInfo proStartInfo = new()
            {
                FileName = "pwsh",
                Arguments = $"-NoProfile -ExecutionPolicy ByPass -File \"{proScriptPath}\" -build{(
                    string.Equals(_configuration, "Release", StringComparison.OrdinalIgnoreCase)
                        ? " -release"
                        : string.Empty)}",
                WorkingDirectory = _proPath,
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                UseShellExecute = false,
                CreateNoWindow = true
            };

            var proProcess = Process.Start(proStartInfo);

            if (proProcess == null)
            {
                return;
            }

            proProcess.WaitForExit();
        }

        var gitBranchProc = Process.Start(new ProcessStartInfo
        {
            WorkingDirectory = _corePath!,
            FileName = "git",
            Arguments = "rev-parse --abbrev-ref HEAD",
            RedirectStandardOutput = true,
            RedirectStandardError = true,
            UseShellExecute = false,
            CreateNoWindow = true
        })!;

        string gitBranch = gitBranchProc.StandardOutput.ReadLine()?.Trim() ?? string.Empty;

        string source = $$"""
                          /// <auto-generated/>

                          namespace dymaptic.GeoBlazor.Core;

                          internal class ESBuildRecord
                          {
                              private const long Timestamp = {{DateTime.UtcNow.Ticks}};
                              private const string GitBranch = "{{gitBranch}}";
                              private const string Configuration = "{{_configuration}}";
                              private const bool IncludeProBuild = {{(_proPath is not null).ToString().ToLower()}};
                          }
                          """;

        context.AddSource("ESBuildRecord.g.cs", source);
    }

    private static string? _corePath;
    private static string? _proPath;
    private static string? _configuration;
}